webpackJsonp([0],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar core_1 = __webpack_require__(1);\r\nvar platform_browser_dynamic_1 = __webpack_require__(97);\r\nvar platform_browser_1 = __webpack_require__(176);\r\nvar router_deprecated_1 = __webpack_require__(280);\r\nvar common_1 = __webpack_require__(181);\r\nvar http_1 = __webpack_require__(312);\r\nvar app_component_1 = __webpack_require__(333);\r\nvar ENV_PROVIDERS = [];\r\n// depending on the env mode, enable prod mode or add debugging modules\r\nif (false) {\r\n    core_1.enableProdMode();\r\n}\r\nelse {\r\n    ENV_PROVIDERS.push(platform_browser_1.ELEMENT_PROBE_PROVIDERS);\r\n}\r\nplatform_browser_dynamic_1.bootstrap(app_component_1.AppComponent, http_1.HTTP_PROVIDERS.concat(router_deprecated_1.ROUTER_PROVIDERS, ENV_PROVIDERS, [\r\n    { provide: common_1.LocationStrategy, useClass: common_1.HashLocationStrategy } // use #/ routes, remove this for HTML5 mode\r\n]))\r\n    .catch(function (err) { return console.error(err); });\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWFpbi50cz84OGIwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpQ0FBK0IsQ0FBZSxDQUFDO0FBQy9DLHFEQUEwQixFQUFtQyxDQUFDO0FBQzlELDZDQUF3QyxHQUEyQixDQUFDO0FBQ3BFLDhDQUFpQyxHQUE0QixDQUFDO0FBQzlELG1DQUF1RCxHQUFpQixDQUFDO0FBQ3pFLGlDQUErQixHQUFlLENBQUM7QUFFL0MsMENBQTJCLEdBQWlCLENBQUM7QUFFN0MsSUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLHVFQUF1RTtBQUN2RSxFQUFFLENBQUMsQ0FBQyxLQUEyQixDQUFDLENBQUMsQ0FBQztJQUNoQyxxQkFBYyxFQUFFLENBQUM7QUFDbkIsQ0FBQztBQUFDLElBQUksQ0FBQyxDQUFDO0lBQ04sYUFBYSxDQUFDLElBQUksQ0FBQywwQ0FBdUIsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFFRCxvQ0FBUyxDQUFDLDRCQUFZLEVBRWYscUJBQWMsUUFDZCxvQ0FBZ0IsRUFDaEIsYUFBYTtJQUNoQixFQUFFLE9BQU8sRUFBRSx5QkFBZ0IsRUFBRSxRQUFRLEVBQUUsNkJBQW9CLEVBQUUsQ0FBQyw0Q0FBNEM7RUFDM0csQ0FBQztLQUNELEtBQUssQ0FBQyxhQUFHLElBQUksY0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFDIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmFibGVQcm9kTW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBib290c3RyYXAgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xyXG5pbXBvcnQgeyBFTEVNRU5UX1BST0JFX1BST1ZJREVSUyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBST1VURVJfUFJPVklERVJTIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyLWRlcHJlY2F0ZWQnO1xyXG5pbXBvcnQgeyBIYXNoTG9jYXRpb25TdHJhdGVneSwgTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEhUVFBfUFJPVklERVJTIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XHJcblxyXG5pbXBvcnQge0FwcENvbXBvbmVudH0gZnJvbSAnLi9hcHAuY29tcG9uZW50JztcclxuXHJcbmNvbnN0IEVOVl9QUk9WSURFUlMgPSBbXTtcclxuLy8gZGVwZW5kaW5nIG9uIHRoZSBlbnYgbW9kZSwgZW5hYmxlIHByb2QgbW9kZSBvciBhZGQgZGVidWdnaW5nIG1vZHVsZXNcclxuaWYgKHByb2Nlc3MuZW52LkVOViA9PT0gJ2J1aWxkJykge1xyXG4gIGVuYWJsZVByb2RNb2RlKCk7XHJcbn0gZWxzZSB7XHJcbiAgRU5WX1BST1ZJREVSUy5wdXNoKEVMRU1FTlRfUFJPQkVfUFJPVklERVJTKTtcclxufVxyXG5cclxuYm9vdHN0cmFwKEFwcENvbXBvbmVudCwgW1xyXG4gICAgLy8gVGhlc2UgYXJlIGRlcGVuZGVuY2llcyBvZiBvdXIgQXBwXHJcbiAgICAuLi5IVFRQX1BST1ZJREVSUyxcclxuICAgIC4uLlJPVVRFUl9QUk9WSURFUlMsXHJcbiAgICAuLi5FTlZfUFJPVklERVJTLFxyXG4gICAgeyBwcm92aWRlOiBMb2NhdGlvblN0cmF0ZWd5LCB1c2VDbGFzczogSGFzaExvY2F0aW9uU3RyYXRlZ3kgfSAvLyB1c2UgIy8gcm91dGVzLCByZW1vdmUgdGhpcyBmb3IgSFRNTDUgbW9kZVxyXG4gIF0pXHJcbiAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vfi90c2xpbnQtbG9hZGVyIS4vYXBwL21haW4udHNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 333:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar core_1 = __webpack_require__(1);\r\nvar router_1 = __webpack_require__(334);\r\nvar oauth_service_1 = __webpack_require__(356);\r\nvar home_component_1 = __webpack_require__(365);\r\nvar secure_component_1 = __webpack_require__(367);\r\nvar oidc = __webpack_require__(370);\r\nvar AppComponent = (function () {\r\n    function AppComponent(oauthService) {\r\n        this.oauthService = oauthService;\r\n        console.log('App initializing');\r\n        console.log(oidc);\r\n        oidc.Log.logger = console;\r\n        oidc.Log.level = oidc.Log.INFO;\r\n        var settings = {\r\n            authority: '/',\r\n            client_id: 'js_oidc',\r\n            redirect_uri: window.location.protocol + \"//\" + window.location.host + \"?login\",\r\n            post_logout_redirect_uri: window.location.protocol + \"//\" + window.location.host + \"?logout\",\r\n            response_type: 'id_token token',\r\n            scope: 'openid email roles',\r\n            filterProtocolClaims: true,\r\n            loadUserInfo: true\r\n        };\r\n        this.client = new oidc.OidcClient(settings);\r\n        console.log('Checking if this is a login callback');\r\n        if (window.location.href.indexOf(\"?login\") >= 0) {\r\n            this.processSigninResponse();\r\n        }\r\n        else if (window.location.href.indexOf(\"?logout\") >= 0) {\r\n        }\r\n    }\r\n    AppComponent.prototype.login = function () {\r\n        //this.oauthService.initImplicitFlow();\r\n        this.client.createSigninRequest({ data: { bar: 15 } }).then(function (req) {\r\n            console.log(\"signin request\", req, \"<a href='\" + req.url + \"'>go signin</a>\");\r\n            window.location = req.url;\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n        });\r\n    };\r\n    AppComponent.prototype.processSigninResponse = function () {\r\n        debugger;\r\n        this.client.processSigninResponse().then(function (response) {\r\n            this.signinResponse = response;\r\n            console.log(\"signin response\", this.signinResponse);\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n        });\r\n    };\r\n    AppComponent = __decorate([\r\n        core_1.Component({\r\n            selector: 'my-app',\r\n            providers: [oauth_service_1.OAuthService, router_1.ROUTER_PROVIDERS],\r\n            directives: [router_1.ROUTER_DIRECTIVES],\r\n            template: __webpack_require__(371)\r\n        }),\r\n        router_1.Routes([\r\n            { path: '/', component: home_component_1.HomeComponent },\r\n            { path: '/secure', component: secure_component_1.SecureComponent },\r\n        ]), \r\n        __metadata('design:paramtypes', [oauth_service_1.OAuthService])\r\n    ], AppComponent);\r\n    return AppComponent;\r\n}());\r\nexports.AppComponent = AppComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYXBwLmNvbXBvbmVudC50cz9kNjNjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpQ0FBMEIsQ0FBZSxDQUFDO0FBRTFDLG1DQUE0RCxHQUFpQixDQUFDO0FBRTlFLDBDQUE2QixHQUErQixDQUFDO0FBRTdELDJDQUE4QixHQUF1QixDQUFDO0FBQ3RELDZDQUFnQyxHQUEyQixDQUFDO0FBRTVELElBQUksSUFBSSxHQUFHLG1CQUFPLENBQUMsR0FBYSxDQUFDLENBQUM7QUFhbEM7SUFJRSxzQkFBb0IsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFFNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBRS9CLElBQUksUUFBUSxHQUFHO1lBQ2IsU0FBUyxFQUFFLEdBQUc7WUFDZCxTQUFTLEVBQUUsU0FBUztZQUNwQixZQUFZLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLFFBQVE7WUFDL0Usd0JBQXdCLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLFNBQVM7WUFDNUYsYUFBYSxFQUFFLGdCQUFnQjtZQUMvQixLQUFLLEVBQUUsb0JBQW9CO1lBQzNCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsWUFBWSxFQUFFLElBQUk7U0FDbkIsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUNwRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUMvQixDQUFDO1FBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhELENBQUM7SUFDSCxDQUFDO0lBRU0sNEJBQUssR0FBWjtRQUNFLHVDQUF1QztRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHO1lBQ3ZFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLFdBQVcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLGlCQUFpQixDQUFDLENBQUM7WUFDOUUsTUFBTSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUc7WUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHRCw0Q0FBcUIsR0FBckI7UUFDRSxRQUFRLENBQUM7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsUUFBUTtZQUN6RCxJQUFJLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQztZQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHO1lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBaEVIO1FBQUMsZ0JBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxRQUFRO1lBQ2xCLFNBQVMsRUFBRSxDQUFDLDRCQUFZLEVBQUUseUJBQWdCLENBQUM7WUFDM0MsVUFBVSxFQUFFLENBQUMsMEJBQWlCLENBQUM7WUFDL0IsUUFBUSxFQUFFLG1CQUFPLENBQUMsR0FBc0IsQ0FBQztTQUUxQyxDQUFDO1FBQ0QsZUFBTSxDQUFDO1lBQ04sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSw4QkFBYSxFQUFFO1lBQ3ZDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsa0NBQWUsRUFBRTtTQUNoRCxDQUFDOztvQkFBQTtJQXVERixtQkFBQztBQUFELENBQUM7QUF0RFksb0JBQVksZUFzRHhCIiwiZmlsZSI6IjMzMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIVFRQX1BST1ZJREVSUyB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xyXG5pbXBvcnQgeyBST1VURVJfUFJPVklERVJTLCBST1VURVJfRElSRUNUSVZFUywgUm91dGVzIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuXHJcbmltcG9ydCB7IE9BdXRoU2VydmljZSB9IGZyb20gJ2FuZ3VsYXIyLW9hdXRoMi9vYXV0aC1zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IEhvbWVDb21wb25lbnQgfSBmcm9tICcuL21haW4vaG9tZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTZWN1cmVDb21wb25lbnQgfSBmcm9tICcuL3NlY3VyZS9zZWN1cmUuY29tcG9uZW50JztcclxuXHJcbnZhciBvaWRjID0gcmVxdWlyZSgnb2lkYy1jbGllbnQnKTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbXktYXBwJyxcclxuICBwcm92aWRlcnM6IFtPQXV0aFNlcnZpY2UsIFJPVVRFUl9QUk9WSURFUlNdLFxyXG4gIGRpcmVjdGl2ZXM6IFtST1VURVJfRElSRUNUSVZFU10sXHJcbiAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vYXBwLmNvbXBvbmVudC5odG1sJylcclxuICAvLyAgc3R5bGVzOiBbcmVxdWlyZSgnLi9hcHAuY29tcG9uZW50LnNjc3MnKV0sXHJcbn0pXHJcbkBSb3V0ZXMoW1xyXG4gIHsgcGF0aDogJy8nLCBjb21wb25lbnQ6IEhvbWVDb21wb25lbnQgfSxcclxuICB7IHBhdGg6ICcvc2VjdXJlJywgY29tcG9uZW50OiBTZWN1cmVDb21wb25lbnQgfSxcclxuXSlcclxuZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XHJcblxyXG4gIHByaXZhdGUgY2xpZW50OiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb2F1dGhTZXJ2aWNlOiBPQXV0aFNlcnZpY2UpIHsgLy9wcml2YXRlIGFwaTogQXBpU2VydmljZSkge1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdBcHAgaW5pdGlhbGl6aW5nJyk7XHJcbiAgICBjb25zb2xlLmxvZyhvaWRjKTtcclxuICAgIFxyXG4gICAgb2lkYy5Mb2cubG9nZ2VyID0gY29uc29sZTtcclxuICAgIG9pZGMuTG9nLmxldmVsID0gb2lkYy5Mb2cuSU5GTztcclxuXHJcbiAgICB2YXIgc2V0dGluZ3MgPSB7XHJcbiAgICAgIGF1dGhvcml0eTogJy8nLFxyXG4gICAgICBjbGllbnRfaWQ6ICdqc19vaWRjJyxcclxuICAgICAgcmVkaXJlY3RfdXJpOiB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArIFwiP2xvZ2luXCIsXHJcbiAgICAgIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTogd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3QgKyBcIj9sb2dvdXRcIixcclxuICAgICAgcmVzcG9uc2VfdHlwZTogJ2lkX3Rva2VuIHRva2VuJyxcclxuICAgICAgc2NvcGU6ICdvcGVuaWQgZW1haWwgcm9sZXMnLFxyXG4gICAgICBmaWx0ZXJQcm90b2NvbENsYWltczogdHJ1ZSxcclxuICAgICAgbG9hZFVzZXJJbmZvOiB0cnVlXHJcbiAgICB9O1xyXG4gICAgdGhpcy5jbGllbnQgPSBuZXcgb2lkYy5PaWRjQ2xpZW50KHNldHRpbmdzKTtcclxuICAgIFxyXG5cclxuICAgIGNvbnNvbGUubG9nKCdDaGVja2luZyBpZiB0aGlzIGlzIGEgbG9naW4gY2FsbGJhY2snKTtcclxuICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKFwiP2xvZ2luXCIpID49IDApIHtcclxuICAgICAgdGhpcy5wcm9jZXNzU2lnbmluUmVzcG9uc2UoKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoXCI/bG9nb3V0XCIpID49IDApIHtcclxuICAgICAgICAvLyBwcm9jZXNzU2lnbm91dFJlc3BvbnNlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbG9naW4oKSB7XHJcbiAgICAvL3RoaXMub2F1dGhTZXJ2aWNlLmluaXRJbXBsaWNpdEZsb3coKTtcclxuICAgIHRoaXMuY2xpZW50LmNyZWF0ZVNpZ25pblJlcXVlc3QoeyBkYXRhOiB7IGJhcjogMTUgfSB9KS50aGVuKGZ1bmN0aW9uIChyZXEpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJzaWduaW4gcmVxdWVzdFwiLCByZXEsIFwiPGEgaHJlZj0nXCIgKyByZXEudXJsICsgXCInPmdvIHNpZ25pbjwvYT5cIik7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHJlcS51cmw7XHJcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2lnbmluUmVzcG9uc2U7XHJcbiAgcHJvY2Vzc1NpZ25pblJlc3BvbnNlKCkge1xyXG4gICAgZGVidWdnZXI7XHJcbiAgICB0aGlzLmNsaWVudC5wcm9jZXNzU2lnbmluUmVzcG9uc2UoKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICB0aGlzLnNpZ25pblJlc3BvbnNlID0gcmVzcG9uc2U7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwic2lnbmluIHJlc3BvbnNlXCIsIHRoaXMuc2lnbmluUmVzcG9uc2UpO1xyXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L3RzbGludC1sb2FkZXIhLi9hcHAvYXBwLmNvbXBvbmVudC50c1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 334:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n/**\n* @module\n* @description\n* Maps application URLs into application states, to support deep-linking and navigation.\n*/\nvar router_1 = __webpack_require__(335);\nexports.Router = router_1.Router;\nexports.RouterOutletMap = router_1.RouterOutletMap;\nvar segments_1 = __webpack_require__(341);\nexports.RouteSegment = segments_1.RouteSegment;\nexports.UrlSegment = segments_1.UrlSegment;\nexports.Tree = segments_1.Tree;\nexports.UrlTree = segments_1.UrlTree;\nexports.RouteTree = segments_1.RouteTree;\nvar decorators_1 = __webpack_require__(349);\nexports.Routes = decorators_1.Routes;\nvar metadata_1 = __webpack_require__(342);\nexports.Route = metadata_1.Route;\nvar router_url_serializer_1 = __webpack_require__(351);\nexports.RouterUrlSerializer = router_url_serializer_1.RouterUrlSerializer;\nexports.DefaultRouterUrlSerializer = router_url_serializer_1.DefaultRouterUrlSerializer;\nvar router_providers_1 = __webpack_require__(352);\nexports.ROUTER_PROVIDERS = router_providers_1.ROUTER_PROVIDERS;\nvar router_outlet_1 = __webpack_require__(354);\nvar router_link_1 = __webpack_require__(355);\n/**\n * A list of directives. To use the router directives like {@link RouterOutlet} and\n * {@link RouterLink}, add this to your `directives` array in the {@link View} decorator of your\n * component.\n *\n * ```\n * import {Component} from '@angular/core';\n * import {ROUTER_DIRECTIVES, Routes} from '@angular/router-deprecated';\n *\n * @Component({directives: [ROUTER_DIRECTIVES]})\n * @RouteConfig([\n *  {...},\n * ])\n * class AppCmp {\n *    // ...\n * }\n *\n * bootstrap(AppCmp);\n * ```\n */\nexports.ROUTER_DIRECTIVES = [router_outlet_1.RouterOutlet, router_link_1.RouterLink];\n//# sourceMappingURL=index.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9pbmRleC5qcz82NTE1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxtQkFBbUI7QUFDL0UsSUFBSSxpQkFBaUIsOENBQThDLFdBQVc7QUFDOUU7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsMEJBQTBCO0FBQ3JDO0FBQ0EsZUFBZSxnQ0FBZ0M7QUFDL0M7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuKiBAbW9kdWxlXG4qIEBkZXNjcmlwdGlvblxuKiBNYXBzIGFwcGxpY2F0aW9uIFVSTHMgaW50byBhcHBsaWNhdGlvbiBzdGF0ZXMsIHRvIHN1cHBvcnQgZGVlcC1saW5raW5nIGFuZCBuYXZpZ2F0aW9uLlxuKi9cbnZhciByb3V0ZXJfMSA9IHJlcXVpcmUoJy4vc3JjL3JvdXRlcicpO1xuZXhwb3J0cy5Sb3V0ZXIgPSByb3V0ZXJfMS5Sb3V0ZXI7XG5leHBvcnRzLlJvdXRlck91dGxldE1hcCA9IHJvdXRlcl8xLlJvdXRlck91dGxldE1hcDtcbnZhciBzZWdtZW50c18xID0gcmVxdWlyZSgnLi9zcmMvc2VnbWVudHMnKTtcbmV4cG9ydHMuUm91dGVTZWdtZW50ID0gc2VnbWVudHNfMS5Sb3V0ZVNlZ21lbnQ7XG5leHBvcnRzLlVybFNlZ21lbnQgPSBzZWdtZW50c18xLlVybFNlZ21lbnQ7XG5leHBvcnRzLlRyZWUgPSBzZWdtZW50c18xLlRyZWU7XG5leHBvcnRzLlVybFRyZWUgPSBzZWdtZW50c18xLlVybFRyZWU7XG5leHBvcnRzLlJvdXRlVHJlZSA9IHNlZ21lbnRzXzEuUm91dGVUcmVlO1xudmFyIGRlY29yYXRvcnNfMSA9IHJlcXVpcmUoJy4vc3JjL21ldGFkYXRhL2RlY29yYXRvcnMnKTtcbmV4cG9ydHMuUm91dGVzID0gZGVjb3JhdG9yc18xLlJvdXRlcztcbnZhciBtZXRhZGF0YV8xID0gcmVxdWlyZSgnLi9zcmMvbWV0YWRhdGEvbWV0YWRhdGEnKTtcbmV4cG9ydHMuUm91dGUgPSBtZXRhZGF0YV8xLlJvdXRlO1xudmFyIHJvdXRlcl91cmxfc2VyaWFsaXplcl8xID0gcmVxdWlyZSgnLi9zcmMvcm91dGVyX3VybF9zZXJpYWxpemVyJyk7XG5leHBvcnRzLlJvdXRlclVybFNlcmlhbGl6ZXIgPSByb3V0ZXJfdXJsX3NlcmlhbGl6ZXJfMS5Sb3V0ZXJVcmxTZXJpYWxpemVyO1xuZXhwb3J0cy5EZWZhdWx0Um91dGVyVXJsU2VyaWFsaXplciA9IHJvdXRlcl91cmxfc2VyaWFsaXplcl8xLkRlZmF1bHRSb3V0ZXJVcmxTZXJpYWxpemVyO1xudmFyIHJvdXRlcl9wcm92aWRlcnNfMSA9IHJlcXVpcmUoJy4vc3JjL3JvdXRlcl9wcm92aWRlcnMnKTtcbmV4cG9ydHMuUk9VVEVSX1BST1ZJREVSUyA9IHJvdXRlcl9wcm92aWRlcnNfMS5ST1VURVJfUFJPVklERVJTO1xudmFyIHJvdXRlcl9vdXRsZXRfMSA9IHJlcXVpcmUoJy4vc3JjL2RpcmVjdGl2ZXMvcm91dGVyX291dGxldCcpO1xudmFyIHJvdXRlcl9saW5rXzEgPSByZXF1aXJlKCcuL3NyYy9kaXJlY3RpdmVzL3JvdXRlcl9saW5rJyk7XG4vKipcbiAqIEEgbGlzdCBvZiBkaXJlY3RpdmVzLiBUbyB1c2UgdGhlIHJvdXRlciBkaXJlY3RpdmVzIGxpa2Uge0BsaW5rIFJvdXRlck91dGxldH0gYW5kXG4gKiB7QGxpbmsgUm91dGVyTGlua30sIGFkZCB0aGlzIHRvIHlvdXIgYGRpcmVjdGl2ZXNgIGFycmF5IGluIHRoZSB7QGxpbmsgVmlld30gZGVjb3JhdG9yIG9mIHlvdXJcbiAqIGNvbXBvbmVudC5cbiAqXG4gKiBgYGBcbiAqIGltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqIGltcG9ydCB7Uk9VVEVSX0RJUkVDVElWRVMsIFJvdXRlc30gZnJvbSAnQGFuZ3VsYXIvcm91dGVyLWRlcHJlY2F0ZWQnO1xuICpcbiAqIEBDb21wb25lbnQoe2RpcmVjdGl2ZXM6IFtST1VURVJfRElSRUNUSVZFU119KVxuICogQFJvdXRlQ29uZmlnKFtcbiAqICB7Li4ufSxcbiAqIF0pXG4gKiBjbGFzcyBBcHBDbXAge1xuICogICAgLy8gLi4uXG4gKiB9XG4gKlxuICogYm9vdHN0cmFwKEFwcENtcCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0cy5ST1VURVJfRElSRUNUSVZFUyA9IFtyb3V0ZXJfb3V0bGV0XzEuUm91dGVyT3V0bGV0LCByb3V0ZXJfbGlua18xLlJvdXRlckxpbmtdO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gMzM0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 335:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar lang_1 = __webpack_require__(336);\nvar collection_1 = __webpack_require__(337);\nvar async_1 = __webpack_require__(338);\nvar collection_2 = __webpack_require__(337);\nvar core_2 = __webpack_require__(1);\nvar recognize_1 = __webpack_require__(340);\nvar link_1 = __webpack_require__(344);\nvar segments_1 = __webpack_require__(341);\nvar lifecycle_reflector_1 = __webpack_require__(348);\nvar constants_1 = __webpack_require__(343);\n/**\n * @internal\n */\nvar RouterOutletMap = (function () {\n    function RouterOutletMap() {\n        /** @internal */\n        this._outlets = {};\n    }\n    RouterOutletMap.prototype.registerOutlet = function (name, outlet) { this._outlets[name] = outlet; };\n    return RouterOutletMap;\n}());\nexports.RouterOutletMap = RouterOutletMap;\n/**\n * The `Router` is responsible for mapping URLs to components.\n *\n * You can see the state of the router by inspecting the read-only fields `router.urlTree`\n * and `router.routeTree`.\n */\nvar Router = (function () {\n    /**\n     * @internal\n     */\n    function Router(_rootComponent, _rootComponentType, _componentResolver, _urlSerializer, _routerOutletMap, _location) {\n        this._rootComponent = _rootComponent;\n        this._rootComponentType = _rootComponentType;\n        this._componentResolver = _componentResolver;\n        this._urlSerializer = _urlSerializer;\n        this._routerOutletMap = _routerOutletMap;\n        this._location = _location;\n        this._changes = new async_1.EventEmitter();\n        this._prevTree = this._createInitialTree();\n        this._setUpLocationChangeListener();\n        this.navigateByUrl(this._location.path());\n    }\n    Object.defineProperty(Router.prototype, \"urlTree\", {\n        /**\n         * Returns the current url tree.\n         */\n        get: function () { return this._urlTree; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Router.prototype, \"routeTree\", {\n        /**\n         * Returns the current route tree.\n         */\n        get: function () { return this._prevTree; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Router.prototype, \"changes\", {\n        /**\n         * An observable or url changes from the router.\n         */\n        get: function () { return this._changes; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     * ```\n     */\n    Router.prototype.navigateByUrl = function (url) {\n        return this._navigate(this._urlSerializer.parse(url));\n    };\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no segment is provided, the navigation is absolute.\n     *\n     * ### Usage\n     *\n     * ```\n     * router.navigate(['team', 33, 'team', '11], segment);\n     * ```\n     */\n    Router.prototype.navigate = function (commands, segment) {\n        return this._navigate(this.createUrlTree(commands, segment));\n    };\n    /**\n     * @internal\n     */\n    Router.prototype.dispose = function () { async_1.ObservableWrapper.dispose(this._locationSubscription); };\n    /**\n     * Applies an array of commands to the current url tree and creates\n     * a new url tree.\n     *\n     * When given a segment, applies the given commands starting from the segment.\n     * When not given a segment, applies the given command starting from the root.\n     *\n     * ### Usage\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static fragments like this\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the segment points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], segment);\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], segment);\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], segment);\n     * ```\n     */\n    Router.prototype.createUrlTree = function (commands, segment) {\n        var s = lang_1.isPresent(segment) ? segment : this._prevTree.root;\n        return link_1.link(s, this._prevTree, this.urlTree, commands);\n    };\n    /**\n     * Serializes a {@link UrlTree} into a string.\n     */\n    Router.prototype.serializeUrl = function (url) { return this._urlSerializer.serialize(url); };\n    Router.prototype._createInitialTree = function () {\n        var root = new segments_1.RouteSegment([new segments_1.UrlSegment(\"\", {}, null)], {}, constants_1.DEFAULT_OUTLET_NAME, this._rootComponentType, null);\n        return new segments_1.RouteTree(new segments_1.TreeNode(root, []));\n    };\n    Router.prototype._setUpLocationChangeListener = function () {\n        var _this = this;\n        this._locationSubscription = this._location.subscribe(function (change) { _this._navigate(_this._urlSerializer.parse(change['url'])); });\n    };\n    Router.prototype._navigate = function (url) {\n        var _this = this;\n        this._urlTree = url;\n        return recognize_1.recognize(this._componentResolver, this._rootComponentType, url)\n            .then(function (currTree) {\n            return new _LoadSegments(currTree, _this._prevTree)\n                .load(_this._routerOutletMap, _this._rootComponent)\n                .then(function (updated) {\n                if (updated) {\n                    _this._prevTree = currTree;\n                    _this._location.go(_this._urlSerializer.serialize(_this._urlTree));\n                    _this._changes.emit(null);\n                }\n            });\n        });\n    };\n    return Router;\n}());\nexports.Router = Router;\nvar _LoadSegments = (function () {\n    function _LoadSegments(currTree, prevTree) {\n        this.currTree = currTree;\n        this.prevTree = prevTree;\n        this.deactivations = [];\n        this.performMutation = true;\n    }\n    _LoadSegments.prototype.load = function (parentOutletMap, rootComponent) {\n        var _this = this;\n        var prevRoot = lang_1.isPresent(this.prevTree) ? segments_1.rootNode(this.prevTree) : null;\n        var currRoot = segments_1.rootNode(this.currTree);\n        return this.canDeactivate(currRoot, prevRoot, parentOutletMap, rootComponent)\n            .then(function (res) {\n            _this.performMutation = true;\n            if (res) {\n                _this.loadChildSegments(currRoot, prevRoot, parentOutletMap, [rootComponent]);\n            }\n            return res;\n        });\n    };\n    _LoadSegments.prototype.canDeactivate = function (currRoot, prevRoot, outletMap, rootComponent) {\n        var _this = this;\n        this.performMutation = false;\n        this.loadChildSegments(currRoot, prevRoot, outletMap, [rootComponent]);\n        var allPaths = async_1.PromiseWrapper.all(this.deactivations.map(function (r) { return _this.checkCanDeactivatePath(r); }));\n        return allPaths.then(function (values) { return values.filter(function (v) { return v; }).length === values.length; });\n    };\n    _LoadSegments.prototype.checkCanDeactivatePath = function (path) {\n        var _this = this;\n        var curr = async_1.PromiseWrapper.resolve(true);\n        var _loop_1 = function(p) {\n            curr = curr.then(function (_) {\n                if (lifecycle_reflector_1.hasLifecycleHook(\"routerCanDeactivate\", p)) {\n                    return p.routerCanDeactivate(_this.prevTree, _this.currTree);\n                }\n                else {\n                    return _;\n                }\n            });\n        };\n        for (var _i = 0, _a = collection_1.ListWrapper.reversed(path); _i < _a.length; _i++) {\n            var p = _a[_i];\n            _loop_1(p);\n        }\n        return curr;\n    };\n    _LoadSegments.prototype.loadChildSegments = function (currNode, prevNode, outletMap, components) {\n        var _this = this;\n        var prevChildren = lang_1.isPresent(prevNode) ?\n            prevNode.children.reduce(function (m, c) {\n                m[c.value.outlet] = c;\n                return m;\n            }, {}) :\n            {};\n        currNode.children.forEach(function (c) {\n            _this.loadSegments(c, prevChildren[c.value.outlet], outletMap, components);\n            collection_2.StringMapWrapper.delete(prevChildren, c.value.outlet);\n        });\n        collection_2.StringMapWrapper.forEach(prevChildren, function (v, k) { return _this.unloadOutlet(outletMap._outlets[k], components); });\n    };\n    _LoadSegments.prototype.loadSegments = function (currNode, prevNode, parentOutletMap, components) {\n        var curr = currNode.value;\n        var prev = lang_1.isPresent(prevNode) ? prevNode.value : null;\n        var outlet = this.getOutlet(parentOutletMap, currNode.value);\n        if (segments_1.equalSegments(curr, prev)) {\n            this.loadChildSegments(currNode, prevNode, outlet.outletMap, components.concat([outlet.loadedComponent]));\n        }\n        else {\n            this.unloadOutlet(outlet, components);\n            if (this.performMutation) {\n                var outletMap = new RouterOutletMap();\n                var loadedComponent = this.loadNewSegment(outletMap, curr, prev, outlet);\n                this.loadChildSegments(currNode, prevNode, outletMap, components.concat([loadedComponent]));\n            }\n        }\n    };\n    _LoadSegments.prototype.loadNewSegment = function (outletMap, curr, prev, outlet) {\n        var resolved = core_1.ReflectiveInjector.resolve([core_1.provide(RouterOutletMap, { useValue: outletMap }), core_1.provide(segments_1.RouteSegment, { useValue: curr })]);\n        var ref = outlet.load(segments_1.routeSegmentComponentFactory(curr), resolved, outletMap);\n        if (lifecycle_reflector_1.hasLifecycleHook(\"routerOnActivate\", ref.instance)) {\n            ref.instance.routerOnActivate(curr, prev, this.currTree, this.prevTree);\n        }\n        return ref.instance;\n    };\n    _LoadSegments.prototype.getOutlet = function (outletMap, segment) {\n        var outlet = outletMap._outlets[segment.outlet];\n        if (lang_1.isBlank(outlet)) {\n            if (segment.outlet == constants_1.DEFAULT_OUTLET_NAME) {\n                throw new core_2.BaseException(\"Cannot find default outlet\");\n            }\n            else {\n                throw new core_2.BaseException(\"Cannot find the outlet \" + segment.outlet);\n            }\n        }\n        return outlet;\n    };\n    _LoadSegments.prototype.unloadOutlet = function (outlet, components) {\n        var _this = this;\n        if (lang_1.isPresent(outlet) && outlet.isLoaded) {\n            collection_2.StringMapWrapper.forEach(outlet.outletMap._outlets, function (v, k) { return _this.unloadOutlet(v, components); });\n            if (this.performMutation) {\n                outlet.unload();\n            }\n            else {\n                this.deactivations.push(components.concat([outlet.loadedComponent]));\n            }\n        }\n    };\n    return _LoadSegments;\n}());\n//# sourceMappingURL=router.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 336:
/***/ function(module, exports) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar globalScope;\nif (typeof window === 'undefined') {\n    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n        globalScope = self;\n    }\n    else {\n        globalScope = global;\n    }\n}\nelse {\n    globalScope = window;\n}\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\nexports.scheduleMicroTask = scheduleMicroTask;\nexports.IS_DART = false;\n// Need to declare a new variable for global here since TypeScript\n// exports the original value of the symbol.\nvar _global = globalScope;\nexports.global = _global;\nexports.Type = Function;\nfunction getTypeNameForDebugging(type) {\n    if (type['name']) {\n        return type['name'];\n    }\n    return typeof type;\n}\nexports.getTypeNameForDebugging = getTypeNameForDebugging;\nexports.Math = _global.Math;\nexports.Date = _global.Date;\nvar _devMode = true;\nvar _modeLocked = false;\nfunction lockMode() {\n    _modeLocked = true;\n}\nexports.lockMode = lockMode;\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n */\nfunction enableProdMode() {\n    if (_modeLocked) {\n        // Cannot use BaseException as that ends up importing from facade/lang.\n        throw 'Cannot enable prod mode after platform setup.';\n    }\n    _devMode = false;\n}\nexports.enableProdMode = enableProdMode;\nfunction assertionsEnabled() {\n    return _devMode;\n}\nexports.assertionsEnabled = assertionsEnabled;\n// TODO: remove calls to assert in production environment\n// Note: Can't just export this and import in in other files\n// as `assert` is a reserved keyword in Dart\n_global.assert = function assert(condition) {\n    // TODO: to be fixed properly via #2830, noop for now\n};\nfunction isPresent(obj) {\n    return obj !== undefined && obj !== null;\n}\nexports.isPresent = isPresent;\nfunction isBlank(obj) {\n    return obj === undefined || obj === null;\n}\nexports.isBlank = isBlank;\nfunction isBoolean(obj) {\n    return typeof obj === \"boolean\";\n}\nexports.isBoolean = isBoolean;\nfunction isNumber(obj) {\n    return typeof obj === \"number\";\n}\nexports.isNumber = isNumber;\nfunction isString(obj) {\n    return typeof obj === \"string\";\n}\nexports.isString = isString;\nfunction isFunction(obj) {\n    return typeof obj === \"function\";\n}\nexports.isFunction = isFunction;\nfunction isType(obj) {\n    return isFunction(obj);\n}\nexports.isType = isType;\nfunction isStringMap(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\nexports.isStringMap = isStringMap;\nvar STRING_MAP_PROTO = Object.getPrototypeOf({});\nfunction isStrictStringMap(obj) {\n    return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n}\nexports.isStrictStringMap = isStrictStringMap;\nfunction isPromise(obj) {\n    return obj instanceof _global.Promise;\n}\nexports.isPromise = isPromise;\nfunction isArray(obj) {\n    return Array.isArray(obj);\n}\nexports.isArray = isArray;\nfunction isDate(obj) {\n    return obj instanceof exports.Date && !isNaN(obj.valueOf());\n}\nexports.isDate = isDate;\nfunction noop() { }\nexports.noop = noop;\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token === undefined || token === null) {\n        return '' + token;\n    }\n    if (token.name) {\n        return token.name;\n    }\n    if (token.overriddenName) {\n        return token.overriddenName;\n    }\n    var res = token.toString();\n    var newLineIndex = res.indexOf(\"\\n\");\n    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);\n}\nexports.stringify = stringify;\n// serialize / deserialize enum exist only for consistency with dart API\n// enums in typescript don't need to be serialized\nfunction serializeEnum(val) {\n    return val;\n}\nexports.serializeEnum = serializeEnum;\nfunction deserializeEnum(val, values) {\n    return val;\n}\nexports.deserializeEnum = deserializeEnum;\nfunction resolveEnumToken(enumValue, val) {\n    return enumValue[val];\n}\nexports.resolveEnumToken = resolveEnumToken;\nvar StringWrapper = (function () {\n    function StringWrapper() {\n    }\n    StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };\n    StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };\n    StringWrapper.split = function (s, regExp) { return s.split(regExp); };\n    StringWrapper.equals = function (s, s2) { return s === s2; };\n    StringWrapper.stripLeft = function (s, charVal) {\n        if (s && s.length) {\n            var pos = 0;\n            for (var i = 0; i < s.length; i++) {\n                if (s[i] != charVal)\n                    break;\n                pos++;\n            }\n            s = s.substring(pos);\n        }\n        return s;\n    };\n    StringWrapper.stripRight = function (s, charVal) {\n        if (s && s.length) {\n            var pos = s.length;\n            for (var i = s.length - 1; i >= 0; i--) {\n                if (s[i] != charVal)\n                    break;\n                pos--;\n            }\n            s = s.substring(0, pos);\n        }\n        return s;\n    };\n    StringWrapper.replace = function (s, from, replace) {\n        return s.replace(from, replace);\n    };\n    StringWrapper.replaceAll = function (s, from, replace) {\n        return s.replace(from, replace);\n    };\n    StringWrapper.slice = function (s, from, to) {\n        if (from === void 0) { from = 0; }\n        if (to === void 0) { to = null; }\n        return s.slice(from, to === null ? undefined : to);\n    };\n    StringWrapper.replaceAllMapped = function (s, from, cb) {\n        return s.replace(from, function () {\n            var matches = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                matches[_i - 0] = arguments[_i];\n            }\n            // Remove offset & string from the result array\n            matches.splice(-2, 2);\n            // The callback receives match, p1, ..., pn\n            return cb(matches);\n        });\n    };\n    StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };\n    StringWrapper.compare = function (a, b) {\n        if (a < b) {\n            return -1;\n        }\n        else if (a > b) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    };\n    return StringWrapper;\n}());\nexports.StringWrapper = StringWrapper;\nvar StringJoiner = (function () {\n    function StringJoiner(parts) {\n        if (parts === void 0) { parts = []; }\n        this.parts = parts;\n    }\n    StringJoiner.prototype.add = function (part) { this.parts.push(part); };\n    StringJoiner.prototype.toString = function () { return this.parts.join(\"\"); };\n    return StringJoiner;\n}());\nexports.StringJoiner = StringJoiner;\nvar NumberParseError = (function (_super) {\n    __extends(NumberParseError, _super);\n    function NumberParseError(message) {\n        _super.call(this);\n        this.message = message;\n    }\n    NumberParseError.prototype.toString = function () { return this.message; };\n    return NumberParseError;\n}(Error));\nexports.NumberParseError = NumberParseError;\nvar NumberWrapper = (function () {\n    function NumberWrapper() {\n    }\n    NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n    NumberWrapper.equal = function (a, b) { return a === b; };\n    NumberWrapper.parseIntAutoRadix = function (text) {\n        var result = parseInt(text);\n        if (isNaN(result)) {\n            throw new NumberParseError(\"Invalid integer literal when parsing \" + text);\n        }\n        return result;\n    };\n    NumberWrapper.parseInt = function (text, radix) {\n        if (radix == 10) {\n            if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n                return parseInt(text, radix);\n            }\n        }\n        else if (radix == 16) {\n            if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n                return parseInt(text, radix);\n            }\n        }\n        else {\n            var result = parseInt(text, radix);\n            if (!isNaN(result)) {\n                return result;\n            }\n        }\n        throw new NumberParseError(\"Invalid integer literal when parsing \" + text + \" in base \" +\n            radix);\n    };\n    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n    NumberWrapper.parseFloat = function (text) { return parseFloat(text); };\n    Object.defineProperty(NumberWrapper, \"NaN\", {\n        get: function () { return NaN; },\n        enumerable: true,\n        configurable: true\n    });\n    NumberWrapper.isNaN = function (value) { return isNaN(value); };\n    NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n    return NumberWrapper;\n}());\nexports.NumberWrapper = NumberWrapper;\nexports.RegExp = _global.RegExp;\nvar RegExpWrapper = (function () {\n    function RegExpWrapper() {\n    }\n    RegExpWrapper.create = function (regExpStr, flags) {\n        if (flags === void 0) { flags = ''; }\n        flags = flags.replace(/g/g, '');\n        return new _global.RegExp(regExpStr, flags + 'g');\n    };\n    RegExpWrapper.firstMatch = function (regExp, input) {\n        // Reset multimatch regex state\n        regExp.lastIndex = 0;\n        return regExp.exec(input);\n    };\n    RegExpWrapper.test = function (regExp, input) {\n        regExp.lastIndex = 0;\n        return regExp.test(input);\n    };\n    RegExpWrapper.matcher = function (regExp, input) {\n        // Reset regex state for the case\n        // someone did not loop over all matches\n        // last time.\n        regExp.lastIndex = 0;\n        return { re: regExp, input: input };\n    };\n    RegExpWrapper.replaceAll = function (regExp, input, replace) {\n        var c = regExp.exec(input);\n        var res = '';\n        regExp.lastIndex = 0;\n        var prev = 0;\n        while (c) {\n            res += input.substring(prev, c.index);\n            res += replace(c);\n            prev = c.index + c[0].length;\n            regExp.lastIndex = prev;\n            c = regExp.exec(input);\n        }\n        res += input.substring(prev);\n        return res;\n    };\n    return RegExpWrapper;\n}());\nexports.RegExpWrapper = RegExpWrapper;\nvar RegExpMatcherWrapper = (function () {\n    function RegExpMatcherWrapper() {\n    }\n    RegExpMatcherWrapper.next = function (matcher) {\n        return matcher.re.exec(matcher.input);\n    };\n    return RegExpMatcherWrapper;\n}());\nexports.RegExpMatcherWrapper = RegExpMatcherWrapper;\nvar FunctionWrapper = (function () {\n    function FunctionWrapper() {\n    }\n    FunctionWrapper.apply = function (fn, posArgs) { return fn.apply(null, posArgs); };\n    return FunctionWrapper;\n}());\nexports.FunctionWrapper = FunctionWrapper;\n// JS has NaN !== NaN\nfunction looseIdentical(a, b) {\n    return a === b || typeof a === \"number\" && typeof b === \"number\" && isNaN(a) && isNaN(b);\n}\nexports.looseIdentical = looseIdentical;\n// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)\n// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\nfunction getMapKey(value) {\n    return value;\n}\nexports.getMapKey = getMapKey;\nfunction normalizeBlank(obj) {\n    return isBlank(obj) ? null : obj;\n}\nexports.normalizeBlank = normalizeBlank;\nfunction normalizeBool(obj) {\n    return isBlank(obj) ? false : obj;\n}\nexports.normalizeBool = normalizeBool;\nfunction isJsObject(o) {\n    return o !== null && (typeof o === \"function\" || typeof o === \"object\");\n}\nexports.isJsObject = isJsObject;\nfunction print(obj) {\n    console.log(obj);\n}\nexports.print = print;\nfunction warn(obj) {\n    console.warn(obj);\n}\nexports.warn = warn;\n// Can't be all uppercase as our transpiler would think it is a special directive...\nvar Json = (function () {\n    function Json() {\n    }\n    Json.parse = function (s) { return _global.JSON.parse(s); };\n    Json.stringify = function (data) {\n        // Dart doesn't take 3 arguments\n        return _global.JSON.stringify(data, null, 2);\n    };\n    return Json;\n}());\nexports.Json = Json;\nvar DateWrapper = (function () {\n    function DateWrapper() {\n    }\n    DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {\n        if (month === void 0) { month = 1; }\n        if (day === void 0) { day = 1; }\n        if (hour === void 0) { hour = 0; }\n        if (minutes === void 0) { minutes = 0; }\n        if (seconds === void 0) { seconds = 0; }\n        if (milliseconds === void 0) { milliseconds = 0; }\n        return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);\n    };\n    DateWrapper.fromISOString = function (str) { return new exports.Date(str); };\n    DateWrapper.fromMillis = function (ms) { return new exports.Date(ms); };\n    DateWrapper.toMillis = function (date) { return date.getTime(); };\n    DateWrapper.now = function () { return new exports.Date(); };\n    DateWrapper.toJson = function (date) { return date.toJSON(); };\n    return DateWrapper;\n}());\nexports.DateWrapper = DateWrapper;\nfunction setValueOnPath(global, path, value) {\n    var parts = path.split('.');\n    var obj = global;\n    while (parts.length > 1) {\n        var name = parts.shift();\n        if (obj.hasOwnProperty(name) && isPresent(obj[name])) {\n            obj = obj[name];\n        }\n        else {\n            obj = obj[name] = {};\n        }\n    }\n    if (obj === undefined || obj === null) {\n        obj = {};\n    }\n    obj[parts.shift()] = value;\n}\nexports.setValueOnPath = setValueOnPath;\nvar _symbolIterator = null;\nfunction getSymbolIterator() {\n    if (isBlank(_symbolIterator)) {\n        if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {\n            _symbolIterator = Symbol.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            var keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    Map.prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\nexports.getSymbolIterator = getSymbolIterator;\nfunction evalExpression(sourceUrl, expr, declarations, vars) {\n    var fnBody = declarations + \"\\nreturn \" + expr + \"\\n//# sourceURL=\" + sourceUrl;\n    var fnArgNames = [];\n    var fnArgValues = [];\n    for (var argName in vars) {\n        fnArgNames.push(argName);\n        fnArgValues.push(vars[argName]);\n    }\n    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);\n}\nexports.evalExpression = evalExpression;\nfunction isPrimitive(obj) {\n    return !isJsObject(obj);\n}\nexports.isPrimitive = isPrimitive;\nfunction hasConstructor(value, type) {\n    return value.constructor === type;\n}\nexports.hasConstructor = hasConstructor;\nfunction bitWiseOr(values) {\n    return values.reduce(function (a, b) { return a | b; });\n}\nexports.bitWiseOr = bitWiseOr;\nfunction bitWiseAnd(values) {\n    return values.reduce(function (a, b) { return a & b; });\n}\nexports.bitWiseAnd = bitWiseAnd;\nfunction escape(s) {\n    return _global.encodeURI(s);\n}\nexports.escape = escape;\n//# sourceMappingURL=lang.js.map\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 337:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar lang_1 = __webpack_require__(336);\nexports.Map = lang_1.global.Map;\nexports.Set = lang_1.global.Set;\n// Safari and Internet Explorer do not support the iterable parameter to the\n// Map constructor.  We work around that by manually adding the items.\nvar createMapFromPairs = (function () {\n    try {\n        if (new exports.Map([[1, 2]]).size === 1) {\n            return function createMapFromPairs(pairs) { return new exports.Map(pairs); };\n        }\n    }\n    catch (e) {\n    }\n    return function createMapAndPopulateFromPairs(pairs) {\n        var map = new exports.Map();\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            map.set(pair[0], pair[1]);\n        }\n        return map;\n    };\n})();\nvar createMapFromMap = (function () {\n    try {\n        if (new exports.Map(new exports.Map())) {\n            return function createMapFromMap(m) { return new exports.Map(m); };\n        }\n    }\n    catch (e) {\n    }\n    return function createMapAndPopulateFromMap(m) {\n        var map = new exports.Map();\n        m.forEach(function (v, k) { map.set(k, v); });\n        return map;\n    };\n})();\nvar _clearValues = (function () {\n    if ((new exports.Map()).keys().next) {\n        return function _clearValues(m) {\n            var keyIterator = m.keys();\n            var k;\n            while (!((k = keyIterator.next()).done)) {\n                m.set(k.value, null);\n            }\n        };\n    }\n    else {\n        return function _clearValuesWithForeEach(m) {\n            m.forEach(function (v, k) { m.set(k, null); });\n        };\n    }\n})();\n// Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n// TODO(mlaval): remove the work around once we have a working polyfill of Array.from\nvar _arrayFromMap = (function () {\n    try {\n        if ((new exports.Map()).values().next) {\n            return function createArrayFromMap(m, getValues) {\n                return getValues ? Array.from(m.values()) : Array.from(m.keys());\n            };\n        }\n    }\n    catch (e) {\n    }\n    return function createArrayFromMapWithForeach(m, getValues) {\n        var res = ListWrapper.createFixedSize(m.size), i = 0;\n        m.forEach(function (v, k) {\n            res[i] = getValues ? v : k;\n            i++;\n        });\n        return res;\n    };\n})();\nvar MapWrapper = (function () {\n    function MapWrapper() {\n    }\n    MapWrapper.clone = function (m) { return createMapFromMap(m); };\n    MapWrapper.createFromStringMap = function (stringMap) {\n        var result = new exports.Map();\n        for (var prop in stringMap) {\n            result.set(prop, stringMap[prop]);\n        }\n        return result;\n    };\n    MapWrapper.toStringMap = function (m) {\n        var r = {};\n        m.forEach(function (v, k) { return r[k] = v; });\n        return r;\n    };\n    MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };\n    MapWrapper.clearValues = function (m) { _clearValues(m); };\n    MapWrapper.iterable = function (m) { return m; };\n    MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };\n    MapWrapper.values = function (m) { return _arrayFromMap(m, true); };\n    return MapWrapper;\n}());\nexports.MapWrapper = MapWrapper;\n/**\n * Wraps Javascript Objects\n */\nvar StringMapWrapper = (function () {\n    function StringMapWrapper() {\n    }\n    StringMapWrapper.create = function () {\n        // Note: We are not using Object.create(null) here due to\n        // performance!\n        // http://jsperf.com/ng2-object-create-null\n        return {};\n    };\n    StringMapWrapper.contains = function (map, key) {\n        return map.hasOwnProperty(key);\n    };\n    StringMapWrapper.get = function (map, key) {\n        return map.hasOwnProperty(key) ? map[key] : undefined;\n    };\n    StringMapWrapper.set = function (map, key, value) { map[key] = value; };\n    StringMapWrapper.keys = function (map) { return Object.keys(map); };\n    StringMapWrapper.values = function (map) {\n        return Object.keys(map).reduce(function (r, a) {\n            r.push(map[a]);\n            return r;\n        }, []);\n    };\n    StringMapWrapper.isEmpty = function (map) {\n        for (var prop in map) {\n            return false;\n        }\n        return true;\n    };\n    StringMapWrapper.delete = function (map, key) { delete map[key]; };\n    StringMapWrapper.forEach = function (map, callback) {\n        for (var prop in map) {\n            if (map.hasOwnProperty(prop)) {\n                callback(map[prop], prop);\n            }\n        }\n    };\n    StringMapWrapper.merge = function (m1, m2) {\n        var m = {};\n        for (var attr in m1) {\n            if (m1.hasOwnProperty(attr)) {\n                m[attr] = m1[attr];\n            }\n        }\n        for (var attr in m2) {\n            if (m2.hasOwnProperty(attr)) {\n                m[attr] = m2[attr];\n            }\n        }\n        return m;\n    };\n    StringMapWrapper.equals = function (m1, m2) {\n        var k1 = Object.keys(m1);\n        var k2 = Object.keys(m2);\n        if (k1.length != k2.length) {\n            return false;\n        }\n        var key;\n        for (var i = 0; i < k1.length; i++) {\n            key = k1[i];\n            if (m1[key] !== m2[key]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return StringMapWrapper;\n}());\nexports.StringMapWrapper = StringMapWrapper;\nvar ListWrapper = (function () {\n    function ListWrapper() {\n    }\n    // JS has no way to express a statically fixed size list, but dart does so we\n    // keep both methods.\n    ListWrapper.createFixedSize = function (size) { return new Array(size); };\n    ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n    ListWrapper.clone = function (array) { return array.slice(0); };\n    ListWrapper.forEachWithIndex = function (array, fn) {\n        for (var i = 0; i < array.length; i++) {\n            fn(array[i], i);\n        }\n    };\n    ListWrapper.first = function (array) {\n        if (!array)\n            return null;\n        return array[0];\n    };\n    ListWrapper.last = function (array) {\n        if (!array || array.length == 0)\n            return null;\n        return array[array.length - 1];\n    };\n    ListWrapper.indexOf = function (array, value, startIndex) {\n        if (startIndex === void 0) { startIndex = 0; }\n        return array.indexOf(value, startIndex);\n    };\n    ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n    ListWrapper.reversed = function (array) {\n        var a = ListWrapper.clone(array);\n        return a.reverse();\n    };\n    ListWrapper.concat = function (a, b) { return a.concat(b); };\n    ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n    ListWrapper.removeAt = function (list, index) {\n        var res = list[index];\n        list.splice(index, 1);\n        return res;\n    };\n    ListWrapper.removeAll = function (list, items) {\n        for (var i = 0; i < items.length; ++i) {\n            var index = list.indexOf(items[i]);\n            list.splice(index, 1);\n        }\n    };\n    ListWrapper.remove = function (list, el) {\n        var index = list.indexOf(el);\n        if (index > -1) {\n            list.splice(index, 1);\n            return true;\n        }\n        return false;\n    };\n    ListWrapper.clear = function (list) { list.length = 0; };\n    ListWrapper.isEmpty = function (list) { return list.length == 0; };\n    ListWrapper.fill = function (list, value, start, end) {\n        if (start === void 0) { start = 0; }\n        if (end === void 0) { end = null; }\n        list.fill(value, start, end === null ? list.length : end);\n    };\n    ListWrapper.equals = function (a, b) {\n        if (a.length != b.length)\n            return false;\n        for (var i = 0; i < a.length; ++i) {\n            if (a[i] !== b[i])\n                return false;\n        }\n        return true;\n    };\n    ListWrapper.slice = function (l, from, to) {\n        if (from === void 0) { from = 0; }\n        if (to === void 0) { to = null; }\n        return l.slice(from, to === null ? undefined : to);\n    };\n    ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n    ListWrapper.sort = function (l, compareFn) {\n        if (lang_1.isPresent(compareFn)) {\n            l.sort(compareFn);\n        }\n        else {\n            l.sort();\n        }\n    };\n    ListWrapper.toString = function (l) { return l.toString(); };\n    ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n    ListWrapper.maximum = function (list, predicate) {\n        if (list.length == 0) {\n            return null;\n        }\n        var solution = null;\n        var maxValue = -Infinity;\n        for (var index = 0; index < list.length; index++) {\n            var candidate = list[index];\n            if (lang_1.isBlank(candidate)) {\n                continue;\n            }\n            var candidateValue = predicate(candidate);\n            if (candidateValue > maxValue) {\n                solution = candidate;\n                maxValue = candidateValue;\n            }\n        }\n        return solution;\n    };\n    ListWrapper.flatten = function (list) {\n        var target = [];\n        _flattenArray(list, target);\n        return target;\n    };\n    ListWrapper.addAll = function (list, source) {\n        for (var i = 0; i < source.length; i++) {\n            list.push(source[i]);\n        }\n    };\n    return ListWrapper;\n}());\nexports.ListWrapper = ListWrapper;\nfunction _flattenArray(source, target) {\n    if (lang_1.isPresent(source)) {\n        for (var i = 0; i < source.length; i++) {\n            var item = source[i];\n            if (lang_1.isArray(item)) {\n                _flattenArray(item, target);\n            }\n            else {\n                target.push(item);\n            }\n        }\n    }\n    return target;\n}\nfunction isListLikeIterable(obj) {\n    if (!lang_1.isJsObject(obj))\n        return false;\n    return lang_1.isArray(obj) ||\n        (!(obj instanceof exports.Map) &&\n            lang_1.getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\nexports.isListLikeIterable = isListLikeIterable;\nfunction areIterablesEqual(a, b, comparator) {\n    var iterator1 = a[lang_1.getSymbolIterator()]();\n    var iterator2 = b[lang_1.getSymbolIterator()]();\n    while (true) {\n        var item1 = iterator1.next();\n        var item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\nexports.areIterablesEqual = areIterablesEqual;\nfunction iterateListLike(obj, fn) {\n    if (lang_1.isArray(obj)) {\n        for (var i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        var iterator = obj[lang_1.getSymbolIterator()]();\n        var item;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\nexports.iterateListLike = iterateListLike;\n// Safari and Internet Explorer do not support the iterable parameter to the\n// Set constructor.  We work around that by manually adding the items.\nvar createSetFromList = (function () {\n    var test = new exports.Set([1, 2, 3]);\n    if (test.size === 3) {\n        return function createSetFromList(lst) { return new exports.Set(lst); };\n    }\n    else {\n        return function createSetAndPopulateFromList(lst) {\n            var res = new exports.Set(lst);\n            if (res.size !== lst.length) {\n                for (var i = 0; i < lst.length; i++) {\n                    res.add(lst[i]);\n                }\n            }\n            return res;\n        };\n    }\n})();\nvar SetWrapper = (function () {\n    function SetWrapper() {\n    }\n    SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };\n    SetWrapper.has = function (s, key) { return s.has(key); };\n    SetWrapper.delete = function (m, k) { m.delete(k); };\n    return SetWrapper;\n}());\nexports.SetWrapper = SetWrapper;\n//# sourceMappingURL=collection.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 338:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar lang_1 = __webpack_require__(336);\nvar promise_1 = __webpack_require__(339);\nexports.PromiseWrapper = promise_1.PromiseWrapper;\nexports.PromiseCompleter = promise_1.PromiseCompleter;\nvar Subject_1 = __webpack_require__(34);\nvar PromiseObservable_1 = __webpack_require__(53);\nvar toPromise_1 = __webpack_require__(54);\nvar Observable_1 = __webpack_require__(35);\nexports.Observable = Observable_1.Observable;\nvar Subject_2 = __webpack_require__(34);\nexports.Subject = Subject_2.Subject;\nvar TimerWrapper = (function () {\n    function TimerWrapper() {\n    }\n    TimerWrapper.setTimeout = function (fn, millis) {\n        return lang_1.global.setTimeout(fn, millis);\n    };\n    TimerWrapper.clearTimeout = function (id) { lang_1.global.clearTimeout(id); };\n    TimerWrapper.setInterval = function (fn, millis) {\n        return lang_1.global.setInterval(fn, millis);\n    };\n    TimerWrapper.clearInterval = function (id) { lang_1.global.clearInterval(id); };\n    return TimerWrapper;\n}());\nexports.TimerWrapper = TimerWrapper;\nvar ObservableWrapper = (function () {\n    function ObservableWrapper() {\n    }\n    // TODO(vsavkin): when we use rxnext, try inferring the generic type from the first arg\n    ObservableWrapper.subscribe = function (emitter, onNext, onError, onComplete) {\n        if (onComplete === void 0) { onComplete = function () { }; }\n        onError = (typeof onError === \"function\") && onError || lang_1.noop;\n        onComplete = (typeof onComplete === \"function\") && onComplete || lang_1.noop;\n        return emitter.subscribe({ next: onNext, error: onError, complete: onComplete });\n    };\n    ObservableWrapper.isObservable = function (obs) { return !!obs.subscribe; };\n    /**\n     * Returns whether `obs` has any subscribers listening to events.\n     */\n    ObservableWrapper.hasSubscribers = function (obs) { return obs.observers.length > 0; };\n    ObservableWrapper.dispose = function (subscription) { subscription.unsubscribe(); };\n    /**\n     * @deprecated - use callEmit() instead\n     */\n    ObservableWrapper.callNext = function (emitter, value) { emitter.next(value); };\n    ObservableWrapper.callEmit = function (emitter, value) { emitter.emit(value); };\n    ObservableWrapper.callError = function (emitter, error) { emitter.error(error); };\n    ObservableWrapper.callComplete = function (emitter) { emitter.complete(); };\n    ObservableWrapper.fromPromise = function (promise) {\n        return PromiseObservable_1.PromiseObservable.create(promise);\n    };\n    ObservableWrapper.toPromise = function (obj) { return toPromise_1.toPromise.call(obj); };\n    return ObservableWrapper;\n}());\nexports.ObservableWrapper = ObservableWrapper;\n/**\n * Use by directives and components to emit custom Events.\n *\n * ### Examples\n *\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Use Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n */\nvar EventEmitter = (function (_super) {\n    __extends(EventEmitter, _super);\n    /**\n     * Creates an instance of [EventEmitter], which depending on [isAsync],\n     * delivers events synchronously or asynchronously.\n     */\n    function EventEmitter(isAsync) {\n        if (isAsync === void 0) { isAsync = true; }\n        _super.call(this);\n        this._isAsync = isAsync;\n    }\n    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n    /**\n     * @deprecated - use .emit(value) instead\n     */\n    EventEmitter.prototype.next = function (value) { _super.prototype.next.call(this, value); };\n    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n        var schedulerFn;\n        var errorFn = function (err) { return null; };\n        var completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this._isAsync ? function (value) { setTimeout(function () { return generatorOrNext.next(value); }); } :\n                function (value) { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this._isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                    function (err) { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this._isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                    function () { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this._isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                function (value) { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this._isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this._isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n            }\n        }\n        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n    };\n    return EventEmitter;\n}(Subject_1.Subject));\nexports.EventEmitter = EventEmitter;\n//# sourceMappingURL=async.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 339:
/***/ function(module, exports) {

	eval("\"use strict\";\nvar PromiseCompleter = (function () {\n    function PromiseCompleter() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return PromiseCompleter;\n}());\nexports.PromiseCompleter = PromiseCompleter;\nvar PromiseWrapper = (function () {\n    function PromiseWrapper() {\n    }\n    PromiseWrapper.resolve = function (obj) { return Promise.resolve(obj); };\n    PromiseWrapper.reject = function (obj, _) { return Promise.reject(obj); };\n    // Note: We can't rename this method into `catch`, as this is not a valid\n    // method name in Dart.\n    PromiseWrapper.catchError = function (promise, onError) {\n        return promise.catch(onError);\n    };\n    PromiseWrapper.all = function (promises) {\n        if (promises.length == 0)\n            return Promise.resolve([]);\n        return Promise.all(promises);\n    };\n    PromiseWrapper.then = function (promise, success, rejection) {\n        return promise.then(success, rejection);\n    };\n    PromiseWrapper.wrap = function (computation) {\n        return new Promise(function (res, rej) {\n            try {\n                res(computation());\n            }\n            catch (e) {\n                rej(e);\n            }\n        });\n    };\n    PromiseWrapper.scheduleMicrotask = function (computation) {\n        PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function (_) { });\n    };\n    PromiseWrapper.isPromise = function (obj) { return obj instanceof Promise; };\n    PromiseWrapper.completer = function () { return new PromiseCompleter(); };\n    return PromiseWrapper;\n}());\nexports.PromiseWrapper = PromiseWrapper;\n//# sourceMappingURL=promise.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvZmFjYWRlL3Byb21pc2UuanM/ZTBlNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDZCQUE2QjtBQUMxRSwrQ0FBK0MsNEJBQTRCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EscUZBQXFGLEVBQUU7QUFDdkY7QUFDQSwrQ0FBK0MsK0JBQStCO0FBQzlFLDRDQUE0QywrQkFBK0I7QUFDM0U7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBQcm9taXNlQ29tcGxldGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQcm9taXNlQ29tcGxldGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcbiAgICAgICAgICAgIF90aGlzLnJlc29sdmUgPSByZXM7XG4gICAgICAgICAgICBfdGhpcy5yZWplY3QgPSByZWo7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZUNvbXBsZXRlcjtcbn0oKSk7XG5leHBvcnRzLlByb21pc2VDb21wbGV0ZXIgPSBQcm9taXNlQ29tcGxldGVyO1xudmFyIFByb21pc2VXcmFwcGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQcm9taXNlV3JhcHBlcigpIHtcbiAgICB9XG4gICAgUHJvbWlzZVdyYXBwZXIucmVzb2x2ZSA9IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZShvYmopOyB9O1xuICAgIFByb21pc2VXcmFwcGVyLnJlamVjdCA9IGZ1bmN0aW9uIChvYmosIF8pIHsgcmV0dXJuIFByb21pc2UucmVqZWN0KG9iaik7IH07XG4gICAgLy8gTm90ZTogV2UgY2FuJ3QgcmVuYW1lIHRoaXMgbWV0aG9kIGludG8gYGNhdGNoYCwgYXMgdGhpcyBpcyBub3QgYSB2YWxpZFxuICAgIC8vIG1ldGhvZCBuYW1lIGluIERhcnQuXG4gICAgUHJvbWlzZVdyYXBwZXIuY2F0Y2hFcnJvciA9IGZ1bmN0aW9uIChwcm9taXNlLCBvbkVycm9yKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlLmNhdGNoKG9uRXJyb3IpO1xuICAgIH07XG4gICAgUHJvbWlzZVdyYXBwZXIuYWxsID0gZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgICAgIGlmIChwcm9taXNlcy5sZW5ndGggPT0gMClcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgIH07XG4gICAgUHJvbWlzZVdyYXBwZXIudGhlbiA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdWNjZXNzLCByZWplY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihzdWNjZXNzLCByZWplY3Rpb24pO1xuICAgIH07XG4gICAgUHJvbWlzZVdyYXBwZXIud3JhcCA9IGZ1bmN0aW9uIChjb21wdXRhdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlcywgcmVqKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlcyhjb21wdXRhdGlvbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFByb21pc2VXcmFwcGVyLnNjaGVkdWxlTWljcm90YXNrID0gZnVuY3Rpb24gKGNvbXB1dGF0aW9uKSB7XG4gICAgICAgIFByb21pc2VXcmFwcGVyLnRoZW4oUHJvbWlzZVdyYXBwZXIucmVzb2x2ZShudWxsKSwgY29tcHV0YXRpb24sIGZ1bmN0aW9uIChfKSB7IH0pO1xuICAgIH07XG4gICAgUHJvbWlzZVdyYXBwZXIuaXNQcm9taXNlID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqIGluc3RhbmNlb2YgUHJvbWlzZTsgfTtcbiAgICBQcm9taXNlV3JhcHBlci5jb21wbGV0ZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgUHJvbWlzZUNvbXBsZXRlcigpOyB9O1xuICAgIHJldHVybiBQcm9taXNlV3JhcHBlcjtcbn0oKSk7XG5leHBvcnRzLlByb21pc2VXcmFwcGVyID0gUHJvbWlzZVdyYXBwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9taXNlLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvZmFjYWRlL3Byb21pc2UuanNcbiAqKiBtb2R1bGUgaWQgPSAzMzlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 340:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar segments_1 = __webpack_require__(341);\nvar metadata_1 = __webpack_require__(342);\nvar lang_1 = __webpack_require__(336);\nvar collection_1 = __webpack_require__(337);\nvar promise_1 = __webpack_require__(339);\nvar core_1 = __webpack_require__(1);\nvar constants_1 = __webpack_require__(343);\nvar core_2 = __webpack_require__(1);\n// TODO: vsavkin: recognize should take the old tree and merge it\nfunction recognize(componentResolver, type, url) {\n    var matched = new _MatchResult(type, [url.root], {}, segments_1.rootNode(url).children, []);\n    return _constructSegment(componentResolver, matched).then(function (roots) { return new segments_1.RouteTree(roots[0]); });\n}\nexports.recognize = recognize;\nfunction _recognize(componentResolver, parentType, url) {\n    var metadata = _readMetadata(parentType); // should read from the factory instead\n    if (lang_1.isBlank(metadata)) {\n        throw new core_1.BaseException(\"Component '\" + lang_1.stringify(parentType) + \"' does not have route configuration\");\n    }\n    var match;\n    try {\n        match = _match(metadata, url);\n    }\n    catch (e) {\n        return promise_1.PromiseWrapper.reject(e, null);\n    }\n    var main = _constructSegment(componentResolver, match);\n    var aux = _recognizeMany(componentResolver, parentType, match.aux).then(_checkOutletNameUniqueness);\n    return promise_1.PromiseWrapper.all([main, aux]).then(collection_1.ListWrapper.flatten);\n}\nfunction _recognizeMany(componentResolver, parentType, urls) {\n    var recognized = urls.map(function (u) { return _recognize(componentResolver, parentType, u); });\n    return promise_1.PromiseWrapper.all(recognized).then(collection_1.ListWrapper.flatten);\n}\nfunction _constructSegment(componentResolver, matched) {\n    return componentResolver.resolveComponent(matched.component)\n        .then(function (factory) {\n        var urlOutlet = matched.consumedUrlSegments.length === 0 ||\n            lang_1.isBlank(matched.consumedUrlSegments[0].outlet) ?\n            constants_1.DEFAULT_OUTLET_NAME :\n            matched.consumedUrlSegments[0].outlet;\n        var segment = new segments_1.RouteSegment(matched.consumedUrlSegments, matched.parameters, urlOutlet, matched.component, factory);\n        if (matched.leftOverUrl.length > 0) {\n            return _recognizeMany(componentResolver, matched.component, matched.leftOverUrl)\n                .then(function (children) { return [new segments_1.TreeNode(segment, children)]; });\n        }\n        else {\n            return _recognizeLeftOvers(componentResolver, matched.component)\n                .then(function (children) { return [new segments_1.TreeNode(segment, children)]; });\n        }\n    });\n}\nfunction _recognizeLeftOvers(componentResolver, parentType) {\n    return componentResolver.resolveComponent(parentType)\n        .then(function (factory) {\n        var metadata = _readMetadata(parentType);\n        if (lang_1.isBlank(metadata)) {\n            return [];\n        }\n        var r = metadata.routes.filter(function (r) { return r.path == \"\" || r.path == \"/\"; });\n        if (r.length === 0) {\n            return promise_1.PromiseWrapper.resolve([]);\n        }\n        else {\n            return _recognizeLeftOvers(componentResolver, r[0].component)\n                .then(function (children) {\n                return componentResolver.resolveComponent(r[0].component)\n                    .then(function (factory) {\n                    var segment = new segments_1.RouteSegment([], {}, constants_1.DEFAULT_OUTLET_NAME, r[0].component, factory);\n                    return [new segments_1.TreeNode(segment, children)];\n                });\n            });\n        }\n    });\n}\nfunction _match(metadata, url) {\n    for (var _i = 0, _a = metadata.routes; _i < _a.length; _i++) {\n        var r = _a[_i];\n        var matchingResult = _matchWithParts(r, url);\n        if (lang_1.isPresent(matchingResult)) {\n            return matchingResult;\n        }\n    }\n    var availableRoutes = metadata.routes.map(function (r) { return (\"'\" + r.path + \"'\"); }).join(\", \");\n    throw new core_1.BaseException(\"Cannot match any routes. Current segment: '\" + url.value + \"'. Available routes: [\" + availableRoutes + \"].\");\n}\nfunction _matchWithParts(route, url) {\n    var path = route.path.startsWith(\"/\") ? route.path.substring(1) : route.path;\n    if (path == \"*\") {\n        return new _MatchResult(route.component, [], null, [], []);\n    }\n    var parts = path.split(\"/\");\n    var positionalParams = {};\n    var consumedUrlSegments = [];\n    var lastParent = null;\n    var lastSegment = null;\n    var current = url;\n    for (var i = 0; i < parts.length; ++i) {\n        if (lang_1.isBlank(current))\n            return null;\n        var p_1 = parts[i];\n        var isLastSegment = i === parts.length - 1;\n        var isLastParent = i === parts.length - 2;\n        var isPosParam = p_1.startsWith(\":\");\n        if (!isPosParam && p_1 != current.value.segment)\n            return null;\n        if (isLastSegment) {\n            lastSegment = current;\n        }\n        if (isLastParent) {\n            lastParent = current;\n        }\n        if (isPosParam) {\n            positionalParams[p_1.substring(1)] = current.value.segment;\n        }\n        consumedUrlSegments.push(current.value);\n        current = collection_1.ListWrapper.first(current.children);\n    }\n    var p = lastSegment.value.parameters;\n    var parameters = collection_1.StringMapWrapper.merge(p, positionalParams);\n    var axuUrlSubtrees = lang_1.isPresent(lastParent) ? lastParent.children.slice(1) : [];\n    return new _MatchResult(route.component, consumedUrlSegments, parameters, lastSegment.children, axuUrlSubtrees);\n}\nfunction _checkOutletNameUniqueness(nodes) {\n    var names = {};\n    nodes.forEach(function (n) {\n        var segmentWithSameOutletName = names[n.value.outlet];\n        if (lang_1.isPresent(segmentWithSameOutletName)) {\n            var p = segmentWithSameOutletName.stringifiedUrlSegments;\n            var c = n.value.stringifiedUrlSegments;\n            throw new core_1.BaseException(\"Two segments cannot have the same outlet name: '\" + p + \"' and '\" + c + \"'.\");\n        }\n        names[n.value.outlet] = n.value;\n    });\n    return nodes;\n}\nvar _MatchResult = (function () {\n    function _MatchResult(component, consumedUrlSegments, parameters, leftOverUrl, aux) {\n        this.component = component;\n        this.consumedUrlSegments = consumedUrlSegments;\n        this.parameters = parameters;\n        this.leftOverUrl = leftOverUrl;\n        this.aux = aux;\n    }\n    return _MatchResult;\n}());\nfunction _readMetadata(componentType) {\n    var metadata = core_2.reflector.annotations(componentType).filter(function (f) { return f instanceof metadata_1.RoutesMetadata; });\n    return collection_1.ListWrapper.first(metadata);\n}\n//# sourceMappingURL=recognize.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 341:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar collection_1 = __webpack_require__(337);\nvar lang_1 = __webpack_require__(336);\nvar Tree = (function () {\n    function Tree(root) {\n        this._root = root;\n    }\n    Object.defineProperty(Tree.prototype, \"root\", {\n        get: function () { return this._root.value; },\n        enumerable: true,\n        configurable: true\n    });\n    Tree.prototype.parent = function (t) {\n        var p = this.pathFromRoot(t);\n        return p.length > 1 ? p[p.length - 2] : null;\n    };\n    Tree.prototype.children = function (t) {\n        var n = _findNode(t, this._root);\n        return lang_1.isPresent(n) ? n.children.map(function (t) { return t.value; }) : null;\n    };\n    Tree.prototype.firstChild = function (t) {\n        var n = _findNode(t, this._root);\n        return lang_1.isPresent(n) && n.children.length > 0 ? n.children[0].value : null;\n    };\n    Tree.prototype.pathFromRoot = function (t) { return _findPath(t, this._root, []).map(function (s) { return s.value; }); };\n    Tree.prototype.contains = function (tree) { return _contains(this._root, tree._root); };\n    return Tree;\n}());\nexports.Tree = Tree;\nvar UrlTree = (function (_super) {\n    __extends(UrlTree, _super);\n    function UrlTree(root) {\n        _super.call(this, root);\n    }\n    return UrlTree;\n}(Tree));\nexports.UrlTree = UrlTree;\nvar RouteTree = (function (_super) {\n    __extends(RouteTree, _super);\n    function RouteTree(root) {\n        _super.call(this, root);\n    }\n    return RouteTree;\n}(Tree));\nexports.RouteTree = RouteTree;\nfunction rootNode(tree) {\n    return tree._root;\n}\nexports.rootNode = rootNode;\nfunction _findNode(expected, c) {\n    // TODO: vsavkin remove it once recognize is fixed\n    if (expected instanceof RouteSegment && equalSegments(expected, c.value))\n        return c;\n    if (expected === c.value)\n        return c;\n    for (var _i = 0, _a = c.children; _i < _a.length; _i++) {\n        var cc = _a[_i];\n        var r = _findNode(expected, cc);\n        if (lang_1.isPresent(r))\n            return r;\n    }\n    return null;\n}\nfunction _findPath(expected, c, collected) {\n    collected.push(c);\n    // TODO: vsavkin remove it once recognize is fixed\n    if (_equalValues(expected, c.value))\n        return collected;\n    for (var _i = 0, _a = c.children; _i < _a.length; _i++) {\n        var cc = _a[_i];\n        var r = _findPath(expected, cc, collection_1.ListWrapper.clone(collected));\n        if (lang_1.isPresent(r))\n            return r;\n    }\n    return null;\n}\nfunction _contains(tree, subtree) {\n    if (!_equalValues(tree.value, subtree.value))\n        return false;\n    var _loop_1 = function(subtreeNode) {\n        var s = tree.children.filter(function (child) { return _equalValues(child.value, subtreeNode.value); });\n        if (s.length === 0)\n            return { value: false };\n        if (!_contains(s[0], subtreeNode))\n            return { value: false };\n    };\n    for (var _i = 0, _a = subtree.children; _i < _a.length; _i++) {\n        var subtreeNode = _a[_i];\n        var state_1 = _loop_1(subtreeNode);\n        if (typeof state_1 === \"object\") return state_1.value;\n    }\n    return true;\n}\nfunction _equalValues(a, b) {\n    if (a instanceof RouteSegment)\n        return equalSegments(a, b);\n    if (a instanceof UrlSegment)\n        return equalUrlSegments(a, b);\n    return a === b;\n}\nvar TreeNode = (function () {\n    function TreeNode(value, children) {\n        this.value = value;\n        this.children = children;\n    }\n    return TreeNode;\n}());\nexports.TreeNode = TreeNode;\nvar UrlSegment = (function () {\n    function UrlSegment(segment, parameters, outlet) {\n        this.segment = segment;\n        this.parameters = parameters;\n        this.outlet = outlet;\n    }\n    UrlSegment.prototype.toString = function () {\n        var outletPrefix = lang_1.isBlank(this.outlet) ? \"\" : this.outlet + \":\";\n        return \"\" + outletPrefix + this.segment + _serializeParams(this.parameters);\n    };\n    return UrlSegment;\n}());\nexports.UrlSegment = UrlSegment;\nfunction _serializeParams(params) {\n    var res = \"\";\n    collection_1.StringMapWrapper.forEach(params, function (v, k) { return res += \";\" + k + \"=\" + v; });\n    return res;\n}\nvar RouteSegment = (function () {\n    function RouteSegment(urlSegments, parameters, outlet, type, componentFactory) {\n        this.urlSegments = urlSegments;\n        this.parameters = parameters;\n        this.outlet = outlet;\n        this._type = type;\n        this._componentFactory = componentFactory;\n    }\n    RouteSegment.prototype.getParam = function (param) {\n        return lang_1.isPresent(this.parameters) ? this.parameters[param] : null;\n    };\n    Object.defineProperty(RouteSegment.prototype, \"type\", {\n        get: function () { return this._type; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouteSegment.prototype, \"stringifiedUrlSegments\", {\n        get: function () { return this.urlSegments.map(function (s) { return s.toString(); }).join(\"/\"); },\n        enumerable: true,\n        configurable: true\n    });\n    return RouteSegment;\n}());\nexports.RouteSegment = RouteSegment;\nfunction serializeRouteSegmentTree(tree) {\n    return _serializeRouteSegmentTree(tree._root);\n}\nexports.serializeRouteSegmentTree = serializeRouteSegmentTree;\nfunction _serializeRouteSegmentTree(node) {\n    var v = node.value;\n    var children = node.children.map(function (c) { return _serializeRouteSegmentTree(c); }).join(\", \");\n    return v.outlet + \":\" + v.stringifiedUrlSegments + \"(\" + lang_1.stringify(v.type) + \") [\" + children + \"]\";\n}\nfunction equalSegments(a, b) {\n    if (lang_1.isBlank(a) && !lang_1.isBlank(b))\n        return false;\n    if (!lang_1.isBlank(a) && lang_1.isBlank(b))\n        return false;\n    if (a._type !== b._type)\n        return false;\n    if (a.outlet != b.outlet)\n        return false;\n    return collection_1.StringMapWrapper.equals(a.parameters, b.parameters);\n}\nexports.equalSegments = equalSegments;\nfunction equalUrlSegments(a, b) {\n    if (lang_1.isBlank(a) && !lang_1.isBlank(b))\n        return false;\n    if (!lang_1.isBlank(a) && lang_1.isBlank(b))\n        return false;\n    if (a.segment != b.segment)\n        return false;\n    if (a.outlet != b.outlet)\n        return false;\n    if (lang_1.isBlank(a.parameters)) {\n        console.log(\"a\", a);\n    }\n    if (lang_1.isBlank(b.parameters)) {\n        console.log(\"b\", b);\n    }\n    return collection_1.StringMapWrapper.equals(a.parameters, b.parameters);\n}\nexports.equalUrlSegments = equalUrlSegments;\nfunction routeSegmentComponentFactory(a) {\n    return a._componentFactory;\n}\nexports.routeSegmentComponentFactory = routeSegmentComponentFactory;\n//# sourceMappingURL=segments.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 342:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar lang_1 = __webpack_require__(336);\n/**\n * Information about a route.\n *\n * It has the following properties:\n * - `path` is a string that uses the route matcher DSL.\n * - `component` a component type.\n *\n * ### Example\n * ```\n * import {Routes} from '@angular/router';\n *\n * @Routes([\n *   {path: '/home', component: HomeCmp}\n * ])\n * class MyApp {}\n * ```\n *\n * @ts2dart_const\n */\nvar RouteMetadata = (function () {\n    function RouteMetadata() {\n    }\n    Object.defineProperty(RouteMetadata.prototype, \"path\", {\n        get: function () { },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouteMetadata.prototype, \"component\", {\n        get: function () { },\n        enumerable: true,\n        configurable: true\n    });\n    return RouteMetadata;\n}());\nexports.RouteMetadata = RouteMetadata;\n/**\n * See {@link RouteMetadata} for more information.\n * @ts2dart_const\n */\nvar Route = (function () {\n    function Route(_a) {\n        var _b = _a === void 0 ? {} : _a, path = _b.path, component = _b.component;\n        this.path = path;\n        this.component = component;\n    }\n    Route.prototype.toString = function () { return \"@Route(\" + this.path + \", \" + lang_1.stringify(this.component) + \")\"; };\n    return Route;\n}());\nexports.Route = Route;\n/**\n * Defines routes for a given component.\n *\n * It takes an array of {@link RouteMetadata}s.\n * @ts2dart_const\n */\nvar RoutesMetadata = (function () {\n    function RoutesMetadata(routes) {\n        this.routes = routes;\n    }\n    RoutesMetadata.prototype.toString = function () { return \"@Routes(\" + this.routes + \")\"; };\n    return RoutesMetadata;\n}());\nexports.RoutesMetadata = RoutesMetadata;\n//# sourceMappingURL=metadata.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvbWV0YWRhdGEvbWV0YWRhdGEuanM/MjgyNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsRUFBRTtBQUM1QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCLEVBQUU7QUFDNUI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsUUFBUSxvQkFBb0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLDhFQUE4RTtBQUMxSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvQkFBb0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELHVDQUF1QztBQUM1RjtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjM0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIGxhbmdfMSA9IHJlcXVpcmUoXCIuLi9mYWNhZGUvbGFuZ1wiKTtcbi8qKlxuICogSW5mb3JtYXRpb24gYWJvdXQgYSByb3V0ZS5cbiAqXG4gKiBJdCBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogLSBgcGF0aGAgaXMgYSBzdHJpbmcgdGhhdCB1c2VzIHRoZSByb3V0ZSBtYXRjaGVyIERTTC5cbiAqIC0gYGNvbXBvbmVudGAgYSBjb21wb25lbnQgdHlwZS5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogYGBgXG4gKiBpbXBvcnQge1JvdXRlc30gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbiAqXG4gKiBAUm91dGVzKFtcbiAqICAge3BhdGg6ICcvaG9tZScsIGNvbXBvbmVudDogSG9tZUNtcH1cbiAqIF0pXG4gKiBjbGFzcyBNeUFwcCB7fVxuICogYGBgXG4gKlxuICogQHRzMmRhcnRfY29uc3RcbiAqL1xudmFyIFJvdXRlTWV0YWRhdGEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJvdXRlTWV0YWRhdGEoKSB7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSb3V0ZU1ldGFkYXRhLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSb3V0ZU1ldGFkYXRhLnByb3RvdHlwZSwgXCJjb21wb25lbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFJvdXRlTWV0YWRhdGE7XG59KCkpO1xuZXhwb3J0cy5Sb3V0ZU1ldGFkYXRhID0gUm91dGVNZXRhZGF0YTtcbi8qKlxuICogU2VlIHtAbGluayBSb3V0ZU1ldGFkYXRhfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqIEB0czJkYXJ0X2NvbnN0XG4gKi9cbnZhciBSb3V0ZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUm91dGUoX2EpIHtcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIHBhdGggPSBfYi5wYXRoLCBjb21wb25lbnQgPSBfYi5jb21wb25lbnQ7XG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgIH1cbiAgICBSb3V0ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIkBSb3V0ZShcIiArIHRoaXMucGF0aCArIFwiLCBcIiArIGxhbmdfMS5zdHJpbmdpZnkodGhpcy5jb21wb25lbnQpICsgXCIpXCI7IH07XG4gICAgcmV0dXJuIFJvdXRlO1xufSgpKTtcbmV4cG9ydHMuUm91dGUgPSBSb3V0ZTtcbi8qKlxuICogRGVmaW5lcyByb3V0ZXMgZm9yIGEgZ2l2ZW4gY29tcG9uZW50LlxuICpcbiAqIEl0IHRha2VzIGFuIGFycmF5IG9mIHtAbGluayBSb3V0ZU1ldGFkYXRhfXMuXG4gKiBAdHMyZGFydF9jb25zdFxuICovXG52YXIgUm91dGVzTWV0YWRhdGEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJvdXRlc01ldGFkYXRhKHJvdXRlcykge1xuICAgICAgICB0aGlzLnJvdXRlcyA9IHJvdXRlcztcbiAgICB9XG4gICAgUm91dGVzTWV0YWRhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJAUm91dGVzKFwiICsgdGhpcy5yb3V0ZXMgKyBcIilcIjsgfTtcbiAgICByZXR1cm4gUm91dGVzTWV0YWRhdGE7XG59KCkpO1xuZXhwb3J0cy5Sb3V0ZXNNZXRhZGF0YSA9IFJvdXRlc01ldGFkYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3NyYy9tZXRhZGF0YS9tZXRhZGF0YS5qc1xuICoqIG1vZHVsZSBpZCA9IDM0MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 343:
/***/ function(module, exports) {

	eval("\"use strict\";\n/**\n* Name of the default outlet outlet.\n* @type {string}\n*/\nexports.DEFAULT_OUTLET_NAME = \"__DEFAULT\";\n//# sourceMappingURL=constants.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvY29uc3RhbnRzLmpzPzJhNjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsImZpbGUiOiIzNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuKiBOYW1lIG9mIHRoZSBkZWZhdWx0IG91dGxldCBvdXRsZXQuXG4qIEB0eXBlIHtzdHJpbmd9XG4qL1xuZXhwb3J0cy5ERUZBVUxUX09VVExFVF9OQU1FID0gXCJfX0RFRkFVTFRcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9AYW5ndWxhci9yb3V0ZXIvc3JjL2NvbnN0YW50cy5qc1xuICoqIG1vZHVsZSBpZCA9IDM0M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 344:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar segments_1 = __webpack_require__(341);\nvar lang_1 = __webpack_require__(336);\nvar exceptions_1 = __webpack_require__(345);\nvar collection_1 = __webpack_require__(337);\n// TODO: vsavkin: should reuse segments\nfunction link(segment, routeTree, urlTree, commands) {\n    if (commands.length === 0)\n        return urlTree;\n    var normalizedCommands = _normalizeCommands(commands);\n    if (_navigateToRoot(normalizedCommands)) {\n        return new segments_1.UrlTree(new segments_1.TreeNode(urlTree.root, []));\n    }\n    var startingNode = _findStartingNode(normalizedCommands, urlTree, segment, routeTree);\n    var updated = normalizedCommands.commands.length > 0 ?\n        _updateMany(collection_1.ListWrapper.clone(startingNode.children), normalizedCommands.commands) : [];\n    var newRoot = _constructNewTree(segments_1.rootNode(urlTree), startingNode, updated);\n    return new segments_1.UrlTree(newRoot);\n}\nexports.link = link;\nfunction _navigateToRoot(normalizedChange) {\n    return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 && normalizedChange.commands[0] == \"/\";\n}\nvar _NormalizedNavigationCommands = (function () {\n    function _NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, commands) {\n        this.isAbsolute = isAbsolute;\n        this.numberOfDoubleDots = numberOfDoubleDots;\n        this.commands = commands;\n    }\n    return _NormalizedNavigationCommands;\n}());\nfunction _normalizeCommands(commands) {\n    ;\n    '';\n    if (lang_1.isString(commands[0]) && commands.length === 1 && commands[0] == \"/\") {\n        return new _NormalizedNavigationCommands(true, 0, commands);\n    }\n    var numberOfDoubleDots = 0;\n    var isAbsolute = false;\n    var res = [];\n    for (var i = 0; i < commands.length; ++i) {\n        var c = commands[i];\n        if (!lang_1.isString(c)) {\n            res.push(c);\n            continue;\n        }\n        var parts = c.split('/');\n        for (var j = 0; j < parts.length; ++j) {\n            var cc = parts[j];\n            // first exp is treated in a special way\n            if (i == 0) {\n                if (j == 0 && cc == \".\") {\n                }\n                else if (j == 0 && cc == \"\") {\n                    isAbsolute = true;\n                }\n                else if (cc == \"..\") {\n                    numberOfDoubleDots++;\n                }\n                else if (cc != '') {\n                    res.push(cc);\n                }\n            }\n            else {\n                if (cc != '') {\n                    res.push(cc);\n                }\n            }\n        }\n    }\n    return new _NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);\n}\nfunction _findUrlSegment(segment, routeTree, urlTree, numberOfDoubleDots) {\n    var s = segment;\n    while (s.urlSegments.length === 0) {\n        s = routeTree.parent(s);\n    }\n    var urlSegment = collection_1.ListWrapper.last(s.urlSegments);\n    var path = urlTree.pathFromRoot(urlSegment);\n    if (path.length <= numberOfDoubleDots) {\n        throw new exceptions_1.BaseException(\"Invalid number of '../'\");\n    }\n    return path[path.length - 1 - numberOfDoubleDots];\n}\nfunction _findStartingNode(normalizedChange, urlTree, segment, routeTree) {\n    if (normalizedChange.isAbsolute) {\n        return segments_1.rootNode(urlTree);\n    }\n    else {\n        var urlSegment = _findUrlSegment(segment, routeTree, urlTree, normalizedChange.numberOfDoubleDots);\n        return _findMatchingNode(urlSegment, segments_1.rootNode(urlTree));\n    }\n}\nfunction _findMatchingNode(segment, node) {\n    if (node.value === segment)\n        return node;\n    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var c = _a[_i];\n        var r = _findMatchingNode(segment, c);\n        if (lang_1.isPresent(r))\n            return r;\n    }\n    return null;\n}\nfunction _constructNewTree(node, original, updated) {\n    if (node === original) {\n        return new segments_1.TreeNode(node.value, updated);\n    }\n    else {\n        return new segments_1.TreeNode(node.value, node.children.map(function (c) { return _constructNewTree(c, original, updated); }));\n    }\n}\nfunction _update(node, commands) {\n    var rest = commands.slice(1);\n    var next = rest.length === 0 ? null : rest[0];\n    var outlet = _outlet(commands);\n    var segment = _segment(commands);\n    // reach the end of the tree => create new tree nodes.\n    if (lang_1.isBlank(node) && !lang_1.isStringMap(next)) {\n        var urlSegment = new segments_1.UrlSegment(segment, {}, outlet);\n        var children = rest.length === 0 ? [] : [_update(null, rest)];\n        return new segments_1.TreeNode(urlSegment, children);\n    }\n    else if (lang_1.isBlank(node) && lang_1.isStringMap(next)) {\n        var urlSegment = new segments_1.UrlSegment(segment, next, outlet);\n        return _recurse(urlSegment, node, rest.slice(1));\n    }\n    else if (outlet != node.value.outlet) {\n        return node;\n    }\n    else if (lang_1.isStringMap(segment)) {\n        var newSegment = new segments_1.UrlSegment(node.value.segment, segment, node.value.outlet);\n        return _recurse(newSegment, node, rest);\n    }\n    else if (lang_1.isStringMap(next)) {\n        var urlSegment = new segments_1.UrlSegment(segment, next, outlet);\n        return _recurse(urlSegment, node, rest.slice(1));\n    }\n    else {\n        var urlSegment = new segments_1.UrlSegment(segment, {}, outlet);\n        return _recurse(urlSegment, node, rest);\n    }\n}\nfunction _recurse(urlSegment, node, rest) {\n    if (rest.length === 0) {\n        return new segments_1.TreeNode(urlSegment, []);\n    }\n    return new segments_1.TreeNode(urlSegment, _updateMany(collection_1.ListWrapper.clone(node.children), rest));\n}\nfunction _updateMany(nodes, commands) {\n    var outlet = _outlet(commands);\n    var nodesInRightOutlet = nodes.filter(function (c) { return c.value.outlet == outlet; });\n    if (nodesInRightOutlet.length > 0) {\n        var nodeRightOutlet = nodesInRightOutlet[0]; // there can be only one\n        nodes[nodes.indexOf(nodeRightOutlet)] = _update(nodeRightOutlet, commands);\n    }\n    else {\n        nodes.push(_update(null, commands));\n    }\n    return nodes;\n}\nfunction _segment(commands) {\n    if (!lang_1.isString(commands[0]))\n        return commands[0];\n    var parts = commands[0].toString().split(\":\");\n    return parts.length > 1 ? parts[1] : commands[0];\n}\nfunction _outlet(commands) {\n    if (!lang_1.isString(commands[0]))\n        return null;\n    var parts = commands[0].toString().split(\":\");\n    return parts.length > 1 ? parts[0] : null;\n}\n//# sourceMappingURL=link.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 345:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar base_wrapped_exception_1 = __webpack_require__(346);\nvar exception_handler_1 = __webpack_require__(347);\nvar exception_handler_2 = __webpack_require__(347);\nexports.ExceptionHandler = exception_handler_2.ExceptionHandler;\nvar BaseException = (function (_super) {\n    __extends(BaseException, _super);\n    function BaseException(message) {\n        if (message === void 0) { message = \"--\"; }\n        _super.call(this, message);\n        this.message = message;\n        this.stack = (new Error(message)).stack;\n    }\n    BaseException.prototype.toString = function () { return this.message; };\n    return BaseException;\n}(Error));\nexports.BaseException = BaseException;\n/**\n * Wraps an exception and provides additional context or information.\n */\nvar WrappedException = (function (_super) {\n    __extends(WrappedException, _super);\n    function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {\n        _super.call(this, _wrapperMessage);\n        this._wrapperMessage = _wrapperMessage;\n        this._originalException = _originalException;\n        this._originalStack = _originalStack;\n        this._context = _context;\n        this._wrapperStack = (new Error(_wrapperMessage)).stack;\n    }\n    Object.defineProperty(WrappedException.prototype, \"wrapperMessage\", {\n        get: function () { return this._wrapperMessage; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WrappedException.prototype, \"wrapperStack\", {\n        get: function () { return this._wrapperStack; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WrappedException.prototype, \"originalException\", {\n        get: function () { return this._originalException; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WrappedException.prototype, \"originalStack\", {\n        get: function () { return this._originalStack; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WrappedException.prototype, \"context\", {\n        get: function () { return this._context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WrappedException.prototype, \"message\", {\n        get: function () { return exception_handler_1.ExceptionHandler.exceptionToString(this); },\n        enumerable: true,\n        configurable: true\n    });\n    WrappedException.prototype.toString = function () { return this.message; };\n    return WrappedException;\n}(base_wrapped_exception_1.BaseWrappedException));\nexports.WrappedException = WrappedException;\nfunction makeTypeError(message) {\n    return new TypeError(message);\n}\nexports.makeTypeError = makeTypeError;\nfunction unimplemented() {\n    throw new BaseException('unimplemented');\n}\nexports.unimplemented = unimplemented;\n//# sourceMappingURL=exceptions.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvZmFjYWRlL2V4Y2VwdGlvbnMuanM/MWQzMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxnQkFBZ0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QscUJBQXFCO0FBQ3pFO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw2QkFBNkIsRUFBRTtBQUN6RDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCLDJCQUEyQixFQUFFO0FBQ3ZEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSwwQkFBMEIsZ0NBQWdDLEVBQUU7QUFDNUQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDBCQUEwQiw0QkFBNEIsRUFBRTtBQUN4RDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCLHNCQUFzQixFQUFFO0FBQ2xEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSwwQkFBMEIscUVBQXFFLEVBQUU7QUFDakc7QUFDQTtBQUNBLEtBQUs7QUFDTCx1REFBdUQscUJBQXFCO0FBQzVFO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM0NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgYmFzZV93cmFwcGVkX2V4Y2VwdGlvbl8xID0gcmVxdWlyZSgnLi9iYXNlX3dyYXBwZWRfZXhjZXB0aW9uJyk7XG52YXIgZXhjZXB0aW9uX2hhbmRsZXJfMSA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uX2hhbmRsZXInKTtcbnZhciBleGNlcHRpb25faGFuZGxlcl8yID0gcmVxdWlyZSgnLi9leGNlcHRpb25faGFuZGxlcicpO1xuZXhwb3J0cy5FeGNlcHRpb25IYW5kbGVyID0gZXhjZXB0aW9uX2hhbmRsZXJfMi5FeGNlcHRpb25IYW5kbGVyO1xudmFyIEJhc2VFeGNlcHRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCYXNlRXhjZXB0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJhc2VFeGNlcHRpb24obWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7IG1lc3NhZ2UgPSBcIi0tXCI7IH1cbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKG1lc3NhZ2UpKS5zdGFjaztcbiAgICB9XG4gICAgQmFzZUV4Y2VwdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1lc3NhZ2U7IH07XG4gICAgcmV0dXJuIEJhc2VFeGNlcHRpb247XG59KEVycm9yKSk7XG5leHBvcnRzLkJhc2VFeGNlcHRpb24gPSBCYXNlRXhjZXB0aW9uO1xuLyoqXG4gKiBXcmFwcyBhbiBleGNlcHRpb24gYW5kIHByb3ZpZGVzIGFkZGl0aW9uYWwgY29udGV4dCBvciBpbmZvcm1hdGlvbi5cbiAqL1xudmFyIFdyYXBwZWRFeGNlcHRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhXcmFwcGVkRXhjZXB0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFdyYXBwZWRFeGNlcHRpb24oX3dyYXBwZXJNZXNzYWdlLCBfb3JpZ2luYWxFeGNlcHRpb24sIF9vcmlnaW5hbFN0YWNrLCBfY29udGV4dCkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBfd3JhcHBlck1lc3NhZ2UpO1xuICAgICAgICB0aGlzLl93cmFwcGVyTWVzc2FnZSA9IF93cmFwcGVyTWVzc2FnZTtcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxFeGNlcHRpb24gPSBfb3JpZ2luYWxFeGNlcHRpb247XG4gICAgICAgIHRoaXMuX29yaWdpbmFsU3RhY2sgPSBfb3JpZ2luYWxTdGFjaztcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IF9jb250ZXh0O1xuICAgICAgICB0aGlzLl93cmFwcGVyU3RhY2sgPSAobmV3IEVycm9yKF93cmFwcGVyTWVzc2FnZSkpLnN0YWNrO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZEV4Y2VwdGlvbi5wcm90b3R5cGUsIFwid3JhcHBlck1lc3NhZ2VcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3dyYXBwZXJNZXNzYWdlOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZEV4Y2VwdGlvbi5wcm90b3R5cGUsIFwid3JhcHBlclN0YWNrXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl93cmFwcGVyU3RhY2s7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcmFwcGVkRXhjZXB0aW9uLnByb3RvdHlwZSwgXCJvcmlnaW5hbEV4Y2VwdGlvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fb3JpZ2luYWxFeGNlcHRpb247IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcmFwcGVkRXhjZXB0aW9uLnByb3RvdHlwZSwgXCJvcmlnaW5hbFN0YWNrXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9vcmlnaW5hbFN0YWNrOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlZEV4Y2VwdGlvbi5wcm90b3R5cGUsIFwiY29udGV4dFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fY29udGV4dDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyYXBwZWRFeGNlcHRpb24ucHJvdG90eXBlLCBcIm1lc3NhZ2VcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV4Y2VwdGlvbl9oYW5kbGVyXzEuRXhjZXB0aW9uSGFuZGxlci5leGNlcHRpb25Ub1N0cmluZyh0aGlzKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgV3JhcHBlZEV4Y2VwdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm1lc3NhZ2U7IH07XG4gICAgcmV0dXJuIFdyYXBwZWRFeGNlcHRpb247XG59KGJhc2Vfd3JhcHBlZF9leGNlcHRpb25fMS5CYXNlV3JhcHBlZEV4Y2VwdGlvbikpO1xuZXhwb3J0cy5XcmFwcGVkRXhjZXB0aW9uID0gV3JhcHBlZEV4Y2VwdGlvbjtcbmZ1bmN0aW9uIG1ha2VUeXBlRXJyb3IobWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKG1lc3NhZ2UpO1xufVxuZXhwb3J0cy5tYWtlVHlwZUVycm9yID0gbWFrZVR5cGVFcnJvcjtcbmZ1bmN0aW9uIHVuaW1wbGVtZW50ZWQoKSB7XG4gICAgdGhyb3cgbmV3IEJhc2VFeGNlcHRpb24oJ3VuaW1wbGVtZW50ZWQnKTtcbn1cbmV4cG9ydHMudW5pbXBsZW1lbnRlZCA9IHVuaW1wbGVtZW50ZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGNlcHRpb25zLmpzLm1hcFxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvZmFjYWRlL2V4Y2VwdGlvbnMuanNcbiAqKiBtb2R1bGUgaWQgPSAzNDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 346:
/***/ function(module, exports) {

	eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n* A base class for the WrappedException that can be used to identify\n* a WrappedException from ExceptionHandler without adding circular\n* dependency.\n*/\nvar BaseWrappedException = (function (_super) {\n    __extends(BaseWrappedException, _super);\n    function BaseWrappedException(message) {\n        _super.call(this, message);\n    }\n    Object.defineProperty(BaseWrappedException.prototype, \"wrapperMessage\", {\n        get: function () { return ''; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseWrappedException.prototype, \"wrapperStack\", {\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseWrappedException.prototype, \"originalException\", {\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseWrappedException.prototype, \"originalStack\", {\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseWrappedException.prototype, \"context\", {\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseWrappedException.prototype, \"message\", {\n        get: function () { return ''; },\n        enumerable: true,\n        configurable: true\n    });\n    return BaseWrappedException;\n}(Error));\nexports.BaseWrappedException = BaseWrappedException;\n//# sourceMappingURL=base_wrapped_exception.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvZmFjYWRlL2Jhc2Vfd3JhcHBlZF9leGNlcHRpb24uanM/YjNlMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFdBQVcsRUFBRTtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCLGFBQWEsRUFBRTtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCLGFBQWEsRUFBRTtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCLGFBQWEsRUFBRTtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCLGFBQWEsRUFBRTtBQUN6QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCLFdBQVcsRUFBRTtBQUN2QztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiMzQ2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbi8qKlxuKiBBIGJhc2UgY2xhc3MgZm9yIHRoZSBXcmFwcGVkRXhjZXB0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnlcbiogYSBXcmFwcGVkRXhjZXB0aW9uIGZyb20gRXhjZXB0aW9uSGFuZGxlciB3aXRob3V0IGFkZGluZyBjaXJjdWxhclxuKiBkZXBlbmRlbmN5LlxuKi9cbnZhciBCYXNlV3JhcHBlZEV4Y2VwdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJhc2VXcmFwcGVkRXhjZXB0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJhc2VXcmFwcGVkRXhjZXB0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNlV3JhcHBlZEV4Y2VwdGlvbi5wcm90b3R5cGUsIFwid3JhcHBlck1lc3NhZ2VcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcnOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZVdyYXBwZWRFeGNlcHRpb24ucHJvdG90eXBlLCBcIndyYXBwZXJTdGFja1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2VXcmFwcGVkRXhjZXB0aW9uLnByb3RvdHlwZSwgXCJvcmlnaW5hbEV4Y2VwdGlvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJhc2VXcmFwcGVkRXhjZXB0aW9uLnByb3RvdHlwZSwgXCJvcmlnaW5hbFN0YWNrXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZVdyYXBwZWRFeGNlcHRpb24ucHJvdG90eXBlLCBcImNvbnRleHRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNlV3JhcHBlZEV4Y2VwdGlvbi5wcm90b3R5cGUsIFwibWVzc2FnZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gJyc7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBCYXNlV3JhcHBlZEV4Y2VwdGlvbjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuQmFzZVdyYXBwZWRFeGNlcHRpb24gPSBCYXNlV3JhcHBlZEV4Y2VwdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2Vfd3JhcHBlZF9leGNlcHRpb24uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3NyYy9mYWNhZGUvYmFzZV93cmFwcGVkX2V4Y2VwdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDM0NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 347:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar lang_1 = __webpack_require__(336);\nvar base_wrapped_exception_1 = __webpack_require__(346);\nvar collection_1 = __webpack_require__(337);\nvar _ArrayLogger = (function () {\n    function _ArrayLogger() {\n        this.res = [];\n    }\n    _ArrayLogger.prototype.log = function (s) { this.res.push(s); };\n    _ArrayLogger.prototype.logError = function (s) { this.res.push(s); };\n    _ArrayLogger.prototype.logGroup = function (s) { this.res.push(s); };\n    _ArrayLogger.prototype.logGroupEnd = function () { };\n    ;\n    return _ArrayLogger;\n}());\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To\n * intercept error handling,\n * write a custom exception handler that replaces this default as appropriate for your app.\n *\n * ### Example\n *\n * ```javascript\n *\n * class MyExceptionHandler implements ExceptionHandler {\n *   call(error, stackTrace = null, reason = null) {\n *     // do something with the exception\n *   }\n * }\n *\n * bootstrap(MyApp, [provide(ExceptionHandler, {useClass: MyExceptionHandler})])\n *\n * ```\n */\nvar ExceptionHandler = (function () {\n    function ExceptionHandler(_logger, _rethrowException) {\n        if (_rethrowException === void 0) { _rethrowException = true; }\n        this._logger = _logger;\n        this._rethrowException = _rethrowException;\n    }\n    ExceptionHandler.exceptionToString = function (exception, stackTrace, reason) {\n        if (stackTrace === void 0) { stackTrace = null; }\n        if (reason === void 0) { reason = null; }\n        var l = new _ArrayLogger();\n        var e = new ExceptionHandler(l, false);\n        e.call(exception, stackTrace, reason);\n        return l.res.join(\"\\n\");\n    };\n    ExceptionHandler.prototype.call = function (exception, stackTrace, reason) {\n        if (stackTrace === void 0) { stackTrace = null; }\n        if (reason === void 0) { reason = null; }\n        var originalException = this._findOriginalException(exception);\n        var originalStack = this._findOriginalStack(exception);\n        var context = this._findContext(exception);\n        this._logger.logGroup(\"EXCEPTION: \" + this._extractMessage(exception));\n        if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {\n            this._logger.logError(\"STACKTRACE:\");\n            this._logger.logError(this._longStackTrace(stackTrace));\n        }\n        if (lang_1.isPresent(reason)) {\n            this._logger.logError(\"REASON: \" + reason);\n        }\n        if (lang_1.isPresent(originalException)) {\n            this._logger.logError(\"ORIGINAL EXCEPTION: \" + this._extractMessage(originalException));\n        }\n        if (lang_1.isPresent(originalStack)) {\n            this._logger.logError(\"ORIGINAL STACKTRACE:\");\n            this._logger.logError(this._longStackTrace(originalStack));\n        }\n        if (lang_1.isPresent(context)) {\n            this._logger.logError(\"ERROR CONTEXT:\");\n            this._logger.logError(context);\n        }\n        this._logger.logGroupEnd();\n        // We rethrow exceptions, so operations like 'bootstrap' will result in an error\n        // when an exception happens. If we do not rethrow, bootstrap will always succeed.\n        if (this._rethrowException)\n            throw exception;\n    };\n    /** @internal */\n    ExceptionHandler.prototype._extractMessage = function (exception) {\n        return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage :\n            exception.toString();\n    };\n    /** @internal */\n    ExceptionHandler.prototype._longStackTrace = function (stackTrace) {\n        return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join(\"\\n\\n-----async gap-----\\n\") :\n            stackTrace.toString();\n    };\n    /** @internal */\n    ExceptionHandler.prototype._findContext = function (exception) {\n        try {\n            if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))\n                return null;\n            return lang_1.isPresent(exception.context) ? exception.context :\n                this._findContext(exception.originalException);\n        }\n        catch (e) {\n            // exception.context can throw an exception. if it happens, we ignore the context.\n            return null;\n        }\n    };\n    /** @internal */\n    ExceptionHandler.prototype._findOriginalException = function (exception) {\n        if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))\n            return null;\n        var e = exception.originalException;\n        while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {\n            e = e.originalException;\n        }\n        return e;\n    };\n    /** @internal */\n    ExceptionHandler.prototype._findOriginalStack = function (exception) {\n        if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException))\n            return null;\n        var e = exception;\n        var stack = exception.originalStack;\n        while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {\n            e = e.originalException;\n            if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {\n                stack = e.originalStack;\n            }\n        }\n        return stack;\n    };\n    return ExceptionHandler;\n}());\nexports.ExceptionHandler = ExceptionHandler;\n//# sourceMappingURL=exception_handler.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 348:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar lang_1 = __webpack_require__(336);\nfunction hasLifecycleHook(name, obj) {\n    if (lang_1.isBlank(obj))\n        return false;\n    var type = obj.constructor;\n    if (!(type instanceof lang_1.Type))\n        return false;\n    return name in type.prototype;\n}\nexports.hasLifecycleHook = hasLifecycleHook;\n//# sourceMappingURL=lifecycle_reflector.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvbGlmZWN5Y2xlX3JlZmxlY3Rvci5qcz9lYjcxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzNDguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBsYW5nXzEgPSByZXF1aXJlKCcuL2ZhY2FkZS9sYW5nJyk7XG5mdW5jdGlvbiBoYXNMaWZlY3ljbGVIb29rKG5hbWUsIG9iaikge1xuICAgIGlmIChsYW5nXzEuaXNCbGFuayhvYmopKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHR5cGUgPSBvYmouY29uc3RydWN0b3I7XG4gICAgaWYgKCEodHlwZSBpbnN0YW5jZW9mIGxhbmdfMS5UeXBlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBuYW1lIGluIHR5cGUucHJvdG90eXBlO1xufVxuZXhwb3J0cy5oYXNMaWZlY3ljbGVIb29rID0gaGFzTGlmZWN5Y2xlSG9vaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZmVjeWNsZV9yZWZsZWN0b3IuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3NyYy9saWZlY3ljbGVfcmVmbGVjdG9yLmpzXG4gKiogbW9kdWxlIGlkID0gMzQ4XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 349:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar metadata_1 = __webpack_require__(342);\nvar core_private_1 = __webpack_require__(350);\n/**\n * Defines routes for a given component.\n *\n * It takes an array of {@link RouteMetadata}s.\n */\nexports.Routes = core_private_1.makeDecorator(metadata_1.RoutesMetadata);\n//# sourceMappingURL=decorators.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvbWV0YWRhdGEvZGVjb3JhdG9ycy5qcz9iNGUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvQkFBb0I7QUFDN0M7QUFDQTtBQUNBIiwiZmlsZSI6IjM0OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIG1ldGFkYXRhXzEgPSByZXF1aXJlKFwiLi9tZXRhZGF0YVwiKTtcbnZhciBjb3JlX3ByaXZhdGVfMSA9IHJlcXVpcmUoJy4uL2NvcmVfcHJpdmF0ZScpO1xuLyoqXG4gKiBEZWZpbmVzIHJvdXRlcyBmb3IgYSBnaXZlbiBjb21wb25lbnQuXG4gKlxuICogSXQgdGFrZXMgYW4gYXJyYXkgb2Yge0BsaW5rIFJvdXRlTWV0YWRhdGF9cy5cbiAqL1xuZXhwb3J0cy5Sb3V0ZXMgPSBjb3JlX3ByaXZhdGVfMS5tYWtlRGVjb3JhdG9yKG1ldGFkYXRhXzEuUm91dGVzTWV0YWRhdGEpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb3JhdG9ycy5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9AYW5ndWxhci9yb3V0ZXIvc3JjL21ldGFkYXRhL2RlY29yYXRvcnMuanNcbiAqKiBtb2R1bGUgaWQgPSAzNDlcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 350:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nexports.makeDecorator = core_1.__core_private__.makeDecorator;\n//# sourceMappingURL=core_private.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvY29yZV9wcml2YXRlLmpzPzFkMTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgY29yZV8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpO1xuZXhwb3J0cy5tYWtlRGVjb3JhdG9yID0gY29yZV8xLl9fY29yZV9wcml2YXRlX18ubWFrZURlY29yYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvcmVfcHJpdmF0ZS5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9AYW5ndWxhci9yb3V0ZXIvc3JjL2NvcmVfcHJpdmF0ZS5qc1xuICoqIG1vZHVsZSBpZCA9IDM1MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 351:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar segments_1 = __webpack_require__(341);\nvar core_1 = __webpack_require__(1);\nvar lang_1 = __webpack_require__(336);\n/**\n * Defines a way to serialize/deserialize a url tree.\n */\nvar RouterUrlSerializer = (function () {\n    function RouterUrlSerializer() {\n    }\n    return RouterUrlSerializer;\n}());\nexports.RouterUrlSerializer = RouterUrlSerializer;\n/**\n * A default implementation of the serialization.\n */\nvar DefaultRouterUrlSerializer = (function (_super) {\n    __extends(DefaultRouterUrlSerializer, _super);\n    function DefaultRouterUrlSerializer() {\n        _super.apply(this, arguments);\n    }\n    DefaultRouterUrlSerializer.prototype.parse = function (url) {\n        var root = new _UrlParser().parse(url);\n        return new segments_1.UrlTree(root);\n    };\n    DefaultRouterUrlSerializer.prototype.serialize = function (tree) { return _serializeUrlTreeNode(segments_1.rootNode(tree)); };\n    return DefaultRouterUrlSerializer;\n}(RouterUrlSerializer));\nexports.DefaultRouterUrlSerializer = DefaultRouterUrlSerializer;\nfunction _serializeUrlTreeNode(node) {\n    return \"\" + node.value + _serializeChildren(node);\n}\nfunction _serializeUrlTreeNodes(nodes) {\n    var main = nodes[0].value.toString();\n    var auxNodes = nodes.slice(1);\n    var aux = auxNodes.length > 0 ? \"(\" + auxNodes.map(_serializeUrlTreeNode).join(\"//\") + \")\" : \"\";\n    var children = _serializeChildren(nodes[0]);\n    return \"\" + main + aux + children;\n}\nfunction _serializeChildren(node) {\n    if (node.children.length > 0) {\n        return \"/\" + _serializeUrlTreeNodes(node.children);\n    }\n    else {\n        return \"\";\n    }\n}\nvar SEGMENT_RE = lang_1.RegExpWrapper.create('^[^\\\\/\\\\(\\\\)\\\\?;=&#]+');\nfunction matchUrlSegment(str) {\n    var match = lang_1.RegExpWrapper.firstMatch(SEGMENT_RE, str);\n    return lang_1.isPresent(match) ? match[0] : '';\n}\nvar QUERY_PARAM_VALUE_RE = lang_1.RegExpWrapper.create('^[^\\\\(\\\\)\\\\?;&#]+');\nfunction matchUrlQueryParamValue(str) {\n    var match = lang_1.RegExpWrapper.firstMatch(QUERY_PARAM_VALUE_RE, str);\n    return lang_1.isPresent(match) ? match[0] : '';\n}\nvar _UrlParser = (function () {\n    function _UrlParser() {\n    }\n    _UrlParser.prototype.peekStartsWith = function (str) { return this._remaining.startsWith(str); };\n    _UrlParser.prototype.capture = function (str) {\n        if (!this._remaining.startsWith(str)) {\n            throw new core_1.BaseException(\"Expected \\\"\" + str + \"\\\".\");\n        }\n        this._remaining = this._remaining.substring(str.length);\n    };\n    _UrlParser.prototype.parse = function (url) {\n        this._remaining = url;\n        if (url == '' || url == '/') {\n            return new segments_1.TreeNode(new segments_1.UrlSegment('', {}, null), []);\n        }\n        else {\n            return this.parseRoot();\n        }\n    };\n    _UrlParser.prototype.parseRoot = function () {\n        var segments = this.parseSegments();\n        return new segments_1.TreeNode(new segments_1.UrlSegment('', {}, null), segments);\n    };\n    _UrlParser.prototype.parseSegments = function (outletName) {\n        if (outletName === void 0) { outletName = null; }\n        if (this._remaining.length == 0) {\n            return [];\n        }\n        if (this.peekStartsWith('/')) {\n            this.capture('/');\n        }\n        var path = matchUrlSegment(this._remaining);\n        this.capture(path);\n        if (path.indexOf(\":\") > -1) {\n            var parts = path.split(\":\");\n            outletName = parts[0];\n            path = parts[1];\n        }\n        var matrixParams = {};\n        if (this.peekStartsWith(';')) {\n            matrixParams = this.parseMatrixParams();\n        }\n        var aux = [];\n        if (this.peekStartsWith('(')) {\n            aux = this.parseAuxiliaryRoutes();\n        }\n        var children = [];\n        if (this.peekStartsWith('/') && !this.peekStartsWith('//')) {\n            this.capture('/');\n            children = this.parseSegments();\n        }\n        var segment = new segments_1.UrlSegment(path, matrixParams, outletName);\n        var node = new segments_1.TreeNode(segment, children);\n        return [node].concat(aux);\n    };\n    _UrlParser.prototype.parseQueryParams = function () {\n        var params = {};\n        this.capture('?');\n        this.parseQueryParam(params);\n        while (this._remaining.length > 0 && this.peekStartsWith('&')) {\n            this.capture('&');\n            this.parseQueryParam(params);\n        }\n        return params;\n    };\n    _UrlParser.prototype.parseMatrixParams = function () {\n        var params = {};\n        while (this._remaining.length > 0 && this.peekStartsWith(';')) {\n            this.capture(';');\n            this.parseParam(params);\n        }\n        return params;\n    };\n    _UrlParser.prototype.parseParam = function (params) {\n        var key = matchUrlSegment(this._remaining);\n        if (lang_1.isBlank(key)) {\n            return;\n        }\n        this.capture(key);\n        var value = \"true\";\n        if (this.peekStartsWith('=')) {\n            this.capture('=');\n            var valueMatch = matchUrlSegment(this._remaining);\n            if (lang_1.isPresent(valueMatch)) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        params[key] = value;\n    };\n    _UrlParser.prototype.parseQueryParam = function (params) {\n        var key = matchUrlSegment(this._remaining);\n        if (lang_1.isBlank(key)) {\n            return;\n        }\n        this.capture(key);\n        var value = \"true\";\n        if (this.peekStartsWith('=')) {\n            this.capture('=');\n            var valueMatch = matchUrlQueryParamValue(this._remaining);\n            if (lang_1.isPresent(valueMatch)) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        params[key] = value;\n    };\n    _UrlParser.prototype.parseAuxiliaryRoutes = function () {\n        var segments = [];\n        this.capture('(');\n        while (!this.peekStartsWith(')') && this._remaining.length > 0) {\n            segments = segments.concat(this.parseSegments(\"aux\"));\n            if (this.peekStartsWith('//')) {\n                this.capture('//');\n            }\n        }\n        this.capture(')');\n        return segments;\n    };\n    return _UrlParser;\n}());\n//# sourceMappingURL=router_url_serializer.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 352:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar router_providers_common_1 = __webpack_require__(353);\nvar platform_browser_1 = __webpack_require__(176);\nvar common_1 = __webpack_require__(181);\n/**\n * A list of {@link Provider}s. To use the router, you must add this to your application.\n *\n * ```\n * import {Component} from '@angular/core';\n * import {\n *   ROUTER_DIRECTIVES,\n *   ROUTER_PROVIDERS,\n *   Routes\n * } from '@angular/router';\n *\n * @Component({directives: [ROUTER_DIRECTIVES]})\n * @Routes([\n *  {...},\n * ])\n * class AppCmp {\n *   // ...\n * }\n *\n * bootstrap(AppCmp, [ROUTER_PROVIDERS]);\n * ```\n */\nexports.ROUTER_PROVIDERS = [\n    router_providers_common_1.ROUTER_PROVIDERS_COMMON,\n    /*@ts2dart_Provider*/ { provide: common_1.PlatformLocation, useClass: platform_browser_1.BrowserPlatformLocation },\n];\n//# sourceMappingURL=router_providers.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvcm91dGVyX3Byb3ZpZGVycy5qcz8zNmYwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGVBQWU7QUFDN0I7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLGVBQWUsZ0NBQWdDO0FBQy9DO0FBQ0EsS0FBSyxJQUFJO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMkZBQTJGO0FBQ3RIO0FBQ0EiLCJmaWxlIjoiMzUyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcm91dGVyX3Byb3ZpZGVyc19jb21tb25fMSA9IHJlcXVpcmUoJy4vcm91dGVyX3Byb3ZpZGVyc19jb21tb24nKTtcbnZhciBwbGF0Zm9ybV9icm93c2VyXzEgPSByZXF1aXJlKCdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJyk7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKCdAYW5ndWxhci9jb21tb24nKTtcbi8qKlxuICogQSBsaXN0IG9mIHtAbGluayBQcm92aWRlcn1zLiBUbyB1c2UgdGhlIHJvdXRlciwgeW91IG11c3QgYWRkIHRoaXMgdG8geW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBgYGBcbiAqIGltcG9ydCB7Q29tcG9uZW50fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqIGltcG9ydCB7XG4gKiAgIFJPVVRFUl9ESVJFQ1RJVkVTLFxuICogICBST1VURVJfUFJPVklERVJTLFxuICogICBSb3V0ZXNcbiAqIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbiAqXG4gKiBAQ29tcG9uZW50KHtkaXJlY3RpdmVzOiBbUk9VVEVSX0RJUkVDVElWRVNdfSlcbiAqIEBSb3V0ZXMoW1xuICogIHsuLi59LFxuICogXSlcbiAqIGNsYXNzIEFwcENtcCB7XG4gKiAgIC8vIC4uLlxuICogfVxuICpcbiAqIGJvb3RzdHJhcChBcHBDbXAsIFtST1VURVJfUFJPVklERVJTXSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0cy5ST1VURVJfUFJPVklERVJTID0gW1xuICAgIHJvdXRlcl9wcm92aWRlcnNfY29tbW9uXzEuUk9VVEVSX1BST1ZJREVSU19DT01NT04sXG4gICAgLypAdHMyZGFydF9Qcm92aWRlciovIHsgcHJvdmlkZTogY29tbW9uXzEuUGxhdGZvcm1Mb2NhdGlvbiwgdXNlQ2xhc3M6IHBsYXRmb3JtX2Jyb3dzZXJfMS5Ccm93c2VyUGxhdGZvcm1Mb2NhdGlvbiB9LFxuXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlcl9wcm92aWRlcnMuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3NyYy9yb3V0ZXJfcHJvdmlkZXJzLmpzXG4gKiogbW9kdWxlIGlkID0gMzUyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 353:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar common_1 = __webpack_require__(181);\nvar router_1 = __webpack_require__(335);\nvar router_url_serializer_1 = __webpack_require__(351);\nvar core_2 = __webpack_require__(1);\nvar core_3 = __webpack_require__(1);\n/**\n * The Platform agnostic ROUTER PROVIDERS\n */\nexports.ROUTER_PROVIDERS_COMMON = [\n    router_1.RouterOutletMap,\n    /*@ts2dart_Provider*/ { provide: router_url_serializer_1.RouterUrlSerializer, useClass: router_url_serializer_1.DefaultRouterUrlSerializer },\n    /*@ts2dart_Provider*/ { provide: common_1.LocationStrategy, useClass: common_1.PathLocationStrategy }, common_1.Location,\n    /*@ts2dart_Provider*/ {\n        provide: router_1.Router,\n        useFactory: routerFactory,\n        deps: /*@ts2dart_const*/ [core_2.ApplicationRef, core_1.ComponentResolver, router_url_serializer_1.RouterUrlSerializer, router_1.RouterOutletMap, common_1.Location],\n    },\n];\nfunction routerFactory(app, componentResolver, urlSerializer, routerOutletMap, location) {\n    if (app.componentTypes.length == 0) {\n        throw new core_3.BaseException(\"Bootstrap at least one component before injecting Router.\");\n    }\n    // TODO: vsavkin this should not be null\n    var router = new router_1.Router(null, app.componentTypes[0], componentResolver, urlSerializer, routerOutletMap, location);\n    app.registerDisposeListener(function () { return router.dispose(); });\n    return router;\n}\n//# sourceMappingURL=router_providers_common.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvcm91dGVyX3Byb3ZpZGVyc19jb21tb24uanM/YjVmOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIscUhBQXFIO0FBQ2hKLDJCQUEyQiw4RUFBOEU7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMseUJBQXlCLEVBQUU7QUFDeEU7QUFDQTtBQUNBIiwiZmlsZSI6IjM1My5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvbW1vbicpO1xudmFyIHJvdXRlcl8xID0gcmVxdWlyZSgnLi9yb3V0ZXInKTtcbnZhciByb3V0ZXJfdXJsX3NlcmlhbGl6ZXJfMSA9IHJlcXVpcmUoJy4vcm91dGVyX3VybF9zZXJpYWxpemVyJyk7XG52YXIgY29yZV8yID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpO1xudmFyIGNvcmVfMyA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbi8qKlxuICogVGhlIFBsYXRmb3JtIGFnbm9zdGljIFJPVVRFUiBQUk9WSURFUlNcbiAqL1xuZXhwb3J0cy5ST1VURVJfUFJPVklERVJTX0NPTU1PTiA9IFtcbiAgICByb3V0ZXJfMS5Sb3V0ZXJPdXRsZXRNYXAsXG4gICAgLypAdHMyZGFydF9Qcm92aWRlciovIHsgcHJvdmlkZTogcm91dGVyX3VybF9zZXJpYWxpemVyXzEuUm91dGVyVXJsU2VyaWFsaXplciwgdXNlQ2xhc3M6IHJvdXRlcl91cmxfc2VyaWFsaXplcl8xLkRlZmF1bHRSb3V0ZXJVcmxTZXJpYWxpemVyIH0sXG4gICAgLypAdHMyZGFydF9Qcm92aWRlciovIHsgcHJvdmlkZTogY29tbW9uXzEuTG9jYXRpb25TdHJhdGVneSwgdXNlQ2xhc3M6IGNvbW1vbl8xLlBhdGhMb2NhdGlvblN0cmF0ZWd5IH0sIGNvbW1vbl8xLkxvY2F0aW9uLFxuICAgIC8qQHRzMmRhcnRfUHJvdmlkZXIqLyB7XG4gICAgICAgIHByb3ZpZGU6IHJvdXRlcl8xLlJvdXRlcixcbiAgICAgICAgdXNlRmFjdG9yeTogcm91dGVyRmFjdG9yeSxcbiAgICAgICAgZGVwczogLypAdHMyZGFydF9jb25zdCovIFtjb3JlXzIuQXBwbGljYXRpb25SZWYsIGNvcmVfMS5Db21wb25lbnRSZXNvbHZlciwgcm91dGVyX3VybF9zZXJpYWxpemVyXzEuUm91dGVyVXJsU2VyaWFsaXplciwgcm91dGVyXzEuUm91dGVyT3V0bGV0TWFwLCBjb21tb25fMS5Mb2NhdGlvbl0sXG4gICAgfSxcbl07XG5mdW5jdGlvbiByb3V0ZXJGYWN0b3J5KGFwcCwgY29tcG9uZW50UmVzb2x2ZXIsIHVybFNlcmlhbGl6ZXIsIHJvdXRlck91dGxldE1hcCwgbG9jYXRpb24pIHtcbiAgICBpZiAoYXBwLmNvbXBvbmVudFR5cGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBjb3JlXzMuQmFzZUV4Y2VwdGlvbihcIkJvb3RzdHJhcCBhdCBsZWFzdCBvbmUgY29tcG9uZW50IGJlZm9yZSBpbmplY3RpbmcgUm91dGVyLlwiKTtcbiAgICB9XG4gICAgLy8gVE9ETzogdnNhdmtpbiB0aGlzIHNob3VsZCBub3QgYmUgbnVsbFxuICAgIHZhciByb3V0ZXIgPSBuZXcgcm91dGVyXzEuUm91dGVyKG51bGwsIGFwcC5jb21wb25lbnRUeXBlc1swXSwgY29tcG9uZW50UmVzb2x2ZXIsIHVybFNlcmlhbGl6ZXIsIHJvdXRlck91dGxldE1hcCwgbG9jYXRpb24pO1xuICAgIGFwcC5yZWdpc3RlckRpc3Bvc2VMaXN0ZW5lcihmdW5jdGlvbiAoKSB7IHJldHVybiByb3V0ZXIuZGlzcG9zZSgpOyB9KTtcbiAgICByZXR1cm4gcm91dGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyX3Byb3ZpZGVyc19jb21tb24uanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3NyYy9yb3V0ZXJfcHJvdmlkZXJzX2NvbW1vbi5qc1xuICoqIG1vZHVsZSBpZCA9IDM1M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 354:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar router_1 = __webpack_require__(335);\nvar constants_1 = __webpack_require__(343);\nvar lang_1 = __webpack_require__(336);\nvar RouterOutlet = (function () {\n    function RouterOutlet(parentOutletMap, _location, name) {\n        this._location = _location;\n        parentOutletMap.registerOutlet(lang_1.isBlank(name) ? constants_1.DEFAULT_OUTLET_NAME : name, this);\n    }\n    RouterOutlet.prototype.unload = function () {\n        this._loaded.destroy();\n        this._loaded = null;\n    };\n    Object.defineProperty(RouterOutlet.prototype, \"loadedComponent\", {\n        /**\n         * Returns the loaded component.\n         */\n        get: function () { return lang_1.isPresent(this._loaded) ? this._loaded.instance : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RouterOutlet.prototype, \"isLoaded\", {\n        /**\n         * Returns true is the outlet is not empty.\n         */\n        get: function () { return lang_1.isPresent(this._loaded); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Called by the Router to instantiate a new component.\n     */\n    RouterOutlet.prototype.load = function (factory, providers, outletMap) {\n        this.outletMap = outletMap;\n        var inj = core_1.ReflectiveInjector.fromResolvedProviders(providers, this._location.parentInjector);\n        this._loaded = this._location.createComponent(factory, this._location.length, inj, []);\n        return this._loaded;\n    };\n    RouterOutlet.decorators = [\n        { type: core_1.Directive, args: [{ selector: 'router-outlet' },] },\n    ];\n    RouterOutlet.ctorParameters = [\n        { type: router_1.RouterOutletMap, },\n        { type: core_1.ViewContainerRef, },\n        { type: undefined, decorators: [{ type: core_1.Attribute, args: ['name',] },] },\n    ];\n    return RouterOutlet;\n}());\nexports.RouterOutlet = RouterOutlet;\n//# sourceMappingURL=router_outlet.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvZGlyZWN0aXZlcy9yb3V0ZXJfb3V0bGV0LmpzPzZkZmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHNFQUFzRSxFQUFFO0FBQ2xHO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsdUNBQXVDLEVBQUU7QUFDbkU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsaUNBQWlDLDRCQUE0QixJQUFJO0FBQzFFO0FBQ0E7QUFDQSxTQUFTLGtDQUFrQztBQUMzQyxTQUFTLGlDQUFpQztBQUMxQyxTQUFTLGdDQUFnQywwQ0FBMEMsSUFBSTtBQUN2RjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiMzU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgY29yZV8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpO1xudmFyIHJvdXRlcl8xID0gcmVxdWlyZSgnLi4vcm91dGVyJyk7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKTtcbnZhciBsYW5nXzEgPSByZXF1aXJlKCcuLi9mYWNhZGUvbGFuZycpO1xudmFyIFJvdXRlck91dGxldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUm91dGVyT3V0bGV0KHBhcmVudE91dGxldE1hcCwgX2xvY2F0aW9uLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuX2xvY2F0aW9uID0gX2xvY2F0aW9uO1xuICAgICAgICBwYXJlbnRPdXRsZXRNYXAucmVnaXN0ZXJPdXRsZXQobGFuZ18xLmlzQmxhbmsobmFtZSkgPyBjb25zdGFudHNfMS5ERUZBVUxUX09VVExFVF9OQU1FIDogbmFtZSwgdGhpcyk7XG4gICAgfVxuICAgIFJvdXRlck91dGxldC5wcm90b3R5cGUudW5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9sb2FkZWQuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9sb2FkZWQgPSBudWxsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJvdXRlck91dGxldC5wcm90b3R5cGUsIFwibG9hZGVkQ29tcG9uZW50XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGxvYWRlZCBjb21wb25lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxhbmdfMS5pc1ByZXNlbnQodGhpcy5fbG9hZGVkKSA/IHRoaXMuX2xvYWRlZC5pbnN0YW5jZSA6IG51bGw7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSb3V0ZXJPdXRsZXQucHJvdG90eXBlLCBcImlzTG9hZGVkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdHJ1ZSBpcyB0aGUgb3V0bGV0IGlzIG5vdCBlbXB0eS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGFuZ18xLmlzUHJlc2VudCh0aGlzLl9sb2FkZWQpOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYnkgdGhlIFJvdXRlciB0byBpbnN0YW50aWF0ZSBhIG5ldyBjb21wb25lbnQuXG4gICAgICovXG4gICAgUm91dGVyT3V0bGV0LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGZhY3RvcnksIHByb3ZpZGVycywgb3V0bGV0TWFwKSB7XG4gICAgICAgIHRoaXMub3V0bGV0TWFwID0gb3V0bGV0TWFwO1xuICAgICAgICB2YXIgaW5qID0gY29yZV8xLlJlZmxlY3RpdmVJbmplY3Rvci5mcm9tUmVzb2x2ZWRQcm92aWRlcnMocHJvdmlkZXJzLCB0aGlzLl9sb2NhdGlvbi5wYXJlbnRJbmplY3Rvcik7XG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IHRoaXMuX2xvY2F0aW9uLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5LCB0aGlzLl9sb2NhdGlvbi5sZW5ndGgsIGluaiwgW10pO1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZGVkO1xuICAgIH07XG4gICAgUm91dGVyT3V0bGV0LmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogY29yZV8xLkRpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdyb3V0ZXItb3V0bGV0JyB9LF0gfSxcbiAgICBdO1xuICAgIFJvdXRlck91dGxldC5jdG9yUGFyYW1ldGVycyA9IFtcbiAgICAgICAgeyB0eXBlOiByb3V0ZXJfMS5Sb3V0ZXJPdXRsZXRNYXAsIH0sXG4gICAgICAgIHsgdHlwZTogY29yZV8xLlZpZXdDb250YWluZXJSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBjb3JlXzEuQXR0cmlidXRlLCBhcmdzOiBbJ25hbWUnLF0gfSxdIH0sXG4gICAgXTtcbiAgICByZXR1cm4gUm91dGVyT3V0bGV0O1xufSgpKTtcbmV4cG9ydHMuUm91dGVyT3V0bGV0ID0gUm91dGVyT3V0bGV0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyX291dGxldC5qcy5tYXBcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9AYW5ndWxhci9yb3V0ZXIvc3JjL2RpcmVjdGl2ZXMvcm91dGVyX291dGxldC5qc1xuICoqIG1vZHVsZSBpZCA9IDM1NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 355:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar router_1 = __webpack_require__(335);\nvar segments_1 = __webpack_require__(341);\nvar lang_1 = __webpack_require__(336);\nvar async_1 = __webpack_require__(338);\nvar RouterLink = (function () {\n    function RouterLink(_routeSegment, _router) {\n        var _this = this;\n        this._routeSegment = _routeSegment;\n        this._router = _router;\n        this._commands = [];\n        this.isActive = false;\n        // because auxiliary links take existing primary and auxiliary routes into account,\n        // we need to update the link whenever params or other routes change.\n        this._subscription =\n            async_1.ObservableWrapper.subscribe(_router.changes, function (_) { _this._updateTargetUrlAndHref(); });\n    }\n    RouterLink.prototype.ngOnDestroy = function () { async_1.ObservableWrapper.dispose(this._subscription); };\n    Object.defineProperty(RouterLink.prototype, \"routerLink\", {\n        set: function (data) {\n            if (lang_1.isArray(data)) {\n                this._commands = data;\n            }\n            else {\n                this._commands = [data];\n            }\n            this._updateTargetUrlAndHref();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RouterLink.prototype.onClick = function () {\n        // If no target, or if target is _self, prevent default browser behavior\n        if (!lang_1.isString(this.target) || this.target == '_self') {\n            this._router.navigate(this._commands, this._routeSegment);\n            return false;\n        }\n        return true;\n    };\n    RouterLink.prototype._updateTargetUrlAndHref = function () {\n        var tree = this._router.createUrlTree(this._commands, this._routeSegment);\n        if (lang_1.isPresent(tree)) {\n            this.href = this._router.serializeUrl(tree);\n            this.isActive = this._router.urlTree.contains(tree);\n        }\n        else {\n            this.isActive = false;\n        }\n    };\n    RouterLink.decorators = [\n        { type: core_1.Directive, args: [{ selector: '[routerLink]' },] },\n    ];\n    RouterLink.ctorParameters = [\n        { type: segments_1.RouteSegment, decorators: [{ type: core_1.Optional },] },\n        { type: router_1.Router, },\n    ];\n    RouterLink.propDecorators = {\n        'target': [{ type: core_1.Input },],\n        'href': [{ type: core_1.HostBinding },],\n        'isActive': [{ type: core_1.HostBinding, args: ['class.router-link-active',] },],\n        'routerLink': [{ type: core_1.Input },],\n        'onClick': [{ type: core_1.HostListener, args: [\"click\",] },],\n    };\n    return RouterLink;\n}());\nexports.RouterLink = RouterLink;\n//# sourceMappingURL=router_link.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL3JvdXRlci9zcmMvZGlyZWN0aXZlcy9yb3V0ZXJfbGluay5qcz9kY2JkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLGlDQUFpQyxFQUFFO0FBQ2xIO0FBQ0Esb0RBQW9ELHVEQUF1RDtBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsaUNBQWlDLDJCQUEyQixJQUFJO0FBQ3pFO0FBQ0E7QUFDQSxTQUFTLDhDQUE4Qyx3QkFBd0IsSUFBSTtBQUNuRixTQUFTLHlCQUF5QjtBQUNsQztBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QyxrQkFBa0IsMkJBQTJCO0FBQzdDLHNCQUFzQixnRUFBZ0U7QUFDdEYsd0JBQXdCLHFCQUFxQjtBQUM3QyxxQkFBcUIsOENBQThDO0FBQ25FO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzNTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBjb3JlXzEgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgcm91dGVyXzEgPSByZXF1aXJlKCcuLi9yb3V0ZXInKTtcbnZhciBzZWdtZW50c18xID0gcmVxdWlyZSgnLi4vc2VnbWVudHMnKTtcbnZhciBsYW5nXzEgPSByZXF1aXJlKCcuLi9mYWNhZGUvbGFuZycpO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKCcuLi9mYWNhZGUvYXN5bmMnKTtcbnZhciBSb3V0ZXJMaW5rID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSb3V0ZXJMaW5rKF9yb3V0ZVNlZ21lbnQsIF9yb3V0ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fcm91dGVTZWdtZW50ID0gX3JvdXRlU2VnbWVudDtcbiAgICAgICAgdGhpcy5fcm91dGVyID0gX3JvdXRlcjtcbiAgICAgICAgdGhpcy5fY29tbWFuZHMgPSBbXTtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAvLyBiZWNhdXNlIGF1eGlsaWFyeSBsaW5rcyB0YWtlIGV4aXN0aW5nIHByaW1hcnkgYW5kIGF1eGlsaWFyeSByb3V0ZXMgaW50byBhY2NvdW50LFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgbGluayB3aGVuZXZlciBwYXJhbXMgb3Igb3RoZXIgcm91dGVzIGNoYW5nZS5cbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID1cbiAgICAgICAgICAgIGFzeW5jXzEuT2JzZXJ2YWJsZVdyYXBwZXIuc3Vic2NyaWJlKF9yb3V0ZXIuY2hhbmdlcywgZnVuY3Rpb24gKF8pIHsgX3RoaXMuX3VwZGF0ZVRhcmdldFVybEFuZEhyZWYoKTsgfSk7XG4gICAgfVxuICAgIFJvdXRlckxpbmsucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkgeyBhc3luY18xLk9ic2VydmFibGVXcmFwcGVyLmRpc3Bvc2UodGhpcy5fc3Vic2NyaXB0aW9uKTsgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUm91dGVyTGluay5wcm90b3R5cGUsIFwicm91dGVyTGlua1wiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChsYW5nXzEuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbW1hbmRzID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbW1hbmRzID0gW2RhdGFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGFyZ2V0VXJsQW5kSHJlZigpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBSb3V0ZXJMaW5rLnByb3RvdHlwZS5vbkNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJZiBubyB0YXJnZXQsIG9yIGlmIHRhcmdldCBpcyBfc2VsZiwgcHJldmVudCBkZWZhdWx0IGJyb3dzZXIgYmVoYXZpb3JcbiAgICAgICAgaWYgKCFsYW5nXzEuaXNTdHJpbmcodGhpcy50YXJnZXQpIHx8IHRoaXMudGFyZ2V0ID09ICdfc2VsZicpIHtcbiAgICAgICAgICAgIHRoaXMuX3JvdXRlci5uYXZpZ2F0ZSh0aGlzLl9jb21tYW5kcywgdGhpcy5fcm91dGVTZWdtZW50KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFJvdXRlckxpbmsucHJvdG90eXBlLl91cGRhdGVUYXJnZXRVcmxBbmRIcmVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdHJlZSA9IHRoaXMuX3JvdXRlci5jcmVhdGVVcmxUcmVlKHRoaXMuX2NvbW1hbmRzLCB0aGlzLl9yb3V0ZVNlZ21lbnQpO1xuICAgICAgICBpZiAobGFuZ18xLmlzUHJlc2VudCh0cmVlKSkge1xuICAgICAgICAgICAgdGhpcy5ocmVmID0gdGhpcy5fcm91dGVyLnNlcmlhbGl6ZVVybCh0cmVlKTtcbiAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0aGlzLl9yb3V0ZXIudXJsVHJlZS5jb250YWlucyh0cmVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUm91dGVyTGluay5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IGNvcmVfMS5EaXJlY3RpdmUsIGFyZ3M6IFt7IHNlbGVjdG9yOiAnW3JvdXRlckxpbmtdJyB9LF0gfSxcbiAgICBdO1xuICAgIFJvdXRlckxpbmsuY3RvclBhcmFtZXRlcnMgPSBbXG4gICAgICAgIHsgdHlwZTogc2VnbWVudHNfMS5Sb3V0ZVNlZ21lbnQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IGNvcmVfMS5PcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiByb3V0ZXJfMS5Sb3V0ZXIsIH0sXG4gICAgXTtcbiAgICBSb3V0ZXJMaW5rLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAndGFyZ2V0JzogW3sgdHlwZTogY29yZV8xLklucHV0IH0sXSxcbiAgICAgICAgJ2hyZWYnOiBbeyB0eXBlOiBjb3JlXzEuSG9zdEJpbmRpbmcgfSxdLFxuICAgICAgICAnaXNBY3RpdmUnOiBbeyB0eXBlOiBjb3JlXzEuSG9zdEJpbmRpbmcsIGFyZ3M6IFsnY2xhc3Mucm91dGVyLWxpbmstYWN0aXZlJyxdIH0sXSxcbiAgICAgICAgJ3JvdXRlckxpbmsnOiBbeyB0eXBlOiBjb3JlXzEuSW5wdXQgfSxdLFxuICAgICAgICAnb25DbGljayc6IFt7IHR5cGU6IGNvcmVfMS5Ib3N0TGlzdGVuZXIsIGFyZ3M6IFtcImNsaWNrXCIsXSB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gUm91dGVyTGluaztcbn0oKSk7XG5leHBvcnRzLlJvdXRlckxpbmsgPSBSb3V0ZXJMaW5rO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyX2xpbmsuanMubWFwXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vQGFuZ3VsYXIvcm91dGVyL3NyYy9kaXJlY3RpdmVzL3JvdXRlcl9saW5rLmpzXG4gKiogbW9kdWxlIGlkID0gMzU1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 356:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar js_base64_1 = __webpack_require__(357);\r\nvar base64_js_1 = __webpack_require__(359);\r\nvar _sha256 = __webpack_require__(362);\r\nvar sha256 = _sha256;\r\nvar OAuthService = (function () {\r\n    function OAuthService() {\r\n        this.clientId = \"\";\r\n        this.redirectUri = \"\";\r\n        this.loginUrl = \"\";\r\n        this.scope = \"\";\r\n        this.rngUrl = \"\";\r\n        this.oidc = false;\r\n        this.state = \"\";\r\n        this.issuer = \"\";\r\n        this.logoutUrl = \"\";\r\n        this._storage = localStorage;\r\n    }\r\n    OAuthService.prototype.setStorage = function (storage) {\r\n        this._storage = storage;\r\n    };\r\n    OAuthService.prototype.createLoginUrl = function (state) {\r\n        var that = this;\r\n        if (typeof state === \"undefined\") {\r\n            state = \"\";\r\n        }\r\n        return this.createAndSaveNonce().then(function (nonce) {\r\n            if (state) {\r\n                state = nonce + \";\" + state;\r\n            }\r\n            else {\r\n                state = nonce;\r\n            }\r\n            var response_type = \"token\";\r\n            if (that.oidc) {\r\n                response_type = \"id_token+token\";\r\n            }\r\n            var url = that.loginUrl\r\n                + \"?response_type=\"\r\n                + response_type\r\n                + \"&client_id=\"\r\n                + encodeURIComponent(that.clientId)\r\n                + \"&state=\"\r\n                + encodeURIComponent(state)\r\n                + \"&redirect_uri=\"\r\n                + encodeURIComponent(that.redirectUri)\r\n                + \"&scope=\"\r\n                + encodeURIComponent(that.scope);\r\n            if (that.oidc) {\r\n                url += \"&nonce=\" + encodeURIComponent(nonce);\r\n            }\r\n            return url;\r\n        });\r\n    };\r\n    ;\r\n    OAuthService.prototype.initImplicitFlow = function (additionalState) {\r\n        if (additionalState === void 0) { additionalState = \"\"; }\r\n        this.createLoginUrl(additionalState).then(function (url) {\r\n            location.href = url;\r\n        })\r\n            .catch(function (error) {\r\n            console.error(\"Error in initImplicitFlow\");\r\n            console.error(error);\r\n        });\r\n    };\r\n    ;\r\n    OAuthService.prototype.callEventIfExists = function (options) {\r\n        var that = this;\r\n        if (options.onTokenReceived) {\r\n            var tokenParams = {\r\n                idClaims: that.getIdentityClaims(),\r\n                idToken: that.getIdToken(),\r\n                accessToken: that.getAccessToken(),\r\n                state: that.state\r\n            };\r\n            options.onTokenReceived(tokenParams);\r\n        }\r\n    };\r\n    OAuthService.prototype.tryLogin = function (options) {\r\n        var _this = this;\r\n        options = options || {};\r\n        var parts = this.getFragment();\r\n        var accessToken = parts[\"access_token\"];\r\n        var idToken = parts[\"id_token\"];\r\n        var state = parts[\"state\"];\r\n        var oidcSuccess = false;\r\n        var oauthSuccess = false;\r\n        if (!accessToken || !state)\r\n            return false;\r\n        if (this.oidc && !idToken)\r\n            return false;\r\n        var savedNonce = this._storage.getItem(\"nonce\");\r\n        var stateParts = state.split(';');\r\n        var nonceInState = stateParts[0];\r\n        if (savedNonce === nonceInState) {\r\n            this._storage.setItem(\"access_token\", accessToken);\r\n            var expiresIn = parts[\"expires_in\"];\r\n            if (expiresIn) {\r\n                var expiresInMilliSeconds = parseInt(expiresIn) * 1000;\r\n                var now = new Date();\r\n                var expiresAt = now.getTime() + expiresInMilliSeconds;\r\n                this._storage.setItem(\"expires_at\", \"\" + expiresAt);\r\n            }\r\n            if (stateParts.length > 1) {\r\n                this.state = stateParts[1];\r\n            }\r\n            oauthSuccess = true;\r\n        }\r\n        if (!oauthSuccess)\r\n            return false;\r\n        if (!this.oidc && options.onTokenReceived) {\r\n            options.onTokenReceived({ accessToken: accessToken });\r\n        }\r\n        if (this.oidc) {\r\n            oidcSuccess = this.processIdToken(idToken, accessToken);\r\n            if (!oidcSuccess)\r\n                return false;\r\n        }\r\n        if (options.validationHandler) {\r\n            var validationParams = { accessToken: accessToken, idToken: idToken };\r\n            options\r\n                .validationHandler(validationParams)\r\n                .then(function () {\r\n                _this.callEventIfExists(options);\r\n            })\r\n                .catch(function (reason) {\r\n                console.error('Error validating tokens');\r\n                console.error(reason);\r\n            });\r\n        }\r\n        else {\r\n            this.callEventIfExists(options);\r\n        }\r\n        return true;\r\n    };\r\n    ;\r\n    OAuthService.prototype.processIdToken = function (idToken, accessToken) {\r\n        var tokenParts = idToken.split(\".\");\r\n        var claimsBase64 = this.padBase64(tokenParts[1]);\r\n        var claimsJson = js_base64_1.Base64.decode(claimsBase64);\r\n        var claims = JSON.parse(claimsJson);\r\n        var savedNonce = this._storage.getItem(\"nonce\");\r\n        if (claims.aud !== this.clientId) {\r\n            console.warn(\"Wrong audience: \" + claims.aud);\r\n            return false;\r\n        }\r\n        if (this.issuer && claims.iss !== this.issuer) {\r\n            console.warn(\"Wrong issuer: \" + claims.issuer);\r\n            return false;\r\n        }\r\n        if (claims.nonce !== savedNonce) {\r\n            console.warn(\"Wrong nonce: \" + claims.nonce);\r\n            return false;\r\n        }\r\n        if (accessToken && !this.checkAtHash(accessToken, claims)) {\r\n            console.warn(\"Wrong at_hash\");\r\n            return false;\r\n        }\r\n        var now = Date.now();\r\n        var issuedAtMSec = claims.iat * 1000;\r\n        var expiresAtMSec = claims.exp * 1000;\r\n        var tenMinutesInMsec = 1000 * 60 * 10;\r\n        if (issuedAtMSec - tenMinutesInMsec >= now || expiresAtMSec + tenMinutesInMsec <= now) {\r\n            console.warn(\"Token has been expired\");\r\n            console.warn({\r\n                now: now,\r\n                issuedAtMSec: issuedAtMSec,\r\n                expiresAtMSec: expiresAtMSec\r\n            });\r\n            return false;\r\n        }\r\n        this._storage.setItem(\"id_token\", idToken);\r\n        this._storage.setItem(\"id_token_claims_obj\", claimsJson);\r\n        this._storage.setItem(\"id_token_expires_at\", \"\" + expiresAtMSec);\r\n        if (this.validationHandler) {\r\n            this.validationHandler(idToken);\r\n        }\r\n        return true;\r\n    };\r\n    OAuthService.prototype.getIdentityClaims = function () {\r\n        var claims = this._storage.getItem(\"id_token_claims_obj\");\r\n        if (!claims)\r\n            return null;\r\n        return JSON.parse(claims);\r\n    };\r\n    OAuthService.prototype.getIdToken = function () {\r\n        return this._storage.getItem(\"id_token\");\r\n    };\r\n    OAuthService.prototype.padBase64 = function (base64data) {\r\n        while (base64data.length % 4 !== 0) {\r\n            base64data += \"=\";\r\n        }\r\n        return base64data;\r\n    };\r\n    OAuthService.prototype.tryLoginWithIFrame = function () {\r\n        throw new Error(\"tryLoginWithIFrame has not been implemented so far\");\r\n    };\r\n    ;\r\n    OAuthService.prototype.tryRefresh = function (timeoutInMsec) {\r\n        throw new Error(\"tryRefresh has not been implemented so far\");\r\n    };\r\n    ;\r\n    OAuthService.prototype.getAccessToken = function () {\r\n        return this._storage.getItem(\"access_token\");\r\n    };\r\n    ;\r\n    OAuthService.prototype.hasValidAccessToken = function () {\r\n        if (this.getAccessToken()) {\r\n            var expiresAt = this._storage.getItem(\"expires_at\");\r\n            var now = new Date();\r\n            if (expiresAt && parseInt(expiresAt) < now.getTime()) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ;\r\n    OAuthService.prototype.hasValidIdToken = function () {\r\n        if (this.getIdToken) {\r\n            var expiresAt = this._storage.getItem(\"id_token_expires_at\");\r\n            var now = new Date();\r\n            if (expiresAt && parseInt(expiresAt) < now.getTime()) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ;\r\n    OAuthService.prototype.authorizationHeader = function () {\r\n        return \"Bearer \" + this.getAccessToken();\r\n    };\r\n    OAuthService.prototype.logOut = function () {\r\n        var id_token = this.getIdToken();\r\n        this._storage.removeItem(\"access_token\");\r\n        this._storage.removeItem(\"id_token\");\r\n        this._storage.removeItem(\"nonce\");\r\n        this._storage.removeItem(\"expires_at\");\r\n        this._storage.removeItem(\"id_token_claims_obj\");\r\n        this._storage.removeItem(\"id_token_expires_at\");\r\n        if (!this.logoutUrl)\r\n            return;\r\n        var logoutUrl = this.logoutUrl.replace(/\\{\\{id_token\\}\\}/, id_token);\r\n        location.href = logoutUrl;\r\n    };\r\n    ;\r\n    OAuthService.prototype.createAndSaveNonce = function () {\r\n        var that = this;\r\n        return this.createNonce().then(function (nonce) {\r\n            that._storage.setItem(\"nonce\", nonce);\r\n            return nonce;\r\n        });\r\n    };\r\n    ;\r\n    OAuthService.prototype.createNonce = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (_this.rngUrl) {\r\n                throw new Error(\"createNonce with rng-web-api has not been implemented so far\");\r\n            }\r\n            else {\r\n                var text = \"\";\r\n                var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n                for (var i = 0; i < 40; i++)\r\n                    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n                resolve(text);\r\n            }\r\n        });\r\n    };\r\n    ;\r\n    OAuthService.prototype.getFragment = function () {\r\n        if (window.location.hash.indexOf(\"#\") === 0) {\r\n            return this.parseQueryString(window.location.hash.substr(1));\r\n        }\r\n        else {\r\n            return {};\r\n        }\r\n    };\r\n    ;\r\n    OAuthService.prototype.parseQueryString = function (queryString) {\r\n        var data = {}, pairs, pair, separatorIndex, escapedKey, escapedValue, key, value;\r\n        if (queryString === null) {\r\n            return data;\r\n        }\r\n        pairs = queryString.split(\"&\");\r\n        for (var i = 0; i < pairs.length; i++) {\r\n            pair = pairs[i];\r\n            separatorIndex = pair.indexOf(\"=\");\r\n            if (separatorIndex === -1) {\r\n                escapedKey = pair;\r\n                escapedValue = null;\r\n            }\r\n            else {\r\n                escapedKey = pair.substr(0, separatorIndex);\r\n                escapedValue = pair.substr(separatorIndex + 1);\r\n            }\r\n            key = decodeURIComponent(escapedKey);\r\n            value = decodeURIComponent(escapedValue);\r\n            if (key.substr(0, 1) === '/')\r\n                key = key.substr(1);\r\n            data[key] = value;\r\n        }\r\n        return data;\r\n    };\r\n    ;\r\n    OAuthService.prototype.checkAtHash = function (accessToken, idClaims) {\r\n        if (!accessToken || !idClaims || !idClaims.at_hash)\r\n            return true;\r\n        var tokenHash = sha256(accessToken, { asBytes: true });\r\n        var leftMostHalf = tokenHash.slice(0, (tokenHash.length / 2));\r\n        var tokenHashBase64 = base64_js_1.fromByteArray(leftMostHalf);\r\n        var atHash = tokenHashBase64.replace(\"+\", \"-\").replace(\"/\", \"_\").replace(/=/g, \"\");\r\n        return (atHash == idClaims.at_hash);\r\n    };\r\n    return OAuthService;\r\n}());\r\nexports.OAuthService = OAuthService;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 357:
/***/ function(module, exports, __webpack_require__) {

	eval("/*\n * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $\n *\n *  Licensed under the MIT license.\n *    http://opensource.org/licenses/mit-license\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n */\n\n(function(global) {\n    'use strict';\n    // existing version for noConflict()\n    var _Base64 = global.Base64;\n    var version = \"2.1.9\";\n    // if node.js, we use Buffer\n    var buffer;\n    if (typeof module !== 'undefined' && module.exports) {\n        try {\n            buffer = __webpack_require__(358).Buffer;\n        } catch (err) {}\n    }\n    // constants\n    var b64chars\n        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var b64tab = function(bin) {\n        var t = {};\n        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n        return t;\n    }(b64chars);\n    var fromCharCode = String.fromCharCode;\n    // encoder stuff\n    var cb_utob = function(c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n                                + fromCharCode(0x80 | (cc & 0x3f)))\n                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                   + fromCharCode(0x80 | ( cc         & 0x3f)));\n        } else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    var utob = function(u) {\n        return u.replace(re_utob, cb_utob);\n    };\n    var cb_encode = function(ccc) {\n        var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt( ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n        return chars.join('');\n    };\n    var btoa = global.btoa ? function(b) {\n        return global.btoa(b);\n    } : function(b) {\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n    var _encode = buffer ? function (u) {\n        return (u.constructor === buffer.constructor ? u : new buffer(u))\n        .toString('base64')\n    }\n    : function (u) { return btoa(utob(u)) }\n    ;\n    var encode = function(u, urisafe) {\n        return !urisafe\n            ? _encode(String(u))\n            : _encode(String(u)).replace(/[+\\/]/g, function(m0) {\n                return m0 == '+' ? '-' : '_';\n            }).replace(/=/g, '');\n    };\n    var encodeURI = function(u) { return encode(u, true) };\n    // decoder stuff\n    var re_btou = new RegExp([\n        '[\\xC0-\\xDF][\\x80-\\xBF]',\n        '[\\xE0-\\xEF][\\x80-\\xBF]{2}',\n        '[\\xF0-\\xF7][\\x80-\\xBF]{3}'\n    ].join('|'), 'g');\n    var cb_btou = function(cccc) {\n        switch(cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                |    ((0x3f & cccc.charCodeAt(1)) << 12)\n                |    ((0x3f & cccc.charCodeAt(2)) <<  6)\n                |     (0x3f & cccc.charCodeAt(3)),\n            offset = cp - 0x10000;\n            return (fromCharCode((offset  >>> 10) + 0xD800)\n                    + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    |  (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return  fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                    |  (0x3f & cccc.charCodeAt(1))\n            );\n        }\n    };\n    var btou = function(b) {\n        return b.replace(re_btou, cb_btou);\n    };\n    var cb_decode = function(cccc) {\n        var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n        chars = [\n            fromCharCode( n >>> 16),\n            fromCharCode((n >>>  8) & 0xff),\n            fromCharCode( n         & 0xff)\n        ];\n        chars.length -= [0, 0, 2, 1][padlen];\n        return chars.join('');\n    };\n    var atob = global.atob ? function(a) {\n        return global.atob(a);\n    } : function(a){\n        return a.replace(/[\\s\\S]{1,4}/g, cb_decode);\n    };\n    var _decode = buffer ? function(a) {\n        return (a.constructor === buffer.constructor\n                ? a : new buffer(a, 'base64')).toString();\n    }\n    : function(a) { return btou(atob(a)) };\n    var decode = function(a){\n        return _decode(\n            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })\n                .replace(/[^A-Za-z0-9\\+\\/]/g, '')\n        );\n    };\n    var noConflict = function() {\n        var Base64 = global.Base64;\n        global.Base64 = _Base64;\n        return Base64;\n    };\n    // export Base64\n    global.Base64 = {\n        VERSION: version,\n        atob: atob,\n        btoa: btoa,\n        fromBase64: decode,\n        toBase64: encode,\n        utob: utob,\n        encode: encode,\n        encodeURI: encodeURI,\n        btou: btou,\n        decode: decode,\n        noConflict: noConflict\n    };\n    // if ES5 is available, make Base64.extendString() available\n    if (typeof Object.defineProperty === 'function') {\n        var noEnum = function(v){\n            return {value:v,enumerable:false,writable:true,configurable:true};\n        };\n        global.Base64.extendString = function () {\n            Object.defineProperty(\n                String.prototype, 'fromBase64', noEnum(function () {\n                    return decode(this)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64', noEnum(function (urisafe) {\n                    return encode(this, urisafe)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64URI', noEnum(function () {\n                    return encode(this, true)\n                }));\n        };\n    }\n    // that's it!\n    if (global['Meteor']) {\n       Base64 = global.Base64; // for normal export in Meteor.js\n    }\n})(this);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 362:
/***/ function(module, exports, __webpack_require__) {

	eval("!function(globals) {\n'use strict'\n\nvar _imports = {}\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  _imports.bytesToHex = __webpack_require__(363).bytesToHex\n  _imports.convertString = __webpack_require__(364)\n  module.exports = sha256\n} else {\n  _imports.bytesToHex = globals.convertHex.bytesToHex\n  _imports.convertString = globals.convertString\n  globals.sha256 = sha256\n}\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n\n// Initialization round constants tables\nvar K = []\n\n// Compute constants\n!function () {\n  function isPrime(n) {\n    var sqrtN = Math.sqrt(n);\n    for (var factor = 2; factor <= sqrtN; factor++) {\n      if (!(n % factor)) return false\n    }\n\n    return true\n  }\n\n  function getFractionalBits(n) {\n    return ((n - (n | 0)) * 0x100000000) | 0\n  }\n\n  var n = 2\n  var nPrime = 0\n  while (nPrime < 64) {\n    if (isPrime(n)) {\n      K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3))\n      nPrime++\n    }\n\n    n++\n  }\n}()\n\nvar bytesToWords = function (bytes) {\n  var words = []\n  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n    words[b >>> 5] |= bytes[i] << (24 - b % 32)\n  }\n  return words\n}\n\nvar wordsToBytes = function (words) {\n  var bytes = []\n  for (var b = 0; b < words.length * 32; b += 8) {\n    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)\n  }\n  return bytes\n}\n\n// Reusable object\nvar W = []\n\nvar processBlock = function (H, M, offset) {\n  // Working variables\n  var a = H[0], b = H[1], c = H[2], d = H[3]\n  var e = H[4], f = H[5], g = H[6], h = H[7]\n\n    // Computation\n  for (var i = 0; i < 64; i++) {\n    if (i < 16) {\n      W[i] = M[offset + i] | 0\n    } else {\n      var gamma0x = W[i - 15]\n      var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n                    ((gamma0x << 14) | (gamma0x >>> 18)) ^\n                    (gamma0x >>> 3)\n\n      var gamma1x = W[i - 2];\n      var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n                    ((gamma1x << 13) | (gamma1x >>> 19)) ^\n                    (gamma1x >>> 10)\n\n      W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n    }\n\n    var ch  = (e & f) ^ (~e & g);\n    var maj = (a & b) ^ (a & c) ^ (b & c);\n\n    var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n    var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n    var t1 = h + sigma1 + ch + K[i] + W[i];\n    var t2 = sigma0 + maj;\n\n    h = g;\n    g = f;\n    f = e;\n    e = (d + t1) | 0;\n    d = c;\n    c = b;\n    b = a;\n    a = (t1 + t2) | 0;\n  }\n\n  // Intermediate hash value\n  H[0] = (H[0] + a) | 0;\n  H[1] = (H[1] + b) | 0;\n  H[2] = (H[2] + c) | 0;\n  H[3] = (H[3] + d) | 0;\n  H[4] = (H[4] + e) | 0;\n  H[5] = (H[5] + f) | 0;\n  H[6] = (H[6] + g) | 0;\n  H[7] = (H[7] + h) | 0;\n}\n\nfunction sha256(message, options) {;\n  if (message.constructor === String) {\n    message = _imports.convertString.UTF8.stringToBytes(message);\n  }\n\n  var H =[ 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n           0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19 ];\n\n  var m = bytesToWords(message);\n  var l = message.length * 8;\n\n  m[l >> 5] |= 0x80 << (24 - l % 32);\n  m[((l + 64 >> 9) << 4) + 15] = l;\n\n  for (var i=0 ; i<m.length; i += 16) {\n    processBlock(H, m, i);\n  }\n\n  var digestbytes = wordsToBytes(H);\n  return options && options.asBytes ? digestbytes :\n         options && options.asString ? _imports.convertString.bytesToString(digestbytes) :\n         _imports.bytesToHex(digestbytes)\n}\n\nsha256.x2 = function(message, options) {\n  return sha256(sha256(message, { asBytes:true }), options)\n}\n\n}(this);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3NoYTI1Ni9saWIvc2hhMjU2LmpzPzgxY2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTs7QUFFQSxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsdUJBQXVCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdCQUFnQixZQUFZO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxlQUFlO0FBQ2hEOztBQUVBLENBQUMiLCJmaWxlIjoiMzYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKGdsb2JhbHMpIHtcbid1c2Ugc3RyaWN0J1xuXG52YXIgX2ltcG9ydHMgPSB7fVxuXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsgLy9Db21tb25KU1xuICBfaW1wb3J0cy5ieXRlc1RvSGV4ID0gcmVxdWlyZSgnY29udmVydC1oZXgnKS5ieXRlc1RvSGV4XG4gIF9pbXBvcnRzLmNvbnZlcnRTdHJpbmcgPSByZXF1aXJlKCdjb252ZXJ0LXN0cmluZycpXG4gIG1vZHVsZS5leHBvcnRzID0gc2hhMjU2XG59IGVsc2Uge1xuICBfaW1wb3J0cy5ieXRlc1RvSGV4ID0gZ2xvYmFscy5jb252ZXJ0SGV4LmJ5dGVzVG9IZXhcbiAgX2ltcG9ydHMuY29udmVydFN0cmluZyA9IGdsb2JhbHMuY29udmVydFN0cmluZ1xuICBnbG9iYWxzLnNoYTI1NiA9IHNoYTI1NlxufVxuXG4vKlxuQ3J5cHRvSlMgdjMuMS4yXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cblxuLy8gSW5pdGlhbGl6YXRpb24gcm91bmQgY29uc3RhbnRzIHRhYmxlc1xudmFyIEsgPSBbXVxuXG4vLyBDb21wdXRlIGNvbnN0YW50c1xuIWZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gaXNQcmltZShuKSB7XG4gICAgdmFyIHNxcnROID0gTWF0aC5zcXJ0KG4pO1xuICAgIGZvciAodmFyIGZhY3RvciA9IDI7IGZhY3RvciA8PSBzcXJ0TjsgZmFjdG9yKyspIHtcbiAgICAgIGlmICghKG4gJSBmYWN0b3IpKSByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RnJhY3Rpb25hbEJpdHMobikge1xuICAgIHJldHVybiAoKG4gLSAobiB8IDApKSAqIDB4MTAwMDAwMDAwKSB8IDBcbiAgfVxuXG4gIHZhciBuID0gMlxuICB2YXIgblByaW1lID0gMFxuICB3aGlsZSAoblByaW1lIDwgNjQpIHtcbiAgICBpZiAoaXNQcmltZShuKSkge1xuICAgICAgS1tuUHJpbWVdID0gZ2V0RnJhY3Rpb25hbEJpdHMoTWF0aC5wb3cobiwgMSAvIDMpKVxuICAgICAgblByaW1lKytcbiAgICB9XG5cbiAgICBuKytcbiAgfVxufSgpXG5cbnZhciBieXRlc1RvV29yZHMgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgdmFyIHdvcmRzID0gW11cbiAgZm9yICh2YXIgaSA9IDAsIGIgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyssIGIgKz0gOCkge1xuICAgIHdvcmRzW2IgPj4+IDVdIHw9IGJ5dGVzW2ldIDw8ICgyNCAtIGIgJSAzMilcbiAgfVxuICByZXR1cm4gd29yZHNcbn1cblxudmFyIHdvcmRzVG9CeXRlcyA9IGZ1bmN0aW9uICh3b3Jkcykge1xuICB2YXIgYnl0ZXMgPSBbXVxuICBmb3IgKHZhciBiID0gMDsgYiA8IHdvcmRzLmxlbmd0aCAqIDMyOyBiICs9IDgpIHtcbiAgICBieXRlcy5wdXNoKCh3b3Jkc1tiID4+PiA1XSA+Pj4gKDI0IC0gYiAlIDMyKSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlc1xufVxuXG4vLyBSZXVzYWJsZSBvYmplY3RcbnZhciBXID0gW11cblxudmFyIHByb2Nlc3NCbG9jayA9IGZ1bmN0aW9uIChILCBNLCBvZmZzZXQpIHtcbiAgLy8gV29ya2luZyB2YXJpYWJsZXNcbiAgdmFyIGEgPSBIWzBdLCBiID0gSFsxXSwgYyA9IEhbMl0sIGQgPSBIWzNdXG4gIHZhciBlID0gSFs0XSwgZiA9IEhbNV0sIGcgPSBIWzZdLCBoID0gSFs3XVxuXG4gICAgLy8gQ29tcHV0YXRpb25cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gICAgaWYgKGkgPCAxNikge1xuICAgICAgV1tpXSA9IE1bb2Zmc2V0ICsgaV0gfCAwXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBnYW1tYTB4ID0gV1tpIC0gMTVdXG4gICAgICB2YXIgZ2FtbWEwICA9ICgoZ2FtbWEweCA8PCAyNSkgfCAoZ2FtbWEweCA+Pj4gNykpICBeXG4gICAgICAgICAgICAgICAgICAgICgoZ2FtbWEweCA8PCAxNCkgfCAoZ2FtbWEweCA+Pj4gMTgpKSBeXG4gICAgICAgICAgICAgICAgICAgIChnYW1tYTB4ID4+PiAzKVxuXG4gICAgICB2YXIgZ2FtbWExeCA9IFdbaSAtIDJdO1xuICAgICAgdmFyIGdhbW1hMSAgPSAoKGdhbW1hMXggPDwgMTUpIHwgKGdhbW1hMXggPj4+IDE3KSkgXlxuICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMXggPDwgMTMpIHwgKGdhbW1hMXggPj4+IDE5KSkgXlxuICAgICAgICAgICAgICAgICAgICAoZ2FtbWExeCA+Pj4gMTApXG5cbiAgICAgIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XTtcbiAgICB9XG5cbiAgICB2YXIgY2ggID0gKGUgJiBmKSBeICh+ZSAmIGcpO1xuICAgIHZhciBtYWogPSAoYSAmIGIpIF4gKGEgJiBjKSBeIChiICYgYyk7XG5cbiAgICB2YXIgc2lnbWEwID0gKChhIDw8IDMwKSB8IChhID4+PiAyKSkgXiAoKGEgPDwgMTkpIHwgKGEgPj4+IDEzKSkgXiAoKGEgPDwgMTApIHwgKGEgPj4+IDIyKSk7XG4gICAgdmFyIHNpZ21hMSA9ICgoZSA8PCAyNikgfCAoZSA+Pj4gNikpIF4gKChlIDw8IDIxKSB8IChlID4+PiAxMSkpIF4gKChlIDw8IDcpICB8IChlID4+PiAyNSkpO1xuXG4gICAgdmFyIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tpXSArIFdbaV07XG4gICAgdmFyIHQyID0gc2lnbWEwICsgbWFqO1xuXG4gICAgaCA9IGc7XG4gICAgZyA9IGY7XG4gICAgZiA9IGU7XG4gICAgZSA9IChkICsgdDEpIHwgMDtcbiAgICBkID0gYztcbiAgICBjID0gYjtcbiAgICBiID0gYTtcbiAgICBhID0gKHQxICsgdDIpIHwgMDtcbiAgfVxuXG4gIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG4gIEhbMF0gPSAoSFswXSArIGEpIHwgMDtcbiAgSFsxXSA9IChIWzFdICsgYikgfCAwO1xuICBIWzJdID0gKEhbMl0gKyBjKSB8IDA7XG4gIEhbM10gPSAoSFszXSArIGQpIHwgMDtcbiAgSFs0XSA9IChIWzRdICsgZSkgfCAwO1xuICBIWzVdID0gKEhbNV0gKyBmKSB8IDA7XG4gIEhbNl0gPSAoSFs2XSArIGcpIHwgMDtcbiAgSFs3XSA9IChIWzddICsgaCkgfCAwO1xufVxuXG5mdW5jdGlvbiBzaGEyNTYobWVzc2FnZSwgb3B0aW9ucykgeztcbiAgaWYgKG1lc3NhZ2UuY29uc3RydWN0b3IgPT09IFN0cmluZykge1xuICAgIG1lc3NhZ2UgPSBfaW1wb3J0cy5jb252ZXJ0U3RyaW5nLlVURjguc3RyaW5nVG9CeXRlcyhtZXNzYWdlKTtcbiAgfVxuXG4gIHZhciBIID1bIDB4NkEwOUU2NjcsIDB4QkI2N0FFODUsIDB4M0M2RUYzNzIsIDB4QTU0RkY1M0EsXG4gICAgICAgICAgIDB4NTEwRTUyN0YsIDB4OUIwNTY4OEMsIDB4MUY4M0Q5QUIsIDB4NUJFMENEMTkgXTtcblxuICB2YXIgbSA9IGJ5dGVzVG9Xb3JkcyhtZXNzYWdlKTtcbiAgdmFyIGwgPSBtZXNzYWdlLmxlbmd0aCAqIDg7XG5cbiAgbVtsID4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbCAlIDMyKTtcbiAgbVsoKGwgKyA2NCA+PiA5KSA8PCA0KSArIDE1XSA9IGw7XG5cbiAgZm9yICh2YXIgaT0wIDsgaTxtLmxlbmd0aDsgaSArPSAxNikge1xuICAgIHByb2Nlc3NCbG9jayhILCBtLCBpKTtcbiAgfVxuXG4gIHZhciBkaWdlc3RieXRlcyA9IHdvcmRzVG9CeXRlcyhIKTtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5hc0J5dGVzID8gZGlnZXN0Ynl0ZXMgOlxuICAgICAgICAgb3B0aW9ucyAmJiBvcHRpb25zLmFzU3RyaW5nID8gX2ltcG9ydHMuY29udmVydFN0cmluZy5ieXRlc1RvU3RyaW5nKGRpZ2VzdGJ5dGVzKSA6XG4gICAgICAgICBfaW1wb3J0cy5ieXRlc1RvSGV4KGRpZ2VzdGJ5dGVzKVxufVxuXG5zaGEyNTYueDIgPSBmdW5jdGlvbihtZXNzYWdlLCBvcHRpb25zKSB7XG4gIHJldHVybiBzaGEyNTYoc2hhMjU2KG1lc3NhZ2UsIHsgYXNCeXRlczp0cnVlIH0pLCBvcHRpb25zKVxufVxuXG59KHRoaXMpO1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vc2hhMjU2L2xpYi9zaGEyNTYuanNcbiAqKiBtb2R1bGUgaWQgPSAzNjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 363:
/***/ function(module, exports) {

	eval("!function(globals) {\n'use strict'\n\nvar convertHex = {\n  bytesToHex: function(bytes) {\n    /*if (typeof bytes.byteLength != 'undefined') {\n      var newBytes = []\n\n      if (typeof bytes.buffer != 'undefined')\n        bytes = new DataView(bytes.buffer)\n      else\n        bytes = new DataView(bytes)\n\n      for (var i = 0; i < bytes.byteLength; ++i) {\n        newBytes.push(bytes.getUint8(i))\n      }\n      bytes = newBytes\n    }*/\n    return arrBytesToHex(bytes)\n  },\n  hexToBytes: function(hex) {\n    if (hex.length % 2 === 1) throw new Error(\"hexToBytes can't have a string with an odd number of characters.\")\n    if (hex.indexOf('0x') === 0) hex = hex.slice(2)\n    return hex.match(/../g).map(function(x) { return parseInt(x,16) })\n  }\n}\n\n\n// PRIVATE\n\nfunction arrBytesToHex(bytes) {\n  return bytes.map(function(x) { return padLeft(x.toString(16),2) }).join('')\n}\n\nfunction padLeft(orig, len) {\n  if (orig.length > len) return orig\n  return Array(len - orig.length + 1).join('0') + orig\n}\n\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  module.exports = convertHex\n} else {\n  globals.convertHex = convertHex\n}\n\n}(this);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvbnZlcnQtaGV4L2NvbnZlcnQtaGV4LmpzPzZkZGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsc0JBQXNCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsd0JBQXdCO0FBQ3JFO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0EsZ0NBQWdDLG1DQUFtQztBQUNuRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0Esc0RBQXNEO0FBQ3REO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUEsQ0FBQyIsImZpbGUiOiIzNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZ2xvYmFscykge1xuJ3VzZSBzdHJpY3QnXG5cbnZhciBjb252ZXJ0SGV4ID0ge1xuICBieXRlc1RvSGV4OiBmdW5jdGlvbihieXRlcykge1xuICAgIC8qaWYgKHR5cGVvZiBieXRlcy5ieXRlTGVuZ3RoICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgbmV3Qnl0ZXMgPSBbXVxuXG4gICAgICBpZiAodHlwZW9mIGJ5dGVzLmJ1ZmZlciAhPSAndW5kZWZpbmVkJylcbiAgICAgICAgYnl0ZXMgPSBuZXcgRGF0YVZpZXcoYnl0ZXMuYnVmZmVyKVxuICAgICAgZWxzZVxuICAgICAgICBieXRlcyA9IG5ldyBEYXRhVmlldyhieXRlcylcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5ieXRlTGVuZ3RoOyArK2kpIHtcbiAgICAgICAgbmV3Qnl0ZXMucHVzaChieXRlcy5nZXRVaW50OChpKSlcbiAgICAgIH1cbiAgICAgIGJ5dGVzID0gbmV3Qnl0ZXNcbiAgICB9Ki9cbiAgICByZXR1cm4gYXJyQnl0ZXNUb0hleChieXRlcylcbiAgfSxcbiAgaGV4VG9CeXRlczogZnVuY3Rpb24oaGV4KSB7XG4gICAgaWYgKGhleC5sZW5ndGggJSAyID09PSAxKSB0aHJvdyBuZXcgRXJyb3IoXCJoZXhUb0J5dGVzIGNhbid0IGhhdmUgYSBzdHJpbmcgd2l0aCBhbiBvZGQgbnVtYmVyIG9mIGNoYXJhY3RlcnMuXCIpXG4gICAgaWYgKGhleC5pbmRleE9mKCcweCcpID09PSAwKSBoZXggPSBoZXguc2xpY2UoMilcbiAgICByZXR1cm4gaGV4Lm1hdGNoKC8uLi9nKS5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4gcGFyc2VJbnQoeCwxNikgfSlcbiAgfVxufVxuXG5cbi8vIFBSSVZBVEVcblxuZnVuY3Rpb24gYXJyQnl0ZXNUb0hleChieXRlcykge1xuICByZXR1cm4gYnl0ZXMubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBhZExlZnQoeC50b1N0cmluZygxNiksMikgfSkuam9pbignJylcbn1cblxuZnVuY3Rpb24gcGFkTGVmdChvcmlnLCBsZW4pIHtcbiAgaWYgKG9yaWcubGVuZ3RoID4gbGVuKSByZXR1cm4gb3JpZ1xuICByZXR1cm4gQXJyYXkobGVuIC0gb3JpZy5sZW5ndGggKyAxKS5qb2luKCcwJykgKyBvcmlnXG59XG5cblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7IC8vQ29tbW9uSlNcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0SGV4XG59IGVsc2Uge1xuICBnbG9iYWxzLmNvbnZlcnRIZXggPSBjb252ZXJ0SGV4XG59XG5cbn0odGhpcyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29udmVydC1oZXgvY29udmVydC1oZXguanNcbiAqKiBtb2R1bGUgaWQgPSAzNjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 364:
/***/ function(module, exports) {

	eval("!function(globals) {\n'use strict'\n\nvar convertString = {\n  bytesToString: function(bytes) {\n    return bytes.map(function(x){ return String.fromCharCode(x) }).join('')\n  },\n  stringToBytes: function(str) {\n    return str.split('').map(function(x) { return x.charCodeAt(0) })\n  }\n}\n\n//http://hossa.in/2012/07/20/utf-8-in-javascript.html\nconvertString.UTF8 = {\n   bytesToString: function(bytes) {\n    return decodeURIComponent(escape(convertString.bytesToString(bytes)))\n  },\n  stringToBytes: function(str) {\n   return convertString.stringToBytes(unescape(encodeURIComponent(str)))\n  }\n}\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  module.exports = convertString\n} else {\n  globals.convertString = convertString\n}\n\n}(this);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvbnZlcnQtc3RyaW5nL2NvbnZlcnQtc3RyaW5nLmpzP2UzNWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLGdDQUFnQztBQUNqRSxHQUFHO0FBQ0g7QUFDQSwwQ0FBMEMseUJBQXlCO0FBQ25FO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0RBQXNEO0FBQ3REO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUEsQ0FBQyIsImZpbGUiOiIzNjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZ2xvYmFscykge1xuJ3VzZSBzdHJpY3QnXG5cbnZhciBjb252ZXJ0U3RyaW5nID0ge1xuICBieXRlc1RvU3RyaW5nOiBmdW5jdGlvbihieXRlcykge1xuICAgIHJldHVybiBieXRlcy5tYXAoZnVuY3Rpb24oeCl7IHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpIH0pLmpvaW4oJycpXG4gIH0sXG4gIHN0cmluZ1RvQnl0ZXM6IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBzdHIuc3BsaXQoJycpLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiB4LmNoYXJDb2RlQXQoMCkgfSlcbiAgfVxufVxuXG4vL2h0dHA6Ly9ob3NzYS5pbi8yMDEyLzA3LzIwL3V0Zi04LWluLWphdmFzY3JpcHQuaHRtbFxuY29udmVydFN0cmluZy5VVEY4ID0ge1xuICAgYnl0ZXNUb1N0cmluZzogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShjb252ZXJ0U3RyaW5nLmJ5dGVzVG9TdHJpbmcoYnl0ZXMpKSlcbiAgfSxcbiAgc3RyaW5nVG9CeXRlczogZnVuY3Rpb24oc3RyKSB7XG4gICByZXR1cm4gY29udmVydFN0cmluZy5zdHJpbmdUb0J5dGVzKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKSlcbiAgfVxufVxuXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsgLy9Db21tb25KU1xuICBtb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnRTdHJpbmdcbn0gZWxzZSB7XG4gIGdsb2JhbHMuY29udmVydFN0cmluZyA9IGNvbnZlcnRTdHJpbmdcbn1cblxufSh0aGlzKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb252ZXJ0LXN0cmluZy9jb252ZXJ0LXN0cmluZy5qc1xuICoqIG1vZHVsZSBpZCA9IDM2NFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 365:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar core_1 = __webpack_require__(1);\r\nvar HomeComponent = (function () {\r\n    function HomeComponent() {\r\n    }\r\n    HomeComponent.prototype.ngOnInit = function () { };\r\n    HomeComponent = __decorate([\r\n        core_1.Component({\r\n            moduleId: module.id,\r\n            template: __webpack_require__(366)\r\n        }), \r\n        __metadata('design:paramtypes', [])\r\n    ], HomeComponent);\r\n    return HomeComponent;\r\n}());\r\nexports.HomeComponent = HomeComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWFpbi9ob21lLmNvbXBvbmVudC50cz80ZDk4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpQ0FBa0MsQ0FBZSxDQUFDO0FBTWxEO0lBQ0k7SUFBZ0IsQ0FBQztJQUVqQixnQ0FBUSxHQUFSLGNBQWEsQ0FBQztJQVBsQjtRQUFDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsUUFBUSxFQUFFLG1CQUFPLENBQUMsR0FBdUIsQ0FBQztTQUM3QyxDQUFDOztxQkFBQTtJQU1GLG9CQUFDO0FBQUQsQ0FBQztBQUxZLHFCQUFhLGdCQUt6QiIsImZpbGUiOiIzNjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxyXG4gICAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vaG9tZS5jb21wb25lbnQuaHRtbCcpXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIb21lQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7IH1cclxuXHJcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vdHNsaW50LWxvYWRlciEuL2FwcC9tYWluL2hvbWUuY29tcG9uZW50LnRzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 366:
/***/ function(module, exports) {

	eval("module.exports = \"<h1>Home component</h1>\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWFpbi9ob21lLmNvbXBvbmVudC5odG1sPzUzYTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzY2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxoMT5Ib21lIGNvbXBvbmVudDwvaDE+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL21haW4vaG9tZS5jb21wb25lbnQuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDM2NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 367:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\r\nvar core_1 = __webpack_require__(1);\r\nvar oauth_service_1 = __webpack_require__(356);\r\nvar SecureComponent = (function () {\r\n    function SecureComponent(oauthService) {\r\n        this.oauthService = oauthService;\r\n        var at = this.oauthService.getAccessToken();\r\n        console.log(at);\r\n        var it = this.oauthService.getIdToken();\r\n        console.log(it);\r\n        var c = this.oauthService.getIdentityClaims();\r\n        console.log(c);\r\n    }\r\n    SecureComponent.prototype.ngOnInit = function () {\r\n    };\r\n    SecureComponent = __decorate([\r\n        core_1.Component({\r\n            moduleId: module.id,\r\n            template: __webpack_require__(368)\r\n        }), \r\n        __metadata('design:paramtypes', [oauth_service_1.OAuthService])\r\n    ], SecureComponent);\r\n    return SecureComponent;\r\n}());\r\nexports.SecureComponent = SecureComponent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvc2VjdXJlL3NlY3VyZS5jb21wb25lbnQudHM/YTkxYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaUNBQWtDLENBQWUsQ0FBQztBQUNsRCwwQ0FBNkIsR0FBK0IsQ0FBQztBQU03RDtJQUNJLHlCQUFvQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFaEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWhCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRW5CLENBQUM7SUFFRCxrQ0FBUSxHQUFSO0lBRUEsQ0FBQztJQW5CTDtRQUFDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsUUFBUSxFQUFFLG1CQUFPLENBQUMsR0FBeUIsQ0FBQztTQUMvQyxDQUFDOzt1QkFBQTtJQWlCRixzQkFBQztBQUFELENBQUM7QUFoQlksdUJBQWUsa0JBZ0IzQiIsImZpbGUiOiIzNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPQXV0aFNlcnZpY2UgfSBmcm9tICdhbmd1bGFyMi1vYXV0aDIvb2F1dGgtc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnLi9zZWN1cmUuY29tcG9uZW50Lmh0bWwnKVxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2VjdXJlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgb2F1dGhTZXJ2aWNlOiBPQXV0aFNlcnZpY2UpIHtcclxuICAgICAgICB2YXIgYXQgPSB0aGlzLm9hdXRoU2VydmljZS5nZXRBY2Nlc3NUb2tlbigpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGF0KTtcclxuXHJcbiAgICAgICAgdmFyIGl0ID0gdGhpcy5vYXV0aFNlcnZpY2UuZ2V0SWRUb2tlbigpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGl0KTtcclxuXHJcbiAgICAgICAgdmFyIGMgPSB0aGlzLm9hdXRoU2VydmljZS5nZXRJZGVudGl0eUNsYWltcygpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGMpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuXHJcbiAgICB9XHJcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vdHNsaW50LWxvYWRlciEuL2FwcC9zZWN1cmUvc2VjdXJlLmNvbXBvbmVudC50c1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 368:
/***/ function(module, exports) {

	eval("module.exports = \"<h1>Secure component</h1>\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvc2VjdXJlL3NlY3VyZS5jb21wb25lbnQuaHRtbD9mYjRiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjM2OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8aDE+U2VjdXJlIGNvbXBvbmVudDwvaDE+XCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL3NlY3VyZS9zZWN1cmUuY29tcG9uZW50Lmh0bWxcbiAqKiBtb2R1bGUgaWQgPSAzNjhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 370:
/***/ function(module, exports, __webpack_require__) {

	eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar Log = exports.Log = __webpack_require__(1);\n\tvar OidcClient = exports.OidcClient = __webpack_require__(2);\n\tvar WebStorageStateStore = exports.WebStorageStateStore = __webpack_require__(4);\n\tvar InMemoryWebStorage = exports.InMemoryWebStorage = __webpack_require__(26);\n\tvar UserManager = exports.UserManager = __webpack_require__(27);\n\tvar AccessTokenEvents = exports.AccessTokenEvents = __webpack_require__(36);\n\tvar MetadataService = exports.MetadataService = __webpack_require__(7);\n\t\n\texports.default = {\n\t    Log: Log,\n\t    OidcClient: OidcClient,\n\t    WebStorageStateStore: WebStorageStateStore,\n\t    InMemoryWebStorage: InMemoryWebStorage,\n\t    UserManager: UserManager,\n\t    AccessTokenEvents: AccessTokenEvents,\n\t    MetadataService: MetadataService\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar nopLogger = {\n\t    info: function info() {},\n\t    warn: function warn() {},\n\t    error: function error() {}\n\t};\n\t\n\tvar NONE = 0;\n\tvar ERROR = 1;\n\tvar WARN = 2;\n\tvar INFO = 3;\n\t\n\tvar logger = void 0;\n\tvar level = void 0;\n\t\n\tvar Log = function () {\n\t    function Log() {\n\t        _classCallCheck(this, Log);\n\t    }\n\t\n\t    Log.reset = function reset() {\n\t        level = INFO;\n\t        logger = nopLogger;\n\t    };\n\t\n\t    Log.info = function info() {\n\t        if (level >= INFO) {\n\t            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t                args[_key] = arguments[_key];\n\t            }\n\t\n\t            logger.info.apply(logger, Array.from(args));\n\t        }\n\t    };\n\t\n\t    Log.warn = function warn() {\n\t        if (level >= WARN) {\n\t            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t                args[_key2] = arguments[_key2];\n\t            }\n\t\n\t            logger.warn.apply(logger, Array.from(args));\n\t        }\n\t    };\n\t\n\t    Log.error = function error() {\n\t        if (level >= ERROR) {\n\t            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n\t                args[_key3] = arguments[_key3];\n\t            }\n\t\n\t            logger.error.apply(logger, Array.from(args));\n\t        }\n\t    };\n\t\n\t    _createClass(Log, null, [{\n\t        key: \"NONE\",\n\t        get: function get() {\n\t            return NONE;\n\t        }\n\t    }, {\n\t        key: \"ERROR\",\n\t        get: function get() {\n\t            return ERROR;\n\t        }\n\t    }, {\n\t        key: \"WARN\",\n\t        get: function get() {\n\t            return WARN;\n\t        }\n\t    }, {\n\t        key: \"INFO\",\n\t        get: function get() {\n\t            return INFO;\n\t        }\n\t    }, {\n\t        key: \"level\",\n\t        get: function get() {\n\t            return level;\n\t        },\n\t        set: function set(value) {\n\t            if (NONE <= value && value <= INFO) {\n\t                level = value;\n\t            } else {\n\t                throw new Error(\"Invalid log level\");\n\t            }\n\t        }\n\t    }, {\n\t        key: \"logger\",\n\t        get: function get() {\n\t            return logger;\n\t        },\n\t        set: function set(value) {\n\t            if (value.info && value.warn && value.error) {\n\t                logger = value;\n\t            } else {\n\t                throw new Error(\"Invalid logger\");\n\t            }\n\t        }\n\t    }]);\n\t\n\t    return Log;\n\t}();\n\t\n\texports.default = Log;\n\t\n\t\n\tLog.reset();\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _OidcClientSettings = __webpack_require__(3);\n\t\n\tvar _OidcClientSettings2 = _interopRequireDefault(_OidcClientSettings);\n\t\n\tvar _ErrorResponse = __webpack_require__(10);\n\t\n\tvar _ErrorResponse2 = _interopRequireDefault(_ErrorResponse);\n\t\n\tvar _SigninRequest = __webpack_require__(18);\n\t\n\tvar _SigninRequest2 = _interopRequireDefault(_SigninRequest);\n\t\n\tvar _SigninResponse = __webpack_require__(23);\n\t\n\tvar _SigninResponse2 = _interopRequireDefault(_SigninResponse);\n\t\n\tvar _SignoutRequest = __webpack_require__(24);\n\t\n\tvar _SignoutRequest2 = _interopRequireDefault(_SignoutRequest);\n\t\n\tvar _SignoutResponse = __webpack_require__(25);\n\t\n\tvar _SignoutResponse2 = _interopRequireDefault(_SignoutResponse);\n\t\n\tvar _SigninState = __webpack_require__(20);\n\t\n\tvar _SigninState2 = _interopRequireDefault(_SigninState);\n\t\n\tvar _State = __webpack_require__(21);\n\t\n\tvar _State2 = _interopRequireDefault(_State);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar OidcClient = function () {\n\t    function OidcClient() {\n\t        var settings = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        _classCallCheck(this, OidcClient);\n\t\n\t        if (settings instanceof _OidcClientSettings2.default) {\n\t            this._settings = settings;\n\t        } else {\n\t            this._settings = new _OidcClientSettings2.default(settings);\n\t        }\n\t    }\n\t\n\t    OidcClient.prototype.createSigninRequest = function createSigninRequest() {\n\t        var _this = this;\n\t\n\t        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        var response_type = _ref.response_type;\n\t        var scope = _ref.scope;\n\t        var redirect_uri = _ref.redirect_uri;\n\t        var data = _ref.data;\n\t        var prompt = _ref.prompt;\n\t        var display = _ref.display;\n\t        var max_age = _ref.max_age;\n\t        var ui_locales = _ref.ui_locales;\n\t        var id_token_hint = _ref.id_token_hint;\n\t        var login_hint = _ref.login_hint;\n\t        var acr_values = _ref.acr_values;\n\t        var stateStore = arguments[1];\n\t\n\t        _Log2.default.info(\"OidcClient.createSigninRequest\");\n\t\n\t        var client_id = this._settings.client_id;\n\t        response_type = response_type || this._settings.response_type;\n\t        scope = scope || this._settings.scope;\n\t        redirect_uri = redirect_uri || this._settings.redirect_uri;\n\t\n\t        // id_token_hint, login_hint aren't allowed on _settings\n\t        prompt = prompt || this._settings.prompt;\n\t        display = display || this._settings.display;\n\t        max_age = max_age || this._settings.max_age;\n\t        ui_locales = ui_locales || this._settings.ui_locales;\n\t        acr_values = acr_values || this._settings.acr_values;\n\t\n\t        var authority = this._settings.authority;\n\t\n\t        return this._metadataService.getAuthorizationEndpoint().then(function (url) {\n\t            _Log2.default.info(\"Received authorization endpoint\", url);\n\t\n\t            var request = new _SigninRequest2.default({\n\t                url: url,\n\t                client_id: client_id,\n\t                redirect_uri: redirect_uri,\n\t                response_type: response_type,\n\t                scope: scope,\n\t                data: data,\n\t                authority: authority,\n\t                prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values\n\t            });\n\t\n\t            var state = request.state;\n\t            stateStore = stateStore || _this._stateStore;\n\t\n\t            return stateStore.set(state.id, state.toStorageString()).then(function () {\n\t                return request;\n\t            });\n\t        });\n\t    };\n\t\n\t    OidcClient.prototype.processSigninResponse = function processSigninResponse(url, stateStore) {\n\t        var _this2 = this;\n\t\n\t        _Log2.default.info(\"OidcClient.processSigninResponse\");\n\t\n\t        var response = new _SigninResponse2.default(url);\n\t\n\t        if (!response.state) {\n\t            _Log2.default.error(\"No state in response\");\n\t            return Promise.reject(new Error(\"No state in response\"));\n\t        }\n\t\n\t        stateStore = stateStore || this._stateStore;\n\t\n\t        return stateStore.remove(response.state).then(function (storedStateString) {\n\t            if (!storedStateString) {\n\t                _Log2.default.error(\"No matching state found in storage\");\n\t                throw new Error(\"No matching state found in storage\");\n\t            }\n\t\n\t            var state = _SigninState2.default.fromStorageString(storedStateString);\n\t\n\t            _Log2.default.info(\"Received state from storage; validating response\");\n\t            return _this2._validator.validateSigninResponse(state, response);\n\t        });\n\t    };\n\t\n\t    OidcClient.prototype.createSignoutRequest = function createSignoutRequest() {\n\t        var _this3 = this;\n\t\n\t        var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        var id_token_hint = _ref2.id_token_hint;\n\t        var data = _ref2.data;\n\t        var post_logout_redirect_uri = _ref2.post_logout_redirect_uri;\n\t        var stateStore = arguments[1];\n\t\n\t        _Log2.default.info(\"OidcClient.createSignoutRequest\");\n\t\n\t        post_logout_redirect_uri = post_logout_redirect_uri || this._settings.post_logout_redirect_uri;\n\t\n\t        return this._metadataService.getEndSessionEndpoint().then(function (url) {\n\t            _Log2.default.info(\"Received end session endpoint\", url);\n\t\n\t            var request = new _SignoutRequest2.default({\n\t                url: url,\n\t                id_token_hint: id_token_hint,\n\t                post_logout_redirect_uri: post_logout_redirect_uri,\n\t                data: data\n\t            });\n\t\n\t            var state = request.state;\n\t            if (state) {\n\t                _Log2.default.info(\"Signout request has state to persist\");\n\t\n\t                stateStore = stateStore || _this3._stateStore;\n\t                stateStore.set(state.id, state.toStorageString());\n\t            }\n\t\n\t            return request;\n\t        });\n\t    };\n\t\n\t    OidcClient.prototype.processSignoutResponse = function processSignoutResponse(url, stateStore) {\n\t        var _this4 = this;\n\t\n\t        _Log2.default.info(\"OidcClient.processSignoutResponse\");\n\t\n\t        var response = new _SignoutResponse2.default(url);\n\t        if (!response.state) {\n\t            _Log2.default.info(\"No state in response\");\n\t\n\t            if (response.error) {\n\t                _Log2.default.warn(\"Response was error\", response.error);\n\t                return Promise.reject(new _ErrorResponse2.default(response));\n\t            }\n\t\n\t            return Promise.resolve(response);\n\t        }\n\t\n\t        var stateKey = response.state;\n\t\n\t        stateStore = stateStore || this._stateStore;\n\t\n\t        return stateStore.remove(stateKey).then(function (storedStateString) {\n\t            if (!storedStateString) {\n\t                _Log2.default.error(\"No matching state found in storage\");\n\t                throw new Error(\"No matching state found in storage\");\n\t            }\n\t\n\t            var state = _State2.default.fromStorageString(storedStateString);\n\t\n\t            _Log2.default.info(\"Received state from storage; validating response\");\n\t            return _this4._validator.validateSignoutResponse(state, response);\n\t        });\n\t    };\n\t\n\t    OidcClient.prototype.clearStaleState = function clearStaleState(stateStore) {\n\t        _Log2.default.info(\"OidcClient.clearStaleState\");\n\t\n\t        stateStore = stateStore || this._stateStore;\n\t\n\t        return _State2.default.clearStaleState(stateStore, this.settings.staleStateAge);\n\t    };\n\t\n\t    _createClass(OidcClient, [{\n\t        key: '_stateStore',\n\t        get: function get() {\n\t            return this.settings.stateStore;\n\t        }\n\t    }, {\n\t        key: '_validator',\n\t        get: function get() {\n\t            return this.settings.validator;\n\t        }\n\t    }, {\n\t        key: '_metadataService',\n\t        get: function get() {\n\t            return this.settings.metadataService;\n\t        }\n\t    }, {\n\t        key: 'settings',\n\t        get: function get() {\n\t            return this._settings;\n\t        }\n\t    }, {\n\t        key: 'metadataService',\n\t        get: function get() {\n\t            return this._metadataService;\n\t        }\n\t    }]);\n\t\n\t    return OidcClient;\n\t}();\n\t\n\texports.default = OidcClient;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _WebStorageStateStore = __webpack_require__(4);\n\t\n\tvar _WebStorageStateStore2 = _interopRequireDefault(_WebStorageStateStore);\n\t\n\tvar _ResponseValidator = __webpack_require__(6);\n\t\n\tvar _ResponseValidator2 = _interopRequireDefault(_ResponseValidator);\n\t\n\tvar _MetadataService = __webpack_require__(7);\n\t\n\tvar _MetadataService2 = _interopRequireDefault(_MetadataService);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar OidcMetadataUrlPath = '.well-known/openid-configuration';\n\t\n\tvar DefaultResponseType = \"id_token\";\n\tvar DefaultScope = \"openid\";\n\tvar DefaultStaleStateAge = 60; // seconds\n\tvar DefaultClockSkewInSeconds = 60 * 5;\n\t\n\tvar OidcClientSettings = function () {\n\t    function OidcClientSettings() {\n\t        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        var\n\t        // metadata related\n\t        authority = _ref.authority;\n\t        var metadataUrl = _ref.metadataUrl;\n\t        var metadata = _ref.metadata;\n\t        var signingKeys = _ref.signingKeys;\n\t        var\n\t        // client related\n\t        client_id = _ref.client_id;\n\t        var _ref$response_type = _ref.response_type;\n\t        var response_type = _ref$response_type === undefined ? DefaultResponseType : _ref$response_type;\n\t        var _ref$scope = _ref.scope;\n\t        var scope = _ref$scope === undefined ? DefaultScope : _ref$scope;\n\t        var redirect_uri = _ref.redirect_uri;\n\t        var post_logout_redirect_uri = _ref.post_logout_redirect_uri;\n\t        var\n\t        // optional protocol\n\t        prompt = _ref.prompt;\n\t        var display = _ref.display;\n\t        var max_age = _ref.max_age;\n\t        var ui_locales = _ref.ui_locales;\n\t        var acr_values = _ref.acr_values;\n\t        var _ref$filterProtocolCl = _ref.filterProtocolClaims;\n\t        var\n\t        // behavior flags\n\t        filterProtocolClaims = _ref$filterProtocolCl === undefined ? true : _ref$filterProtocolCl;\n\t        var _ref$loadUserInfo = _ref.loadUserInfo;\n\t        var loadUserInfo = _ref$loadUserInfo === undefined ? true : _ref$loadUserInfo;\n\t        var _ref$staleStateAge = _ref.staleStateAge;\n\t        var staleStateAge = _ref$staleStateAge === undefined ? DefaultStaleStateAge : _ref$staleStateAge;\n\t        var _ref$clockSkew = _ref.clockSkew;\n\t        var clockSkew = _ref$clockSkew === undefined ? DefaultClockSkewInSeconds : _ref$clockSkew;\n\t        var _ref$stateStore = _ref.stateStore;\n\t        var\n\t        // other behavior\n\t        stateStore = _ref$stateStore === undefined ? new _WebStorageStateStore2.default() : _ref$stateStore;\n\t        var _ref$ResponseValidato = _ref.ResponseValidatorCtor;\n\t        var ResponseValidatorCtor = _ref$ResponseValidato === undefined ? _ResponseValidator2.default : _ref$ResponseValidato;\n\t        var _ref$MetadataServiceC = _ref.MetadataServiceCtor;\n\t        var MetadataServiceCtor = _ref$MetadataServiceC === undefined ? _MetadataService2.default : _ref$MetadataServiceC;\n\t\n\t        _classCallCheck(this, OidcClientSettings);\n\t\n\t        this._authority = authority;\n\t        this._metadataUrl = metadataUrl;\n\t        this._metadata = metadata;\n\t        this._signingKeys = signingKeys;\n\t\n\t        this._client_id = client_id;\n\t        this._response_type = response_type;\n\t        this._scope = scope;\n\t        this._redirect_uri = redirect_uri;\n\t        this._post_logout_redirect_uri = post_logout_redirect_uri;\n\t\n\t        this._prompt = prompt;\n\t        this._display = display;\n\t        this._max_age = max_age;\n\t        this._ui_locales = ui_locales;\n\t        this._acr_values = acr_values;\n\t\n\t        this._filterProtocolClaims = !!filterProtocolClaims;\n\t        this._loadUserInfo = !!loadUserInfo;\n\t        this._staleStateAge = staleStateAge;\n\t        this._clockSkew = clockSkew;\n\t\n\t        this._stateStore = stateStore;\n\t        this._validator = new ResponseValidatorCtor(this);\n\t        this._metadataService = new MetadataServiceCtor(this);\n\t    }\n\t\n\t    // client config\n\t\n\t\n\t    _createClass(OidcClientSettings, [{\n\t        key: 'client_id',\n\t        get: function get() {\n\t            return this._client_id;\n\t        },\n\t        set: function set(value) {\n\t            if (!this._client_id) {\n\t                // one-time set only\n\t                this._client_id = value;\n\t            } else {\n\t                _Log2.default.error(\"client_id has already been assigned.\");\n\t                throw new Error(\"client_id has already been assigned.\");\n\t            }\n\t        }\n\t    }, {\n\t        key: 'response_type',\n\t        get: function get() {\n\t            return this._response_type;\n\t        }\n\t    }, {\n\t        key: 'scope',\n\t        get: function get() {\n\t            return this._scope;\n\t        }\n\t    }, {\n\t        key: 'redirect_uri',\n\t        get: function get() {\n\t            return this._redirect_uri;\n\t        }\n\t    }, {\n\t        key: 'post_logout_redirect_uri',\n\t        get: function get() {\n\t            return this._post_logout_redirect_uri;\n\t        }\n\t\n\t        // optional protocol params\n\t\n\t    }, {\n\t        key: 'prompt',\n\t        get: function get() {\n\t            return this._prompt;\n\t        }\n\t    }, {\n\t        key: 'display',\n\t        get: function get() {\n\t            return this._display;\n\t        }\n\t    }, {\n\t        key: 'max_age',\n\t        get: function get() {\n\t            return this._max_age;\n\t        }\n\t    }, {\n\t        key: 'ui_locales',\n\t        get: function get() {\n\t            return this._ui_locales;\n\t        }\n\t    }, {\n\t        key: 'acr_values',\n\t        get: function get() {\n\t            return this._acr_values;\n\t        }\n\t\n\t        // metadata\n\t\n\t    }, {\n\t        key: 'authority',\n\t        get: function get() {\n\t            return this._authority;\n\t        },\n\t        set: function set(value) {\n\t            if (!this._authority) {\n\t                // one-time set only\n\t                this._authority = value;\n\t            } else {\n\t                _Log2.default.error(\"authority has already been assigned.\");\n\t                throw new Error(\"authority has already been assigned.\");\n\t            }\n\t        }\n\t    }, {\n\t        key: 'metadataUrl',\n\t        get: function get() {\n\t            if (!this._metadataUrl) {\n\t                this._metadataUrl = this.authority;\n\t\n\t                if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {\n\t                    if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {\n\t                        this._metadataUrl += '/';\n\t                    }\n\t                    this._metadataUrl += OidcMetadataUrlPath;\n\t                }\n\t            }\n\t\n\t            return this._metadataUrl;\n\t        }\n\t\n\t        // settable/cachable metadata values\n\t\n\t    }, {\n\t        key: 'metadata',\n\t        get: function get() {\n\t            return this._metadata;\n\t        },\n\t        set: function set(value) {\n\t            this._metadata = value;\n\t        }\n\t    }, {\n\t        key: 'signingKeys',\n\t        get: function get() {\n\t            return this._signingKeys;\n\t        },\n\t        set: function set(value) {\n\t            this._signingKeys = value;\n\t        }\n\t\n\t        // behavior flags\n\t\n\t    }, {\n\t        key: 'filterProtocolClaims',\n\t        get: function get() {\n\t            return this._filterProtocolClaims;\n\t        }\n\t    }, {\n\t        key: 'loadUserInfo',\n\t        get: function get() {\n\t            return this._loadUserInfo;\n\t        }\n\t    }, {\n\t        key: 'staleStateAge',\n\t        get: function get() {\n\t            return this._staleStateAge;\n\t        }\n\t    }, {\n\t        key: 'clockSkew',\n\t        get: function get() {\n\t            return this._clockSkew;\n\t        }\n\t    }, {\n\t        key: 'stateStore',\n\t        get: function get() {\n\t            return this._stateStore;\n\t        }\n\t    }, {\n\t        key: 'validator',\n\t        get: function get() {\n\t            return this._validator;\n\t        }\n\t    }, {\n\t        key: 'metadataService',\n\t        get: function get() {\n\t            return this._metadataService;\n\t        }\n\t    }]);\n\t\n\t    return OidcClientSettings;\n\t}();\n\t\n\texports.default = OidcClientSettings;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _Global = __webpack_require__(5);\n\t\n\tvar _Global2 = _interopRequireDefault(_Global);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar WebStorageStateStore = function () {\n\t    function WebStorageStateStore() {\n\t        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        var _ref$prefix = _ref.prefix;\n\t        var prefix = _ref$prefix === undefined ? \"oidc.\" : _ref$prefix;\n\t        var _ref$store = _ref.store;\n\t        var store = _ref$store === undefined ? _Global2.default.localStorage : _ref$store;\n\t\n\t        _classCallCheck(this, WebStorageStateStore);\n\t\n\t        this._store = store;\n\t        this._prefix = prefix;\n\t    }\n\t\n\t    WebStorageStateStore.prototype.set = function set(key, value) {\n\t        _Log2.default.info(\"WebStorageStateStore.set\", key);\n\t\n\t        key = this._prefix + key;\n\t\n\t        this._store.setItem(key, value);\n\t\n\t        return Promise.resolve();\n\t    };\n\t\n\t    WebStorageStateStore.prototype.get = function get(key) {\n\t        _Log2.default.info(\"WebStorageStateStore.get\", key);\n\t\n\t        key = this._prefix + key;\n\t\n\t        var item = this._store.getItem(key);\n\t\n\t        return Promise.resolve(item);\n\t    };\n\t\n\t    WebStorageStateStore.prototype.remove = function remove(key) {\n\t        _Log2.default.info(\"WebStorageStateStore.remove\", key);\n\t\n\t        key = this._prefix + key;\n\t\n\t        var item = this._store.getItem(key);\n\t        this._store.removeItem(key);\n\t\n\t        return Promise.resolve(item);\n\t    };\n\t\n\t    WebStorageStateStore.prototype.getAllKeys = function getAllKeys() {\n\t        _Log2.default.info(\"WebStorageStateStore.getAllKeys\");\n\t\n\t        var keys = [];\n\t\n\t        for (var index = 0; index < this._store.length; index++) {\n\t            var key = this._store.key(index);\n\t\n\t            if (key.indexOf(this._prefix) === 0) {\n\t                keys.push(key.substr(this._prefix.length));\n\t            }\n\t        }\n\t\n\t        return Promise.resolve(keys);\n\t    };\n\t\n\t    return WebStorageStateStore;\n\t}();\n\t\n\texports.default = WebStorageStateStore;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar timer = {\n\t    setTimeout: function (_setTimeout) {\n\t        function setTimeout(_x, _x2) {\n\t            return _setTimeout.apply(this, arguments);\n\t        }\n\t\n\t        setTimeout.toString = function () {\n\t            return _setTimeout.toString();\n\t        };\n\t\n\t        return setTimeout;\n\t    }(function (cb, duration) {\n\t        return setTimeout(cb, duration);\n\t    }),\n\t    clearTimeout: function (_clearTimeout) {\n\t        function clearTimeout(_x3) {\n\t            return _clearTimeout.apply(this, arguments);\n\t        }\n\t\n\t        clearTimeout.toString = function () {\n\t            return _clearTimeout.toString();\n\t        };\n\t\n\t        return clearTimeout;\n\t    }(function (handle) {\n\t        return clearTimeout(handle);\n\t    })\n\t};\n\t\n\tvar testing = false;\n\t\n\tvar Global = function () {\n\t    function Global() {\n\t        _classCallCheck(this, Global);\n\t    }\n\t\n\t    Global._testing = function _testing() {\n\t        testing = true;\n\t    };\n\t\n\t    _createClass(Global, null, [{\n\t        key: \"location\",\n\t        get: function get() {\n\t            if (!testing) {\n\t                return location;\n\t            }\n\t        }\n\t    }, {\n\t        key: \"localStorage\",\n\t        get: function get() {\n\t            if (!testing) {\n\t                return localStorage;\n\t            }\n\t        }\n\t    }, {\n\t        key: \"sessionStorage\",\n\t        get: function get() {\n\t            if (!testing) {\n\t                return sessionStorage;\n\t            }\n\t        }\n\t    }, {\n\t        key: \"XMLHttpRequest\",\n\t        get: function get() {\n\t            if (!testing) {\n\t                return XMLHttpRequest;\n\t            }\n\t        }\n\t    }, {\n\t        key: \"timer\",\n\t        get: function get() {\n\t            if (!testing) {\n\t                return timer;\n\t            }\n\t        }\n\t    }]);\n\t\n\t    return Global;\n\t}();\n\t\n\texports.default = Global;\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _MetadataService = __webpack_require__(7);\n\t\n\tvar _MetadataService2 = _interopRequireDefault(_MetadataService);\n\t\n\tvar _UserInfoService = __webpack_require__(9);\n\t\n\tvar _UserInfoService2 = _interopRequireDefault(_UserInfoService);\n\t\n\tvar _ErrorResponse = __webpack_require__(10);\n\t\n\tvar _ErrorResponse2 = _interopRequireDefault(_ErrorResponse);\n\t\n\tvar _JoseUtil = __webpack_require__(11);\n\t\n\tvar _JoseUtil2 = _interopRequireDefault(_JoseUtil);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar ProtocolClaims = [\"nonce\", \"at_hash\", \"iat\", \"nbf\", \"exp\", \"aud\", \"iss\", \"c_hash\"];\n\t\n\tvar ResponseValidator = function () {\n\t    function ResponseValidator(settings) {\n\t        var MetadataServiceCtor = arguments.length <= 1 || arguments[1] === undefined ? _MetadataService2.default : arguments[1];\n\t        var UserInfoServiceCtor = arguments.length <= 2 || arguments[2] === undefined ? _UserInfoService2.default : arguments[2];\n\t        var joseUtil = arguments.length <= 3 || arguments[3] === undefined ? _JoseUtil2.default : arguments[3];\n\t\n\t        _classCallCheck(this, ResponseValidator);\n\t\n\t        if (!settings) {\n\t            _Log2.default.error(\"No settings passed to ResponseValidator\");\n\t            throw new Error(\"settings\");\n\t        }\n\t\n\t        this._settings = settings;\n\t        this._metadataService = new MetadataServiceCtor(this._settings);\n\t        this._userInfoService = new UserInfoServiceCtor(this._settings);\n\t        this._joseUtil = joseUtil;\n\t    }\n\t\n\t    ResponseValidator.prototype.validateSigninResponse = function validateSigninResponse(state, response) {\n\t        var _this = this;\n\t\n\t        _Log2.default.info(\"ResponseValidator.validateSigninResponse\");\n\t\n\t        return this._processSigninParams(state, response).then(function (response) {\n\t            _Log2.default.info(\"state processed\");\n\t            return _this._validateTokens(state, response).then(function (response) {\n\t                _Log2.default.info(\"tokens validated\");\n\t                return _this._processClaims(response).then(function (response) {\n\t                    _Log2.default.info(\"claims processed\");\n\t                    return response;\n\t                });\n\t            });\n\t        });\n\t    };\n\t\n\t    ResponseValidator.prototype.validateSignoutResponse = function validateSignoutResponse(state, response) {\n\t        _Log2.default.info(\"ResponseValidator.validateSignoutResponse\");\n\t\n\t        if (state.id !== response.state) {\n\t            _Log2.default.error(\"State does not match\");\n\t            return Promise.reject(new Error(\"State does not match\"));\n\t        }\n\t\n\t        // now that we know the state matches, take the stored data\n\t        // and set it into the response so callers can get their state\n\t        // this is important for both success & error outcomes\n\t        _Log2.default.info(\"state validated\");\n\t        response.state = state.data;\n\t\n\t        if (response.error) {\n\t            _Log2.default.warn(\"Response was error\", response.error);\n\t            return Promise.reject(new _ErrorResponse2.default(response));\n\t        }\n\t\n\t        return Promise.resolve(response);\n\t    };\n\t\n\t    ResponseValidator.prototype._processSigninParams = function _processSigninParams(state, response) {\n\t        _Log2.default.info(\"ResponseValidator._processSigninParams\");\n\t\n\t        if (state.id !== response.state) {\n\t            _Log2.default.error(\"State does not match\");\n\t            return Promise.reject(new Error(\"State does not match\"));\n\t        }\n\t\n\t        if (!state.client_id) {\n\t            _Log2.default.error(\"No client_id on state\");\n\t            return Promise.reject(new Error(\"No client_id on state\"));\n\t        }\n\t\n\t        if (!state.authority) {\n\t            _Log2.default.error(\"No authority on state\");\n\t            return Promise.reject(new Error(\"No authority on state\"));\n\t        }\n\t\n\t        // this allows the authority to be loaded from the signin state\n\t        if (!this._settings.authority) {\n\t            this._settings.authority = state.authority;\n\t        }\n\t        // ensure we're using the correct authority if the authority is not loaded from signin state\n\t        else if (this._settings.authority && this._settings.authority !== state.authority) {\n\t                _Log2.default.error(\"authority mismatch on settings vs. signin state\");\n\t                return Promise.reject(new Error(\"authority mismatch on settings vs. signin state\"));\n\t            }\n\t        // this allows the client_id to be loaded from the signin state\n\t        if (!this._settings.client_id) {\n\t            this._settings.client_id = state.client_id;\n\t        }\n\t        // ensure we're using the correct client_id if the client_id is not loaded from signin state\n\t        else if (this._settings.client_id && this._settings.client_id !== state.client_id) {\n\t                _Log2.default.error(\"client_id mismatch on settings vs. signin state\");\n\t                return Promise.reject(new Error(\"client_id mismatch on settings vs. signin state\"));\n\t            }\n\t\n\t        // now that we know the state matches, take the stored data\n\t        // and set it into the response so callers can get their state\n\t        // this is important for both success & error outcomes\n\t        _Log2.default.info(\"state validated\");\n\t        response.state = state.data;\n\t\n\t        if (response.error) {\n\t            _Log2.default.warn(\"Response was error\", response.error);\n\t            return Promise.reject(new _ErrorResponse2.default(response));\n\t        }\n\t\n\t        if (state.nonce && !response.id_token) {\n\t            _Log2.default.error(\"Expecting id_token in response\");\n\t            return Promise.reject(new Error(\"No id_token in response\"));\n\t        }\n\t\n\t        if (!state.nonce && response.id_token) {\n\t            _Log2.default.error(\"Not expecting id_token in response\");\n\t            return Promise.reject(new Error(\"Unexpected id_token in response\"));\n\t        }\n\t\n\t        return Promise.resolve(response);\n\t    };\n\t\n\t    ResponseValidator.prototype._processClaims = function _processClaims(response) {\n\t        var _this2 = this;\n\t\n\t        _Log2.default.info(\"ResponseValidator._processClaims\");\n\t\n\t        if (response.isOpenIdConnect) {\n\t            _Log2.default.info(\"response is OIDC, processing claims\");\n\t\n\t            response.profile = this._filterProtocolClaims(response.profile);\n\t\n\t            if (this._settings.loadUserInfo && response.access_token) {\n\t                _Log2.default.info(\"loading user info\");\n\t\n\t                return this._userInfoService.getClaims(response.access_token).then(function (claims) {\n\t\n\t                    response.profile = _this2._mergeClaims(response.profile, claims);\n\t                    _Log2.default.info(\"user info claims received, updated profile:\", response.profile);\n\t\n\t                    return response;\n\t                });\n\t            } else {\n\t                _Log2.default.info(\"not loading user info\");\n\t            }\n\t        } else {\n\t            _Log2.default.info(\"response is not OIDC, not processing claims\");\n\t        }\n\t\n\t        return Promise.resolve(response);\n\t    };\n\t\n\t    ResponseValidator.prototype._mergeClaims = function _mergeClaims(claims1, claims2) {\n\t        var result = Object.assign({}, claims1);\n\t\n\t        for (var name in claims2) {\n\t            var values = claims2[name];\n\t            if (!Array.isArray(values)) {\n\t                values = [values];\n\t            }\n\t\n\t            var _iteratorNormalCompletion = true;\n\t            var _didIteratorError = false;\n\t            var _iteratorError = undefined;\n\t\n\t            try {\n\t                for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t                    var value = _step.value;\n\t\n\t                    if (!result[name]) {\n\t                        result[name] = value;\n\t                    } else if (Array.isArray(result[name])) {\n\t                        if (result[name].indexOf(value) < 0) {\n\t                            result[name].push(value);\n\t                        }\n\t                    } else if (result[name] !== value) {\n\t                        result[name] = [result[name], value];\n\t                    }\n\t                }\n\t            } catch (err) {\n\t                _didIteratorError = true;\n\t                _iteratorError = err;\n\t            } finally {\n\t                try {\n\t                    if (!_iteratorNormalCompletion && _iterator.return) {\n\t                        _iterator.return();\n\t                    }\n\t                } finally {\n\t                    if (_didIteratorError) {\n\t                        throw _iteratorError;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        return result;\n\t    };\n\t\n\t    ResponseValidator.prototype._filterProtocolClaims = function _filterProtocolClaims(claims) {\n\t        _Log2.default.info(\"ResponseValidator._filterProtocolClaims, incoming claims:\", claims);\n\t\n\t        var result = Object.assign({}, claims);\n\t\n\t        if (this._settings._filterProtocolClaims) {\n\t            ProtocolClaims.forEach(function (type) {\n\t                delete result[type];\n\t            });\n\t\n\t            _Log2.default.info(\"protocol claims filtered\", result);\n\t        } else {\n\t            _Log2.default.info(\"protocol claims not filtered\");\n\t        }\n\t\n\t        return result;\n\t    };\n\t\n\t    ResponseValidator.prototype._validateTokens = function _validateTokens(state, response) {\n\t        _Log2.default.info(\"ResponseValidator._validateTokens\");\n\t\n\t        if (response.id_token) {\n\t\n\t            if (response.access_token) {\n\t                _Log2.default.info(\"Validating id_token and access_token\");\n\t                return this._validateIdTokenAndAccessToken(state, response);\n\t            }\n\t\n\t            _Log2.default.info(\"Validating id_token\");\n\t            return this._validateIdToken(state, response);\n\t        }\n\t\n\t        _Log2.default.info(\"No id_token to validate\");\n\t        return Promise.resolve(response);\n\t    };\n\t\n\t    ResponseValidator.prototype._validateIdTokenAndAccessToken = function _validateIdTokenAndAccessToken(state, response) {\n\t        var _this3 = this;\n\t\n\t        _Log2.default.info(\"ResponseValidator._validateIdTokenAndAccessToken\");\n\t\n\t        return this._validateIdToken(state, response).then(function (response) {\n\t            return _this3._validateAccessToken(response);\n\t        });\n\t    };\n\t\n\t    ResponseValidator.prototype._validateIdToken = function _validateIdToken(state, response) {\n\t        var _this4 = this;\n\t\n\t        _Log2.default.info(\"ResponseValidator._validateIdToken\");\n\t\n\t        if (!state.nonce) {\n\t            _Log2.default.error(\"No nonce on state\");\n\t            return Promise.reject(new Error(\"No nonce on state\"));\n\t        }\n\t\n\t        var jwt = this._joseUtil.parseJwt(response.id_token);\n\t        if (!jwt || !jwt.header || !jwt.payload) {\n\t            _Log2.default.error(\"Failed to parse id_token\", jwt);\n\t            return Promise.reject(new Error(\"Failed to parse id_token\"));\n\t        }\n\t\n\t        if (state.nonce !== jwt.payload.nonce) {\n\t            _Log2.default.error(\"Invalid nonce in id_token\");\n\t            return Promise.reject(new Error(\"Invalid nonce in id_token\"));\n\t        }\n\t\n\t        var kid = jwt.header.kid;\n\t        if (!kid) {\n\t            _Log2.default.error(\"No kid found in id_token\");\n\t            return Promise.reject(new Error(\"No kid found in id_token\"));\n\t        }\n\t\n\t        return this._metadataService.getIssuer().then(function (issuer) {\n\t            _Log2.default.info(\"Received issuer\");\n\t\n\t            return _this4._metadataService.getSigningKeys().then(function (keys) {\n\t                if (!keys) {\n\t                    _Log2.default.error(\"No signing keys from metadata\");\n\t                    return Promise.reject(new Error(\"No signing keys from metadata\"));\n\t                }\n\t\n\t                _Log2.default.info(\"Received signing keys\");\n\t\n\t                var key = keys.filter(function (key) {\n\t                    return key.kid === kid;\n\t                })[0];\n\t\n\t                if (!key) {\n\t                    _Log2.default.error(\"No key matching kid found in signing keys\");\n\t                    return Promise.reject(new Error(\"No key matching kid found in signing keys\"));\n\t                }\n\t\n\t                var audience = state.client_id;\n\t\n\t                var clockSkewInSeconds = _this4._settings.clockSkew;\n\t                _Log2.default.info(\"Validaing JWT; using clock skew (in seconds) of: \", clockSkewInSeconds);\n\t\n\t                return _this4._joseUtil.validateJwt(response.id_token, key, issuer, audience, clockSkewInSeconds).then(function () {\n\t                    _Log2.default.info(\"JWT validation successful\");\n\t\n\t                    response.profile = jwt.payload;\n\t\n\t                    return response;\n\t                });\n\t            });\n\t        });\n\t    };\n\t\n\t    ResponseValidator.prototype._validateAccessToken = function _validateAccessToken(response) {\n\t        _Log2.default.info(\"ResponseValidator._validateAccessToken\");\n\t\n\t        if (!response.profile) {\n\t            _Log2.default.error(\"No profile loaded from id_token\");\n\t            return Promise.reject(new Error(\"No profile loaded from id_token\"));\n\t        }\n\t\n\t        if (!response.profile.at_hash) {\n\t            _Log2.default.error(\"No at_hash in id_token\");\n\t            return Promise.reject(new Error(\"No at_hash in id_token\"));\n\t        }\n\t\n\t        if (!response.id_token) {\n\t            _Log2.default.error(\"No id_token\");\n\t            return Promise.reject(new Error(\"No id_token\"));\n\t        }\n\t\n\t        var jwt = this._joseUtil.parseJwt(response.id_token);\n\t        if (!jwt || !jwt.header) {\n\t            _Log2.default.error(\"Failed to parse id_token\", jwt);\n\t            return Promise.reject(new Error(\"Failed to parse id_token\"));\n\t        }\n\t\n\t        var hashAlg = jwt.header.alg;\n\t        if (!hashAlg || hashAlg.length !== 5) {\n\t            _Log2.default.error(\"Unsupported alg:\", hashAlg);\n\t            return Promise.reject(new Error(\"Unsupported alg: \" + hashAlg));\n\t        }\n\t\n\t        var hashBits = hashAlg.substr(2, 3);\n\t        if (!hashBits) {\n\t            _Log2.default.error(\"Unsupported alg:\", hashAlg, hashBits);\n\t            return Promise.reject(new Error(\"Unsupported alg: \" + hashAlg));\n\t        }\n\t\n\t        hashBits = parseInt(hashBits);\n\t        if (hashBits !== 256 && hashBits !== 384 && hashBits !== 512) {\n\t            _Log2.default.error(\"Unsupported alg:\", hashAlg, hashBits);\n\t            return Promise.reject(new Error(\"Unsupported alg: \" + hashAlg));\n\t        }\n\t\n\t        var sha = \"sha\" + hashBits;\n\t        var hash = this._joseUtil.hashString(response.access_token, sha);\n\t        if (!hash) {\n\t            _Log2.default.error(\"access_token hash failed:\", sha);\n\t            return Promise.reject(new Error(\"Failed to validate at_hash\"));\n\t        }\n\t\n\t        var left = hash.substr(0, hash.length / 2);\n\t        var left_b64u = this._joseUtil.hexToBase64Url(left);\n\t        if (left_b64u !== response.profile.at_hash) {\n\t            _Log2.default.error(\"Failed to validate at_hash\", left_b64u, response.profile.at_hash);\n\t            return Promise.reject(new Error(\"Failed to validate at_hash\"));\n\t        }\n\t\n\t        return Promise.resolve(response);\n\t    };\n\t\n\t    return ResponseValidator;\n\t}();\n\t\n\texports.default = ResponseValidator;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _JsonService = __webpack_require__(8);\n\t\n\tvar _JsonService2 = _interopRequireDefault(_JsonService);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar MetadataService = function () {\n\t    function MetadataService(settings) {\n\t        var JsonServiceCtor = arguments.length <= 1 || arguments[1] === undefined ? _JsonService2.default : arguments[1];\n\t\n\t        _classCallCheck(this, MetadataService);\n\t\n\t        if (!settings) {\n\t            _Log2.default.error(\"No settings passed to MetadataService\");\n\t            throw new Error(\"settings\");\n\t        }\n\t\n\t        this._settings = settings;\n\t        this._jsonService = new JsonServiceCtor();\n\t    }\n\t\n\t    MetadataService.prototype.getMetadata = function getMetadata() {\n\t        var _this = this;\n\t\n\t        _Log2.default.info(\"MetadataService.getMetadata\");\n\t\n\t        if (this._settings.metadata) {\n\t            _Log2.default.info(\"Returning metadata from settings\");\n\t            return Promise.resolve(this._settings.metadata);\n\t        }\n\t\n\t        if (!this._settings.metadataUrl) {\n\t            _Log2.default.error(\"No metadataUrl configured on settings\");\n\t            return Promise.reject(new Error(\"No metadataUrl configured on settings\"));\n\t        }\n\t\n\t        _Log2.default.info(\"getting metadata from\", this._settings.metadataUrl);\n\t\n\t        return this._jsonService.getJson(this._settings.metadataUrl).then(function (metadata) {\n\t            _Log2.default.info(\"json received\");\n\t            _this._settings.metadata = metadata;\n\t            return metadata;\n\t        });\n\t    };\n\t\n\t    MetadataService.prototype.getIssuer = function getIssuer() {\n\t        _Log2.default.info(\"MetadataService.getIssuer\");\n\t        return this._getMetadataProperty(\"issuer\");\n\t    };\n\t\n\t    MetadataService.prototype.getAuthorizationEndpoint = function getAuthorizationEndpoint() {\n\t        _Log2.default.info(\"MetadataService.getAuthorizationEndpoint\");\n\t        return this._getMetadataProperty(\"authorization_endpoint\");\n\t    };\n\t\n\t    MetadataService.prototype.getUserInfoEndpoint = function getUserInfoEndpoint() {\n\t        _Log2.default.info(\"MetadataService.getUserInfoEndpoint\");\n\t        return this._getMetadataProperty(\"userinfo_endpoint\");\n\t    };\n\t\n\t    MetadataService.prototype.getCheckSessionIframe = function getCheckSessionIframe() {\n\t        _Log2.default.info(\"MetadataService.getCheckSessionIframe\");\n\t        return this._getMetadataProperty(\"check_session_iframe\");\n\t    };\n\t\n\t    MetadataService.prototype.getEndSessionEndpoint = function getEndSessionEndpoint() {\n\t        _Log2.default.info(\"MetadataService.getEndSessionEndpoint\");\n\t        return this._getMetadataProperty(\"end_session_endpoint\");\n\t    };\n\t\n\t    MetadataService.prototype._getMetadataProperty = function _getMetadataProperty(name) {\n\t        _Log2.default.info(\"MetadataService._getMetadataProperty\", name);\n\t\n\t        return this.getMetadata().then(function (metadata) {\n\t            _Log2.default.info(\"metadata recieved\");\n\t\n\t            if (metadata[name] === undefined) {\n\t                _Log2.default.error(\"Metadata does not contain property \" + name);\n\t                throw new Error(\"Metadata does not contain property \" + name);\n\t            }\n\t\n\t            return metadata[name];\n\t        });\n\t    };\n\t\n\t    MetadataService.prototype.getSigningKeys = function getSigningKeys() {\n\t        var _this2 = this;\n\t\n\t        _Log2.default.info(\"MetadataService.getSigningKeys\");\n\t\n\t        if (this._settings.signingKeys) {\n\t            _Log2.default.info(\"Returning signingKeys from settings\");\n\t            return Promise.resolve(this._settings.signingKeys);\n\t        }\n\t\n\t        return this._getMetadataProperty(\"jwks_uri\").then(function (jwks_uri) {\n\t            _Log2.default.info(\"jwks_uri received\", jwks_uri);\n\t\n\t            return _this2._jsonService.getJson(jwks_uri).then(function (keySet) {\n\t                _Log2.default.info(\"key set received\", keySet);\n\t\n\t                if (!keySet.keys) {\n\t                    _Log2.default.error(\"Missing keys on keyset\");\n\t                    throw new Error(\"Missing keys on keyset\");\n\t                }\n\t\n\t                var filteredKeys = _this2._filterSigningKeys(keySet.keys);\n\t                _Log2.default.info(\"filtered keys\", filteredKeys);\n\t\n\t                _this2._settings.signingKeys = filteredKeys;\n\t                return _this2._settings.signingKeys;\n\t            });\n\t        });\n\t    };\n\t\n\t    MetadataService.prototype._filterSigningKeys = function _filterSigningKeys(keys) {\n\t        _Log2.default.info(\"MetadataService._filterSigningKeys\", keys);\n\t\n\t        return keys.filter(function (item) {\n\t            return item.use === \"sig\";\n\t        });\n\t    };\n\t\n\t    return MetadataService;\n\t}();\n\t\n\texports.default = MetadataService;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _Global = __webpack_require__(5);\n\t\n\tvar _Global2 = _interopRequireDefault(_Global);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar JsonService = function () {\n\t    function JsonService() {\n\t        var XMLHttpRequestCtor = arguments.length <= 0 || arguments[0] === undefined ? _Global2.default.XMLHttpRequest : arguments[0];\n\t\n\t        _classCallCheck(this, JsonService);\n\t\n\t        this._XMLHttpRequest = XMLHttpRequestCtor;\n\t    }\n\t\n\t    JsonService.prototype.getJson = function getJson(url, token) {\n\t        var _this = this;\n\t\n\t        _Log2.default.info(\"JsonService.getJson\", url);\n\t\n\t        if (!url) {\n\t            _Log2.default.error(\"No url passed\");\n\t            throw new Error(\"url\");\n\t        }\n\t\n\t        return new Promise(function (resolve, reject) {\n\t\n\t            var req = new _this._XMLHttpRequest();\n\t            req.open('GET', url);\n\t\n\t            req.onload = function () {\n\t                _Log2.default.info(\"HTTP response received, status\", req.status);\n\t\n\t                if (req.status === 200) {\n\t                    resolve(JSON.parse(req.responseText));\n\t                } else {\n\t                    reject(Error(req.statusText + \" (\" + req.status + \")\"));\n\t                }\n\t            };\n\t\n\t            req.onerror = function () {\n\t                _Log2.default.error(\"network error\");\n\t                reject(Error(\"Network Error\"));\n\t            };\n\t\n\t            if (token) {\n\t                _Log2.default.info(\"token passed, setting Authorization header\");\n\t                req.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n\t            }\n\t\n\t            req.send();\n\t        });\n\t    };\n\t\n\t    return JsonService;\n\t}();\n\t\n\texports.default = JsonService;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _JsonService = __webpack_require__(8);\n\t\n\tvar _JsonService2 = _interopRequireDefault(_JsonService);\n\t\n\tvar _MetadataService = __webpack_require__(7);\n\t\n\tvar _MetadataService2 = _interopRequireDefault(_MetadataService);\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar UserInfoService = function () {\n\t    function UserInfoService(settings) {\n\t        var JsonServiceCtor = arguments.length <= 1 || arguments[1] === undefined ? _JsonService2.default : arguments[1];\n\t        var MetadataServiceCtor = arguments.length <= 2 || arguments[2] === undefined ? _MetadataService2.default : arguments[2];\n\t\n\t        _classCallCheck(this, UserInfoService);\n\t\n\t        if (!settings) {\n\t            _Log2.default.error(\"No settings passed to UserInfoService\");\n\t            throw new Error(\"settings\");\n\t        }\n\t\n\t        this._settings = settings;\n\t        this._jsonService = new JsonServiceCtor();\n\t        this._metadataService = new MetadataServiceCtor(this._settings);\n\t    }\n\t\n\t    UserInfoService.prototype.getClaims = function getClaims(token) {\n\t        var _this = this;\n\t\n\t        _Log2.default.info(\"UserInfoService.getClaims\");\n\t\n\t        if (!token) {\n\t            _Log2.default.error(\"No token passed\");\n\t            return Promise.reject(new Error(\"A token is required\"));\n\t        }\n\t\n\t        return this._metadataService.getUserInfoEndpoint().then(function (url) {\n\t            _Log2.default.info(\"received userinfo url\", url);\n\t\n\t            return _this._jsonService.getJson(url, token).then(function (claims) {\n\t                _Log2.default.info(\"claims received\", claims);\n\t                return claims;\n\t            });\n\t        });\n\t    };\n\t\n\t    return UserInfoService;\n\t}();\n\t\n\texports.default = UserInfoService;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar ErrorResponse = function (_Error) {\n\t    _inherits(ErrorResponse, _Error);\n\t\n\t    function ErrorResponse() {\n\t        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        var error = _ref.error;\n\t        var error_description = _ref.error_description;\n\t        var error_uri = _ref.error_uri;\n\t        var state = _ref.state;\n\t\n\t        _classCallCheck(this, ErrorResponse);\n\t\n\t        if (!error) {\n\t            _Log2.default.error(\"No error passed to ErrorResponse\");\n\t            throw new Error(\"error\");\n\t        }\n\t\n\t        var _this = _possibleConstructorReturn(this, _Error.call(this, error_description || error));\n\t\n\t        _this.name = \"ErrorResponse\";\n\t\n\t        _this.error = error;\n\t        _this.error_description = error_description;\n\t        _this.error_uri = error_uri;\n\t\n\t        _this.state = state;\n\t        return _this;\n\t    }\n\t\n\t    return ErrorResponse;\n\t}(Error);\n\t\n\texports.default = ErrorResponse;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _jsrsasign = __webpack_require__(12);\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar AllowedSigningAlgs = ['RS256', 'RS384', 'RS512', 'PS256', 'PS384', 'PS512', 'ES256', 'ES384', 'ES512'];\n\t\n\tvar JoseUtil = function () {\n\t    function JoseUtil() {\n\t        _classCallCheck(this, JoseUtil);\n\t    }\n\t\n\t    JoseUtil.parseJwt = function parseJwt(jwt) {\n\t        _Log2.default.info(\"JoseUtil.parseJwt\");\n\t        try {\n\t\t\t\tdebugger;\n\t            var token = _jsrsasign.jws.JWS.parse(jwt);\n\t            return {\n\t                header: token.headerObj,\n\t                payload: token.payloadObj\n\t            };\n\t        } catch (e) {\n\t            _Log2.default.error(e);\n\t        }\n\t    };\n\t\n\t    JoseUtil.validateJwt = function validateJwt(jwt, key, issuer, audience, clockSkew, now) {\n\t        _Log2.default.info(\"JoseUtil.validateJwt\");\n\t\n\t        try {\n\t            if (key.kty === \"RSA\") {\n\t                if (key.e && key.n) {\n\t                    key = _jsrsasign.KEYUTIL.getKey(key);\n\t                } else if (key.x5c && key.x5c.length) {\n\t                    key = _jsrsasign.KEYUTIL.getKey(_jsrsasign.X509.getPublicKeyFromCertPEM(key.x5c[0]));\n\t                } else {\n\t                    _Log2.default.error(\"RSA key missing key material\", key);\n\t                    return Promise.reject(new Error(\"RSA key missing key material\"));\n\t                }\n\t            } else if (key.kty === \"EC\") {\n\t                if (key.crv && key.x && key.y) {\n\t                    key = _jsrsasign.KEYUTIL.getKey(key);\n\t                } else {\n\t                    _Log2.default.error(\"EC key missing key material\", key);\n\t                    return Promise.reject(new Error(\"EC key missing key material\"));\n\t                }\n\t            } else {\n\t                _Log2.default.error(\"Unsupported key type\", key && key.kty);\n\t                return Promise.reject(new Error(\"Unsupported key type: \" + key && key.kty));\n\t            }\n\t\n\t            return JoseUtil._validateJwt(jwt, key, issuer, audience, clockSkew, now);\n\t        } catch (e) {\n\t            _Log2.default.error(e && e.message || e);\n\t            return Promise.reject(\"JWT validation failed\");\n\t        }\n\t    };\n\t\n\t    JoseUtil._validateJwt = function _validateJwt(jwt, key, issuer, audience, clockSkew, now) {\n\t        _Log2.default.info(\"JoseUtil._validateJwt\");\n\t\n\t        if (!clockSkew) {\n\t            clockSkew = 0;\n\t        }\n\t\n\t        if (!now) {\n\t            now = parseInt(Date.now() / 1000);\n\t        }\n\t\n\t        var payload = JoseUtil.parseJwt(jwt).payload;\n\t\n\t        if (payload.iss !== issuer) {\n\t            _Log2.default.error(\"Invalid issuer in token\", payload.iss);\n\t            return Promise.reject(new Error(\"Invalid issuer in token: \" + payload.iss));\n\t        }\n\t\n\t        if (payload.aud !== audience) {\n\t            _Log2.default.error(\"Invalid audience in token\", payload.aud);\n\t            return Promise.reject(new Error(\"Invalid audience in token: \" + payload.aud));\n\t        }\n\t\n\t        var lowerNow = now + clockSkew;\n\t        var upperNow = now - clockSkew;\n\t\n\t        if (lowerNow < payload.iat) {\n\t            _Log2.default.error(\"iat is in the future\", payload.iat);\n\t            return Promise.reject(new Error(\"iat is in the future: \" + payload.iat));\n\t        }\n\t\n\t        if (lowerNow < payload.nbf) {\n\t            _Log2.default.error(\"nbf is in the future\", payload.nbf);\n\t            return Promise.reject(new Error(\"nbf is in the future: \" + payload.nbf));\n\t        }\n\t\n\t        if (payload.exp < upperNow) {\n\t            _Log2.default.error(\"exp is in the past\", payload.exp);\n\t            return Promise.reject(new Error(\"exp is in the past:\" + payload.exp));\n\t        }\n\t\n\t        try {\n\t            if (!_jsrsasign.jws.JWS.verify(jwt, key, AllowedSigningAlgs)) {\n\t                _Log2.default.error(\"signature validation failed\");\n\t                return Promise.reject(new Error(\"signature validation failed\"));\n\t            }\n\t        } catch (e) {\n\t            _Log2.default.error(e && e.message || e);\n\t            return Promise.reject(new Error(\"signature validation failed\"));\n\t        }\n\t\n\t        return Promise.resolve();\n\t    };\n\t\n\t    JoseUtil.hashString = function hashString(value, alg) {\n\t        _Log2.default.info(\"JoseUtil.hashString\", value, alg);\n\t        try {\n\t            return _jsrsasign.crypto.Util.hashString(value, alg);\n\t        } catch (e) {\n\t            _Log2.default.error(e);\n\t        }\n\t    };\n\t\n\t    JoseUtil.hexToBase64Url = function hexToBase64Url(value) {\n\t        _Log2.default.info(\"JoseUtil.hexToBase64Url\", value);\n\t        try {\n\t            return (0, _jsrsasign.hextob64u)(value);\n\t        } catch (e) {\n\t            _Log2.default.error(e);\n\t        }\n\t    };\n\t\n\t    return JoseUtil;\n\t}();\n\t\n\texports.default = JoseUtil;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {\n\tvar navigator = {};\n\tnavigator.userAgent = false;\n\t\n\tvar window = {};\n\t/*\n\t * jsrsasign 5.0.12 (c) 2010-2016 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\t\n\t/*\n\tyahoo-min.js\n\tCopyright (c) 2011, Yahoo! Inc. All rights reserved.\n\tCode licensed under the BSD License:\n\thttp://developer.yahoo.com/yui/license.html\n\tversion: 2.9.0\n\t*/\n\tif(typeof YAHOO==\"undefined\"||!YAHOO){var YAHOO={};}YAHOO.namespace=function(){var b=arguments,g=null,e,c,f;for(e=0;e<b.length;e=e+1){f=(\"\"+b[e]).split(\".\");g=YAHOO;for(c=(f[0]==\"YAHOO\")?1:0;c<f.length;c=c+1){g[f[c]]=g[f[c]]||{};g=g[f[c]];}}return g;};YAHOO.log=function(d,a,c){var b=YAHOO.widget.Logger;if(b&&b.log){return b.log(d,a,c);}else{return false;}};YAHOO.register=function(a,f,e){var k=YAHOO.env.modules,c,j,h,g,d;if(!k[a]){k[a]={versions:[],builds:[]};}c=k[a];j=e.version;h=e.build;g=YAHOO.env.listeners;c.name=a;c.version=j;c.build=h;c.versions.push(j);c.builds.push(h);c.mainClass=f;for(d=0;d<g.length;d=d+1){g[d](c);}if(f){f.VERSION=j;f.BUILD=h;}else{YAHOO.log(\"mainClass is undefined for module \"+a,\"warn\");}};YAHOO.env=YAHOO.env||{modules:[],listeners:[]};YAHOO.env.getVersion=function(a){return YAHOO.env.modules[a]||null;};YAHOO.env.parseUA=function(d){var e=function(i){var j=0;return parseFloat(i.replace(/\\./g,function(){return(j++==1)?\"\":\".\";}));},h=navigator,g={ie:0,opera:0,gecko:0,webkit:0,chrome:0,mobile:null,air:0,ipad:0,iphone:0,ipod:0,ios:null,android:0,webos:0,caja:h&&h.cajaVersion,secure:false,os:null},c=d||(navigator&&navigator.userAgent),f=window&&window.location,b=f&&f.href,a;g.secure=b&&(b.toLowerCase().indexOf(\"https\")===0);if(c){if((/windows|win32/i).test(c)){g.os=\"windows\";}else{if((/macintosh/i).test(c)){g.os=\"macintosh\";}else{if((/rhino/i).test(c)){g.os=\"rhino\";}}}if((/KHTML/).test(c)){g.webkit=1;}a=c.match(/AppleWebKit\\/([^\\s]*)/);if(a&&a[1]){g.webkit=e(a[1]);if(/ Mobile\\//.test(c)){g.mobile=\"Apple\";a=c.match(/OS ([^\\s]*)/);if(a&&a[1]){a=e(a[1].replace(\"_\",\".\"));}g.ios=a;g.ipad=g.ipod=g.iphone=0;a=c.match(/iPad|iPod|iPhone/);if(a&&a[0]){g[a[0].toLowerCase()]=g.ios;}}else{a=c.match(/NokiaN[^\\/]*|Android \\d\\.\\d|webOS\\/\\d\\.\\d/);if(a){g.mobile=a[0];}if(/webOS/.test(c)){g.mobile=\"WebOS\";a=c.match(/webOS\\/([^\\s]*);/);if(a&&a[1]){g.webos=e(a[1]);}}if(/ Android/.test(c)){g.mobile=\"Android\";a=c.match(/Android ([^\\s]*);/);if(a&&a[1]){g.android=e(a[1]);}}}a=c.match(/Chrome\\/([^\\s]*)/);if(a&&a[1]){g.chrome=e(a[1]);}else{a=c.match(/AdobeAIR\\/([^\\s]*)/);if(a){g.air=a[0];}}}if(!g.webkit){a=c.match(/Opera[\\s\\/]([^\\s]*)/);if(a&&a[1]){g.opera=e(a[1]);a=c.match(/Version\\/([^\\s]*)/);if(a&&a[1]){g.opera=e(a[1]);}a=c.match(/Opera Mini[^;]*/);if(a){g.mobile=a[0];}}else{a=c.match(/MSIE\\s([^;]*)/);if(a&&a[1]){g.ie=e(a[1]);}else{a=c.match(/Gecko\\/([^\\s]*)/);if(a){g.gecko=1;a=c.match(/rv:([^\\s\\)]*)/);if(a&&a[1]){g.gecko=e(a[1]);}}}}}}return g;};YAHOO.env.ua=YAHOO.env.parseUA();(function(){YAHOO.namespace(\"util\",\"widget\",\"example\");if(\"undefined\"!==typeof YAHOO_config){var b=YAHOO_config.listener,a=YAHOO.env.listeners,d=true,c;if(b){for(c=0;c<a.length;c++){if(a[c]==b){d=false;break;}}if(d){a.push(b);}}}})();YAHOO.lang=YAHOO.lang||{};(function(){var f=YAHOO.lang,a=Object.prototype,c=\"[object Array]\",h=\"[object Function]\",i=\"[object Object]\",b=[],g={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"/\":\"&#x2F;\",\"`\":\"&#x60;\"},d=[\"toString\",\"valueOf\"],e={isArray:function(j){return a.toString.apply(j)===c;},isBoolean:function(j){return typeof j===\"boolean\";},isFunction:function(j){return(typeof j===\"function\")||a.toString.apply(j)===h;},isNull:function(j){return j===null;},isNumber:function(j){return typeof j===\"number\"&&isFinite(j);},isObject:function(j){return(j&&(typeof j===\"object\"||f.isFunction(j)))||false;},isString:function(j){return typeof j===\"string\";},isUndefined:function(j){return typeof j===\"undefined\";},_IEEnumFix:(YAHOO.env.ua.ie)?function(l,k){var j,n,m;for(j=0;j<d.length;j=j+1){n=d[j];m=k[n];if(f.isFunction(m)&&m!=a[n]){l[n]=m;}}}:function(){},escapeHTML:function(j){return j.replace(/[&<>\"'\\/`]/g,function(k){return g[k];});},extend:function(m,n,l){if(!n||!m){throw new Error(\"extend failed, please check that \"+\"all dependencies are included.\");}var k=function(){},j;k.prototype=n.prototype;m.prototype=new k();m.prototype.constructor=m;m.superclass=n.prototype;if(n.prototype.constructor==a.constructor){n.prototype.constructor=n;}if(l){for(j in l){if(f.hasOwnProperty(l,j)){m.prototype[j]=l[j];}}f._IEEnumFix(m.prototype,l);}},augmentObject:function(n,m){if(!m||!n){throw new Error(\"Absorb failed, verify dependencies.\");}var j=arguments,l,o,k=j[2];if(k&&k!==true){for(l=2;l<j.length;l=l+1){n[j[l]]=m[j[l]];}}else{for(o in m){if(k||!(o in n)){n[o]=m[o];}}f._IEEnumFix(n,m);}return n;},augmentProto:function(m,l){if(!l||!m){throw new Error(\"Augment failed, verify dependencies.\");}var j=[m.prototype,l.prototype],k;for(k=2;k<arguments.length;k=k+1){j.push(arguments[k]);}f.augmentObject.apply(this,j);return m;},dump:function(j,p){var l,n,r=[],t=\"{...}\",k=\"f(){...}\",q=\", \",m=\" => \";if(!f.isObject(j)){return j+\"\";}else{if(j instanceof Date||(\"nodeType\" in j&&\"tagName\" in j)){return j;}else{if(f.isFunction(j)){return k;}}}p=(f.isNumber(p))?p:3;if(f.isArray(j)){r.push(\"[\");for(l=0,n=j.length;l<n;l=l+1){if(f.isObject(j[l])){r.push((p>0)?f.dump(j[l],p-1):t);}else{r.push(j[l]);}r.push(q);}if(r.length>1){r.pop();}r.push(\"]\");}else{r.push(\"{\");for(l in j){if(f.hasOwnProperty(j,l)){r.push(l+m);if(f.isObject(j[l])){r.push((p>0)?f.dump(j[l],p-1):t);}else{r.push(j[l]);}r.push(q);}}if(r.length>1){r.pop();}r.push(\"}\");}return r.join(\"\");},substitute:function(x,y,E,l){var D,C,B,G,t,u,F=[],p,z=x.length,A=\"dump\",r=\" \",q=\"{\",m=\"}\",n,w;for(;;){D=x.lastIndexOf(q,z);if(D<0){break;}C=x.indexOf(m,D);if(D+1>C){break;}p=x.substring(D+1,C);G=p;u=null;B=G.indexOf(r);if(B>-1){u=G.substring(B+1);G=G.substring(0,B);}t=y[G];if(E){t=E(G,t,u);}if(f.isObject(t)){if(f.isArray(t)){t=f.dump(t,parseInt(u,10));}else{u=u||\"\";n=u.indexOf(A);if(n>-1){u=u.substring(4);}w=t.toString();if(w===i||n>-1){t=f.dump(t,parseInt(u,10));}else{t=w;}}}else{if(!f.isString(t)&&!f.isNumber(t)){t=\"~-\"+F.length+\"-~\";F[F.length]=p;}}x=x.substring(0,D)+t+x.substring(C+1);if(l===false){z=D-1;}}for(D=F.length-1;D>=0;D=D-1){x=x.replace(new RegExp(\"~-\"+D+\"-~\"),\"{\"+F[D]+\"}\",\"g\");}return x;},trim:function(j){try{return j.replace(/^\\s+|\\s+$/g,\"\");}catch(k){return j;\n\t}},merge:function(){var n={},k=arguments,j=k.length,m;for(m=0;m<j;m=m+1){f.augmentObject(n,k[m],true);}return n;},later:function(t,k,u,n,p){t=t||0;k=k||{};var l=u,s=n,q,j;if(f.isString(u)){l=k[u];}if(!l){throw new TypeError(\"method undefined\");}if(!f.isUndefined(n)&&!f.isArray(s)){s=[n];}q=function(){l.apply(k,s||b);};j=(p)?setInterval(q,t):setTimeout(q,t);return{interval:p,cancel:function(){if(this.interval){clearInterval(j);}else{clearTimeout(j);}}};},isValue:function(j){return(f.isObject(j)||f.isString(j)||f.isNumber(j)||f.isBoolean(j));}};f.hasOwnProperty=(a.hasOwnProperty)?function(j,k){return j&&j.hasOwnProperty&&j.hasOwnProperty(k);}:function(j,k){return !f.isUndefined(j[k])&&j.constructor.prototype[k]!==j[k];};e.augmentObject(f,e,true);YAHOO.util.Lang=f;f.augment=f.augmentProto;YAHOO.augment=f.augmentProto;YAHOO.extend=f.extend;})();YAHOO.register(\"yahoo\",YAHOO,{version:\"2.9.0\",build:\"2800\"});\n\t\n\t/*! CryptoJS v3.1.2 core-fix.js\n\t * code.google.com/p/crypto-js\n\t * (c) 2009-2013 by Jeff Mott. All rights reserved.\n\t * code.google.com/p/crypto-js/wiki/License\n\t * THIS IS FIX of 'core.js' to fix Hmac issue.\n\t * https://code.google.com/p/crypto-js/issues/detail?id=84\n\t * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js\n\t */\n\tvar CryptoJS=CryptoJS||(function(e,g){var a={};var b=a.lib={};var j=b.Base=(function(){function n(){}return{extend:function(p){n.prototype=this;var o=new n();if(p){o.mixIn(p)}if(!o.hasOwnProperty(\"init\")){o.init=function(){o.$super.init.apply(this,arguments)}}o.init.prototype=o;o.$super=this;return o},create:function(){var o=this.extend();o.init.apply(o,arguments);return o},init:function(){},mixIn:function(p){for(var o in p){if(p.hasOwnProperty(o)){this[o]=p[o]}}if(p.hasOwnProperty(\"toString\")){this.toString=p.toString}},clone:function(){return this.init.prototype.extend(this)}}}());var l=b.WordArray=j.extend({init:function(o,n){o=this.words=o||[];if(n!=g){this.sigBytes=n}else{this.sigBytes=o.length*4}},toString:function(n){return(n||h).stringify(this)},concat:function(t){var q=this.words;var p=t.words;var n=this.sigBytes;var s=t.sigBytes;this.clamp();if(n%4){for(var r=0;r<s;r++){var o=(p[r>>>2]>>>(24-(r%4)*8))&255;q[(n+r)>>>2]|=o<<(24-((n+r)%4)*8)}}else{for(var r=0;r<s;r+=4){q[(n+r)>>>2]=p[r>>>2]}}this.sigBytes+=s;return this},clamp:function(){var o=this.words;var n=this.sigBytes;o[n>>>2]&=4294967295<<(32-(n%4)*8);o.length=e.ceil(n/4)},clone:function(){var n=j.clone.call(this);n.words=this.words.slice(0);return n},random:function(p){var o=[];for(var n=0;n<p;n+=4){o.push((e.random()*4294967296)|0)}return new l.init(o,p)}});var m=a.enc={};var h=m.Hex={stringify:function(p){var r=p.words;var o=p.sigBytes;var q=[];for(var n=0;n<o;n++){var s=(r[n>>>2]>>>(24-(n%4)*8))&255;q.push((s>>>4).toString(16));q.push((s&15).toString(16))}return q.join(\"\")},parse:function(p){var n=p.length;var q=[];for(var o=0;o<n;o+=2){q[o>>>3]|=parseInt(p.substr(o,2),16)<<(24-(o%8)*4)}return new l.init(q,n/2)}};var d=m.Latin1={stringify:function(q){var r=q.words;var p=q.sigBytes;var n=[];for(var o=0;o<p;o++){var s=(r[o>>>2]>>>(24-(o%4)*8))&255;n.push(String.fromCharCode(s))}return n.join(\"\")},parse:function(p){var n=p.length;var q=[];for(var o=0;o<n;o++){q[o>>>2]|=(p.charCodeAt(o)&255)<<(24-(o%4)*8)}return new l.init(q,n)}};var c=m.Utf8={stringify:function(n){try{return decodeURIComponent(escape(d.stringify(n)))}catch(o){throw new Error(\"Malformed UTF-8 data\")}},parse:function(n){return d.parse(unescape(encodeURIComponent(n)))}};var i=b.BufferedBlockAlgorithm=j.extend({reset:function(){this._data=new l.init();this._nDataBytes=0},_append:function(n){if(typeof n==\"string\"){n=c.parse(n)}this._data.concat(n);this._nDataBytes+=n.sigBytes},_process:function(w){var q=this._data;var x=q.words;var n=q.sigBytes;var t=this.blockSize;var v=t*4;var u=n/v;if(w){u=e.ceil(u)}else{u=e.max((u|0)-this._minBufferSize,0)}var s=u*t;var r=e.min(s*4,n);if(s){for(var p=0;p<s;p+=t){this._doProcessBlock(x,p)}var o=x.splice(0,s);q.sigBytes-=r}return new l.init(o,r)},clone:function(){var n=j.clone.call(this);n._data=this._data.clone();return n},_minBufferSize:0});var f=b.Hasher=i.extend({cfg:j.extend(),init:function(n){this.cfg=this.cfg.extend(n);this.reset()},reset:function(){i.reset.call(this);this._doReset()},update:function(n){this._append(n);this._process();return this},finalize:function(n){if(n){this._append(n)}var o=this._doFinalize();return o},blockSize:512/32,_createHelper:function(n){return function(p,o){return new n.init(o).finalize(p)}},_createHmacHelper:function(n){return function(p,o){return new k.HMAC.init(n,o).finalize(p)}}});var k=a.algo={};return a}(Math));\n\t/*\n\tCryptoJS v3.1.2 x64-core-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(g){var a=CryptoJS,f=a.lib,e=f.Base,h=f.WordArray,a=a.x64={};a.Word=e.extend({init:function(b,c){this.high=b;this.low=c}});a.WordArray=e.extend({init:function(b,c){b=this.words=b||[];this.sigBytes=c!=g?c:8*b.length},toX32:function(){for(var b=this.words,c=b.length,a=[],d=0;d<c;d++){var e=b[d];a.push(e.high);a.push(e.low)}return h.create(a,this.sigBytes)},clone:function(){for(var b=e.clone.call(this),c=b.words=this.words.slice(0),a=c.length,d=0;d<a;d++)c[d]=c[d].clone();return b}})})();\n\t\n\t/*\n\tCryptoJS v3.1.2 cipher-core-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\tCryptoJS.lib.Cipher||function(u){var g=CryptoJS,f=g.lib,k=f.Base,l=f.WordArray,q=f.BufferedBlockAlgorithm,r=g.enc.Base64,v=g.algo.EvpKDF,n=f.Cipher=q.extend({cfg:k.extend(),createEncryptor:function(a,b){return this.create(this._ENC_XFORM_MODE,a,b)},createDecryptor:function(a,b){return this.create(this._DEC_XFORM_MODE,a,b)},init:function(a,b,c){this.cfg=this.cfg.extend(c);this._xformMode=a;this._key=b;this.reset()},reset:function(){q.reset.call(this);this._doReset()},process:function(a){this._append(a);\n\treturn this._process()},finalize:function(a){a&&this._append(a);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(a){return{encrypt:function(b,c,d){return(\"string\"==typeof c?s:j).encrypt(a,b,c,d)},decrypt:function(b,c,d){return(\"string\"==typeof c?s:j).decrypt(a,b,c,d)}}}});f.StreamCipher=n.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var m=g.mode={},t=function(a,b,c){var d=this._iv;d?this._iv=u:d=this._prevBlock;for(var e=\n\t0;e<c;e++)a[b+e]^=d[e]},h=(f.BlockCipherMode=k.extend({createEncryptor:function(a,b){return this.Encryptor.create(a,b)},createDecryptor:function(a,b){return this.Decryptor.create(a,b)},init:function(a,b){this._cipher=a;this._iv=b}})).extend();h.Encryptor=h.extend({processBlock:function(a,b){var c=this._cipher,d=c.blockSize;t.call(this,a,b,d);c.encryptBlock(a,b);this._prevBlock=a.slice(b,b+d)}});h.Decryptor=h.extend({processBlock:function(a,b){var c=this._cipher,d=c.blockSize,e=a.slice(b,b+d);c.decryptBlock(a,\n\tb);t.call(this,a,b,d);this._prevBlock=e}});m=m.CBC=h;h=(g.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,e=[],f=0;f<c;f+=4)e.push(d);c=l.create(e,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};f.BlockCipher=n.extend({cfg:n.cfg.extend({mode:m,padding:h}),reset:function(){n.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;\n\tthis._mode=c.call(a,this,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var p=f.CipherParams=k.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),m=(g.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;\n\treturn(a?l.create([1398893684,1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=l.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return p.create({ciphertext:a,salt:c})}},j=f.SerializableCipher=k.extend({cfg:k.extend({format:m}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var e=a.createEncryptor(c,d);b=e.finalize(b);e=e.cfg;return p.create({ciphertext:b,key:c,iv:e.iv,algorithm:a,mode:e.mode,padding:e.padding,\n\tblockSize:a.blockSize,formatter:d.format})},decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return\"string\"==typeof a?b.parse(a,this):a}}),g=(g.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=l.random(8));a=v.create({keySize:b+c}).compute(a,d);c=l.create(a.words.slice(b),4*c);a.sigBytes=4*b;return p.create({key:a,iv:c,salt:d})}},s=f.PasswordBasedCipher=j.extend({cfg:j.cfg.extend({kdf:g}),encrypt:function(a,\n\tb,c,d){d=this.cfg.extend(d);c=d.kdf.execute(c,a.keySize,a.ivSize);d.iv=c.iv;a=j.encrypt.call(this,a,b,c.key,d);a.mixIn(c);return a},decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);c=d.kdf.execute(c,a.keySize,a.ivSize,b.salt);d.iv=c.iv;return j.decrypt.call(this,a,b,c.key,d)}})}();\n\t\n\t/*\n\tCryptoJS v3.1.2 aes-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(){for(var q=CryptoJS,x=q.lib.BlockCipher,r=q.algo,j=[],y=[],z=[],A=[],B=[],C=[],s=[],u=[],v=[],w=[],g=[],k=0;256>k;k++)g[k]=128>k?k<<1:k<<1^283;for(var n=0,l=0,k=0;256>k;k++){var f=l^l<<1^l<<2^l<<3^l<<4,f=f>>>8^f&255^99;j[n]=f;y[f]=n;var t=g[n],D=g[t],E=g[D],b=257*g[f]^16843008*f;z[n]=b<<24|b>>>8;A[n]=b<<16|b>>>16;B[n]=b<<8|b>>>24;C[n]=b;b=16843009*E^65537*D^257*t^16843008*n;s[f]=b<<24|b>>>8;u[f]=b<<16|b>>>16;v[f]=b<<8|b>>>24;w[f]=b;n?(n=t^g[g[g[E^t]]],l^=g[g[l]]):n=l=1}var F=[0,1,2,4,8,\n\t16,32,64,128,27,54],r=r.AES=x.extend({_doReset:function(){for(var c=this._key,e=c.words,a=c.sigBytes/4,c=4*((this._nRounds=a+6)+1),b=this._keySchedule=[],h=0;h<c;h++)if(h<a)b[h]=e[h];else{var d=b[h-1];h%a?6<a&&4==h%a&&(d=j[d>>>24]<<24|j[d>>>16&255]<<16|j[d>>>8&255]<<8|j[d&255]):(d=d<<8|d>>>24,d=j[d>>>24]<<24|j[d>>>16&255]<<16|j[d>>>8&255]<<8|j[d&255],d^=F[h/a|0]<<24);b[h]=b[h-a]^d}e=this._invKeySchedule=[];for(a=0;a<c;a++)h=c-a,d=a%4?b[h]:b[h-4],e[a]=4>a||4>=h?d:s[j[d>>>24]]^u[j[d>>>16&255]]^v[j[d>>>\n\t8&255]]^w[j[d&255]]},encryptBlock:function(c,e){this._doCryptBlock(c,e,this._keySchedule,z,A,B,C,j)},decryptBlock:function(c,e){var a=c[e+1];c[e+1]=c[e+3];c[e+3]=a;this._doCryptBlock(c,e,this._invKeySchedule,s,u,v,w,y);a=c[e+1];c[e+1]=c[e+3];c[e+3]=a},_doCryptBlock:function(c,e,a,b,h,d,j,m){for(var n=this._nRounds,f=c[e]^a[0],g=c[e+1]^a[1],k=c[e+2]^a[2],p=c[e+3]^a[3],l=4,t=1;t<n;t++)var q=b[f>>>24]^h[g>>>16&255]^d[k>>>8&255]^j[p&255]^a[l++],r=b[g>>>24]^h[k>>>16&255]^d[p>>>8&255]^j[f&255]^a[l++],s=\n\tb[k>>>24]^h[p>>>16&255]^d[f>>>8&255]^j[g&255]^a[l++],p=b[p>>>24]^h[f>>>16&255]^d[g>>>8&255]^j[k&255]^a[l++],f=q,g=r,k=s;q=(m[f>>>24]<<24|m[g>>>16&255]<<16|m[k>>>8&255]<<8|m[p&255])^a[l++];r=(m[g>>>24]<<24|m[k>>>16&255]<<16|m[p>>>8&255]<<8|m[f&255])^a[l++];s=(m[k>>>24]<<24|m[p>>>16&255]<<16|m[f>>>8&255]<<8|m[g&255])^a[l++];p=(m[p>>>24]<<24|m[f>>>16&255]<<16|m[g>>>8&255]<<8|m[k&255])^a[l++];c[e]=q;c[e+1]=r;c[e+2]=s;c[e+3]=p},keySize:8});q.AES=x._createHelper(r)})();\n\t\n\t/*\n\tCryptoJS v3.1.2 tripledes-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(){function j(b,c){var a=(this._lBlock>>>b^this._rBlock)&c;this._rBlock^=a;this._lBlock^=a<<b}function l(b,c){var a=(this._rBlock>>>b^this._lBlock)&c;this._lBlock^=a;this._rBlock^=a<<b}var h=CryptoJS,e=h.lib,n=e.WordArray,e=e.BlockCipher,g=h.algo,q=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],p=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,\n\t55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],r=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],s=[{\"0\":8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,\n\t2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,\n\t1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{\"0\":1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,\n\t75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,\n\t276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{\"0\":260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,\n\t14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,\n\t17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{\"0\":2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,\n\t98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,\n\t1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{\"0\":128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,\n\t10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,\n\t83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{\"0\":268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,\n\t2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{\"0\":1048576,\n\t16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,\n\t496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{\"0\":134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,\n\t2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,\n\t2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],t=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],m=g.DES=e.extend({_doReset:function(){for(var b=this._key.words,c=[],a=0;56>a;a++){var f=q[a]-1;c[a]=b[f>>>5]>>>31-f%32&1}b=this._subKeys=[];for(f=0;16>f;f++){for(var d=b[f]=[],e=r[f],a=0;24>a;a++)d[a/6|0]|=c[(p[a]-1+e)%28]<<31-a%6,d[4+(a/6|0)]|=c[28+(p[a+24]-1+e)%28]<<31-a%6;d[0]=d[0]<<1|d[0]>>>31;for(a=1;7>a;a++)d[a]>>>=\n\t4*(a-1)+3;d[7]=d[7]<<5|d[7]>>>27}c=this._invSubKeys=[];for(a=0;16>a;a++)c[a]=b[15-a]},encryptBlock:function(b,c){this._doCryptBlock(b,c,this._subKeys)},decryptBlock:function(b,c){this._doCryptBlock(b,c,this._invSubKeys)},_doCryptBlock:function(b,c,a){this._lBlock=b[c];this._rBlock=b[c+1];j.call(this,4,252645135);j.call(this,16,65535);l.call(this,2,858993459);l.call(this,8,16711935);j.call(this,1,1431655765);for(var f=0;16>f;f++){for(var d=a[f],e=this._lBlock,h=this._rBlock,g=0,k=0;8>k;k++)g|=s[k][((h^\n\td[k])&t[k])>>>0];this._lBlock=h;this._rBlock=e^g}a=this._lBlock;this._lBlock=this._rBlock;this._rBlock=a;j.call(this,1,1431655765);l.call(this,8,16711935);l.call(this,2,858993459);j.call(this,16,65535);j.call(this,4,252645135);b[c]=this._lBlock;b[c+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});h.DES=e._createHelper(m);g=g.TripleDES=e.extend({_doReset:function(){var b=this._key.words;this._des1=m.createEncryptor(n.create(b.slice(0,2)));this._des2=m.createEncryptor(n.create(b.slice(2,4)));this._des3=\n\tm.createEncryptor(n.create(b.slice(4,6)))},encryptBlock:function(b,c){this._des1.encryptBlock(b,c);this._des2.decryptBlock(b,c);this._des3.encryptBlock(b,c)},decryptBlock:function(b,c){this._des3.decryptBlock(b,c);this._des2.encryptBlock(b,c);this._des1.decryptBlock(b,c)},keySize:6,ivSize:2,blockSize:2});h.TripleDES=e._createHelper(g)})();\n\t\n\t/*\n\tCryptoJS v3.1.2 enc-base64-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(){var h=CryptoJS,j=h.lib.WordArray;h.enc.Base64={stringify:function(b){var e=b.words,f=b.sigBytes,c=this._map;b.clamp();b=[];for(var a=0;a<f;a+=3)for(var d=(e[a>>>2]>>>24-8*(a%4)&255)<<16|(e[a+1>>>2]>>>24-8*((a+1)%4)&255)<<8|e[a+2>>>2]>>>24-8*((a+2)%4)&255,g=0;4>g&&a+0.75*g<f;g++)b.push(c.charAt(d>>>6*(3-g)&63));if(e=c.charAt(64))for(;b.length%4;)b.push(e);return b.join(\"\")},parse:function(b){var e=b.length,f=this._map,c=f.charAt(64);c&&(c=b.indexOf(c),-1!=c&&(e=c));for(var c=[],a=0,d=0;d<\n\te;d++)if(d%4){var g=f.indexOf(b.charAt(d-1))<<2*(d%4),h=f.indexOf(b.charAt(d))>>>6-2*(d%4);c[a>>>2]|=(g|h)<<24-8*(a%4);a++}return j.create(c,a)},_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"}})();\n\t\n\t/*\n\tCryptoJS v3.1.2 md5-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(E){function h(a,f,g,j,p,h,k){a=a+(f&g|~f&j)+p+k;return(a<<h|a>>>32-h)+f}function k(a,f,g,j,p,h,k){a=a+(f&j|g&~j)+p+k;return(a<<h|a>>>32-h)+f}function l(a,f,g,j,h,k,l){a=a+(f^g^j)+h+l;return(a<<k|a>>>32-k)+f}function n(a,f,g,j,h,k,l){a=a+(g^(f|~j))+h+l;return(a<<k|a>>>32-k)+f}for(var r=CryptoJS,q=r.lib,F=q.WordArray,s=q.Hasher,q=r.algo,a=[],t=0;64>t;t++)a[t]=4294967296*E.abs(E.sin(t+1))|0;q=q.MD5=s.extend({_doReset:function(){this._hash=new F.init([1732584193,4023233417,2562383102,271733878])},\n\t_doProcessBlock:function(m,f){for(var g=0;16>g;g++){var j=f+g,p=m[j];m[j]=(p<<8|p>>>24)&16711935|(p<<24|p>>>8)&4278255360}var g=this._hash.words,j=m[f+0],p=m[f+1],q=m[f+2],r=m[f+3],s=m[f+4],t=m[f+5],u=m[f+6],v=m[f+7],w=m[f+8],x=m[f+9],y=m[f+10],z=m[f+11],A=m[f+12],B=m[f+13],C=m[f+14],D=m[f+15],b=g[0],c=g[1],d=g[2],e=g[3],b=h(b,c,d,e,j,7,a[0]),e=h(e,b,c,d,p,12,a[1]),d=h(d,e,b,c,q,17,a[2]),c=h(c,d,e,b,r,22,a[3]),b=h(b,c,d,e,s,7,a[4]),e=h(e,b,c,d,t,12,a[5]),d=h(d,e,b,c,u,17,a[6]),c=h(c,d,e,b,v,22,a[7]),\n\tb=h(b,c,d,e,w,7,a[8]),e=h(e,b,c,d,x,12,a[9]),d=h(d,e,b,c,y,17,a[10]),c=h(c,d,e,b,z,22,a[11]),b=h(b,c,d,e,A,7,a[12]),e=h(e,b,c,d,B,12,a[13]),d=h(d,e,b,c,C,17,a[14]),c=h(c,d,e,b,D,22,a[15]),b=k(b,c,d,e,p,5,a[16]),e=k(e,b,c,d,u,9,a[17]),d=k(d,e,b,c,z,14,a[18]),c=k(c,d,e,b,j,20,a[19]),b=k(b,c,d,e,t,5,a[20]),e=k(e,b,c,d,y,9,a[21]),d=k(d,e,b,c,D,14,a[22]),c=k(c,d,e,b,s,20,a[23]),b=k(b,c,d,e,x,5,a[24]),e=k(e,b,c,d,C,9,a[25]),d=k(d,e,b,c,r,14,a[26]),c=k(c,d,e,b,w,20,a[27]),b=k(b,c,d,e,B,5,a[28]),e=k(e,b,\n\tc,d,q,9,a[29]),d=k(d,e,b,c,v,14,a[30]),c=k(c,d,e,b,A,20,a[31]),b=l(b,c,d,e,t,4,a[32]),e=l(e,b,c,d,w,11,a[33]),d=l(d,e,b,c,z,16,a[34]),c=l(c,d,e,b,C,23,a[35]),b=l(b,c,d,e,p,4,a[36]),e=l(e,b,c,d,s,11,a[37]),d=l(d,e,b,c,v,16,a[38]),c=l(c,d,e,b,y,23,a[39]),b=l(b,c,d,e,B,4,a[40]),e=l(e,b,c,d,j,11,a[41]),d=l(d,e,b,c,r,16,a[42]),c=l(c,d,e,b,u,23,a[43]),b=l(b,c,d,e,x,4,a[44]),e=l(e,b,c,d,A,11,a[45]),d=l(d,e,b,c,D,16,a[46]),c=l(c,d,e,b,q,23,a[47]),b=n(b,c,d,e,j,6,a[48]),e=n(e,b,c,d,v,10,a[49]),d=n(d,e,b,c,\n\tC,15,a[50]),c=n(c,d,e,b,t,21,a[51]),b=n(b,c,d,e,A,6,a[52]),e=n(e,b,c,d,r,10,a[53]),d=n(d,e,b,c,y,15,a[54]),c=n(c,d,e,b,p,21,a[55]),b=n(b,c,d,e,w,6,a[56]),e=n(e,b,c,d,D,10,a[57]),d=n(d,e,b,c,u,15,a[58]),c=n(c,d,e,b,B,21,a[59]),b=n(b,c,d,e,s,6,a[60]),e=n(e,b,c,d,z,10,a[61]),d=n(d,e,b,c,q,15,a[62]),c=n(c,d,e,b,x,21,a[63]);g[0]=g[0]+b|0;g[1]=g[1]+c|0;g[2]=g[2]+d|0;g[3]=g[3]+e|0},_doFinalize:function(){var a=this._data,f=a.words,g=8*this._nDataBytes,j=8*a.sigBytes;f[j>>>5]|=128<<24-j%32;var h=E.floor(g/\n\t4294967296);f[(j+64>>>9<<4)+15]=(h<<8|h>>>24)&16711935|(h<<24|h>>>8)&4278255360;f[(j+64>>>9<<4)+14]=(g<<8|g>>>24)&16711935|(g<<24|g>>>8)&4278255360;a.sigBytes=4*(f.length+1);this._process();a=this._hash;f=a.words;for(g=0;4>g;g++)j=f[g],f[g]=(j<<8|j>>>24)&16711935|(j<<24|j>>>8)&4278255360;return a},clone:function(){var a=s.clone.call(this);a._hash=this._hash.clone();return a}});r.MD5=s._createHelper(q);r.HmacMD5=s._createHmacHelper(q)})(Math);\n\t\n\t/*\n\tCryptoJS v3.1.2 sha1-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(){var k=CryptoJS,b=k.lib,m=b.WordArray,l=b.Hasher,d=[],b=k.algo.SHA1=l.extend({_doReset:function(){this._hash=new m.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(n,p){for(var a=this._hash.words,e=a[0],f=a[1],h=a[2],j=a[3],b=a[4],c=0;80>c;c++){if(16>c)d[c]=n[p+c]|0;else{var g=d[c-3]^d[c-8]^d[c-14]^d[c-16];d[c]=g<<1|g>>>31}g=(e<<5|e>>>27)+b+d[c];g=20>c?g+((f&h|~f&j)+1518500249):40>c?g+((f^h^j)+1859775393):60>c?g+((f&h|f&j|h&j)-1894007588):g+((f^h^\n\tj)-899497514);b=j;j=h;h=f<<30|f>>>2;f=e;e=g}a[0]=a[0]+e|0;a[1]=a[1]+f|0;a[2]=a[2]+h|0;a[3]=a[3]+j|0;a[4]=a[4]+b|0},_doFinalize:function(){var b=this._data,d=b.words,a=8*this._nDataBytes,e=8*b.sigBytes;d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=Math.floor(a/4294967296);d[(e+64>>>9<<4)+15]=a;b.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var b=l.clone.call(this);b._hash=this._hash.clone();return b}});k.SHA1=l._createHelper(b);k.HmacSHA1=l._createHmacHelper(b)})();\n\t\n\t/*\n\tCryptoJS v3.1.2 sha256-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(k){for(var g=CryptoJS,h=g.lib,v=h.WordArray,j=h.Hasher,h=g.algo,s=[],t=[],u=function(q){return 4294967296*(q-(q|0))|0},l=2,b=0;64>b;){var d;a:{d=l;for(var w=k.sqrt(d),r=2;r<=w;r++)if(!(d%r)){d=!1;break a}d=!0}d&&(8>b&&(s[b]=u(k.pow(l,0.5))),t[b]=u(k.pow(l,1/3)),b++);l++}var n=[],h=h.SHA256=j.extend({_doReset:function(){this._hash=new v.init(s.slice(0))},_doProcessBlock:function(q,h){for(var a=this._hash.words,c=a[0],d=a[1],b=a[2],k=a[3],f=a[4],g=a[5],j=a[6],l=a[7],e=0;64>e;e++){if(16>e)n[e]=\n\tq[h+e]|0;else{var m=n[e-15],p=n[e-2];n[e]=((m<<25|m>>>7)^(m<<14|m>>>18)^m>>>3)+n[e-7]+((p<<15|p>>>17)^(p<<13|p>>>19)^p>>>10)+n[e-16]}m=l+((f<<26|f>>>6)^(f<<21|f>>>11)^(f<<7|f>>>25))+(f&g^~f&j)+t[e]+n[e];p=((c<<30|c>>>2)^(c<<19|c>>>13)^(c<<10|c>>>22))+(c&d^c&b^d&b);l=j;j=g;g=f;f=k+m|0;k=b;b=d;d=c;c=m+p|0}a[0]=a[0]+c|0;a[1]=a[1]+d|0;a[2]=a[2]+b|0;a[3]=a[3]+k|0;a[4]=a[4]+f|0;a[5]=a[5]+g|0;a[6]=a[6]+j|0;a[7]=a[7]+l|0},_doFinalize:function(){var d=this._data,b=d.words,a=8*this._nDataBytes,c=8*d.sigBytes;\n\tb[c>>>5]|=128<<24-c%32;b[(c+64>>>9<<4)+14]=k.floor(a/4294967296);b[(c+64>>>9<<4)+15]=a;d.sigBytes=4*b.length;this._process();return this._hash},clone:function(){var b=j.clone.call(this);b._hash=this._hash.clone();return b}});g.SHA256=j._createHelper(h);g.HmacSHA256=j._createHmacHelper(h)})(Math);\n\t\n\t/*\n\tCryptoJS v3.1.2 sha224-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(){var b=CryptoJS,d=b.lib.WordArray,a=b.algo,c=a.SHA256,a=a.SHA224=c.extend({_doReset:function(){this._hash=new d.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var a=c._doFinalize.call(this);a.sigBytes-=4;return a}});b.SHA224=c._createHelper(a);b.HmacSHA224=c._createHmacHelper(a)})();\n\t\n\t/*\n\tCryptoJS v3.1.2 sha512-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(){function a(){return d.create.apply(d,arguments)}for(var n=CryptoJS,r=n.lib.Hasher,e=n.x64,d=e.Word,T=e.WordArray,e=n.algo,ea=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),\n\ta(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,\n\t2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),\n\ta(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,\n\t3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],v=[],w=0;80>w;w++)v[w]=a();e=e.SHA512=r.extend({_doReset:function(){this._hash=new T.init([new d.init(1779033703,4089235720),new d.init(3144134277,2227873595),new d.init(1013904242,4271175723),new d.init(2773480762,1595750129),new d.init(1359893119,2917565137),new d.init(2600822924,725511199),new d.init(528734635,4215389547),new d.init(1541459225,327033209)])},_doProcessBlock:function(a,d){for(var f=this._hash.words,\n\tF=f[0],e=f[1],n=f[2],r=f[3],G=f[4],H=f[5],I=f[6],f=f[7],w=F.high,J=F.low,X=e.high,K=e.low,Y=n.high,L=n.low,Z=r.high,M=r.low,$=G.high,N=G.low,aa=H.high,O=H.low,ba=I.high,P=I.low,ca=f.high,Q=f.low,k=w,g=J,z=X,x=K,A=Y,y=L,U=Z,B=M,l=$,h=N,R=aa,C=O,S=ba,D=P,V=ca,E=Q,m=0;80>m;m++){var s=v[m];if(16>m)var j=s.high=a[d+2*m]|0,b=s.low=a[d+2*m+1]|0;else{var j=v[m-15],b=j.high,p=j.low,j=(b>>>1|p<<31)^(b>>>8|p<<24)^b>>>7,p=(p>>>1|b<<31)^(p>>>8|b<<24)^(p>>>7|b<<25),u=v[m-2],b=u.high,c=u.low,u=(b>>>19|c<<13)^(b<<\n\t3|c>>>29)^b>>>6,c=(c>>>19|b<<13)^(c<<3|b>>>29)^(c>>>6|b<<26),b=v[m-7],W=b.high,t=v[m-16],q=t.high,t=t.low,b=p+b.low,j=j+W+(b>>>0<p>>>0?1:0),b=b+c,j=j+u+(b>>>0<c>>>0?1:0),b=b+t,j=j+q+(b>>>0<t>>>0?1:0);s.high=j;s.low=b}var W=l&R^~l&S,t=h&C^~h&D,s=k&z^k&A^z&A,T=g&x^g&y^x&y,p=(k>>>28|g<<4)^(k<<30|g>>>2)^(k<<25|g>>>7),u=(g>>>28|k<<4)^(g<<30|k>>>2)^(g<<25|k>>>7),c=ea[m],fa=c.high,da=c.low,c=E+((h>>>14|l<<18)^(h>>>18|l<<14)^(h<<23|l>>>9)),q=V+((l>>>14|h<<18)^(l>>>18|h<<14)^(l<<23|h>>>9))+(c>>>0<E>>>0?1:\n\t0),c=c+t,q=q+W+(c>>>0<t>>>0?1:0),c=c+da,q=q+fa+(c>>>0<da>>>0?1:0),c=c+b,q=q+j+(c>>>0<b>>>0?1:0),b=u+T,s=p+s+(b>>>0<u>>>0?1:0),V=S,E=D,S=R,D=C,R=l,C=h,h=B+c|0,l=U+q+(h>>>0<B>>>0?1:0)|0,U=A,B=y,A=z,y=x,z=k,x=g,g=c+b|0,k=q+s+(g>>>0<c>>>0?1:0)|0}J=F.low=J+g;F.high=w+k+(J>>>0<g>>>0?1:0);K=e.low=K+x;e.high=X+z+(K>>>0<x>>>0?1:0);L=n.low=L+y;n.high=Y+A+(L>>>0<y>>>0?1:0);M=r.low=M+B;r.high=Z+U+(M>>>0<B>>>0?1:0);N=G.low=N+h;G.high=$+l+(N>>>0<h>>>0?1:0);O=H.low=O+C;H.high=aa+R+(O>>>0<C>>>0?1:0);P=I.low=P+D;\n\tI.high=ba+S+(P>>>0<D>>>0?1:0);Q=f.low=Q+E;f.high=ca+V+(Q>>>0<E>>>0?1:0)},_doFinalize:function(){var a=this._data,d=a.words,f=8*this._nDataBytes,e=8*a.sigBytes;d[e>>>5]|=128<<24-e%32;d[(e+128>>>10<<5)+30]=Math.floor(f/4294967296);d[(e+128>>>10<<5)+31]=f;a.sigBytes=4*d.length;this._process();return this._hash.toX32()},clone:function(){var a=r.clone.call(this);a._hash=this._hash.clone();return a},blockSize:32});n.SHA512=r._createHelper(e);n.HmacSHA512=r._createHmacHelper(e)})();\n\t\n\t/*\n\tCryptoJS v3.1.2 sha384-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(){var c=CryptoJS,a=c.x64,b=a.Word,e=a.WordArray,a=c.algo,d=a.SHA512,a=a.SHA384=d.extend({_doReset:function(){this._hash=new e.init([new b.init(3418070365,3238371032),new b.init(1654270250,914150663),new b.init(2438529370,812702999),new b.init(355462360,4144912697),new b.init(1731405415,4290775857),new b.init(2394180231,1750603025),new b.init(3675008525,1694076839),new b.init(1203062813,3204075428)])},_doFinalize:function(){var a=d._doFinalize.call(this);a.sigBytes-=16;return a}});c.SHA384=\n\td._createHelper(a);c.HmacSHA384=d._createHmacHelper(a)})();\n\t\n\t/*\n\tCryptoJS v3.1.2 ripemd160-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t/*\n\t\n\t(c) 2012 by Cedric Mesnil. All rights reserved.\n\t\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\t\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\t\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\t(function(){var q=CryptoJS,d=q.lib,n=d.WordArray,p=d.Hasher,d=q.algo,x=n.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),y=n.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),z=n.create([11,14,15,12,\n\t5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),A=n.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),B=n.create([0,1518500249,1859775393,2400959708,2840853838]),C=n.create([1352829926,1548603684,1836072691,\n\t2053994217,0]),d=d.RIPEMD160=p.extend({_doReset:function(){this._hash=n.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,v){for(var b=0;16>b;b++){var c=v+b,f=e[c];e[c]=(f<<8|f>>>24)&16711935|(f<<24|f>>>8)&4278255360}var c=this._hash.words,f=B.words,d=C.words,n=x.words,q=y.words,p=z.words,w=A.words,t,g,h,j,r,u,k,l,m,s;u=t=c[0];k=g=c[1];l=h=c[2];m=j=c[3];s=r=c[4];for(var a,b=0;80>b;b+=1)a=t+e[v+n[b]]|0,a=16>b?a+((g^h^j)+f[0]):32>b?a+((g&h|~g&j)+f[1]):48>b?\n\ta+(((g|~h)^j)+f[2]):64>b?a+((g&j|h&~j)+f[3]):a+((g^(h|~j))+f[4]),a|=0,a=a<<p[b]|a>>>32-p[b],a=a+r|0,t=r,r=j,j=h<<10|h>>>22,h=g,g=a,a=u+e[v+q[b]]|0,a=16>b?a+((k^(l|~m))+d[0]):32>b?a+((k&m|l&~m)+d[1]):48>b?a+(((k|~l)^m)+d[2]):64>b?a+((k&l|~k&m)+d[3]):a+((k^l^m)+d[4]),a|=0,a=a<<w[b]|a>>>32-w[b],a=a+s|0,u=s,s=m,m=l<<10|l>>>22,l=k,k=a;a=c[1]+h+m|0;c[1]=c[2]+j+s|0;c[2]=c[3]+r+u|0;c[3]=c[4]+t+k|0;c[4]=c[0]+g+l|0;c[0]=a},_doFinalize:function(){var e=this._data,d=e.words,b=8*this._nDataBytes,c=8*e.sigBytes;\n\td[c>>>5]|=128<<24-c%32;d[(c+64>>>9<<4)+14]=(b<<8|b>>>24)&16711935|(b<<24|b>>>8)&4278255360;e.sigBytes=4*(d.length+1);this._process();e=this._hash;d=e.words;for(b=0;5>b;b++)c=d[b],d[b]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return e},clone:function(){var d=p.clone.call(this);d._hash=this._hash.clone();return d}});q.RIPEMD160=p._createHelper(d);q.HmacRIPEMD160=p._createHmacHelper(d)})(Math);\n\t\n\t/*\n\tCryptoJS v3.1.2 hmac-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(){var c=CryptoJS,k=c.enc.Utf8;c.algo.HMAC=c.lib.Base.extend({init:function(a,b){a=this._hasher=new a.init;\"string\"==typeof b&&(b=k.parse(b));var c=a.blockSize,e=4*c;b.sigBytes>e&&(b=a.finalize(b));b.clamp();for(var f=this._oKey=b.clone(),g=this._iKey=b.clone(),h=f.words,j=g.words,d=0;d<c;d++)h[d]^=1549556828,j[d]^=909522486;f.sigBytes=g.sigBytes=e;this.reset()},reset:function(){var a=this._hasher;a.reset();a.update(this._iKey)},update:function(a){this._hasher.update(a);return this},finalize:function(a){var b=\n\tthis._hasher;a=b.finalize(a);b.reset();return b.finalize(this._oKey.clone().concat(a))}})})();\n\t\n\t/*\n\tCryptoJS v3.1.2 pbkdf2-min.js\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t(function(){var b=CryptoJS,a=b.lib,d=a.Base,m=a.WordArray,a=b.algo,q=a.HMAC,l=a.PBKDF2=d.extend({cfg:d.extend({keySize:4,hasher:a.SHA1,iterations:1}),init:function(a){this.cfg=this.cfg.extend(a)},compute:function(a,b){for(var c=this.cfg,f=q.create(c.hasher,a),g=m.create(),d=m.create([1]),l=g.words,r=d.words,n=c.keySize,c=c.iterations;l.length<n;){var h=f.update(b).finalize(d);f.reset();for(var j=h.words,s=j.length,k=h,p=1;p<c;p++){k=f.finalize(k);f.reset();for(var t=k.words,e=0;e<s;e++)j[e]^=t[e]}g.concat(h);\n\tr[0]++}g.sigBytes=4*n;return g}});b.PBKDF2=function(a,b,c){return l.create(c).compute(a,b)}})();\n\t\n\t/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t */\n\tvar b64map=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";var b64pad=\"=\";function hex2b64(d){var b;var e;var a=\"\";for(b=0;b+3<=d.length;b+=3){e=parseInt(d.substring(b,b+3),16);a+=b64map.charAt(e>>6)+b64map.charAt(e&63)}if(b+1==d.length){e=parseInt(d.substring(b,b+1),16);a+=b64map.charAt(e<<2)}else{if(b+2==d.length){e=parseInt(d.substring(b,b+2),16);a+=b64map.charAt(e>>2)+b64map.charAt((e&3)<<4)}}if(b64pad){while((a.length&3)>0){a+=b64pad}}return a}function b64tohex(f){var d=\"\";var e;var b=0;var c;var a;for(e=0;e<f.length;++e){if(f.charAt(e)==b64pad){break}a=b64map.indexOf(f.charAt(e));if(a<0){continue}if(b==0){d+=int2char(a>>2);c=a&3;b=1}else{if(b==1){d+=int2char((c<<2)|(a>>4));c=a&15;b=2}else{if(b==2){d+=int2char(c);d+=int2char(a>>2);c=a&3;b=3}else{d+=int2char((c<<2)|(a>>4));d+=int2char(a&15);b=0}}}}if(b==1){d+=int2char(c<<2)}return d}function b64toBA(e){var d=b64tohex(e);var c;var b=new Array();for(c=0;2*c<d.length;++c){b[c]=parseInt(d.substring(2*c,2*c+2),16)}return b};\n\t/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t */\n\tvar dbits;var canary=244837814094590;var j_lm=((canary&16777215)==15715070);function BigInteger(e,d,f){if(e!=null){if(\"number\"==typeof e){this.fromNumber(e,d,f)}else{if(d==null&&\"string\"!=typeof e){this.fromString(e,256)}else{this.fromString(e,d)}}}}function nbi(){return new BigInteger(null)}function am1(f,a,b,e,h,g){while(--g>=0){var d=a*this[f++]+b[e]+h;h=Math.floor(d/67108864);b[e++]=d&67108863}return h}function am2(f,q,r,e,o,a){var k=q&32767,p=q>>15;while(--a>=0){var d=this[f]&32767;var g=this[f++]>>15;var b=p*d+g*k;d=k*d+((b&32767)<<15)+r[e]+(o&1073741823);o=(d>>>30)+(b>>>15)+p*g+(o>>>30);r[e++]=d&1073741823}return o}function am3(f,q,r,e,o,a){var k=q&16383,p=q>>14;while(--a>=0){var d=this[f]&16383;var g=this[f++]>>14;var b=p*d+g*k;d=k*d+((b&16383)<<14)+r[e]+o;o=(d>>28)+(b>>14)+p*g;r[e++]=d&268435455}return o}if(j_lm&&(navigator.appName==\"Microsoft Internet Explorer\")){BigInteger.prototype.am=am2;dbits=30}else{if(j_lm&&(navigator.appName!=\"Netscape\")){BigInteger.prototype.am=am1;dbits=26}else{BigInteger.prototype.am=am3;dbits=28}}BigInteger.prototype.DB=dbits;BigInteger.prototype.DM=((1<<dbits)-1);BigInteger.prototype.DV=(1<<dbits);var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP);BigInteger.prototype.F1=BI_FP-dbits;BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM=\"0123456789abcdefghijklmnopqrstuvwxyz\";var BI_RC=new Array();var rr,vv;rr=\"0\".charCodeAt(0);for(vv=0;vv<=9;++vv){BI_RC[rr++]=vv}rr=\"a\".charCodeAt(0);for(vv=10;vv<36;++vv){BI_RC[rr++]=vv}rr=\"A\".charCodeAt(0);for(vv=10;vv<36;++vv){BI_RC[rr++]=vv}function int2char(a){return BI_RM.charAt(a)}function intAt(b,a){var d=BI_RC[b.charCodeAt(a)];return(d==null)?-1:d}function bnpCopyTo(b){for(var a=this.t-1;a>=0;--a){b[a]=this[a]}b.t=this.t;b.s=this.s}function bnpFromInt(a){this.t=1;this.s=(a<0)?-1:0;if(a>0){this[0]=a}else{if(a<-1){this[0]=a+this.DV}else{this.t=0}}}function nbv(a){var b=nbi();b.fromInt(a);return b}function bnpFromString(h,c){var e;if(c==16){e=4}else{if(c==8){e=3}else{if(c==256){e=8}else{if(c==2){e=1}else{if(c==32){e=5}else{if(c==4){e=2}else{this.fromRadix(h,c);return}}}}}}this.t=0;this.s=0;var g=h.length,d=false,f=0;while(--g>=0){var a=(e==8)?h[g]&255:intAt(h,g);if(a<0){if(h.charAt(g)==\"-\"){d=true}continue}d=false;if(f==0){this[this.t++]=a}else{if(f+e>this.DB){this[this.t-1]|=(a&((1<<(this.DB-f))-1))<<f;this[this.t++]=(a>>(this.DB-f))}else{this[this.t-1]|=a<<f}}f+=e;if(f>=this.DB){f-=this.DB}}if(e==8&&(h[0]&128)!=0){this.s=-1;if(f>0){this[this.t-1]|=((1<<(this.DB-f))-1)<<f}}this.clamp();if(d){BigInteger.ZERO.subTo(this,this)}}function bnpClamp(){var a=this.s&this.DM;while(this.t>0&&this[this.t-1]==a){--this.t}}function bnToString(c){if(this.s<0){return\"-\"+this.negate().toString(c)}var e;if(c==16){e=4}else{if(c==8){e=3}else{if(c==2){e=1}else{if(c==32){e=5}else{if(c==4){e=2}else{return this.toRadix(c)}}}}}var g=(1<<e)-1,l,a=false,h=\"\",f=this.t;var j=this.DB-(f*this.DB)%e;if(f-->0){if(j<this.DB&&(l=this[f]>>j)>0){a=true;h=int2char(l)}while(f>=0){if(j<e){l=(this[f]&((1<<j)-1))<<(e-j);l|=this[--f]>>(j+=this.DB-e)}else{l=(this[f]>>(j-=e))&g;if(j<=0){j+=this.DB;--f}}if(l>0){a=true}if(a){h+=int2char(l)}}}return a?h:\"0\"}function bnNegate(){var a=nbi();BigInteger.ZERO.subTo(this,a);return a}function bnAbs(){return(this.s<0)?this.negate():this}function bnCompareTo(b){var d=this.s-b.s;if(d!=0){return d}var c=this.t;d=c-b.t;if(d!=0){return(this.s<0)?-d:d}while(--c>=0){if((d=this[c]-b[c])!=0){return d}}return 0}function nbits(a){var c=1,b;if((b=a>>>16)!=0){a=b;c+=16}if((b=a>>8)!=0){a=b;c+=8}if((b=a>>4)!=0){a=b;c+=4}if((b=a>>2)!=0){a=b;c+=2}if((b=a>>1)!=0){a=b;c+=1}return c}function bnBitLength(){if(this.t<=0){return 0}return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM))}function bnpDLShiftTo(c,b){var a;for(a=this.t-1;a>=0;--a){b[a+c]=this[a]}for(a=c-1;a>=0;--a){b[a]=0}b.t=this.t+c;b.s=this.s}function bnpDRShiftTo(c,b){for(var a=c;a<this.t;++a){b[a-c]=this[a]}b.t=Math.max(this.t-c,0);b.s=this.s}function bnpLShiftTo(j,e){var b=j%this.DB;var a=this.DB-b;var g=(1<<a)-1;var f=Math.floor(j/this.DB),h=(this.s<<b)&this.DM,d;for(d=this.t-1;d>=0;--d){e[d+f+1]=(this[d]>>a)|h;h=(this[d]&g)<<b}for(d=f-1;d>=0;--d){e[d]=0}e[f]=h;e.t=this.t+f+1;e.s=this.s;e.clamp()}function bnpRShiftTo(g,d){d.s=this.s;var e=Math.floor(g/this.DB);if(e>=this.t){d.t=0;return}var b=g%this.DB;var a=this.DB-b;var f=(1<<b)-1;d[0]=this[e]>>b;for(var c=e+1;c<this.t;++c){d[c-e-1]|=(this[c]&f)<<a;d[c-e]=this[c]>>b}if(b>0){d[this.t-e-1]|=(this.s&f)<<a}d.t=this.t-e;d.clamp()}function bnpSubTo(d,f){var e=0,g=0,b=Math.min(d.t,this.t);while(e<b){g+=this[e]-d[e];f[e++]=g&this.DM;g>>=this.DB}if(d.t<this.t){g-=d.s;while(e<this.t){g+=this[e];f[e++]=g&this.DM;g>>=this.DB}g+=this.s}else{g+=this.s;while(e<d.t){g-=d[e];f[e++]=g&this.DM;g>>=this.DB}g-=d.s}f.s=(g<0)?-1:0;if(g<-1){f[e++]=this.DV+g}else{if(g>0){f[e++]=g}}f.t=e;f.clamp()}function bnpMultiplyTo(c,e){var b=this.abs(),f=c.abs();var d=b.t;e.t=d+f.t;while(--d>=0){e[d]=0}for(d=0;d<f.t;++d){e[d+b.t]=b.am(0,f[d],e,d,0,b.t)}e.s=0;e.clamp();if(this.s!=c.s){BigInteger.ZERO.subTo(e,e)}}function bnpSquareTo(d){var a=this.abs();var b=d.t=2*a.t;while(--b>=0){d[b]=0}for(b=0;b<a.t-1;++b){var e=a.am(b,a[b],d,2*b,0,1);if((d[b+a.t]+=a.am(b+1,2*a[b],d,2*b+1,e,a.t-b-1))>=a.DV){d[b+a.t]-=a.DV;d[b+a.t+1]=1}}if(d.t>0){d[d.t-1]+=a.am(b,a[b],d,2*b,0,1)}d.s=0;d.clamp()}function bnpDivRemTo(n,h,g){var w=n.abs();if(w.t<=0){return}var k=this.abs();if(k.t<w.t){if(h!=null){h.fromInt(0)}if(g!=null){this.copyTo(g)}return}if(g==null){g=nbi()}var d=nbi(),a=this.s,l=n.s;var v=this.DB-nbits(w[w.t-1]);if(v>0){w.lShiftTo(v,d);k.lShiftTo(v,g)}else{w.copyTo(d);k.copyTo(g)}var p=d.t;var b=d[p-1];if(b==0){return}var o=b*(1<<this.F1)+((p>1)?d[p-2]>>this.F2:0);var A=this.FV/o,z=(1<<this.F1)/o,x=1<<this.F2;var u=g.t,s=u-p,f=(h==null)?nbi():h;d.dlShiftTo(s,f);if(g.compareTo(f)>=0){g[g.t++]=1;g.subTo(f,g)}BigInteger.ONE.dlShiftTo(p,f);f.subTo(d,d);while(d.t<p){d[d.t++]=0}while(--s>=0){var c=(g[--u]==b)?this.DM:Math.floor(g[u]*A+(g[u-1]+x)*z);if((g[u]+=d.am(0,c,g,s,0,p))<c){d.dlShiftTo(s,f);g.subTo(f,g);while(g[u]<--c){g.subTo(f,g)}}}if(h!=null){g.drShiftTo(p,h);if(a!=l){BigInteger.ZERO.subTo(h,h)}}g.t=p;g.clamp();if(v>0){g.rShiftTo(v,g)}if(a<0){BigInteger.ZERO.subTo(g,g)}}function bnMod(b){var c=nbi();this.abs().divRemTo(b,null,c);if(this.s<0&&c.compareTo(BigInteger.ZERO)>0){b.subTo(c,c)}return c}function Classic(a){this.m=a}function cConvert(a){if(a.s<0||a.compareTo(this.m)>=0){return a.mod(this.m)}else{return a}}function cRevert(a){return a}function cReduce(a){a.divRemTo(this.m,null,a)}function cMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}function cSqrTo(a,b){a.squareTo(b);this.reduce(b)}Classic.prototype.convert=cConvert;Classic.prototype.revert=cRevert;Classic.prototype.reduce=cReduce;Classic.prototype.mulTo=cMulTo;Classic.prototype.sqrTo=cSqrTo;function bnpInvDigit(){if(this.t<1){return 0}var a=this[0];if((a&1)==0){return 0}var b=a&3;b=(b*(2-(a&15)*b))&15;b=(b*(2-(a&255)*b))&255;b=(b*(2-(((a&65535)*b)&65535)))&65535;b=(b*(2-a*b%this.DV))%this.DV;return(b>0)?this.DV-b:-b}function Montgomery(a){this.m=a;this.mp=a.invDigit();this.mpl=this.mp&32767;this.mph=this.mp>>15;this.um=(1<<(a.DB-15))-1;this.mt2=2*a.t}function montConvert(a){var b=nbi();a.abs().dlShiftTo(this.m.t,b);b.divRemTo(this.m,null,b);if(a.s<0&&b.compareTo(BigInteger.ZERO)>0){this.m.subTo(b,b)}return b}function montRevert(a){var b=nbi();a.copyTo(b);this.reduce(b);return b}function montReduce(a){while(a.t<=this.mt2){a[a.t++]=0}for(var c=0;c<this.m.t;++c){var b=a[c]&32767;var d=(b*this.mpl+(((b*this.mph+(a[c]>>15)*this.mpl)&this.um)<<15))&a.DM;b=c+this.m.t;a[b]+=this.m.am(0,d,a,c,0,this.m.t);while(a[b]>=a.DV){a[b]-=a.DV;a[++b]++}}a.clamp();a.drShiftTo(this.m.t,a);if(a.compareTo(this.m)>=0){a.subTo(this.m,a)}}function montSqrTo(a,b){a.squareTo(b);this.reduce(b)}function montMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}Montgomery.prototype.convert=montConvert;Montgomery.prototype.revert=montRevert;Montgomery.prototype.reduce=montReduce;Montgomery.prototype.mulTo=montMulTo;Montgomery.prototype.sqrTo=montSqrTo;function bnpIsEven(){return((this.t>0)?(this[0]&1):this.s)==0}function bnpExp(h,j){if(h>4294967295||h<1){return BigInteger.ONE}var f=nbi(),a=nbi(),d=j.convert(this),c=nbits(h)-1;d.copyTo(f);while(--c>=0){j.sqrTo(f,a);if((h&(1<<c))>0){j.mulTo(a,d,f)}else{var b=f;f=a;a=b}}return j.revert(f)}function bnModPowInt(b,a){var c;if(b<256||a.isEven()){c=new Classic(a)}else{c=new Montgomery(a)}return this.exp(b,c)}BigInteger.prototype.copyTo=bnpCopyTo;BigInteger.prototype.fromInt=bnpFromInt;BigInteger.prototype.fromString=bnpFromString;BigInteger.prototype.clamp=bnpClamp;BigInteger.prototype.dlShiftTo=bnpDLShiftTo;BigInteger.prototype.drShiftTo=bnpDRShiftTo;BigInteger.prototype.lShiftTo=bnpLShiftTo;BigInteger.prototype.rShiftTo=bnpRShiftTo;BigInteger.prototype.subTo=bnpSubTo;BigInteger.prototype.multiplyTo=bnpMultiplyTo;BigInteger.prototype.squareTo=bnpSquareTo;BigInteger.prototype.divRemTo=bnpDivRemTo;BigInteger.prototype.invDigit=bnpInvDigit;BigInteger.prototype.isEven=bnpIsEven;BigInteger.prototype.exp=bnpExp;BigInteger.prototype.toString=bnToString;BigInteger.prototype.negate=bnNegate;BigInteger.prototype.abs=bnAbs;BigInteger.prototype.compareTo=bnCompareTo;BigInteger.prototype.bitLength=bnBitLength;BigInteger.prototype.mod=bnMod;BigInteger.prototype.modPowInt=bnModPowInt;BigInteger.ZERO=nbv(0);BigInteger.ONE=nbv(1);\n\t/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t */\n\tfunction bnClone(){var a=nbi();this.copyTo(a);return a}function bnIntValue(){if(this.s<0){if(this.t==1){return this[0]-this.DV}else{if(this.t==0){return -1}}}else{if(this.t==1){return this[0]}else{if(this.t==0){return 0}}}return((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0]}function bnByteValue(){return(this.t==0)?this.s:(this[0]<<24)>>24}function bnShortValue(){return(this.t==0)?this.s:(this[0]<<16)>>16}function bnpChunkSize(a){return Math.floor(Math.LN2*this.DB/Math.log(a))}function bnSigNum(){if(this.s<0){return -1}else{if(this.t<=0||(this.t==1&&this[0]<=0)){return 0}else{return 1}}}function bnpToRadix(c){if(c==null){c=10}if(this.signum()==0||c<2||c>36){return\"0\"}var f=this.chunkSize(c);var e=Math.pow(c,f);var i=nbv(e),j=nbi(),h=nbi(),g=\"\";this.divRemTo(i,j,h);while(j.signum()>0){g=(e+h.intValue()).toString(c).substr(1)+g;j.divRemTo(i,j,h)}return h.intValue().toString(c)+g}function bnpFromRadix(m,h){this.fromInt(0);if(h==null){h=10}var f=this.chunkSize(h);var g=Math.pow(h,f),e=false,a=0,l=0;for(var c=0;c<m.length;++c){var k=intAt(m,c);if(k<0){if(m.charAt(c)==\"-\"&&this.signum()==0){e=true}continue}l=h*l+k;if(++a>=f){this.dMultiply(g);this.dAddOffset(l,0);a=0;l=0}}if(a>0){this.dMultiply(Math.pow(h,a));this.dAddOffset(l,0)}if(e){BigInteger.ZERO.subTo(this,this)}}function bnpFromNumber(f,e,h){if(\"number\"==typeof e){if(f<2){this.fromInt(1)}else{this.fromNumber(f,h);if(!this.testBit(f-1)){this.bitwiseTo(BigInteger.ONE.shiftLeft(f-1),op_or,this)}if(this.isEven()){this.dAddOffset(1,0)}while(!this.isProbablePrime(e)){this.dAddOffset(2,0);if(this.bitLength()>f){this.subTo(BigInteger.ONE.shiftLeft(f-1),this)}}}}else{var d=new Array(),g=f&7;d.length=(f>>3)+1;e.nextBytes(d);if(g>0){d[0]&=((1<<g)-1)}else{d[0]=0}this.fromString(d,256)}}function bnToByteArray(){var b=this.t,c=new Array();c[0]=this.s;var e=this.DB-(b*this.DB)%8,f,a=0;if(b-->0){if(e<this.DB&&(f=this[b]>>e)!=(this.s&this.DM)>>e){c[a++]=f|(this.s<<(this.DB-e))}while(b>=0){if(e<8){f=(this[b]&((1<<e)-1))<<(8-e);f|=this[--b]>>(e+=this.DB-8)}else{f=(this[b]>>(e-=8))&255;if(e<=0){e+=this.DB;--b}}if((f&128)!=0){f|=-256}if(a==0&&(this.s&128)!=(f&128)){++a}if(a>0||f!=this.s){c[a++]=f}}}return c}function bnEquals(b){return(this.compareTo(b)==0)}function bnMin(b){return(this.compareTo(b)<0)?this:b}function bnMax(b){return(this.compareTo(b)>0)?this:b}function bnpBitwiseTo(c,h,e){var d,g,b=Math.min(c.t,this.t);for(d=0;d<b;++d){e[d]=h(this[d],c[d])}if(c.t<this.t){g=c.s&this.DM;for(d=b;d<this.t;++d){e[d]=h(this[d],g)}e.t=this.t}else{g=this.s&this.DM;for(d=b;d<c.t;++d){e[d]=h(g,c[d])}e.t=c.t}e.s=h(this.s,c.s);e.clamp()}function op_and(a,b){return a&b}function bnAnd(b){var c=nbi();this.bitwiseTo(b,op_and,c);return c}function op_or(a,b){return a|b}function bnOr(b){var c=nbi();this.bitwiseTo(b,op_or,c);return c}function op_xor(a,b){return a^b}function bnXor(b){var c=nbi();this.bitwiseTo(b,op_xor,c);return c}function op_andnot(a,b){return a&~b}function bnAndNot(b){var c=nbi();this.bitwiseTo(b,op_andnot,c);return c}function bnNot(){var b=nbi();for(var a=0;a<this.t;++a){b[a]=this.DM&~this[a]}b.t=this.t;b.s=~this.s;return b}function bnShiftLeft(b){var a=nbi();if(b<0){this.rShiftTo(-b,a)}else{this.lShiftTo(b,a)}return a}function bnShiftRight(b){var a=nbi();if(b<0){this.lShiftTo(-b,a)}else{this.rShiftTo(b,a)}return a}function lbit(a){if(a==0){return -1}var b=0;if((a&65535)==0){a>>=16;b+=16}if((a&255)==0){a>>=8;b+=8}if((a&15)==0){a>>=4;b+=4}if((a&3)==0){a>>=2;b+=2}if((a&1)==0){++b}return b}function bnGetLowestSetBit(){for(var a=0;a<this.t;++a){if(this[a]!=0){return a*this.DB+lbit(this[a])}}if(this.s<0){return this.t*this.DB}return -1}function cbit(a){var b=0;while(a!=0){a&=a-1;++b}return b}function bnBitCount(){var c=0,a=this.s&this.DM;for(var b=0;b<this.t;++b){c+=cbit(this[b]^a)}return c}function bnTestBit(b){var a=Math.floor(b/this.DB);if(a>=this.t){return(this.s!=0)}return((this[a]&(1<<(b%this.DB)))!=0)}function bnpChangeBit(c,b){var a=BigInteger.ONE.shiftLeft(c);this.bitwiseTo(a,b,a);return a}function bnSetBit(a){return this.changeBit(a,op_or)}function bnClearBit(a){return this.changeBit(a,op_andnot)}function bnFlipBit(a){return this.changeBit(a,op_xor)}function bnpAddTo(d,f){var e=0,g=0,b=Math.min(d.t,this.t);while(e<b){g+=this[e]+d[e];f[e++]=g&this.DM;g>>=this.DB}if(d.t<this.t){g+=d.s;while(e<this.t){g+=this[e];f[e++]=g&this.DM;g>>=this.DB}g+=this.s}else{g+=this.s;while(e<d.t){g+=d[e];f[e++]=g&this.DM;g>>=this.DB}g+=d.s}f.s=(g<0)?-1:0;if(g>0){f[e++]=g}else{if(g<-1){f[e++]=this.DV+g}}f.t=e;f.clamp()}function bnAdd(b){var c=nbi();this.addTo(b,c);return c}function bnSubtract(b){var c=nbi();this.subTo(b,c);return c}function bnMultiply(b){var c=nbi();this.multiplyTo(b,c);return c}function bnSquare(){var a=nbi();this.squareTo(a);return a}function bnDivide(b){var c=nbi();this.divRemTo(b,c,null);return c}function bnRemainder(b){var c=nbi();this.divRemTo(b,null,c);return c}function bnDivideAndRemainder(b){var d=nbi(),c=nbi();this.divRemTo(b,d,c);return new Array(d,c)}function bnpDMultiply(a){this[this.t]=this.am(0,a-1,this,0,0,this.t);++this.t;this.clamp()}function bnpDAddOffset(b,a){if(b==0){return}while(this.t<=a){this[this.t++]=0}this[a]+=b;while(this[a]>=this.DV){this[a]-=this.DV;if(++a>=this.t){this[this.t++]=0}++this[a]}}function NullExp(){}function nNop(a){return a}function nMulTo(a,c,b){a.multiplyTo(c,b)}function nSqrTo(a,b){a.squareTo(b)}NullExp.prototype.convert=nNop;NullExp.prototype.revert=nNop;NullExp.prototype.mulTo=nMulTo;NullExp.prototype.sqrTo=nSqrTo;function bnPow(a){return this.exp(a,new NullExp())}function bnpMultiplyLowerTo(b,f,e){var d=Math.min(this.t+b.t,f);e.s=0;e.t=d;while(d>0){e[--d]=0}var c;for(c=e.t-this.t;d<c;++d){e[d+this.t]=this.am(0,b[d],e,d,0,this.t)}for(c=Math.min(b.t,f);d<c;++d){this.am(0,b[d],e,d,0,f-d)}e.clamp()}function bnpMultiplyUpperTo(b,e,d){--e;var c=d.t=this.t+b.t-e;d.s=0;while(--c>=0){d[c]=0}for(c=Math.max(e-this.t,0);c<b.t;++c){d[this.t+c-e]=this.am(e-c,b[c],d,0,0,this.t+c-e)}d.clamp();d.drShiftTo(1,d)}function Barrett(a){this.r2=nbi();this.q3=nbi();BigInteger.ONE.dlShiftTo(2*a.t,this.r2);this.mu=this.r2.divide(a);this.m=a}function barrettConvert(a){if(a.s<0||a.t>2*this.m.t){return a.mod(this.m)}else{if(a.compareTo(this.m)<0){return a}else{var b=nbi();a.copyTo(b);this.reduce(b);return b}}}function barrettRevert(a){return a}function barrettReduce(a){a.drShiftTo(this.m.t-1,this.r2);if(a.t>this.m.t+1){a.t=this.m.t+1;a.clamp()}this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);while(a.compareTo(this.r2)<0){a.dAddOffset(1,this.m.t+1)}a.subTo(this.r2,a);while(a.compareTo(this.m)>=0){a.subTo(this.m,a)}}function barrettSqrTo(a,b){a.squareTo(b);this.reduce(b)}function barrettMulTo(a,c,b){a.multiplyTo(c,b);this.reduce(b)}Barrett.prototype.convert=barrettConvert;Barrett.prototype.revert=barrettRevert;Barrett.prototype.reduce=barrettReduce;Barrett.prototype.mulTo=barrettMulTo;Barrett.prototype.sqrTo=barrettSqrTo;function bnModPow(q,f){var o=q.bitLength(),h,b=nbv(1),v;if(o<=0){return b}else{if(o<18){h=1}else{if(o<48){h=3}else{if(o<144){h=4}else{if(o<768){h=5}else{h=6}}}}}if(o<8){v=new Classic(f)}else{if(f.isEven()){v=new Barrett(f)}else{v=new Montgomery(f)}}var p=new Array(),d=3,s=h-1,a=(1<<h)-1;p[1]=v.convert(this);if(h>1){var A=nbi();v.sqrTo(p[1],A);while(d<=a){p[d]=nbi();v.mulTo(A,p[d-2],p[d]);d+=2}}var l=q.t-1,x,u=true,c=nbi(),y;o=nbits(q[l])-1;while(l>=0){if(o>=s){x=(q[l]>>(o-s))&a}else{x=(q[l]&((1<<(o+1))-1))<<(s-o);if(l>0){x|=q[l-1]>>(this.DB+o-s)}}d=h;while((x&1)==0){x>>=1;--d}if((o-=d)<0){o+=this.DB;--l}if(u){p[x].copyTo(b);u=false}else{while(d>1){v.sqrTo(b,c);v.sqrTo(c,b);d-=2}if(d>0){v.sqrTo(b,c)}else{y=b;b=c;c=y}v.mulTo(c,p[x],b)}while(l>=0&&(q[l]&(1<<o))==0){v.sqrTo(b,c);y=b;b=c;c=y;if(--o<0){o=this.DB-1;--l}}}return v.revert(b)}function bnGCD(c){var b=(this.s<0)?this.negate():this.clone();var h=(c.s<0)?c.negate():c.clone();if(b.compareTo(h)<0){var e=b;b=h;h=e}var d=b.getLowestSetBit(),f=h.getLowestSetBit();if(f<0){return b}if(d<f){f=d}if(f>0){b.rShiftTo(f,b);h.rShiftTo(f,h)}while(b.signum()>0){if((d=b.getLowestSetBit())>0){b.rShiftTo(d,b)}if((d=h.getLowestSetBit())>0){h.rShiftTo(d,h)}if(b.compareTo(h)>=0){b.subTo(h,b);b.rShiftTo(1,b)}else{h.subTo(b,h);h.rShiftTo(1,h)}}if(f>0){h.lShiftTo(f,h)}return h}function bnpModInt(e){if(e<=0){return 0}var c=this.DV%e,b=(this.s<0)?e-1:0;if(this.t>0){if(c==0){b=this[0]%e}else{for(var a=this.t-1;a>=0;--a){b=(c*b+this[a])%e}}}return b}function bnModInverse(f){var j=f.isEven();if((this.isEven()&&j)||f.signum()==0){return BigInteger.ZERO}var i=f.clone(),h=this.clone();var g=nbv(1),e=nbv(0),l=nbv(0),k=nbv(1);while(i.signum()!=0){while(i.isEven()){i.rShiftTo(1,i);if(j){if(!g.isEven()||!e.isEven()){g.addTo(this,g);e.subTo(f,e)}g.rShiftTo(1,g)}else{if(!e.isEven()){e.subTo(f,e)}}e.rShiftTo(1,e)}while(h.isEven()){h.rShiftTo(1,h);if(j){if(!l.isEven()||!k.isEven()){l.addTo(this,l);k.subTo(f,k)}l.rShiftTo(1,l)}else{if(!k.isEven()){k.subTo(f,k)}}k.rShiftTo(1,k)}if(i.compareTo(h)>=0){i.subTo(h,i);if(j){g.subTo(l,g)}e.subTo(k,e)}else{h.subTo(i,h);if(j){l.subTo(g,l)}k.subTo(e,k)}}if(h.compareTo(BigInteger.ONE)!=0){return BigInteger.ZERO}if(k.compareTo(f)>=0){return k.subtract(f)}if(k.signum()<0){k.addTo(f,k)}else{return k}if(k.signum()<0){return k.add(f)}else{return k}}var lowprimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];var lplim=(1<<26)/lowprimes[lowprimes.length-1];function bnIsProbablePrime(e){var d,b=this.abs();if(b.t==1&&b[0]<=lowprimes[lowprimes.length-1]){for(d=0;d<lowprimes.length;++d){if(b[0]==lowprimes[d]){return true}}return false}if(b.isEven()){return false}d=1;while(d<lowprimes.length){var a=lowprimes[d],c=d+1;while(c<lowprimes.length&&a<lplim){a*=lowprimes[c++]}a=b.modInt(a);while(d<c){if(a%lowprimes[d++]==0){return false}}}return b.millerRabin(e)}function bnpMillerRabin(f){var g=this.subtract(BigInteger.ONE);var c=g.getLowestSetBit();if(c<=0){return false}var h=g.shiftRight(c);f=(f+1)>>1;if(f>lowprimes.length){f=lowprimes.length}var b=nbi();for(var e=0;e<f;++e){b.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);var l=b.modPow(h,this);if(l.compareTo(BigInteger.ONE)!=0&&l.compareTo(g)!=0){var d=1;while(d++<c&&l.compareTo(g)!=0){l=l.modPowInt(2,this);if(l.compareTo(BigInteger.ONE)==0){return false}}if(l.compareTo(g)!=0){return false}}}return true}BigInteger.prototype.chunkSize=bnpChunkSize;BigInteger.prototype.toRadix=bnpToRadix;BigInteger.prototype.fromRadix=bnpFromRadix;BigInteger.prototype.fromNumber=bnpFromNumber;BigInteger.prototype.bitwiseTo=bnpBitwiseTo;BigInteger.prototype.changeBit=bnpChangeBit;BigInteger.prototype.addTo=bnpAddTo;BigInteger.prototype.dMultiply=bnpDMultiply;BigInteger.prototype.dAddOffset=bnpDAddOffset;BigInteger.prototype.multiplyLowerTo=bnpMultiplyLowerTo;BigInteger.prototype.multiplyUpperTo=bnpMultiplyUpperTo;BigInteger.prototype.modInt=bnpModInt;BigInteger.prototype.millerRabin=bnpMillerRabin;BigInteger.prototype.clone=bnClone;BigInteger.prototype.intValue=bnIntValue;BigInteger.prototype.byteValue=bnByteValue;BigInteger.prototype.shortValue=bnShortValue;BigInteger.prototype.signum=bnSigNum;BigInteger.prototype.toByteArray=bnToByteArray;BigInteger.prototype.equals=bnEquals;BigInteger.prototype.min=bnMin;BigInteger.prototype.max=bnMax;BigInteger.prototype.and=bnAnd;BigInteger.prototype.or=bnOr;BigInteger.prototype.xor=bnXor;BigInteger.prototype.andNot=bnAndNot;BigInteger.prototype.not=bnNot;BigInteger.prototype.shiftLeft=bnShiftLeft;BigInteger.prototype.shiftRight=bnShiftRight;BigInteger.prototype.getLowestSetBit=bnGetLowestSetBit;BigInteger.prototype.bitCount=bnBitCount;BigInteger.prototype.testBit=bnTestBit;BigInteger.prototype.setBit=bnSetBit;BigInteger.prototype.clearBit=bnClearBit;BigInteger.prototype.flipBit=bnFlipBit;BigInteger.prototype.add=bnAdd;BigInteger.prototype.subtract=bnSubtract;BigInteger.prototype.multiply=bnMultiply;BigInteger.prototype.divide=bnDivide;BigInteger.prototype.remainder=bnRemainder;BigInteger.prototype.divideAndRemainder=bnDivideAndRemainder;BigInteger.prototype.modPow=bnModPow;BigInteger.prototype.modInverse=bnModInverse;BigInteger.prototype.pow=bnPow;BigInteger.prototype.gcd=bnGCD;BigInteger.prototype.isProbablePrime=bnIsProbablePrime;BigInteger.prototype.square=bnSquare;\n\t/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t */\n\tfunction Arcfour(){this.i=0;this.j=0;this.S=new Array()}function ARC4init(d){var c,a,b;for(c=0;c<256;++c){this.S[c]=c}a=0;for(c=0;c<256;++c){a=(a+this.S[c]+d[c%d.length])&255;b=this.S[c];this.S[c]=this.S[a];this.S[a]=b}this.i=0;this.j=0}function ARC4next(){var a;this.i=(this.i+1)&255;this.j=(this.j+this.S[this.i])&255;a=this.S[this.i];this.S[this.i]=this.S[this.j];this.S[this.j]=a;return this.S[(a+this.S[this.i])&255]}Arcfour.prototype.init=ARC4init;Arcfour.prototype.next=ARC4next;function prng_newstate(){return new Arcfour()}var rng_psize=256;\n\t/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t */\n\tvar rng_state;var rng_pool;var rng_pptr;function rng_seed_int(a){rng_pool[rng_pptr++]^=a&255;rng_pool[rng_pptr++]^=(a>>8)&255;rng_pool[rng_pptr++]^=(a>>16)&255;rng_pool[rng_pptr++]^=(a>>24)&255;if(rng_pptr>=rng_psize){rng_pptr-=rng_psize}}function rng_seed_time(){rng_seed_int(new Date().getTime())}if(rng_pool==null){rng_pool=new Array();rng_pptr=0;var t;if(window.crypto&&window.crypto.getRandomValues){var ua=new Uint8Array(32);window.crypto.getRandomValues(ua);for(t=0;t<32;++t){rng_pool[rng_pptr++]=ua[t]}}if(navigator.appName==\"Netscape\"&&navigator.appVersion<\"5\"&&window.crypto){var z=window.crypto.random(32);for(t=0;t<z.length;++t){rng_pool[rng_pptr++]=z.charCodeAt(t)&255}}while(rng_pptr<rng_psize){t=Math.floor(65536*Math.random());rng_pool[rng_pptr++]=t>>>8;rng_pool[rng_pptr++]=t&255}rng_pptr=0;rng_seed_time()}function rng_get_byte(){if(rng_state==null){rng_seed_time();rng_state=prng_newstate();rng_state.init(rng_pool);for(rng_pptr=0;rng_pptr<rng_pool.length;++rng_pptr){rng_pool[rng_pptr]=0}rng_pptr=0}return rng_state.next()}function rng_get_bytes(b){var a;for(a=0;a<b.length;++a){b[a]=rng_get_byte()}}function SecureRandom(){}SecureRandom.prototype.nextBytes=rng_get_bytes;\n\t/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t */\n\tfunction parseBigInt(b,a){return new BigInteger(b,a)}function linebrk(c,d){var a=\"\";var b=0;while(b+d<c.length){a+=c.substring(b,b+d)+\"\\n\";b+=d}return a+c.substring(b,c.length)}function byte2Hex(a){if(a<16){return\"0\"+a.toString(16)}else{return a.toString(16)}}function pkcs1pad2(e,h){if(h<e.length+11){alert(\"Message too long for RSA\");return null}var g=new Array();var d=e.length-1;while(d>=0&&h>0){var f=e.charCodeAt(d--);if(f<128){g[--h]=f}else{if((f>127)&&(f<2048)){g[--h]=(f&63)|128;g[--h]=(f>>6)|192}else{g[--h]=(f&63)|128;g[--h]=((f>>6)&63)|128;g[--h]=(f>>12)|224}}}g[--h]=0;var b=new SecureRandom();var a=new Array();while(h>2){a[0]=0;while(a[0]==0){b.nextBytes(a)}g[--h]=a[0]}g[--h]=2;g[--h]=0;return new BigInteger(g)}function oaep_mgf1_arr(c,a,e){var b=\"\",d=0;while(b.length<a){b+=e(String.fromCharCode.apply(String,c.concat([(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255])));d+=1}return b}var SHA1_SIZE=20;function oaep_pad(l,a,c){if(l.length+2*SHA1_SIZE+2>a){throw\"Message too long for RSA\"}var h=\"\",d;for(d=0;d<a-l.length-2*SHA1_SIZE-2;d+=1){h+=\"\\x00\"}var e=rstr_sha1(\"\")+h+\"\\x01\"+l;var f=new Array(SHA1_SIZE);new SecureRandom().nextBytes(f);var g=oaep_mgf1_arr(f,e.length,c||rstr_sha1);var k=[];for(d=0;d<e.length;d+=1){k[d]=e.charCodeAt(d)^g.charCodeAt(d)}var j=oaep_mgf1_arr(k,f.length,rstr_sha1);var b=[0];for(d=0;d<f.length;d+=1){b[d+1]=f[d]^j.charCodeAt(d)}return new BigInteger(b.concat(k))}function RSAKey(){this.n=null;this.e=0;this.d=null;this.p=null;this.q=null;this.dmp1=null;this.dmq1=null;this.coeff=null}function RSASetPublic(b,a){this.isPublic=true;if(typeof b!==\"string\"){this.n=b;this.e=a}else{if(b!=null&&a!=null&&b.length>0&&a.length>0){this.n=parseBigInt(b,16);this.e=parseInt(a,16)}else{alert(\"Invalid RSA public key\")}}}function RSADoPublic(a){return a.modPowInt(this.e,this.n)}function RSAEncrypt(d){var a=pkcs1pad2(d,(this.n.bitLength()+7)>>3);if(a==null){return null}var e=this.doPublic(a);if(e==null){return null}var b=e.toString(16);if((b.length&1)==0){return b}else{return\"0\"+b}}function RSAEncryptOAEP(e,d){var a=oaep_pad(e,(this.n.bitLength()+7)>>3,d);if(a==null){return null}var f=this.doPublic(a);if(f==null){return null}var b=f.toString(16);if((b.length&1)==0){return b}else{return\"0\"+b}}RSAKey.prototype.doPublic=RSADoPublic;RSAKey.prototype.setPublic=RSASetPublic;RSAKey.prototype.encrypt=RSAEncrypt;RSAKey.prototype.encryptOAEP=RSAEncryptOAEP;RSAKey.prototype.type=\"RSA\";\n\t/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t */\n\tfunction pkcs1unpad2(g,j){var a=g.toByteArray();var f=0;while(f<a.length&&a[f]==0){++f}if(a.length-f!=j-1||a[f]!=2){return null}++f;while(a[f]!=0){if(++f>=a.length){return null}}var e=\"\";while(++f<a.length){var h=a[f]&255;if(h<128){e+=String.fromCharCode(h)}else{if((h>191)&&(h<224)){e+=String.fromCharCode(((h&31)<<6)|(a[f+1]&63));++f}else{e+=String.fromCharCode(((h&15)<<12)|((a[f+1]&63)<<6)|(a[f+2]&63));f+=2}}}return e}function oaep_mgf1_str(c,a,e){var b=\"\",d=0;while(b.length<a){b+=e(c+String.fromCharCode.apply(String,[(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255]));d+=1}return b}var SHA1_SIZE=20;function oaep_unpad(l,b,e){l=l.toByteArray();var f;for(f=0;f<l.length;f+=1){l[f]&=255}while(l.length<b){l.unshift(0)}l=String.fromCharCode.apply(String,l);if(l.length<2*SHA1_SIZE+2){throw\"Cipher too short\"}var c=l.substr(1,SHA1_SIZE);var o=l.substr(SHA1_SIZE+1);var m=oaep_mgf1_str(o,SHA1_SIZE,e||rstr_sha1);var h=[],f;for(f=0;f<c.length;f+=1){h[f]=c.charCodeAt(f)^m.charCodeAt(f)}var j=oaep_mgf1_str(String.fromCharCode.apply(String,h),l.length-SHA1_SIZE,rstr_sha1);var g=[];for(f=0;f<o.length;f+=1){g[f]=o.charCodeAt(f)^j.charCodeAt(f)}g=String.fromCharCode.apply(String,g);if(g.substr(0,SHA1_SIZE)!==rstr_sha1(\"\")){throw\"Hash mismatch\"}g=g.substr(SHA1_SIZE);var a=g.indexOf(\"\\x01\");var k=(a!=-1)?g.substr(0,a).lastIndexOf(\"\\x00\"):-1;if(k+1!=a){throw\"Malformed data\"}return g.substr(a+1)}function RSASetPrivate(c,a,b){this.isPrivate=true;if(typeof c!==\"string\"){this.n=c;this.e=a;this.d=b}else{if(c!=null&&a!=null&&c.length>0&&a.length>0){this.n=parseBigInt(c,16);this.e=parseInt(a,16);this.d=parseBigInt(b,16)}else{alert(\"Invalid RSA private key\")}}}function RSASetPrivateEx(g,d,e,c,b,a,h,f){this.isPrivate=true;if(g==null){throw\"RSASetPrivateEx N == null\"}if(d==null){throw\"RSASetPrivateEx E == null\"}if(g.length==0){throw\"RSASetPrivateEx N.length == 0\"}if(d.length==0){throw\"RSASetPrivateEx E.length == 0\"}if(g!=null&&d!=null&&g.length>0&&d.length>0){this.n=parseBigInt(g,16);this.e=parseInt(d,16);this.d=parseBigInt(e,16);this.p=parseBigInt(c,16);this.q=parseBigInt(b,16);this.dmp1=parseBigInt(a,16);this.dmq1=parseBigInt(h,16);this.coeff=parseBigInt(f,16)}else{alert(\"Invalid RSA private key in RSASetPrivateEx\")}}function RSAGenerate(b,i){var a=new SecureRandom();var f=b>>1;this.e=parseInt(i,16);var c=new BigInteger(i,16);for(;;){for(;;){this.p=new BigInteger(b-f,1,a);if(this.p.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE)==0&&this.p.isProbablePrime(10)){break}}for(;;){this.q=new BigInteger(f,1,a);if(this.q.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE)==0&&this.q.isProbablePrime(10)){break}}if(this.p.compareTo(this.q)<=0){var h=this.p;this.p=this.q;this.q=h}var g=this.p.subtract(BigInteger.ONE);var d=this.q.subtract(BigInteger.ONE);var e=g.multiply(d);if(e.gcd(c).compareTo(BigInteger.ONE)==0){this.n=this.p.multiply(this.q);this.d=c.modInverse(e);this.dmp1=this.d.mod(g);this.dmq1=this.d.mod(d);this.coeff=this.q.modInverse(this.p);break}}}function RSADoPrivate(a){if(this.p==null||this.q==null){return a.modPow(this.d,this.n)}var c=a.mod(this.p).modPow(this.dmp1,this.p);var b=a.mod(this.q).modPow(this.dmq1,this.q);while(c.compareTo(b)<0){c=c.add(this.p)}return c.subtract(b).multiply(this.coeff).mod(this.p).multiply(this.q).add(b)}function RSADecrypt(b){var d=parseBigInt(b,16);var a=this.doPrivate(d);if(a==null){return null}return pkcs1unpad2(a,(this.n.bitLength()+7)>>3)}function RSADecryptOAEP(d,b){var e=parseBigInt(d,16);var a=this.doPrivate(e);if(a==null){return null}return oaep_unpad(a,(this.n.bitLength()+7)>>3,b)}RSAKey.prototype.doPrivate=RSADoPrivate;RSAKey.prototype.setPrivate=RSASetPrivate;RSAKey.prototype.setPrivateEx=RSASetPrivateEx;RSAKey.prototype.generate=RSAGenerate;RSAKey.prototype.decrypt=RSADecrypt;RSAKey.prototype.decryptOAEP=RSADecryptOAEP;\n\t/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n\t */\n\tfunction ECFieldElementFp(b,a){this.x=a;this.q=b}function feFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.x.equals(a.x))}function feFpToBigInteger(){return this.x}function feFpNegate(){return new ECFieldElementFp(this.q,this.x.negate().mod(this.q))}function feFpAdd(a){return new ECFieldElementFp(this.q,this.x.add(a.toBigInteger()).mod(this.q))}function feFpSubtract(a){return new ECFieldElementFp(this.q,this.x.subtract(a.toBigInteger()).mod(this.q))}function feFpMultiply(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger()).mod(this.q))}function feFpSquare(){return new ECFieldElementFp(this.q,this.x.square().mod(this.q))}function feFpDivide(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q))}ECFieldElementFp.prototype.equals=feFpEquals;ECFieldElementFp.prototype.toBigInteger=feFpToBigInteger;ECFieldElementFp.prototype.negate=feFpNegate;ECFieldElementFp.prototype.add=feFpAdd;ECFieldElementFp.prototype.subtract=feFpSubtract;ECFieldElementFp.prototype.multiply=feFpMultiply;ECFieldElementFp.prototype.square=feFpSquare;ECFieldElementFp.prototype.divide=feFpDivide;function ECPointFp(c,a,d,b){this.curve=c;this.x=a;this.y=d;if(b==null){this.z=BigInteger.ONE}else{this.z=b}this.zinv=null}function pointFpGetX(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))}function pointFpGetY(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))}function pointFpEquals(a){if(a==this){return true}if(this.isInfinity()){return a.isInfinity()}if(a.isInfinity()){return this.isInfinity()}var c,b;c=a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);if(!c.equals(BigInteger.ZERO)){return false}b=a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);return b.equals(BigInteger.ZERO)}function pointFpIsInfinity(){if((this.x==null)&&(this.y==null)){return true}return this.z.equals(BigInteger.ZERO)&&!this.y.toBigInteger().equals(BigInteger.ZERO)}function pointFpNegate(){return new ECPointFp(this.curve,this.x,this.y.negate(),this.z)}function pointFpAdd(l){if(this.isInfinity()){return l}if(l.isInfinity()){return this}var p=l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);var o=l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);if(BigInteger.ZERO.equals(o)){if(BigInteger.ZERO.equals(p)){return this.twice()}return this.curve.getInfinity()}var j=new BigInteger(\"3\");var e=this.x.toBigInteger();var n=this.y.toBigInteger();var c=l.x.toBigInteger();var k=l.y.toBigInteger();var m=o.square();var i=m.multiply(o);var d=e.multiply(m);var g=p.square().multiply(this.z);var a=g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);var h=d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);var f=i.multiply(this.z).multiply(l.z).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(a),this.curve.fromBigInteger(h),f)}function pointFpTwice(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var g=new BigInteger(\"3\");var c=this.x.toBigInteger();var h=this.y.toBigInteger();var e=h.multiply(this.z);var j=e.multiply(h).mod(this.curve.q);var i=this.curve.a.toBigInteger();var k=c.square().multiply(g);if(!BigInteger.ZERO.equals(i)){k=k.add(this.z.square().multiply(i))}k=k.mod(this.curve.q);var b=k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);var f=k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);var d=e.square().multiply(e).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(b),this.curve.fromBigInteger(f),d)}function pointFpMultiply(b){if(this.isInfinity()){return this}if(b.signum()==0){return this.curve.getInfinity()}var g=b;var f=g.multiply(new BigInteger(\"3\"));var l=this.negate();var d=this;var c;for(c=f.bitLength()-2;c>0;--c){d=d.twice();var a=f.testBit(c);var j=g.testBit(c);if(a!=j){d=d.add(a?this:l)}}return d}function pointFpMultiplyTwo(c,a,b){var d;if(c.bitLength()>b.bitLength()){d=c.bitLength()-1}else{d=b.bitLength()-1}var f=this.curve.getInfinity();var e=this.add(a);while(d>=0){f=f.twice();if(c.testBit(d)){if(b.testBit(d)){f=f.add(e)}else{f=f.add(this)}}else{if(b.testBit(d)){f=f.add(a)}}--d}return f}ECPointFp.prototype.getX=pointFpGetX;ECPointFp.prototype.getY=pointFpGetY;ECPointFp.prototype.equals=pointFpEquals;ECPointFp.prototype.isInfinity=pointFpIsInfinity;ECPointFp.prototype.negate=pointFpNegate;ECPointFp.prototype.add=pointFpAdd;ECPointFp.prototype.twice=pointFpTwice;ECPointFp.prototype.multiply=pointFpMultiply;ECPointFp.prototype.multiplyTwo=pointFpMultiplyTwo;function ECCurveFp(e,d,c){this.q=e;this.a=this.fromBigInteger(d);this.b=this.fromBigInteger(c);this.infinity=new ECPointFp(this,null,null)}function curveFpGetQ(){return this.q}function curveFpGetA(){return this.a}function curveFpGetB(){return this.b}function curveFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.a.equals(a.a)&&this.b.equals(a.b))}function curveFpGetInfinity(){return this.infinity}function curveFpFromBigInteger(a){return new ECFieldElementFp(this.q,a)}function curveFpDecodePointHex(d){switch(parseInt(d.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:return null;case 4:case 6:case 7:var a=(d.length-2)/2;var c=d.substr(2,a);var b=d.substr(a+2,a);return new ECPointFp(this,this.fromBigInteger(new BigInteger(c,16)),this.fromBigInteger(new BigInteger(b,16)));default:return null}}ECCurveFp.prototype.getQ=curveFpGetQ;ECCurveFp.prototype.getA=curveFpGetA;ECCurveFp.prototype.getB=curveFpGetB;ECCurveFp.prototype.equals=curveFpEquals;ECCurveFp.prototype.getInfinity=curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger=curveFpFromBigInteger;ECCurveFp.prototype.decodePointHex=curveFpDecodePointHex;\n\t/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib\n\t */\n\tECFieldElementFp.prototype.getByteLength=function(){return Math.floor((this.toBigInteger().bitLength()+7)/8)};ECPointFp.prototype.getEncoded=function(c){var d=function(h,f){var g=h.toByteArrayUnsigned();if(f<g.length){g=g.slice(g.length-f)}else{while(f>g.length){g.unshift(0)}}return g};var a=this.getX().toBigInteger();var e=this.getY().toBigInteger();var b=d(a,32);if(c){if(e.isEven()){b.unshift(2)}else{b.unshift(3)}}else{b.unshift(4);b=b.concat(d(e,32))}return b};ECPointFp.decodeFrom=function(g,c){var f=c[0];var e=c.length-1;var d=c.slice(1,1+e/2);var b=c.slice(1+e/2,1+e);d.unshift(0);b.unshift(0);var a=new BigInteger(d);var h=new BigInteger(b);return new ECPointFp(g,g.fromBigInteger(a),g.fromBigInteger(h))};ECPointFp.decodeFromHex=function(g,c){var f=c.substr(0,2);var e=c.length-2;var d=c.substr(2,e/2);var b=c.substr(2+e/2,e/2);var a=new BigInteger(d,16);var h=new BigInteger(b,16);return new ECPointFp(g,g.fromBigInteger(a),g.fromBigInteger(h))};ECPointFp.prototype.add2D=function(c){if(this.isInfinity()){return c}if(c.isInfinity()){return this}if(this.x.equals(c.x)){if(this.y.equals(c.y)){return this.twice()}return this.curve.getInfinity()}var g=c.x.subtract(this.x);var e=c.y.subtract(this.y);var a=e.divide(g);var d=a.square().subtract(this.x).subtract(c.x);var f=a.multiply(this.x.subtract(d)).subtract(this.y);return new ECPointFp(this.curve,d,f)};ECPointFp.prototype.twice2D=function(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var b=this.curve.fromBigInteger(BigInteger.valueOf(2));var e=this.curve.fromBigInteger(BigInteger.valueOf(3));var a=this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(b));var c=a.square().subtract(this.x.multiply(b));var d=a.multiply(this.x.subtract(c)).subtract(this.y);return new ECPointFp(this.curve,c,d)};ECPointFp.prototype.multiply2D=function(b){if(this.isInfinity()){return this}if(b.signum()==0){return this.curve.getInfinity()}var g=b;var f=g.multiply(new BigInteger(\"3\"));var l=this.negate();var d=this;var c;for(c=f.bitLength()-2;c>0;--c){d=d.twice();var a=f.testBit(c);var j=g.testBit(c);if(a!=j){d=d.add2D(a?this:l)}}return d};ECPointFp.prototype.isOnCurve=function(){var d=this.getX().toBigInteger();var i=this.getY().toBigInteger();var f=this.curve.getA().toBigInteger();var c=this.curve.getB().toBigInteger();var h=this.curve.getQ();var e=i.multiply(i).mod(h);var g=d.multiply(d).multiply(d).add(f.multiply(d)).add(c).mod(h);return e.equals(g)};ECPointFp.prototype.toString=function(){return\"(\"+this.getX().toBigInteger().toString()+\",\"+this.getY().toBigInteger().toString()+\")\"};ECPointFp.prototype.validate=function(){var c=this.curve.getQ();if(this.isInfinity()){throw new Error(\"Point is at infinity.\")}var a=this.getX().toBigInteger();var b=this.getY().toBigInteger();if(a.compareTo(BigInteger.ONE)<0||a.compareTo(c.subtract(BigInteger.ONE))>0){throw new Error(\"x coordinate out of bounds\")}if(b.compareTo(BigInteger.ONE)<0||b.compareTo(c.subtract(BigInteger.ONE))>0){throw new Error(\"y coordinate out of bounds\")}if(!this.isOnCurve()){throw new Error(\"Point is not on the curve.\")}if(this.multiply(c).isInfinity()){throw new Error(\"Point is not a scalar multiple of G.\")}return true};\n\t/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval\n\t */\n\tvar jsonParse=(function(){var e=\"(?:-?\\\\b(?:0|[1-9][0-9]*)(?:\\\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\\\b)\";var j='(?:[^\\\\0-\\\\x08\\\\x0a-\\\\x1f\"\\\\\\\\]|\\\\\\\\(?:[\"/\\\\\\\\bfnrt]|u[0-9A-Fa-f]{4}))';var i='(?:\"'+j+'*\")';var d=new RegExp(\"(?:false|true|null|[\\\\{\\\\}\\\\[\\\\]]|\"+e+\"|\"+i+\")\",\"g\");var k=new RegExp(\"\\\\\\\\(?:([^u])|u(.{4}))\",\"g\");var g={'\"':'\"',\"/\":\"/\",\"\\\\\":\"\\\\\",b:\"\\b\",f:\"\\f\",n:\"\\n\",r:\"\\r\",t:\"\\t\"};function h(l,m,n){return m?g[m]:String.fromCharCode(parseInt(n,16))}var c=new String(\"\");var a=\"\\\\\";var f={\"{\":Object,\"[\":Array};var b=Object.hasOwnProperty;return function(u,q){var p=u.match(d);var x;var v=p[0];var l=false;if(\"{\"===v){x={}}else{if(\"[\"===v){x=[]}else{x=[];l=true}}var t;var r=[x];for(var o=1-l,m=p.length;o<m;++o){v=p[o];var w;switch(v.charCodeAt(0)){default:w=r[0];w[t||w.length]=+(v);t=void 0;break;case 34:v=v.substring(1,v.length-1);if(v.indexOf(a)!==-1){v=v.replace(k,h)}w=r[0];if(!t){if(w instanceof Array){t=w.length}else{t=v||c;break}}w[t]=v;t=void 0;break;case 91:w=r[0];r.unshift(w[t||w.length]=[]);t=void 0;break;case 93:r.shift();break;case 102:w=r[0];w[t||w.length]=false;t=void 0;break;case 110:w=r[0];w[t||w.length]=null;t=void 0;break;case 116:w=r[0];w[t||w.length]=true;t=void 0;break;case 123:w=r[0];r.unshift(w[t||w.length]={});t=void 0;break;case 125:r.shift();break}}if(l){if(r.length!==1){throw new Error()}x=x[0]}else{if(r.length){throw new Error()}}if(q){var s=function(C,B){var D=C[B];if(D&&typeof D===\"object\"){var n=null;for(var z in D){if(b.call(D,z)&&D!==C){var y=s(D,z);if(y!==void 0){D[z]=y}else{if(!n){n=[]}n.push(z)}}}if(n){for(var A=n.length;--A>=0;){delete D[n[A]]}}}return q.call(C,B,D)};x=s({\"\":x},\"\")}return x}})();\n\t/*! asn1-1.0.9.js (c) 2013-2015 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.asn1==\"undefined\"||!KJUR.asn1){KJUR.asn1={}}KJUR.asn1.ASN1Util=new function(){this.integerToByteHex=function(a){var b=a.toString(16);if((b.length%2)==1){b=\"0\"+b}return b};this.bigIntToMinTwosComplementsHex=function(j){var f=j.toString(16);if(f.substr(0,1)!=\"-\"){if(f.length%2==1){f=\"0\"+f}else{if(!f.match(/^[0-7]/)){f=\"00\"+f}}}else{var a=f.substr(1);var e=a.length;if(e%2==1){e+=1}else{if(!f.match(/^[0-7]/)){e+=2}}var g=\"\";for(var d=0;d<e;d++){g+=\"f\"}var c=new BigInteger(g,16);var b=c.xor(j).add(BigInteger.ONE);f=b.toString(16).replace(/^-/,\"\")}return f};this.getPEMStringFromHex=function(a,b){var c=KJUR.asn1;var f=CryptoJS.enc.Hex.parse(a);var d=CryptoJS.enc.Base64.stringify(f);var e=d.replace(/(.{64})/g,\"$1\\r\\n\");e=e.replace(/\\r\\n$/,\"\");return\"-----BEGIN \"+b+\"-----\\r\\n\"+e+\"\\r\\n-----END \"+b+\"-----\\r\\n\"};this.newObject=function(b){var g=KJUR.asn1;var k=Object.keys(b);if(k.length!=1){throw\"key of param shall be only one.\"}var j=k[0];if(\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\"+j+\":\")==-1){throw\"undefined key: \"+j}if(j==\"bool\"){return new g.DERBoolean(b[j])}if(j==\"int\"){return new g.DERInteger(b[j])}if(j==\"bitstr\"){return new g.DERBitString(b[j])}if(j==\"octstr\"){return new g.DEROctetString(b[j])}if(j==\"null\"){return new g.DERNull(b[j])}if(j==\"oid\"){return new g.DERObjectIdentifier(b[j])}if(j==\"enum\"){return new g.DEREnumerated(b[j])}if(j==\"utf8str\"){return new g.DERUTF8String(b[j])}if(j==\"numstr\"){return new g.DERNumericString(b[j])}if(j==\"prnstr\"){return new g.DERPrintableString(b[j])}if(j==\"telstr\"){return new g.DERTeletexString(b[j])}if(j==\"ia5str\"){return new g.DERIA5String(b[j])}if(j==\"utctime\"){return new g.DERUTCTime(b[j])}if(j==\"gentime\"){return new g.DERGeneralizedTime(b[j])}if(j==\"seq\"){var m=b[j];var h=[];for(var e=0;e<m.length;e++){var l=g.ASN1Util.newObject(m[e]);h.push(l)}return new g.DERSequence({array:h})}if(j==\"set\"){var m=b[j];var h=[];for(var e=0;e<m.length;e++){var l=g.ASN1Util.newObject(m[e]);h.push(l)}return new g.DERSet({array:h})}if(j==\"tag\"){var c=b[j];if(Object.prototype.toString.call(c)===\"[object Array]\"&&c.length==3){var d=g.ASN1Util.newObject(c[2]);return new g.DERTaggedObject({tag:c[0],explicit:c[1],obj:d})}else{var f={};if(c.explicit!==undefined){f.explicit=c.explicit}if(c.tag!==undefined){f.tag=c.tag}if(c.obj===undefined){throw\"obj shall be specified for 'tag'.\"}f.obj=g.ASN1Util.newObject(c.obj);return new g.DERTaggedObject(f)}}};this.jsonToASN1HEX=function(b){var a=this.newObject(b);return a.getEncodedHex()}};KJUR.asn1.ASN1Util.oidHexToInt=function(a){var j=\"\";var k=parseInt(a.substr(0,2),16);var d=Math.floor(k/40);var c=k%40;var j=d+\".\"+c;var e=\"\";for(var f=2;f<a.length;f+=2){var g=parseInt(a.substr(f,2),16);var h=(\"00000000\"+g.toString(2)).slice(-8);e=e+h.substr(1,7);if(h.substr(0,1)==\"0\"){var b=new BigInteger(e,2);j=j+\".\"+b.toString(10);e=\"\"}}return j};KJUR.asn1.ASN1Util.oidIntToHex=function(f){var e=function(a){var k=a.toString(16);if(k.length==1){k=\"0\"+k}return k};var d=function(o){var n=\"\";var k=new BigInteger(o,10);var a=k.toString(2);var l=7-a.length%7;if(l==7){l=0}var q=\"\";for(var m=0;m<l;m++){q+=\"0\"}a=q+a;for(var m=0;m<a.length-1;m+=7){var p=a.substr(m,7);if(m!=a.length-7){p=\"1\"+p}n+=e(parseInt(p,2))}return n};if(!f.match(/^[0-9.]+$/)){throw\"malformed oid string: \"+f}var g=\"\";var b=f.split(\".\");var j=parseInt(b[0])*40+parseInt(b[1]);g+=e(j);b.splice(0,2);for(var c=0;c<b.length;c++){g+=d(b[c])}return g};KJUR.asn1.ASN1Object=function(){var c=true;var b=null;var d=\"00\";var e=\"00\";var a=\"\";this.getLengthHexFromValue=function(){if(typeof this.hV==\"undefined\"||this.hV==null){throw\"this.hV is null or undefined.\"}if(this.hV.length%2==1){throw\"value hex must be even length: n=\"+a.length+\",v=\"+this.hV}var i=this.hV.length/2;var h=i.toString(16);if(h.length%2==1){h=\"0\"+h}if(i<128){return h}else{var g=h.length/2;if(g>15){throw\"ASN.1 length too long to represent by 8x: n = \"+i.toString(16)}var f=128+g;return f.toString(16)+h}};this.getEncodedHex=function(){if(this.hTLV==null||this.isModified){this.hV=this.getFreshValueHex();this.hL=this.getLengthHexFromValue();this.hTLV=this.hT+this.hL+this.hV;this.isModified=false}return this.hTLV};this.getValueHex=function(){this.getEncodedHex();return this.hV};this.getFreshValueHex=function(){return\"\"}};KJUR.asn1.DERAbstractString=function(c){KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var b=null;var a=null;this.getString=function(){return this.s};this.setString=function(d){this.hTLV=null;this.isModified=true;this.s=d;this.hV=stohex(this.s)};this.setStringHex=function(d){this.hTLV=null;this.isModified=true;this.s=null;this.hV=d};this.getFreshValueHex=function(){return this.hV};if(typeof c!=\"undefined\"){if(typeof c==\"string\"){this.setString(c)}else{if(typeof c.str!=\"undefined\"){this.setString(c.str)}else{if(typeof c.hex!=\"undefined\"){this.setStringHex(c.hex)}}}}};YAHOO.lang.extend(KJUR.asn1.DERAbstractString,KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractTime=function(c){KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);var b=null;var a=null;this.localDateToUTC=function(f){utc=f.getTime()+(f.getTimezoneOffset()*60000);var e=new Date(utc);return e};this.formatDate=function(m,o,e){var g=this.zeroPadding;var n=this.localDateToUTC(m);var p=String(n.getFullYear());if(o==\"utc\"){p=p.substr(2,2)}var l=g(String(n.getMonth()+1),2);var q=g(String(n.getDate()),2);var h=g(String(n.getHours()),2);var i=g(String(n.getMinutes()),2);var j=g(String(n.getSeconds()),2);var r=p+l+q+h+i+j;if(e===true){var f=n.getMilliseconds();if(f!=0){var k=g(String(f),3);k=k.replace(/[0]+$/,\"\");r=r+\".\"+k}}return r+\"Z\"};this.zeroPadding=function(e,d){if(e.length>=d){return e}return new Array(d-e.length+1).join(\"0\")+e};this.getString=function(){return this.s};this.setString=function(d){this.hTLV=null;this.isModified=true;this.s=d;this.hV=stohex(d)};this.setByDateValue=function(h,j,e,d,f,g){var i=new Date(Date.UTC(h,j-1,e,d,f,g,0));this.setByDate(i)};this.getFreshValueHex=function(){return this.hV}};YAHOO.lang.extend(KJUR.asn1.DERAbstractTime,KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractStructured=function(b){KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var a=null;this.setByASN1ObjectArray=function(c){this.hTLV=null;this.isModified=true;this.asn1Array=c};this.appendASN1Object=function(c){this.hTLV=null;this.isModified=true;this.asn1Array.push(c)};this.asn1Array=new Array();if(typeof b!=\"undefined\"){if(typeof b.array!=\"undefined\"){this.asn1Array=b.array}}};YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured,KJUR.asn1.ASN1Object);KJUR.asn1.DERBoolean=function(){KJUR.asn1.DERBoolean.superclass.constructor.call(this);this.hT=\"01\";this.hTLV=\"0101ff\"};YAHOO.lang.extend(KJUR.asn1.DERBoolean,KJUR.asn1.ASN1Object);KJUR.asn1.DERInteger=function(a){KJUR.asn1.DERInteger.superclass.constructor.call(this);this.hT=\"02\";this.setByBigInteger=function(b){this.hTLV=null;this.isModified=true;this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b)};this.setByInteger=function(c){var b=new BigInteger(String(c),10);this.setByBigInteger(b)};this.setValueHex=function(b){this.hV=b};this.getFreshValueHex=function(){return this.hV};if(typeof a!=\"undefined\"){if(typeof a.bigint!=\"undefined\"){this.setByBigInteger(a.bigint)}else{if(typeof a[\"int\"]!=\"undefined\"){this.setByInteger(a[\"int\"])}else{if(typeof a==\"number\"){this.setByInteger(a)}else{if(typeof a.hex!=\"undefined\"){this.setValueHex(a.hex)}}}}}};YAHOO.lang.extend(KJUR.asn1.DERInteger,KJUR.asn1.ASN1Object);KJUR.asn1.DERBitString=function(a){KJUR.asn1.DERBitString.superclass.constructor.call(this);this.hT=\"03\";this.setHexValueIncludingUnusedBits=function(b){this.hTLV=null;this.isModified=true;this.hV=b};this.setUnusedBitsAndHexValue=function(b,d){if(b<0||7<b){throw\"unused bits shall be from 0 to 7: u = \"+b}var c=\"0\"+b;this.hTLV=null;this.isModified=true;this.hV=c+d};this.setByBinaryString=function(e){e=e.replace(/0+$/,\"\");var f=8-e.length%8;if(f==8){f=0}for(var g=0;g<=f;g++){e+=\"0\"}var j=\"\";for(var g=0;g<e.length-1;g+=8){var d=e.substr(g,8);var c=parseInt(d,2).toString(16);if(c.length==1){c=\"0\"+c}j+=c}this.hTLV=null;this.isModified=true;this.hV=\"0\"+f+j};this.setByBooleanArray=function(d){var c=\"\";for(var b=0;b<d.length;b++){if(d[b]==true){c+=\"1\"}else{c+=\"0\"}}this.setByBinaryString(c)};this.newFalseArray=function(d){var b=new Array(d);for(var c=0;c<d;c++){b[c]=false}return b};this.getFreshValueHex=function(){return this.hV};if(typeof a!=\"undefined\"){if(typeof a==\"string\"&&a.toLowerCase().match(/^[0-9a-f]+$/)){this.setHexValueIncludingUnusedBits(a)}else{if(typeof a.hex!=\"undefined\"){this.setHexValueIncludingUnusedBits(a.hex)}else{if(typeof a.bin!=\"undefined\"){this.setByBinaryString(a.bin)}else{if(typeof a.array!=\"undefined\"){this.setByBooleanArray(a.array)}}}}}};YAHOO.lang.extend(KJUR.asn1.DERBitString,KJUR.asn1.ASN1Object);KJUR.asn1.DEROctetString=function(a){KJUR.asn1.DEROctetString.superclass.constructor.call(this,a);this.hT=\"04\"};YAHOO.lang.extend(KJUR.asn1.DEROctetString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERNull=function(){KJUR.asn1.DERNull.superclass.constructor.call(this);this.hT=\"05\";this.hTLV=\"0500\"};YAHOO.lang.extend(KJUR.asn1.DERNull,KJUR.asn1.ASN1Object);KJUR.asn1.DERObjectIdentifier=function(c){var b=function(d){var e=d.toString(16);if(e.length==1){e=\"0\"+e}return e};var a=function(k){var j=\"\";var e=new BigInteger(k,10);var d=e.toString(2);var f=7-d.length%7;if(f==7){f=0}var m=\"\";for(var g=0;g<f;g++){m+=\"0\"}d=m+d;for(var g=0;g<d.length-1;g+=7){var l=d.substr(g,7);if(g!=d.length-7){l=\"1\"+l}j+=b(parseInt(l,2))}return j};KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);this.hT=\"06\";this.setValueHex=function(d){this.hTLV=null;this.isModified=true;this.s=null;this.hV=d};this.setValueOidString=function(f){if(!f.match(/^[0-9.]+$/)){throw\"malformed oid string: \"+f}var g=\"\";var d=f.split(\".\");var j=parseInt(d[0])*40+parseInt(d[1]);g+=b(j);d.splice(0,2);for(var e=0;e<d.length;e++){g+=a(d[e])}this.hTLV=null;this.isModified=true;this.s=null;this.hV=g};this.setValueName=function(e){if(typeof KJUR.asn1.x509.OID.name2oidList[e]!=\"undefined\"){var d=KJUR.asn1.x509.OID.name2oidList[e];this.setValueOidString(d)}else{throw\"DERObjectIdentifier oidName undefined: \"+e}};this.getFreshValueHex=function(){return this.hV};if(typeof c!=\"undefined\"){if(typeof c==\"string\"&&c.match(/^[0-2].[0-9.]+$/)){this.setValueOidString(c)}else{if(KJUR.asn1.x509.OID.name2oidList[c]!==undefined){this.setValueOidString(KJUR.asn1.x509.OID.name2oidList[c])}else{if(typeof c.oid!=\"undefined\"){this.setValueOidString(c.oid)}else{if(typeof c.hex!=\"undefined\"){this.setValueHex(c.hex)}else{if(typeof c.name!=\"undefined\"){this.setValueName(c.name)}}}}}}};YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.DEREnumerated=function(a){KJUR.asn1.DEREnumerated.superclass.constructor.call(this);this.hT=\"0a\";this.setByBigInteger=function(b){this.hTLV=null;this.isModified=true;this.hV=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b)};this.setByInteger=function(c){var b=new BigInteger(String(c),10);this.setByBigInteger(b)};this.setValueHex=function(b){this.hV=b};this.getFreshValueHex=function(){return this.hV};if(typeof a!=\"undefined\"){if(typeof a[\"int\"]!=\"undefined\"){this.setByInteger(a[\"int\"])}else{if(typeof a==\"number\"){this.setByInteger(a)}else{if(typeof a.hex!=\"undefined\"){this.setValueHex(a.hex)}}}}};YAHOO.lang.extend(KJUR.asn1.DEREnumerated,KJUR.asn1.ASN1Object);KJUR.asn1.DERUTF8String=function(a){KJUR.asn1.DERUTF8String.superclass.constructor.call(this,a);this.hT=\"0c\"};YAHOO.lang.extend(KJUR.asn1.DERUTF8String,KJUR.asn1.DERAbstractString);KJUR.asn1.DERNumericString=function(a){KJUR.asn1.DERNumericString.superclass.constructor.call(this,a);this.hT=\"12\"};YAHOO.lang.extend(KJUR.asn1.DERNumericString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERPrintableString=function(a){KJUR.asn1.DERPrintableString.superclass.constructor.call(this,a);this.hT=\"13\"};YAHOO.lang.extend(KJUR.asn1.DERPrintableString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERTeletexString=function(a){KJUR.asn1.DERTeletexString.superclass.constructor.call(this,a);this.hT=\"14\"};YAHOO.lang.extend(KJUR.asn1.DERTeletexString,KJUR.asn1.DERAbstractString);KJUR.asn1.DERIA5String=function(a){KJUR.asn1.DERIA5String.superclass.constructor.call(this,a);this.hT=\"16\"};YAHOO.lang.extend(KJUR.asn1.DERIA5String,KJUR.asn1.DERAbstractString);KJUR.asn1.DERUTCTime=function(a){KJUR.asn1.DERUTCTime.superclass.constructor.call(this,a);this.hT=\"17\";this.setByDate=function(b){this.hTLV=null;this.isModified=true;this.date=b;this.s=this.formatDate(this.date,\"utc\");this.hV=stohex(this.s)};this.getFreshValueHex=function(){if(typeof this.date==\"undefined\"&&typeof this.s==\"undefined\"){this.date=new Date();this.s=this.formatDate(this.date,\"utc\");this.hV=stohex(this.s)}return this.hV};if(a!==undefined){if(a.str!==undefined){this.setString(a.str)}else{if(typeof a==\"string\"&&a.match(/^[0-9]{12}Z$/)){this.setString(a)}else{if(a.hex!==undefined){this.setStringHex(a.hex)}else{if(a.date!==undefined){this.setByDate(a.date)}}}}}};YAHOO.lang.extend(KJUR.asn1.DERUTCTime,KJUR.asn1.DERAbstractTime);KJUR.asn1.DERGeneralizedTime=function(a){KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this,a);this.hT=\"18\";this.withMillis=false;this.setByDate=function(b){this.hTLV=null;this.isModified=true;this.date=b;this.s=this.formatDate(this.date,\"gen\",this.withMillis);this.hV=stohex(this.s)};this.getFreshValueHex=function(){if(this.date===undefined&&this.s===undefined){this.date=new Date();this.s=this.formatDate(this.date,\"gen\",this.withMillis);this.hV=stohex(this.s)}return this.hV};if(a!==undefined){if(a.str!==undefined){this.setString(a.str)}else{if(typeof a==\"string\"&&a.match(/^[0-9]{14}Z$/)){this.setString(a)}else{if(a.hex!==undefined){this.setStringHex(a.hex)}else{if(a.date!==undefined){this.setByDate(a.date)}}}}if(a.millis===true){this.withMillis=true}}};YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime,KJUR.asn1.DERAbstractTime);KJUR.asn1.DERSequence=function(a){KJUR.asn1.DERSequence.superclass.constructor.call(this,a);this.hT=\"30\";this.getFreshValueHex=function(){var c=\"\";for(var b=0;b<this.asn1Array.length;b++){var d=this.asn1Array[b];c+=d.getEncodedHex()}this.hV=c;return this.hV}};YAHOO.lang.extend(KJUR.asn1.DERSequence,KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERSet=function(a){KJUR.asn1.DERSet.superclass.constructor.call(this,a);this.hT=\"31\";this.sortFlag=true;this.getFreshValueHex=function(){var b=new Array();for(var c=0;c<this.asn1Array.length;c++){var d=this.asn1Array[c];b.push(d.getEncodedHex())}if(this.sortFlag==true){b.sort()}this.hV=b.join(\"\");return this.hV};if(typeof a!=\"undefined\"){if(typeof a.sortflag!=\"undefined\"&&a.sortflag==false){this.sortFlag=false}}};YAHOO.lang.extend(KJUR.asn1.DERSet,KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERTaggedObject=function(a){KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);this.hT=\"a0\";this.hV=\"\";this.isExplicit=true;this.asn1Object=null;this.setASN1Object=function(b,c,d){this.hT=c;this.isExplicit=b;this.asn1Object=d;if(this.isExplicit){this.hV=this.asn1Object.getEncodedHex();this.hTLV=null;this.isModified=true}else{this.hV=null;this.hTLV=d.getEncodedHex();this.hTLV=this.hTLV.replace(/^../,c);this.isModified=false}};this.getFreshValueHex=function(){return this.hV};if(typeof a!=\"undefined\"){if(typeof a.tag!=\"undefined\"){this.hT=a.tag}if(typeof a.explicit!=\"undefined\"){this.isExplicit=a.explicit}if(typeof a.obj!=\"undefined\"){this.asn1Object=a.obj;this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)}}};YAHOO.lang.extend(KJUR.asn1.DERTaggedObject,KJUR.asn1.ASN1Object);\n\t/*! asn1hex-1.1.6.js (c) 2012-2015 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tvar ASN1HEX=new function(){this.getByteLengthOfL_AtObj=function(b,c){if(b.substring(c+2,c+3)!=\"8\"){return 1}var a=parseInt(b.substring(c+3,c+4));if(a==0){return -1}if(0<a&&a<10){return a+1}return -2};this.getHexOfL_AtObj=function(b,c){var a=this.getByteLengthOfL_AtObj(b,c);if(a<1){return\"\"}return b.substring(c+2,c+2+a*2)};this.getIntOfL_AtObj=function(c,d){var b=this.getHexOfL_AtObj(c,d);if(b==\"\"){return -1}var a;if(parseInt(b.substring(0,1))<8){a=new BigInteger(b,16)}else{a=new BigInteger(b.substring(2),16)}return a.intValue()};this.getStartPosOfV_AtObj=function(b,c){var a=this.getByteLengthOfL_AtObj(b,c);if(a<0){return a}return c+(a+1)*2};this.getHexOfV_AtObj=function(c,d){var b=this.getStartPosOfV_AtObj(c,d);var a=this.getIntOfL_AtObj(c,d);return c.substring(b,b+a*2)};this.getHexOfTLV_AtObj=function(c,e){var b=c.substr(e,2);var d=this.getHexOfL_AtObj(c,e);var a=this.getHexOfV_AtObj(c,e);return b+d+a};this.getPosOfNextSibling_AtObj=function(c,d){var b=this.getStartPosOfV_AtObj(c,d);var a=this.getIntOfL_AtObj(c,d);return b+a*2};this.getPosArrayOfChildren_AtObj=function(f,j){var c=new Array();var i=this.getStartPosOfV_AtObj(f,j);c.push(i);var b=this.getIntOfL_AtObj(f,j);var g=i;var d=0;while(1){var e=this.getPosOfNextSibling_AtObj(f,g);if(e==null||(e-i>=(b*2))){break}if(d>=200){break}c.push(e);g=e;d++}return c};this.getNthChildIndex_AtObj=function(d,b,e){var c=this.getPosArrayOfChildren_AtObj(d,b);return c[e]};this.getDecendantIndexByNthList=function(e,d,c){if(c.length==0){return d}var f=c.shift();var b=this.getPosArrayOfChildren_AtObj(e,d);return this.getDecendantIndexByNthList(e,b[f],c)};this.getDecendantHexTLVByNthList=function(d,c,b){var a=this.getDecendantIndexByNthList(d,c,b);return this.getHexOfTLV_AtObj(d,a)};this.getDecendantHexVByNthList=function(d,c,b){var a=this.getDecendantIndexByNthList(d,c,b);return this.getHexOfV_AtObj(d,a)}};ASN1HEX.getVbyList=function(d,c,b,e){var a=this.getDecendantIndexByNthList(d,c,b);if(a===undefined){throw\"can't find nthList object\"}if(e!==undefined){if(d.substr(a,2)!=e){throw\"checking tag doesn't match: \"+d.substr(a,2)+\"!=\"+e}}return this.getHexOfV_AtObj(d,a)};ASN1HEX.hextooidstr=function(e){var h=function(b,a){if(b.length>=a){return b}return new Array(a-b.length+1).join(\"0\")+b};var l=[];var o=e.substr(0,2);var f=parseInt(o,16);l[0]=new String(Math.floor(f/40));l[1]=new String(f%40);var m=e.substr(2);var k=[];for(var g=0;g<m.length/2;g++){k.push(parseInt(m.substr(g*2,2),16))}var j=[];var d=\"\";for(var g=0;g<k.length;g++){if(k[g]&128){d=d+h((k[g]&127).toString(2),7)}else{d=d+h((k[g]&127).toString(2),7);j.push(new String(parseInt(d,2)));d=\"\"}}var n=l.join(\".\");if(j.length>0){n=n+\".\"+j.join(\".\")}return n};ASN1HEX.dump=function(e,c,k,g){var o=function(w,i){if(w.length<=i*2){return w}else{var v=w.substr(0,i)+\"..(total \"+w.length/2+\"bytes)..\"+w.substr(w.length-i,i);return v}};if(c===undefined){c={ommit_long_octet:32}}if(k===undefined){k=0}if(g===undefined){g=\"\"}var r=c.ommit_long_octet;if(e.substr(k,2)==\"01\"){var h=ASN1HEX.getHexOfV_AtObj(e,k);if(h==\"00\"){return g+\"BOOLEAN FALSE\\n\"}else{return g+\"BOOLEAN TRUE\\n\"}}if(e.substr(k,2)==\"02\"){var h=ASN1HEX.getHexOfV_AtObj(e,k);return g+\"INTEGER \"+o(h,r)+\"\\n\"}if(e.substr(k,2)==\"03\"){var h=ASN1HEX.getHexOfV_AtObj(e,k);return g+\"BITSTRING \"+o(h,r)+\"\\n\"}if(e.substr(k,2)==\"04\"){var h=ASN1HEX.getHexOfV_AtObj(e,k);if(ASN1HEX.isASN1HEX(h)){var j=g+\"OCTETSTRING, encapsulates\\n\";j=j+ASN1HEX.dump(h,c,0,g+\"  \");return j}else{return g+\"OCTETSTRING \"+o(h,r)+\"\\n\"}}if(e.substr(k,2)==\"05\"){return g+\"NULL\\n\"}if(e.substr(k,2)==\"06\"){var l=ASN1HEX.getHexOfV_AtObj(e,k);var a=KJUR.asn1.ASN1Util.oidHexToInt(l);var n=KJUR.asn1.x509.OID.oid2name(a);var b=a.replace(/\\./g,\" \");if(n!=\"\"){return g+\"ObjectIdentifier \"+n+\" (\"+b+\")\\n\"}else{return g+\"ObjectIdentifier (\"+b+\")\\n\"}}if(e.substr(k,2)==\"0c\"){return g+\"UTF8String '\"+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+\"'\\n\"}if(e.substr(k,2)==\"13\"){return g+\"PrintableString '\"+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+\"'\\n\"}if(e.substr(k,2)==\"14\"){return g+\"TeletexString '\"+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+\"'\\n\"}if(e.substr(k,2)==\"16\"){return g+\"IA5String '\"+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+\"'\\n\"}if(e.substr(k,2)==\"17\"){return g+\"UTCTime \"+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+\"\\n\"}if(e.substr(k,2)==\"18\"){return g+\"GeneralizedTime \"+hextoutf8(ASN1HEX.getHexOfV_AtObj(e,k))+\"\\n\"}if(e.substr(k,2)==\"30\"){if(e.substr(k,4)==\"3000\"){return g+\"SEQUENCE {}\\n\"}var j=g+\"SEQUENCE\\n\";var d=ASN1HEX.getPosArrayOfChildren_AtObj(e,k);var f=c;if((d.length==2||d.length==3)&&e.substr(d[0],2)==\"06\"&&e.substr(d[d.length-1],2)==\"04\"){var t=ASN1HEX.getHexOfV_AtObj(e,d[0]);var a=KJUR.asn1.ASN1Util.oidHexToInt(t);var n=KJUR.asn1.x509.OID.oid2name(a);var p=JSON.parse(JSON.stringify(c));p.x509ExtName=n;f=p}for(var q=0;q<d.length;q++){j=j+ASN1HEX.dump(e,f,d[q],g+\"  \")}return j}if(e.substr(k,2)==\"31\"){var j=g+\"SET\\n\";var d=ASN1HEX.getPosArrayOfChildren_AtObj(e,k);for(var q=0;q<d.length;q++){j=j+ASN1HEX.dump(e,c,d[q],g+\"  \")}return j}var u=parseInt(e.substr(k,2),16);if((u&128)!=0){var m=u&31;if((u&32)!=0){var j=g+\"[\"+m+\"]\\n\";var d=ASN1HEX.getPosArrayOfChildren_AtObj(e,k);for(var q=0;q<d.length;q++){j=j+ASN1HEX.dump(e,c,d[q],g+\"  \")}return j}else{var h=ASN1HEX.getHexOfV_AtObj(e,k);if(h.substr(0,8)==\"68747470\"){h=hextoutf8(h)}if(c.x509ExtName===\"subjectAltName\"&&m==2){h=hextoutf8(h)}var j=g+\"[\"+m+\"] \"+h+\"\\n\";return j}}return g+\"UNKNOWN(\"+e.substr(k,2)+\") \"+ASN1HEX.getHexOfV_AtObj(e,k)+\"\\n\"};ASN1HEX.isASN1HEX=function(d){if(d.length%2==1){return false}var c=ASN1HEX.getIntOfL_AtObj(d,0);var b=d.substr(0,2);var e=ASN1HEX.getHexOfL_AtObj(d,0);var a=d.length-b.length-e.length;if(a==c*2){return true}return false};\n\t/*! asn1x509-1.0.14.js (c) 2013-2015 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.asn1==\"undefined\"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.x509==\"undefined\"||!KJUR.asn1.x509){KJUR.asn1.x509={}}KJUR.asn1.x509.Certificate=function(g){KJUR.asn1.x509.Certificate.superclass.constructor.call(this);var b=null;var d=null;var f=null;var c=null;var a=null;var e=null;this.setRsaPrvKeyByPEMandPass=function(i,k){var h=PKCS5PKEY.getDecryptedKeyHex(i,k);var j=new RSAKey();j.readPrivateKeyFromASN1HexString(h);this.prvKey=j};this.sign=function(){this.asn1SignatureAlg=this.asn1TBSCert.asn1SignatureAlg;sig=new KJUR.crypto.Signature({alg:\"SHA1withRSA\"});sig.init(this.prvKey);sig.updateHex(this.asn1TBSCert.getEncodedHex());this.hexSig=sig.sign();this.asn1Sig=new KJUR.asn1.DERBitString({hex:\"00\"+this.hexSig});var h=new KJUR.asn1.DERSequence({array:[this.asn1TBSCert,this.asn1SignatureAlg,this.asn1Sig]});this.hTLV=h.getEncodedHex();this.isModified=false};this.setSignatureHex=function(h){this.asn1SignatureAlg=this.asn1TBSCert.asn1SignatureAlg;this.hexSig=h;this.asn1Sig=new KJUR.asn1.DERBitString({hex:\"00\"+this.hexSig});var i=new KJUR.asn1.DERSequence({array:[this.asn1TBSCert,this.asn1SignatureAlg,this.asn1Sig]});this.hTLV=i.getEncodedHex();this.isModified=false};this.getEncodedHex=function(){if(this.isModified==false&&this.hTLV!=null){return this.hTLV}throw\"not signed yet\"};this.getPEMString=function(){var j=this.getEncodedHex();var h=CryptoJS.enc.Hex.parse(j);var i=CryptoJS.enc.Base64.stringify(h);var k=i.replace(/(.{64})/g,\"$1\\r\\n\");return\"-----BEGIN CERTIFICATE-----\\r\\n\"+k+\"\\r\\n-----END CERTIFICATE-----\\r\\n\"};if(typeof g!=\"undefined\"){if(typeof g.tbscertobj!=\"undefined\"){this.asn1TBSCert=g.tbscertobj}if(typeof g.prvkeyobj!=\"undefined\"){this.prvKey=g.prvkeyobj}else{if(typeof g.rsaprvkey!=\"undefined\"){this.prvKey=g.rsaprvkey}else{if((typeof g.rsaprvpem!=\"undefined\")&&(typeof g.rsaprvpas!=\"undefined\")){this.setRsaPrvKeyByPEMandPass(g.rsaprvpem,g.rsaprvpas)}}}}};YAHOO.lang.extend(KJUR.asn1.x509.Certificate,KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertificate=function(a){KJUR.asn1.x509.TBSCertificate.superclass.constructor.call(this);this._initialize=function(){this.asn1Array=new Array();this.asn1Version=new KJUR.asn1.DERTaggedObject({obj:new KJUR.asn1.DERInteger({\"int\":2})});this.asn1SerialNumber=null;this.asn1SignatureAlg=null;this.asn1Issuer=null;this.asn1NotBefore=null;this.asn1NotAfter=null;this.asn1Subject=null;this.asn1SubjPKey=null;this.extensionsArray=new Array()};this.setSerialNumberByParam=function(b){this.asn1SerialNumber=new KJUR.asn1.DERInteger(b)};this.setSignatureAlgByParam=function(b){this.asn1SignatureAlg=new KJUR.asn1.x509.AlgorithmIdentifier(b)};this.setIssuerByParam=function(b){this.asn1Issuer=new KJUR.asn1.x509.X500Name(b)};this.setNotBeforeByParam=function(b){this.asn1NotBefore=new KJUR.asn1.x509.Time(b)};this.setNotAfterByParam=function(b){this.asn1NotAfter=new KJUR.asn1.x509.Time(b)};this.setSubjectByParam=function(b){this.asn1Subject=new KJUR.asn1.x509.X500Name(b)};this.setSubjectPublicKeyByParam=function(b){this.asn1SubjPKey=new KJUR.asn1.x509.SubjectPublicKeyInfo(b)};this.setSubjectPublicKeyByGetKey=function(c){var b=KEYUTIL.getKey(c);this.asn1SubjPKey=new KJUR.asn1.x509.SubjectPublicKeyInfo(b)};this.appendExtension=function(b){this.extensionsArray.push(b)};this.appendExtensionByName=function(d,b){if(d.toLowerCase()==\"basicconstraints\"){var c=new KJUR.asn1.x509.BasicConstraints(b);this.appendExtension(c)}else{if(d.toLowerCase()==\"keyusage\"){var c=new KJUR.asn1.x509.KeyUsage(b);this.appendExtension(c)}else{if(d.toLowerCase()==\"crldistributionpoints\"){var c=new KJUR.asn1.x509.CRLDistributionPoints(b);this.appendExtension(c)}else{if(d.toLowerCase()==\"extkeyusage\"){var c=new KJUR.asn1.x509.ExtKeyUsage(b);this.appendExtension(c)}else{if(d.toLowerCase()==\"authoritykeyidentifier\"){var c=new KJUR.asn1.x509.AuthorityKeyIdentifier(b);this.appendExtension(c)}else{throw\"unsupported extension name: \"+d}}}}}};this.getEncodedHex=function(){if(this.asn1NotBefore==null||this.asn1NotAfter==null){throw\"notBefore and/or notAfter not set\"}var c=new KJUR.asn1.DERSequence({array:[this.asn1NotBefore,this.asn1NotAfter]});this.asn1Array=new Array();this.asn1Array.push(this.asn1Version);this.asn1Array.push(this.asn1SerialNumber);this.asn1Array.push(this.asn1SignatureAlg);this.asn1Array.push(this.asn1Issuer);this.asn1Array.push(c);this.asn1Array.push(this.asn1Subject);this.asn1Array.push(this.asn1SubjPKey);if(this.extensionsArray.length>0){var d=new KJUR.asn1.DERSequence({array:this.extensionsArray});var b=new KJUR.asn1.DERTaggedObject({explicit:true,tag:\"a3\",obj:d});this.asn1Array.push(b)}var e=new KJUR.asn1.DERSequence({array:this.asn1Array});this.hTLV=e.getEncodedHex();this.isModified=false;return this.hTLV};this._initialize()};YAHOO.lang.extend(KJUR.asn1.x509.TBSCertificate,KJUR.asn1.ASN1Object);KJUR.asn1.x509.Extension=function(b){KJUR.asn1.x509.Extension.superclass.constructor.call(this);var a=null;this.getEncodedHex=function(){var f=new KJUR.asn1.DERObjectIdentifier({oid:this.oid});var e=new KJUR.asn1.DEROctetString({hex:this.getExtnValueHex()});var d=new Array();d.push(f);if(this.critical){d.push(new KJUR.asn1.DERBoolean())}d.push(e);var c=new KJUR.asn1.DERSequence({array:d});return c.getEncodedHex()};this.critical=false;if(typeof b!=\"undefined\"){if(typeof b.critical!=\"undefined\"){this.critical=b.critical}}};YAHOO.lang.extend(KJUR.asn1.x509.Extension,KJUR.asn1.ASN1Object);KJUR.asn1.x509.KeyUsage=function(a){KJUR.asn1.x509.KeyUsage.superclass.constructor.call(this,a);this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.oid=\"2.5.29.15\";if(typeof a!=\"undefined\"){if(typeof a.bin!=\"undefined\"){this.asn1ExtnValue=new KJUR.asn1.DERBitString(a)}}};YAHOO.lang.extend(KJUR.asn1.x509.KeyUsage,KJUR.asn1.x509.Extension);KJUR.asn1.x509.BasicConstraints=function(c){KJUR.asn1.x509.BasicConstraints.superclass.constructor.call(this,c);var a=false;var b=-1;this.getExtnValueHex=function(){var e=new Array();if(this.cA){e.push(new KJUR.asn1.DERBoolean())}if(this.pathLen>-1){e.push(new KJUR.asn1.DERInteger({\"int\":this.pathLen}))}var d=new KJUR.asn1.DERSequence({array:e});this.asn1ExtnValue=d;return this.asn1ExtnValue.getEncodedHex()};this.oid=\"2.5.29.19\";this.cA=false;this.pathLen=-1;if(typeof c!=\"undefined\"){if(typeof c.cA!=\"undefined\"){this.cA=c.cA}if(typeof c.pathLen!=\"undefined\"){this.pathLen=c.pathLen}}};YAHOO.lang.extend(KJUR.asn1.x509.BasicConstraints,KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRLDistributionPoints=function(a){KJUR.asn1.x509.CRLDistributionPoints.superclass.constructor.call(this,a);this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.setByDPArray=function(b){this.asn1ExtnValue=new KJUR.asn1.DERSequence({array:b})};this.setByOneURI=function(e){var b=new KJUR.asn1.x509.GeneralNames([{uri:e}]);var d=new KJUR.asn1.x509.DistributionPointName(b);var c=new KJUR.asn1.x509.DistributionPoint({dpobj:d});this.setByDPArray([c])};this.oid=\"2.5.29.31\";if(typeof a!=\"undefined\"){if(typeof a.array!=\"undefined\"){this.setByDPArray(a.array)}else{if(typeof a.uri!=\"undefined\"){this.setByOneURI(a.uri)}}}};YAHOO.lang.extend(KJUR.asn1.x509.CRLDistributionPoints,KJUR.asn1.x509.Extension);KJUR.asn1.x509.ExtKeyUsage=function(a){KJUR.asn1.x509.ExtKeyUsage.superclass.constructor.call(this,a);this.setPurposeArray=function(b){this.asn1ExtnValue=new KJUR.asn1.DERSequence();for(var c=0;c<b.length;c++){var d=new KJUR.asn1.DERObjectIdentifier(b[c]);this.asn1ExtnValue.appendASN1Object(d)}};this.getExtnValueHex=function(){return this.asn1ExtnValue.getEncodedHex()};this.oid=\"2.5.29.37\";if(typeof a!=\"undefined\"){if(typeof a.array!=\"undefined\"){this.setPurposeArray(a.array)}}};YAHOO.lang.extend(KJUR.asn1.x509.ExtKeyUsage,KJUR.asn1.x509.Extension);KJUR.asn1.x509.AuthorityKeyIdentifier=function(a){KJUR.asn1.x509.AuthorityKeyIdentifier.superclass.constructor.call(this,a);this.asn1KID=null;this.asn1CertIssuer=null;this.asn1CertSN=null;this.getExtnValueHex=function(){var c=new Array();if(this.asn1KID){c.push(new KJUR.asn1.DERTaggedObject({explicit:false,tag:\"80\",obj:this.asn1KID}))}if(this.asn1CertIssuer){c.push(new KJUR.asn1.DERTaggedObject({explicit:false,tag:\"a1\",obj:this.asn1CertIssuer}))}if(this.asn1CertSN){c.push(new KJUR.asn1.DERTaggedObject({explicit:false,tag:\"82\",obj:this.asn1CertSN}))}var b=new KJUR.asn1.DERSequence({array:c});this.asn1ExtnValue=b;return this.asn1ExtnValue.getEncodedHex()};this.setKIDByParam=function(b){this.asn1KID=new KJUR.asn1.DEROctetString(b)};this.setCertIssuerByParam=function(b){this.asn1CertIssuer=new KJUR.asn1.x509.X500Name(b)};this.setCertSNByParam=function(b){this.asn1CertSN=new KJUR.asn1.DERInteger(b)};this.oid=\"2.5.29.35\";if(typeof a!=\"undefined\"){if(typeof a.kid!=\"undefined\"){this.setKIDByParam(a.kid)}if(typeof a.issuer!=\"undefined\"){this.setCertIssuerByParam(a.issuer)}if(typeof a.sn!=\"undefined\"){this.setCertSNByParam(a.sn)}}};YAHOO.lang.extend(KJUR.asn1.x509.AuthorityKeyIdentifier,KJUR.asn1.x509.Extension);KJUR.asn1.x509.CRL=function(f){KJUR.asn1.x509.CRL.superclass.constructor.call(this);var a=null;var c=null;var e=null;var b=null;var d=null;this.setRsaPrvKeyByPEMandPass=function(h,j){var g=PKCS5PKEY.getDecryptedKeyHex(h,j);var i=new RSAKey();i.readPrivateKeyFromASN1HexString(g);this.rsaPrvKey=i};this.sign=function(){this.asn1SignatureAlg=this.asn1TBSCertList.asn1SignatureAlg;sig=new KJUR.crypto.Signature({alg:\"SHA1withRSA\",prov:\"cryptojs/jsrsa\"});sig.initSign(this.rsaPrvKey);sig.updateHex(this.asn1TBSCertList.getEncodedHex());this.hexSig=sig.sign();this.asn1Sig=new KJUR.asn1.DERBitString({hex:\"00\"+this.hexSig});var g=new KJUR.asn1.DERSequence({array:[this.asn1TBSCertList,this.asn1SignatureAlg,this.asn1Sig]});this.hTLV=g.getEncodedHex();this.isModified=false};this.getEncodedHex=function(){if(this.isModified==false&&this.hTLV!=null){return this.hTLV}throw\"not signed yet\"};this.getPEMString=function(){var i=this.getEncodedHex();var g=CryptoJS.enc.Hex.parse(i);var h=CryptoJS.enc.Base64.stringify(g);var j=h.replace(/(.{64})/g,\"$1\\r\\n\");return\"-----BEGIN X509 CRL-----\\r\\n\"+j+\"\\r\\n-----END X509 CRL-----\\r\\n\"};if(typeof f!=\"undefined\"){if(typeof f.tbsobj!=\"undefined\"){this.asn1TBSCertList=f.tbsobj}if(typeof f.rsaprvkey!=\"undefined\"){this.rsaPrvKey=f.rsaprvkey}if((typeof f.rsaprvpem!=\"undefined\")&&(typeof f.rsaprvpas!=\"undefined\")){this.setRsaPrvKeyByPEMandPass(f.rsaprvpem,f.rsaprvpas)}}};YAHOO.lang.extend(KJUR.asn1.x509.CRL,KJUR.asn1.ASN1Object);KJUR.asn1.x509.TBSCertList=function(b){KJUR.asn1.x509.TBSCertList.superclass.constructor.call(this);var a=null;this.setSignatureAlgByParam=function(c){this.asn1SignatureAlg=new KJUR.asn1.x509.AlgorithmIdentifier(c)};this.setIssuerByParam=function(c){this.asn1Issuer=new KJUR.asn1.x509.X500Name(c)};this.setThisUpdateByParam=function(c){this.asn1ThisUpdate=new KJUR.asn1.x509.Time(c)};this.setNextUpdateByParam=function(c){this.asn1NextUpdate=new KJUR.asn1.x509.Time(c)};this.addRevokedCert=function(c,d){var f={};if(c!=undefined&&c!=null){f.sn=c}if(d!=undefined&&d!=null){f.time=d}var e=new KJUR.asn1.x509.CRLEntry(f);this.aRevokedCert.push(e)};this.getEncodedHex=function(){this.asn1Array=new Array();if(this.asn1Version!=null){this.asn1Array.push(this.asn1Version)}this.asn1Array.push(this.asn1SignatureAlg);this.asn1Array.push(this.asn1Issuer);this.asn1Array.push(this.asn1ThisUpdate);if(this.asn1NextUpdate!=null){this.asn1Array.push(this.asn1NextUpdate)}if(this.aRevokedCert.length>0){var c=new KJUR.asn1.DERSequence({array:this.aRevokedCert});this.asn1Array.push(c)}var d=new KJUR.asn1.DERSequence({array:this.asn1Array});this.hTLV=d.getEncodedHex();this.isModified=false;return this.hTLV};this._initialize=function(){this.asn1Version=null;this.asn1SignatureAlg=null;this.asn1Issuer=null;this.asn1ThisUpdate=null;this.asn1NextUpdate=null;this.aRevokedCert=new Array()};this._initialize()};YAHOO.lang.extend(KJUR.asn1.x509.TBSCertList,KJUR.asn1.ASN1Object);KJUR.asn1.x509.CRLEntry=function(c){KJUR.asn1.x509.CRLEntry.superclass.constructor.call(this);var b=null;var a=null;this.setCertSerial=function(d){this.sn=new KJUR.asn1.DERInteger(d)};this.setRevocationDate=function(d){this.time=new KJUR.asn1.x509.Time(d)};this.getEncodedHex=function(){var d=new KJUR.asn1.DERSequence({array:[this.sn,this.time]});this.TLV=d.getEncodedHex();return this.TLV};if(typeof c!=\"undefined\"){if(typeof c.time!=\"undefined\"){this.setRevocationDate(c.time)}if(typeof c.sn!=\"undefined\"){this.setCertSerial(c.sn)}}};YAHOO.lang.extend(KJUR.asn1.x509.CRLEntry,KJUR.asn1.ASN1Object);KJUR.asn1.x509.X500Name=function(b){KJUR.asn1.x509.X500Name.superclass.constructor.call(this);this.asn1Array=new Array();this.setByString=function(c){var d=c.split(\"/\");d.shift();for(var e=0;e<d.length;e++){this.asn1Array.push(new KJUR.asn1.x509.RDN({str:d[e]}))}};this.setByObject=function(e){for(var c in e){if(e.hasOwnProperty(c)){var d=new KJUR.asn1.x509.RDN({str:c+\"=\"+e[c]});this.asn1Array?this.asn1Array.push(d):this.asn1Array=[d]}}};this.getEncodedHex=function(){if(typeof this.hTLV==\"string\"){return this.hTLV}var c=new KJUR.asn1.DERSequence({array:this.asn1Array});this.hTLV=c.getEncodedHex();return this.hTLV};if(typeof b!=\"undefined\"){if(typeof b.str!=\"undefined\"){this.setByString(b.str)}else{if(typeof b===\"object\"){this.setByObject(b)}}if(typeof b.certissuer!=\"undefined\"){var a=new X509();a.hex=X509.pemToHex(b.certissuer);this.hTLV=a.getIssuerHex()}if(typeof b.certsubject!=\"undefined\"){var a=new X509();a.hex=X509.pemToHex(b.certsubject);this.hTLV=a.getSubjectHex()}}};YAHOO.lang.extend(KJUR.asn1.x509.X500Name,KJUR.asn1.ASN1Object);KJUR.asn1.x509.RDN=function(a){KJUR.asn1.x509.RDN.superclass.constructor.call(this);this.asn1Array=new Array();this.addByString=function(b){this.asn1Array.push(new KJUR.asn1.x509.AttributeTypeAndValue({str:b}))};this.getEncodedHex=function(){var b=new KJUR.asn1.DERSet({array:this.asn1Array});this.TLV=b.getEncodedHex();return this.TLV};if(typeof a!=\"undefined\"){if(typeof a.str!=\"undefined\"){this.addByString(a.str)}}};YAHOO.lang.extend(KJUR.asn1.x509.RDN,KJUR.asn1.ASN1Object);KJUR.asn1.x509.AttributeTypeAndValue=function(b){KJUR.asn1.x509.AttributeTypeAndValue.superclass.constructor.call(this);var d=null;var c=null;var a=\"utf8\";this.setByString=function(e){if(e.match(/^([^=]+)=(.+)$/)){this.setByAttrTypeAndValueStr(RegExp.$1,RegExp.$2)}else{throw\"malformed attrTypeAndValueStr: \"+e}};this.setByAttrTypeAndValueStr=function(g,f){this.typeObj=KJUR.asn1.x509.OID.atype2obj(g);var e=a;if(g==\"C\"){e=\"prn\"}this.valueObj=this.getValueObj(e,f)};this.getValueObj=function(f,e){if(f==\"utf8\"){return new KJUR.asn1.DERUTF8String({str:e})}if(f==\"prn\"){return new KJUR.asn1.DERPrintableString({str:e})}if(f==\"tel\"){return new KJUR.asn1.DERTeletexString({str:e})}if(f==\"ia5\"){return new KJUR.asn1.DERIA5String({str:e})}throw\"unsupported directory string type: type=\"+f+\" value=\"+e};this.getEncodedHex=function(){var e=new KJUR.asn1.DERSequence({array:[this.typeObj,this.valueObj]});this.TLV=e.getEncodedHex();return this.TLV};if(typeof b!=\"undefined\"){if(typeof b.str!=\"undefined\"){this.setByString(b.str)}}};YAHOO.lang.extend(KJUR.asn1.x509.AttributeTypeAndValue,KJUR.asn1.ASN1Object);KJUR.asn1.x509.SubjectPublicKeyInfo=function(d){KJUR.asn1.x509.SubjectPublicKeyInfo.superclass.constructor.call(this);var b=null;var c=null;var a=null;this.setRSAKey=function(e){if(!RSAKey.prototype.isPrototypeOf(e)){throw\"argument is not RSAKey instance\"}this.rsaKey=e;var g=new KJUR.asn1.DERInteger({bigint:e.n});var f=new KJUR.asn1.DERInteger({\"int\":e.e});var i=new KJUR.asn1.DERSequence({array:[g,f]});var h=i.getEncodedHex();this.asn1AlgId=new KJUR.asn1.x509.AlgorithmIdentifier({name:\"rsaEncryption\"});this.asn1SubjPKey=new KJUR.asn1.DERBitString({hex:\"00\"+h})};this.setRSAPEM=function(g){if(g.match(/-----BEGIN PUBLIC KEY-----/)){var n=g;n=n.replace(/^-----[^-]+-----/,\"\");n=n.replace(/-----[^-]+-----\\s*$/,\"\");var m=n.replace(/\\s+/g,\"\");var f=CryptoJS.enc.Base64.parse(m);var i=CryptoJS.enc.Hex.stringify(f);var k=_rsapem_getHexValueArrayOfChildrenFromHex(i);var h=k[1];var l=h.substr(2);var e=_rsapem_getHexValueArrayOfChildrenFromHex(l);var j=new RSAKey();j.setPublic(e[0],e[1]);this.setRSAKey(j)}else{throw\"key not supported\"}};this.getASN1Object=function(){if(this.asn1AlgId==null||this.asn1SubjPKey==null){throw\"algId and/or subjPubKey not set\"}var e=new KJUR.asn1.DERSequence({array:[this.asn1AlgId,this.asn1SubjPKey]});return e};this.getEncodedHex=function(){var e=this.getASN1Object();this.hTLV=e.getEncodedHex();return this.hTLV};this._setRSAKey=function(e){var g=KJUR.asn1.ASN1Util.newObject({seq:[{\"int\":{bigint:e.n}},{\"int\":{\"int\":e.e}}]});var f=g.getEncodedHex();this.asn1AlgId=new KJUR.asn1.x509.AlgorithmIdentifier({name:\"rsaEncryption\"});this.asn1SubjPKey=new KJUR.asn1.DERBitString({hex:\"00\"+f})};this._setEC=function(e){var f=new KJUR.asn1.DERObjectIdentifier({name:e.curveName});this.asn1AlgId=new KJUR.asn1.x509.AlgorithmIdentifier({name:\"ecPublicKey\",asn1params:f});this.asn1SubjPKey=new KJUR.asn1.DERBitString({hex:\"00\"+e.pubKeyHex})};this._setDSA=function(e){var f=new KJUR.asn1.ASN1Util.newObject({seq:[{\"int\":{bigint:e.p}},{\"int\":{bigint:e.q}},{\"int\":{bigint:e.g}}]});this.asn1AlgId=new KJUR.asn1.x509.AlgorithmIdentifier({name:\"dsa\",asn1params:f});var g=new KJUR.asn1.DERInteger({bigint:e.y});this.asn1SubjPKey=new KJUR.asn1.DERBitString({hex:\"00\"+g.getEncodedHex()})};if(typeof d!=\"undefined\"){if(typeof RSAKey!=\"undefined\"&&d instanceof RSAKey){this._setRSAKey(d)}else{if(typeof KJUR.crypto.ECDSA!=\"undefined\"&&d instanceof KJUR.crypto.ECDSA){this._setEC(d)}else{if(typeof KJUR.crypto.DSA!=\"undefined\"&&d instanceof KJUR.crypto.DSA){this._setDSA(d)}else{if(typeof d.rsakey!=\"undefined\"){this.setRSAKey(d.rsakey)}else{if(typeof d.rsapem!=\"undefined\"){this.setRSAPEM(d.rsapem)}}}}}}};YAHOO.lang.extend(KJUR.asn1.x509.SubjectPublicKeyInfo,KJUR.asn1.ASN1Object);KJUR.asn1.x509.Time=function(c){KJUR.asn1.x509.Time.superclass.constructor.call(this);var b=null;var a=null;this.setTimeParams=function(d){this.timeParams=d};this.getEncodedHex=function(){var d=null;if(this.timeParams!=null){if(this.type==\"utc\"){d=new KJUR.asn1.DERUTCTime(this.timeParams)}else{d=new KJUR.asn1.DERGeneralizedTime(this.timeParams)}}else{if(this.type==\"utc\"){d=new KJUR.asn1.DERUTCTime()}else{d=new KJUR.asn1.DERGeneralizedTime()}}this.TLV=d.getEncodedHex();return this.TLV};this.type=\"utc\";if(typeof c!=\"undefined\"){if(typeof c.type!=\"undefined\"){this.type=c.type}else{if(typeof c.str!=\"undefined\"){if(c.str.match(/^[0-9]{12}Z$/)){this.type=\"utc\"}if(c.str.match(/^[0-9]{14}Z$/)){this.type=\"gen\"}}}this.timeParams=c}};YAHOO.lang.extend(KJUR.asn1.x509.Time,KJUR.asn1.ASN1Object);KJUR.asn1.x509.AlgorithmIdentifier=function(e){KJUR.asn1.x509.AlgorithmIdentifier.superclass.constructor.call(this);var a=null;var d=null;var b=null;var c=false;this.getEncodedHex=function(){if(this.nameAlg==null&&this.asn1Alg==null){throw\"algorithm not specified\"}if(this.nameAlg!=null&&this.asn1Alg==null){this.asn1Alg=KJUR.asn1.x509.OID.name2obj(this.nameAlg)}var f=[this.asn1Alg];if(!this.paramEmpty){f.push(this.asn1Params)}var g=new KJUR.asn1.DERSequence({array:f});this.hTLV=g.getEncodedHex();return this.hTLV};if(typeof e!=\"undefined\"){if(typeof e.name!=\"undefined\"){this.nameAlg=e.name}if(typeof e.asn1params!=\"undefined\"){this.asn1Params=e.asn1params}if(typeof e.paramempty!=\"undefined\"){this.paramEmpty=e.paramempty}}if(this.asn1Params==null){this.asn1Params=new KJUR.asn1.DERNull()}};YAHOO.lang.extend(KJUR.asn1.x509.AlgorithmIdentifier,KJUR.asn1.ASN1Object);KJUR.asn1.x509.GeneralName=function(d){KJUR.asn1.x509.GeneralName.superclass.constructor.call(this);var c=null;var b=null;var a={rfc822:\"81\",dns:\"82\",dn:\"a4\",uri:\"86\"};this.explicit=false;this.setByParam=function(k){var j=null;var g=null;if(typeof k==\"undefined\"){return}if(typeof k.rfc822!=\"undefined\"){this.type=\"rfc822\";g=new KJUR.asn1.DERIA5String({str:k[this.type]})}if(typeof k.dns!=\"undefined\"){this.type=\"dns\";g=new KJUR.asn1.DERIA5String({str:k[this.type]})}if(typeof k.uri!=\"undefined\"){this.type=\"uri\";g=new KJUR.asn1.DERIA5String({str:k[this.type]})}if(typeof k.certissuer!=\"undefined\"){this.type=\"dn\";this.explicit=true;var h=k.certissuer;var f=null;if(h.match(/^[0-9A-Fa-f]+$/)){f==h}if(h.indexOf(\"-----BEGIN \")!=-1){f=X509.pemToHex(h)}if(f==null){throw\"certissuer param not cert\"}var e=new X509();e.hex=f;var i=e.getIssuerHex();g=new KJUR.asn1.ASN1Object();g.hTLV=i}if(typeof k.certsubj!=\"undefined\"){this.type=\"dn\";this.explicit=true;var h=k.certsubj;var f=null;if(h.match(/^[0-9A-Fa-f]+$/)){f==h}if(h.indexOf(\"-----BEGIN \")!=-1){f=X509.pemToHex(h)}if(f==null){throw\"certsubj param not cert\"}var e=new X509();e.hex=f;var i=e.getSubjectHex();g=new KJUR.asn1.ASN1Object();g.hTLV=i}if(this.type==null){throw\"unsupported type in params=\"+k}this.asn1Obj=new KJUR.asn1.DERTaggedObject({explicit:this.explicit,tag:a[this.type],obj:g})};this.getEncodedHex=function(){return this.asn1Obj.getEncodedHex()};if(typeof d!=\"undefined\"){this.setByParam(d)}};YAHOO.lang.extend(KJUR.asn1.x509.GeneralName,KJUR.asn1.ASN1Object);KJUR.asn1.x509.GeneralNames=function(b){KJUR.asn1.x509.GeneralNames.superclass.constructor.call(this);var a=null;this.setByParamArray=function(e){for(var c=0;c<e.length;c++){var d=new KJUR.asn1.x509.GeneralName(e[c]);this.asn1Array.push(d)}};this.getEncodedHex=function(){var c=new KJUR.asn1.DERSequence({array:this.asn1Array});return c.getEncodedHex()};this.asn1Array=new Array();if(typeof b!=\"undefined\"){this.setByParamArray(b)}};YAHOO.lang.extend(KJUR.asn1.x509.GeneralNames,KJUR.asn1.ASN1Object);KJUR.asn1.x509.DistributionPointName=function(b){KJUR.asn1.x509.DistributionPointName.superclass.constructor.call(this);var e=null;var c=null;var a=null;var d=null;this.getEncodedHex=function(){if(this.type!=\"full\"){throw\"currently type shall be 'full': \"+this.type}this.asn1Obj=new KJUR.asn1.DERTaggedObject({explicit:false,tag:this.tag,obj:this.asn1V});this.hTLV=this.asn1Obj.getEncodedHex();return this.hTLV};if(typeof b!=\"undefined\"){if(KJUR.asn1.x509.GeneralNames.prototype.isPrototypeOf(b)){this.type=\"full\";this.tag=\"a0\";this.asn1V=b}else{throw\"This class supports GeneralNames only as argument\"}}};YAHOO.lang.extend(KJUR.asn1.x509.DistributionPointName,KJUR.asn1.ASN1Object);KJUR.asn1.x509.DistributionPoint=function(b){KJUR.asn1.x509.DistributionPoint.superclass.constructor.call(this);var a=null;this.getEncodedHex=function(){var c=new KJUR.asn1.DERSequence();if(this.asn1DP!=null){var d=new KJUR.asn1.DERTaggedObject({explicit:true,tag:\"a0\",obj:this.asn1DP});c.appendASN1Object(d)}this.hTLV=c.getEncodedHex();return this.hTLV};if(typeof b!=\"undefined\"){if(typeof b.dpobj!=\"undefined\"){this.asn1DP=b.dpobj}}};YAHOO.lang.extend(KJUR.asn1.x509.DistributionPoint,KJUR.asn1.ASN1Object);KJUR.asn1.x509.OID=new function(a){this.atype2oidList={C:\"2.5.4.6\",O:\"2.5.4.10\",OU:\"2.5.4.11\",ST:\"2.5.4.8\",L:\"2.5.4.7\",CN:\"2.5.4.3\",SN:\"2.5.4.4\",DN:\"2.5.4.49\",DC:\"0.9.2342.19200300.100.1.25\",};this.name2oidList={sha1:\"1.3.14.3.2.26\",sha256:\"2.16.840.1.101.3.4.2.1\",sha384:\"2.16.840.1.101.3.4.2.2\",sha512:\"2.16.840.1.101.3.4.2.3\",sha224:\"2.16.840.1.101.3.4.2.4\",md5:\"1.2.840.113549.2.5\",md2:\"1.3.14.7.2.2.1\",ripemd160:\"1.3.36.3.2.1\",MD2withRSA:\"1.2.840.113549.1.1.2\",MD4withRSA:\"1.2.840.113549.1.1.3\",MD5withRSA:\"1.2.840.113549.1.1.4\",SHA1withRSA:\"1.2.840.113549.1.1.5\",SHA224withRSA:\"1.2.840.113549.1.1.14\",SHA256withRSA:\"1.2.840.113549.1.1.11\",SHA384withRSA:\"1.2.840.113549.1.1.12\",SHA512withRSA:\"1.2.840.113549.1.1.13\",SHA1withECDSA:\"1.2.840.10045.4.1\",SHA224withECDSA:\"1.2.840.10045.4.3.1\",SHA256withECDSA:\"1.2.840.10045.4.3.2\",SHA384withECDSA:\"1.2.840.10045.4.3.3\",SHA512withECDSA:\"1.2.840.10045.4.3.4\",dsa:\"1.2.840.10040.4.1\",SHA1withDSA:\"1.2.840.10040.4.3\",SHA224withDSA:\"2.16.840.1.101.3.4.3.1\",SHA256withDSA:\"2.16.840.1.101.3.4.3.2\",rsaEncryption:\"1.2.840.113549.1.1.1\",countryName:\"2.5.4.6\",organization:\"2.5.4.10\",organizationalUnit:\"2.5.4.11\",stateOrProvinceName:\"2.5.4.8\",locality:\"2.5.4.7\",commonName:\"2.5.4.3\",subjectKeyIdentifier:\"2.5.29.14\",keyUsage:\"2.5.29.15\",subjectAltName:\"2.5.29.17\",basicConstraints:\"2.5.29.19\",nameConstraints:\"2.5.29.30\",cRLDistributionPoints:\"2.5.29.31\",certificatePolicies:\"2.5.29.32\",authorityKeyIdentifier:\"2.5.29.35\",policyConstraints:\"2.5.29.36\",extKeyUsage:\"2.5.29.37\",authorityInfoAccess:\"1.3.6.1.5.5.7.1.1\",anyExtendedKeyUsage:\"2.5.29.37.0\",serverAuth:\"1.3.6.1.5.5.7.3.1\",clientAuth:\"1.3.6.1.5.5.7.3.2\",codeSigning:\"1.3.6.1.5.5.7.3.3\",emailProtection:\"1.3.6.1.5.5.7.3.4\",timeStamping:\"1.3.6.1.5.5.7.3.8\",ocspSigning:\"1.3.6.1.5.5.7.3.9\",ecPublicKey:\"1.2.840.10045.2.1\",secp256r1:\"1.2.840.10045.3.1.7\",secp256k1:\"1.3.132.0.10\",secp384r1:\"1.3.132.0.34\",pkcs5PBES2:\"1.2.840.113549.1.5.13\",pkcs5PBKDF2:\"1.2.840.113549.1.5.12\",\"des-EDE3-CBC\":\"1.2.840.113549.3.7\",data:\"1.2.840.113549.1.7.1\",\"signed-data\":\"1.2.840.113549.1.7.2\",\"enveloped-data\":\"1.2.840.113549.1.7.3\",\"digested-data\":\"1.2.840.113549.1.7.5\",\"encrypted-data\":\"1.2.840.113549.1.7.6\",\"authenticated-data\":\"1.2.840.113549.1.9.16.1.2\",tstinfo:\"1.2.840.113549.1.9.16.1.4\",};this.objCache={};this.name2obj=function(b){if(typeof this.objCache[b]!=\"undefined\"){return this.objCache[b]}if(typeof this.name2oidList[b]==\"undefined\"){throw\"Name of ObjectIdentifier not defined: \"+b}var c=this.name2oidList[b];var d=new KJUR.asn1.DERObjectIdentifier({oid:c});this.objCache[b]=d;return d};this.atype2obj=function(b){if(typeof this.objCache[b]!=\"undefined\"){return this.objCache[b]}if(typeof this.atype2oidList[b]==\"undefined\"){throw\"AttributeType name undefined: \"+b}var c=this.atype2oidList[b];var d=new KJUR.asn1.DERObjectIdentifier({oid:c});this.objCache[b]=d;return d}};KJUR.asn1.x509.OID.oid2name=function(b){var c=KJUR.asn1.x509.OID.name2oidList;for(var a in c){if(c[a]==b){return a}}return\"\"};KJUR.asn1.x509.OID.name2oid=function(a){var b=KJUR.asn1.x509.OID.name2oidList;if(b[a]===undefined){return\"\"}return b[a]};KJUR.asn1.x509.X509Util=new function(){this.getPKCS8PubKeyPEMfromRSAKey=function(i){var h=null;var f=KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(i.n);var j=KJUR.asn1.ASN1Util.integerToByteHex(i.e);var a=new KJUR.asn1.DERInteger({hex:f});var g=new KJUR.asn1.DERInteger({hex:j});var l=new KJUR.asn1.DERSequence({array:[a,g]});var c=l.getEncodedHex();var d=new KJUR.asn1.x509.AlgorithmIdentifier({name:\"rsaEncryption\"});var b=new KJUR.asn1.DERBitString({hex:\"00\"+c});var k=new KJUR.asn1.DERSequence({array:[d,b]});var e=k.getEncodedHex();var h=KJUR.asn1.ASN1Util.getPEMStringFromHex(e,\"PUBLIC KEY\");return h}};KJUR.asn1.x509.X509Util.newCertPEM=function(f){var c=KJUR.asn1.x509;var e=new c.TBSCertificate();if(f.serial!==undefined){e.setSerialNumberByParam(f.serial)}else{throw\"serial number undefined.\"}if(typeof f.sigalg.name==\"string\"){e.setSignatureAlgByParam(f.sigalg)}else{throw\"unproper signature algorithm name\"}if(f.issuer!==undefined){e.setIssuerByParam(f.issuer)}else{throw\"issuer name undefined.\"}if(f.notbefore!==undefined){e.setNotBeforeByParam(f.notbefore)}else{throw\"notbefore undefined.\"}if(f.notafter!==undefined){e.setNotAfterByParam(f.notafter)}else{throw\"notafter undefined.\"}if(f.subject!==undefined){e.setSubjectByParam(f.subject)}else{throw\"subject name undefined.\"}if(f.sbjpubkey!==undefined){e.setSubjectPublicKeyByGetKey(f.sbjpubkey)}else{throw\"subject public key undefined.\"}if(f.ext!==undefined&&f.ext.length!==undefined){for(var b=0;b<f.ext.length;b++){for(key in f.ext[b]){e.appendExtensionByName(key,f.ext[b][key])}}}if(f.cakey===undefined&&f.sighex===undefined){throw\"param cakey and sighex undefined.\"}var d=null;var a=null;if(f.cakey){d=KEYUTIL.getKey.apply(null,f.cakey);a=new c.Certificate({tbscertobj:e,prvkeyobj:d});a.sign()}if(f.sighex){a=new c.Certificate({tbscertobj:e});a.setSignatureHex(f.sighex)}return a.getPEMString()};\n\t/*! asn1cms-1.0.2.js (c) 2013-2014 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.asn1==\"undefined\"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.cms==\"undefined\"||!KJUR.asn1.cms){KJUR.asn1.cms={}}KJUR.asn1.cms.Attribute=function(b){KJUR.asn1.cms.Attribute.superclass.constructor.call(this);var a=[];this.getEncodedHex=function(){var f,e,c;f=new KJUR.asn1.DERObjectIdentifier({oid:this.attrTypeOid});e=new KJUR.asn1.DERSet({array:this.valueList});try{e.getEncodedHex()}catch(d){throw\"fail valueSet.getEncodedHex in Attribute(1)/\"+d}c=new KJUR.asn1.DERSequence({array:[f,e]});try{this.hTLV=c.getEncodedHex()}catch(d){throw\"failed seq.getEncodedHex in Attribute(2)/\"+d}return this.hTLV}};YAHOO.lang.extend(KJUR.asn1.cms.Attribute,KJUR.asn1.ASN1Object);KJUR.asn1.cms.ContentType=function(b){KJUR.asn1.cms.ContentType.superclass.constructor.call(this);this.attrTypeOid=\"1.2.840.113549.1.9.3\";var a=null;if(typeof b!=\"undefined\"){var a=new KJUR.asn1.DERObjectIdentifier(b);this.valueList=[a]}};YAHOO.lang.extend(KJUR.asn1.cms.ContentType,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.MessageDigest=function(e){KJUR.asn1.cms.MessageDigest.superclass.constructor.call(this);this.attrTypeOid=\"1.2.840.113549.1.9.4\";if(typeof e!=\"undefined\"){if(e.eciObj instanceof KJUR.asn1.cms.EncapsulatedContentInfo&&typeof e.hashAlg==\"string\"){var b=e.eciObj.eContentValueHex;var a=e.hashAlg;var c=KJUR.crypto.Util.hashHex(b,a);var d=new KJUR.asn1.DEROctetString({hex:c});d.getEncodedHex();this.valueList=[d]}else{var d=new KJUR.asn1.DEROctetString(e);d.getEncodedHex();this.valueList=[d]}}};YAHOO.lang.extend(KJUR.asn1.cms.MessageDigest,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.SigningTime=function(c){KJUR.asn1.cms.SigningTime.superclass.constructor.call(this);this.attrTypeOid=\"1.2.840.113549.1.9.5\";if(typeof c!=\"undefined\"){var a=new KJUR.asn1.x509.Time(c);try{a.getEncodedHex()}catch(b){throw\"SigningTime.getEncodedHex() failed/\"+b}this.valueList=[a]}};YAHOO.lang.extend(KJUR.asn1.cms.SigningTime,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.SigningCertificate=function(d){KJUR.asn1.cms.SigningCertificate.superclass.constructor.call(this);this.attrTypeOid=\"1.2.840.113549.1.9.16.2.12\";var a=KJUR.asn1;var c=KJUR.asn1.cms;var b=KJUR.crypto;this.setCerts=function(l){var j=[];for(var h=0;h<l.length;h++){var f=KEYUTIL.getHexFromPEM(l[h]);var e=b.Util.hashHex(f,\"sha1\");var m=new a.DEROctetString({hex:e});m.getEncodedHex();var k=new c.IssuerAndSerialNumber({cert:l[h]});k.getEncodedHex();var n=new a.DERSequence({array:[m,k]});n.getEncodedHex();j.push(n)}var g=new a.DERSequence({array:j});g.getEncodedHex();this.valueList=[g]};if(typeof d!=\"undefined\"){if(typeof d.array==\"object\"){this.setCerts(d.array)}}};YAHOO.lang.extend(KJUR.asn1.cms.SigningCertificate,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.SigningCertificateV2=function(e){KJUR.asn1.cms.SigningCertificateV2.superclass.constructor.call(this);this.attrTypeOid=\"1.2.840.113549.1.9.16.2.47\";var b=KJUR.asn1;var f=KJUR.asn1.x509;var d=KJUR.asn1.cms;var c=KJUR.crypto;this.setCerts=function(p,h){var n=[];for(var l=0;l<p.length;l++){var j=KEYUTIL.getHexFromPEM(p[l]);var r=[];if(h!=\"sha256\"){r.push(new f.AlgorithmIdentifier({name:h}))}var g=c.Util.hashHex(j,h);var q=new b.DEROctetString({hex:g});q.getEncodedHex();r.push(q);var m=new d.IssuerAndSerialNumber({cert:p[l]});m.getEncodedHex();r.push(m);var o=new b.DERSequence({array:r});o.getEncodedHex();n.push(o)}var k=new b.DERSequence({array:n});k.getEncodedHex();this.valueList=[k]};if(typeof e!=\"undefined\"){if(typeof e.array==\"object\"){var a=\"sha256\";if(typeof e.hashAlg==\"string\"){a=e.hashAlg}this.setCerts(e.array,a)}}};YAHOO.lang.extend(KJUR.asn1.cms.SigningCertificateV2,KJUR.asn1.cms.Attribute);KJUR.asn1.cms.IssuerAndSerialNumber=function(c){KJUR.asn1.cms.IssuerAndSerialNumber.superclass.constructor.call(this);var e=null;var b=null;var a=KJUR.asn1;var d=a.x509;this.setByCertPEM=function(i){var g=KEYUTIL.getHexFromPEM(i);var f=new X509();f.hex=g;var j=f.getIssuerHex();this.dIssuer=new d.X500Name();this.dIssuer.hTLV=j;var h=f.getSerialNumberHex();this.dSerial=new a.DERInteger({hex:h})};this.getEncodedHex=function(){var f=new KJUR.asn1.DERSequence({array:[this.dIssuer,this.dSerial]});this.hTLV=f.getEncodedHex();return this.hTLV};if(typeof c!=\"undefined\"){if(typeof c==\"string\"&&c.indexOf(\"-----BEGIN \")!=-1){this.setByCertPEM(c)}if(c.issuer&&c.serial){if(c.issuer instanceof KJUR.asn1.x509.X500Name){this.dIssuer=c.issuer}else{this.dIssuer=new KJUR.asn1.x509.X500Name(c.issuer)}if(c.serial instanceof KJUR.asn1.DERInteger){this.dSerial=c.serial}else{this.dSerial=new KJUR.asn1.DERInteger(c.serial)}}if(typeof c.cert==\"string\"){this.setByCertPEM(c.cert)}}};YAHOO.lang.extend(KJUR.asn1.cms.IssuerAndSerialNumber,KJUR.asn1.ASN1Object);KJUR.asn1.cms.AttributeList=function(a){KJUR.asn1.cms.AttributeList.superclass.constructor.call(this);this.list=new Array();this.sortFlag=true;this.add=function(b){if(b instanceof KJUR.asn1.cms.Attribute){this.list.push(b)}};this.length=function(){return this.list.length};this.clear=function(){this.list=new Array();this.hTLV=null;this.hV=null};this.getEncodedHex=function(){if(typeof this.hTLV==\"string\"){return this.hTLV}var b=new KJUR.asn1.DERSet({array:this.list,sortflag:this.sortFlag});this.hTLV=b.getEncodedHex();return this.hTLV};if(typeof a!=\"undefined\"){if(typeof a.sortflag!=\"undefined\"&&a.sortflag==false){this.sortFlag=false}}};YAHOO.lang.extend(KJUR.asn1.cms.AttributeList,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SignerInfo=function(c){KJUR.asn1.cms.SignerInfo.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.cms;var d=KJUR.asn1.x509;this.dCMSVersion=new a.DERInteger({\"int\":1});this.dSignerIdentifier=null;this.dDigestAlgorithm=null;this.dSignedAttrs=new b.AttributeList();this.dSigAlg=null;this.dSig=null;this.dUnsignedAttrs=new b.AttributeList();this.setSignerIdentifier=function(f){if(typeof f==\"string\"&&f.indexOf(\"CERTIFICATE\")!=-1&&f.indexOf(\"BEGIN\")!=-1&&f.indexOf(\"END\")!=-1){var e=f;this.dSignerIdentifier=new b.IssuerAndSerialNumber({cert:f})}};this.setForContentAndHash=function(e){if(typeof e!=\"undefined\"){if(e.eciObj instanceof KJUR.asn1.cms.EncapsulatedContentInfo){this.dSignedAttrs.add(new b.ContentType({oid:\"1.2.840.113549.1.7.1\"}));this.dSignedAttrs.add(new b.MessageDigest({eciObj:e.eciObj,hashAlg:e.hashAlg}))}if(typeof e.sdObj!=\"undefined\"&&e.sdObj instanceof KJUR.asn1.cms.SignedData){if(e.sdObj.digestAlgNameList.join(\":\").indexOf(e.hashAlg)==-1){e.sdObj.digestAlgNameList.push(e.hashAlg)}}if(typeof e.hashAlg==\"string\"){this.dDigestAlgorithm=new d.AlgorithmIdentifier({name:e.hashAlg})}}};this.sign=function(j,f){this.dSigAlg=new d.AlgorithmIdentifier({name:f});var g=this.dSignedAttrs.getEncodedHex();var e=KEYUTIL.getKey(j);var i=new KJUR.crypto.Signature({alg:f});i.init(e);i.updateHex(g);var h=i.sign();this.dSig=new a.DEROctetString({hex:h})};this.addUnsigned=function(e){this.hTLV=null;this.dUnsignedAttrs.hTLV=null;this.dUnsignedAttrs.add(e)};this.getEncodedHex=function(){if(this.dSignedAttrs instanceof KJUR.asn1.cms.AttributeList&&this.dSignedAttrs.length()==0){throw\"SignedAttrs length = 0 (empty)\"}var e=new a.DERTaggedObject({obj:this.dSignedAttrs,tag:\"a0\",explicit:false});var h=null;if(this.dUnsignedAttrs.length()>0){h=new a.DERTaggedObject({obj:this.dUnsignedAttrs,tag:\"a1\",explicit:false})}var g=[this.dCMSVersion,this.dSignerIdentifier,this.dDigestAlgorithm,e,this.dSigAlg,this.dSig,];if(h!=null){g.push(h)}var f=new a.DERSequence({array:g});this.hTLV=f.getEncodedHex();return this.hTLV}};YAHOO.lang.extend(KJUR.asn1.cms.SignerInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.EncapsulatedContentInfo=function(c){KJUR.asn1.cms.EncapsulatedContentInfo.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.cms;var d=KJUR.asn1.x509;this.dEContentType=new a.DERObjectIdentifier({name:\"data\"});this.dEContent=null;this.isDetached=false;this.eContentValueHex=null;this.setContentType=function(e){if(e.match(/^[0-2][.][0-9.]+$/)){this.dEContentType=new a.DERObjectIdentifier({oid:e})}else{this.dEContentType=new a.DERObjectIdentifier({name:e})}};this.setContentValue=function(e){if(typeof e!=\"undefined\"){if(typeof e.hex==\"string\"){this.eContentValueHex=e.hex}else{if(typeof e.str==\"string\"){this.eContentValueHex=utf8tohex(e.str)}}}};this.setContentValueHex=function(e){this.eContentValueHex=e};this.setContentValueStr=function(e){this.eContentValueHex=utf8tohex(e)};this.getEncodedHex=function(){if(typeof this.eContentValueHex!=\"string\"){throw\"eContentValue not yet set\"}var g=new a.DEROctetString({hex:this.eContentValueHex});this.dEContent=new a.DERTaggedObject({obj:g,tag:\"a0\",explicit:true});var e=[this.dEContentType];if(!this.isDetached){e.push(this.dEContent)}var f=new a.DERSequence({array:e});this.hTLV=f.getEncodedHex();return this.hTLV}};YAHOO.lang.extend(KJUR.asn1.cms.EncapsulatedContentInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.ContentInfo=function(c){KJUR.asn1.cms.ContentInfo.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.cms;var d=KJUR.asn1.x509;this.dContentType=null;this.dContent=null;this.setContentType=function(e){if(typeof e==\"string\"){this.dContentType=d.OID.name2obj(e)}};this.getEncodedHex=function(){var f=new a.DERTaggedObject({obj:this.dContent,tag:\"a0\",explicit:true});var e=new a.DERSequence({array:[this.dContentType,f]});this.hTLV=e.getEncodedHex();return this.hTLV};if(typeof c!=\"undefined\"){if(c.type){this.setContentType(c.type)}if(c.obj&&c.obj instanceof a.ASN1Object){this.dContent=c.obj}}};YAHOO.lang.extend(KJUR.asn1.cms.ContentInfo,KJUR.asn1.ASN1Object);KJUR.asn1.cms.SignedData=function(c){KJUR.asn1.cms.SignedData.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.cms;var d=KJUR.asn1.x509;this.dCMSVersion=new a.DERInteger({\"int\":1});this.dDigestAlgs=null;this.digestAlgNameList=[];this.dEncapContentInfo=new b.EncapsulatedContentInfo();this.dCerts=null;this.certificateList=[];this.crlList=[];this.signerInfoList=[new b.SignerInfo()];this.addCertificatesByPEM=function(e){var f=KEYUTIL.getHexFromPEM(e);var g=new a.ASN1Object();g.hTLV=f;this.certificateList.push(g)};this.getEncodedHex=function(){if(typeof this.hTLV==\"string\"){return this.hTLV}if(this.dDigestAlgs==null){var k=[];for(var j=0;j<this.digestAlgNameList.length;j++){var h=this.digestAlgNameList[j];var m=new d.AlgorithmIdentifier({name:h});k.push(m)}this.dDigestAlgs=new a.DERSet({array:k})}var e=[this.dCMSVersion,this.dDigestAlgs,this.dEncapContentInfo];if(this.dCerts==null){if(this.certificateList.length>0){var l=new a.DERSet({array:this.certificateList});this.dCerts=new a.DERTaggedObject({obj:l,tag:\"a0\",explicit:false})}}if(this.dCerts!=null){e.push(this.dCerts)}var g=new a.DERSet({array:this.signerInfoList});e.push(g);var f=new a.DERSequence({array:e});this.hTLV=f.getEncodedHex();return this.hTLV};this.getContentInfo=function(){this.getEncodedHex();var e=new b.ContentInfo({type:\"signed-data\",obj:this});return e};this.getContentInfoEncodedHex=function(){var e=this.getContentInfo();var f=e.getEncodedHex();return f};this.getPEM=function(){var e=this.getContentInfoEncodedHex();var f=a.ASN1Util.getPEMStringFromHex(e,\"CMS\");return f}};YAHOO.lang.extend(KJUR.asn1.cms.SignedData,KJUR.asn1.ASN1Object);KJUR.asn1.cms.CMSUtil=new function(){};KJUR.asn1.cms.CMSUtil.newSignedData=function(a){var h=KJUR.asn1.cms;var g=KJUR.asn1.cades;var f=new h.SignedData();f.dEncapContentInfo.setContentValue(a.content);if(typeof a.certs==\"object\"){for(var b=0;b<a.certs.length;b++){f.addCertificatesByPEM(a.certs[b])}}f.signerInfoList=[];for(var b=0;b<a.signerInfos.length;b++){var d=a.signerInfos[b];var c=new h.SignerInfo();c.setSignerIdentifier(d.signerCert);c.setForContentAndHash({sdObj:f,eciObj:f.dEncapContentInfo,hashAlg:d.hashAlg});for(attrName in d.sAttr){var j=d.sAttr[attrName];if(attrName==\"SigningTime\"){var e=new h.SigningTime(j);c.dSignedAttrs.add(e)}if(attrName==\"SigningCertificate\"){var e=new h.SigningCertificate(j);c.dSignedAttrs.add(e)}if(attrName==\"SigningCertificateV2\"){var e=new h.SigningCertificateV2(j);c.dSignedAttrs.add(e)}if(attrName==\"SignaturePolicyIdentifier\"){var e=new g.SignaturePolicyIdentifier(j);c.dSignedAttrs.add(e)}}c.sign(d.signerPrvKey,d.sigAlg);f.signerInfoList.push(c)}return f};\n\t/*! asn1tsp-1.0.1.js (c) 2014 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.asn1==\"undefined\"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.tsp==\"undefined\"||!KJUR.asn1.tsp){KJUR.asn1.tsp={}}KJUR.asn1.tsp.Accuracy=function(b){KJUR.asn1.tsp.Accuracy.superclass.constructor.call(this);var a=KJUR.asn1;this.seconds=null;this.millis=null;this.micros=null;this.getEncodedHex=function(){var e=null;var g=null;var i=null;var c=[];if(this.seconds!=null){e=new a.DERInteger({\"int\":this.seconds});c.push(e)}if(this.millis!=null){var h=new a.DERInteger({\"int\":this.millis});g=new a.DERTaggedObject({obj:h,tag:\"80\",explicit:false});c.push(g)}if(this.micros!=null){var f=new a.DERInteger({\"int\":this.micros});i=new a.DERTaggedObject({obj:f,tag:\"81\",explicit:false});c.push(i)}var d=new a.DERSequence({array:c});this.hTLV=d.getEncodedHex();return this.hTLV};if(typeof b!=\"undefined\"){if(typeof b.seconds==\"number\"){this.seconds=b.seconds}if(typeof b.millis==\"number\"){this.millis=b.millis}if(typeof b.micros==\"number\"){this.micros=b.micros}}};YAHOO.lang.extend(KJUR.asn1.tsp.Accuracy,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.MessageImprint=function(b){KJUR.asn1.tsp.MessageImprint.superclass.constructor.call(this);var a=KJUR.asn1;var c=KJUR.asn1.x509;this.dHashAlg=null;this.dHashValue=null;this.getEncodedHex=function(){if(typeof this.hTLV==\"string\"){return this.hTLV}var d=new a.DERSequence({array:[this.dHashAlg,this.dHashValue]});return d.getEncodedHex()};if(typeof b!=\"undefined\"){if(typeof b.hashAlg==\"string\"){this.dHashAlg=new c.AlgorithmIdentifier({name:b.hashAlg})}if(typeof b.hashValue==\"string\"){this.dHashValue=new a.DEROctetString({hex:b.hashValue})}}};YAHOO.lang.extend(KJUR.asn1.tsp.MessageImprint,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.TimeStampReq=function(c){KJUR.asn1.tsp.TimeStampReq.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.tsp;this.dVersion=new a.DERInteger({\"int\":1});this.dMessageImprint=null;this.dPolicy=null;this.dNonce=null;this.certReq=true;this.setMessageImprint=function(d){if(d instanceof KJUR.asn1.tsp.MessageImprint){this.dMessageImprint=d;return}if(typeof d==\"object\"){this.dMessageImprint=new b.MessageImprint(d)}};this.getEncodedHex=function(){if(this.dMessageImprint==null){throw\"messageImprint shall be specified\"}var d=[this.dVersion,this.dMessageImprint];if(this.dPolicy!=null){d.push(this.dPolicy)}if(this.dNonce!=null){d.push(this.dNonce)}if(this.certReq){d.push(new a.DERBoolean())}var e=new a.DERSequence({array:d});this.hTLV=e.getEncodedHex();return this.hTLV};if(typeof c!=\"undefined\"){if(typeof c.mi==\"object\"){this.setMessageImprint(c.mi)}if(typeof c.policy==\"object\"){this.dPolicy=new a.DERObjectIdentifier(c.policy)}if(typeof c.nonce==\"object\"){this.dNonce=new a.DERInteger(c.nonce)}if(typeof c.certreq==\"boolean\"){this.certReq=c.certreq}}};YAHOO.lang.extend(KJUR.asn1.tsp.TimeStampReq,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.TSTInfo=function(c){KJUR.asn1.tsp.TSTInfo.superclass.constructor.call(this);var a=KJUR.asn1;var d=KJUR.asn1.x509;var b=KJUR.asn1.tsp;this.dVersion=new a.DERInteger({\"int\":1});this.dPolicy=null;this.dMessageImprint=null;this.dSerialNumber=null;this.dGenTime=null;this.dAccuracy=null;this.dOrdering=null;this.dNonce=null;this.dTsa=null;this.getEncodedHex=function(){var e=[this.dVersion];if(this.dPolicy==null){throw\"policy shall be specified.\"}e.push(this.dPolicy);if(this.dMessageImprint==null){throw\"messageImprint shall be specified.\"}e.push(this.dMessageImprint);if(this.dSerialNumber==null){throw\"serialNumber shall be specified.\"}e.push(this.dSerialNumber);if(this.dGenTime==null){throw\"genTime shall be specified.\"}e.push(this.dGenTime);if(this.dAccuracy!=null){e.push(this.dAccuracy)}if(this.dOrdering!=null){e.push(this.dOrdering)}if(this.dNonce!=null){e.push(this.dNonce)}if(this.dTsa!=null){e.push(this.dTsa)}var f=new a.DERSequence({array:e});this.hTLV=f.getEncodedHex();return this.hTLV};if(typeof c!=\"undefined\"){if(typeof c.policy==\"string\"){if(!c.policy.match(/^[0-9.]+$/)){throw\"policy shall be oid like 0.1.4.134\"}this.dPolicy=new a.DERObjectIdentifier({oid:c.policy})}if(typeof c.messageImprint!=\"undefined\"){this.dMessageImprint=new b.MessageImprint(c.messageImprint)}if(typeof c.serialNumber!=\"undefined\"){this.dSerialNumber=new a.DERInteger(c.serialNumber)}if(typeof c.genTime!=\"undefined\"){this.dGenTime=new a.DERGeneralizedTime(c.genTime)}if(typeof c.accuracy!=\"undefind\"){this.dAccuracy=new b.Accuracy(c.accuracy)}if(typeof c.ordering!=\"undefined\"&&c.ordering==true){this.dOrdering=new a.DERBoolean()}if(typeof c.nonce!=\"undefined\"){this.dNonce=new a.DERInteger(c.nonce)}if(typeof c.tsa!=\"undefined\"){this.dTsa=new d.X500Name(c.tsa)}}};YAHOO.lang.extend(KJUR.asn1.tsp.TSTInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.TimeStampResp=function(c){KJUR.asn1.tsp.TimeStampResp.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.tsp;this.dStatus=null;this.dTST=null;this.getEncodedHex=function(){if(this.dStatus==null){throw\"status shall be specified\"}var d=[this.dStatus];if(this.dTST!=null){d.push(this.dTST)}var e=new a.DERSequence({array:d});this.hTLV=e.getEncodedHex();return this.hTLV};if(typeof c!=\"undefined\"){if(typeof c.status==\"object\"){this.dStatus=new b.PKIStatusInfo(c.status)}if(typeof c.tst!=\"undefined\"&&c.tst instanceof KJUR.asn1.ASN1Object){this.dTST=c.tst.getContentInfo()}}};YAHOO.lang.extend(KJUR.asn1.tsp.TimeStampResp,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIStatusInfo=function(c){KJUR.asn1.tsp.PKIStatusInfo.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.tsp;this.dStatus=null;this.dStatusString=null;this.dFailureInfo=null;this.getEncodedHex=function(){if(this.dStatus==null){throw\"status shall be specified\"}var d=[this.dStatus];if(this.dStatusString!=null){d.push(this.dStatusString)}if(this.dFailureInfo!=null){d.push(this.dFailureInfo)}var e=new a.DERSequence({array:d});this.hTLV=e.getEncodedHex();return this.hTLV};if(typeof c!=\"undefined\"){if(typeof c.status==\"object\"){this.dStatus=new b.PKIStatus(c.status)}if(typeof c.statstr==\"object\"){this.dStatusString=new b.PKIFreeText({array:c.statstr})}if(typeof c.failinfo==\"object\"){this.dFailureInfo=new b.PKIFailureInfo(c.failinfo)}}};YAHOO.lang.extend(KJUR.asn1.tsp.PKIStatusInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIStatus=function(e){KJUR.asn1.tsp.PKIStatus.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.tsp;var d=null;this.getEncodedHex=function(){this.hTLV=this.dStatus.getEncodedHex();return this.hTLV};if(typeof e!=\"undefined\"){if(typeof e.name!=\"undefined\"){var c=b.PKIStatus.valueList;if(typeof c[e.name]==\"undefined\"){throw\"name undefined: \"+e.name}this.dStatus=new a.DERInteger({\"int\":c[e.name]})}else{this.dStatus=new a.DERInteger(e)}}};YAHOO.lang.extend(KJUR.asn1.tsp.PKIStatus,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIStatus.valueList={granted:0,grantedWithMods:1,rejection:2,waiting:3,revocationWarning:4,revocationNotification:5};KJUR.asn1.tsp.PKIFreeText=function(b){KJUR.asn1.tsp.PKIFreeText.superclass.constructor.call(this);var a=KJUR.asn1;this.textList=[];this.getEncodedHex=function(){var c=[];for(var e=0;e<this.textList.length;e++){c.push(new a.DERUTF8String({str:this.textList[e]}))}var d=new a.DERSequence({array:c});this.hTLV=d.getEncodedHex();return this.hTLV};if(typeof b!=\"undefined\"){if(typeof b.array==\"object\"){this.textList=b.array}}};YAHOO.lang.extend(KJUR.asn1.tsp.PKIFreeText,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIFailureInfo=function(d){KJUR.asn1.tsp.PKIFailureInfo.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.tsp;this.value=null;this.getEncodedHex=function(){if(this.value==null){throw\"value shall be specified\"}var e=new Number(this.value).toString(2);var f=new a.DERBitString();f.setByBinaryString(e);this.hTLV=f.getEncodedHex();return this.hTLV};if(typeof d!=\"undefined\"){if(typeof d.name==\"string\"){var c=b.PKIFailureInfo.valueList;if(typeof c[d.name]==\"undefined\"){throw\"name undefined: \"+d.name}this.value=c[d.name]}else{if(typeof d[\"int\"]==\"number\"){this.value=d[\"int\"]}}}};YAHOO.lang.extend(KJUR.asn1.tsp.PKIFailureInfo,KJUR.asn1.ASN1Object);KJUR.asn1.tsp.PKIFailureInfo.valueList={badAlg:0,badRequest:2,badDataFormat:5,timeNotAvailable:14,unacceptedPolicy:15,unacceptedExtension:16,addInfoNotAvailable:17,systemFailure:25};KJUR.asn1.tsp.AbstractTSAAdapter=function(a){this.getTSTHex=function(c,b){throw\"not implemented yet\"}};KJUR.asn1.tsp.SimpleTSAAdapter=function(a){KJUR.asn1.tsp.SimpleTSAAdapter.superclass.constructor.call(this);this.params=null;this.serial=0;this.getTSTHex=function(c,b){var e=KJUR.crypto.Util.hashHex(c,b);this.params.tstInfo.messageImprint={hashAlg:b,hashValue:e};this.params.tstInfo.serialNumber={\"int\":this.serial++};var d=Math.floor(Math.random()*1000000000);this.params.tstInfo.nonce={\"int\":d};var f=KJUR.asn1.tsp.TSPUtil.newTimeStampToken(this.params);return f.getContentInfoEncodedHex()};if(typeof a!=\"undefined\"){this.params=a}};YAHOO.lang.extend(KJUR.asn1.tsp.SimpleTSAAdapter,KJUR.asn1.tsp.AbstractTSAAdapter);KJUR.asn1.tsp.FixedTSAAdapter=function(a){KJUR.asn1.tsp.FixedTSAAdapter.superclass.constructor.call(this);this.params=null;this.getTSTHex=function(c,b){var d=KJUR.crypto.Util.hashHex(c,b);this.params.tstInfo.messageImprint={hashAlg:b,hashValue:d};var e=KJUR.asn1.tsp.TSPUtil.newTimeStampToken(this.params);return e.getContentInfoEncodedHex()};if(typeof a!=\"undefined\"){this.params=a}};YAHOO.lang.extend(KJUR.asn1.tsp.FixedTSAAdapter,KJUR.asn1.tsp.AbstractTSAAdapter);KJUR.asn1.tsp.TSPUtil=new function(){};KJUR.asn1.tsp.TSPUtil.newTimeStampToken=function(b){var j=KJUR.asn1.cms;var a=KJUR.asn1.tsp;var g=new j.SignedData();var e=new a.TSTInfo(b.tstInfo);var f=e.getEncodedHex();g.dEncapContentInfo.setContentValue({hex:f});g.dEncapContentInfo.setContentType(\"tstinfo\");if(typeof b.certs==\"object\"){for(var c=0;c<b.certs.length;c++){g.addCertificatesByPEM(b.certs[c])}}var d=g.signerInfoList[0];d.setSignerIdentifier(b.signerCert);d.setForContentAndHash({sdObj:g,eciObj:g.dEncapContentInfo,hashAlg:b.hashAlg});var h=new j.SigningCertificate({array:[b.signerCert]});d.dSignedAttrs.add(h);d.sign(b.signerPrvKey,b.sigAlg);return g};KJUR.asn1.tsp.TSPUtil.parseTimeStampReq=function(d){var f={};f.certreq=false;var h=ASN1HEX.getPosArrayOfChildren_AtObj(d,0);if(h.length<2){throw\"TimeStampReq must have at least 2 items\"}var c=ASN1HEX.getHexOfTLV_AtObj(d,h[1]);f.mi=KJUR.asn1.tsp.TSPUtil.parseMessageImprint(c);for(var e=2;e<h.length;e++){var b=h[e];var a=d.substr(b,2);if(a==\"06\"){var g=ASN1HEX.getHexOfV_AtObj(d,b);f.policy=ASN1HEX.hextooidstr(g)}if(a==\"02\"){f.nonce=ASN1HEX.getHexOfV_AtObj(d,b)}if(a==\"01\"){f.certreq=true}}return f};KJUR.asn1.tsp.TSPUtil.parseMessageImprint=function(c){var h={};if(c.substr(0,2)!=\"30\"){throw\"head of messageImprint hex shall be '30'\"}var a=ASN1HEX.getPosArrayOfChildren_AtObj(c,0);var i=ASN1HEX.getDecendantIndexByNthList(c,0,[0,0]);var d=ASN1HEX.getHexOfV_AtObj(c,i);var e=ASN1HEX.hextooidstr(d);var g=KJUR.asn1.x509.OID.oid2name(e);if(g==\"\"){throw\"hashAlg name undefined: \"+e}var b=g;var f=ASN1HEX.getDecendantIndexByNthList(c,0,[1]);h.hashAlg=b;h.hashValue=ASN1HEX.getHexOfV_AtObj(c,f);return h};\n\t/*! asn1cades-1.0.0.js (c) 2013-2014 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.asn1==\"undefined\"||!KJUR.asn1){KJUR.asn1={}}if(typeof KJUR.asn1.cades==\"undefined\"||!KJUR.asn1.cades){KJUR.asn1.cades={}}KJUR.asn1.cades.SignaturePolicyIdentifier=function(e){KJUR.asn1.cades.SignaturePolicyIdentifier.superclass.constructor.call(this);this.attrTypeOid=\"1.2.840.113549.1.9.16.2.15\";var b=KJUR.asn1;var d=KJUR.asn1.cades;if(typeof e!=\"undefined\"){if(typeof e.oid==\"string\"&&typeof e.hash==\"object\"){var f=new b.DERObjectIdentifier({oid:e.oid});var a=new d.OtherHashAlgAndValue(e.hash);var c=new b.DERSequence({array:[f,a]});this.valueList=[c]}}};YAHOO.lang.extend(KJUR.asn1.cades.SignaturePolicyIdentifier,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.OtherHashAlgAndValue=function(b){KJUR.asn1.cades.OtherHashAlgAndValue.superclass.constructor.call(this);var a=KJUR.asn1;var c=KJUR.asn1.x509;this.dAlg=null;this.dHash=null;this.getEncodedHex=function(){var d=new a.DERSequence({array:[this.dAlg,this.dHash]});this.hTLV=d.getEncodedHex();return this.hTLV};if(typeof b!=\"undefined\"){if(typeof b.alg==\"string\"&&typeof b.hash==\"string\"){this.dAlg=new c.AlgorithmIdentifier({name:b.alg});this.dHash=new a.DEROctetString({hex:b.hash})}}};YAHOO.lang.extend(KJUR.asn1.cades.OtherHashAlgAndValue,KJUR.asn1.ASN1Object);KJUR.asn1.cades.SignatureTimeStamp=function(c){KJUR.asn1.cades.SignatureTimeStamp.superclass.constructor.call(this);this.attrTypeOid=\"1.2.840.113549.1.9.16.2.14\";this.tstHex=null;var a=KJUR.asn1;if(typeof c!=\"undefined\"){if(typeof c.res!=\"undefined\"){if(typeof c.res==\"string\"&&c.res.match(/^[0-9A-Fa-f]+$/)){}else{if(c.res instanceof KJUR.asn1.ASN1Object){}else{throw\"res param shall be ASN1Object or hex string\"}}}if(typeof c.tst!=\"undefined\"){if(typeof c.tst==\"string\"&&c.tst.match(/^[0-9A-Fa-f]+$/)){var b=new a.ASN1Object();this.tstHex=c.tst;b.hTLV=this.tstHex;b.getEncodedHex();this.valueList=[b]}else{if(c.tst instanceof KJUR.asn1.ASN1Object){}else{throw\"tst param shall be ASN1Object or hex string\"}}}}};YAHOO.lang.extend(KJUR.asn1.cades.SignatureTimeStamp,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.CompleteCertificateRefs=function(c){KJUR.asn1.cades.CompleteCertificateRefs.superclass.constructor.call(this);this.attrTypeOid=\"1.2.840.113549.1.9.16.2.21\";var a=KJUR.asn1;var b=KJUR.asn1.cades;this.setByArray=function(d){this.valueList=[];for(var e=0;e<d.length;e++){var f=new b.OtherCertID(d[e]);this.valueList.push(f)}};if(typeof c!=\"undefined\"){if(typeof c==\"object\"&&typeof c.length==\"number\"){this.setByArray(c)}}};YAHOO.lang.extend(KJUR.asn1.cades.CompleteCertificateRefs,KJUR.asn1.cms.Attribute);KJUR.asn1.cades.OtherCertID=function(d){KJUR.asn1.cades.OtherCertID.superclass.constructor.call(this);var a=KJUR.asn1;var c=KJUR.asn1.cms;var b=KJUR.asn1.cades;this.hasIssuerSerial=true;this.dOtherCertHash=null;this.dIssuerSerial=null;this.setByCertPEM=function(e){this.dOtherCertHash=new b.OtherHash(e);if(this.hasIssuerSerial){this.dIssuerSerial=new c.IssuerAndSerialNumber(e)}};this.getEncodedHex=function(){if(this.hTLV!=null){return this.hTLV}if(this.dOtherCertHash==null){throw\"otherCertHash not set\"}var e=[this.dOtherCertHash];if(this.dIssuerSerial!=null){e.push(this.dIssuerSerial)}var f=new a.DERSequence({array:e});this.hTLV=f.getEncodedHex();return this.hTLV};if(typeof d!=\"undefined\"){if(typeof d==\"string\"&&d.indexOf(\"-----BEGIN \")!=-1){this.setByCertPEM(d)}if(typeof d==\"object\"){if(d.hasis===false){this.hasIssuerSerial=false}if(typeof d.cert==\"string\"){this.setByCertPEM(d.cert)}}}};YAHOO.lang.extend(KJUR.asn1.cades.OtherCertID,KJUR.asn1.ASN1Object);KJUR.asn1.cades.OtherHash=function(c){KJUR.asn1.cades.OtherHash.superclass.constructor.call(this);var a=KJUR.asn1;var b=KJUR.asn1.cades;this.alg=\"sha256\";this.dOtherHash=null;this.setByCertPEM=function(d){if(d.indexOf(\"-----BEGIN \")==-1){throw\"certPEM not to seem PEM format\"}var e=X509.pemToHex(d);var f=KJUR.crypto.Util.hashHex(e,this.alg);this.dOtherHash=new b.OtherHashAlgAndValue({alg:this.alg,hash:f})};this.getEncodedHex=function(){if(this.dOtherHash==null){throw\"OtherHash not set\"}return this.dOtherHash.getEncodedHex()};if(typeof c!=\"undefined\"){if(typeof c==\"string\"){if(c.indexOf(\"-----BEGIN \")!=-1){this.setByCertPEM(c)}else{if(c.match(/^[0-9A-Fa-f]+$/)){this.dOtherHash=new a.DEROctetString({hex:c})}else{throw\"unsupported string value for params\"}}}else{if(typeof c==\"object\"){if(typeof c.cert==\"string\"){if(typeof c.alg==\"string\"){this.alg=c.alg}this.setByCertPEM(c.cert)}else{this.dOtherHash=new b.OtherHashAlgAndValue(c)}}}}};YAHOO.lang.extend(KJUR.asn1.cades.OtherHash,KJUR.asn1.ASN1Object);KJUR.asn1.cades.CAdESUtil=new function(){};KJUR.asn1.cades.CAdESUtil.addSigTS=function(c,b,a){};KJUR.asn1.cades.CAdESUtil.parseSignedDataForAddingUnsigned=function(d){var q=KJUR.asn1;var p=KJUR.asn1.cms;var c=KJUR.asn1.cades.CAdESUtil;var a={};if(ASN1HEX.getDecendantHexTLVByNthList(d,0,[0])!=\"06092a864886f70d010702\"){throw\"hex is not CMS SignedData\"}var s=ASN1HEX.getDecendantIndexByNthList(d,0,[1,0]);var b=ASN1HEX.getPosArrayOfChildren_AtObj(d,s);if(b.length<4){throw\"num of SignedData elem shall be 4 at least\"}var f=b.shift();a.version=ASN1HEX.getHexOfTLV_AtObj(d,f);var l=b.shift();a.algs=ASN1HEX.getHexOfTLV_AtObj(d,l);var m=b.shift();a.encapcontent=ASN1HEX.getHexOfTLV_AtObj(d,m);a.certs=null;a.revs=null;a.si=[];var n=b.shift();if(d.substr(n,2)==\"a0\"){a.certs=ASN1HEX.getHexOfTLV_AtObj(d,n);n=b.shift()}if(d.substr(n,2)==\"a1\"){a.revs=ASN1HEX.getHexOfTLV_AtObj(d,n);n=b.shift()}var k=n;if(d.substr(k,2)!=\"31\"){throw\"Can't find signerInfos\"}var j=ASN1HEX.getPosArrayOfChildren_AtObj(d,k);for(var h=0;h<j.length;h++){var o=j[h];var e=c.parseSignerInfoForAddingUnsigned(d,o,h);a.si[h]=e}var g=null;a.obj=new p.SignedData();g=new q.ASN1Object();g.hTLV=a.version;a.obj.dCMSVersion=g;g=new q.ASN1Object();g.hTLV=a.algs;a.obj.dDigestAlgs=g;g=new q.ASN1Object();g.hTLV=a.encapcontent;a.obj.dEncapContentInfo=g;g=new q.ASN1Object();g.hTLV=a.certs;a.obj.dCerts=g;a.obj.signerInfoList=[];for(var h=0;h<a.si.length;h++){a.obj.signerInfoList.push(a.si[h].obj)}return a};KJUR.asn1.cades.CAdESUtil.parseSignerInfoForAddingUnsigned=function(d,k,a){var m=KJUR.asn1;var l=KJUR.asn1.cms;var b={};var e=ASN1HEX.getPosArrayOfChildren_AtObj(d,k);if(e.length!=6){throw\"not supported items for SignerInfo (!=6)\"}var f=e.shift();b.version=ASN1HEX.getHexOfTLV_AtObj(d,f);var n=e.shift();b.si=ASN1HEX.getHexOfTLV_AtObj(d,n);var h=e.shift();b.digalg=ASN1HEX.getHexOfTLV_AtObj(d,h);var c=e.shift();b.sattrs=ASN1HEX.getHexOfTLV_AtObj(d,c);var i=e.shift();b.sigalg=ASN1HEX.getHexOfTLV_AtObj(d,i);var j=e.shift();b.sig=ASN1HEX.getHexOfTLV_AtObj(d,j);b.sigval=ASN1HEX.getHexOfV_AtObj(d,j);var g=null;b.obj=new l.SignerInfo();g=new m.ASN1Object();g.hTLV=b.version;b.obj.dCMSVersion=g;g=new m.ASN1Object();g.hTLV=b.si;b.obj.dSignerIdentifier=g;g=new m.ASN1Object();g.hTLV=b.digalg;b.obj.dDigestAlgorithm=g;g=new m.ASN1Object();g.hTLV=b.sattrs;b.obj.dSignedAttrs=g;g=new m.ASN1Object();g.hTLV=b.sigalg;b.obj.dSigAlg=g;g=new m.ASN1Object();g.hTLV=b.sig;b.obj.dSig=g;b.obj.dUnsignedAttrs=new l.AttributeList();return b};\n\t/*! asn1csr-1.0.0.js (c) 2015 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tif(typeof KJUR.asn1.csr==\"undefined\"||!KJUR.asn1.csr){KJUR.asn1.csr={}}KJUR.asn1.csr.CertificationRequest=function(f){KJUR.asn1.csr.CertificationRequest.superclass.constructor.call(this);var b=null;var d=null;var e=null;var c=null;var a=null;this.sign=function(i,h){if(this.prvKey==null){this.prvKey=h}this.asn1SignatureAlg=new KJUR.asn1.x509.AlgorithmIdentifier({name:i});sig=new KJUR.crypto.Signature({alg:i});sig.initSign(this.prvKey);sig.updateHex(this.asn1CSRInfo.getEncodedHex());this.hexSig=sig.sign();this.asn1Sig=new KJUR.asn1.DERBitString({hex:\"00\"+this.hexSig});var g=new KJUR.asn1.DERSequence({array:[this.asn1CSRInfo,this.asn1SignatureAlg,this.asn1Sig]});this.hTLV=g.getEncodedHex();this.isModified=false};this.getPEMString=function(){var g=KJUR.asn1.ASN1Util.getPEMStringFromHex(this.getEncodedHex(),\"CERTIFICATE REQUEST\");return g};this.getEncodedHex=function(){if(this.isModified==false&&this.hTLV!=null){return this.hTLV}throw\"not signed yet\"};if(typeof f!=\"undefined\"){if(typeof f.csrinfo!=\"undefined\"){this.asn1CSRInfo=f.csrinfo}}};YAHOO.lang.extend(KJUR.asn1.csr.CertificationRequest,KJUR.asn1.ASN1Object);KJUR.asn1.csr.CertificationRequestInfo=function(a){KJUR.asn1.csr.CertificationRequestInfo.superclass.constructor.call(this);this._initialize=function(){this.asn1Array=new Array();this.asn1Version=new KJUR.asn1.DERInteger({\"int\":0});this.asn1Subject=null;this.asn1SubjPKey=null;this.extensionsArray=new Array()};this.setSubjectByParam=function(b){this.asn1Subject=new KJUR.asn1.x509.X500Name(b)};this.setSubjectPublicKeyByGetKey=function(c){var b=KEYUTIL.getKey(c);this.asn1SubjPKey=new KJUR.asn1.x509.SubjectPublicKeyInfo(b)};this.getEncodedHex=function(){this.asn1Array=new Array();this.asn1Array.push(this.asn1Version);this.asn1Array.push(this.asn1Subject);this.asn1Array.push(this.asn1SubjPKey);var c=new KJUR.asn1.DERSequence({array:this.extensionsArray});var b=new KJUR.asn1.DERTaggedObject({explicit:false,tag:\"a0\",obj:c});this.asn1Array.push(b);var d=new KJUR.asn1.DERSequence({array:this.asn1Array});this.hTLV=d.getEncodedHex();this.isModified=false;return this.hTLV};this._initialize()};YAHOO.lang.extend(KJUR.asn1.csr.CertificationRequestInfo,KJUR.asn1.ASN1Object);KJUR.asn1.csr.CSRUtil=new function(){};KJUR.asn1.csr.CSRUtil.newCSRPEM=function(f){var c=KJUR.asn1.csr;if(f.subject===undefined){throw\"parameter subject undefined\"}if(f.sbjpubkey===undefined){throw\"parameter sbjpubkey undefined\"}if(f.sigalg===undefined){throw\"parameter sigalg undefined\"}if(f.sbjprvkey===undefined){throw\"parameter sbjpubkey undefined\"}var b=new c.CertificationRequestInfo();b.setSubjectByParam(f.subject);b.setSubjectPublicKeyByGetKey(f.sbjpubkey);var d=new c.CertificationRequest({csrinfo:b});var a=KEYUTIL.getKey(f.sbjprvkey);d.sign(f.sigalg,a);var e=d.getPEMString();return e};\n\t/*! base64x-1.1.6 (c) 2012-2015 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tfunction Base64x(){}function stoBA(d){var b=new Array();for(var c=0;c<d.length;c++){b[c]=d.charCodeAt(c)}return b}function BAtos(b){var d=\"\";for(var c=0;c<b.length;c++){d=d+String.fromCharCode(b[c])}return d}function BAtohex(b){var e=\"\";for(var d=0;d<b.length;d++){var c=b[d].toString(16);if(c.length==1){c=\"0\"+c}e=e+c}return e}function stohex(a){return BAtohex(stoBA(a))}function stob64(a){return hex2b64(stohex(a))}function stob64u(a){return b64tob64u(hex2b64(stohex(a)))}function b64utos(a){return BAtos(b64toBA(b64utob64(a)))}function b64tob64u(a){a=a.replace(/\\=/g,\"\");a=a.replace(/\\+/g,\"-\");a=a.replace(/\\//g,\"_\");return a}function b64utob64(a){if(a.length%4==2){a=a+\"==\"}else{if(a.length%4==3){a=a+\"=\"}}a=a.replace(/-/g,\"+\");a=a.replace(/_/g,\"/\");return a}function hextob64u(a){if(a.length%2==1){a=\"0\"+a}return b64tob64u(hex2b64(a))}function b64utohex(a){return b64tohex(b64utob64(a))}var utf8tob64u,b64utoutf8;if(typeof Buffer===\"function\"){utf8tob64u=function(a){return b64tob64u(new Buffer(a,\"utf8\").toString(\"base64\"))};b64utoutf8=function(a){return new Buffer(b64utob64(a),\"base64\").toString(\"utf8\")}}else{utf8tob64u=function(a){return hextob64u(uricmptohex(encodeURIComponentAll(a)))};b64utoutf8=function(a){return decodeURIComponent(hextouricmp(b64utohex(a)))}}function utf8tob64(a){return hex2b64(uricmptohex(encodeURIComponentAll(a)))}function b64toutf8(a){return decodeURIComponent(hextouricmp(b64tohex(a)))}function utf8tohex(a){return uricmptohex(encodeURIComponentAll(a))}function hextoutf8(a){return decodeURIComponent(hextouricmp(a))}function hextorstr(c){var b=\"\";for(var a=0;a<c.length-1;a+=2){b+=String.fromCharCode(parseInt(c.substr(a,2),16))}return b}function rstrtohex(c){var a=\"\";for(var b=0;b<c.length;b++){a+=(\"0\"+c.charCodeAt(b).toString(16)).slice(-2)}return a}function hextob64(a){return hex2b64(a)}function hextob64nl(b){var a=hextob64(b);var c=a.replace(/(.{64})/g,\"$1\\r\\n\");c=c.replace(/\\r\\n$/,\"\");return c}function b64nltohex(b){var a=b.replace(/[^0-9A-Za-z\\/+=]*/g,\"\");var c=b64tohex(a);return c}function uricmptohex(a){return a.replace(/%/g,\"\")}function hextouricmp(a){return a.replace(/(..)/g,\"%$1\")}function encodeURIComponentAll(a){var d=encodeURIComponent(a);var b=\"\";for(var c=0;c<d.length;c++){if(d[c]==\"%\"){b=b+d.substr(c,3);c=c+2}else{b=b+\"%\"+stohex(d[c])}}return b}function newline_toUnix(a){a=a.replace(/\\r\\n/mg,\"\\n\");return a}function newline_toDos(a){a=a.replace(/\\r\\n/mg,\"\\n\");a=a.replace(/\\n/mg,\"\\r\\n\");return a}function intarystrtohex(b){b=b.replace(/^\\s*\\[\\s*/,\"\");b=b.replace(/\\s*\\]\\s*$/,\"\");b=b.replace(/\\s*/g,\"\");try{var c=b.split(/,/).map(function(g,e,h){var f=parseInt(g);if(f<0||255<f){throw\"integer not in range 0-255\"}var d=(\"00\"+f.toString(16)).slice(-2);return d}).join(\"\");return c}catch(a){throw\"malformed integer array string: \"+a}}var strdiffidx=function(c,a){var d=c.length;if(c.length>a.length){d=a.length}for(var b=0;b<d;b++){if(c.charCodeAt(b)!=a.charCodeAt(b)){return b}}if(c.length!=a.length){return d}return -1};\n\t/*! crypto-1.1.8.js (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.crypto==\"undefined\"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.Util=new function(){this.DIGESTINFOHEAD={sha1:\"3021300906052b0e03021a05000414\",sha224:\"302d300d06096086480165030402040500041c\",sha256:\"3031300d060960864801650304020105000420\",sha384:\"3041300d060960864801650304020205000430\",sha512:\"3051300d060960864801650304020305000440\",md2:\"3020300c06082a864886f70d020205000410\",md5:\"3020300c06082a864886f70d020505000410\",ripemd160:\"3021300906052b2403020105000414\",};this.DEFAULTPROVIDER={md5:\"cryptojs\",sha1:\"cryptojs\",sha224:\"cryptojs\",sha256:\"cryptojs\",sha384:\"cryptojs\",sha512:\"cryptojs\",ripemd160:\"cryptojs\",hmacmd5:\"cryptojs\",hmacsha1:\"cryptojs\",hmacsha224:\"cryptojs\",hmacsha256:\"cryptojs\",hmacsha384:\"cryptojs\",hmacsha512:\"cryptojs\",hmacripemd160:\"cryptojs\",MD5withRSA:\"cryptojs/jsrsa\",SHA1withRSA:\"cryptojs/jsrsa\",SHA224withRSA:\"cryptojs/jsrsa\",SHA256withRSA:\"cryptojs/jsrsa\",SHA384withRSA:\"cryptojs/jsrsa\",SHA512withRSA:\"cryptojs/jsrsa\",RIPEMD160withRSA:\"cryptojs/jsrsa\",MD5withECDSA:\"cryptojs/jsrsa\",SHA1withECDSA:\"cryptojs/jsrsa\",SHA224withECDSA:\"cryptojs/jsrsa\",SHA256withECDSA:\"cryptojs/jsrsa\",SHA384withECDSA:\"cryptojs/jsrsa\",SHA512withECDSA:\"cryptojs/jsrsa\",RIPEMD160withECDSA:\"cryptojs/jsrsa\",SHA1withDSA:\"cryptojs/jsrsa\",SHA224withDSA:\"cryptojs/jsrsa\",SHA256withDSA:\"cryptojs/jsrsa\",MD5withRSAandMGF1:\"cryptojs/jsrsa\",SHA1withRSAandMGF1:\"cryptojs/jsrsa\",SHA224withRSAandMGF1:\"cryptojs/jsrsa\",SHA256withRSAandMGF1:\"cryptojs/jsrsa\",SHA384withRSAandMGF1:\"cryptojs/jsrsa\",SHA512withRSAandMGF1:\"cryptojs/jsrsa\",RIPEMD160withRSAandMGF1:\"cryptojs/jsrsa\",};this.CRYPTOJSMESSAGEDIGESTNAME={md5:CryptoJS.algo.MD5,sha1:CryptoJS.algo.SHA1,sha224:CryptoJS.algo.SHA224,sha256:CryptoJS.algo.SHA256,sha384:CryptoJS.algo.SHA384,sha512:CryptoJS.algo.SHA512,ripemd160:CryptoJS.algo.RIPEMD160};this.getDigestInfoHex=function(a,b){if(typeof this.DIGESTINFOHEAD[b]==\"undefined\"){throw\"alg not supported in Util.DIGESTINFOHEAD: \"+b}return this.DIGESTINFOHEAD[b]+a};this.getPaddedDigestInfoHex=function(h,a,j){var c=this.getDigestInfoHex(h,a);var d=j/4;if(c.length+22>d){throw\"key is too short for SigAlg: keylen=\"+j+\",\"+a}var b=\"0001\";var k=\"00\"+c;var g=\"\";var l=d-b.length-k.length;for(var f=0;f<l;f+=2){g+=\"ff\"}var e=b+g+k;return e};this.hashString=function(a,c){var b=new KJUR.crypto.MessageDigest({alg:c});return b.digestString(a)};this.hashHex=function(b,c){var a=new KJUR.crypto.MessageDigest({alg:c});return a.digestHex(b)};this.sha1=function(a){var b=new KJUR.crypto.MessageDigest({alg:\"sha1\",prov:\"cryptojs\"});return b.digestString(a)};this.sha256=function(a){var b=new KJUR.crypto.MessageDigest({alg:\"sha256\",prov:\"cryptojs\"});return b.digestString(a)};this.sha256Hex=function(a){var b=new KJUR.crypto.MessageDigest({alg:\"sha256\",prov:\"cryptojs\"});return b.digestHex(a)};this.sha512=function(a){var b=new KJUR.crypto.MessageDigest({alg:\"sha512\",prov:\"cryptojs\"});return b.digestString(a)};this.sha512Hex=function(a){var b=new KJUR.crypto.MessageDigest({alg:\"sha512\",prov:\"cryptojs\"});return b.digestHex(a)};this.md5=function(a){var b=new KJUR.crypto.MessageDigest({alg:\"md5\",prov:\"cryptojs\"});return b.digestString(a)};this.ripemd160=function(a){var b=new KJUR.crypto.MessageDigest({alg:\"ripemd160\",prov:\"cryptojs\"});return b.digestString(a)};this.getCryptoJSMDByName=function(a){}};KJUR.crypto.MessageDigest=function(c){var b=null;var a=null;var d=null;this.setAlgAndProvider=function(g,f){if(g!=null&&f===undefined){f=KJUR.crypto.Util.DEFAULTPROVIDER[g]}if(\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(g)!=-1&&f==\"cryptojs\"){try{this.md=KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create()}catch(e){throw\"setAlgAndProvider hash alg set fail alg=\"+g+\"/\"+e}this.updateString=function(h){this.md.update(h)};this.updateHex=function(h){var i=CryptoJS.enc.Hex.parse(h);this.md.update(i)};this.digest=function(){var h=this.md.finalize();return h.toString(CryptoJS.enc.Hex)};this.digestString=function(h){this.updateString(h);return this.digest()};this.digestHex=function(h){this.updateHex(h);return this.digest()}}if(\":sha256:\".indexOf(g)!=-1&&f==\"sjcl\"){try{this.md=new sjcl.hash.sha256()}catch(e){throw\"setAlgAndProvider hash alg set fail alg=\"+g+\"/\"+e}this.updateString=function(h){this.md.update(h)};this.updateHex=function(i){var h=sjcl.codec.hex.toBits(i);this.md.update(h)};this.digest=function(){var h=this.md.finalize();return sjcl.codec.hex.fromBits(h)};this.digestString=function(h){this.updateString(h);return this.digest()};this.digestHex=function(h){this.updateHex(h);return this.digest()}}};this.updateString=function(e){throw\"updateString(str) not supported for this alg/prov: \"+this.algName+\"/\"+this.provName};this.updateHex=function(e){throw\"updateHex(hex) not supported for this alg/prov: \"+this.algName+\"/\"+this.provName};this.digest=function(){throw\"digest() not supported for this alg/prov: \"+this.algName+\"/\"+this.provName};this.digestString=function(e){throw\"digestString(str) not supported for this alg/prov: \"+this.algName+\"/\"+this.provName};this.digestHex=function(e){throw\"digestHex(hex) not supported for this alg/prov: \"+this.algName+\"/\"+this.provName};if(c!==undefined){if(c.alg!==undefined){this.algName=c.alg;if(c.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.Mac=function(d){var f=null;var c=null;var a=null;var e=null;var b=null;this.setAlgAndProvider=function(k,i){k=k.toLowerCase();if(k==null){k=\"hmacsha1\"}k=k.toLowerCase();if(k.substr(0,4)!=\"hmac\"){throw\"setAlgAndProvider unsupported HMAC alg: \"+k}if(i===undefined){i=KJUR.crypto.Util.DEFAULTPROVIDER[k]}this.algProv=k+\"/\"+i;var g=k.substr(4);if(\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(g)!=-1&&i==\"cryptojs\"){try{var j=KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];this.mac=CryptoJS.algo.HMAC.create(j,this.pass)}catch(h){throw\"setAlgAndProvider hash alg set fail hashAlg=\"+g+\"/\"+h}this.updateString=function(l){this.mac.update(l)};this.updateHex=function(l){var m=CryptoJS.enc.Hex.parse(l);this.mac.update(m)};this.doFinal=function(){var l=this.mac.finalize();return l.toString(CryptoJS.enc.Hex)};this.doFinalString=function(l){this.updateString(l);return this.doFinal()};this.doFinalHex=function(l){this.updateHex(l);return this.doFinal()}}};this.updateString=function(g){throw\"updateString(str) not supported for this alg/prov: \"+this.algProv};this.updateHex=function(g){throw\"updateHex(hex) not supported for this alg/prov: \"+this.algProv};this.doFinal=function(){throw\"digest() not supported for this alg/prov: \"+this.algProv};this.doFinalString=function(g){throw\"digestString(str) not supported for this alg/prov: \"+this.algProv};this.doFinalHex=function(g){throw\"digestHex(hex) not supported for this alg/prov: \"+this.algProv};this.setPassword=function(h){if(typeof h==\"string\"){var g=h;if(h.length%2==1||!h.match(/^[0-9A-Fa-f]+$/)){g=rstrtohex(h)}this.pass=CryptoJS.enc.Hex.parse(g);return}if(typeof h!=\"object\"){throw\"KJUR.crypto.Mac unsupported password type: \"+h}var g=null;if(h.hex!==undefined){if(h.hex.length%2!=0||!h.hex.match(/^[0-9A-Fa-f]+$/)){throw\"Mac: wrong hex password: \"+h.hex}g=h.hex}if(h.utf8!==undefined){g=utf8tohex(h.utf8)}if(h.rstr!==undefined){g=rstrtohex(h.rstr)}if(h.b64!==undefined){g=b64tohex(h.b64)}if(h.b64u!==undefined){g=b64utohex(h.b64u)}if(g==null){throw\"KJUR.crypto.Mac unsupported password type: \"+h}this.pass=CryptoJS.enc.Hex.parse(g)};if(d!==undefined){if(d.pass!==undefined){this.setPassword(d.pass)}if(d.alg!==undefined){this.algName=d.alg;if(d.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.Signature=function(o){var q=null;var n=null;var r=null;var c=null;var l=null;var d=null;var k=null;var h=null;var p=null;var e=null;var b=-1;var g=null;var j=null;var a=null;var i=null;var f=null;this._setAlgNames=function(){if(this.algName.match(/^(.+)with(.+)$/)){this.mdAlgName=RegExp.$1.toLowerCase();this.pubkeyAlgName=RegExp.$2.toLowerCase()}};this._zeroPaddingOfSignature=function(x,w){var v=\"\";var t=w/4-x.length;for(var u=0;u<t;u++){v=v+\"0\"}return v+x};this.setAlgAndProvider=function(u,t){this._setAlgNames();if(t!=\"cryptojs/jsrsa\"){throw\"provider not supported: \"+t}if(\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(this.mdAlgName)!=-1){try{this.md=new KJUR.crypto.MessageDigest({alg:this.mdAlgName})}catch(s){throw\"setAlgAndProvider hash alg set fail alg=\"+this.mdAlgName+\"/\"+s}this.init=function(w,x){var y=null;try{if(x===undefined){y=KEYUTIL.getKey(w)}else{y=KEYUTIL.getKey(w,x)}}catch(v){throw\"init failed:\"+v}if(y.isPrivate===true){this.prvKey=y;this.state=\"SIGN\"}else{if(y.isPublic===true){this.pubKey=y;this.state=\"VERIFY\"}else{throw\"init failed.:\"+y}}};this.initSign=function(v){if(typeof v.ecprvhex==\"string\"&&typeof v.eccurvename==\"string\"){this.ecprvhex=v.ecprvhex;this.eccurvename=v.eccurvename}else{this.prvKey=v}this.state=\"SIGN\"};this.initVerifyByPublicKey=function(v){if(typeof v.ecpubhex==\"string\"&&typeof v.eccurvename==\"string\"){this.ecpubhex=v.ecpubhex;this.eccurvename=v.eccurvename}else{if(v instanceof KJUR.crypto.ECDSA){this.pubKey=v}else{if(v instanceof RSAKey){this.pubKey=v}}}this.state=\"VERIFY\"};this.initVerifyByCertificatePEM=function(v){var w=new X509();w.readCertPEM(v);this.pubKey=w.subjectPublicKeyRSA;this.state=\"VERIFY\"};this.updateString=function(v){this.md.updateString(v)};this.updateHex=function(v){this.md.updateHex(v)};this.sign=function(){this.sHashHex=this.md.digest();if(typeof this.ecprvhex!=\"undefined\"&&typeof this.eccurvename!=\"undefined\"){var v=new KJUR.crypto.ECDSA({curve:this.eccurvename});this.hSign=v.signHex(this.sHashHex,this.ecprvhex)}else{if(this.prvKey instanceof RSAKey&&this.pubkeyAlgName==\"rsaandmgf1\"){this.hSign=this.prvKey.signWithMessageHashPSS(this.sHashHex,this.mdAlgName,this.pssSaltLen)}else{if(this.prvKey instanceof RSAKey&&this.pubkeyAlgName==\"rsa\"){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex,this.mdAlgName)}else{if(this.prvKey instanceof KJUR.crypto.ECDSA){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}else{if(this.prvKey instanceof KJUR.crypto.DSA){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}else{throw\"Signature: unsupported public key alg: \"+this.pubkeyAlgName}}}}}return this.hSign};this.signString=function(v){this.updateString(v);return this.sign()};this.signHex=function(v){this.updateHex(v);return this.sign()};this.verify=function(v){this.sHashHex=this.md.digest();if(typeof this.ecpubhex!=\"undefined\"&&typeof this.eccurvename!=\"undefined\"){var w=new KJUR.crypto.ECDSA({curve:this.eccurvename});return w.verifyHex(this.sHashHex,v,this.ecpubhex)}else{if(this.pubKey instanceof RSAKey&&this.pubkeyAlgName==\"rsaandmgf1\"){return this.pubKey.verifyWithMessageHashPSS(this.sHashHex,v,this.mdAlgName,this.pssSaltLen)}else{if(this.pubKey instanceof RSAKey&&this.pubkeyAlgName==\"rsa\"){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{if(this.pubKey instanceof KJUR.crypto.ECDSA){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{if(this.pubKey instanceof KJUR.crypto.DSA){return this.pubKey.verifyWithMessageHash(this.sHashHex,v)}else{throw\"Signature: unsupported public key alg: \"+this.pubkeyAlgName}}}}}}}};this.init=function(s,t){throw\"init(key, pass) not supported for this alg:prov=\"+this.algProvName};this.initVerifyByPublicKey=function(s){throw\"initVerifyByPublicKey(rsaPubKeyy) not supported for this alg:prov=\"+this.algProvName};this.initVerifyByCertificatePEM=function(s){throw\"initVerifyByCertificatePEM(certPEM) not supported for this alg:prov=\"+this.algProvName};this.initSign=function(s){throw\"initSign(prvKey) not supported for this alg:prov=\"+this.algProvName};this.updateString=function(s){throw\"updateString(str) not supported for this alg:prov=\"+this.algProvName};this.updateHex=function(s){throw\"updateHex(hex) not supported for this alg:prov=\"+this.algProvName};this.sign=function(){throw\"sign() not supported for this alg:prov=\"+this.algProvName};this.signString=function(s){throw\"digestString(str) not supported for this alg:prov=\"+this.algProvName};this.signHex=function(s){throw\"digestHex(hex) not supported for this alg:prov=\"+this.algProvName};this.verify=function(s){throw\"verify(hSigVal) not supported for this alg:prov=\"+this.algProvName};this.initParams=o;if(o!==undefined){if(o.alg!==undefined){this.algName=o.alg;if(o.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}else{this.provName=o.prov}this.algProvName=this.algName+\":\"+this.provName;this.setAlgAndProvider(this.algName,this.provName);this._setAlgNames()}if(o.psssaltlen!==undefined){this.pssSaltLen=o.psssaltlen}if(o.prvkeypem!==undefined){if(o.prvkeypas!==undefined){throw\"both prvkeypem and prvkeypas parameters not supported\"}else{try{var q=new RSAKey();q.readPrivateKeyFromPEMString(o.prvkeypem);this.initSign(q)}catch(m){throw\"fatal error to load pem private key: \"+m}}}}};KJUR.crypto.OID=new function(){this.oidhex2name={\"2a864886f70d010101\":\"rsaEncryption\",\"2a8648ce3d0201\":\"ecPublicKey\",\"2a8648ce380401\":\"dsa\",\"2a8648ce3d030107\":\"secp256r1\",\"2b8104001f\":\"secp192k1\",\"2b81040021\":\"secp224r1\",\"2b8104000a\":\"secp256k1\",\"2b81040023\":\"secp521r1\",\"2b81040022\":\"secp384r1\",\"2a8648ce380403\":\"SHA1withDSA\",\"608648016503040301\":\"SHA224withDSA\",\"608648016503040302\":\"SHA256withDSA\",}};\n\t/*! ecdsa-modified-1.0.4.js (c) Stephan Thomas, Kenji Urushima | github.com/bitcoinjs/bitcoinjs-lib/blob/master/LICENSE\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.crypto==\"undefined\"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.ECDSA=function(h){var e=\"secp256r1\";var g=null;var b=null;var f=null;var a=new SecureRandom();var d=null;this.type=\"EC\";function c(s,o,r,n){var j=Math.max(o.bitLength(),n.bitLength());var t=s.add2D(r);var q=s.curve.getInfinity();for(var p=j-1;p>=0;--p){q=q.twice2D();q.z=BigInteger.ONE;if(o.testBit(p)){if(n.testBit(p)){q=q.add2D(t)}else{q=q.add2D(s)}}else{if(n.testBit(p)){q=q.add2D(r)}}}return q}this.getBigRandom=function(i){return new BigInteger(i.bitLength(),a).mod(i.subtract(BigInteger.ONE)).add(BigInteger.ONE)};this.setNamedCurve=function(i){this.ecparams=KJUR.crypto.ECParameterDB.getByName(i);this.prvKeyHex=null;this.pubKeyHex=null;this.curveName=i};this.setPrivateKeyHex=function(i){this.isPrivate=true;this.prvKeyHex=i};this.setPublicKeyHex=function(i){this.isPublic=true;this.pubKeyHex=i};this.generateKeyPairHex=function(){var k=this.ecparams.n;var n=this.getBigRandom(k);var l=this.ecparams.G.multiply(n);var q=l.getX().toBigInteger();var o=l.getY().toBigInteger();var i=this.ecparams.keylen/4;var m=(\"0000000000\"+n.toString(16)).slice(-i);var r=(\"0000000000\"+q.toString(16)).slice(-i);var p=(\"0000000000\"+o.toString(16)).slice(-i);var j=\"04\"+r+p;this.setPrivateKeyHex(m);this.setPublicKeyHex(j);return{ecprvhex:m,ecpubhex:j}};this.signWithMessageHash=function(i){return this.signHex(i,this.prvKeyHex)};this.signHex=function(o,j){var t=new BigInteger(j,16);var l=this.ecparams.n;var q=new BigInteger(o,16);do{var m=this.getBigRandom(l);var u=this.ecparams.G;var p=u.multiply(m);var i=p.getX().toBigInteger().mod(l)}while(i.compareTo(BigInteger.ZERO)<=0);var v=m.modInverse(l).multiply(q.add(t.multiply(i))).mod(l);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(i,v)};this.sign=function(m,u){var q=u;var j=this.ecparams.n;var p=BigInteger.fromByteArrayUnsigned(m);do{var l=this.getBigRandom(j);var t=this.ecparams.G;var o=t.multiply(l);var i=o.getX().toBigInteger().mod(j)}while(i.compareTo(BigInteger.ZERO)<=0);var v=l.modInverse(j).multiply(p.add(q.multiply(i))).mod(j);return this.serializeSig(i,v)};this.verifyWithMessageHash=function(j,i){return this.verifyHex(j,i,this.pubKeyHex)};this.verifyHex=function(m,i,p){var l,j;var o=KJUR.crypto.ECDSA.parseSigHex(i);l=o.r;j=o.s;var k;k=ECPointFp.decodeFromHex(this.ecparams.curve,p);var n=new BigInteger(m,16);return this.verifyRaw(n,l,j,k)};this.verify=function(o,p,j){var l,i;if(Bitcoin.Util.isArray(p)){var n=this.parseSig(p);l=n.r;i=n.s}else{if(\"object\"===typeof p&&p.r&&p.s){l=p.r;i=p.s}else{throw\"Invalid value for signature\"}}var k;if(j instanceof ECPointFp){k=j}else{if(Bitcoin.Util.isArray(j)){k=ECPointFp.decodeFrom(this.ecparams.curve,j)}else{throw\"Invalid format for pubkey value, must be byte array or ECPointFp\"}}var m=BigInteger.fromByteArrayUnsigned(o);return this.verifyRaw(m,l,i,k)};this.verifyRaw=function(o,i,w,m){var l=this.ecparams.n;var u=this.ecparams.G;if(i.compareTo(BigInteger.ONE)<0||i.compareTo(l)>=0){return false}if(w.compareTo(BigInteger.ONE)<0||w.compareTo(l)>=0){return false}var p=w.modInverse(l);var k=o.multiply(p).mod(l);var j=i.multiply(p).mod(l);var q=u.multiply(k).add(m.multiply(j));var t=q.getX().toBigInteger().mod(l);return t.equals(i)};this.serializeSig=function(k,j){var l=k.toByteArraySigned();var i=j.toByteArraySigned();var m=[];m.push(2);m.push(l.length);m=m.concat(l);m.push(2);m.push(i.length);m=m.concat(i);m.unshift(m.length);m.unshift(48);return m};this.parseSig=function(n){var m;if(n[0]!=48){throw new Error(\"Signature not a valid DERSequence\")}m=2;if(n[m]!=2){throw new Error(\"First element in signature must be a DERInteger\")}var l=n.slice(m+2,m+2+n[m+1]);m+=2+n[m+1];if(n[m]!=2){throw new Error(\"Second element in signature must be a DERInteger\")}var i=n.slice(m+2,m+2+n[m+1]);m+=2+n[m+1];var k=BigInteger.fromByteArrayUnsigned(l);var j=BigInteger.fromByteArrayUnsigned(i);return{r:k,s:j}};this.parseSigCompact=function(m){if(m.length!==65){throw\"Signature has the wrong length\"}var j=m[0]-27;if(j<0||j>7){throw\"Invalid signature type\"}var o=this.ecparams.n;var l=BigInteger.fromByteArrayUnsigned(m.slice(1,33)).mod(o);var k=BigInteger.fromByteArrayUnsigned(m.slice(33,65)).mod(o);return{r:l,s:k,i:j}};if(h!==undefined){if(h.curve!==undefined){this.curveName=h.curve}}if(this.curveName===undefined){this.curveName=e}this.setNamedCurve(this.curveName);if(h!==undefined){if(h.prv!==undefined){this.setPrivateKeyHex(h.prv)}if(h.pub!==undefined){this.setPublicKeyHex(h.pub)}}};KJUR.crypto.ECDSA.parseSigHex=function(a){var b=KJUR.crypto.ECDSA.parseSigHexInHexRS(a);var d=new BigInteger(b.r,16);var c=new BigInteger(b.s,16);return{r:d,s:c}};KJUR.crypto.ECDSA.parseSigHexInHexRS=function(c){if(c.substr(0,2)!=\"30\"){throw\"signature is not a ASN.1 sequence\"}var b=ASN1HEX.getPosArrayOfChildren_AtObj(c,0);if(b.length!=2){throw\"number of signature ASN.1 sequence elements seem wrong\"}var g=b[0];var f=b[1];if(c.substr(g,2)!=\"02\"){throw\"1st item of sequene of signature is not ASN.1 integer\"}if(c.substr(f,2)!=\"02\"){throw\"2nd item of sequene of signature is not ASN.1 integer\"}var e=ASN1HEX.getHexOfV_AtObj(c,g);var d=ASN1HEX.getHexOfV_AtObj(c,f);return{r:e,s:d}};KJUR.crypto.ECDSA.asn1SigToConcatSig=function(c){var d=KJUR.crypto.ECDSA.parseSigHexInHexRS(c);var b=d.r;var a=d.s;if(b.substr(0,2)==\"00\"&&(((b.length/2)*8)%(16*8))==8){b=b.substr(2)}if(a.substr(0,2)==\"00\"&&(((a.length/2)*8)%(16*8))==8){a=a.substr(2)}if((((b.length/2)*8)%(16*8))!=0){throw\"unknown ECDSA sig r length error\"}if((((a.length/2)*8)%(16*8))!=0){throw\"unknown ECDSA sig s length error\"}return b+a};KJUR.crypto.ECDSA.concatSigToASN1Sig=function(a){if((((a.length/2)*8)%(16*8))!=0){throw\"unknown ECDSA concatinated r-s sig  length error\"}var c=a.substr(0,a.length/2);var b=a.substr(a.length/2);return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c,b)};KJUR.crypto.ECDSA.hexRSSigToASN1Sig=function(b,a){var d=new BigInteger(b,16);var c=new BigInteger(a,16);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d,c)};KJUR.crypto.ECDSA.biRSSigToASN1Sig=function(e,c){var b=new KJUR.asn1.DERInteger({bigint:e});var a=new KJUR.asn1.DERInteger({bigint:c});var d=new KJUR.asn1.DERSequence({array:[b,a]});return d.getEncodedHex()};\n\t/*! ecparam-1.0.0.js (c) 2013 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.crypto==\"undefined\"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.ECParameterDB=new function(){var b={};var c={};function a(d){return new BigInteger(d,16)}this.getByName=function(e){var d=e;if(typeof c[d]!=\"undefined\"){d=c[e]}if(typeof b[d]!=\"undefined\"){return b[d]}throw\"unregistered EC curve name: \"+d};this.regist=function(A,l,o,g,m,e,j,f,k,u,d,x){b[A]={};var s=a(o);var z=a(g);var y=a(m);var t=a(e);var w=a(j);var r=new ECCurveFp(s,z,y);var q=r.decodePointHex(\"04\"+f+k);b[A][\"name\"]=A;b[A][\"keylen\"]=l;b[A][\"curve\"]=r;b[A][\"G\"]=q;b[A][\"n\"]=t;b[A][\"h\"]=w;b[A][\"oid\"]=d;b[A][\"info\"]=x;for(var v=0;v<u.length;v++){c[u[v]]=A}}};KJUR.crypto.ECParameterDB.regist(\"secp128r1\",128,\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\",\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\",\"E87579C11079F43DD824993C2CEE5ED3\",\"FFFFFFFE0000000075A30D1B9038A115\",\"1\",\"161FF7528B899B2D0C28607CA52C5B86\",\"CF5AC8395BAFEB13C02DA292DDED7A83\",[],\"\",\"secp128r1 : SECG curve over a 128 bit prime field\");KJUR.crypto.ECParameterDB.regist(\"secp160k1\",160,\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\",\"0\",\"7\",\"0100000000000000000001B8FA16DFAB9ACA16B6B3\",\"1\",\"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\",\"938CF935318FDCED6BC28286531733C3F03C4FEE\",[],\"\",\"secp160k1 : SECG curve over a 160 bit prime field\");KJUR.crypto.ECParameterDB.regist(\"secp160r1\",160,\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\",\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\",\"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\",\"0100000000000000000001F4C8F927AED3CA752257\",\"1\",\"4A96B5688EF573284664698968C38BB913CBFC82\",\"23A628553168947D59DCC912042351377AC5FB32\",[],\"\",\"secp160r1 : SECG curve over a 160 bit prime field\");KJUR.crypto.ECParameterDB.regist(\"secp192k1\",192,\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\",\"0\",\"3\",\"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\",\"1\",\"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\",\"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\",[]);KJUR.crypto.ECParameterDB.regist(\"secp192r1\",192,\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\",\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\",\"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\",\"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\",\"1\",\"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\",\"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\",[]);KJUR.crypto.ECParameterDB.regist(\"secp224r1\",224,\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\",\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\",\"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\",\"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\",\"1\",\"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\",\"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\",[]);KJUR.crypto.ECParameterDB.regist(\"secp256k1\",256,\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F\",\"0\",\"7\",\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\",\"1\",\"79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798\",\"483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8\",[]);KJUR.crypto.ECParameterDB.regist(\"secp256r1\",256,\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\",\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\",\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\",\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\",\"1\",\"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\",\"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\",[\"NIST P-256\",\"P-256\",\"prime256v1\"]);KJUR.crypto.ECParameterDB.regist(\"secp384r1\",384,\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF\",\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC\",\"B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF\",\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973\",\"1\",\"AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7\",\"3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f\",[\"NIST P-384\",\"P-384\"]);KJUR.crypto.ECParameterDB.regist(\"secp521r1\",521,\"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC\",\"051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00\",\"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409\",\"1\",\"C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66\",\"011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650\",[\"NIST P-521\",\"P-521\"]);\n\t/*! dsa-modified-1.0.1.js (c) Recurity Labs GmbH, Kenji Urushimma | github.com/openpgpjs/openpgpjs/blob/master/LICENSE\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.crypto==\"undefined\"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.DSA=function(){this.p=null;this.q=null;this.g=null;this.y=null;this.x=null;this.type=\"DSA\";this.setPrivate=function(z,w,v,A,u){this.isPrivate=true;this.p=z;this.q=w;this.g=v;this.y=A;this.x=u};this.setPublic=function(w,v,u,z){this.isPublic=true;this.p=w;this.q=v;this.g=u;this.y=z;this.x=null};this.signWithMessageHash=function(z){var v=this.p;var u=this.q;var C=this.g;var D=this.y;var E=this.x;var A=z.substr(0,u.bitLength()/4);var B=new BigInteger(z,16);var w=n(BigInteger.ONE.add(BigInteger.ONE),u.subtract(BigInteger.ONE));var G=(C.modPow(w,v)).mod(u);var F=(w.modInverse(u).multiply(B.add(E.multiply(G)))).mod(u);var H=KJUR.asn1.ASN1Util.jsonToASN1HEX({seq:[{\"int\":{bigint:G}},{\"int\":{bigint:F}}]});return H};this.verifyWithMessageHash=function(C,B){var z=this.p;var u=this.q;var G=this.g;var H=this.y;var E=this.parseASN1Signature(B);var K=E[0];var J=E[1];var C=C.substr(0,u.bitLength()/4);var D=new BigInteger(C,16);if(BigInteger.ZERO.compareTo(K)>0||K.compareTo(u)>0||BigInteger.ZERO.compareTo(J)>0||J.compareTo(u)>0){throw\"invalid DSA signature\"}var I=J.modInverse(u);var A=D.multiply(I).mod(u);var v=K.multiply(I).mod(u);var F=G.modPow(A,z).multiply(H.modPow(v,z)).mod(z).mod(u);return F.compareTo(K)==0};this.parseASN1Signature=function(u){try{var y=new BigInteger(ASN1HEX.getVbyList(u,0,[0],\"02\"),16);var v=new BigInteger(ASN1HEX.getVbyList(u,0,[1],\"02\"),16);return[y,v]}catch(w){throw\"malformed DSA signature\"}};function d(E,w,B,v,u,C){var z=KJUR.crypto.Util.hashString(w,E.toLowerCase());var z=z.substr(0,u.bitLength()/4);var A=new BigInteger(z,16);var y=n(BigInteger.ONE.add(BigInteger.ONE),u.subtract(BigInteger.ONE));var F=(B.modPow(y,v)).mod(u);var D=(y.modInverse(u).multiply(A.add(C.multiply(F)))).mod(u);var G=new Array();G[0]=F;G[1]=D;return G}function r(v){var u=openpgp.config.config.prefer_hash_algorithm;switch(Math.round(v.bitLength()/8)){case 20:if(u!=2&&u>11&&u!=10&&u<8){return 2}return u;case 28:if(u>11&&u<8){return 11}return u;case 32:if(u>10&&u<8){return 8}return u;default:util.print_debug(\"DSA select hash algorithm: returning null for an unknown length of q\");return null}}this.select_hash_algorithm=r;function m(I,K,J,B,z,u,F,G){var C=KJUR.crypto.Util.hashString(B,I.toLowerCase());var C=C.substr(0,u.bitLength()/4);var D=new BigInteger(C,16);if(BigInteger.ZERO.compareTo(K)>0||K.compareTo(u)>0||BigInteger.ZERO.compareTo(J)>0||J.compareTo(u)>0){util.print_error(\"invalid DSA Signature\");return null}var H=J.modInverse(u);var A=D.multiply(H).mod(u);var v=K.multiply(H).mod(u);var E=F.modPow(A,z).multiply(G.modPow(v,z)).mod(z).mod(u);return E.compareTo(K)==0}function a(z){var A=new BigInteger(z,primeCenterie);var y=j(q,512);var u=t(p,q,z);var v;do{v=new BigInteger(q.bitCount(),rand)}while(x.compareTo(BigInteger.ZERO)!=1&&x.compareTo(q)!=-1);var w=g.modPow(x,p);return{x:v,q:A,p:y,g:u,y:w}}function j(y,z,w){if(z%64!=0){return false}var u;var v;do{u=w(bitcount,true);v=u.subtract(BigInteger.ONE);u=u.subtract(v.remainder(y))}while(!u.isProbablePrime(primeCenterie)||u.bitLength()!=l);return u}function t(B,z,A,w){var u=B.subtract(BigInteger.ONE);var y=u.divide(z);var v;do{v=w(A)}while(v.compareTo(u)!=-1&&v.compareTo(BigInteger.ONE)!=1);return v.modPow(y,B)}function o(w,y,u){var v;do{v=u(y,false)}while(v.compareTo(w)!=-1&&v.compareTo(BigInteger.ZERO)!=1);return v}function i(v,w){k=o(v);var u=g.modPow(k,w).mod(v);return u}function h(B,w,y,v,z,u){var A=B(v);s=(w.modInverse(z).multiply(A.add(u.multiply(y)))).mod(z);return s}this.sign=d;this.verify=m;function n(w,u){if(u.compareTo(w)<=0){return}var v=u.subtract(w);var y=e(v.bitLength());while(y>v){y=e(v.bitLength())}return w.add(y)}function e(w){if(w<0){return null}var u=Math.floor((w+7)/8);var v=c(u);if(w%8>0){v=String.fromCharCode((Math.pow(2,w%8)-1)&v.charCodeAt(0))+v.substring(1)}return new BigInteger(f(v),16)}function c(w){var u=\"\";for(var v=0;v<w;v++){u+=String.fromCharCode(b())}return u}function b(){var u=new Uint32Array(1);window.crypto.getRandomValues(u);return u[0]&255}function f(y){if(y==null){return\"\"}var v=[];var w=y.length;var z=0;var u;while(z<w){u=y[z++].charCodeAt().toString(16);while(u.length<2){u=\"0\"+u}v.push(\"\"+u)}return v.join(\"\")}this.getRandomBigIntegerInRange=n;this.getRandomBigInteger=e;this.getRandomBytes=c};\n\t/*! pkcs5pkey-1.0.6.js (c) 2013-2014 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tvar PKCS5PKEY=function(){var c=function(n,p,o){return i(CryptoJS.AES,n,p,o)};var d=function(n,p,o){return i(CryptoJS.TripleDES,n,p,o)};var i=function(q,v,s,o){var p=CryptoJS.enc.Hex.parse(v);var u=CryptoJS.enc.Hex.parse(s);var n=CryptoJS.enc.Hex.parse(o);var r={};r.key=u;r.iv=n;r.ciphertext=p;var t=q.decrypt(r,u,{iv:n});return CryptoJS.enc.Hex.stringify(t)};var j=function(n,p,o){return e(CryptoJS.AES,n,p,o)};var m=function(n,p,o){return e(CryptoJS.TripleDES,n,p,o)};var e=function(s,x,v,p){var r=CryptoJS.enc.Hex.parse(x);var w=CryptoJS.enc.Hex.parse(v);var o=CryptoJS.enc.Hex.parse(p);var n={};var u=s.encrypt(r,w,{iv:o});var q=CryptoJS.enc.Hex.parse(u.toString());var t=CryptoJS.enc.Base64.stringify(q);return t};var g={\"AES-256-CBC\":{proc:c,eproc:j,keylen:32,ivlen:16},\"AES-192-CBC\":{proc:c,eproc:j,keylen:24,ivlen:16},\"AES-128-CBC\":{proc:c,eproc:j,keylen:16,ivlen:16},\"DES-EDE3-CBC\":{proc:d,eproc:m,keylen:24,ivlen:8}};var b=function(n){return g[n][\"proc\"]};var k=function(n){var p=CryptoJS.lib.WordArray.random(n);var o=CryptoJS.enc.Hex.stringify(p);return o};var l=function(q){var r={};if(q.match(new RegExp(\"DEK-Info: ([^,]+),([0-9A-Fa-f]+)\",\"m\"))){r.cipher=RegExp.$1;r.ivsalt=RegExp.$2}if(q.match(new RegExp(\"-----BEGIN ([A-Z]+) PRIVATE KEY-----\"))){r.type=RegExp.$1}var p=-1;var t=0;if(q.indexOf(\"\\r\\n\\r\\n\")!=-1){p=q.indexOf(\"\\r\\n\\r\\n\");t=2}if(q.indexOf(\"\\n\\n\")!=-1){p=q.indexOf(\"\\n\\n\");t=1}var o=q.indexOf(\"-----END\");if(p!=-1&&o!=-1){var n=q.substring(p+t*2,o-t);n=n.replace(/\\s+/g,\"\");r.data=n}return r};var h=function(o,w,n){var t=n.substring(0,16);var r=CryptoJS.enc.Hex.parse(t);var p=CryptoJS.enc.Utf8.parse(w);var s=g[o][\"keylen\"]+g[o][\"ivlen\"];var v=\"\";var u=null;for(;;){var q=CryptoJS.algo.MD5.create();if(u!=null){q.update(u)}q.update(p);q.update(r);u=q.finalize();v=v+CryptoJS.enc.Hex.stringify(u);if(v.length>=s*2){break}}var x={};x.keyhex=v.substr(0,g[o][\"keylen\"]*2);x.ivhex=v.substr(g[o][\"keylen\"]*2,g[o][\"ivlen\"]*2);return x};var a=function(n,t,p,u){var q=CryptoJS.enc.Base64.parse(n);var o=CryptoJS.enc.Hex.stringify(q);var s=g[t][\"proc\"];var r=s(o,p,u);return r};var f=function(n,q,o,s){var p=g[q][\"eproc\"];var r=p(n,o,s);return r};return{version:\"1.0.5\",getHexFromPEM:function(o,r){var p=o;if(p.indexOf(\"BEGIN \"+r)==-1){throw\"can't find PEM header: \"+r}p=p.replace(\"-----BEGIN \"+r+\"-----\",\"\");p=p.replace(\"-----END \"+r+\"-----\",\"\");var q=p.replace(/\\s+/g,\"\");var n=b64tohex(q);return n},getDecryptedKeyHexByKeyIV:function(o,r,q,p){var n=b(r);return n(o,q,p)},parsePKCS5PEM:function(n){return l(n)},getKeyAndUnusedIvByPasscodeAndIvsalt:function(o,n,p){return h(o,n,p)},decryptKeyB64:function(n,p,o,q){return a(n,p,o,q)},getDecryptedKeyHex:function(w,v){var o=l(w);var r=o.type;var p=o.cipher;var n=o.ivsalt;var q=o.data;var u=h(p,v,n);var t=u.keyhex;var s=a(q,p,t,n);return s},getRSAKeyFromEncryptedPKCS5PEM:function(p,o){var q=this.getDecryptedKeyHex(p,o);var n=new RSAKey();n.readPrivateKeyFromASN1HexString(q);return n},getEryptedPKCS5PEMFromPrvKeyHex:function(q,x,r,p){var n=\"\";if(typeof r==\"undefined\"||r==null){r=\"AES-256-CBC\"}if(typeof g[r]==\"undefined\"){throw\"PKCS5PKEY unsupported algorithm: \"+r}if(typeof p==\"undefined\"||p==null){var t=g[r][\"ivlen\"];var s=k(t);p=s.toUpperCase()}var w=h(r,x,p);var v=w.keyhex;var u=f(q,r,v,p);var o=u.replace(/(.{64})/g,\"$1\\r\\n\");var n=\"-----BEGIN RSA PRIVATE KEY-----\\r\\n\";n+=\"Proc-Type: 4,ENCRYPTED\\r\\n\";n+=\"DEK-Info: \"+r+\",\"+p+\"\\r\\n\";n+=\"\\r\\n\";n+=o;n+=\"\\r\\n-----END RSA PRIVATE KEY-----\\r\\n\";return n},getEryptedPKCS5PEMFromRSAKey:function(C,D,o,s){var A=new KJUR.asn1.DERInteger({\"int\":0});var v=new KJUR.asn1.DERInteger({bigint:C.n});var z=new KJUR.asn1.DERInteger({\"int\":C.e});var B=new KJUR.asn1.DERInteger({bigint:C.d});var t=new KJUR.asn1.DERInteger({bigint:C.p});var r=new KJUR.asn1.DERInteger({bigint:C.q});var y=new KJUR.asn1.DERInteger({bigint:C.dmp1});var u=new KJUR.asn1.DERInteger({bigint:C.dmq1});var x=new KJUR.asn1.DERInteger({bigint:C.coeff});var E=new KJUR.asn1.DERSequence({array:[A,v,z,B,t,r,y,u,x]});var w=E.getEncodedHex();return this.getEryptedPKCS5PEMFromPrvKeyHex(w,D,o,s)},newEncryptedPKCS5PEM:function(n,o,r,s){if(typeof o==\"undefined\"||o==null){o=1024}if(typeof r==\"undefined\"||r==null){r=\"10001\"}var p=new RSAKey();p.generate(o,r);var q=null;if(typeof s==\"undefined\"||s==null){q=this.getEncryptedPKCS5PEMFromRSAKey(pkey,n)}else{q=this.getEncryptedPKCS5PEMFromRSAKey(pkey,n,s)}return q},getRSAKeyFromPlainPKCS8PEM:function(p){if(p.match(/ENCRYPTED/)){throw\"pem shall be not ENCRYPTED\"}var o=this.getHexFromPEM(p,\"PRIVATE KEY\");var n=this.getRSAKeyFromPlainPKCS8Hex(o);return n},getRSAKeyFromPlainPKCS8Hex:function(q){var p=ASN1HEX.getPosArrayOfChildren_AtObj(q,0);if(p.length!=3){throw\"outer DERSequence shall have 3 elements: \"+p.length}var o=ASN1HEX.getHexOfTLV_AtObj(q,p[1]);if(o!=\"300d06092a864886f70d0101010500\"){throw\"PKCS8 AlgorithmIdentifier is not rsaEnc: \"+o}var o=ASN1HEX.getHexOfTLV_AtObj(q,p[1]);var r=ASN1HEX.getHexOfTLV_AtObj(q,p[2]);var s=ASN1HEX.getHexOfV_AtObj(r,0);var n=new RSAKey();n.readPrivateKeyFromASN1HexString(s);return n},parseHexOfEncryptedPKCS8:function(u){var q={};var p=ASN1HEX.getPosArrayOfChildren_AtObj(u,0);if(p.length!=2){throw\"malformed format: SEQUENCE(0).items != 2: \"+p.length}q.ciphertext=ASN1HEX.getHexOfV_AtObj(u,p[1]);var w=ASN1HEX.getPosArrayOfChildren_AtObj(u,p[0]);if(w.length!=2){throw\"malformed format: SEQUENCE(0.0).items != 2: \"+w.length}if(ASN1HEX.getHexOfV_AtObj(u,w[0])!=\"2a864886f70d01050d\"){throw\"this only supports pkcs5PBES2\"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(u,w[1]);if(w.length!=2){throw\"malformed format: SEQUENCE(0.0.1).items != 2: \"+n.length}var o=ASN1HEX.getPosArrayOfChildren_AtObj(u,n[1]);if(o.length!=2){throw\"malformed format: SEQUENCE(0.0.1.1).items != 2: \"+o.length}if(ASN1HEX.getHexOfV_AtObj(u,o[0])!=\"2a864886f70d0307\"){throw\"this only supports TripleDES\"}q.encryptionSchemeAlg=\"TripleDES\";q.encryptionSchemeIV=ASN1HEX.getHexOfV_AtObj(u,o[1]);var r=ASN1HEX.getPosArrayOfChildren_AtObj(u,n[0]);if(r.length!=2){throw\"malformed format: SEQUENCE(0.0.1.0).items != 2: \"+r.length}if(ASN1HEX.getHexOfV_AtObj(u,r[0])!=\"2a864886f70d01050c\"){throw\"this only supports pkcs5PBKDF2\"}var v=ASN1HEX.getPosArrayOfChildren_AtObj(u,r[1]);if(v.length<2){throw\"malformed format: SEQUENCE(0.0.1.0.1).items < 2: \"+v.length}q.pbkdf2Salt=ASN1HEX.getHexOfV_AtObj(u,v[0]);var s=ASN1HEX.getHexOfV_AtObj(u,v[1]);try{q.pbkdf2Iter=parseInt(s,16)}catch(t){throw\"malformed format pbkdf2Iter: \"+s}return q},getPBKDF2KeyHexFromParam:function(s,n){var r=CryptoJS.enc.Hex.parse(s.pbkdf2Salt);var o=s.pbkdf2Iter;var q=CryptoJS.PBKDF2(n,r,{keySize:192/32,iterations:o});var p=CryptoJS.enc.Hex.stringify(q);return p},getPlainPKCS8HexFromEncryptedPKCS8PEM:function(v,w){var p=this.getHexFromPEM(v,\"ENCRYPTED PRIVATE KEY\");var n=this.parseHexOfEncryptedPKCS8(p);var s=PKCS5PKEY.getPBKDF2KeyHexFromParam(n,w);var t={};t.ciphertext=CryptoJS.enc.Hex.parse(n.ciphertext);var r=CryptoJS.enc.Hex.parse(s);var q=CryptoJS.enc.Hex.parse(n.encryptionSchemeIV);var u=CryptoJS.TripleDES.decrypt(t,r,{iv:q});var o=CryptoJS.enc.Hex.stringify(u);return o},getRSAKeyFromEncryptedPKCS8PEM:function(q,p){var o=this.getPlainPKCS8HexFromEncryptedPKCS8PEM(q,p);var n=this.getRSAKeyFromPlainPKCS8Hex(o);return n},getKeyFromEncryptedPKCS8PEM:function(q,o){var n=this.getPlainPKCS8HexFromEncryptedPKCS8PEM(q,o);var p=this.getKeyFromPlainPrivatePKCS8Hex(n);return p},parsePlainPrivatePKCS8Hex:function(q){var o={};o.algparam=null;if(q.substr(0,2)!=\"30\"){throw\"malformed plain PKCS8 private key(code:001)\"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(q,0);if(p.length!=3){throw\"malformed plain PKCS8 private key(code:002)\"}if(q.substr(p[1],2)!=\"30\"){throw\"malformed PKCS8 private key(code:003)\"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(q,p[1]);if(n.length!=2){throw\"malformed PKCS8 private key(code:004)\"}if(q.substr(n[0],2)!=\"06\"){throw\"malformed PKCS8 private key(code:005)\"}o.algoid=ASN1HEX.getHexOfV_AtObj(q,n[0]);if(q.substr(n[1],2)==\"06\"){o.algparam=ASN1HEX.getHexOfV_AtObj(q,n[1])}if(q.substr(p[2],2)!=\"04\"){throw\"malformed PKCS8 private key(code:006)\"}o.keyidx=ASN1HEX.getStartPosOfV_AtObj(q,p[2]);return o},getKeyFromPlainPrivatePKCS8PEM:function(o){var n=this.getHexFromPEM(o,\"PRIVATE KEY\");var p=this.getKeyFromPlainPrivatePKCS8Hex(n);return p},getKeyFromPlainPrivatePKCS8Hex:function(n){var p=this.parsePlainPrivatePKCS8Hex(n);if(p.algoid==\"2a864886f70d010101\"){this.parsePrivateRawRSAKeyHexAtObj(n,p);var o=p.key;var q=new RSAKey();q.setPrivateEx(o.n,o.e,o.d,o.p,o.q,o.dp,o.dq,o.co);return q}else{if(p.algoid==\"2a8648ce3d0201\"){this.parsePrivateRawECKeyHexAtObj(n,p);if(KJUR.crypto.OID.oidhex2name[p.algparam]===undefined){throw\"KJUR.crypto.OID.oidhex2name undefined: \"+p.algparam}var r=KJUR.crypto.OID.oidhex2name[p.algparam];var q=new KJUR.crypto.ECDSA({curve:r,prv:p.key});return q}else{throw\"unsupported private key algorithm\"}}},getRSAKeyFromPublicPKCS8PEM:function(o){var p=this.getHexFromPEM(o,\"PUBLIC KEY\");var n=this.getRSAKeyFromPublicPKCS8Hex(p);return n},getKeyFromPublicPKCS8PEM:function(o){var p=this.getHexFromPEM(o,\"PUBLIC KEY\");var n=this.getKeyFromPublicPKCS8Hex(p);return n},getKeyFromPublicPKCS8Hex:function(o){var n=this.parsePublicPKCS8Hex(o);if(n.algoid==\"2a864886f70d010101\"){var r=this.parsePublicRawRSAKeyHex(n.key);var p=new RSAKey();p.setPublic(r.n,r.e);return p}else{if(n.algoid==\"2a8648ce3d0201\"){if(KJUR.crypto.OID.oidhex2name[n.algparam]===undefined){throw\"KJUR.crypto.OID.oidhex2name undefined: \"+n.algparam}var q=KJUR.crypto.OID.oidhex2name[n.algparam];var p=new KJUR.crypto.ECDSA({curve:q,pub:n.key});return p}else{throw\"unsupported public key algorithm\"}}},parsePublicRawRSAKeyHex:function(p){var n={};if(p.substr(0,2)!=\"30\"){throw\"malformed RSA key(code:001)\"}var o=ASN1HEX.getPosArrayOfChildren_AtObj(p,0);if(o.length!=2){throw\"malformed RSA key(code:002)\"}if(p.substr(o[0],2)!=\"02\"){throw\"malformed RSA key(code:003)\"}n.n=ASN1HEX.getHexOfV_AtObj(p,o[0]);if(p.substr(o[1],2)!=\"02\"){throw\"malformed RSA key(code:004)\"}n.e=ASN1HEX.getHexOfV_AtObj(p,o[1]);return n},parsePrivateRawRSAKeyHexAtObj:function(o,q){var p=q.keyidx;if(o.substr(p,2)!=\"30\"){throw\"malformed RSA private key(code:001)\"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(o,p);if(n.length!=9){throw\"malformed RSA private key(code:002)\"}q.key={};q.key.n=ASN1HEX.getHexOfV_AtObj(o,n[1]);q.key.e=ASN1HEX.getHexOfV_AtObj(o,n[2]);q.key.d=ASN1HEX.getHexOfV_AtObj(o,n[3]);q.key.p=ASN1HEX.getHexOfV_AtObj(o,n[4]);q.key.q=ASN1HEX.getHexOfV_AtObj(o,n[5]);q.key.dp=ASN1HEX.getHexOfV_AtObj(o,n[6]);q.key.dq=ASN1HEX.getHexOfV_AtObj(o,n[7]);q.key.co=ASN1HEX.getHexOfV_AtObj(o,n[8])},parsePrivateRawECKeyHexAtObj:function(o,q){var p=q.keyidx;if(o.substr(p,2)!=\"30\"){throw\"malformed ECC private key(code:001)\"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(o,p);if(n.length!=3){throw\"malformed ECC private key(code:002)\"}if(o.substr(n[1],2)!=\"04\"){throw\"malformed ECC private key(code:003)\"}q.key=ASN1HEX.getHexOfV_AtObj(o,n[1])},parsePublicPKCS8Hex:function(q){var o={};o.algparam=null;var p=ASN1HEX.getPosArrayOfChildren_AtObj(q,0);if(p.length!=2){throw\"outer DERSequence shall have 2 elements: \"+p.length}var r=p[0];if(q.substr(r,2)!=\"30\"){throw\"malformed PKCS8 public key(code:001)\"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(q,r);if(n.length!=2){throw\"malformed PKCS8 public key(code:002)\"}if(q.substr(n[0],2)!=\"06\"){throw\"malformed PKCS8 public key(code:003)\"}o.algoid=ASN1HEX.getHexOfV_AtObj(q,n[0]);if(q.substr(n[1],2)==\"06\"){o.algparam=ASN1HEX.getHexOfV_AtObj(q,n[1])}if(q.substr(p[1],2)!=\"03\"){throw\"malformed PKCS8 public key(code:004)\"}o.key=ASN1HEX.getHexOfV_AtObj(q,p[1]).substr(2);return o},getRSAKeyFromPublicPKCS8Hex:function(r){var q=ASN1HEX.getPosArrayOfChildren_AtObj(r,0);if(q.length!=2){throw\"outer DERSequence shall have 2 elements: \"+q.length}var p=ASN1HEX.getHexOfTLV_AtObj(r,q[0]);if(p!=\"300d06092a864886f70d0101010500\"){throw\"PKCS8 AlgorithmId is not rsaEncryption\"}if(r.substr(q[1],2)!=\"03\"){throw\"PKCS8 Public Key is not BITSTRING encapslated.\"}var t=ASN1HEX.getStartPosOfV_AtObj(r,q[1])+2;if(r.substr(t,2)!=\"30\"){throw\"PKCS8 Public Key is not SEQUENCE.\"}var n=ASN1HEX.getPosArrayOfChildren_AtObj(r,t);if(n.length!=2){throw\"inner DERSequence shall have 2 elements: \"+n.length}if(r.substr(n[0],2)!=\"02\"){throw\"N is not ASN.1 INTEGER\"}if(r.substr(n[1],2)!=\"02\"){throw\"E is not ASN.1 INTEGER\"}var u=ASN1HEX.getHexOfV_AtObj(r,n[0]);var s=ASN1HEX.getHexOfV_AtObj(r,n[1]);var o=new RSAKey();o.setPublic(u,s);return o},}}();\n\t/*! keyutil-1.0.12.js (c) 2013-2015 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tvar KEYUTIL=function(){var d=function(p,r,q){return k(CryptoJS.AES,p,r,q)};var e=function(p,r,q){return k(CryptoJS.TripleDES,p,r,q)};var a=function(p,r,q){return k(CryptoJS.DES,p,r,q)};var k=function(s,x,u,q){var r=CryptoJS.enc.Hex.parse(x);var w=CryptoJS.enc.Hex.parse(u);var p=CryptoJS.enc.Hex.parse(q);var t={};t.key=w;t.iv=p;t.ciphertext=r;var v=s.decrypt(t,w,{iv:p});return CryptoJS.enc.Hex.stringify(v)};var l=function(p,r,q){return g(CryptoJS.AES,p,r,q)};var o=function(p,r,q){return g(CryptoJS.TripleDES,p,r,q)};var f=function(p,r,q){return g(CryptoJS.DES,p,r,q)};var g=function(t,y,v,q){var s=CryptoJS.enc.Hex.parse(y);var x=CryptoJS.enc.Hex.parse(v);var p=CryptoJS.enc.Hex.parse(q);var w=t.encrypt(s,x,{iv:p});var r=CryptoJS.enc.Hex.parse(w.toString());var u=CryptoJS.enc.Base64.stringify(r);return u};var i={\"AES-256-CBC\":{proc:d,eproc:l,keylen:32,ivlen:16},\"AES-192-CBC\":{proc:d,eproc:l,keylen:24,ivlen:16},\"AES-128-CBC\":{proc:d,eproc:l,keylen:16,ivlen:16},\"DES-EDE3-CBC\":{proc:e,eproc:o,keylen:24,ivlen:8},\"DES-CBC\":{proc:a,eproc:f,keylen:8,ivlen:8}};var c=function(p){return i[p][\"proc\"]};var m=function(p){var r=CryptoJS.lib.WordArray.random(p);var q=CryptoJS.enc.Hex.stringify(r);return q};var n=function(t){var u={};if(t.match(new RegExp(\"DEK-Info: ([^,]+),([0-9A-Fa-f]+)\",\"m\"))){u.cipher=RegExp.$1;u.ivsalt=RegExp.$2}if(t.match(new RegExp(\"-----BEGIN ([A-Z]+) PRIVATE KEY-----\"))){u.type=RegExp.$1}var r=-1;var v=0;if(t.indexOf(\"\\r\\n\\r\\n\")!=-1){r=t.indexOf(\"\\r\\n\\r\\n\");v=2}if(t.indexOf(\"\\n\\n\")!=-1){r=t.indexOf(\"\\n\\n\");v=1}var q=t.indexOf(\"-----END\");if(r!=-1&&q!=-1){var p=t.substring(r+v*2,q-v);p=p.replace(/\\s+/g,\"\");u.data=p}return u};var j=function(q,y,p){var v=p.substring(0,16);var t=CryptoJS.enc.Hex.parse(v);var r=CryptoJS.enc.Utf8.parse(y);var u=i[q][\"keylen\"]+i[q][\"ivlen\"];var x=\"\";var w=null;for(;;){var s=CryptoJS.algo.MD5.create();if(w!=null){s.update(w)}s.update(r);s.update(t);w=s.finalize();x=x+CryptoJS.enc.Hex.stringify(w);if(x.length>=u*2){break}}var z={};z.keyhex=x.substr(0,i[q][\"keylen\"]*2);z.ivhex=x.substr(i[q][\"keylen\"]*2,i[q][\"ivlen\"]*2);return z};var b=function(p,v,r,w){var s=CryptoJS.enc.Base64.parse(p);var q=CryptoJS.enc.Hex.stringify(s);var u=i[v][\"proc\"];var t=u(q,r,w);return t};var h=function(p,s,q,u){var r=i[s][\"eproc\"];var t=r(p,q,u);return t};return{version:\"1.0.0\",getHexFromPEM:function(q,u){var r=q;if(r.indexOf(\"-----BEGIN \")==-1){throw\"can't find PEM header: \"+u}if(typeof u==\"string\"&&u!=\"\"){r=r.replace(\"-----BEGIN \"+u+\"-----\",\"\");r=r.replace(\"-----END \"+u+\"-----\",\"\")}else{r=r.replace(/-----BEGIN [^-]+-----/,\"\");r=r.replace(/-----END [^-]+-----/,\"\")}var t=r.replace(/\\s+/g,\"\");var p=b64tohex(t);return p},getDecryptedKeyHexByKeyIV:function(q,t,s,r){var p=c(t);return p(q,s,r)},parsePKCS5PEM:function(p){return n(p)},getKeyAndUnusedIvByPasscodeAndIvsalt:function(q,p,r){return j(q,p,r)},decryptKeyB64:function(p,r,q,s){return b(p,r,q,s)},getDecryptedKeyHex:function(y,x){var q=n(y);var t=q.type;var r=q.cipher;var p=q.ivsalt;var s=q.data;var w=j(r,x,p);var v=w.keyhex;var u=b(s,r,v,p);return u},getRSAKeyFromEncryptedPKCS5PEM:function(r,q){var s=this.getDecryptedKeyHex(r,q);var p=new RSAKey();p.readPrivateKeyFromASN1HexString(s);return p},getEncryptedPKCS5PEMFromPrvKeyHex:function(x,s,A,t,r){var p=\"\";if(typeof t==\"undefined\"||t==null){t=\"AES-256-CBC\"}if(typeof i[t]==\"undefined\"){throw\"KEYUTIL unsupported algorithm: \"+t}if(typeof r==\"undefined\"||r==null){var v=i[t][\"ivlen\"];var u=m(v);r=u.toUpperCase()}var z=j(t,A,r);var y=z.keyhex;var w=h(s,t,y,r);var q=w.replace(/(.{64})/g,\"$1\\r\\n\");var p=\"-----BEGIN \"+x+\" PRIVATE KEY-----\\r\\n\";p+=\"Proc-Type: 4,ENCRYPTED\\r\\n\";p+=\"DEK-Info: \"+t+\",\"+r+\"\\r\\n\";p+=\"\\r\\n\";p+=q;p+=\"\\r\\n-----END \"+x+\" PRIVATE KEY-----\\r\\n\";return p},getEncryptedPKCS5PEMFromRSAKey:function(D,E,r,t){var B=new KJUR.asn1.DERInteger({\"int\":0});var w=new KJUR.asn1.DERInteger({bigint:D.n});var A=new KJUR.asn1.DERInteger({\"int\":D.e});var C=new KJUR.asn1.DERInteger({bigint:D.d});var u=new KJUR.asn1.DERInteger({bigint:D.p});var s=new KJUR.asn1.DERInteger({bigint:D.q});var z=new KJUR.asn1.DERInteger({bigint:D.dmp1});var v=new KJUR.asn1.DERInteger({bigint:D.dmq1});var y=new KJUR.asn1.DERInteger({bigint:D.coeff});var F=new KJUR.asn1.DERSequence({array:[B,w,A,C,u,s,z,v,y]});var x=F.getEncodedHex();return this.getEncryptedPKCS5PEMFromPrvKeyHex(\"RSA\",x,E,r,t)},newEncryptedPKCS5PEM:function(p,q,t,u){if(typeof q==\"undefined\"||q==null){q=1024}if(typeof t==\"undefined\"||t==null){t=\"10001\"}var r=new RSAKey();r.generate(q,t);var s=null;if(typeof u==\"undefined\"||u==null){s=this.getEncryptedPKCS5PEMFromRSAKey(r,p)}else{s=this.getEncryptedPKCS5PEMFromRSAKey(r,p,u)}return s},getRSAKeyFromPlainPKCS8PEM:function(r){if(r.match(/ENCRYPTED/)){throw\"pem shall be not ENCRYPTED\"}var q=this.getHexFromPEM(r,\"PRIVATE KEY\");var p=this.getRSAKeyFromPlainPKCS8Hex(q);return p},getRSAKeyFromPlainPKCS8Hex:function(s){var r=ASN1HEX.getPosArrayOfChildren_AtObj(s,0);if(r.length!=3){throw\"outer DERSequence shall have 3 elements: \"+r.length}var q=ASN1HEX.getHexOfTLV_AtObj(s,r[1]);if(q!=\"300d06092a864886f70d0101010500\"){throw\"PKCS8 AlgorithmIdentifier is not rsaEnc: \"+q}var q=ASN1HEX.getHexOfTLV_AtObj(s,r[1]);var t=ASN1HEX.getHexOfTLV_AtObj(s,r[2]);var u=ASN1HEX.getHexOfV_AtObj(t,0);var p=new RSAKey();p.readPrivateKeyFromASN1HexString(u);return p},parseHexOfEncryptedPKCS8:function(w){var s={};var r=ASN1HEX.getPosArrayOfChildren_AtObj(w,0);if(r.length!=2){throw\"malformed format: SEQUENCE(0).items != 2: \"+r.length}s.ciphertext=ASN1HEX.getHexOfV_AtObj(w,r[1]);var y=ASN1HEX.getPosArrayOfChildren_AtObj(w,r[0]);if(y.length!=2){throw\"malformed format: SEQUENCE(0.0).items != 2: \"+y.length}if(ASN1HEX.getHexOfV_AtObj(w,y[0])!=\"2a864886f70d01050d\"){throw\"this only supports pkcs5PBES2\"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(w,y[1]);if(y.length!=2){throw\"malformed format: SEQUENCE(0.0.1).items != 2: \"+p.length}var q=ASN1HEX.getPosArrayOfChildren_AtObj(w,p[1]);if(q.length!=2){throw\"malformed format: SEQUENCE(0.0.1.1).items != 2: \"+q.length}if(ASN1HEX.getHexOfV_AtObj(w,q[0])!=\"2a864886f70d0307\"){throw\"this only supports TripleDES\"}s.encryptionSchemeAlg=\"TripleDES\";s.encryptionSchemeIV=ASN1HEX.getHexOfV_AtObj(w,q[1]);var t=ASN1HEX.getPosArrayOfChildren_AtObj(w,p[0]);if(t.length!=2){throw\"malformed format: SEQUENCE(0.0.1.0).items != 2: \"+t.length}if(ASN1HEX.getHexOfV_AtObj(w,t[0])!=\"2a864886f70d01050c\"){throw\"this only supports pkcs5PBKDF2\"}var x=ASN1HEX.getPosArrayOfChildren_AtObj(w,t[1]);if(x.length<2){throw\"malformed format: SEQUENCE(0.0.1.0.1).items < 2: \"+x.length}s.pbkdf2Salt=ASN1HEX.getHexOfV_AtObj(w,x[0]);var u=ASN1HEX.getHexOfV_AtObj(w,x[1]);try{s.pbkdf2Iter=parseInt(u,16)}catch(v){throw\"malformed format pbkdf2Iter: \"+u}return s},getPBKDF2KeyHexFromParam:function(u,p){var t=CryptoJS.enc.Hex.parse(u.pbkdf2Salt);var q=u.pbkdf2Iter;var s=CryptoJS.PBKDF2(p,t,{keySize:192/32,iterations:q});var r=CryptoJS.enc.Hex.stringify(s);return r},getPlainPKCS8HexFromEncryptedPKCS8PEM:function(x,y){var r=this.getHexFromPEM(x,\"ENCRYPTED PRIVATE KEY\");var p=this.parseHexOfEncryptedPKCS8(r);var u=KEYUTIL.getPBKDF2KeyHexFromParam(p,y);var v={};v.ciphertext=CryptoJS.enc.Hex.parse(p.ciphertext);var t=CryptoJS.enc.Hex.parse(u);var s=CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);var w=CryptoJS.TripleDES.decrypt(v,t,{iv:s});var q=CryptoJS.enc.Hex.stringify(w);return q},getRSAKeyFromEncryptedPKCS8PEM:function(s,r){var q=this.getPlainPKCS8HexFromEncryptedPKCS8PEM(s,r);var p=this.getRSAKeyFromPlainPKCS8Hex(q);return p},getKeyFromEncryptedPKCS8PEM:function(s,q){var p=this.getPlainPKCS8HexFromEncryptedPKCS8PEM(s,q);var r=this.getKeyFromPlainPrivatePKCS8Hex(p);return r},parsePlainPrivatePKCS8Hex:function(s){var q={};q.algparam=null;if(s.substr(0,2)!=\"30\"){throw\"malformed plain PKCS8 private key(code:001)\"}var r=ASN1HEX.getPosArrayOfChildren_AtObj(s,0);if(r.length!=3){throw\"malformed plain PKCS8 private key(code:002)\"}if(s.substr(r[1],2)!=\"30\"){throw\"malformed PKCS8 private key(code:003)\"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(s,r[1]);if(p.length!=2){throw\"malformed PKCS8 private key(code:004)\"}if(s.substr(p[0],2)!=\"06\"){throw\"malformed PKCS8 private key(code:005)\"}q.algoid=ASN1HEX.getHexOfV_AtObj(s,p[0]);if(s.substr(p[1],2)==\"06\"){q.algparam=ASN1HEX.getHexOfV_AtObj(s,p[1])}if(s.substr(r[2],2)!=\"04\"){throw\"malformed PKCS8 private key(code:006)\"}q.keyidx=ASN1HEX.getStartPosOfV_AtObj(s,r[2]);return q},getKeyFromPlainPrivatePKCS8PEM:function(q){var p=this.getHexFromPEM(q,\"PRIVATE KEY\");var r=this.getKeyFromPlainPrivatePKCS8Hex(p);return r},getKeyFromPlainPrivatePKCS8Hex:function(p){var w=this.parsePlainPrivatePKCS8Hex(p);if(w.algoid==\"2a864886f70d010101\"){this.parsePrivateRawRSAKeyHexAtObj(p,w);var u=w.key;var z=new RSAKey();z.setPrivateEx(u.n,u.e,u.d,u.p,u.q,u.dp,u.dq,u.co);return z}else{if(w.algoid==\"2a8648ce3d0201\"){this.parsePrivateRawECKeyHexAtObj(p,w);if(KJUR.crypto.OID.oidhex2name[w.algparam]===undefined){throw\"KJUR.crypto.OID.oidhex2name undefined: \"+w.algparam}var v=KJUR.crypto.OID.oidhex2name[w.algparam];var z=new KJUR.crypto.ECDSA({curve:v});z.setPublicKeyHex(w.pubkey);z.setPrivateKeyHex(w.key);z.isPublic=false;return z}else{if(w.algoid==\"2a8648ce380401\"){var t=ASN1HEX.getVbyList(p,0,[1,1,0],\"02\");var s=ASN1HEX.getVbyList(p,0,[1,1,1],\"02\");var y=ASN1HEX.getVbyList(p,0,[1,1,2],\"02\");var B=ASN1HEX.getVbyList(p,0,[2,0],\"02\");var r=new BigInteger(t,16);var q=new BigInteger(s,16);var x=new BigInteger(y,16);var A=new BigInteger(B,16);var z=new KJUR.crypto.DSA();z.setPrivate(r,q,x,null,A);return z}else{throw\"unsupported private key algorithm\"}}}},getRSAKeyFromPublicPKCS8PEM:function(q){var r=this.getHexFromPEM(q,\"PUBLIC KEY\");var p=this.getRSAKeyFromPublicPKCS8Hex(r);return p},getKeyFromPublicPKCS8PEM:function(q){var r=this.getHexFromPEM(q,\"PUBLIC KEY\");var p=this.getKeyFromPublicPKCS8Hex(r);return p},getKeyFromPublicPKCS8Hex:function(q){var p=this.parsePublicPKCS8Hex(q);if(p.algoid==\"2a864886f70d010101\"){var u=this.parsePublicRawRSAKeyHex(p.key);var r=new RSAKey();r.setPublic(u.n,u.e);return r}else{if(p.algoid==\"2a8648ce3d0201\"){if(KJUR.crypto.OID.oidhex2name[p.algparam]===undefined){throw\"KJUR.crypto.OID.oidhex2name undefined: \"+p.algparam}var s=KJUR.crypto.OID.oidhex2name[p.algparam];var r=new KJUR.crypto.ECDSA({curve:s,pub:p.key});return r}else{if(p.algoid==\"2a8648ce380401\"){var t=p.algparam;var v=ASN1HEX.getHexOfV_AtObj(p.key,0);var r=new KJUR.crypto.DSA();r.setPublic(new BigInteger(t.p,16),new BigInteger(t.q,16),new BigInteger(t.g,16),new BigInteger(v,16));return r}else{throw\"unsupported public key algorithm\"}}}},parsePublicRawRSAKeyHex:function(r){var p={};if(r.substr(0,2)!=\"30\"){throw\"malformed RSA key(code:001)\"}var q=ASN1HEX.getPosArrayOfChildren_AtObj(r,0);if(q.length!=2){throw\"malformed RSA key(code:002)\"}if(r.substr(q[0],2)!=\"02\"){throw\"malformed RSA key(code:003)\"}p.n=ASN1HEX.getHexOfV_AtObj(r,q[0]);if(r.substr(q[1],2)!=\"02\"){throw\"malformed RSA key(code:004)\"}p.e=ASN1HEX.getHexOfV_AtObj(r,q[1]);return p},parsePrivateRawRSAKeyHexAtObj:function(q,s){var r=s.keyidx;if(q.substr(r,2)!=\"30\"){throw\"malformed RSA private key(code:001)\"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(q,r);if(p.length!=9){throw\"malformed RSA private key(code:002)\"}s.key={};s.key.n=ASN1HEX.getHexOfV_AtObj(q,p[1]);s.key.e=ASN1HEX.getHexOfV_AtObj(q,p[2]);s.key.d=ASN1HEX.getHexOfV_AtObj(q,p[3]);s.key.p=ASN1HEX.getHexOfV_AtObj(q,p[4]);s.key.q=ASN1HEX.getHexOfV_AtObj(q,p[5]);s.key.dp=ASN1HEX.getHexOfV_AtObj(q,p[6]);s.key.dq=ASN1HEX.getHexOfV_AtObj(q,p[7]);s.key.co=ASN1HEX.getHexOfV_AtObj(q,p[8])},parsePrivateRawECKeyHexAtObj:function(p,t){var q=t.keyidx;var r=ASN1HEX.getVbyList(p,q,[1],\"04\");var s=ASN1HEX.getVbyList(p,q,[2,0],\"03\").substr(2);t.key=r;t.pubkey=s},parsePublicPKCS8Hex:function(s){var q={};q.algparam=null;var r=ASN1HEX.getPosArrayOfChildren_AtObj(s,0);if(r.length!=2){throw\"outer DERSequence shall have 2 elements: \"+r.length}var t=r[0];if(s.substr(t,2)!=\"30\"){throw\"malformed PKCS8 public key(code:001)\"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(s,t);if(p.length!=2){throw\"malformed PKCS8 public key(code:002)\"}if(s.substr(p[0],2)!=\"06\"){throw\"malformed PKCS8 public key(code:003)\"}q.algoid=ASN1HEX.getHexOfV_AtObj(s,p[0]);if(s.substr(p[1],2)==\"06\"){q.algparam=ASN1HEX.getHexOfV_AtObj(s,p[1])}else{if(s.substr(p[1],2)==\"30\"){q.algparam={};q.algparam.p=ASN1HEX.getVbyList(s,p[1],[0],\"02\");q.algparam.q=ASN1HEX.getVbyList(s,p[1],[1],\"02\");q.algparam.g=ASN1HEX.getVbyList(s,p[1],[2],\"02\")}}if(s.substr(r[1],2)!=\"03\"){throw\"malformed PKCS8 public key(code:004)\"}q.key=ASN1HEX.getHexOfV_AtObj(s,r[1]).substr(2);return q},getRSAKeyFromPublicPKCS8Hex:function(t){var s=ASN1HEX.getPosArrayOfChildren_AtObj(t,0);if(s.length!=2){throw\"outer DERSequence shall have 2 elements: \"+s.length}var r=ASN1HEX.getHexOfTLV_AtObj(t,s[0]);if(r!=\"300d06092a864886f70d0101010500\"){throw\"PKCS8 AlgorithmId is not rsaEncryption\"}if(t.substr(s[1],2)!=\"03\"){throw\"PKCS8 Public Key is not BITSTRING encapslated.\"}var v=ASN1HEX.getStartPosOfV_AtObj(t,s[1])+2;if(t.substr(v,2)!=\"30\"){throw\"PKCS8 Public Key is not SEQUENCE.\"}var p=ASN1HEX.getPosArrayOfChildren_AtObj(t,v);if(p.length!=2){throw\"inner DERSequence shall have 2 elements: \"+p.length}if(t.substr(p[0],2)!=\"02\"){throw\"N is not ASN.1 INTEGER\"}if(t.substr(p[1],2)!=\"02\"){throw\"E is not ASN.1 INTEGER\"}var w=ASN1HEX.getHexOfV_AtObj(t,p[0]);var u=ASN1HEX.getHexOfV_AtObj(t,p[1]);var q=new RSAKey();q.setPublic(w,u);return q},}}();KEYUTIL.getKey=function(f,e,h){if(typeof RSAKey!=\"undefined\"&&f instanceof RSAKey){return f}if(typeof KJUR.crypto.ECDSA!=\"undefined\"&&f instanceof KJUR.crypto.ECDSA){return f}if(typeof KJUR.crypto.DSA!=\"undefined\"&&f instanceof KJUR.crypto.DSA){return f}if(f.curve!==undefined&&f.xy!==undefined&&f.d===undefined){return new KJUR.crypto.ECDSA({pub:f.xy,curve:f.curve})}if(f.curve!==undefined&&f.d!==undefined){return new KJUR.crypto.ECDSA({prv:f.d,curve:f.curve})}if(f.kty===undefined&&f.n!==undefined&&f.e!==undefined&&f.d===undefined){var w=new RSAKey();w.setPublic(f.n,f.e);return w}if(f.kty===undefined&&f.n!==undefined&&f.e!==undefined&&f.d!==undefined&&f.p!==undefined&&f.q!==undefined&&f.dp!==undefined&&f.dq!==undefined&&f.co!==undefined&&f.qi===undefined){var w=new RSAKey();w.setPrivateEx(f.n,f.e,f.d,f.p,f.q,f.dp,f.dq,f.co);return w}if(f.kty===undefined&&f.n!==undefined&&f.e!==undefined&&f.d!==undefined&&f.p===undefined){var w=new RSAKey();w.setPrivate(f.n,f.e,f.d);return w}if(f.p!==undefined&&f.q!==undefined&&f.g!==undefined&&f.y!==undefined&&f.x===undefined){var w=new KJUR.crypto.DSA();w.setPublic(f.p,f.q,f.g,f.y);return w}if(f.p!==undefined&&f.q!==undefined&&f.g!==undefined&&f.y!==undefined&&f.x!==undefined){var w=new KJUR.crypto.DSA();w.setPrivate(f.p,f.q,f.g,f.y,f.x);return w}if(f.kty===\"RSA\"&&f.n!==undefined&&f.e!==undefined&&f.d===undefined){var w=new RSAKey();w.setPublic(b64utohex(f.n),b64utohex(f.e));return w}if(f.kty===\"RSA\"&&f.n!==undefined&&f.e!==undefined&&f.d!==undefined&&f.p!==undefined&&f.q!==undefined&&f.dp!==undefined&&f.dq!==undefined&&f.qi!==undefined){var w=new RSAKey();w.setPrivateEx(b64utohex(f.n),b64utohex(f.e),b64utohex(f.d),b64utohex(f.p),b64utohex(f.q),b64utohex(f.dp),b64utohex(f.dq),b64utohex(f.qi));return w}if(f.kty===\"RSA\"&&f.n!==undefined&&f.e!==undefined&&f.d!==undefined){var w=new RSAKey();w.setPrivate(b64utohex(f.n),b64utohex(f.e),b64utohex(f.d));return w}if(f.kty===\"EC\"&&f.crv!==undefined&&f.x!==undefined&&f.y!==undefined&&f.d===undefined){var d=new KJUR.crypto.ECDSA({curve:f.crv});var l=d.ecparams.keylen/4;var r=(\"0000000000\"+b64utohex(f.x)).slice(-l);var n=(\"0000000000\"+b64utohex(f.y)).slice(-l);var m=\"04\"+r+n;d.setPublicKeyHex(m);return d}if(f.kty===\"EC\"&&f.crv!==undefined&&f.x!==undefined&&f.y!==undefined&&f.d!==undefined){var d=new KJUR.crypto.ECDSA({curve:f.crv});var l=d.ecparams.keylen/4;var a=(\"0000000000\"+b64utohex(f.d)).slice(-l);d.setPrivateKeyHex(a);return d}if(f.indexOf(\"-END CERTIFICATE-\",0)!=-1||f.indexOf(\"-END X509 CERTIFICATE-\",0)!=-1||f.indexOf(\"-END TRUSTED CERTIFICATE-\",0)!=-1){return X509.getPublicKeyFromCertPEM(f)}if(h===\"pkcs8pub\"){return KEYUTIL.getKeyFromPublicPKCS8Hex(f)}if(f.indexOf(\"-END PUBLIC KEY-\")!=-1){return KEYUTIL.getKeyFromPublicPKCS8PEM(f)}if(h===\"pkcs5prv\"){var w=new RSAKey();w.readPrivateKeyFromASN1HexString(f);return w}if(h===\"pkcs5prv\"){var w=new RSAKey();w.readPrivateKeyFromASN1HexString(f);return w}if(f.indexOf(\"-END RSA PRIVATE KEY-\")!=-1&&f.indexOf(\"4,ENCRYPTED\")==-1){var i=KEYUTIL.getHexFromPEM(f,\"RSA PRIVATE KEY\");return KEYUTIL.getKey(i,null,\"pkcs5prv\")}if(f.indexOf(\"-END DSA PRIVATE KEY-\")!=-1&&f.indexOf(\"4,ENCRYPTED\")==-1){var u=this.getHexFromPEM(f,\"DSA PRIVATE KEY\");var t=ASN1HEX.getVbyList(u,0,[1],\"02\");var s=ASN1HEX.getVbyList(u,0,[2],\"02\");var v=ASN1HEX.getVbyList(u,0,[3],\"02\");var j=ASN1HEX.getVbyList(u,0,[4],\"02\");var k=ASN1HEX.getVbyList(u,0,[5],\"02\");var w=new KJUR.crypto.DSA();w.setPrivate(new BigInteger(t,16),new BigInteger(s,16),new BigInteger(v,16),new BigInteger(j,16),new BigInteger(k,16));return w}if(f.indexOf(\"-END PRIVATE KEY-\")!=-1){return KEYUTIL.getKeyFromPlainPrivatePKCS8PEM(f)}if(f.indexOf(\"-END RSA PRIVATE KEY-\")!=-1&&f.indexOf(\"4,ENCRYPTED\")!=-1){return KEYUTIL.getRSAKeyFromEncryptedPKCS5PEM(f,e)}if(f.indexOf(\"-END EC PRIVATE KEY-\")!=-1&&f.indexOf(\"4,ENCRYPTED\")!=-1){var u=KEYUTIL.getDecryptedKeyHex(f,e);var w=ASN1HEX.getVbyList(u,0,[1],\"04\");var c=ASN1HEX.getVbyList(u,0,[2,0],\"06\");var o=ASN1HEX.getVbyList(u,0,[3,0],\"03\").substr(2);var b=\"\";if(KJUR.crypto.OID.oidhex2name[c]!==undefined){b=KJUR.crypto.OID.oidhex2name[c]}else{throw\"undefined OID(hex) in KJUR.crypto.OID: \"+c}var d=new KJUR.crypto.ECDSA({name:b});d.setPublicKeyHex(o);d.setPrivateKeyHex(w);d.isPublic=false;return d}if(f.indexOf(\"-END DSA PRIVATE KEY-\")!=-1&&f.indexOf(\"4,ENCRYPTED\")!=-1){var u=KEYUTIL.getDecryptedKeyHex(f,e);var t=ASN1HEX.getVbyList(u,0,[1],\"02\");var s=ASN1HEX.getVbyList(u,0,[2],\"02\");var v=ASN1HEX.getVbyList(u,0,[3],\"02\");var j=ASN1HEX.getVbyList(u,0,[4],\"02\");var k=ASN1HEX.getVbyList(u,0,[5],\"02\");var w=new KJUR.crypto.DSA();w.setPrivate(new BigInteger(t,16),new BigInteger(s,16),new BigInteger(v,16),new BigInteger(j,16),new BigInteger(k,16));return w}if(f.indexOf(\"-END ENCRYPTED PRIVATE KEY-\")!=-1){return KEYUTIL.getKeyFromEncryptedPKCS8PEM(f,e)}throw\"not supported argument\"};KEYUTIL.generateKeypair=function(a,c){if(a==\"RSA\"){var b=c;var h=new RSAKey();h.generate(b,\"10001\");h.isPrivate=true;h.isPublic=true;var f=new RSAKey();var e=h.n.toString(16);var i=h.e.toString(16);f.setPublic(e,i);f.isPrivate=false;f.isPublic=true;var k={};k.prvKeyObj=h;k.pubKeyObj=f;return k}else{if(a==\"EC\"){var d=c;var g=new KJUR.crypto.ECDSA({curve:d});var j=g.generateKeyPairHex();var h=new KJUR.crypto.ECDSA({curve:d});h.setPrivateKeyHex(j.ecprvhex);h.isPrivate=true;h.isPublic=false;var f=new KJUR.crypto.ECDSA({curve:d});f.setPublicKeyHex(j.ecpubhex);f.isPrivate=false;f.isPublic=true;var k={};k.prvKeyObj=h;k.pubKeyObj=f;return k}else{throw\"unknown algorithm: \"+a}}};KEYUTIL.getPEM=function(a,r,o,g,j){var v=KJUR.asn1;var u=KJUR.crypto;function p(s){var w=KJUR.asn1.ASN1Util.newObject({seq:[{\"int\":0},{\"int\":{bigint:s.n}},{\"int\":s.e},{\"int\":{bigint:s.d}},{\"int\":{bigint:s.p}},{\"int\":{bigint:s.q}},{\"int\":{bigint:s.dmp1}},{\"int\":{bigint:s.dmq1}},{\"int\":{bigint:s.coeff}}]});return w}function q(w){var s=KJUR.asn1.ASN1Util.newObject({seq:[{\"int\":1},{octstr:{hex:w.prvKeyHex}},{tag:[\"a0\",true,{oid:{name:w.curveName}}]},{tag:[\"a1\",true,{bitstr:{hex:\"00\"+w.pubKeyHex}}]}]});return s}function n(s){var w=KJUR.asn1.ASN1Util.newObject({seq:[{\"int\":0},{\"int\":{bigint:s.p}},{\"int\":{bigint:s.q}},{\"int\":{bigint:s.g}},{\"int\":{bigint:s.y}},{\"int\":{bigint:s.x}}]});return w}if(((typeof RSAKey!=\"undefined\"&&a instanceof RSAKey)||(typeof u.DSA!=\"undefined\"&&a instanceof u.DSA)||(typeof u.ECDSA!=\"undefined\"&&a instanceof u.ECDSA))&&a.isPublic==true&&(r===undefined||r==\"PKCS8PUB\")){var t=new KJUR.asn1.x509.SubjectPublicKeyInfo(a);var m=t.getEncodedHex();return v.ASN1Util.getPEMStringFromHex(m,\"PUBLIC KEY\")}if(r==\"PKCS1PRV\"&&typeof RSAKey!=\"undefined\"&&a instanceof RSAKey&&(o===undefined||o==null)&&a.isPrivate==true){var t=p(a);var m=t.getEncodedHex();return v.ASN1Util.getPEMStringFromHex(m,\"RSA PRIVATE KEY\")}if(r==\"PKCS1PRV\"&&typeof RSAKey!=\"undefined\"&&a instanceof KJUR.crypto.ECDSA&&(o===undefined||o==null)&&a.isPrivate==true){var f=new KJUR.asn1.DERObjectIdentifier({name:a.curveName});var l=f.getEncodedHex();var e=q(a);var k=e.getEncodedHex();var i=\"\";i+=v.ASN1Util.getPEMStringFromHex(l,\"EC PARAMETERS\");i+=v.ASN1Util.getPEMStringFromHex(k,\"EC PRIVATE KEY\");return i}if(r==\"PKCS1PRV\"&&typeof KJUR.crypto.DSA!=\"undefined\"&&a instanceof KJUR.crypto.DSA&&(o===undefined||o==null)&&a.isPrivate==true){var t=n(a);var m=t.getEncodedHex();return v.ASN1Util.getPEMStringFromHex(m,\"DSA PRIVATE KEY\")}if(r==\"PKCS5PRV\"&&typeof RSAKey!=\"undefined\"&&a instanceof RSAKey&&(o!==undefined&&o!=null)&&a.isPrivate==true){var t=p(a);var m=t.getEncodedHex();if(g===undefined){g=\"DES-EDE3-CBC\"}return this.getEncryptedPKCS5PEMFromPrvKeyHex(\"RSA\",m,o,g)}if(r==\"PKCS5PRV\"&&typeof KJUR.crypto.ECDSA!=\"undefined\"&&a instanceof KJUR.crypto.ECDSA&&(o!==undefined&&o!=null)&&a.isPrivate==true){var t=q(a);var m=t.getEncodedHex();if(g===undefined){g=\"DES-EDE3-CBC\"}return this.getEncryptedPKCS5PEMFromPrvKeyHex(\"EC\",m,o,g)}if(r==\"PKCS5PRV\"&&typeof KJUR.crypto.DSA!=\"undefined\"&&a instanceof KJUR.crypto.DSA&&(o!==undefined&&o!=null)&&a.isPrivate==true){var t=n(a);var m=t.getEncodedHex();if(g===undefined){g=\"DES-EDE3-CBC\"}return this.getEncryptedPKCS5PEMFromPrvKeyHex(\"DSA\",m,o,g)}var h=function(w,s){var y=b(w,s);var x=new KJUR.asn1.ASN1Util.newObject({seq:[{seq:[{oid:{name:\"pkcs5PBES2\"}},{seq:[{seq:[{oid:{name:\"pkcs5PBKDF2\"}},{seq:[{octstr:{hex:y.pbkdf2Salt}},{\"int\":y.pbkdf2Iter}]}]},{seq:[{oid:{name:\"des-EDE3-CBC\"}},{octstr:{hex:y.encryptionSchemeIV}}]}]}]},{octstr:{hex:y.ciphertext}}]});return x.getEncodedHex()};var b=function(D,E){var x=100;var C=CryptoJS.lib.WordArray.random(8);var B=\"DES-EDE3-CBC\";var s=CryptoJS.lib.WordArray.random(8);var y=CryptoJS.PBKDF2(E,C,{keySize:192/32,iterations:x});var z=CryptoJS.enc.Hex.parse(D);var A=CryptoJS.TripleDES.encrypt(z,y,{iv:s})+\"\";var w={};w.ciphertext=A;w.pbkdf2Salt=CryptoJS.enc.Hex.stringify(C);w.pbkdf2Iter=x;w.encryptionSchemeAlg=B;w.encryptionSchemeIV=CryptoJS.enc.Hex.stringify(s);return w};if(r==\"PKCS8PRV\"&&typeof RSAKey!=\"undefined\"&&a instanceof RSAKey&&a.isPrivate==true){var d=p(a);var c=d.getEncodedHex();var t=KJUR.asn1.ASN1Util.newObject({seq:[{\"int\":0},{seq:[{oid:{name:\"rsaEncryption\"}},{\"null\":true}]},{octstr:{hex:c}}]});var m=t.getEncodedHex();if(o===undefined||o==null){return v.ASN1Util.getPEMStringFromHex(m,\"PRIVATE KEY\")}else{var k=h(m,o);return v.ASN1Util.getPEMStringFromHex(k,\"ENCRYPTED PRIVATE KEY\")}}if(r==\"PKCS8PRV\"&&typeof KJUR.crypto.ECDSA!=\"undefined\"&&a instanceof KJUR.crypto.ECDSA&&a.isPrivate==true){var d=new KJUR.asn1.ASN1Util.newObject({seq:[{\"int\":1},{octstr:{hex:a.prvKeyHex}},{tag:[\"a1\",true,{bitstr:{hex:\"00\"+a.pubKeyHex}}]}]});var c=d.getEncodedHex();var t=KJUR.asn1.ASN1Util.newObject({seq:[{\"int\":0},{seq:[{oid:{name:\"ecPublicKey\"}},{oid:{name:a.curveName}}]},{octstr:{hex:c}}]});var m=t.getEncodedHex();if(o===undefined||o==null){return v.ASN1Util.getPEMStringFromHex(m,\"PRIVATE KEY\")}else{var k=h(m,o);return v.ASN1Util.getPEMStringFromHex(k,\"ENCRYPTED PRIVATE KEY\")}}if(r==\"PKCS8PRV\"&&typeof KJUR.crypto.DSA!=\"undefined\"&&a instanceof KJUR.crypto.DSA&&a.isPrivate==true){var d=new KJUR.asn1.DERInteger({bigint:a.x});var c=d.getEncodedHex();var t=KJUR.asn1.ASN1Util.newObject({seq:[{\"int\":0},{seq:[{oid:{name:\"dsa\"}},{seq:[{\"int\":{bigint:a.p}},{\"int\":{bigint:a.q}},{\"int\":{bigint:a.g}}]}]},{octstr:{hex:c}}]});var m=t.getEncodedHex();if(o===undefined||o==null){return v.ASN1Util.getPEMStringFromHex(m,\"PRIVATE KEY\")}else{var k=h(m,o);return v.ASN1Util.getPEMStringFromHex(k,\"ENCRYPTED PRIVATE KEY\")}}throw\"unsupported object nor format\"};KEYUTIL.getKeyFromCSRPEM=function(b){var a=KEYUTIL.getHexFromPEM(b,\"CERTIFICATE REQUEST\");var c=KEYUTIL.getKeyFromCSRHex(a);return c};KEYUTIL.getKeyFromCSRHex=function(a){var c=KEYUTIL.parseCSRHex(a);var b=KEYUTIL.getKey(c.p8pubkeyhex,null,\"pkcs8pub\");return b};KEYUTIL.parseCSRHex=function(c){var b={};var e=c;if(e.substr(0,2)!=\"30\"){throw\"malformed CSR(code:001)\"}var d=ASN1HEX.getPosArrayOfChildren_AtObj(e,0);if(d.length<1){throw\"malformed CSR(code:002)\"}if(e.substr(d[0],2)!=\"30\"){throw\"malformed CSR(code:003)\"}var a=ASN1HEX.getPosArrayOfChildren_AtObj(e,d[0]);if(a.length<3){throw\"malformed CSR(code:004)\"}b.p8pubkeyhex=ASN1HEX.getHexOfTLV_AtObj(e,a[2]);return b};\n\t/*! rsapem-1.1.js (c) 2012 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tfunction _rsapem_pemToBase64(b){var a=b;a=a.replace(\"-----BEGIN RSA PRIVATE KEY-----\",\"\");a=a.replace(\"-----END RSA PRIVATE KEY-----\",\"\");a=a.replace(/[ \\n]+/g,\"\");return a}function _rsapem_getPosArrayOfChildrenFromHex(d){var j=new Array();var k=ASN1HEX.getStartPosOfV_AtObj(d,0);var f=ASN1HEX.getPosOfNextSibling_AtObj(d,k);var h=ASN1HEX.getPosOfNextSibling_AtObj(d,f);var b=ASN1HEX.getPosOfNextSibling_AtObj(d,h);var l=ASN1HEX.getPosOfNextSibling_AtObj(d,b);var e=ASN1HEX.getPosOfNextSibling_AtObj(d,l);var g=ASN1HEX.getPosOfNextSibling_AtObj(d,e);var c=ASN1HEX.getPosOfNextSibling_AtObj(d,g);var i=ASN1HEX.getPosOfNextSibling_AtObj(d,c);j.push(k,f,h,b,l,e,g,c,i);return j}function _rsapem_getHexValueArrayOfChildrenFromHex(i){var o=_rsapem_getPosArrayOfChildrenFromHex(i);var r=ASN1HEX.getHexOfV_AtObj(i,o[0]);var f=ASN1HEX.getHexOfV_AtObj(i,o[1]);var j=ASN1HEX.getHexOfV_AtObj(i,o[2]);var k=ASN1HEX.getHexOfV_AtObj(i,o[3]);var c=ASN1HEX.getHexOfV_AtObj(i,o[4]);var b=ASN1HEX.getHexOfV_AtObj(i,o[5]);var h=ASN1HEX.getHexOfV_AtObj(i,o[6]);var g=ASN1HEX.getHexOfV_AtObj(i,o[7]);var l=ASN1HEX.getHexOfV_AtObj(i,o[8]);var m=new Array();m.push(r,f,j,k,c,b,h,g,l);return m}function _rsapem_readPrivateKeyFromASN1HexString(c){var b=_rsapem_getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8])}function _rsapem_readPrivateKeyFromPEMString(e){var c=_rsapem_pemToBase64(e);var d=b64tohex(c);var b=_rsapem_getHexValueArrayOfChildrenFromHex(d);this.setPrivateEx(b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8])}RSAKey.prototype.readPrivateKeyFromPEMString=_rsapem_readPrivateKeyFromPEMString;RSAKey.prototype.readPrivateKeyFromASN1HexString=_rsapem_readPrivateKeyFromASN1HexString;\n\t/*! rsasign-1.2.7.js (c) 2012 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tvar _RE_HEXDECONLY=new RegExp(\"\");_RE_HEXDECONLY.compile(\"[^0-9a-f]\",\"gi\");function _rsasign_getHexPaddedDigestInfoForString(d,e,a){var b=function(f){return KJUR.crypto.Util.hashString(f,a)};var c=b(d);return KJUR.crypto.Util.getPaddedDigestInfoHex(c,a,e)}function _zeroPaddingOfSignature(e,d){var c=\"\";var a=d/4-e.length;for(var b=0;b<a;b++){c=c+\"0\"}return c+e}function _rsasign_signString(d,a){var b=function(e){return KJUR.crypto.Util.hashString(e,a)};var c=b(d);return this.signWithMessageHash(c,a)}function _rsasign_signWithMessageHash(e,c){var f=KJUR.crypto.Util.getPaddedDigestInfoHex(e,c,this.n.bitLength());var b=parseBigInt(f,16);var d=this.doPrivate(b);var a=d.toString(16);return _zeroPaddingOfSignature(a,this.n.bitLength())}function _rsasign_signStringWithSHA1(a){return _rsasign_signString.call(this,a,\"sha1\")}function _rsasign_signStringWithSHA256(a){return _rsasign_signString.call(this,a,\"sha256\")}function pss_mgf1_str(c,a,e){var b=\"\",d=0;while(b.length<a){b+=hextorstr(e(rstrtohex(c+String.fromCharCode.apply(String,[(d&4278190080)>>24,(d&16711680)>>16,(d&65280)>>8,d&255]))));d+=1}return b}function _rsasign_signStringPSS(e,a,d){var c=function(f){return KJUR.crypto.Util.hashHex(f,a)};var b=c(rstrtohex(e));if(d===undefined){d=-1}return this.signWithMessageHashPSS(b,a,d)}function _rsasign_signWithMessageHashPSS(l,a,k){var b=hextorstr(l);var g=b.length;var m=this.n.bitLength()-1;var c=Math.ceil(m/8);var d;var o=function(i){return KJUR.crypto.Util.hashHex(i,a)};if(k===-1||k===undefined){k=g}else{if(k===-2){k=c-g-2}else{if(k<-2){throw\"invalid salt length\"}}}if(c<(g+k+2)){throw\"data too long\"}var f=\"\";if(k>0){f=new Array(k);new SecureRandom().nextBytes(f);f=String.fromCharCode.apply(String,f)}var n=hextorstr(o(rstrtohex(\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+b+f)));var j=[];for(d=0;d<c-k-g-2;d+=1){j[d]=0}var e=String.fromCharCode.apply(String,j)+\"\\x01\"+f;var h=pss_mgf1_str(n,e.length,o);var q=[];for(d=0;d<e.length;d+=1){q[d]=e.charCodeAt(d)^h.charCodeAt(d)}var p=(65280>>(8*c-m))&255;q[0]&=~p;for(d=0;d<g;d++){q.push(n.charCodeAt(d))}q.push(188);return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16),this.n.bitLength())}function _rsasign_getDecryptSignatureBI(a,d,c){var b=new RSAKey();b.setPublic(d,c);var e=b.doPublic(a);return e}function _rsasign_getHexDigestInfoFromSig(a,c,b){var e=_rsasign_getDecryptSignatureBI(a,c,b);var d=e.toString(16).replace(/^1f+00/,\"\");return d}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f){for(var e in KJUR.crypto.Util.DIGESTINFOHEAD){var d=KJUR.crypto.Util.DIGESTINFOHEAD[e];var b=d.length;if(f.substring(0,b)==d){var c=[e,f.substring(b)];return c}}return[]}function _rsasign_verifySignatureWithArgs(f,b,g,j){var e=_rsasign_getHexDigestInfoFromSig(b,g,j);var h=_rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if(h.length==0){return false}var d=h[0];var i=h[1];var a=function(k){return KJUR.crypto.Util.hashString(k,d)};var c=a(f);return(i==c)}function _rsasign_verifyHexSignatureForMessage(c,b){var d=parseBigInt(c,16);var a=_rsasign_verifySignatureWithArgs(b,d,this.n.toString(16),this.e.toString(16));return a}function _rsasign_verifyString(f,j){j=j.replace(_RE_HEXDECONLY,\"\");j=j.replace(/[ \\n]+/g,\"\");var b=parseBigInt(j,16);if(b.bitLength()>this.n.bitLength()){return 0}var i=this.doPublic(b);var e=i.toString(16).replace(/^1f+00/,\"\");var g=_rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if(g.length==0){return false}var d=g[0];var h=g[1];var a=function(k){return KJUR.crypto.Util.hashString(k,d)};var c=a(f);return(h==c)}function _rsasign_verifyWithMessageHash(e,a){a=a.replace(_RE_HEXDECONLY,\"\");a=a.replace(/[ \\n]+/g,\"\");var b=parseBigInt(a,16);if(b.bitLength()>this.n.bitLength()){return 0}var h=this.doPublic(b);var g=h.toString(16).replace(/^1f+00/,\"\");var c=_rsasign_getAlgNameAndHashFromHexDisgestInfo(g);if(c.length==0){return false}var d=c[0];var f=c[1];return(f==e)}function _rsasign_verifyStringPSS(c,b,a,f){var e=function(g){return KJUR.crypto.Util.hashHex(g,a)};var d=e(rstrtohex(c));if(f===undefined){f=-1}return this.verifyWithMessageHashPSS(d,b,a,f)}function _rsasign_verifyWithMessageHashPSS(f,s,l,c){var k=new BigInteger(s,16);if(k.bitLength()>this.n.bitLength()){return false}var r=function(i){return KJUR.crypto.Util.hashHex(i,l)};var j=hextorstr(f);var h=j.length;var g=this.n.bitLength()-1;var m=Math.ceil(g/8);var q;if(c===-1||c===undefined){c=h}else{if(c===-2){c=m-h-2}else{if(c<-2){throw\"invalid salt length\"}}}if(m<(h+c+2)){throw\"data too long\"}var a=this.doPublic(k).toByteArray();for(q=0;q<a.length;q+=1){a[q]&=255}while(a.length<m){a.unshift(0)}if(a[m-1]!==188){throw\"encoded message does not end in 0xbc\"}a=String.fromCharCode.apply(String,a);var d=a.substr(0,m-h-1);var e=a.substr(d.length,h);var p=(65280>>(8*m-g))&255;if((d.charCodeAt(0)&p)!==0){throw\"bits beyond keysize not zero\"}var n=pss_mgf1_str(e,d.length,r);var o=[];for(q=0;q<d.length;q+=1){o[q]=d.charCodeAt(q)^n.charCodeAt(q)}o[0]&=~p;var b=m-h-c-2;for(q=0;q<b;q+=1){if(o[q]!==0){throw\"leftmost octets not zero\"}}if(o[b]!==1){throw\"0x01 marker not found\"}return e===hextorstr(r(rstrtohex(\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"+j+String.fromCharCode.apply(String,o.slice(-c)))))}RSAKey.prototype.signWithMessageHash=_rsasign_signWithMessageHash;RSAKey.prototype.signString=_rsasign_signString;RSAKey.prototype.signStringWithSHA1=_rsasign_signStringWithSHA1;RSAKey.prototype.signStringWithSHA256=_rsasign_signStringWithSHA256;RSAKey.prototype.sign=_rsasign_signString;RSAKey.prototype.signWithSHA1=_rsasign_signStringWithSHA1;RSAKey.prototype.signWithSHA256=_rsasign_signStringWithSHA256;RSAKey.prototype.signWithMessageHashPSS=_rsasign_signWithMessageHashPSS;RSAKey.prototype.signStringPSS=_rsasign_signStringPSS;RSAKey.prototype.signPSS=_rsasign_signStringPSS;RSAKey.SALT_LEN_HLEN=-1;RSAKey.SALT_LEN_MAX=-2;RSAKey.prototype.verifyWithMessageHash=_rsasign_verifyWithMessageHash;RSAKey.prototype.verifyString=_rsasign_verifyString;RSAKey.prototype.verifyHexSignatureForMessage=_rsasign_verifyHexSignatureForMessage;RSAKey.prototype.verify=_rsasign_verifyString;RSAKey.prototype.verifyHexSignatureForByteArrayMessage=_rsasign_verifyHexSignatureForMessage;RSAKey.prototype.verifyWithMessageHashPSS=_rsasign_verifyWithMessageHashPSS;RSAKey.prototype.verifyStringPSS=_rsasign_verifyStringPSS;RSAKey.prototype.verifyPSS=_rsasign_verifyStringPSS;RSAKey.SALT_LEN_RECOVER=-2;\n\t/*! x509-1.1.9.js (c) 2012-2016 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tfunction X509(){this.subjectPublicKeyRSA=null;this.subjectPublicKeyRSA_hN=null;this.subjectPublicKeyRSA_hE=null;this.hex=null;this.getSerialNumberHex=function(){return ASN1HEX.getDecendantHexVByNthList(this.hex,0,[0,1])};this.getSignatureAlgorithmField=function(){var b=ASN1HEX.getDecendantHexVByNthList(this.hex,0,[0,2,0]);var a=KJUR.asn1.ASN1Util.oidHexToInt(b);var c=KJUR.asn1.x509.OID.oid2name(a);return c};this.getIssuerHex=function(){return ASN1HEX.getDecendantHexTLVByNthList(this.hex,0,[0,3])};this.getIssuerString=function(){return X509.hex2dn(ASN1HEX.getDecendantHexTLVByNthList(this.hex,0,[0,3]))};this.getSubjectHex=function(){return ASN1HEX.getDecendantHexTLVByNthList(this.hex,0,[0,5])};this.getSubjectString=function(){return X509.hex2dn(ASN1HEX.getDecendantHexTLVByNthList(this.hex,0,[0,5]))};this.getNotBefore=function(){var a=ASN1HEX.getDecendantHexVByNthList(this.hex,0,[0,4,0]);a=a.replace(/(..)/g,\"%$1\");a=decodeURIComponent(a);return a};this.getNotAfter=function(){var a=ASN1HEX.getDecendantHexVByNthList(this.hex,0,[0,4,1]);a=a.replace(/(..)/g,\"%$1\");a=decodeURIComponent(a);return a};this.readCertPEM=function(c){var e=X509.pemToHex(c);var b=X509.getPublicKeyHexArrayFromCertHex(e);var d=new RSAKey();d.setPublic(b[0],b[1]);this.subjectPublicKeyRSA=d;this.subjectPublicKeyRSA_hN=b[0];this.subjectPublicKeyRSA_hE=b[1];this.hex=e};this.readCertPEMWithoutRSAInit=function(c){var d=X509.pemToHex(c);var b=X509.getPublicKeyHexArrayFromCertHex(d);this.subjectPublicKeyRSA.setPublic(b[0],b[1]);this.subjectPublicKeyRSA_hN=b[0];this.subjectPublicKeyRSA_hE=b[1];this.hex=d};this.getInfo=function(){var p=\"Basic Fields\\n\";p+=\"  serial number: \"+this.getSerialNumberHex()+\"\\n\";p+=\"  signature algorithm: \"+this.getSignatureAlgorithmField()+\"\\n\";p+=\"  issuer: \"+this.getIssuerString()+\"\\n\";p+=\"  notBefore: \"+this.getNotBefore()+\"\\n\";p+=\"  notAfter: \"+this.getNotAfter()+\"\\n\";p+=\"  subject: \"+this.getSubjectString()+\"\\n\";p+=\"  subject public key info: \\n\";var j=X509.getSubjectPublicKeyInfoPosFromCertHex(this.hex);var d=ASN1HEX.getHexOfTLV_AtObj(this.hex,j);var n=KEYUTIL.getKey(d,null,\"pkcs8pub\");if(n instanceof RSAKey){p+=\"    key algorithm: RSA\\n\";p+=\"    n=\"+n.n.toString(16).substr(0,16)+\"...\\n\";p+=\"    e=\"+n.e.toString(16)+\"\\n\"}p+=\"X509v3 Extensions:\\n\";var m=X509.getV3ExtInfoListOfCertHex(this.hex);for(var e=0;e<m.length;e++){var b=m[e];var o=KJUR.asn1.x509.OID.oid2name(b.oid);if(o===\"\"){o=b.oid}var k=\"\";if(b.critical===true){k=\"CRITICAL\"}p+=\"  \"+o+\" \"+k+\":\\n\";if(o===\"basicConstraints\"){var g=X509.getExtBasicConstraints(this.hex);if(g.cA===undefined){p+=\"    {}\\n\"}else{p+=\"    cA=true\";if(g.pathLen!==undefined){p+=\", pathLen=\"+g.pathLen}p+=\"\\n\"}}else{if(o===\"keyUsage\"){p+=\"    \"+X509.getExtKeyUsageString(this.hex)+\"\\n\"}else{if(o===\"subjectKeyIdentifier\"){p+=\"    \"+X509.getExtSubjectKeyIdentifier(this.hex)+\"\\n\"}else{if(o===\"authorityKeyIdentifier\"){var a=X509.getExtAuthorityKeyIdentifier(this.hex);if(a.kid!==undefined){p+=\"    kid=\"+a.kid+\"\\n\"}}else{if(o===\"extKeyUsage\"){var h=X509.getExtExtKeyUsageName(this.hex);p+=\"    \"+h.join(\", \")+\"\\n\"}else{if(o===\"subjectAltName\"){var f=X509.getExtSubjectAltName(this.hex);p+=\"    \"+f.join(\", \")+\"\\n\"}else{if(o===\"cRLDistributionPoints\"){var l=X509.getExtCRLDistributionPointsURI(this.hex);p+=\"    \"+l+\"\\n\"}else{if(o===\"authorityInfoAccess\"){var c=X509.getExtAIAInfo(this.hex);if(c.ocsp!==undefined){p+=\"    ocsp: \"+c.ocsp.join(\",\")+\"\\n\"}if(c.caissuer!==undefined){p+=\"    caissuer: \"+c.caissuer.join(\",\")+\"\\n\"}}}}}}}}}}p+=\"signature algorithm: \"+X509.getSignatureAlgorithmName(this.hex)+\"\\n\";p+=\"signature: \"+X509.getSignatureValueHex(this.hex).substr(0,16)+\"...\\n\";return p}}X509.pemToBase64=function(a){var b=a;b=b.replace(\"-----BEGIN CERTIFICATE-----\",\"\");b=b.replace(\"-----END CERTIFICATE-----\",\"\");b=b.replace(/[ \\n]+/g,\"\");return b};X509.pemToHex=function(a){var c=X509.pemToBase64(a);var b=b64tohex(c);return b};X509.getSubjectPublicKeyPosFromCertHex=function(f){var e=X509.getSubjectPublicKeyInfoPosFromCertHex(f);if(e==-1){return -1}var b=ASN1HEX.getPosArrayOfChildren_AtObj(f,e);if(b.length!=2){return -1}var d=b[1];if(f.substring(d,d+2)!=\"03\"){return -1}var c=ASN1HEX.getStartPosOfV_AtObj(f,d);if(f.substring(c,c+2)!=\"00\"){return -1}return c+2};X509.getSubjectPublicKeyInfoPosFromCertHex=function(d){var c=ASN1HEX.getStartPosOfV_AtObj(d,0);var b=ASN1HEX.getPosArrayOfChildren_AtObj(d,c);if(b.length<1){return -1}if(d.substring(b[0],b[0]+10)==\"a003020102\"){if(b.length<6){return -1}return b[6]}else{if(b.length<5){return -1}return b[5]}};X509.getPublicKeyHexArrayFromCertHex=function(f){var e=X509.getSubjectPublicKeyPosFromCertHex(f);var b=ASN1HEX.getPosArrayOfChildren_AtObj(f,e);if(b.length!=2){return[]}var d=ASN1HEX.getHexOfV_AtObj(f,b[0]);var c=ASN1HEX.getHexOfV_AtObj(f,b[1]);if(d!=null&&c!=null){return[d,c]}else{return[]}};X509.getHexTbsCertificateFromCert=function(b){var a=ASN1HEX.getStartPosOfV_AtObj(b,0);return a};X509.getPublicKeyHexArrayFromCertPEM=function(c){var d=X509.pemToHex(c);var b=X509.getPublicKeyHexArrayFromCertHex(d);return b};X509.hex2dn=function(e){var f=\"\";var c=ASN1HEX.getPosArrayOfChildren_AtObj(e,0);for(var d=0;d<c.length;d++){var b=ASN1HEX.getHexOfTLV_AtObj(e,c[d]);f=f+\"/\"+X509.hex2rdn(b)}return f};X509.hex2rdn=function(a){var f=ASN1HEX.getDecendantHexTLVByNthList(a,0,[0,0]);var e=ASN1HEX.getDecendantHexVByNthList(a,0,[0,1]);var c=\"\";try{c=X509.DN_ATTRHEX[f]}catch(b){c=f}e=e.replace(/(..)/g,\"%$1\");var d=decodeURIComponent(e);return c+\"=\"+d};X509.DN_ATTRHEX={\"0603550406\":\"C\",\"060355040a\":\"O\",\"060355040b\":\"OU\",\"0603550403\":\"CN\",\"0603550405\":\"SN\",\"0603550408\":\"ST\",\"0603550407\":\"L\",\"0603550409\":\"streetAddress\",\"060355040f\":\"businessCategory\",\"0603550411\":\"postalCode\",\"060b2b0601040182373c020102\":\"jurisdictionOfIncorporationSP\",\"060b2b0601040182373c020103\":\"jurisdictionOfIncorporationC\",};X509.getPublicKeyFromCertPEM=function(f){var c=X509.getPublicKeyInfoPropOfCertPEM(f);if(c.algoid==\"2a864886f70d010101\"){var i=KEYUTIL.parsePublicRawRSAKeyHex(c.keyhex);var j=new RSAKey();j.setPublic(i.n,i.e);return j}else{if(c.algoid==\"2a8648ce3d0201\"){var e=KJUR.crypto.OID.oidhex2name[c.algparam];var j=new KJUR.crypto.ECDSA({curve:e,info:c.keyhex});j.setPublicKeyHex(c.keyhex);return j}else{if(c.algoid==\"2a8648ce380401\"){var b=ASN1HEX.getVbyList(c.algparam,0,[0],\"02\");var a=ASN1HEX.getVbyList(c.algparam,0,[1],\"02\");var d=ASN1HEX.getVbyList(c.algparam,0,[2],\"02\");var h=ASN1HEX.getHexOfV_AtObj(c.keyhex,0);h=h.substr(2);var j=new KJUR.crypto.DSA();j.setPublic(new BigInteger(b,16),new BigInteger(a,16),new BigInteger(d,16),new BigInteger(h,16));return j}else{throw\"unsupported key\"}}}};X509.getPublicKeyInfoPropOfCertPEM=function(e){var i={};i.algparam=null;var f=X509.pemToHex(e);var d=ASN1HEX.getPosArrayOfChildren_AtObj(f,0);if(d.length!=3){throw\"malformed X.509 certificate PEM (code:001)\"}if(f.substr(d[0],2)!=\"30\"){throw\"malformed X.509 certificate PEM (code:002)\"}var c=ASN1HEX.getPosArrayOfChildren_AtObj(f,d[0]);var g=6;if(f.substr(c[0],2)!==\"a0\"){g=5}if(c.length<g+1){throw\"malformed X.509 certificate PEM (code:003)\"}var a=ASN1HEX.getPosArrayOfChildren_AtObj(f,c[g]);if(a.length!=2){throw\"malformed X.509 certificate PEM (code:004)\"}var h=ASN1HEX.getPosArrayOfChildren_AtObj(f,a[0]);if(h.length!=2){throw\"malformed X.509 certificate PEM (code:005)\"}i.algoid=ASN1HEX.getHexOfV_AtObj(f,h[0]);if(f.substr(h[1],2)==\"06\"){i.algparam=ASN1HEX.getHexOfV_AtObj(f,h[1])}else{if(f.substr(h[1],2)==\"30\"){i.algparam=ASN1HEX.getHexOfTLV_AtObj(f,h[1])}}if(f.substr(a[1],2)!=\"03\"){throw\"malformed X.509 certificate PEM (code:006)\"}var b=ASN1HEX.getHexOfV_AtObj(f,a[1]);i.keyhex=b.substr(2);return i};X509.getPublicKeyInfoPosOfCertHEX=function(c){var b=ASN1HEX.getPosArrayOfChildren_AtObj(c,0);if(b.length!=3){throw\"malformed X.509 certificate PEM (code:001)\"}if(c.substr(b[0],2)!=\"30\"){throw\"malformed X.509 certificate PEM (code:002)\"}var a=ASN1HEX.getPosArrayOfChildren_AtObj(c,b[0]);if(a.length<7){throw\"malformed X.509 certificate PEM (code:003)\"}return a[6]};X509.getV3ExtInfoListOfCertHex=function(g){var b=ASN1HEX.getPosArrayOfChildren_AtObj(g,0);if(b.length!=3){throw\"malformed X.509 certificate PEM (code:001)\"}if(g.substr(b[0],2)!=\"30\"){throw\"malformed X.509 certificate PEM (code:002)\"}var a=ASN1HEX.getPosArrayOfChildren_AtObj(g,b[0]);if(a.length<8){throw\"malformed X.509 certificate PEM (code:003)\"}if(g.substr(a[7],2)!=\"a3\"){throw\"malformed X.509 certificate PEM (code:004)\"}var h=ASN1HEX.getPosArrayOfChildren_AtObj(g,a[7]);if(h.length!=1){throw\"malformed X.509 certificate PEM (code:005)\"}if(g.substr(h[0],2)!=\"30\"){throw\"malformed X.509 certificate PEM (code:006)\"}var f=ASN1HEX.getPosArrayOfChildren_AtObj(g,h[0]);var e=f.length;var d=new Array(e);for(var c=0;c<e;c++){d[c]=X509.getV3ExtItemInfo_AtObj(g,f[c])}return d};X509.getV3ExtItemInfo_AtObj=function(f,g){var e={};e.posTLV=g;var b=ASN1HEX.getPosArrayOfChildren_AtObj(f,g);if(b.length!=2&&b.length!=3){throw\"malformed X.509v3 Ext (code:001)\"}if(f.substr(b[0],2)!=\"06\"){throw\"malformed X.509v3 Ext (code:002)\"}var d=ASN1HEX.getHexOfV_AtObj(f,b[0]);e.oid=ASN1HEX.hextooidstr(d);e.critical=false;if(b.length==3){e.critical=true}var c=b[b.length-1];if(f.substr(c,2)!=\"04\"){throw\"malformed X.509v3 Ext (code:003)\"}e.posV=ASN1HEX.getStartPosOfV_AtObj(f,c);return e};X509.getHexOfTLV_V3ExtValue=function(b,a){var c=X509.getPosOfTLV_V3ExtValue(b,a);if(c==-1){return null}return ASN1HEX.getHexOfTLV_AtObj(b,c)};X509.getHexOfV_V3ExtValue=function(b,a){var c=X509.getPosOfTLV_V3ExtValue(b,a);if(c==-1){return null}return ASN1HEX.getHexOfV_AtObj(b,c)};X509.getPosOfTLV_V3ExtValue=function(f,b){var d=b;if(!b.match(/^[0-9.]+$/)){d=KJUR.asn1.x509.OID.name2oid(b)}if(d==\"\"){return -1}var c=X509.getV3ExtInfoListOfCertHex(f);for(var a=0;a<c.length;a++){var e=c[a];if(e.oid==d){return e.posV}}return -1};X509.getExtBasicConstraints=function(d){var a=X509.getHexOfV_V3ExtValue(d,\"basicConstraints\");if(a===null){return null}if(a===\"\"){return{}}if(a===\"0101ff\"){return{cA:true}}if(a.substr(0,8)===\"0101ff02\"){var c=ASN1HEX.getHexOfV_AtObj(a,6);var b=parseInt(c,16);return{cA:true,pathLen:b}}throw\"unknown error\"};X509.KEYUSAGE_NAME=[\"digitalSignature\",\"nonRepudiation\",\"keyEncipherment\",\"dataEncipherment\",\"keyAgreement\",\"keyCertSign\",\"cRLSign\",\"encipherOnly\",\"decipherOnly\"];X509.getExtKeyUsageBin=function(d){var b=X509.getHexOfV_V3ExtValue(d,\"keyUsage\");if(b==\"\"){return\"\"}if(b.length%2!=0||b.length<=2){throw\"malformed key usage value\"}var a=parseInt(b.substr(0,2));var c=parseInt(b.substr(2),16).toString(2);return c.substr(0,c.length-a)};X509.getExtKeyUsageString=function(e){var d=X509.getExtKeyUsageBin(e);var b=new Array();for(var c=0;c<d.length;c++){if(d.substr(c,1)==\"1\"){b.push(X509.KEYUSAGE_NAME[c])}}return b.join(\",\")};X509.getExtSubjectKeyIdentifier=function(b){var a=X509.getHexOfV_V3ExtValue(b,\"subjectKeyIdentifier\");return a};X509.getExtAuthorityKeyIdentifier=function(f){var b={};var e=X509.getHexOfTLV_V3ExtValue(f,\"authorityKeyIdentifier\");if(e===null){return null}var c=ASN1HEX.getPosArrayOfChildren_AtObj(e,0);for(var d=0;d<c.length;d++){if(e.substr(c[d],2)===\"80\"){b.kid=ASN1HEX.getHexOfV_AtObj(e,c[d])}}return b};X509.getExtExtKeyUsageName=function(k){var b=new Array();var f=X509.getHexOfTLV_V3ExtValue(k,\"extKeyUsage\");if(f===null){return null}var c=ASN1HEX.getPosArrayOfChildren_AtObj(f,0);for(var e=0;e<c.length;e++){var j=ASN1HEX.getHexOfV_AtObj(f,c[e]);var g=KJUR.asn1.ASN1Util.oidHexToInt(j);var d=KJUR.asn1.x509.OID.oid2name(g);b.push(d)}return b};X509.getExtSubjectAltName=function(g){var b=new Array();var f=X509.getHexOfTLV_V3ExtValue(g,\"subjectAltName\");var c=ASN1HEX.getPosArrayOfChildren_AtObj(f,0);for(var e=0;e<c.length;e++){if(f.substr(c[e],2)===\"82\"){var d=hextoutf8(ASN1HEX.getHexOfV_AtObj(f,c[e]));b.push(d)}}return b};X509.getExtCRLDistributionPointsURI=function(n){var p=new Array();var k=X509.getHexOfTLV_V3ExtValue(n,\"cRLDistributionPoints\");var o=ASN1HEX.getPosArrayOfChildren_AtObj(k,0);for(var g=0;g<o.length;g++){var l=ASN1HEX.getHexOfTLV_AtObj(k,o[g]);var b=ASN1HEX.getPosArrayOfChildren_AtObj(l,0);for(var e=0;e<b.length;e++){if(l.substr(b[e],2)===\"a0\"){var f=ASN1HEX.getHexOfV_AtObj(l,b[e]);if(f.substr(0,2)===\"a0\"){var c=ASN1HEX.getHexOfV_AtObj(f,0);if(c.substr(0,2)===\"86\"){var m=ASN1HEX.getHexOfV_AtObj(c,0);var d=hextoutf8(m);p.push(d)}}}}}return p};X509.getExtAIAInfo=function(g){var j={};j.ocsp=[];j.caissuer=[];var h=X509.getPosOfTLV_V3ExtValue(g,\"authorityInfoAccess\");if(h==-1){return null}if(g.substr(h,2)!=\"30\"){throw\"malformed AIA Extn Value\"}var d=ASN1HEX.getPosArrayOfChildren_AtObj(g,h);for(var c=0;c<d.length;c++){var a=d[c];var b=ASN1HEX.getPosArrayOfChildren_AtObj(g,a);if(b.length!=2){throw\"malformed AccessDescription of AIA Extn\"}var e=b[0];var f=b[1];if(ASN1HEX.getHexOfV_AtObj(g,e)==\"2b06010505073001\"){if(g.substr(f,2)==\"86\"){j.ocsp.push(hextoutf8(ASN1HEX.getHexOfV_AtObj(g,f)))}}if(ASN1HEX.getHexOfV_AtObj(g,e)==\"2b06010505073002\"){if(g.substr(f,2)==\"86\"){j.caissuer.push(hextoutf8(ASN1HEX.getHexOfV_AtObj(g,f)))}}}return j};X509.getSignatureAlgorithmName=function(d){var b=ASN1HEX.getDecendantHexVByNthList(d,0,[1,0]);var a=KJUR.asn1.ASN1Util.oidHexToInt(b);var c=KJUR.asn1.x509.OID.oid2name(a);return c};X509.getSignatureValueHex=function(b){var a=ASN1HEX.getDecendantHexVByNthList(b,0,[2]);if(a.substr(0,2)!==\"00\"){throw\"can't get signature value\"}return a.substr(2)};X509.getSerialNumberHex=function(a){return ASN1HEX.getDecendantHexVByNthList(a,0,[0,1])};\n\t/*! jws-3.3.4 (c) 2013-2016 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.jws==\"undefined\"||!KJUR.jws){KJUR.jws={}}KJUR.jws.JWS=function(){var a=KJUR.jws.JWS;this.parseJWS=function(e,g){if((this.parsedJWS!==undefined)&&(g||(this.parsedJWS.sigvalH!==undefined))){return}if(e.match(/^([^.]+)\\.([^.]+)\\.([^.]+)$/)==null){throw\"JWS signature is not a form of 'Head.Payload.SigValue'.\"}var h=RegExp.$1;var c=RegExp.$2;var i=RegExp.$3;var k=h+\".\"+c;this.parsedJWS={};this.parsedJWS.headB64U=h;this.parsedJWS.payloadB64U=c;this.parsedJWS.sigvalB64U=i;this.parsedJWS.si=k;if(!g){var f=b64utohex(i);var d=parseBigInt(f,16);this.parsedJWS.sigvalH=f;this.parsedJWS.sigvalBI=d}var b=b64utoutf8(h);var j=b64utoutf8(c);this.parsedJWS.headS=b;this.parsedJWS.payloadS=j;if(!a.isSafeJSONString(b,this.parsedJWS,\"headP\")){throw\"malformed JSON string for JWS Head: \"+b}}};KJUR.jws.JWS.sign=function(a,i,c,m,l){var k=KJUR.jws.JWS;var q,e,j;if(typeof i!=\"string\"&&typeof i!=\"object\"){throw\"spHeader must be JSON string or object: \"+i}if(typeof i==\"object\"){e=i;q=JSON.stringify(e)}if(typeof i==\"string\"){q=i;if(!k.isSafeJSONString(q)){throw\"JWS Head is not safe JSON string: \"+q}e=k.readSafeJSONString(q)}j=c;if(typeof c==\"object\"){j=JSON.stringify(c)}if((a==\"\"||a==null)&&e.alg!==undefined){a=e.alg}if((a!=\"\"&&a!=null)&&e.alg===undefined){e.alg=a;q=JSON.stringify(e)}if(a!==e.alg){throw\"alg and sHeader.alg doesn't match: \"+a+\"!=\"+e.alg}var d=null;if(k.jwsalg2sigalg[a]===undefined){throw\"unsupported alg name: \"+a}else{d=k.jwsalg2sigalg[a]}var b=utf8tob64u(q);var g=utf8tob64u(j);var o=b+\".\"+g;var n=\"\";if(d.substr(0,4)==\"Hmac\"){if(m===undefined){throw\"mac key shall be specified for HS* alg\"}var h=new KJUR.crypto.Mac({alg:d,prov:\"cryptojs\",pass:m});h.updateString(o);n=h.doFinal()}else{if(d.indexOf(\"withECDSA\")!=-1){var p=new KJUR.crypto.Signature({alg:d});p.init(m,l);p.updateString(o);hASN1Sig=p.sign();n=KJUR.crypto.ECDSA.asn1SigToConcatSig(hASN1Sig)}else{if(d!=\"none\"){var p=new KJUR.crypto.Signature({alg:d});p.init(m,l);p.updateString(o);n=p.sign()}}}var f=hextob64u(n);return o+\".\"+f};KJUR.jws.JWS.verify=function(p,t,j){var m=KJUR.jws.JWS;var q=p.split(\".\");var d=q[0];var l=q[1];var b=d+\".\"+l;var r=b64utohex(q[2]);var i=m.readSafeJSONString(b64utoutf8(q[0]));var h=null;var s=null;if(i.alg===undefined){throw\"algorithm not specified in header\"}else{h=i.alg;s=h.substr(0,2)}if(j!=null&&Object.prototype.toString.call(j)===\"[object Array]\"&&j.length>0){var c=\":\"+j.join(\":\")+\":\";if(c.indexOf(\":\"+h+\":\")==-1){throw\"algorithm '\"+h+\"' not accepted in the list\"}}if(h!=\"none\"&&t===null){throw\"key shall be specified to verify.\"}if(typeof t==\"string\"&&t.indexOf(\"-----BEGIN \")!=-1){t=KEYUTIL.getKey(t)}if(s==\"RS\"||s==\"PS\"){if(!(t instanceof RSAKey)){throw\"key shall be a RSAKey obj for RS* and PS* algs\"}}if(s==\"ES\"){if(!(t instanceof KJUR.crypto.ECDSA)){throw\"key shall be a ECDSA obj for ES* algs\"}}if(h==\"none\"){}var n=null;if(m.jwsalg2sigalg[i.alg]===undefined){throw\"unsupported alg name: \"+h}else{n=m.jwsalg2sigalg[h]}if(n==\"none\"){throw\"not supported\"}else{if(n.substr(0,4)==\"Hmac\"){var k=null;if(t===undefined){throw\"hexadecimal key shall be specified for HMAC\"}var g=new KJUR.crypto.Mac({alg:n,pass:t});g.updateString(b);k=g.doFinal();return r==k}else{if(n.indexOf(\"withECDSA\")!=-1){var f=null;try{f=KJUR.crypto.ECDSA.concatSigToASN1Sig(r)}catch(o){return false}var e=new KJUR.crypto.Signature({alg:n});e.init(t);e.updateString(b);return e.verify(f)}else{var e=new KJUR.crypto.Signature({alg:n});e.init(t);e.updateString(b);return e.verify(r)}}}};KJUR.jws.JWS.parse=function(g){var c=g.split(\".\");var b={};var f,e,d;if(c.length!=2&&c.length!=3){throw\"malformed sJWS: wrong number of '.' splitted elements\"}f=c[0];e=c[1];if(c.length==3){d=c[2]}b.headerObj=KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));b.payloadObj=KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e));b.headerPP=JSON.stringify(b.headerObj,null,\"  \");if(b.payloadObj==null){b.payloadPP=b64utoutf8(e)}else{b.payloadPP=JSON.stringify(b.payloadObj,null,\"  \")}if(d!==undefined){b.sigHex=b64utohex(d)}return b};KJUR.jws.JWS.verifyJWT=function(d,j,l){var h=KJUR.jws.JWS;var i=d.split(\".\");var c=i[0];var g=i[1];var m=c+\".\"+g;var k=b64utohex(i[2]);var f=h.readSafeJSONString(b64utoutf8(c));var e=h.readSafeJSONString(b64utoutf8(g));if(f.alg===undefined){return false}if(l.alg===undefined){throw\"acceptField.alg shall be specified\"}if(!h.inArray(f.alg,l.alg)){return false}if(e.iss!==undefined&&typeof l.iss===\"object\"){if(!h.inArray(e.iss,l.iss)){return false}}if(e.sub!==undefined&&typeof l.sub===\"object\"){if(!h.inArray(e.sub,l.sub)){return false}}if(e.aud!==undefined&&typeof l.aud===\"object\"){if(typeof e.aud==\"string\"){if(!h.inArray(e.aud,l.aud)){return false}}else{if(typeof e.aud==\"object\"){if(!h.includedArray(e.aud,l.aud)){return false}}}}var b=KJUR.jws.IntDate.getNow();if(l.verifyAt!==undefined&&typeof l.verifyAt===\"number\"){b=l.verifyAt}if(l.gracePeriod===undefined||typeof l.gracePeriod!==\"number\"){l.gracePeriod=0}if(e.exp!==undefined&&typeof e.exp==\"number\"){if(e.exp+l.gracePeriod<b){return false}}if(e.nbf!==undefined&&typeof e.nbf==\"number\"){if(b<e.nbf-l.gracePeriod){return false}}if(e.iat!==undefined&&typeof e.iat==\"number\"){if(b<e.iat-l.gracePeriod){return false}}if(e.jti!==undefined&&l.jti!==undefined){if(e.jti!==l.jti){return false}}if(!KJUR.jws.JWS.verify(d,j,l.alg)){return false}return true};KJUR.jws.JWS.includedArray=function(b,a){var d=KJUR.jws.JWS.inArray;if(b===null){return false}if(typeof b!==\"object\"){return false}if(typeof b.length!==\"number\"){return false}for(var c=0;c<b.length;c++){if(!d(b[c],a)){return false}}return true};KJUR.jws.JWS.inArray=function(d,b){if(b===null){return false}if(typeof b!==\"object\"){return false}if(typeof b.length!==\"number\"){return false}for(var c=0;c<b.length;c++){if(b[c]==d){return true}}return false};KJUR.jws.JWS.jwsalg2sigalg={HS256:\"HmacSHA256\",HS384:\"HmacSHA384\",HS512:\"HmacSHA512\",RS256:\"SHA256withRSA\",RS384:\"SHA384withRSA\",RS512:\"SHA512withRSA\",ES256:\"SHA256withECDSA\",ES384:\"SHA384withECDSA\",PS256:\"SHA256withRSAandMGF1\",PS384:\"SHA384withRSAandMGF1\",PS512:\"SHA512withRSAandMGF1\",none:\"none\",};KJUR.jws.JWS.isSafeJSONString=function(c,b,d){var e=null;try{e=jsonParse(c);if(typeof e!=\"object\"){return 0}if(e.constructor===Array){return 0}if(b){b[d]=e}return 1}catch(a){return 0}};KJUR.jws.JWS.readSafeJSONString=function(b){var c=null;try{c=jsonParse(b);if(typeof c!=\"object\"){return null}if(c.constructor===Array){return null}return c}catch(a){return null}};KJUR.jws.JWS.getEncodedSignatureValueFromJWS=function(a){if(a.match(/^[^.]+\\.[^.]+\\.([^.]+)$/)==null){throw\"JWS signature is not a form of 'Head.Payload.SigValue'.\"}return RegExp.$1};KJUR.jws.JWS.getJWKthumbprint=function(d){if(d.kty!==\"RSA\"&&d.kty!==\"EC\"&&d.kty!==\"oct\"){throw\"unsupported algorithm for JWK Thumprint\"}var a=\"{\";if(d.kty===\"RSA\"){if(typeof d.n!=\"string\"||typeof d.e!=\"string\"){throw\"wrong n and e value for RSA key\"}a+='\"e\":\"'+d.e+'\",';a+='\"kty\":\"'+d.kty+'\",';a+='\"n\":\"'+d.n+'\"}'}else{if(d.kty===\"EC\"){if(typeof d.crv!=\"string\"||typeof d.x!=\"string\"||typeof d.y!=\"string\"){throw\"wrong crv, x and y value for EC key\"}a+='\"crv\":\"'+d.crv+'\",';a+='\"kty\":\"'+d.kty+'\",';a+='\"x\":\"'+d.x+'\",';a+='\"y\":\"'+d.y+'\"}'}else{if(d.kty===\"oct\"){if(typeof d.k!=\"string\"){throw\"wrong k value for oct(symmetric) key\"}a+='\"kty\":\"'+d.kty+'\",';a+='\"k\":\"'+d.k+'\"}'}}}var b=rstrtohex(a);var c=KJUR.crypto.Util.hashHex(b,\"sha256\");var e=hextob64u(c);return e};KJUR.jws.IntDate={};KJUR.jws.IntDate.get=function(a){if(a==\"now\"){return KJUR.jws.IntDate.getNow()}else{if(a==\"now + 1hour\"){return KJUR.jws.IntDate.getNow()+60*60}else{if(a==\"now + 1day\"){return KJUR.jws.IntDate.getNow()+60*60*24}else{if(a==\"now + 1month\"){return KJUR.jws.IntDate.getNow()+60*60*24*30}else{if(a==\"now + 1year\"){return KJUR.jws.IntDate.getNow()+60*60*24*365}else{if(a.match(/Z$/)){return KJUR.jws.IntDate.getZulu(a)}else{if(a.match(/^[0-9]+$/)){return parseInt(a)}}}}}}}throw\"unsupported format: \"+a};KJUR.jws.IntDate.getZulu=function(l){var k;if(k=l.match(/(\\d+)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)Z/)){var b=RegExp.$1;var i=parseInt(b);if(b.length==4){}else{if(b.length==2){if(50<=i&&i<100){i=1900+i}else{if(0<=i&&i<50){i=2000+i}else{throw\"malformed year string for UTCTime\"}}}else{throw\"malformed year string\"}}var g=parseInt(RegExp.$2)-1;var j=parseInt(RegExp.$3);var c=parseInt(RegExp.$4);var e=parseInt(RegExp.$5);var f=parseInt(RegExp.$6);var h=new Date(Date.UTC(i,g,j,c,e,f));return ~~(h/1000)}throw\"unsupported format: \"+l};KJUR.jws.IntDate.getNow=function(){var a=~~(new Date()/1000);return a};KJUR.jws.IntDate.intDate2UTCString=function(a){var b=new Date(a*1000);return b.toUTCString()};KJUR.jws.IntDate.intDate2Zulu=function(e){var i=new Date(e*1000);var h=(\"0000\"+i.getUTCFullYear()).slice(-4);var g=(\"00\"+(i.getUTCMonth()+1)).slice(-2);var b=(\"00\"+i.getUTCDate()).slice(-2);var a=(\"00\"+i.getUTCHours()).slice(-2);var c=(\"00\"+i.getUTCMinutes()).slice(-2);var f=(\"00\"+i.getUTCSeconds()).slice(-2);return h+g+b+a+c+f+\"Z\"};\n\t/*! jwsjs-2.0.1 (c) 2010-2015 Kenji Urushima | kjur.github.com/jsjws/license\n\t */\n\tif(typeof KJUR==\"undefined\"||!KJUR){KJUR={}}if(typeof KJUR.jws==\"undefined\"||!KJUR.jws){KJUR.jws={}}KJUR.jws.JWSJS=function(){var a=KJUR.jws.JWS;this.aHeader=[];this.sPayload=\"\";this.aSignature=[];this.init=function(){this.aHeader=[];this.sPayload=\"\";this.aSignature=[]};this.initWithJWS=function(c){this.init();var b=new KJUR.jws.JWS();b.parseJWS(c);this.aHeader.push(b.parsedJWS.headB64U);this.sPayload=b.parsedJWS.payloadB64U;this.aSignature.push(b.parsedJWS.sigvalB64U)};this.addSignatureByHeaderKey=function(e,b){var d=b64utoutf8(this.sPayload);var c=new KJUR.jws.JWS();var f=c.generateJWSByP1PrvKey(e,d,b);this.aHeader.push(c.parsedJWS.headB64U);this.aSignature.push(c.parsedJWS.sigvalB64U)};this.addSignatureByHeaderPayloadKey=function(e,d,b){var c=new KJUR.jws.JWS();var f=c.generateJWSByP1PrvKey(e,d,b);this.aHeader.push(c.parsedJWS.headB64U);this.sPayload=c.parsedJWS.payloadB64U;this.aSignature.push(c.parsedJWS.sigvalB64U)};this.verifyWithCerts=function(c){if(this.aHeader.length!=c.length){throw\"num headers does not match with num certs\"}if(this.aSignature.length!=c.length){throw\"num signatures does not match with num certs\"}var k=this.sPayload;var g=\"\";for(var d=0;d<c.length;d++){var e=c[d];var f=this.aHeader[d];var m=this.aSignature[d];var b=f+\".\"+k+\".\"+m;var j=new KJUR.jws.JWS();try{var l=j.verifyJWSByPemX509Cert(b,e);if(l!=1){g+=(d+1)+\"th signature unmatch. \"}}catch(h){g+=(d+1)+\"th signature fail(\"+h+\"). \"}}if(g==\"\"){return 1}else{throw g}};this.readJWSJS=function(b){var c=a.readSafeJSONString(b);if(c==null){throw\"argument is not JSON string: \"+b}this.aHeader=c.headers;this.sPayload=c.payload;this.aSignature=c.signatures};this.getJSON=function(){return{headers:this.aHeader,payload:this.sPayload,signatures:this.aSignature}};this.isEmpty=function(){if(this.aHeader.length==0){return 1}return 0}};\n\t/*! nodeutil-1.0.0 (c) 2015 Kenji Urushima | kjur.github.com/jsrsasign/license\n\t */\n\tfunction readFileUTF8(a){return __webpack_require__(17).readFileSync(a,\"utf8\")}function readFileHexByBin(c){var b=__webpack_require__(12);var a=__webpack_require__(17);return b.rstrtohex(a.readFileSync(c,\"binary\"))}function readFile(b){var a=__webpack_require__(17);return a.readFileSync(b,\"binary\")}function saveFile(c,b){var a=__webpack_require__(17);a.writeFileSync(c,b,\"binary\")}function saveFileBinByHex(e,b){var a=__webpack_require__(17);var c=__webpack_require__(12);var d=c.hextorstr(b);a.writeFileSync(e,d,\"binary\")};\n\texports.SecureRandom = SecureRandom;\n\texports.rng_seed_time = rng_seed_time;\n\t\n\texports.BigInteger = BigInteger;\n\texports.RSAKey = RSAKey;\n\texports.ECDSA = KJUR.crypto.ECDSA;\n\texports.DSA = KJUR.crypto.DSA;\n\texports.Signature = KJUR.crypto.Signature;\n\texports.MessageDigest = KJUR.crypto.MessageDigest;\n\texports.Mac = KJUR.crypto.Mac;\n\texports.KEYUTIL = KEYUTIL;\n\texports.ASN1HEX = ASN1HEX;\n\texports.X509 = X509;\n\texports.CryptoJS = CryptoJS;\n\t\n\t// ext/base64.js\n\texports.b64tohex = b64tohex;\n\texports.b64toBA = b64toBA;\n\t\n\t// base64x.js\n\texports.stoBA = stoBA;\n\texports.BAtos = BAtos;\n\texports.BAtohex = BAtohex;\n\texports.stohex = stohex;\n\texports.stob64 = stob64;\n\texports.stob64u = stob64u;\n\texports.b64utos = b64utos;\n\texports.b64tob64u = b64tob64u;\n\texports.b64utob64 = b64utob64;\n\texports.hex2b64 = hex2b64;\n\texports.hextob64u = hextob64u;\n\texports.b64utohex = b64utohex;\n\texports.b64tohex = b64tohex;\n\texports.utf8tob64u = utf8tob64u;\n\texports.b64utoutf8 = b64utoutf8;\n\texports.utf8tob64 = utf8tob64;\n\texports.b64toutf8 = b64toutf8;\n\texports.utf8tohex = utf8tohex;\n\texports.hextoutf8 = hextoutf8;\n\texports.hextorstr = hextorstr;\n\texports.rstrtohex = rstrtohex;\n\texports.newline_toUnix = newline_toUnix;\n\texports.newline_toDos = newline_toDos;\n\texports.intarystrtohex = intarystrtohex;\n\texports.strdiffidx = strdiffidx;\n\t\n\texports.crypto = KJUR.crypto;\n\texports.asn1 = KJUR.asn1;\n\texports.jws = KJUR.jws;\n\t\n\texports.readFileUTF8 = readFileUTF8;\n\texports.readFileHexByBin = readFileHexByBin;\n\texports.readFile = readFile;\n\texports.saveFile = saveFile;\n\texports.saveFileBinByHex = saveFileBinByHex;\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer))\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */\n\t/* eslint-disable no-proto */\n\t\n\t'use strict'\n\t\n\tvar base64 = __webpack_require__(14)\n\tvar ieee754 = __webpack_require__(15)\n\tvar isArray = __webpack_require__(16)\n\t\n\texports.Buffer = Buffer\n\texports.SlowBuffer = SlowBuffer\n\texports.INSPECT_MAX_BYTES = 50\n\tBuffer.poolSize = 8192 // not used by this implementation\n\t\n\tvar rootParent = {}\n\t\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n\t *     on objects.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\t\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n\t  ? global.TYPED_ARRAY_SUPPORT\n\t  : typedArraySupport()\n\t\n\tfunction typedArraySupport () {\n\t  function Bar () {}\n\t  try {\n\t    var arr = new Uint8Array(1)\n\t    arr.foo = function () { return 42 }\n\t    arr.constructor = Bar\n\t    return arr.foo() === 42 && // typed array instances can be augmented\n\t        arr.constructor === Bar && // constructor can be set\n\t        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n\t        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n\t  } catch (e) {\n\t    return false\n\t  }\n\t}\n\t\n\tfunction kMaxLength () {\n\t  return Buffer.TYPED_ARRAY_SUPPORT\n\t    ? 0x7fffffff\n\t    : 0x3fffffff\n\t}\n\t\n\t/**\n\t * Class: Buffer\n\t * =============\n\t *\n\t * The Buffer constructor returns instances of `Uint8Array` that are augmented\n\t * with function properties for all the node `Buffer` API functions. We use\n\t * `Uint8Array` so that square bracket notation works as expected -- it returns\n\t * a single octet.\n\t *\n\t * By augmenting the instances, we can avoid modifying the `Uint8Array`\n\t * prototype.\n\t */\n\tfunction Buffer (arg) {\n\t  if (!(this instanceof Buffer)) {\n\t    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n\t    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n\t    return new Buffer(arg)\n\t  }\n\t\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this.length = 0\n\t    this.parent = undefined\n\t  }\n\t\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    return fromNumber(this, arg)\n\t  }\n\t\n\t  // Slightly less common case.\n\t  if (typeof arg === 'string') {\n\t    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n\t  }\n\t\n\t  // Unusual.\n\t  return fromObject(this, arg)\n\t}\n\t\n\tfunction fromNumber (that, length) {\n\t  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    for (var i = 0; i < length; i++) {\n\t      that[i] = 0\n\t    }\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromString (that, string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\t\n\t  // Assumption: byteLength() return value is always < kMaxLength.\n\t  var length = byteLength(string, encoding) | 0\n\t  that = allocate(that, length)\n\t\n\t  that.write(string, encoding)\n\t  return that\n\t}\n\t\n\tfunction fromObject (that, object) {\n\t  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\t\n\t  if (isArray(object)) return fromArray(that, object)\n\t\n\t  if (object == null) {\n\t    throw new TypeError('must start with number, buffer, array or string')\n\t  }\n\t\n\t  if (typeof ArrayBuffer !== 'undefined') {\n\t    if (object.buffer instanceof ArrayBuffer) {\n\t      return fromTypedArray(that, object)\n\t    }\n\t    if (object instanceof ArrayBuffer) {\n\t      return fromArrayBuffer(that, object)\n\t    }\n\t  }\n\t\n\t  if (object.length) return fromArrayLike(that, object)\n\t\n\t  return fromJsonObject(that, object)\n\t}\n\t\n\tfunction fromBuffer (that, buffer) {\n\t  var length = checked(buffer.length) | 0\n\t  that = allocate(that, length)\n\t  buffer.copy(that, 0, 0, length)\n\t  return that\n\t}\n\t\n\tfunction fromArray (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\t// Duplicate of fromArray() to keep fromArray() monomorphic.\n\tfunction fromTypedArray (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  // Truncating the elements is probably not what people expect from typed\n\t  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n\t  // of the old Buffer constructor.\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayBuffer (that, array) {\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    array.byteLength\n\t    that = Buffer._augment(new Uint8Array(array))\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that = fromTypedArray(that, new Uint8Array(array))\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayLike (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\t// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n\t// Returns a zero-length buffer for inputs that don't conform to the spec.\n\tfunction fromJsonObject (that, object) {\n\t  var array\n\t  var length = 0\n\t\n\t  if (object.type === 'Buffer' && isArray(object.data)) {\n\t    array = object.data\n\t    length = checked(array.length) | 0\n\t  }\n\t  that = allocate(that, length)\n\t\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tif (Buffer.TYPED_ARRAY_SUPPORT) {\n\t  Buffer.prototype.__proto__ = Uint8Array.prototype\n\t  Buffer.__proto__ = Uint8Array\n\t} else {\n\t  // pre-set for values that may exist in the future\n\t  Buffer.prototype.length = undefined\n\t  Buffer.prototype.parent = undefined\n\t}\n\t\n\tfunction allocate (that, length) {\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = Buffer._augment(new Uint8Array(length))\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that.length = length\n\t    that._isBuffer = true\n\t  }\n\t\n\t  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n\t  if (fromPool) that.parent = rootParent\n\t\n\t  return that\n\t}\n\t\n\tfunction checked (length) {\n\t  // Note: cannot use `length < kMaxLength` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= kMaxLength()) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\t\n\tfunction SlowBuffer (subject, encoding) {\n\t  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\t\n\t  var buf = new Buffer(subject, encoding)\n\t  delete buf.parent\n\t  return buf\n\t}\n\t\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return !!(b != null && b._isBuffer)\n\t}\n\t\n\tBuffer.compare = function compare (a, b) {\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError('Arguments must be Buffers')\n\t  }\n\t\n\t  if (a === b) return 0\n\t\n\t  var x = a.length\n\t  var y = b.length\n\t\n\t  var i = 0\n\t  var len = Math.min(x, y)\n\t  while (i < len) {\n\t    if (a[i] !== b[i]) break\n\t\n\t    ++i\n\t  }\n\t\n\t  if (i !== len) {\n\t    x = a[i]\n\t    y = b[i]\n\t  }\n\t\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\t\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'raw':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t}\n\t\n\tBuffer.concat = function concat (list, length) {\n\t  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\t\n\t  if (list.length === 0) {\n\t    return new Buffer(0)\n\t  }\n\t\n\t  var i\n\t  if (length === undefined) {\n\t    length = 0\n\t    for (i = 0; i < list.length; i++) {\n\t      length += list[i].length\n\t    }\n\t  }\n\t\n\t  var buf = new Buffer(length)\n\t  var pos = 0\n\t  for (i = 0; i < list.length; i++) {\n\t    var item = list[i]\n\t    item.copy(buf, pos)\n\t    pos += item.length\n\t  }\n\t  return buf\n\t}\n\t\n\tfunction byteLength (string, encoding) {\n\t  if (typeof string !== 'string') string = '' + string\n\t\n\t  var len = string.length\n\t  if (len === 0) return 0\n\t\n\t  // Use a for loop to avoid recursion\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'binary':\n\t      // Deprecated\n\t      case 'raw':\n\t      case 'raws':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength\n\t\n\tfunction slowToString (encoding, start, end) {\n\t  var loweredCase = false\n\t\n\t  start = start | 0\n\t  end = end === undefined || end === Infinity ? this.length : end | 0\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t  if (start < 0) start = 0\n\t  if (end > this.length) end = this.length\n\t  if (end <= start) return ''\n\t\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\t\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\t\n\t      case 'binary':\n\t        return binarySlice(this, start, end)\n\t\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toString = function toString () {\n\t  var length = this.length | 0\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t}\n\t\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t}\n\t\n\tBuffer.prototype.inspect = function inspect () {\n\t  var str = ''\n\t  var max = exports.INSPECT_MAX_BYTES\n\t  if (this.length > 0) {\n\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t    if (this.length > max) str += ' ... '\n\t  }\n\t  return '<Buffer ' + str + '>'\n\t}\n\t\n\tBuffer.prototype.compare = function compare (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return 0\n\t  return Buffer.compare(this, b)\n\t}\n\t\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n\t  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n\t  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n\t  byteOffset >>= 0\n\t\n\t  if (this.length === 0) return -1\n\t  if (byteOffset >= this.length) return -1\n\t\n\t  // Negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\t\n\t  if (typeof val === 'string') {\n\t    if (val.length === 0) return -1 // special case: looking for empty string always fails\n\t    return String.prototype.indexOf.call(this, val, byteOffset)\n\t  }\n\t  if (Buffer.isBuffer(val)) {\n\t    return arrayIndexOf(this, val, byteOffset)\n\t  }\n\t  if (typeof val === 'number') {\n\t    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n\t      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n\t    }\n\t    return arrayIndexOf(this, [ val ], byteOffset)\n\t  }\n\t\n\t  function arrayIndexOf (arr, val, byteOffset) {\n\t    var foundIndex = -1\n\t    for (var i = 0; byteOffset + i < arr.length; i++) {\n\t      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n\t        if (foundIndex === -1) foundIndex = i\n\t        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n\t      } else {\n\t        foundIndex = -1\n\t      }\n\t    }\n\t    return -1\n\t  }\n\t\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\t\n\t// `get` is deprecated\n\tBuffer.prototype.get = function get (offset) {\n\t  console.log('.get() is deprecated. Access using array indexes instead.')\n\t  return this.readUInt8(offset)\n\t}\n\t\n\t// `set` is deprecated\n\tBuffer.prototype.set = function set (v, offset) {\n\t  console.log('.set() is deprecated. Access using array indexes instead.')\n\t  return this.writeUInt8(v, offset)\n\t}\n\t\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0\n\t  var remaining = buf.length - offset\n\t  if (!length) {\n\t    length = remaining\n\t  } else {\n\t    length = Number(length)\n\t    if (length > remaining) {\n\t      length = remaining\n\t    }\n\t  }\n\t\n\t  // must be an even number of digits\n\t  var strLen = string.length\n\t  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\t\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2\n\t  }\n\t  for (var i = 0; i < length; i++) {\n\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t    if (isNaN(parsed)) throw new Error('Invalid hex string')\n\t    buf[offset + i] = parsed\n\t  }\n\t  return i\n\t}\n\t\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction binaryWrite (buf, string, offset, length) {\n\t  return asciiWrite(buf, string, offset, length)\n\t}\n\t\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8'\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset | 0\n\t    if (isFinite(length)) {\n\t      length = length | 0\n\t      if (encoding === undefined) encoding = 'utf8'\n\t    } else {\n\t      encoding = length\n\t      length = undefined\n\t    }\n\t  // legacy write(string, encoding, offset, length) - remove in v0.13\n\t  } else {\n\t    var swap = encoding\n\t    encoding = offset\n\t    offset = length | 0\n\t    length = swap\n\t  }\n\t\n\t  var remaining = this.length - offset\n\t  if (length === undefined || length > remaining) length = remaining\n\t\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('attempt to write outside buffer bounds')\n\t  }\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\t\n\t      case 'ascii':\n\t        return asciiWrite(this, string, offset, length)\n\t\n\t      case 'binary':\n\t        return binaryWrite(this, string, offset, length)\n\t\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t}\n\t\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\t\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end)\n\t  var res = []\n\t\n\t  var i = start\n\t  while (i < end) {\n\t    var firstByte = buf[i]\n\t    var codePoint = null\n\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t      : (firstByte > 0xDF) ? 3\n\t      : (firstByte > 0xBF) ? 2\n\t      : 1\n\t\n\t    if (i + bytesPerSequence <= end) {\n\t      var secondByte, thirdByte, fourthByte, tempCodePoint\n\t\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1]\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          fourthByte = buf[i + 3]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t      }\n\t    }\n\t\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD\n\t      bytesPerSequence = 1\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n\t      codePoint = 0xDC00 | codePoint & 0x3FF\n\t    }\n\t\n\t    res.push(codePoint)\n\t    i += bytesPerSequence\n\t  }\n\t\n\t  return decodeCodePointsArray(res)\n\t}\n\t\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tvar MAX_ARGUMENTS_LENGTH = 0x1000\n\t\n\tfunction decodeCodePointsArray (codePoints) {\n\t  var len = codePoints.length\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\t\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  var res = ''\n\t  var i = 0\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    )\n\t  }\n\t  return res\n\t}\n\t\n\tfunction asciiSlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction binarySlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    ret += String.fromCharCode(buf[i])\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction hexSlice (buf, start, end) {\n\t  var len = buf.length\n\t\n\t  if (!start || start < 0) start = 0\n\t  if (!end || end < 0 || end > len) end = len\n\t\n\t  var out = ''\n\t  for (var i = start; i < end; i++) {\n\t    out += toHex(buf[i])\n\t  }\n\t  return out\n\t}\n\t\n\tfunction utf16leSlice (buf, start, end) {\n\t  var bytes = buf.slice(start, end)\n\t  var res = ''\n\t  for (var i = 0; i < bytes.length; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n\t  }\n\t  return res\n\t}\n\t\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  var len = this.length\n\t  start = ~~start\n\t  end = end === undefined ? len : ~~end\n\t\n\t  if (start < 0) {\n\t    start += len\n\t    if (start < 0) start = 0\n\t  } else if (start > len) {\n\t    start = len\n\t  }\n\t\n\t  if (end < 0) {\n\t    end += len\n\t    if (end < 0) end = 0\n\t  } else if (end > len) {\n\t    end = len\n\t  }\n\t\n\t  if (end < start) end = start\n\t\n\t  var newBuf\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    newBuf = Buffer._augment(this.subarray(start, end))\n\t  } else {\n\t    var sliceLen = end - start\n\t    newBuf = new Buffer(sliceLen, undefined)\n\t    for (var i = 0; i < sliceLen; i++) {\n\t      newBuf[i] = this[i + start]\n\t    }\n\t  }\n\t\n\t  if (newBuf.length) newBuf.parent = this.parent || this\n\t\n\t  return newBuf\n\t}\n\t\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\t\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length)\n\t  }\n\t\n\t  var val = this[offset + --byteLength]\n\t  var mul = 1\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  return this[offset]\n\t}\n\t\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return this[offset] | (this[offset + 1] << 8)\n\t}\n\t\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return (this[offset] << 8) | this[offset + 1]\n\t}\n\t\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t}\n\t\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var i = byteLength\n\t  var mul = 1\n\t  var val = this[offset + --i]\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t}\n\t\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset] | (this[offset + 1] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset + 1] | (this[offset] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t}\n\t\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, true, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, false, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, true, 52, 8)\n\t}\n\t\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, false, 52, 8)\n\t}\n\t\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('value is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('index out of range')\n\t}\n\t\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\t\n\t  var mul = 1\n\t  var i = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n\t    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n\t      (littleEndian ? i : 1 - i) * 8\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n\t    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset + 3] = (value >>> 24)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = 0\n\t  var mul = 1\n\t  var sub = value < 0 ? 1 : 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  var sub = value < 0 ? 1 : 0\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  if (value < 0) value = 0xff + value + 1\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 3] = (value >>> 24)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (value > max || value < min) throw new RangeError('value is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('index out of range')\n\t  if (offset < 0) throw new RangeError('index out of range')\n\t}\n\t\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t}\n\t\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t  return offset + 8\n\t}\n\t\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t}\n\t\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!start) start = 0\n\t  if (!end && end !== 0) end = this.length\n\t  if (targetStart >= target.length) targetStart = target.length\n\t  if (!targetStart) targetStart = 0\n\t  if (end > 0 && end < start) end = start\n\t\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\t\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\t\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start\n\t  }\n\t\n\t  var len = end - start\n\t  var i\n\t\n\t  if (this === target && start < targetStart && targetStart < end) {\n\t    // descending copy from end\n\t    for (i = len - 1; i >= 0; i--) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // ascending copy from start\n\t    for (i = 0; i < len; i++) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else {\n\t    target._set(this.subarray(start, start + len), targetStart)\n\t  }\n\t\n\t  return len\n\t}\n\t\n\t// fill(value, start=0, end=buffer.length)\n\tBuffer.prototype.fill = function fill (value, start, end) {\n\t  if (!value) value = 0\n\t  if (!start) start = 0\n\t  if (!end) end = this.length\n\t\n\t  if (end < start) throw new RangeError('end < start')\n\t\n\t  // Fill 0 bytes; we're done\n\t  if (end === start) return\n\t  if (this.length === 0) return\n\t\n\t  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n\t  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\t\n\t  var i\n\t  if (typeof value === 'number') {\n\t    for (i = start; i < end; i++) {\n\t      this[i] = value\n\t    }\n\t  } else {\n\t    var bytes = utf8ToBytes(value.toString())\n\t    var len = bytes.length\n\t    for (i = start; i < end; i++) {\n\t      this[i] = bytes[i % len]\n\t    }\n\t  }\n\t\n\t  return this\n\t}\n\t\n\t/**\n\t * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n\t * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n\t */\n\tBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n\t  if (typeof Uint8Array !== 'undefined') {\n\t    if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t      return (new Buffer(this)).buffer\n\t    } else {\n\t      var buf = new Uint8Array(this.length)\n\t      for (var i = 0, len = buf.length; i < len; i += 1) {\n\t        buf[i] = this[i]\n\t      }\n\t      return buf.buffer\n\t    }\n\t  } else {\n\t    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n\t  }\n\t}\n\t\n\t// HELPER FUNCTIONS\n\t// ================\n\t\n\tvar BP = Buffer.prototype\n\t\n\t/**\n\t * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n\t */\n\tBuffer._augment = function _augment (arr) {\n\t  arr.constructor = Buffer\n\t  arr._isBuffer = true\n\t\n\t  // save reference to original Uint8Array set method before overwriting\n\t  arr._set = arr.set\n\t\n\t  // deprecated\n\t  arr.get = BP.get\n\t  arr.set = BP.set\n\t\n\t  arr.write = BP.write\n\t  arr.toString = BP.toString\n\t  arr.toLocaleString = BP.toString\n\t  arr.toJSON = BP.toJSON\n\t  arr.equals = BP.equals\n\t  arr.compare = BP.compare\n\t  arr.indexOf = BP.indexOf\n\t  arr.copy = BP.copy\n\t  arr.slice = BP.slice\n\t  arr.readUIntLE = BP.readUIntLE\n\t  arr.readUIntBE = BP.readUIntBE\n\t  arr.readUInt8 = BP.readUInt8\n\t  arr.readUInt16LE = BP.readUInt16LE\n\t  arr.readUInt16BE = BP.readUInt16BE\n\t  arr.readUInt32LE = BP.readUInt32LE\n\t  arr.readUInt32BE = BP.readUInt32BE\n\t  arr.readIntLE = BP.readIntLE\n\t  arr.readIntBE = BP.readIntBE\n\t  arr.readInt8 = BP.readInt8\n\t  arr.readInt16LE = BP.readInt16LE\n\t  arr.readInt16BE = BP.readInt16BE\n\t  arr.readInt32LE = BP.readInt32LE\n\t  arr.readInt32BE = BP.readInt32BE\n\t  arr.readFloatLE = BP.readFloatLE\n\t  arr.readFloatBE = BP.readFloatBE\n\t  arr.readDoubleLE = BP.readDoubleLE\n\t  arr.readDoubleBE = BP.readDoubleBE\n\t  arr.writeUInt8 = BP.writeUInt8\n\t  arr.writeUIntLE = BP.writeUIntLE\n\t  arr.writeUIntBE = BP.writeUIntBE\n\t  arr.writeUInt16LE = BP.writeUInt16LE\n\t  arr.writeUInt16BE = BP.writeUInt16BE\n\t  arr.writeUInt32LE = BP.writeUInt32LE\n\t  arr.writeUInt32BE = BP.writeUInt32BE\n\t  arr.writeIntLE = BP.writeIntLE\n\t  arr.writeIntBE = BP.writeIntBE\n\t  arr.writeInt8 = BP.writeInt8\n\t  arr.writeInt16LE = BP.writeInt16LE\n\t  arr.writeInt16BE = BP.writeInt16BE\n\t  arr.writeInt32LE = BP.writeInt32LE\n\t  arr.writeInt32BE = BP.writeInt32BE\n\t  arr.writeFloatLE = BP.writeFloatLE\n\t  arr.writeFloatBE = BP.writeFloatBE\n\t  arr.writeDoubleLE = BP.writeDoubleLE\n\t  arr.writeDoubleBE = BP.writeDoubleBE\n\t  arr.fill = BP.fill\n\t  arr.inspect = BP.inspect\n\t  arr.toArrayBuffer = BP.toArrayBuffer\n\t\n\t  return arr\n\t}\n\t\n\tvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\t\n\tfunction base64clean (str) {\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '='\n\t  }\n\t  return str\n\t}\n\t\n\tfunction stringtrim (str) {\n\t  if (str.trim) return str.trim()\n\t  return str.replace(/^\\s+|\\s+$/g, '')\n\t}\n\t\n\tfunction toHex (n) {\n\t  if (n < 16) return '0' + n.toString(16)\n\t  return n.toString(16)\n\t}\n\t\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity\n\t  var codePoint\n\t  var length = string.length\n\t  var leadSurrogate = null\n\t  var bytes = []\n\t\n\t  for (var i = 0; i < length; i++) {\n\t    codePoint = string.charCodeAt(i)\n\t\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        }\n\t\n\t        // valid lead\n\t        leadSurrogate = codePoint\n\t\n\t        continue\n\t      }\n\t\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t        leadSurrogate = codePoint\n\t        continue\n\t      }\n\t\n\t      // valid surrogate pair\n\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t    }\n\t\n\t    leadSurrogate = null\n\t\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint)\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\t\n\t  return bytes\n\t}\n\t\n\tfunction asciiToBytes (str) {\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; i++) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t  }\n\t  return byteArray\n\t}\n\t\n\tfunction utf16leToBytes (str, units) {\n\t  var c, hi, lo\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; i++) {\n\t    if ((units -= 2) < 0) break\n\t\n\t    c = str.charCodeAt(i)\n\t    hi = c >> 8\n\t    lo = c % 256\n\t    byteArray.push(lo)\n\t    byteArray.push(hi)\n\t  }\n\t\n\t  return byteArray\n\t}\n\t\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\t\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  for (var i = 0; i < length; i++) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i]\n\t  }\n\t  return i\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).Buffer, (function() { return this; }())))\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\n\t;(function (exports) {\n\t\t'use strict';\n\t\n\t  var Arr = (typeof Uint8Array !== 'undefined')\n\t    ? Uint8Array\n\t    : Array\n\t\n\t\tvar PLUS   = '+'.charCodeAt(0)\n\t\tvar SLASH  = '/'.charCodeAt(0)\n\t\tvar NUMBER = '0'.charCodeAt(0)\n\t\tvar LOWER  = 'a'.charCodeAt(0)\n\t\tvar UPPER  = 'A'.charCodeAt(0)\n\t\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\t\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\t\n\t\tfunction decode (elt) {\n\t\t\tvar code = elt.charCodeAt(0)\n\t\t\tif (code === PLUS ||\n\t\t\t    code === PLUS_URL_SAFE)\n\t\t\t\treturn 62 // '+'\n\t\t\tif (code === SLASH ||\n\t\t\t    code === SLASH_URL_SAFE)\n\t\t\t\treturn 63 // '/'\n\t\t\tif (code < NUMBER)\n\t\t\t\treturn -1 //no match\n\t\t\tif (code < NUMBER + 10)\n\t\t\t\treturn code - NUMBER + 26 + 26\n\t\t\tif (code < UPPER + 26)\n\t\t\t\treturn code - UPPER\n\t\t\tif (code < LOWER + 26)\n\t\t\t\treturn code - LOWER + 26\n\t\t}\n\t\n\t\tfunction b64ToByteArray (b64) {\n\t\t\tvar i, j, l, tmp, placeHolders, arr\n\t\n\t\t\tif (b64.length % 4 > 0) {\n\t\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t\t}\n\t\n\t\t\t// the number of equal signs (place holders)\n\t\t\t// if there are two placeholders, than the two characters before it\n\t\t\t// represent one byte\n\t\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t\t// this is just a cheap hack to not do indexOf twice\n\t\t\tvar len = b64.length\n\t\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\t\n\t\t\t// base64 is 4/3 + up to two characters of the original data\n\t\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\t\n\t\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\t\n\t\t\tvar L = 0\n\t\n\t\t\tfunction push (v) {\n\t\t\t\tarr[L++] = v\n\t\t\t}\n\t\n\t\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t}\n\t\n\t\t\tif (placeHolders === 2) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t} else if (placeHolders === 1) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t}\n\t\n\t\t\treturn arr\n\t\t}\n\t\n\t\tfunction uint8ToBase64 (uint8) {\n\t\t\tvar i,\n\t\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\t\toutput = \"\",\n\t\t\t\ttemp, length\n\t\n\t\t\tfunction encode (num) {\n\t\t\t\treturn lookup.charAt(num)\n\t\t\t}\n\t\n\t\t\tfunction tripletToBase64 (num) {\n\t\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t\t}\n\t\n\t\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\t\toutput += tripletToBase64(temp)\n\t\t\t}\n\t\n\t\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\t\tswitch (extraBytes) {\n\t\t\t\tcase 1:\n\t\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\t\toutput += '=='\n\t\t\t\t\tbreak\n\t\t\t\tcase 2:\n\t\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\t\toutput += '='\n\t\t\t\t\tbreak\n\t\t\t}\n\t\n\t\t\treturn output\n\t\t}\n\t\n\t\texports.toByteArray = b64ToByteArray\n\t\texports.fromByteArray = uint8ToBase64\n\t}( false ? (this.base64js = {}) : exports))\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\texports.read = function (buffer, offset, isLE, mLen, nBytes) {\n\t  var e, m\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var nBits = -7\n\t  var i = isLE ? (nBytes - 1) : 0\n\t  var d = isLE ? -1 : 1\n\t  var s = buffer[offset + i]\n\t\n\t  i += d\n\t\n\t  e = s & ((1 << (-nBits)) - 1)\n\t  s >>= (-nBits)\n\t  nBits += eLen\n\t  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  m = e & ((1 << (-nBits)) - 1)\n\t  e >>= (-nBits)\n\t  nBits += mLen\n\t  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  if (e === 0) {\n\t    e = 1 - eBias\n\t  } else if (e === eMax) {\n\t    return m ? NaN : ((s ? -1 : 1) * Infinity)\n\t  } else {\n\t    m = m + Math.pow(2, mLen)\n\t    e = e - eBias\n\t  }\n\t  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n\t}\n\t\n\texports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n\t  var e, m, c\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n\t  var i = isLE ? 0 : (nBytes - 1)\n\t  var d = isLE ? 1 : -1\n\t  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\t\n\t  value = Math.abs(value)\n\t\n\t  if (isNaN(value) || value === Infinity) {\n\t    m = isNaN(value) ? 1 : 0\n\t    e = eMax\n\t  } else {\n\t    e = Math.floor(Math.log(value) / Math.LN2)\n\t    if (value * (c = Math.pow(2, -e)) < 1) {\n\t      e--\n\t      c *= 2\n\t    }\n\t    if (e + eBias >= 1) {\n\t      value += rt / c\n\t    } else {\n\t      value += rt * Math.pow(2, 1 - eBias)\n\t    }\n\t    if (value * c >= 2) {\n\t      e++\n\t      c /= 2\n\t    }\n\t\n\t    if (e + eBias >= eMax) {\n\t      m = 0\n\t      e = eMax\n\t    } else if (e + eBias >= 1) {\n\t      m = (value * c - 1) * Math.pow(2, mLen)\n\t      e = e + eBias\n\t    } else {\n\t      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n\t      e = 0\n\t    }\n\t  }\n\t\n\t  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\t\n\t  e = (e << mLen) | m\n\t  eLen += mLen\n\t  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\t\n\t  buffer[offset + i - d] |= s * 128\n\t}\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\tvar toString = {}.toString;\n\t\n\tmodule.exports = Array.isArray || function (arr) {\n\t  return toString.call(arr) == '[object Array]';\n\t};\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _UrlUtility = __webpack_require__(19);\n\t\n\tvar _UrlUtility2 = _interopRequireDefault(_UrlUtility);\n\t\n\tvar _SigninState = __webpack_require__(20);\n\t\n\tvar _SigninState2 = _interopRequireDefault(_SigninState);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar SigninRequest = function () {\n\t    function SigninRequest(_ref) {\n\t        var\n\t        // mandatory\n\t        url = _ref.url;\n\t        var client_id = _ref.client_id;\n\t        var redirect_uri = _ref.redirect_uri;\n\t        var response_type = _ref.response_type;\n\t        var scope = _ref.scope;\n\t        var authority = _ref.authority;\n\t        var\n\t        // optional\n\t        data = _ref.data;\n\t        var prompt = _ref.prompt;\n\t        var display = _ref.display;\n\t        var max_age = _ref.max_age;\n\t        var ui_locales = _ref.ui_locales;\n\t        var id_token_hint = _ref.id_token_hint;\n\t        var login_hint = _ref.login_hint;\n\t        var acr_values = _ref.acr_values;\n\t\n\t        _classCallCheck(this, SigninRequest);\n\t\n\t        if (!url) {\n\t            _Log2.default.error(\"No url passed to SigninRequest\");\n\t            throw new Error(\"url\");\n\t        }\n\t        if (!client_id) {\n\t            _Log2.default.error(\"No client_id passed to SigninRequest\");\n\t            throw new Error(\"client_id\");\n\t        }\n\t        if (!redirect_uri) {\n\t            _Log2.default.error(\"No redirect_uri passed to SigninRequest\");\n\t            throw new Error(\"redirect_uri\");\n\t        }\n\t        if (!response_type) {\n\t            _Log2.default.error(\"No response_type passed to SigninRequest\");\n\t            throw new Error(\"response_type\");\n\t        }\n\t        if (!scope) {\n\t            _Log2.default.error(\"No scope passed to SigninRequest\");\n\t            throw new Error(\"scope\");\n\t        }\n\t        if (!authority) {\n\t            _Log2.default.error(\"No authority passed to SigninRequest\");\n\t            throw new Error(\"authority\");\n\t        }\n\t\n\t        var oidc = SigninRequest.isOidc(response_type);\n\t        this.state = new _SigninState2.default({ nonce: oidc, data: data, client_id: client_id, authority: authority });\n\t\n\t        url = _UrlUtility2.default.addQueryParam(url, \"client_id\", client_id);\n\t        url = _UrlUtility2.default.addQueryParam(url, \"redirect_uri\", redirect_uri);\n\t        url = _UrlUtility2.default.addQueryParam(url, \"response_type\", response_type);\n\t        url = _UrlUtility2.default.addQueryParam(url, \"scope\", scope);\n\t\n\t        url = _UrlUtility2.default.addQueryParam(url, \"state\", this.state.id);\n\t        if (oidc) {\n\t            url = _UrlUtility2.default.addQueryParam(url, \"nonce\", this.state.nonce);\n\t        }\n\t\n\t        var optional = { prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values };\n\t        for (var key in optional) {\n\t            if (optional[key]) {\n\t                url = _UrlUtility2.default.addQueryParam(url, key, optional[key]);\n\t            }\n\t        }\n\t\n\t        this.url = url;\n\t    }\n\t\n\t    SigninRequest.isOidc = function isOidc(response_type) {\n\t        var result = response_type.split(/\\s+/g).filter(function (item) {\n\t            return item === \"id_token\";\n\t        });\n\t        return !!result[0];\n\t    };\n\t\n\t    SigninRequest.isOAuth = function isOAuth(response_type) {\n\t        var result = response_type.split(/\\s+/g).filter(function (item) {\n\t            return item === \"token\";\n\t        });\n\t        return !!result[0];\n\t    };\n\t\n\t    return SigninRequest;\n\t}();\n\t\n\texports.default = SigninRequest;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _Global = __webpack_require__(5);\n\t\n\tvar _Global2 = _interopRequireDefault(_Global);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar UrlUtility = function () {\n\t    function UrlUtility() {\n\t        _classCallCheck(this, UrlUtility);\n\t    }\n\t\n\t    UrlUtility.addQueryParam = function addQueryParam(url, name, value) {\n\t        if (url.indexOf('?') < 0) {\n\t            url += \"?\";\n\t        }\n\t\n\t        if (url[url.length - 1] !== \"?\") {\n\t            url += \"&\";\n\t        }\n\t\n\t        url += encodeURIComponent(name);\n\t        url += \"=\";\n\t        url += encodeURIComponent(value);\n\t\n\t        return url;\n\t    };\n\t\n\t    UrlUtility.parseUrlFragment = function parseUrlFragment(value) {\n\t        var delimiter = arguments.length <= 1 || arguments[1] === undefined ? \"#\" : arguments[1];\n\t        var global = arguments.length <= 2 || arguments[2] === undefined ? _Global2.default : arguments[2];\n\t\n\t        _Log2.default.info(\"UrlUtility.parseUrlFragment\");\n\t\n\t        if (typeof value !== 'string') {\n\t            value = global.location.href;\n\t        }\n\t\n\t        var idx = value.lastIndexOf(delimiter);\n\t        if (idx >= 0) {\n\t            value = value.substr(idx + 1);\n\t        }\n\t\n\t        var params = {},\n\t            regex = /([^&=]+)=([^&]*)/g,\n\t            m;\n\t\n\t        var counter = 0;\n\t        while (m = regex.exec(value)) {\n\t            params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n\t            if (counter++ > 50) {\n\t                _Log2.default.error(\"response exceeded expected number of parameters\", value);\n\t                return {\n\t                    error: \"Response exceeded expected number of parameters\"\n\t                };\n\t            }\n\t        }\n\t\n\t        for (var prop in params) {\n\t            return params;\n\t        }\n\t\n\t        return {};\n\t    };\n\t\n\t    return UrlUtility;\n\t}();\n\t\n\texports.default = UrlUtility;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _State2 = __webpack_require__(21);\n\t\n\tvar _State3 = _interopRequireDefault(_State2);\n\t\n\tvar _random = __webpack_require__(22);\n\t\n\tvar _random2 = _interopRequireDefault(_random);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar SigninState = function (_State) {\n\t    _inherits(SigninState, _State);\n\t\n\t    function SigninState() {\n\t        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        var nonce = _ref.nonce;\n\t        var authority = _ref.authority;\n\t        var client_id = _ref.client_id;\n\t\n\t        _classCallCheck(this, SigninState);\n\t\n\t        var _this = _possibleConstructorReturn(this, _State.call(this, arguments[0]));\n\t\n\t        if (nonce === true) {\n\t            _this._nonce = (0, _random2.default)();\n\t        } else if (nonce) {\n\t            _this._nonce = nonce;\n\t        }\n\t\n\t        _this._authority = authority;\n\t        _this._client_id = client_id;\n\t        return _this;\n\t    }\n\t\n\t    SigninState.prototype.toStorageString = function toStorageString() {\n\t        _Log2.default.info(\"SigninState.toStorageString\");\n\t        return JSON.stringify({\n\t            id: this.id,\n\t            data: this.data,\n\t            created: this.created,\n\t            nonce: this.nonce,\n\t            authority: this.authority,\n\t            client_id: this.client_id\n\t        });\n\t    };\n\t\n\t    SigninState.fromStorageString = function fromStorageString(storageString) {\n\t        _Log2.default.info(\"SigninState.fromStorageString\");\n\t        var data = JSON.parse(storageString);\n\t        return new SigninState(data);\n\t    };\n\t\n\t    _createClass(SigninState, [{\n\t        key: 'nonce',\n\t        get: function get() {\n\t            return this._nonce;\n\t        }\n\t    }, {\n\t        key: 'authority',\n\t        get: function get() {\n\t            return this._authority;\n\t        }\n\t    }, {\n\t        key: 'client_id',\n\t        get: function get() {\n\t            return this._client_id;\n\t        }\n\t    }]);\n\t\n\t    return SigninState;\n\t}(_State3.default);\n\t\n\texports.default = SigninState;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _random = __webpack_require__(22);\n\t\n\tvar _random2 = _interopRequireDefault(_random);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar State = function () {\n\t    function State() {\n\t        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        var id = _ref.id;\n\t        var data = _ref.data;\n\t        var created = _ref.created;\n\t\n\t        _classCallCheck(this, State);\n\t\n\t        this._id = id || (0, _random2.default)();\n\t        this._data = data;\n\t\n\t        if (typeof created === 'number' && created > 0) {\n\t            this._created = created;\n\t        } else {\n\t            this._created = parseInt(Date.now() / 1000);\n\t        }\n\t    }\n\t\n\t    State.prototype.toStorageString = function toStorageString() {\n\t        _Log2.default.info(\"State.toStorageString\");\n\t        return JSON.stringify({\n\t            id: this.id,\n\t            data: this.data,\n\t            created: this.created\n\t        });\n\t    };\n\t\n\t    State.fromStorageString = function fromStorageString(storageString) {\n\t        _Log2.default.info(\"State.fromStorageString\");\n\t        return new State(JSON.parse(storageString));\n\t    };\n\t\n\t    State.clearStaleState = function clearStaleState(storage, age) {\n\t        _Log2.default.info(\"State.clearStaleState\");\n\t\n\t        var cutoff = Date.now() / 1000 - age;\n\t\n\t        return storage.getAllKeys().then(function (keys) {\n\t            _Log2.default.info(\"got keys\", keys);\n\t\n\t            var promises = [];\n\t            var _iteratorNormalCompletion = true;\n\t            var _didIteratorError = false;\n\t            var _iteratorError = undefined;\n\t\n\t            try {\n\t                var _loop = function _loop() {\n\t                    var key = _step.value;\n\t                    p = storage.get(key).then(function (item) {\n\t                        var remove = false;\n\t\n\t                        if (item) {\n\t                            try {\n\t                                var state = State.fromStorageString(item);\n\t\n\t                                _Log2.default.info(\"got item from key: \", key, state.created);\n\t\n\t                                if (state.created <= cutoff) {\n\t                                    remove = true;\n\t                                }\n\t                            } catch (e) {\n\t                                _Log2.default.error(\"Error parsing state for key\", key, e.message);\n\t                                remove = true;\n\t                            }\n\t                        } else {\n\t                            _Log2.default.info(\"no item in storage for key: \", key);\n\t                            remove = true;\n\t                        }\n\t\n\t                        if (remove) {\n\t                            _Log2.default.info(\"removed item for key: \", key);\n\t                            return storage.remove(key);\n\t                        }\n\t                    });\n\t\n\t\n\t                    promises.push(p);\n\t                };\n\t\n\t                for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t                    var p;\n\t\n\t                    _loop();\n\t                }\n\t            } catch (err) {\n\t                _didIteratorError = true;\n\t                _iteratorError = err;\n\t            } finally {\n\t                try {\n\t                    if (!_iteratorNormalCompletion && _iterator.return) {\n\t                        _iterator.return();\n\t                    }\n\t                } finally {\n\t                    if (_didIteratorError) {\n\t                        throw _iteratorError;\n\t                    }\n\t                }\n\t            }\n\t\n\t            _Log2.default.info(\"waiting on promise count:\", promises.length);\n\t            return Promise.all(promises);\n\t        });\n\t    };\n\t\n\t    _createClass(State, [{\n\t        key: 'id',\n\t        get: function get() {\n\t            return this._id;\n\t        }\n\t    }, {\n\t        key: 'data',\n\t        get: function get() {\n\t            return this._data;\n\t        }\n\t    }, {\n\t        key: 'created',\n\t        get: function get() {\n\t            return this._created;\n\t        }\n\t    }]);\n\t\n\t    return State;\n\t}();\n\t\n\texports.default = State;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = random;\n\t//----------------------------------------------------------------------\n\t// AdalJS v1.0.8\n\t// @preserve Copyright (c) Microsoft Open Technologies, Inc.\n\t// All Rights Reserved\n\t// Apache License 2.0\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t//----------------------------------------------------------------------\n\t// NOTICE: the code in this file originally developed by Microsoft\n\t// original source: https://github.com/AzureAD/azure-activedirectory-library-for-js/blob/master/lib/adal.js#L1029\n\t\n\tfunction random() {\n\t    var guidHolder = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx';\n\t    var hex = '0123456789abcdef';\n\t    var r = 0;\n\t    var guidResponse = \"\";\n\t    for (var i = 0; i < guidHolder.length; i++) {\n\t        if (guidHolder[i] !== '-' && guidHolder[i] !== '4') {\n\t            // each x and y needs to be random\n\t            r = Math.random() * 16 | 0;\n\t        }\n\t\n\t        if (guidHolder[i] === 'x') {\n\t            guidResponse += hex[r];\n\t        } else if (guidHolder[i] === 'y') {\n\t            // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n\t            r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n\t            r |= 0x8; // set pos 3 to 1 as 1???\n\t            guidResponse += hex[r];\n\t        } else {\n\t            guidResponse += guidHolder[i];\n\t        }\n\t    }\n\t    return guidResponse;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar _UrlUtility = __webpack_require__(19);\n\t\n\tvar _UrlUtility2 = _interopRequireDefault(_UrlUtility);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar OidcScope = \"openid\";\n\t\n\tvar SigninResponse = function () {\n\t    function SigninResponse(url) {\n\t        _classCallCheck(this, SigninResponse);\n\t\n\t        var values = _UrlUtility2.default.parseUrlFragment(url, \"#\");\n\t\n\t        this.error = values.error;\n\t        this.error_description = values.error_description;\n\t        this.error_uri = values.error_uri;\n\t\n\t        this.state = values.state;\n\t        this.id_token = values.id_token;\n\t        this.session_state = values.session_state;\n\t        this.access_token = values.access_token;\n\t        this.token_type = values.token_type;\n\t        this.scope = values.scope;\n\t        this.profile = undefined; // will be set from ResponseValidator\n\t\n\t        var expires_in = parseInt(values.expires_in);\n\t        if (typeof expires_in === 'number' && expires_in > 0) {\n\t            var now = parseInt(Date.now() / 1000);\n\t            this.expires_at = now + expires_in;\n\t        }\n\t    }\n\t\n\t    _createClass(SigninResponse, [{\n\t        key: \"expires_in\",\n\t        get: function get() {\n\t            if (this.expires_at) {\n\t                var now = parseInt(Date.now() / 1000);\n\t                return this.expires_at - now;\n\t            }\n\t            return undefined;\n\t        }\n\t    }, {\n\t        key: \"expired\",\n\t        get: function get() {\n\t            var expires_in = this.expires_in;\n\t            if (expires_in !== undefined) {\n\t                return expires_in <= 0;\n\t            }\n\t            return undefined;\n\t        }\n\t    }, {\n\t        key: \"scopes\",\n\t        get: function get() {\n\t            return (this.scope || \"\").split(\" \");\n\t        }\n\t    }, {\n\t        key: \"isOpenIdConnect\",\n\t        get: function get() {\n\t            return this.scopes.indexOf(OidcScope) >= 0;\n\t        }\n\t    }]);\n\t\n\t    return SigninResponse;\n\t}();\n\t\n\texports.default = SigninResponse;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _UrlUtility = __webpack_require__(19);\n\t\n\tvar _UrlUtility2 = _interopRequireDefault(_UrlUtility);\n\t\n\tvar _State = __webpack_require__(21);\n\t\n\tvar _State2 = _interopRequireDefault(_State);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar SignoutRequest = function SignoutRequest(_ref) {\n\t    var url = _ref.url;\n\t    var id_token_hint = _ref.id_token_hint;\n\t    var post_logout_redirect_uri = _ref.post_logout_redirect_uri;\n\t    var data = _ref.data;\n\t\n\t    _classCallCheck(this, SignoutRequest);\n\t\n\t    if (!url) {\n\t        _Log2.default.error(\"No url passed to SignoutRequest\");\n\t        throw new Error(\"url\");\n\t    }\n\t\n\t    if (id_token_hint) {\n\t        url = _UrlUtility2.default.addQueryParam(url, \"id_token_hint\", id_token_hint);\n\t\n\t        if (post_logout_redirect_uri) {\n\t            url = _UrlUtility2.default.addQueryParam(url, \"post_logout_redirect_uri\", post_logout_redirect_uri);\n\t\n\t            if (data) {\n\t                this.state = new _State2.default({ data: data });\n\t\n\t                url = _UrlUtility2.default.addQueryParam(url, \"state\", this.state.id);\n\t            }\n\t        }\n\t    }\n\t\n\t    this.url = url;\n\t};\n\t\n\texports.default = SignoutRequest;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _UrlUtility = __webpack_require__(19);\n\t\n\tvar _UrlUtility2 = _interopRequireDefault(_UrlUtility);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar SignoutResponse = function SignoutResponse(url) {\n\t    _classCallCheck(this, SignoutResponse);\n\t\n\t    var values = _UrlUtility2.default.parseUrlFragment(url, \"?\");\n\t\n\t    this.error = values.error;\n\t    this.error_description = values.error_description;\n\t    this.error_uri = values.error_uri;\n\t\n\t    this.state = values.state;\n\t};\n\t\n\texports.default = SignoutResponse;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar InMemoryWebStorage = function () {\n\t    function InMemoryWebStorage() {\n\t        _classCallCheck(this, InMemoryWebStorage);\n\t\n\t        this._data = {};\n\t    }\n\t\n\t    InMemoryWebStorage.prototype.getItem = function getItem(key) {\n\t        _Log2.default.info(\"InMemoryWebStorage.getItem\", key);\n\t        return this._data[key];\n\t    };\n\t\n\t    InMemoryWebStorage.prototype.setItem = function setItem(key, value) {\n\t        _Log2.default.info(\"InMemoryWebStorage.setItem\", key);\n\t        this._data[key] = value;\n\t    };\n\t\n\t    InMemoryWebStorage.prototype.removeItem = function removeItem(key) {\n\t        _Log2.default.info(\"InMemoryWebStorage.removeItem\", key);\n\t        delete this._data[key];\n\t    };\n\t\n\t    InMemoryWebStorage.prototype.key = function key(index) {\n\t        return Object.getOwnPropertyNames(this._data)[index];\n\t    };\n\t\n\t    _createClass(InMemoryWebStorage, [{\n\t        key: \"length\",\n\t        get: function get() {\n\t            return Object.getOwnPropertyNames(this._data).length;\n\t        }\n\t    }]);\n\t\n\t    return InMemoryWebStorage;\n\t}();\n\t\n\texports.default = InMemoryWebStorage;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _OidcClient2 = __webpack_require__(2);\n\t\n\tvar _OidcClient3 = _interopRequireDefault(_OidcClient2);\n\t\n\tvar _UserManagerSettings = __webpack_require__(28);\n\t\n\tvar _UserManagerSettings2 = _interopRequireDefault(_UserManagerSettings);\n\t\n\tvar _User = __webpack_require__(34);\n\t\n\tvar _User2 = _interopRequireDefault(_User);\n\t\n\tvar _UserManagerEvents = __webpack_require__(35);\n\t\n\tvar _UserManagerEvents2 = _interopRequireDefault(_UserManagerEvents);\n\t\n\tvar _SilentRenewService = __webpack_require__(39);\n\t\n\tvar _SilentRenewService2 = _interopRequireDefault(_SilentRenewService);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar UserManager = function (_OidcClient) {\n\t    _inherits(UserManager, _OidcClient);\n\t\n\t    function UserManager() {\n\t        var settings = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        _classCallCheck(this, UserManager);\n\t\n\t        if (!(settings instanceof _UserManagerSettings2.default)) {\n\t            settings = new _UserManagerSettings2.default(settings);\n\t        }\n\t\n\t        var _this = _possibleConstructorReturn(this, _OidcClient.call(this, settings));\n\t\n\t        _this._events = new _UserManagerEvents2.default(settings);\n\t\n\t        if (_this.settings.automaticSilentRenew) {\n\t            _Log2.default.info(\"automaticSilentRenew is configured, setting up silent renew\");\n\t            _this._silentRenewService = new _SilentRenewService2.default(_this);\n\t        }\n\t        return _this;\n\t    }\n\t\n\t    UserManager.prototype.getUser = function getUser() {\n\t        _Log2.default.info(\"UserManager.getUser\");\n\t\n\t        return this._loadUser().then(function (user) {\n\t            if (user) {\n\t                _Log2.default.info(\"user loaded\");\n\t                return user;\n\t            } else {\n\t                _Log2.default.info(\"user not found in storage\");\n\t                return null;\n\t            }\n\t        });\n\t    };\n\t\n\t    UserManager.prototype.removeUser = function removeUser() {\n\t        var _this2 = this;\n\t\n\t        _Log2.default.info(\"UserManager.removeUser\");\n\t\n\t        return this._storeUser(null).then(function () {\n\t            _Log2.default.info(\"user removed from storage\");\n\t\n\t            _this2._events.unload();\n\t        });\n\t    };\n\t\n\t    UserManager.prototype.signinPopup = function signinPopup() {\n\t        var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        _Log2.default.info(\"UserManager.signinPopup\");\n\t\n\t        var url = args.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;\n\t        if (!url) {\n\t            _Log2.default.error(\"No popup_redirect_uri or redirect_uri configured\");\n\t            return Promise.reject(new Error(\"No popup_redirect_uri or redirect_uri configured\"));\n\t        }\n\t\n\t        args.redirect_uri = url;\n\t        args.display = \"popup\";\n\t\n\t        return this._signin(args, this._popupNavigator, {\n\t            startUrl: url,\n\t            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,\n\t            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget\n\t        });\n\t    };\n\t\n\t    UserManager.prototype.signinPopupCallback = function signinPopupCallback(url) {\n\t        _Log2.default.info(\"UserManager.signinPopupCallback\");\n\t        return this._signinCallback(url, this._popupNavigator);\n\t    };\n\t\n\t    UserManager.prototype.signinSilent = function signinSilent() {\n\t        var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        _Log2.default.info(\"UserManager.signinSilent\");\n\t\n\t        var url = args.redirect_uri || this.settings.silent_redirect_uri;\n\t        if (!url) {\n\t            _Log2.default.error(\"No silent_redirect_uri configured\");\n\t            return Promise.reject(new Error(\"No silent_redirect_uri configured\"));\n\t        }\n\t\n\t        args.redirect_uri = url;\n\t        args.prompt = \"none\";\n\t\n\t        return this._signin(args, this._iframeNavigator);\n\t    };\n\t\n\t    UserManager.prototype.signinSilentCallback = function signinSilentCallback(url) {\n\t        _Log2.default.info(\"UserManager.signinSilentCallback\");\n\t        return this._signinCallback(url, this._iframeNavigator);\n\t    };\n\t\n\t    UserManager.prototype._signin = function _signin(args, navigator) {\n\t        var _this3 = this;\n\t\n\t        var navigatorParams = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t        _Log2.default.info(\"_signin\");\n\t        return this._signinStart(args, navigator, navigatorParams).then(function (navResponse) {\n\t            return _this3._signinEnd(navResponse.url);\n\t        });\n\t    };\n\t\n\t    UserManager.prototype._signinCallback = function _signinCallback(url, navigator) {\n\t        _Log2.default.info(\"_signinCallback\");\n\t        return navigator.callback(url);\n\t    };\n\t\n\t    UserManager.prototype._signout = function _signout(args, navigator) {\n\t        var _this4 = this;\n\t\n\t        var navigatorParams = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t        _Log2.default.info(\"_signout\");\n\t        return this._signoutStart(args, navigator, navigatorParams).then(function (navResponse) {\n\t            return _this4._signoutEnd(navResponse.url);\n\t        });\n\t    };\n\t\n\t    UserManager.prototype._signoutCallback = function _signoutCallback(url, navigator) {\n\t        _Log2.default.info(\"_signoutCallback\");\n\t        return navigator.callback(url);\n\t    };\n\t\n\t    UserManager.prototype.signinRedirect = function signinRedirect(args) {\n\t        _Log2.default.info(\"UserManager.signinRedirect\");\n\t        return this._signinStart(args, this._redirectNavigator);\n\t    };\n\t\n\t    UserManager.prototype.signinRedirectCallback = function signinRedirectCallback(url) {\n\t        _Log2.default.info(\"UserManager.signinRedirectCallback\");\n\t        return this._signinEnd(url || this._redirectNavigator.url);\n\t    };\n\t\n\t    UserManager.prototype.signoutRedirect = function signoutRedirect(args) {\n\t        _Log2.default.info(\"UserManager.signoutRedirect\");\n\t        return this._signoutStart(args, this._redirectNavigator);\n\t    };\n\t\n\t    UserManager.prototype.signoutRedirectCallback = function signoutRedirectCallback(url) {\n\t        _Log2.default.info(\"UserManager.signoutRedirectCallback\");\n\t        return this._signoutEnd(url || this._redirectNavigator.url);\n\t    };\n\t\n\t    UserManager.prototype._signinStart = function _signinStart(args, navigator) {\n\t        var _this5 = this;\n\t\n\t        var navigatorParams = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t        _Log2.default.info(\"_signinStart\");\n\t\n\t        return navigator.prepare(navigatorParams).then(function (handle) {\n\t            _Log2.default.info(\"got navigator window handle\");\n\t\n\t            return _this5.createSigninRequest(args).then(function (signinRequest) {\n\t                _Log2.default.info(\"got signin request\");\n\t\n\t                navigatorParams.url = signinRequest.url;\n\t                return handle.navigate(navigatorParams);\n\t            });\n\t        });\n\t    };\n\t\n\t    UserManager.prototype._signinEnd = function _signinEnd(url) {\n\t        var _this6 = this;\n\t\n\t        _Log2.default.info(\"_signinEnd\");\n\t\n\t        return this.processSigninResponse(url).then(function (signinResponse) {\n\t            _Log2.default.info(\"got signin response\");\n\t\n\t            var user = new _User2.default(signinResponse);\n\t\n\t            return _this6._storeUser(user).then(function () {\n\t                _Log2.default.info(\"user stored\");\n\t\n\t                _this6._events.load(user);\n\t\n\t                return user;\n\t            });\n\t        });\n\t    };\n\t\n\t    UserManager.prototype._signoutStart = function _signoutStart() {\n\t        var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        var _this7 = this;\n\t\n\t        var navigator = arguments[1];\n\t        var navigatorParams = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t        _Log2.default.info(\"_signoutStart\");\n\t\n\t        return navigator.prepare(navigatorParams).then(function (handle) {\n\t            _Log2.default.info(\"got navigator window handle\");\n\t\n\t            return _this7.getUser().then(function (user) {\n\t                _Log2.default.info(\"loaded current user from storage\");\n\t\n\t                var id_token = args.id_token_hint || user && user.id_token;\n\t                if (id_token) {\n\t                    _Log2.default.info(\"Setting id_token into signout request\");\n\t                    args.id_token_hint = id_token;\n\t                }\n\t\n\t                return _this7.removeUser().then(function () {\n\t                    _Log2.default.info(\"user removed, creating signout request\");\n\t\n\t                    return _this7.createSignoutRequest(args).then(function (signoutRequest) {\n\t                        _Log2.default.info(\"got signout request\");\n\t\n\t                        navigatorParams.url = signoutRequest.url;\n\t                        return handle.navigate(navigatorParams);\n\t                    });\n\t                });\n\t            });\n\t        });\n\t    };\n\t\n\t    UserManager.prototype._signoutEnd = function _signoutEnd(url) {\n\t        _Log2.default.info(\"_signoutEnd\");\n\t\n\t        return this.processSignoutResponse(url).then(function (signoutResponse) {\n\t            _Log2.default.info(\"got signout response\");\n\t\n\t            return signoutResponse;\n\t        });\n\t    };\n\t\n\t    UserManager.prototype._loadUser = function _loadUser() {\n\t        _Log2.default.info(\"_loadUser\");\n\t\n\t        return this._userStore.get(this._userStoreKey).then(function (storageString) {\n\t            if (storageString) {\n\t                _Log2.default.info(\"user storageString loaded\");\n\t                return _User2.default.fromStorageString(storageString);\n\t            }\n\t\n\t            _Log2.default.info(\"no user storageString\");\n\t            return null;\n\t        });\n\t    };\n\t\n\t    UserManager.prototype._storeUser = function _storeUser(user) {\n\t        if (user) {\n\t            _Log2.default.info(\"_storeUser storing user\");\n\t\n\t            var storageString = user.toStorageString();\n\t            return this._userStore.set(this._userStoreKey, storageString);\n\t        } else {\n\t            _Log2.default.info(\"_storeUser removing user storage\");\n\t            return this._userStore.remove(this._userStoreKey);\n\t        }\n\t    };\n\t\n\t    _createClass(UserManager, [{\n\t        key: '_redirectNavigator',\n\t        get: function get() {\n\t            return this.settings.redirectNavigator;\n\t        }\n\t    }, {\n\t        key: '_popupNavigator',\n\t        get: function get() {\n\t            return this.settings.popupNavigator;\n\t        }\n\t    }, {\n\t        key: '_iframeNavigator',\n\t        get: function get() {\n\t            return this.settings.iframeNavigator;\n\t        }\n\t    }, {\n\t        key: '_userStore',\n\t        get: function get() {\n\t            return this.settings.userStore;\n\t        }\n\t    }, {\n\t        key: 'events',\n\t        get: function get() {\n\t            return this._events;\n\t        }\n\t    }, {\n\t        key: '_userStoreKey',\n\t        get: function get() {\n\t            return 'user:' + this.settings.authority + ':' + this.settings.client_id;\n\t        }\n\t    }]);\n\t\n\t    return UserManager;\n\t}(_OidcClient3.default);\n\t\n\texports.default = UserManager;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _OidcClientSettings2 = __webpack_require__(3);\n\t\n\tvar _OidcClientSettings3 = _interopRequireDefault(_OidcClientSettings2);\n\t\n\tvar _RedirectNavigator = __webpack_require__(29);\n\t\n\tvar _RedirectNavigator2 = _interopRequireDefault(_RedirectNavigator);\n\t\n\tvar _PopupNavigator = __webpack_require__(30);\n\t\n\tvar _PopupNavigator2 = _interopRequireDefault(_PopupNavigator);\n\t\n\tvar _IFrameNavigator = __webpack_require__(32);\n\t\n\tvar _IFrameNavigator2 = _interopRequireDefault(_IFrameNavigator);\n\t\n\tvar _WebStorageStateStore = __webpack_require__(4);\n\t\n\tvar _WebStorageStateStore2 = _interopRequireDefault(_WebStorageStateStore);\n\t\n\tvar _Global = __webpack_require__(5);\n\t\n\tvar _Global2 = _interopRequireDefault(_Global);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar DefaultAccessTokenExpiringNotificationTime = 60;\n\t\n\tvar UserManagerSettings = function (_OidcClientSettings) {\n\t    _inherits(UserManagerSettings, _OidcClientSettings);\n\t\n\t    function UserManagerSettings() {\n\t        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        var popup_redirect_uri = _ref.popup_redirect_uri;\n\t        var popupWindowFeatures = _ref.popupWindowFeatures;\n\t        var popupWindowTarget = _ref.popupWindowTarget;\n\t        var silent_redirect_uri = _ref.silent_redirect_uri;\n\t        var _ref$automaticSilentR = _ref.automaticSilentRenew;\n\t        var automaticSilentRenew = _ref$automaticSilentR === undefined ? false : _ref$automaticSilentR;\n\t        var _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime;\n\t        var accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir;\n\t        var _ref$redirectNavigato = _ref.redirectNavigator;\n\t        var redirectNavigator = _ref$redirectNavigato === undefined ? new _RedirectNavigator2.default() : _ref$redirectNavigato;\n\t        var _ref$popupNavigator = _ref.popupNavigator;\n\t        var popupNavigator = _ref$popupNavigator === undefined ? new _PopupNavigator2.default() : _ref$popupNavigator;\n\t        var _ref$iframeNavigator = _ref.iframeNavigator;\n\t        var iframeNavigator = _ref$iframeNavigator === undefined ? new _IFrameNavigator2.default() : _ref$iframeNavigator;\n\t        var _ref$userStore = _ref.userStore;\n\t        var userStore = _ref$userStore === undefined ? new _WebStorageStateStore2.default({ store: _Global2.default.sessionStorage }) : _ref$userStore;\n\t\n\t        _classCallCheck(this, UserManagerSettings);\n\t\n\t        var _this = _possibleConstructorReturn(this, _OidcClientSettings.call(this, arguments[0]));\n\t\n\t        _this._popup_redirect_uri = popup_redirect_uri;\n\t        _this._popupWindowFeatures = popupWindowFeatures;\n\t        _this._popupWindowTarget = popupWindowTarget;\n\t\n\t        _this._silent_redirect_uri = silent_redirect_uri;\n\t        _this._automaticSilentRenew = !!automaticSilentRenew;\n\t        _this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;\n\t\n\t        _this._redirectNavigator = redirectNavigator;\n\t        _this._popupNavigator = popupNavigator;\n\t        _this._iframeNavigator = iframeNavigator;\n\t\n\t        _this._userStore = userStore;\n\t        return _this;\n\t    }\n\t\n\t    _createClass(UserManagerSettings, [{\n\t        key: 'popup_redirect_uri',\n\t        get: function get() {\n\t            return this._popup_redirect_uri;\n\t        }\n\t    }, {\n\t        key: 'popupWindowFeatures',\n\t        get: function get() {\n\t            return this._popupWindowFeatures;\n\t        }\n\t    }, {\n\t        key: 'popupWindowTarget',\n\t        get: function get() {\n\t            return this._popupWindowTarget;\n\t        }\n\t    }, {\n\t        key: 'silent_redirect_uri',\n\t        get: function get() {\n\t            return this._silent_redirect_uri;\n\t        }\n\t    }, {\n\t        key: 'automaticSilentRenew',\n\t        get: function get() {\n\t            return !!(this.silent_redirect_uri && this._automaticSilentRenew);\n\t        }\n\t    }, {\n\t        key: 'accessTokenExpiringNotificationTime',\n\t        get: function get() {\n\t            return this._accessTokenExpiringNotificationTime;\n\t        }\n\t    }, {\n\t        key: 'redirectNavigator',\n\t        get: function get() {\n\t            return this._redirectNavigator;\n\t        }\n\t    }, {\n\t        key: 'popupNavigator',\n\t        get: function get() {\n\t            return this._popupNavigator;\n\t        }\n\t    }, {\n\t        key: 'iframeNavigator',\n\t        get: function get() {\n\t            return this._iframeNavigator;\n\t        }\n\t    }, {\n\t        key: 'userStore',\n\t        get: function get() {\n\t            return this._userStore;\n\t        }\n\t    }]);\n\t\n\t    return UserManagerSettings;\n\t}(_OidcClientSettings3.default);\n\t\n\texports.default = UserManagerSettings;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar RedirectNavigator = function () {\n\t    function RedirectNavigator() {\n\t        _classCallCheck(this, RedirectNavigator);\n\t    }\n\t\n\t    RedirectNavigator.prototype.prepare = function prepare() {\n\t        return Promise.resolve(this);\n\t    };\n\t\n\t    RedirectNavigator.prototype.navigate = function navigate(params) {\n\t        _Log2.default.info(\"RedirectNavigator.navigate\");\n\t\n\t        if (!params || !params.url) {\n\t            _Log2.default.error(\"No url provided\");\n\t            return Promise.reject(new Error(\"No url provided\"));\n\t        }\n\t\n\t        window.location = params.url;\n\t\n\t        return Promise.resolve();\n\t    };\n\t\n\t    _createClass(RedirectNavigator, [{\n\t        key: \"url\",\n\t        get: function get() {\n\t            _Log2.default.info(\"RedirectNavigator.url\");\n\t            return window.location.href;\n\t        }\n\t    }]);\n\t\n\t    return RedirectNavigator;\n\t}();\n\t\n\texports.default = RedirectNavigator;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _PopupWindow = __webpack_require__(31);\n\t\n\tvar _PopupWindow2 = _interopRequireDefault(_PopupWindow);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar PopupNavigator = function () {\n\t    function PopupNavigator() {\n\t        _classCallCheck(this, PopupNavigator);\n\t    }\n\t\n\t    PopupNavigator.prototype.prepare = function prepare(params) {\n\t        var popup = new _PopupWindow2.default(params);\n\t        return Promise.resolve(popup);\n\t    };\n\t\n\t    PopupNavigator.prototype.callback = function callback(url) {\n\t        _Log2.default.info(\"PopupNavigator.callback\");\n\t\n\t        try {\n\t            _PopupWindow2.default.notifyOpener(url);\n\t            return Promise.resolve();\n\t        } catch (e) {\n\t            return Promise.reject(e);\n\t        }\n\t    };\n\t\n\t    return PopupNavigator;\n\t}();\n\t\n\texports.default = PopupNavigator;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar CheckForPopupClosedInterval = 500;\n\tvar DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100';\n\tvar DefaultPopupTarget = \"_blank\";\n\t\n\tvar PopupWindow = function () {\n\t    function PopupWindow(params) {\n\t        var _this = this;\n\t\n\t        _classCallCheck(this, PopupWindow);\n\t\n\t        _Log2.default.info(\"PopupWindow.ctor\");\n\t\n\t        this._promise = new Promise(function (resolve, reject) {\n\t            _this._resolve = resolve;\n\t            _this._reject = reject;\n\t        });\n\t\n\t        this._boundMessageEvent = this._message.bind(this);\n\t        window.addEventListener(\"message\", this._boundMessageEvent, false);\n\t\n\t        var features = params.popupWindowFeatures || DefaultPopupFeatures;\n\t        var target = params.popupWindowTarget || DefaultPopupTarget;\n\t\n\t        this._popup = window.open('', target, features);\n\t        if (this._popup) {\n\t            _Log2.default.info(\"popup successfully created\");\n\t            this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), CheckForPopupClosedInterval);\n\t        }\n\t    }\n\t\n\t    PopupWindow.prototype.navigate = function navigate(params) {\n\t        _Log2.default.info(\"PopupWindow.navigate\");\n\t\n\t        if (!this._popup) {\n\t            this._error(\"Error opening popup window\");\n\t        } else if (!params || !params.url) {\n\t            this._error(\"No url provided\");\n\t        } else {\n\t            _Log2.default.info(\"Setting URL in popup\");\n\t\n\t            this._popup.focus();\n\t            this._popup.window.location = params.url;\n\t        }\n\t\n\t        return this.promise;\n\t    };\n\t\n\t    PopupWindow.prototype._success = function _success(data) {\n\t        this._cleanup();\n\t\n\t        _Log2.default.info(\"Successful response from popup window\");\n\t        this._resolve(data);\n\t    };\n\t\n\t    PopupWindow.prototype._error = function _error(message) {\n\t        this._cleanup();\n\t\n\t        _Log2.default.error(message);\n\t        this._reject(new Error(message));\n\t    };\n\t\n\t    PopupWindow.prototype._cleanup = function _cleanup() {\n\t        _Log2.default.info(\"PopupWindow._cleanup\");\n\t\n\t        window.removeEventListener(\"message\", this._boundMessageEvent, false);\n\t        window.clearInterval(this._checkForPopupClosedTimer);\n\t\n\t        this._checkForPopupClosedTimer = null;\n\t        this._boundMessageEventssage = null;\n\t\n\t        if (this._popup) {\n\t            this._popup.close();\n\t        }\n\t        this._popup = null;\n\t    };\n\t\n\t    PopupWindow.prototype._checkForPopupClosed = function _checkForPopupClosed() {\n\t        _Log2.default.info(\"PopupWindow._checkForPopupClosed\");\n\t\n\t        if (!this._popup || this._popup.closed) {\n\t            this._error(\"Popup window closed\");\n\t        }\n\t    };\n\t\n\t    PopupWindow.prototype._message = function _message(e) {\n\t        _Log2.default.info(\"PopupWindow._message\");\n\t\n\t        if (e.origin === this._origin && e.source === this._popup.window) {\n\t            _Log2.default.info(\"processing message\");\n\t\n\t            var url = e.data || e.source.location.href; // for IE9\n\t\n\t            this._cleanup();\n\t\n\t            if (url) {\n\t                this._success({ url: url });\n\t            } else {\n\t                this._error(\"Invalid response from popup\");\n\t            }\n\t        }\n\t    };\n\t\n\t    PopupWindow.notifyOpener = function notifyOpener(url) {\n\t        _Log2.default.info(\"PopupWindow.notifyOpener\");\n\t\n\t        if (window.opener) {\n\t            url = url || window.location.href;\n\t            if (url) {\n\t                _Log2.default.info(\"posting url message to opener\");\n\t                window.opener.postMessage(url, location.protocol + \"//\" + location.host);\n\t            }\n\t        }\n\t    };\n\t\n\t    _createClass(PopupWindow, [{\n\t        key: 'promise',\n\t        get: function get() {\n\t            return this._promise;\n\t        }\n\t    }, {\n\t        key: '_origin',\n\t        get: function get() {\n\t            return location.protocol + \"//\" + location.host;\n\t        }\n\t    }]);\n\t\n\t    return PopupWindow;\n\t}();\n\t\n\texports.default = PopupWindow;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _IFrameWindow = __webpack_require__(33);\n\t\n\tvar _IFrameWindow2 = _interopRequireDefault(_IFrameWindow);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar IFrameNavigator = function () {\n\t    function IFrameNavigator() {\n\t        _classCallCheck(this, IFrameNavigator);\n\t    }\n\t\n\t    IFrameNavigator.prototype.prepare = function prepare() {\n\t        var frame = new _IFrameWindow2.default();\n\t        return Promise.resolve(frame);\n\t    };\n\t\n\t    IFrameNavigator.prototype.callback = function callback(url) {\n\t        _Log2.default.info(\"IFrameNavigator.callback\");\n\t\n\t        try {\n\t            _IFrameWindow2.default.notifyParent(url);\n\t            return Promise.resolve();\n\t        } catch (e) {\n\t            return Promise.reject(e);\n\t        }\n\t    };\n\t\n\t    return IFrameNavigator;\n\t}();\n\t\n\texports.default = IFrameNavigator;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar DefaultTimeout = 5000;\n\t\n\tvar IFrameWindow = function () {\n\t    function IFrameWindow() {\n\t        var _this = this;\n\t\n\t        _classCallCheck(this, IFrameWindow);\n\t\n\t        _Log2.default.info(\"IFrameWindow.ctor\");\n\t\n\t        this._promise = new Promise(function (resolve, reject) {\n\t            _this._resolve = resolve;\n\t            _this._reject = reject;\n\t        });\n\t\n\t        this._boundMessageEvent = this._message.bind(this);\n\t        window.addEventListener(\"message\", this._boundMessageEvent, false);\n\t\n\t        this._frame = window.document.createElement(\"iframe\");\n\t        this._frame.style.display = \"none\";\n\t        window.document.body.appendChild(this._frame);\n\t    }\n\t\n\t    IFrameWindow.prototype.navigate = function navigate(params) {\n\t        _Log2.default.info(\"IFrameWindow.navigate\");\n\t\n\t        if (!params || !params.url) {\n\t            this._error(\"No url provided\");\n\t        } else {\n\t            this._timer = window.setTimeout(this._timeout.bind(this), DefaultTimeout);\n\t            this._frame.src = params.url;\n\t        }\n\t\n\t        return this.promise;\n\t    };\n\t\n\t    IFrameWindow.prototype._success = function _success(data) {\n\t        this._cleanup();\n\t\n\t        _Log2.default.info(\"Successful response from frame window\");\n\t        this._resolve(data);\n\t    };\n\t\n\t    IFrameWindow.prototype._error = function _error(message) {\n\t        this._cleanup();\n\t\n\t        _Log2.default.error(message);\n\t        this._reject(new Error(message));\n\t    };\n\t\n\t    IFrameWindow.prototype._cleanup = function _cleanup() {\n\t        _Log2.default.info(\"IFrameWindow._cleanup\");\n\t\n\t        window.removeEventListener(\"message\", this._boundMessageEvent, false);\n\t        window.clearTimeout(this._timer);\n\t        window.document.body.removeChild(this._frame);\n\t\n\t        this._timer = null;\n\t        this._frame = null;\n\t        this._boundMessageEventssage = null;\n\t    };\n\t\n\t    IFrameWindow.prototype._timeout = function _timeout() {\n\t        _Log2.default.info(\"IFrameWindow._timeout\");\n\t        this._error(\"Frame window timed out\");\n\t    };\n\t\n\t    IFrameWindow.prototype._message = function _message(e) {\n\t        _Log2.default.info(\"IFrameWindow._message\");\n\t\n\t        if (this._timer && e.origin === this._origin && e.source === this._frame.contentWindow) {\n\t            var url = e.data;\n\t            if (url) {\n\t                this._success({ url: url });\n\t            } else {\n\t                this._error(\"Invalid response from frame\");\n\t            }\n\t        }\n\t    };\n\t\n\t    IFrameWindow.notifyParent = function notifyParent(url) {\n\t        _Log2.default.info(\"IFrameWindow.notifyParent\");\n\t\n\t        if (window.parent && window !== window.parent) {\n\t            url = url || window.location.href;\n\t            if (url) {\n\t                _Log2.default.info(\"posting url message to parent\");\n\t                window.parent.postMessage(url, location.protocol + \"//\" + location.host);\n\t            }\n\t        }\n\t    };\n\t\n\t    _createClass(IFrameWindow, [{\n\t        key: \"promise\",\n\t        get: function get() {\n\t            return this._promise;\n\t        }\n\t    }, {\n\t        key: \"_origin\",\n\t        get: function get() {\n\t            return location.protocol + \"//\" + location.host;\n\t        }\n\t    }]);\n\t\n\t    return IFrameWindow;\n\t}();\n\t\n\texports.default = IFrameWindow;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar User = function () {\n\t    function User(_ref) {\n\t        var id_token = _ref.id_token;\n\t        var session_state = _ref.session_state;\n\t        var access_token = _ref.access_token;\n\t        var token_type = _ref.token_type;\n\t        var scope = _ref.scope;\n\t        var profile = _ref.profile;\n\t        var expires_at = _ref.expires_at;\n\t        var state = _ref.state;\n\t\n\t        _classCallCheck(this, User);\n\t\n\t        this.id_token = id_token;\n\t        this.session_state = session_state;\n\t        this.access_token = access_token;\n\t        this.token_type = token_type;\n\t        this.scope = scope;\n\t        this.profile = profile;\n\t        this.expires_at = expires_at;\n\t        this.state = state;\n\t    }\n\t\n\t    User.prototype.toStorageString = function toStorageString() {\n\t        _Log2.default.info(\"User.toStorageString\");\n\t        return JSON.stringify({\n\t            id_token: this.id_token,\n\t            session_state: this.session_state,\n\t            access_token: this.access_token,\n\t            token_type: this.token_type,\n\t            scope: this.scope,\n\t            profile: this.profile,\n\t            expires_at: this.expires_at\n\t        });\n\t    };\n\t\n\t    User.fromStorageString = function fromStorageString(storageString) {\n\t        _Log2.default.info(\"User.fromStorageString\");\n\t        return new User(JSON.parse(storageString));\n\t    };\n\t\n\t    _createClass(User, [{\n\t        key: \"expires_in\",\n\t        get: function get() {\n\t            if (this.expires_at) {\n\t                var now = parseInt(Date.now() / 1000);\n\t                return this.expires_at - now;\n\t            }\n\t            return undefined;\n\t        }\n\t    }, {\n\t        key: \"expired\",\n\t        get: function get() {\n\t            var expires_in = this.expires_in;\n\t            if (expires_in !== undefined) {\n\t                return expires_in <= 0;\n\t            }\n\t            return undefined;\n\t        }\n\t    }, {\n\t        key: \"scopes\",\n\t        get: function get() {\n\t            return (this.scope || \"\").split(\" \");\n\t        }\n\t    }]);\n\t\n\t    return User;\n\t}();\n\t\n\texports.default = User;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _AccessTokenEvents2 = __webpack_require__(36);\n\t\n\tvar _AccessTokenEvents3 = _interopRequireDefault(_AccessTokenEvents2);\n\t\n\tvar _Event = __webpack_require__(38);\n\t\n\tvar _Event2 = _interopRequireDefault(_Event);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar UserManagerEvents = function (_AccessTokenEvents) {\n\t    _inherits(UserManagerEvents, _AccessTokenEvents);\n\t\n\t    function UserManagerEvents(settings) {\n\t        _classCallCheck(this, UserManagerEvents);\n\t\n\t        var _this = _possibleConstructorReturn(this, _AccessTokenEvents.call(this, settings));\n\t\n\t        _this._userLoaded = new _Event2.default(\"User loaded\");\n\t        _this._userUnloaded = new _Event2.default(\"User unloaded\");\n\t        _this._silentRenewError = new _Event2.default(\"Silent renew error\");\n\t        return _this;\n\t    }\n\t\n\t    UserManagerEvents.prototype.load = function load(user) {\n\t        _Log2.default.info(\"UserManagerEvents.load\");\n\t        _AccessTokenEvents.prototype.load.call(this, user);\n\t        this._userLoaded.raise(user);\n\t    };\n\t\n\t    UserManagerEvents.prototype.unload = function unload() {\n\t        _Log2.default.info(\"UserManagerEvents.unload\");\n\t        _AccessTokenEvents.prototype.unload.call(this);\n\t        this._userUnloaded.raise();\n\t    };\n\t\n\t    UserManagerEvents.prototype.addUserLoaded = function addUserLoaded(cb) {\n\t        this._userLoaded.addHandler(cb);\n\t    };\n\t\n\t    UserManagerEvents.prototype.removeUserLoaded = function removeUserLoaded(cb) {\n\t        this._userLoaded.removeHandler(cb);\n\t    };\n\t\n\t    UserManagerEvents.prototype.addUserUnloaded = function addUserUnloaded(cb) {\n\t        this._userUnloaded.addHandler(cb);\n\t    };\n\t\n\t    UserManagerEvents.prototype.removeUserUnloaded = function removeUserUnloaded(cb) {\n\t        this._userUnloaded.removeHandler(cb);\n\t    };\n\t\n\t    UserManagerEvents.prototype.addSilentRenewError = function addSilentRenewError(cb) {\n\t        this._silentRenewError.addHandler(cb);\n\t    };\n\t\n\t    UserManagerEvents.prototype.removeSilentRenewError = function removeSilentRenewError(cb) {\n\t        this._silentRenewError.removeHandler(cb);\n\t    };\n\t\n\t    UserManagerEvents.prototype._raiseSilentRenewError = function _raiseSilentRenewError(e) {\n\t        _Log2.default.info(\"UserManagerEvents._raiseSilentRenewError\", e.message);\n\t        this._silentRenewError.raise(e);\n\t    };\n\t\n\t    return UserManagerEvents;\n\t}(_AccessTokenEvents3.default);\n\t\n\texports.default = UserManagerEvents;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _Timer = __webpack_require__(37);\n\t\n\tvar _Timer2 = _interopRequireDefault(_Timer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar DefaultAccessTokenExpiringNotificationTime = 60;\n\t\n\tvar AccessTokenEvents = function () {\n\t    function AccessTokenEvents() {\n\t        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t        var _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime;\n\t        var accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir;\n\t        var _ref$accessTokenExpir2 = _ref.accessTokenExpiringTimer;\n\t        var accessTokenExpiringTimer = _ref$accessTokenExpir2 === undefined ? new _Timer2.default(\"Access token expiring\") : _ref$accessTokenExpir2;\n\t        var _ref$accessTokenExpir3 = _ref.accessTokenExpiredTimer;\n\t        var accessTokenExpiredTimer = _ref$accessTokenExpir3 === undefined ? new _Timer2.default(\"Access token expired\") : _ref$accessTokenExpir3;\n\t\n\t        _classCallCheck(this, AccessTokenEvents);\n\t\n\t        this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;\n\t\n\t        this._accessTokenExpiring = accessTokenExpiringTimer;\n\t        this._accessTokenExpired = accessTokenExpiredTimer;\n\t    }\n\t\n\t    AccessTokenEvents.prototype.load = function load(container) {\n\t        _Log2.default.info(\"AccessTokenEvents.load\");\n\t\n\t        this._cancelTimers();\n\t\n\t        // only register events if there's an access token where we care about expiration\n\t        if (container.access_token) {\n\t            var duration = container.expires_in;\n\t            _Log2.default.info(\"access token present, remaining duration:\", duration);\n\t\n\t            if (duration > 0) {\n\t                // only register expiring if we still have time\n\t                var expiring = duration - this._accessTokenExpiringNotificationTime;\n\t                if (expiring <= 0) {\n\t                    expiring = 1;\n\t                }\n\t                _Log2.default.info(\"registering expiring timer in:\", expiring);\n\t                this._accessTokenExpiring.init(expiring);\n\t            }\n\t\n\t            // always register expired. if it's negative, it will still fire\n\t            var expired = duration + 1;\n\t            _Log2.default.info(\"registering expired timer in:\", expired);\n\t            this._accessTokenExpired.init(expired);\n\t        }\n\t    };\n\t\n\t    AccessTokenEvents.prototype.unload = function unload() {\n\t        _Log2.default.info(\"AccessTokenEvents.unload\");\n\t        this._cancelTimers();\n\t    };\n\t\n\t    AccessTokenEvents.prototype._cancelTimers = function _cancelTimers() {\n\t        _Log2.default.info(\"canceling existing access token timers\");\n\t        this._accessTokenExpiring.cancel();\n\t        this._accessTokenExpired.cancel();\n\t    };\n\t\n\t    AccessTokenEvents.prototype.addAccessTokenExpiring = function addAccessTokenExpiring(cb) {\n\t        this._accessTokenExpiring.addHandler(cb);\n\t    };\n\t\n\t    AccessTokenEvents.prototype.removeAccessTokenExpiring = function removeAccessTokenExpiring(cb) {\n\t        this._accessTokenExpiring.removeHandler(cb);\n\t    };\n\t\n\t    AccessTokenEvents.prototype.addAccessTokenExpired = function addAccessTokenExpired(cb) {\n\t        this._accessTokenExpired.addHandler(cb);\n\t    };\n\t\n\t    AccessTokenEvents.prototype.removeAccessTokenExpired = function removeAccessTokenExpired(cb) {\n\t        this._accessTokenExpired.removeHandler(cb);\n\t    };\n\t\n\t    return AccessTokenEvents;\n\t}();\n\t\n\texports.default = AccessTokenEvents;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tvar _Global = __webpack_require__(5);\n\t\n\tvar _Global2 = _interopRequireDefault(_Global);\n\t\n\tvar _Event2 = __webpack_require__(38);\n\t\n\tvar _Event3 = _interopRequireDefault(_Event2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar Timer = function (_Event) {\n\t    _inherits(Timer, _Event);\n\t\n\t    function Timer(name) {\n\t        var timer = arguments.length <= 1 || arguments[1] === undefined ? _Global2.default.timer : arguments[1];\n\t\n\t        _classCallCheck(this, Timer);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Event.call(this, name));\n\t\n\t        _this._timer = timer;\n\t        return _this;\n\t    }\n\t\n\t    Timer.prototype.init = function init(duration) {\n\t        this.cancel();\n\t\n\t        if (duration <= 0) {\n\t            duration = 1;\n\t        }\n\t\n\t        this._timerHandle = this._timer.setTimeout(this._callback.bind(this), duration * 1000);\n\t    };\n\t\n\t    Timer.prototype.cancel = function cancel() {\n\t        if (this._timerHandle) {\n\t            this._timer.clearTimeout(this._timerHandle);\n\t            this._timerHandle = null;\n\t        }\n\t    };\n\t\n\t    Timer.prototype._callback = function _callback() {\n\t        this._timerHandle = null;\n\t        _Event.prototype.raise.call(this);\n\t    };\n\t\n\t    return Timer;\n\t}(_Event3.default);\n\t\n\texports.default = Timer;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar Event = function () {\n\t    function Event(name) {\n\t        _classCallCheck(this, Event);\n\t\n\t        this._name = name;\n\t        this._callbacks = [];\n\t    }\n\t\n\t    Event.prototype.addHandler = function addHandler(cb) {\n\t        this._callbacks.push(cb);\n\t    };\n\t\n\t    Event.prototype.removeHandler = function removeHandler(cb) {\n\t        var idx = this._callbacks.findIndex(function (item) {\n\t            return item === cb;\n\t        });\n\t        if (idx >= 0) {\n\t            this._callbacks.splice(idx, 1);\n\t        }\n\t    };\n\t\n\t    Event.prototype.raise = function raise() {\n\t        _Log2.default.info(\"Raising event: \" + this._name);\n\t        var _iteratorNormalCompletion = true;\n\t        var _didIteratorError = false;\n\t        var _iteratorError = undefined;\n\t\n\t        try {\n\t            for (var _iterator = this._callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t                var cb = _step.value;\n\t\n\t                cb.apply(undefined, arguments);\n\t            }\n\t        } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t        } finally {\n\t            try {\n\t                if (!_iteratorNormalCompletion && _iterator.return) {\n\t                    _iterator.return();\n\t                }\n\t            } finally {\n\t                if (_didIteratorError) {\n\t                    throw _iteratorError;\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t    return Event;\n\t}();\n\t\n\texports.default = Event;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _Log = __webpack_require__(1);\n\t\n\tvar _Log2 = _interopRequireDefault(_Log);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n\t// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\t\n\tvar SilentRenewService = function () {\n\t    function SilentRenewService(userManager) {\n\t        _classCallCheck(this, SilentRenewService);\n\t\n\t        this._userManager = userManager;\n\t        this._userManager.events.addAccessTokenExpiring(this._tokenExpiring.bind(this));\n\t    }\n\t\n\t    SilentRenewService.prototype._tokenExpiring = function _tokenExpiring() {\n\t        var _this = this;\n\t\n\t        _Log2.default.info(\"SilentRenewService automatically renewing access token\");\n\t\n\t        this._userManager.signinSilent().then(function (user) {\n\t            _Log2.default.info(\"Silent token renewal successful\");\n\t        }, function (err) {\n\t            _Log2.default.error(\"Error from signinSilent:\", err.message);\n\t            _this._userManager.events._raiseSilentRenewError(err);\n\t        });\n\t    };\n\t\n\t    return SilentRenewService;\n\t}();\n\t\n\texports.default = SilentRenewService;\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L29pZGMtY2xpZW50L2xpYi9vaWRjLWNsaWVudC5taW4uanM/MzgwOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUYsaUNBQWlDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRTs7QUFFbGpCLGtEQUFrRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXhKO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNEVBQTRFLGFBQWE7QUFDekY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtFQUErRSxlQUFlO0FBQzlGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrRUFBK0UsZUFBZTtBQUM5RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBLEVBQUU7O0FBRUY7OztBQUdBO0FBQ0E7O0FBRUEsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUYsaUNBQWlDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELDJEQUEyRCxFQUFFLEVBQUUseURBQXlELHFFQUFxRSw2REFBNkQsb0JBQW9CLEdBQUcsRUFBRSxHQUFHO0FBQ3JqQjs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSx1Q0FBdUMsdUNBQXVDLGdCQUFnQjs7QUFFOUYsa0RBQWtELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFeEo7QUFDQTtBQUNBLGdGQUFnRjs7QUFFaEY7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw0RUFBNEU7O0FBRTVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjOztBQUVkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZCxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLDZEQUE2RDtBQUM3RDtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBOztBQUVBLDZFQUE2RTs7QUFFN0U7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSw2REFBNkQ7QUFDN0Q7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBLE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGLGlDQUFpQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsNkRBQTZELG9CQUFvQixHQUFHLEVBQUUsR0FBRztBQUNyakI7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsdUNBQXVDLHVDQUF1QyxnQkFBZ0I7O0FBRTlGLGtEQUFrRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXhKOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7O0FBRUE7QUFDQTtBQUNBLDRFQUE0RTs7QUFFNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSx1Q0FBdUMsdUNBQXVDLGdCQUFnQjs7QUFFOUYsa0RBQWtELDBDQUEwQywwREFBMEQsRUFBRSxFQUFFO0FBQzFKOztBQUVBO0FBQ0E7QUFDQSw0RUFBNEU7O0FBRTVFO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FB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QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHNDQUFzQzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxtREFBbUQ7O0FBRW5EO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxrQkFBa0I7QUFDbEIsY0FBYztBQUNkLFVBQVU7QUFDVjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBLE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBOztB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QTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLG9DQUFvQztBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUJBQWlCO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxpQkFBaUI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsRUFBRTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLDZCQUE2QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsU0FBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLFNBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXNCLFNBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3REFBd0QsT0FBTztBQUMvRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0RBQXdELE9BQU87QUFDL0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUI7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsUUFBUTtBQUM5QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxtQkFBbUI7QUFDbkI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0Esd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixZQUFZO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7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O0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBLDRFQUE0RTs7QUFFNUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEVBQTRFOztBQUU1RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHVGQUF1Rjs7QUFFdkY7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsdUZBQXVGOztBQUV2RjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1RkFBdUY7O0FBRXZGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkLFVBQVU7QUFDVjs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGNBQWM7QUFDZCxVQUFVO0FBQ1Y7O0FBRUE7QUFDQSw0RUFBNEU7O0FBRTVFOztBQUVBO0FBQ0EsdUZBQXVGOztBQUV2Rjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixrQkFBa0I7QUFDbEIsY0FBYztBQUNkLFVBQVU7QUFDVjs7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O0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBLE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBOztBQUVBLHVDQUF1Qyx1Q0FBdUMsZ0JBQWdCOztBQUU5RixrREFBa0QsMENBQTBDLDBEQUEwRCxFQUFFLEVBQUU7QUFDMUo7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMkNBQTJDLGNBQWMiLCJmaWxlIjoiMzcwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0Ly8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIExvZyA9IGV4cG9ydHMuTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0dmFyIE9pZGNDbGllbnQgPSBleHBvcnRzLk9pZGNDbGllbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgV2ViU3RvcmFnZVN0YXRlU3RvcmUgPSBleHBvcnRzLldlYlN0b3JhZ2VTdGF0ZVN0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIEluTWVtb3J5V2ViU3RvcmFnZSA9IGV4cG9ydHMuSW5NZW1vcnlXZWJTdG9yYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XG5cdHZhciBVc2VyTWFuYWdlciA9IGV4cG9ydHMuVXNlck1hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblx0dmFyIEFjY2Vzc1Rva2VuRXZlbnRzID0gZXhwb3J0cy5BY2Nlc3NUb2tlbkV2ZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHR2YXIgTWV0YWRhdGFTZXJ2aWNlID0gZXhwb3J0cy5NZXRhZGF0YVNlcnZpY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0ge1xuXHQgICAgTG9nOiBMb2csXG5cdCAgICBPaWRjQ2xpZW50OiBPaWRjQ2xpZW50LFxuXHQgICAgV2ViU3RvcmFnZVN0YXRlU3RvcmU6IFdlYlN0b3JhZ2VTdGF0ZVN0b3JlLFxuXHQgICAgSW5NZW1vcnlXZWJTdG9yYWdlOiBJbk1lbW9yeVdlYlN0b3JhZ2UsXG5cdCAgICBVc2VyTWFuYWdlcjogVXNlck1hbmFnZXIsXG5cdCAgICBBY2Nlc3NUb2tlbkV2ZW50czogQWNjZXNzVG9rZW5FdmVudHMsXG5cdCAgICBNZXRhZGF0YVNlcnZpY2U6IE1ldGFkYXRhU2VydmljZVxuXHR9O1xuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHQvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgbm9wTG9nZ2VyID0ge1xuXHQgICAgaW5mbzogZnVuY3Rpb24gaW5mbygpIHt9LFxuXHQgICAgd2FybjogZnVuY3Rpb24gd2FybigpIHt9LFxuXHQgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKCkge31cblx0fTtcblx0XG5cdHZhciBOT05FID0gMDtcblx0dmFyIEVSUk9SID0gMTtcblx0dmFyIFdBUk4gPSAyO1xuXHR2YXIgSU5GTyA9IDM7XG5cdFxuXHR2YXIgbG9nZ2VyID0gdm9pZCAwO1xuXHR2YXIgbGV2ZWwgPSB2b2lkIDA7XG5cdFxuXHR2YXIgTG9nID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gTG9nKCkge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2cpO1xuXHQgICAgfVxuXHRcblx0ICAgIExvZy5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuXHQgICAgICAgIGxldmVsID0gSU5GTztcblx0ICAgICAgICBsb2dnZXIgPSBub3BMb2dnZXI7XG5cdCAgICB9O1xuXHRcblx0ICAgIExvZy5pbmZvID0gZnVuY3Rpb24gaW5mbygpIHtcblx0ICAgICAgICBpZiAobGV2ZWwgPj0gSU5GTykge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgbG9nZ2VyLmluZm8uYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIExvZy53YXJuID0gZnVuY3Rpb24gd2FybigpIHtcblx0ICAgICAgICBpZiAobGV2ZWwgPj0gV0FSTikge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuXHQgICAgICAgICAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICBsb2dnZXIud2Fybi5hcHBseShsb2dnZXIsIEFycmF5LmZyb20oYXJncykpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgTG9nLmVycm9yID0gZnVuY3Rpb24gZXJyb3IoKSB7XG5cdCAgICAgICAgaWYgKGxldmVsID49IEVSUk9SKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG5cdCAgICAgICAgICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIGxvZ2dlci5lcnJvci5hcHBseShsb2dnZXIsIEFycmF5LmZyb20oYXJncykpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKExvZywgbnVsbCwgW3tcblx0ICAgICAgICBrZXk6IFwiTk9ORVwiLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gTk9ORTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcIkVSUk9SXCIsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBFUlJPUjtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcIldBUk5cIixcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFdBUk47XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJJTkZPXCIsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBJTkZPO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwibGV2ZWxcIixcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGxldmVsO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0ICAgICAgICAgICAgaWYgKE5PTkUgPD0gdmFsdWUgJiYgdmFsdWUgPD0gSU5GTykge1xuXHQgICAgICAgICAgICAgICAgbGV2ZWwgPSB2YWx1ZTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9nIGxldmVsXCIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJsb2dnZXJcIixcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGxvZ2dlcjtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdCAgICAgICAgICAgIGlmICh2YWx1ZS5pbmZvICYmIHZhbHVlLndhcm4gJiYgdmFsdWUuZXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgIGxvZ2dlciA9IHZhbHVlO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBsb2dnZXJcIik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIExvZztcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gTG9nO1xuXHRcblx0XG5cdExvZy5yZXNldCgpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOyAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgX0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX0xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2cpO1xuXHRcblx0dmFyIF9PaWRjQ2xpZW50U2V0dGluZ3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9PaWRjQ2xpZW50U2V0dGluZ3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2lkY0NsaWVudFNldHRpbmdzKTtcblx0XG5cdHZhciBfRXJyb3JSZXNwb25zZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0dmFyIF9FcnJvclJlc3BvbnNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Vycm9yUmVzcG9uc2UpO1xuXHRcblx0dmFyIF9TaWduaW5SZXF1ZXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cdFxuXHR2YXIgX1NpZ25pblJlcXVlc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2lnbmluUmVxdWVzdCk7XG5cdFxuXHR2YXIgX1NpZ25pblJlc3BvbnNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdFxuXHR2YXIgX1NpZ25pblJlc3BvbnNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NpZ25pblJlc3BvbnNlKTtcblx0XG5cdHZhciBfU2lnbm91dFJlcXVlc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblx0XG5cdHZhciBfU2lnbm91dFJlcXVlc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2lnbm91dFJlcXVlc3QpO1xuXHRcblx0dmFyIF9TaWdub3V0UmVzcG9uc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KTtcblx0XG5cdHZhciBfU2lnbm91dFJlc3BvbnNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NpZ25vdXRSZXNwb25zZSk7XG5cdFxuXHR2YXIgX1NpZ25pblN0YXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7XG5cdFxuXHR2YXIgX1NpZ25pblN0YXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NpZ25pblN0YXRlKTtcblx0XG5cdHZhciBfU3RhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0XG5cdHZhciBfU3RhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3RhdGUpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHR2YXIgT2lkY0NsaWVudCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE9pZGNDbGllbnQoKSB7XG5cdCAgICAgICAgdmFyIHNldHRpbmdzID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG5cdFxuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPaWRjQ2xpZW50KTtcblx0XG5cdCAgICAgICAgaWYgKHNldHRpbmdzIGluc3RhbmNlb2YgX09pZGNDbGllbnRTZXR0aW5nczIuZGVmYXVsdCkge1xuXHQgICAgICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzID0gbmV3IF9PaWRjQ2xpZW50U2V0dGluZ3MyLmRlZmF1bHQoc2V0dGluZ3MpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBPaWRjQ2xpZW50LnByb3RvdHlwZS5jcmVhdGVTaWduaW5SZXF1ZXN0ID0gZnVuY3Rpb24gY3JlYXRlU2lnbmluUmVxdWVzdCgpIHtcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXHRcblx0ICAgICAgICB2YXIgcmVzcG9uc2VfdHlwZSA9IF9yZWYucmVzcG9uc2VfdHlwZTtcblx0ICAgICAgICB2YXIgc2NvcGUgPSBfcmVmLnNjb3BlO1xuXHQgICAgICAgIHZhciByZWRpcmVjdF91cmkgPSBfcmVmLnJlZGlyZWN0X3VyaTtcblx0ICAgICAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YTtcblx0ICAgICAgICB2YXIgcHJvbXB0ID0gX3JlZi5wcm9tcHQ7XG5cdCAgICAgICAgdmFyIGRpc3BsYXkgPSBfcmVmLmRpc3BsYXk7XG5cdCAgICAgICAgdmFyIG1heF9hZ2UgPSBfcmVmLm1heF9hZ2U7XG5cdCAgICAgICAgdmFyIHVpX2xvY2FsZXMgPSBfcmVmLnVpX2xvY2FsZXM7XG5cdCAgICAgICAgdmFyIGlkX3Rva2VuX2hpbnQgPSBfcmVmLmlkX3Rva2VuX2hpbnQ7XG5cdCAgICAgICAgdmFyIGxvZ2luX2hpbnQgPSBfcmVmLmxvZ2luX2hpbnQ7XG5cdCAgICAgICAgdmFyIGFjcl92YWx1ZXMgPSBfcmVmLmFjcl92YWx1ZXM7XG5cdCAgICAgICAgdmFyIHN0YXRlU3RvcmUgPSBhcmd1bWVudHNbMV07XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbmluUmVxdWVzdFwiKTtcblx0XG5cdCAgICAgICAgdmFyIGNsaWVudF9pZCA9IHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZDtcblx0ICAgICAgICByZXNwb25zZV90eXBlID0gcmVzcG9uc2VfdHlwZSB8fCB0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV90eXBlO1xuXHQgICAgICAgIHNjb3BlID0gc2NvcGUgfHwgdGhpcy5fc2V0dGluZ3Muc2NvcGU7XG5cdCAgICAgICAgcmVkaXJlY3RfdXJpID0gcmVkaXJlY3RfdXJpIHx8IHRoaXMuX3NldHRpbmdzLnJlZGlyZWN0X3VyaTtcblx0XG5cdCAgICAgICAgLy8gaWRfdG9rZW5faGludCwgbG9naW5faGludCBhcmVuJ3QgYWxsb3dlZCBvbiBfc2V0dGluZ3Ncblx0ICAgICAgICBwcm9tcHQgPSBwcm9tcHQgfHwgdGhpcy5fc2V0dGluZ3MucHJvbXB0O1xuXHQgICAgICAgIGRpc3BsYXkgPSBkaXNwbGF5IHx8IHRoaXMuX3NldHRpbmdzLmRpc3BsYXk7XG5cdCAgICAgICAgbWF4X2FnZSA9IG1heF9hZ2UgfHwgdGhpcy5fc2V0dGluZ3MubWF4X2FnZTtcblx0ICAgICAgICB1aV9sb2NhbGVzID0gdWlfbG9jYWxlcyB8fCB0aGlzLl9zZXR0aW5ncy51aV9sb2NhbGVzO1xuXHQgICAgICAgIGFjcl92YWx1ZXMgPSBhY3JfdmFsdWVzIHx8IHRoaXMuX3NldHRpbmdzLmFjcl92YWx1ZXM7XG5cdFxuXHQgICAgICAgIHZhciBhdXRob3JpdHkgPSB0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHk7XG5cdFxuXHQgICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50KCkudGhlbihmdW5jdGlvbiAodXJsKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJlY2VpdmVkIGF1dGhvcml6YXRpb24gZW5kcG9pbnRcIiwgdXJsKTtcblx0XG5cdCAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IF9TaWduaW5SZXF1ZXN0Mi5kZWZhdWx0KHtcblx0ICAgICAgICAgICAgICAgIHVybDogdXJsLFxuXHQgICAgICAgICAgICAgICAgY2xpZW50X2lkOiBjbGllbnRfaWQsXG5cdCAgICAgICAgICAgICAgICByZWRpcmVjdF91cmk6IHJlZGlyZWN0X3VyaSxcblx0ICAgICAgICAgICAgICAgIHJlc3BvbnNlX3R5cGU6IHJlc3BvbnNlX3R5cGUsXG5cdCAgICAgICAgICAgICAgICBzY29wZTogc2NvcGUsXG5cdCAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxuXHQgICAgICAgICAgICAgICAgYXV0aG9yaXR5OiBhdXRob3JpdHksXG5cdCAgICAgICAgICAgICAgICBwcm9tcHQ6IHByb21wdCwgZGlzcGxheTogZGlzcGxheSwgbWF4X2FnZTogbWF4X2FnZSwgdWlfbG9jYWxlczogdWlfbG9jYWxlcywgaWRfdG9rZW5faGludDogaWRfdG9rZW5faGludCwgbG9naW5faGludDogbG9naW5faGludCwgYWNyX3ZhbHVlczogYWNyX3ZhbHVlc1xuXHQgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHJlcXVlc3Quc3RhdGU7XG5cdCAgICAgICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IF90aGlzLl9zdGF0ZVN0b3JlO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIHN0YXRlU3RvcmUuc2V0KHN0YXRlLmlkLCBzdGF0ZS50b1N0b3JhZ2VTdHJpbmcoKSkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9pZGNDbGllbnQucHJvdG90eXBlLnByb2Nlc3NTaWduaW5SZXNwb25zZSA9IGZ1bmN0aW9uIHByb2Nlc3NTaWduaW5SZXNwb25zZSh1cmwsIHN0YXRlU3RvcmUpIHtcblx0ICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiT2lkY0NsaWVudC5wcm9jZXNzU2lnbmluUmVzcG9uc2VcIik7XG5cdFxuXHQgICAgICAgIHZhciByZXNwb25zZSA9IG5ldyBfU2lnbmluUmVzcG9uc2UyLmRlZmF1bHQodXJsKTtcblx0XG5cdCAgICAgICAgaWYgKCFyZXNwb25zZS5zdGF0ZSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gc3RhdGUgaW4gcmVzcG9uc2VcIik7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzdGF0ZSBpbiByZXNwb25zZVwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBzdGF0ZVN0b3JlID0gc3RhdGVTdG9yZSB8fCB0aGlzLl9zdGF0ZVN0b3JlO1xuXHRcblx0ICAgICAgICByZXR1cm4gc3RhdGVTdG9yZS5yZW1vdmUocmVzcG9uc2Uuc3RhdGUpLnRoZW4oZnVuY3Rpb24gKHN0b3JlZFN0YXRlU3RyaW5nKSB7XG5cdCAgICAgICAgICAgIGlmICghc3RvcmVkU3RhdGVTdHJpbmcpIHtcblx0ICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpO1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbWF0Y2hpbmcgc3RhdGUgZm91bmQgaW4gc3RvcmFnZVwiKTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gX1NpZ25pblN0YXRlMi5kZWZhdWx0LmZyb21TdG9yYWdlU3RyaW5nKHN0b3JlZFN0YXRlU3RyaW5nKTtcblx0XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJlY2VpdmVkIHN0YXRlIGZyb20gc3RvcmFnZTsgdmFsaWRhdGluZyByZXNwb25zZVwiKTtcblx0ICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5fdmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2Uoc3RhdGUsIHJlc3BvbnNlKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgT2lkY0NsaWVudC5wcm90b3R5cGUuY3JlYXRlU2lnbm91dFJlcXVlc3QgPSBmdW5jdGlvbiBjcmVhdGVTaWdub3V0UmVxdWVzdCgpIHtcblx0ICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblx0XG5cdCAgICAgICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG5cdFxuXHQgICAgICAgIHZhciBpZF90b2tlbl9oaW50ID0gX3JlZjIuaWRfdG9rZW5faGludDtcblx0ICAgICAgICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7XG5cdCAgICAgICAgdmFyIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSA9IF9yZWYyLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcblx0ICAgICAgICB2YXIgc3RhdGVTdG9yZSA9IGFyZ3VtZW50c1sxXTtcblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiT2lkY0NsaWVudC5jcmVhdGVTaWdub3V0UmVxdWVzdFwiKTtcblx0XG5cdCAgICAgICAgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpIHx8IHRoaXMuX3NldHRpbmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcblx0XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRFbmRTZXNzaW9uRW5kcG9pbnQoKS50aGVuKGZ1bmN0aW9uICh1cmwpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiUmVjZWl2ZWQgZW5kIHNlc3Npb24gZW5kcG9pbnRcIiwgdXJsKTtcblx0XG5cdCAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IF9TaWdub3V0UmVxdWVzdDIuZGVmYXVsdCh7XG5cdCAgICAgICAgICAgICAgICB1cmw6IHVybCxcblx0ICAgICAgICAgICAgICAgIGlkX3Rva2VuX2hpbnQ6IGlkX3Rva2VuX2hpbnQsXG5cdCAgICAgICAgICAgICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmk6IHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSxcblx0ICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcblx0ICAgICAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICAgICB2YXIgc3RhdGUgPSByZXF1ZXN0LnN0YXRlO1xuXHQgICAgICAgICAgICBpZiAoc3RhdGUpIHtcblx0ICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlNpZ25vdXQgcmVxdWVzdCBoYXMgc3RhdGUgdG8gcGVyc2lzdFwiKTtcblx0XG5cdCAgICAgICAgICAgICAgICBzdGF0ZVN0b3JlID0gc3RhdGVTdG9yZSB8fCBfdGhpczMuX3N0YXRlU3RvcmU7XG5cdCAgICAgICAgICAgICAgICBzdGF0ZVN0b3JlLnNldChzdGF0ZS5pZCwgc3RhdGUudG9TdG9yYWdlU3RyaW5nKCkpO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgT2lkY0NsaWVudC5wcm90b3R5cGUucHJvY2Vzc1NpZ25vdXRSZXNwb25zZSA9IGZ1bmN0aW9uIHByb2Nlc3NTaWdub3V0UmVzcG9uc2UodXJsLCBzdGF0ZVN0b3JlKSB7XG5cdCAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25vdXRSZXNwb25zZVwiKTtcblx0XG5cdCAgICAgICAgdmFyIHJlc3BvbnNlID0gbmV3IF9TaWdub3V0UmVzcG9uc2UyLmRlZmF1bHQodXJsKTtcblx0ICAgICAgICBpZiAoIXJlc3BvbnNlLnN0YXRlKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIk5vIHN0YXRlIGluIHJlc3BvbnNlXCIpO1xuXHRcblx0ICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0Lndhcm4oXCJSZXNwb25zZSB3YXMgZXJyb3JcIiwgcmVzcG9uc2UuZXJyb3IpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBfRXJyb3JSZXNwb25zZTIuZGVmYXVsdChyZXNwb25zZSkpO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBzdGF0ZUtleSA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcblx0ICAgICAgICBzdGF0ZVN0b3JlID0gc3RhdGVTdG9yZSB8fCB0aGlzLl9zdGF0ZVN0b3JlO1xuXHRcblx0ICAgICAgICByZXR1cm4gc3RhdGVTdG9yZS5yZW1vdmUoc3RhdGVLZXkpLnRoZW4oZnVuY3Rpb24gKHN0b3JlZFN0YXRlU3RyaW5nKSB7XG5cdCAgICAgICAgICAgIGlmICghc3RvcmVkU3RhdGVTdHJpbmcpIHtcblx0ICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpO1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbWF0Y2hpbmcgc3RhdGUgZm91bmQgaW4gc3RvcmFnZVwiKTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gX1N0YXRlMi5kZWZhdWx0LmZyb21TdG9yYWdlU3RyaW5nKHN0b3JlZFN0YXRlU3RyaW5nKTtcblx0XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJlY2VpdmVkIHN0YXRlIGZyb20gc3RvcmFnZTsgdmFsaWRhdGluZyByZXNwb25zZVwiKTtcblx0ICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5fdmFsaWRhdG9yLnZhbGlkYXRlU2lnbm91dFJlc3BvbnNlKHN0YXRlLCByZXNwb25zZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE9pZGNDbGllbnQucHJvdG90eXBlLmNsZWFyU3RhbGVTdGF0ZSA9IGZ1bmN0aW9uIGNsZWFyU3RhbGVTdGF0ZShzdGF0ZVN0b3JlKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiT2lkY0NsaWVudC5jbGVhclN0YWxlU3RhdGVcIik7XG5cdFxuXHQgICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XG5cdFxuXHQgICAgICAgIHJldHVybiBfU3RhdGUyLmRlZmF1bHQuY2xlYXJTdGFsZVN0YXRlKHN0YXRlU3RvcmUsIHRoaXMuc2V0dGluZ3Muc3RhbGVTdGF0ZUFnZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhPaWRjQ2xpZW50LCBbe1xuXHQgICAgICAgIGtleTogJ19zdGF0ZVN0b3JlJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Muc3RhdGVTdG9yZTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnX3ZhbGlkYXRvcicsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnZhbGlkYXRvcjtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnX21ldGFkYXRhU2VydmljZScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLm1ldGFkYXRhU2VydmljZTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnc2V0dGluZ3MnLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3M7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ21ldGFkYXRhU2VydmljZScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2U7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBPaWRjQ2xpZW50O1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBPaWRjQ2xpZW50O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOyAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgX0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX0xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2cpO1xuXHRcblx0dmFyIF9XZWJTdG9yYWdlU3RhdGVTdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHR2YXIgX1dlYlN0b3JhZ2VTdGF0ZVN0b3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1dlYlN0b3JhZ2VTdGF0ZVN0b3JlKTtcblx0XG5cdHZhciBfUmVzcG9uc2VWYWxpZGF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0dmFyIF9SZXNwb25zZVZhbGlkYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZXNwb25zZVZhbGlkYXRvcik7XG5cdFxuXHR2YXIgX01ldGFkYXRhU2VydmljZSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdFxuXHR2YXIgX01ldGFkYXRhU2VydmljZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZXRhZGF0YVNlcnZpY2UpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHR2YXIgT2lkY01ldGFkYXRhVXJsUGF0aCA9ICcud2VsbC1rbm93bi9vcGVuaWQtY29uZmlndXJhdGlvbic7XG5cdFxuXHR2YXIgRGVmYXVsdFJlc3BvbnNlVHlwZSA9IFwiaWRfdG9rZW5cIjtcblx0dmFyIERlZmF1bHRTY29wZSA9IFwib3BlbmlkXCI7XG5cdHZhciBEZWZhdWx0U3RhbGVTdGF0ZUFnZSA9IDYwOyAvLyBzZWNvbmRzXG5cdHZhciBEZWZhdWx0Q2xvY2tTa2V3SW5TZWNvbmRzID0gNjAgKiA1O1xuXHRcblx0dmFyIE9pZGNDbGllbnRTZXR0aW5ncyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE9pZGNDbGllbnRTZXR0aW5ncygpIHtcblx0ICAgICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXHRcblx0ICAgICAgICB2YXJcblx0ICAgICAgICAvLyBtZXRhZGF0YSByZWxhdGVkXG5cdCAgICAgICAgYXV0aG9yaXR5ID0gX3JlZi5hdXRob3JpdHk7XG5cdCAgICAgICAgdmFyIG1ldGFkYXRhVXJsID0gX3JlZi5tZXRhZGF0YVVybDtcblx0ICAgICAgICB2YXIgbWV0YWRhdGEgPSBfcmVmLm1ldGFkYXRhO1xuXHQgICAgICAgIHZhciBzaWduaW5nS2V5cyA9IF9yZWYuc2lnbmluZ0tleXM7XG5cdCAgICAgICAgdmFyXG5cdCAgICAgICAgLy8gY2xpZW50IHJlbGF0ZWRcblx0ICAgICAgICBjbGllbnRfaWQgPSBfcmVmLmNsaWVudF9pZDtcblx0ICAgICAgICB2YXIgX3JlZiRyZXNwb25zZV90eXBlID0gX3JlZi5yZXNwb25zZV90eXBlO1xuXHQgICAgICAgIHZhciByZXNwb25zZV90eXBlID0gX3JlZiRyZXNwb25zZV90eXBlID09PSB1bmRlZmluZWQgPyBEZWZhdWx0UmVzcG9uc2VUeXBlIDogX3JlZiRyZXNwb25zZV90eXBlO1xuXHQgICAgICAgIHZhciBfcmVmJHNjb3BlID0gX3JlZi5zY29wZTtcblx0ICAgICAgICB2YXIgc2NvcGUgPSBfcmVmJHNjb3BlID09PSB1bmRlZmluZWQgPyBEZWZhdWx0U2NvcGUgOiBfcmVmJHNjb3BlO1xuXHQgICAgICAgIHZhciByZWRpcmVjdF91cmkgPSBfcmVmLnJlZGlyZWN0X3VyaTtcblx0ICAgICAgICB2YXIgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gX3JlZi5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XG5cdCAgICAgICAgdmFyXG5cdCAgICAgICAgLy8gb3B0aW9uYWwgcHJvdG9jb2xcblx0ICAgICAgICBwcm9tcHQgPSBfcmVmLnByb21wdDtcblx0ICAgICAgICB2YXIgZGlzcGxheSA9IF9yZWYuZGlzcGxheTtcblx0ICAgICAgICB2YXIgbWF4X2FnZSA9IF9yZWYubWF4X2FnZTtcblx0ICAgICAgICB2YXIgdWlfbG9jYWxlcyA9IF9yZWYudWlfbG9jYWxlcztcblx0ICAgICAgICB2YXIgYWNyX3ZhbHVlcyA9IF9yZWYuYWNyX3ZhbHVlcztcblx0ICAgICAgICB2YXIgX3JlZiRmaWx0ZXJQcm90b2NvbENsID0gX3JlZi5maWx0ZXJQcm90b2NvbENsYWltcztcblx0ICAgICAgICB2YXJcblx0ICAgICAgICAvLyBiZWhhdmlvciBmbGFnc1xuXHQgICAgICAgIGZpbHRlclByb3RvY29sQ2xhaW1zID0gX3JlZiRmaWx0ZXJQcm90b2NvbENsID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZiRmaWx0ZXJQcm90b2NvbENsO1xuXHQgICAgICAgIHZhciBfcmVmJGxvYWRVc2VySW5mbyA9IF9yZWYubG9hZFVzZXJJbmZvO1xuXHQgICAgICAgIHZhciBsb2FkVXNlckluZm8gPSBfcmVmJGxvYWRVc2VySW5mbyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkbG9hZFVzZXJJbmZvO1xuXHQgICAgICAgIHZhciBfcmVmJHN0YWxlU3RhdGVBZ2UgPSBfcmVmLnN0YWxlU3RhdGVBZ2U7XG5cdCAgICAgICAgdmFyIHN0YWxlU3RhdGVBZ2UgPSBfcmVmJHN0YWxlU3RhdGVBZ2UgPT09IHVuZGVmaW5lZCA/IERlZmF1bHRTdGFsZVN0YXRlQWdlIDogX3JlZiRzdGFsZVN0YXRlQWdlO1xuXHQgICAgICAgIHZhciBfcmVmJGNsb2NrU2tldyA9IF9yZWYuY2xvY2tTa2V3O1xuXHQgICAgICAgIHZhciBjbG9ja1NrZXcgPSBfcmVmJGNsb2NrU2tldyA9PT0gdW5kZWZpbmVkID8gRGVmYXVsdENsb2NrU2tld0luU2Vjb25kcyA6IF9yZWYkY2xvY2tTa2V3O1xuXHQgICAgICAgIHZhciBfcmVmJHN0YXRlU3RvcmUgPSBfcmVmLnN0YXRlU3RvcmU7XG5cdCAgICAgICAgdmFyXG5cdCAgICAgICAgLy8gb3RoZXIgYmVoYXZpb3Jcblx0ICAgICAgICBzdGF0ZVN0b3JlID0gX3JlZiRzdGF0ZVN0b3JlID09PSB1bmRlZmluZWQgPyBuZXcgX1dlYlN0b3JhZ2VTdGF0ZVN0b3JlMi5kZWZhdWx0KCkgOiBfcmVmJHN0YXRlU3RvcmU7XG5cdCAgICAgICAgdmFyIF9yZWYkUmVzcG9uc2VWYWxpZGF0byA9IF9yZWYuUmVzcG9uc2VWYWxpZGF0b3JDdG9yO1xuXHQgICAgICAgIHZhciBSZXNwb25zZVZhbGlkYXRvckN0b3IgPSBfcmVmJFJlc3BvbnNlVmFsaWRhdG8gPT09IHVuZGVmaW5lZCA/IF9SZXNwb25zZVZhbGlkYXRvcjIuZGVmYXVsdCA6IF9yZWYkUmVzcG9uc2VWYWxpZGF0bztcblx0ICAgICAgICB2YXIgX3JlZiRNZXRhZGF0YVNlcnZpY2VDID0gX3JlZi5NZXRhZGF0YVNlcnZpY2VDdG9yO1xuXHQgICAgICAgIHZhciBNZXRhZGF0YVNlcnZpY2VDdG9yID0gX3JlZiRNZXRhZGF0YVNlcnZpY2VDID09PSB1bmRlZmluZWQgPyBfTWV0YWRhdGFTZXJ2aWNlMi5kZWZhdWx0IDogX3JlZiRNZXRhZGF0YVNlcnZpY2VDO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT2lkY0NsaWVudFNldHRpbmdzKTtcblx0XG5cdCAgICAgICAgdGhpcy5fYXV0aG9yaXR5ID0gYXV0aG9yaXR5O1xuXHQgICAgICAgIHRoaXMuX21ldGFkYXRhVXJsID0gbWV0YWRhdGFVcmw7XG5cdCAgICAgICAgdGhpcy5fbWV0YWRhdGEgPSBtZXRhZGF0YTtcblx0ICAgICAgICB0aGlzLl9zaWduaW5nS2V5cyA9IHNpZ25pbmdLZXlzO1xuXHRcblx0ICAgICAgICB0aGlzLl9jbGllbnRfaWQgPSBjbGllbnRfaWQ7XG5cdCAgICAgICAgdGhpcy5fcmVzcG9uc2VfdHlwZSA9IHJlc3BvbnNlX3R5cGU7XG5cdCAgICAgICAgdGhpcy5fc2NvcGUgPSBzY29wZTtcblx0ICAgICAgICB0aGlzLl9yZWRpcmVjdF91cmkgPSByZWRpcmVjdF91cmk7XG5cdCAgICAgICAgdGhpcy5fcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xuXHRcblx0ICAgICAgICB0aGlzLl9wcm9tcHQgPSBwcm9tcHQ7XG5cdCAgICAgICAgdGhpcy5fZGlzcGxheSA9IGRpc3BsYXk7XG5cdCAgICAgICAgdGhpcy5fbWF4X2FnZSA9IG1heF9hZ2U7XG5cdCAgICAgICAgdGhpcy5fdWlfbG9jYWxlcyA9IHVpX2xvY2FsZXM7XG5cdCAgICAgICAgdGhpcy5fYWNyX3ZhbHVlcyA9IGFjcl92YWx1ZXM7XG5cdFxuXHQgICAgICAgIHRoaXMuX2ZpbHRlclByb3RvY29sQ2xhaW1zID0gISFmaWx0ZXJQcm90b2NvbENsYWltcztcblx0ICAgICAgICB0aGlzLl9sb2FkVXNlckluZm8gPSAhIWxvYWRVc2VySW5mbztcblx0ICAgICAgICB0aGlzLl9zdGFsZVN0YXRlQWdlID0gc3RhbGVTdGF0ZUFnZTtcblx0ICAgICAgICB0aGlzLl9jbG9ja1NrZXcgPSBjbG9ja1NrZXc7XG5cdFxuXHQgICAgICAgIHRoaXMuX3N0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlO1xuXHQgICAgICAgIHRoaXMuX3ZhbGlkYXRvciA9IG5ldyBSZXNwb25zZVZhbGlkYXRvckN0b3IodGhpcyk7XG5cdCAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gbmV3IE1ldGFkYXRhU2VydmljZUN0b3IodGhpcyk7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gY2xpZW50IGNvbmZpZ1xuXHRcblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoT2lkY0NsaWVudFNldHRpbmdzLCBbe1xuXHQgICAgICAgIGtleTogJ2NsaWVudF9pZCcsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfaWQ7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuXHQgICAgICAgICAgICBpZiAoIXRoaXMuX2NsaWVudF9pZCkge1xuXHQgICAgICAgICAgICAgICAgLy8gb25lLXRpbWUgc2V0IG9ubHlcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2NsaWVudF9pZCA9IHZhbHVlO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcImNsaWVudF9pZCBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKTtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNsaWVudF9pZCBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZXNwb25zZV90eXBlJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlX3R5cGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3Njb3BlJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Njb3BlO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZWRpcmVjdF91cmknLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVkaXJlY3RfdXJpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdwb3N0X2xvZ291dF9yZWRpcmVjdF91cmknLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLy8gb3B0aW9uYWwgcHJvdG9jb2wgcGFyYW1zXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3Byb21wdCcsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9tcHQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2Rpc3BsYXknLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnbWF4X2FnZScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXhfYWdlO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICd1aV9sb2NhbGVzJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VpX2xvY2FsZXM7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2Fjcl92YWx1ZXMnLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fYWNyX3ZhbHVlcztcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8vIG1ldGFkYXRhXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2F1dGhvcml0eScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdXRob3JpdHk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuXHQgICAgICAgICAgICBpZiAoIXRoaXMuX2F1dGhvcml0eSkge1xuXHQgICAgICAgICAgICAgICAgLy8gb25lLXRpbWUgc2V0IG9ubHlcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2F1dGhvcml0eSA9IHZhbHVlO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcImF1dGhvcml0eSBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKTtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dGhvcml0eSBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdtZXRhZGF0YVVybCcsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIGlmICghdGhpcy5fbWV0YWRhdGFVcmwpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX21ldGFkYXRhVXJsID0gdGhpcy5hdXRob3JpdHk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsICYmIHRoaXMuX21ldGFkYXRhVXJsLmluZGV4T2YoT2lkY01ldGFkYXRhVXJsUGF0aCkgPCAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsW3RoaXMuX21ldGFkYXRhVXJsLmxlbmd0aCAtIDFdICE9PSAnLycpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgKz0gJy8nO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSBPaWRjTWV0YWRhdGFVcmxQYXRoO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFVcmw7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyBzZXR0YWJsZS9jYWNoYWJsZSBtZXRhZGF0YSB2YWx1ZXNcblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnbWV0YWRhdGEnLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGE7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IHZhbHVlO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdzaWduaW5nS2V5cycsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5nS2V5cztcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NpZ25pbmdLZXlzID0gdmFsdWU7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyBiZWhhdmlvciBmbGFnc1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdmaWx0ZXJQcm90b2NvbENsYWltcycsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJQcm90b2NvbENsYWltcztcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnbG9hZFVzZXJJbmZvJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVc2VySW5mbztcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnc3RhbGVTdGF0ZUFnZScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGFsZVN0YXRlQWdlO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjbG9ja1NrZXcnLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2xvY2tTa2V3O1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdzdGF0ZVN0b3JlJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlU3RvcmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3ZhbGlkYXRvcicsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0b3I7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ21ldGFkYXRhU2VydmljZScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2U7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBPaWRjQ2xpZW50U2V0dGluZ3M7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IE9pZGNDbGllbnRTZXR0aW5ncztcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9Mb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9Mb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9nKTtcblx0XG5cdHZhciBfR2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciBfR2xvYmFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0dsb2JhbCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH0gLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIFdlYlN0b3JhZ2VTdGF0ZVN0b3JlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gV2ViU3RvcmFnZVN0YXRlU3RvcmUoKSB7XG5cdCAgICAgICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblx0XG5cdCAgICAgICAgdmFyIF9yZWYkcHJlZml4ID0gX3JlZi5wcmVmaXg7XG5cdCAgICAgICAgdmFyIHByZWZpeCA9IF9yZWYkcHJlZml4ID09PSB1bmRlZmluZWQgPyBcIm9pZGMuXCIgOiBfcmVmJHByZWZpeDtcblx0ICAgICAgICB2YXIgX3JlZiRzdG9yZSA9IF9yZWYuc3RvcmU7XG5cdCAgICAgICAgdmFyIHN0b3JlID0gX3JlZiRzdG9yZSA9PT0gdW5kZWZpbmVkID8gX0dsb2JhbDIuZGVmYXVsdC5sb2NhbFN0b3JhZ2UgOiBfcmVmJHN0b3JlO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2ViU3RvcmFnZVN0YXRlU3RvcmUpO1xuXHRcblx0ICAgICAgICB0aGlzLl9zdG9yZSA9IHN0b3JlO1xuXHQgICAgICAgIHRoaXMuX3ByZWZpeCA9IHByZWZpeDtcblx0ICAgIH1cblx0XG5cdCAgICBXZWJTdG9yYWdlU3RhdGVTdG9yZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJXZWJTdG9yYWdlU3RhdGVTdG9yZS5zZXRcIiwga2V5KTtcblx0XG5cdCAgICAgICAga2V5ID0gdGhpcy5fcHJlZml4ICsga2V5O1xuXHRcblx0ICAgICAgICB0aGlzLl9zdG9yZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuXHRcblx0ICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFdlYlN0b3JhZ2VTdGF0ZVN0b3JlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUuZ2V0XCIsIGtleSk7XG5cdFxuXHQgICAgICAgIGtleSA9IHRoaXMuX3ByZWZpeCArIGtleTtcblx0XG5cdCAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLl9zdG9yZS5nZXRJdGVtKGtleSk7XG5cdFxuXHQgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaXRlbSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFdlYlN0b3JhZ2VTdGF0ZVN0b3JlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoa2V5KSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUucmVtb3ZlXCIsIGtleSk7XG5cdFxuXHQgICAgICAgIGtleSA9IHRoaXMuX3ByZWZpeCArIGtleTtcblx0XG5cdCAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLl9zdG9yZS5nZXRJdGVtKGtleSk7XG5cdCAgICAgICAgdGhpcy5fc3RvcmUucmVtb3ZlSXRlbShrZXkpO1xuXHRcblx0ICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGl0ZW0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBXZWJTdG9yYWdlU3RhdGVTdG9yZS5wcm90b3R5cGUuZ2V0QWxsS2V5cyA9IGZ1bmN0aW9uIGdldEFsbEtleXMoKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUuZ2V0QWxsS2V5c1wiKTtcblx0XG5cdCAgICAgICAgdmFyIGtleXMgPSBbXTtcblx0XG5cdCAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX3N0b3JlLmxlbmd0aDsgaW5kZXgrKykge1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fc3RvcmUua2V5KGluZGV4KTtcblx0XG5cdCAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZih0aGlzLl9wcmVmaXgpID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5LnN1YnN0cih0aGlzLl9wcmVmaXgubGVuZ3RoKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoa2V5cyk7XG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiBXZWJTdG9yYWdlU3RhdGVTdG9yZTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gV2ViU3RvcmFnZVN0YXRlU3RvcmU7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHQvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgdGltZXIgPSB7XG5cdCAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoX3NldFRpbWVvdXQpIHtcblx0ICAgICAgICBmdW5jdGlvbiBzZXRUaW1lb3V0KF94LCBfeDIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF9zZXRUaW1lb3V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBzZXRUaW1lb3V0LnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gX3NldFRpbWVvdXQudG9TdHJpbmcoKTtcblx0ICAgICAgICB9O1xuXHRcblx0ICAgICAgICByZXR1cm4gc2V0VGltZW91dDtcblx0ICAgIH0oZnVuY3Rpb24gKGNiLCBkdXJhdGlvbikge1xuXHQgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGNiLCBkdXJhdGlvbik7XG5cdCAgICB9KSxcblx0ICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKF9jbGVhclRpbWVvdXQpIHtcblx0ICAgICAgICBmdW5jdGlvbiBjbGVhclRpbWVvdXQoX3gzKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfY2xlYXJUaW1lb3V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBjbGVhclRpbWVvdXQudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfY2xlYXJUaW1lb3V0LnRvU3RyaW5nKCk7XG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dDtcblx0ICAgIH0oZnVuY3Rpb24gKGhhbmRsZSkge1xuXHQgICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQoaGFuZGxlKTtcblx0ICAgIH0pXG5cdH07XG5cdFxuXHR2YXIgdGVzdGluZyA9IGZhbHNlO1xuXHRcblx0dmFyIEdsb2JhbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEdsb2JhbCgpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xvYmFsKTtcblx0ICAgIH1cblx0XG5cdCAgICBHbG9iYWwuX3Rlc3RpbmcgPSBmdW5jdGlvbiBfdGVzdGluZygpIHtcblx0ICAgICAgICB0ZXN0aW5nID0gdHJ1ZTtcblx0ICAgIH07XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEdsb2JhbCwgbnVsbCwgW3tcblx0ICAgICAgICBrZXk6IFwibG9jYXRpb25cIixcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgaWYgKCF0ZXN0aW5nKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRpb247XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcImxvY2FsU3RvcmFnZVwiLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICBpZiAoIXRlc3RpbmcpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcInNlc3Npb25TdG9yYWdlXCIsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIGlmICghdGVzdGluZykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJYTUxIdHRwUmVxdWVzdFwiLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICBpZiAoIXRlc3RpbmcpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBYTUxIdHRwUmVxdWVzdDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwidGltZXJcIixcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgaWYgKCF0ZXN0aW5nKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGltZXI7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIEdsb2JhbDtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gR2xvYmFsO1xuXHQ7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHR2YXIgX01ldGFkYXRhU2VydmljZSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdFxuXHR2YXIgX01ldGFkYXRhU2VydmljZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZXRhZGF0YVNlcnZpY2UpO1xuXHRcblx0dmFyIF9Vc2VySW5mb1NlcnZpY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHRcblx0dmFyIF9Vc2VySW5mb1NlcnZpY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXNlckluZm9TZXJ2aWNlKTtcblx0XG5cdHZhciBfRXJyb3JSZXNwb25zZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0dmFyIF9FcnJvclJlc3BvbnNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Vycm9yUmVzcG9uc2UpO1xuXHRcblx0dmFyIF9Kb3NlVXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIF9Kb3NlVXRpbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Kb3NlVXRpbCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH0gLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIFByb3RvY29sQ2xhaW1zID0gW1wibm9uY2VcIiwgXCJhdF9oYXNoXCIsIFwiaWF0XCIsIFwibmJmXCIsIFwiZXhwXCIsIFwiYXVkXCIsIFwiaXNzXCIsIFwiY19oYXNoXCJdO1xuXHRcblx0dmFyIFJlc3BvbnNlVmFsaWRhdG9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gUmVzcG9uc2VWYWxpZGF0b3Ioc2V0dGluZ3MpIHtcblx0ICAgICAgICB2YXIgTWV0YWRhdGFTZXJ2aWNlQ3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IF9NZXRhZGF0YVNlcnZpY2UyLmRlZmF1bHQgOiBhcmd1bWVudHNbMV07XG5cdCAgICAgICAgdmFyIFVzZXJJbmZvU2VydmljZUN0b3IgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBfVXNlckluZm9TZXJ2aWNlMi5kZWZhdWx0IDogYXJndW1lbnRzWzJdO1xuXHQgICAgICAgIHZhciBqb3NlVXRpbCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMyB8fCBhcmd1bWVudHNbM10gPT09IHVuZGVmaW5lZCA/IF9Kb3NlVXRpbDIuZGVmYXVsdCA6IGFyZ3VtZW50c1szXTtcblx0XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc3BvbnNlVmFsaWRhdG9yKTtcblx0XG5cdCAgICAgICAgaWYgKCFzZXR0aW5ncykge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gc2V0dGluZ3MgcGFzc2VkIHRvIFJlc3BvbnNlVmFsaWRhdG9yXCIpO1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR0aW5nc1wiKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG5cdCAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gbmV3IE1ldGFkYXRhU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xuXHQgICAgICAgIHRoaXMuX3VzZXJJbmZvU2VydmljZSA9IG5ldyBVc2VySW5mb1NlcnZpY2VDdG9yKHRoaXMuX3NldHRpbmdzKTtcblx0ICAgICAgICB0aGlzLl9qb3NlVXRpbCA9IGpvc2VVdGlsO1xuXHQgICAgfVxuXHRcblx0ICAgIFJlc3BvbnNlVmFsaWRhdG9yLnByb3RvdHlwZS52YWxpZGF0ZVNpZ25pblJlc3BvbnNlID0gZnVuY3Rpb24gdmFsaWRhdGVTaWduaW5SZXNwb25zZShzdGF0ZSwgcmVzcG9uc2UpIHtcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25pblJlc3BvbnNlXCIpO1xuXHRcblx0ICAgICAgICByZXR1cm4gdGhpcy5fcHJvY2Vzc1NpZ25pblBhcmFtcyhzdGF0ZSwgcmVzcG9uc2UpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcInN0YXRlIHByb2Nlc3NlZFwiKTtcblx0ICAgICAgICAgICAgcmV0dXJuIF90aGlzLl92YWxpZGF0ZVRva2VucyhzdGF0ZSwgcmVzcG9uc2UpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJ0b2tlbnMgdmFsaWRhdGVkXCIpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9wcm9jZXNzQ2xhaW1zKHJlc3BvbnNlKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcImNsYWltcyBwcm9jZXNzZWRcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZXNwb25zZVZhbGlkYXRvci5wcm90b3R5cGUudmFsaWRhdGVTaWdub3V0UmVzcG9uc2UgPSBmdW5jdGlvbiB2YWxpZGF0ZVNpZ25vdXRSZXNwb25zZShzdGF0ZSwgcmVzcG9uc2UpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZVwiKTtcblx0XG5cdCAgICAgICAgaWYgKHN0YXRlLmlkICE9PSByZXNwb25zZS5zdGF0ZSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIik7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJTdGF0ZSBkb2VzIG5vdCBtYXRjaFwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyBub3cgdGhhdCB3ZSBrbm93IHRoZSBzdGF0ZSBtYXRjaGVzLCB0YWtlIHRoZSBzdG9yZWQgZGF0YVxuXHQgICAgICAgIC8vIGFuZCBzZXQgaXQgaW50byB0aGUgcmVzcG9uc2Ugc28gY2FsbGVycyBjYW4gZ2V0IHRoZWlyIHN0YXRlXG5cdCAgICAgICAgLy8gdGhpcyBpcyBpbXBvcnRhbnQgZm9yIGJvdGggc3VjY2VzcyAmIGVycm9yIG91dGNvbWVzXG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwic3RhdGUgdmFsaWRhdGVkXCIpO1xuXHQgICAgICAgIHJlc3BvbnNlLnN0YXRlID0gc3RhdGUuZGF0YTtcblx0XG5cdCAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQud2FybihcIlJlc3BvbnNlIHdhcyBlcnJvclwiLCByZXNwb25zZS5lcnJvcik7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgX0Vycm9yUmVzcG9uc2UyLmRlZmF1bHQocmVzcG9uc2UpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZXNwb25zZVZhbGlkYXRvci5wcm90b3R5cGUuX3Byb2Nlc3NTaWduaW5QYXJhbXMgPSBmdW5jdGlvbiBfcHJvY2Vzc1NpZ25pblBhcmFtcyhzdGF0ZSwgcmVzcG9uc2UpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtc1wiKTtcblx0XG5cdCAgICAgICAgaWYgKHN0YXRlLmlkICE9PSByZXNwb25zZS5zdGF0ZSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIik7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJTdGF0ZSBkb2VzIG5vdCBtYXRjaFwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoIXN0YXRlLmNsaWVudF9pZCkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gY2xpZW50X2lkIG9uIHN0YXRlXCIpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gY2xpZW50X2lkIG9uIHN0YXRlXCIpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICghc3RhdGUuYXV0aG9yaXR5KSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJObyBhdXRob3JpdHkgb24gc3RhdGVcIik7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBhdXRob3JpdHkgb24gc3RhdGVcIikpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLy8gdGhpcyBhbGxvd3MgdGhlIGF1dGhvcml0eSB0byBiZSBsb2FkZWQgZnJvbSB0aGUgc2lnbmluIHN0YXRlXG5cdCAgICAgICAgaWYgKCF0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkpIHtcblx0ICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5ID0gc3RhdGUuYXV0aG9yaXR5O1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBlbnN1cmUgd2UncmUgdXNpbmcgdGhlIGNvcnJlY3QgYXV0aG9yaXR5IGlmIHRoZSBhdXRob3JpdHkgaXMgbm90IGxvYWRlZCBmcm9tIHNpZ25pbiBzdGF0ZVxuXHQgICAgICAgIGVsc2UgaWYgKHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eSAmJiB0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkgIT09IHN0YXRlLmF1dGhvcml0eSkge1xuXHQgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcImF1dGhvcml0eSBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImF1dGhvcml0eSBtaXNtYXRjaCBvbiBzZXR0aW5ncyB2cy4gc2lnbmluIHN0YXRlXCIpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIC8vIHRoaXMgYWxsb3dzIHRoZSBjbGllbnRfaWQgdG8gYmUgbG9hZGVkIGZyb20gdGhlIHNpZ25pbiBzdGF0ZVxuXHQgICAgICAgIGlmICghdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCA9IHN0YXRlLmNsaWVudF9pZDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gZW5zdXJlIHdlJ3JlIHVzaW5nIHRoZSBjb3JyZWN0IGNsaWVudF9pZCBpZiB0aGUgY2xpZW50X2lkIGlzIG5vdCBsb2FkZWQgZnJvbSBzaWduaW4gc3RhdGVcblx0ICAgICAgICBlbHNlIGlmICh0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQgJiYgdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkICE9PSBzdGF0ZS5jbGllbnRfaWQpIHtcblx0ICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJjbGllbnRfaWQgbWlzbWF0Y2ggb24gc2V0dGluZ3MgdnMuIHNpZ25pbiBzdGF0ZVwiKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJjbGllbnRfaWQgbWlzbWF0Y2ggb24gc2V0dGluZ3MgdnMuIHNpZ25pbiBzdGF0ZVwiKSk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgLy8gbm93IHRoYXQgd2Uga25vdyB0aGUgc3RhdGUgbWF0Y2hlcywgdGFrZSB0aGUgc3RvcmVkIGRhdGFcblx0ICAgICAgICAvLyBhbmQgc2V0IGl0IGludG8gdGhlIHJlc3BvbnNlIHNvIGNhbGxlcnMgY2FuIGdldCB0aGVpciBzdGF0ZVxuXHQgICAgICAgIC8vIHRoaXMgaXMgaW1wb3J0YW50IGZvciBib3RoIHN1Y2Nlc3MgJiBlcnJvciBvdXRjb21lc1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcInN0YXRlIHZhbGlkYXRlZFwiKTtcblx0ICAgICAgICByZXNwb25zZS5zdGF0ZSA9IHN0YXRlLmRhdGE7XG5cdFxuXHQgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0Lndhcm4oXCJSZXNwb25zZSB3YXMgZXJyb3JcIiwgcmVzcG9uc2UuZXJyb3IpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IF9FcnJvclJlc3BvbnNlMi5kZWZhdWx0KHJlc3BvbnNlKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoc3RhdGUubm9uY2UgJiYgIXJlc3BvbnNlLmlkX3Rva2VuKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJFeHBlY3RpbmcgaWRfdG9rZW4gaW4gcmVzcG9uc2VcIik7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBpZF90b2tlbiBpbiByZXNwb25zZVwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoIXN0YXRlLm5vbmNlICYmIHJlc3BvbnNlLmlkX3Rva2VuKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJOb3QgZXhwZWN0aW5nIGlkX3Rva2VuIGluIHJlc3BvbnNlXCIpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBpZF90b2tlbiBpbiByZXNwb25zZVwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVzcG9uc2VWYWxpZGF0b3IucHJvdG90eXBlLl9wcm9jZXNzQ2xhaW1zID0gZnVuY3Rpb24gX3Byb2Nlc3NDbGFpbXMocmVzcG9uc2UpIHtcblx0ICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXNcIik7XG5cdFxuXHQgICAgICAgIGlmIChyZXNwb25zZS5pc09wZW5JZENvbm5lY3QpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwicmVzcG9uc2UgaXMgT0lEQywgcHJvY2Vzc2luZyBjbGFpbXNcIik7XG5cdFxuXHQgICAgICAgICAgICByZXNwb25zZS5wcm9maWxlID0gdGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMocmVzcG9uc2UucHJvZmlsZSk7XG5cdFxuXHQgICAgICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MubG9hZFVzZXJJbmZvICYmIHJlc3BvbnNlLmFjY2Vzc190b2tlbikge1xuXHQgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwibG9hZGluZyB1c2VyIGluZm9cIik7XG5cdFxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJJbmZvU2VydmljZS5nZXRDbGFpbXMocmVzcG9uc2UuYWNjZXNzX3Rva2VuKS50aGVuKGZ1bmN0aW9uIChjbGFpbXMpIHtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucHJvZmlsZSA9IF90aGlzMi5fbWVyZ2VDbGFpbXMocmVzcG9uc2UucHJvZmlsZSwgY2xhaW1zKTtcblx0ICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJ1c2VyIGluZm8gY2xhaW1zIHJlY2VpdmVkLCB1cGRhdGVkIHByb2ZpbGU6XCIsIHJlc3BvbnNlLnByb2ZpbGUpO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIm5vdCBsb2FkaW5nIHVzZXIgaW5mb1wiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcInJlc3BvbnNlIGlzIG5vdCBPSURDLCBub3QgcHJvY2Vzc2luZyBjbGFpbXNcIik7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVzcG9uc2VWYWxpZGF0b3IucHJvdG90eXBlLl9tZXJnZUNsYWltcyA9IGZ1bmN0aW9uIF9tZXJnZUNsYWltcyhjbGFpbXMxLCBjbGFpbXMyKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oe30sIGNsYWltczEpO1xuXHRcblx0ICAgICAgICBmb3IgKHZhciBuYW1lIGluIGNsYWltczIpIHtcblx0ICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGNsYWltczJbbmFtZV07XG5cdCAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbdmFsdWVzXTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuXHQgICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcblx0ICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHZhbHVlc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfc3RlcC52YWx1ZTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbbmFtZV0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gdmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdFtuYW1lXSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFtuYW1lXS5pbmRleE9mKHZhbHVlKSA8IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXS5wdXNoKHZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0W25hbWVdICE9PSB2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBbcmVzdWx0W25hbWVdLCB2YWx1ZV07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHQgICAgICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHQgICAgfTtcblx0XG5cdCAgICBSZXNwb25zZVZhbGlkYXRvci5wcm90b3R5cGUuX2ZpbHRlclByb3RvY29sQ2xhaW1zID0gZnVuY3Rpb24gX2ZpbHRlclByb3RvY29sQ2xhaW1zKGNsYWltcykge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9maWx0ZXJQcm90b2NvbENsYWltcywgaW5jb21pbmcgY2xhaW1zOlwiLCBjbGFpbXMpO1xuXHRcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgY2xhaW1zKTtcblx0XG5cdCAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLl9maWx0ZXJQcm90b2NvbENsYWltcykge1xuXHQgICAgICAgICAgICBQcm90b2NvbENsYWltcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG5cdCAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0W3R5cGVdO1xuXHQgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcInByb3RvY29sIGNsYWltcyBmaWx0ZXJlZFwiLCByZXN1bHQpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcInByb3RvY29sIGNsYWltcyBub3QgZmlsdGVyZWRcIik7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHQgICAgfTtcblx0XG5cdCAgICBSZXNwb25zZVZhbGlkYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRlVG9rZW5zID0gZnVuY3Rpb24gX3ZhbGlkYXRlVG9rZW5zKHN0YXRlLCByZXNwb25zZSkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZVRva2Vuc1wiKTtcblx0XG5cdCAgICAgICAgaWYgKHJlc3BvbnNlLmlkX3Rva2VuKSB7XG5cdFxuXHQgICAgICAgICAgICBpZiAocmVzcG9uc2UuYWNjZXNzX3Rva2VuKSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJWYWxpZGF0aW5nIGlkX3Rva2VuIGFuZCBhY2Nlc3NfdG9rZW5cIik7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4oc3RhdGUsIHJlc3BvbnNlKTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiVmFsaWRhdGluZyBpZF90b2tlblwiKTtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbihzdGF0ZSwgcmVzcG9uc2UpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiTm8gaWRfdG9rZW4gdG8gdmFsaWRhdGVcIik7XG5cdCAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFJlc3BvbnNlVmFsaWRhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4gPSBmdW5jdGlvbiBfdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4oc3RhdGUsIHJlc3BvbnNlKSB7XG5cdCAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW5BbmRBY2Nlc3NUb2tlblwiKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbihzdGF0ZSwgcmVzcG9uc2UpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfdGhpczMuX3ZhbGlkYXRlQWNjZXNzVG9rZW4ocmVzcG9uc2UpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBSZXNwb25zZVZhbGlkYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRlSWRUb2tlbiA9IGZ1bmN0aW9uIF92YWxpZGF0ZUlkVG9rZW4oc3RhdGUsIHJlc3BvbnNlKSB7XG5cdCAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW5cIik7XG5cdFxuXHQgICAgICAgIGlmICghc3RhdGUubm9uY2UpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIk5vIG5vbmNlIG9uIHN0YXRlXCIpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gbm9uY2Ugb24gc3RhdGVcIikpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdmFyIGp3dCA9IHRoaXMuX2pvc2VVdGlsLnBhcnNlSnd0KHJlc3BvbnNlLmlkX3Rva2VuKTtcblx0ICAgICAgICBpZiAoIWp3dCB8fCAhand0LmhlYWRlciB8fCAhand0LnBheWxvYWQpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIkZhaWxlZCB0byBwYXJzZSBpZF90b2tlblwiLCBqd3QpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIGlkX3Rva2VuXCIpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmIChzdGF0ZS5ub25jZSAhPT0gand0LnBheWxvYWQubm9uY2UpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIkludmFsaWQgbm9uY2UgaW4gaWRfdG9rZW5cIik7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIG5vbmNlIGluIGlkX3Rva2VuXCIpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBraWQgPSBqd3QuaGVhZGVyLmtpZDtcblx0ICAgICAgICBpZiAoIWtpZCkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuXCIpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuXCIpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0SXNzdWVyKCkudGhlbihmdW5jdGlvbiAoaXNzdWVyKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJlY2VpdmVkIGlzc3VlclwiKTtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfdGhpczQuX21ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5cygpLnRoZW4oZnVuY3Rpb24gKGtleXMpIHtcblx0ICAgICAgICAgICAgICAgIGlmICgha2V5cykge1xuXHQgICAgICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJObyBzaWduaW5nIGtleXMgZnJvbSBtZXRhZGF0YVwiKTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc2lnbmluZyBrZXlzIGZyb20gbWV0YWRhdGFcIikpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJlY2VpdmVkIHNpZ25pbmcga2V5c1wiKTtcblx0XG5cdCAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXkua2lkID09PSBraWQ7XG5cdCAgICAgICAgICAgICAgICB9KVswXTtcblx0XG5cdCAgICAgICAgICAgICAgICBpZiAoIWtleSkge1xuXHQgICAgICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJObyBrZXkgbWF0Y2hpbmcga2lkIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8ga2V5IG1hdGNoaW5nIGtpZCBmb3VuZCBpbiBzaWduaW5nIGtleXNcIikpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICAgIHZhciBhdWRpZW5jZSA9IHN0YXRlLmNsaWVudF9pZDtcblx0XG5cdCAgICAgICAgICAgICAgICB2YXIgY2xvY2tTa2V3SW5TZWNvbmRzID0gX3RoaXM0Ll9zZXR0aW5ncy5jbG9ja1NrZXc7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJWYWxpZGFpbmcgSldUOyB1c2luZyBjbG9jayBza2V3IChpbiBzZWNvbmRzKSBvZjogXCIsIGNsb2NrU2tld0luU2Vjb25kcyk7XG5cdFxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5fam9zZVV0aWwudmFsaWRhdGVKd3QocmVzcG9uc2UuaWRfdG9rZW4sIGtleSwgaXNzdWVyLCBhdWRpZW5jZSwgY2xvY2tTa2V3SW5TZWNvbmRzKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJKV1QgdmFsaWRhdGlvbiBzdWNjZXNzZnVsXCIpO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5wcm9maWxlID0gand0LnBheWxvYWQ7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVzcG9uc2VWYWxpZGF0b3IucHJvdG90eXBlLl92YWxpZGF0ZUFjY2Vzc1Rva2VuID0gZnVuY3Rpb24gX3ZhbGlkYXRlQWNjZXNzVG9rZW4ocmVzcG9uc2UpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlblwiKTtcblx0XG5cdCAgICAgICAgaWYgKCFyZXNwb25zZS5wcm9maWxlKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJObyBwcm9maWxlIGxvYWRlZCBmcm9tIGlkX3Rva2VuXCIpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gcHJvZmlsZSBsb2FkZWQgZnJvbSBpZF90b2tlblwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoIXJlc3BvbnNlLnByb2ZpbGUuYXRfaGFzaCkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gYXRfaGFzaCBpbiBpZF90b2tlblwiKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGF0X2hhc2ggaW4gaWRfdG9rZW5cIikpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKCFyZXNwb25zZS5pZF90b2tlbikge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gaWRfdG9rZW5cIik7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBpZF90b2tlblwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB2YXIgand0ID0gdGhpcy5fam9zZVV0aWwucGFyc2VKd3QocmVzcG9uc2UuaWRfdG9rZW4pO1xuXHQgICAgICAgIGlmICghand0IHx8ICFqd3QuaGVhZGVyKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIiwgand0KTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBpZF90b2tlblwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB2YXIgaGFzaEFsZyA9IGp3dC5oZWFkZXIuYWxnO1xuXHQgICAgICAgIGlmICghaGFzaEFsZyB8fCBoYXNoQWxnLmxlbmd0aCAhPT0gNSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiVW5zdXBwb3J0ZWQgYWxnOlwiLCBoYXNoQWxnKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGFsZzogXCIgKyBoYXNoQWxnKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB2YXIgaGFzaEJpdHMgPSBoYXNoQWxnLnN1YnN0cigyLCAzKTtcblx0ICAgICAgICBpZiAoIWhhc2hCaXRzKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJVbnN1cHBvcnRlZCBhbGc6XCIsIGhhc2hBbGcsIGhhc2hCaXRzKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGFsZzogXCIgKyBoYXNoQWxnKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBoYXNoQml0cyA9IHBhcnNlSW50KGhhc2hCaXRzKTtcblx0ICAgICAgICBpZiAoaGFzaEJpdHMgIT09IDI1NiAmJiBoYXNoQml0cyAhPT0gMzg0ICYmIGhhc2hCaXRzICE9PSA1MTIpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIlVuc3VwcG9ydGVkIGFsZzpcIiwgaGFzaEFsZywgaGFzaEJpdHMpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgYWxnOiBcIiArIGhhc2hBbGcpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBzaGEgPSBcInNoYVwiICsgaGFzaEJpdHM7XG5cdCAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9qb3NlVXRpbC5oYXNoU3RyaW5nKHJlc3BvbnNlLmFjY2Vzc190b2tlbiwgc2hhKTtcblx0ICAgICAgICBpZiAoIWhhc2gpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcImFjY2Vzc190b2tlbiBoYXNoIGZhaWxlZDpcIiwgc2hhKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byB2YWxpZGF0ZSBhdF9oYXNoXCIpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBsZWZ0ID0gaGFzaC5zdWJzdHIoMCwgaGFzaC5sZW5ndGggLyAyKTtcblx0ICAgICAgICB2YXIgbGVmdF9iNjR1ID0gdGhpcy5fam9zZVV0aWwuaGV4VG9CYXNlNjRVcmwobGVmdCk7XG5cdCAgICAgICAgaWYgKGxlZnRfYjY0dSAhPT0gcmVzcG9uc2UucHJvZmlsZS5hdF9oYXNoKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJGYWlsZWQgdG8gdmFsaWRhdGUgYXRfaGFzaFwiLCBsZWZ0X2I2NHUsIHJlc3BvbnNlLnByb2ZpbGUuYXRfaGFzaCk7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gdmFsaWRhdGUgYXRfaGFzaFwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgcmV0dXJuIFJlc3BvbnNlVmFsaWRhdG9yO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBSZXNwb25zZVZhbGlkYXRvcjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9Mb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9Mb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9nKTtcblx0XG5cdHZhciBfSnNvblNlcnZpY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHRcblx0dmFyIF9Kc29uU2VydmljZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Kc29uU2VydmljZSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH0gLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIE1ldGFkYXRhU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE1ldGFkYXRhU2VydmljZShzZXR0aW5ncykge1xuXHQgICAgICAgIHZhciBKc29uU2VydmljZUN0b3IgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBfSnNvblNlcnZpY2UyLmRlZmF1bHQgOiBhcmd1bWVudHNbMV07XG5cdFxuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZXRhZGF0YVNlcnZpY2UpO1xuXHRcblx0ICAgICAgICBpZiAoIXNldHRpbmdzKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJObyBzZXR0aW5ncyBwYXNzZWQgdG8gTWV0YWRhdGFTZXJ2aWNlXCIpO1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR0aW5nc1wiKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG5cdCAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKCk7XG5cdCAgICB9XG5cdFxuXHQgICAgTWV0YWRhdGFTZXJ2aWNlLnByb3RvdHlwZS5nZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIGdldE1ldGFkYXRhKCkge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YVwiKTtcblx0XG5cdCAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJldHVybmluZyBtZXRhZGF0YSBmcm9tIHNldHRpbmdzXCIpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmICghdGhpcy5fc2V0dGluZ3MubWV0YWRhdGFVcmwpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIk5vIG1ldGFkYXRhVXJsIGNvbmZpZ3VyZWQgb24gc2V0dGluZ3NcIik7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBtZXRhZGF0YVVybCBjb25maWd1cmVkIG9uIHNldHRpbmdzXCIpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcImdldHRpbmcgbWV0YWRhdGEgZnJvbVwiLCB0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YVVybCk7XG5cdFxuXHQgICAgICAgIHJldHVybiB0aGlzLl9qc29uU2VydmljZS5nZXRKc29uKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhVXJsKS50aGVuKGZ1bmN0aW9uIChtZXRhZGF0YSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJqc29uIHJlY2VpdmVkXCIpO1xuXHQgICAgICAgICAgICBfdGhpcy5fc2V0dGluZ3MubWV0YWRhdGEgPSBtZXRhZGF0YTtcblx0ICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBNZXRhZGF0YVNlcnZpY2UucHJvdG90eXBlLmdldElzc3VlciA9IGZ1bmN0aW9uIGdldElzc3VlcigpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJNZXRhZGF0YVNlcnZpY2UuZ2V0SXNzdWVyXCIpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiaXNzdWVyXCIpO1xuXHQgICAgfTtcblx0XG5cdCAgICBNZXRhZGF0YVNlcnZpY2UucHJvdG90eXBlLmdldEF1dGhvcml6YXRpb25FbmRwb2ludCA9IGZ1bmN0aW9uIGdldEF1dGhvcml6YXRpb25FbmRwb2ludCgpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJNZXRhZGF0YVNlcnZpY2UuZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50XCIpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiYXV0aG9yaXphdGlvbl9lbmRwb2ludFwiKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWV0YWRhdGFTZXJ2aWNlLnByb3RvdHlwZS5nZXRVc2VySW5mb0VuZHBvaW50ID0gZnVuY3Rpb24gZ2V0VXNlckluZm9FbmRwb2ludCgpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJNZXRhZGF0YVNlcnZpY2UuZ2V0VXNlckluZm9FbmRwb2ludFwiKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcInVzZXJpbmZvX2VuZHBvaW50XCIpO1xuXHQgICAgfTtcblx0XG5cdCAgICBNZXRhZGF0YVNlcnZpY2UucHJvdG90eXBlLmdldENoZWNrU2Vzc2lvbklmcmFtZSA9IGZ1bmN0aW9uIGdldENoZWNrU2Vzc2lvbklmcmFtZSgpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJNZXRhZGF0YVNlcnZpY2UuZ2V0Q2hlY2tTZXNzaW9uSWZyYW1lXCIpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiY2hlY2tfc2Vzc2lvbl9pZnJhbWVcIik7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1ldGFkYXRhU2VydmljZS5wcm90b3R5cGUuZ2V0RW5kU2Vzc2lvbkVuZHBvaW50ID0gZnVuY3Rpb24gZ2V0RW5kU2Vzc2lvbkVuZHBvaW50KCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIk1ldGFkYXRhU2VydmljZS5nZXRFbmRTZXNzaW9uRW5kcG9pbnRcIik7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJlbmRfc2Vzc2lvbl9lbmRwb2ludFwiKTtcblx0ICAgIH07XG5cdFxuXHQgICAgTWV0YWRhdGFTZXJ2aWNlLnByb3RvdHlwZS5fZ2V0TWV0YWRhdGFQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRNZXRhZGF0YVByb3BlcnR5KG5hbWUpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJNZXRhZGF0YVNlcnZpY2UuX2dldE1ldGFkYXRhUHJvcGVydHlcIiwgbmFtZSk7XG5cdFxuXHQgICAgICAgIHJldHVybiB0aGlzLmdldE1ldGFkYXRhKCkudGhlbihmdW5jdGlvbiAobWV0YWRhdGEpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwibWV0YWRhdGEgcmVjaWV2ZWRcIik7XG5cdFxuXHQgICAgICAgICAgICBpZiAobWV0YWRhdGFbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIk1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gcHJvcGVydHkgXCIgKyBuYW1lKTtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gcHJvcGVydHkgXCIgKyBuYW1lKTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhW25hbWVdO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBNZXRhZGF0YVNlcnZpY2UucHJvdG90eXBlLmdldFNpZ25pbmdLZXlzID0gZnVuY3Rpb24gZ2V0U2lnbmluZ0tleXMoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIk1ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5c1wiKTtcblx0XG5cdCAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLnNpZ25pbmdLZXlzKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlJldHVybmluZyBzaWduaW5nS2V5cyBmcm9tIHNldHRpbmdzXCIpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3NldHRpbmdzLnNpZ25pbmdLZXlzKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiandrc191cmlcIikudGhlbihmdW5jdGlvbiAoandrc191cmkpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiandrc191cmkgcmVjZWl2ZWRcIiwgandrc191cmkpO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5fanNvblNlcnZpY2UuZ2V0SnNvbihqd2tzX3VyaSkudGhlbihmdW5jdGlvbiAoa2V5U2V0KSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJrZXkgc2V0IHJlY2VpdmVkXCIsIGtleVNldCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKCFrZXlTZXQua2V5cykge1xuXHQgICAgICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJNaXNzaW5nIGtleXMgb24ga2V5c2V0XCIpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcga2V5cyBvbiBrZXlzZXRcIik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkS2V5cyA9IF90aGlzMi5fZmlsdGVyU2lnbmluZ0tleXMoa2V5U2V0LmtleXMpO1xuXHQgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiZmlsdGVyZWQga2V5c1wiLCBmaWx0ZXJlZEtleXMpO1xuXHRcblx0ICAgICAgICAgICAgICAgIF90aGlzMi5fc2V0dGluZ3Muc2lnbmluZ0tleXMgPSBmaWx0ZXJlZEtleXM7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9zZXR0aW5ncy5zaWduaW5nS2V5cztcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIE1ldGFkYXRhU2VydmljZS5wcm90b3R5cGUuX2ZpbHRlclNpZ25pbmdLZXlzID0gZnVuY3Rpb24gX2ZpbHRlclNpZ25pbmdLZXlzKGtleXMpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJNZXRhZGF0YVNlcnZpY2UuX2ZpbHRlclNpZ25pbmdLZXlzXCIsIGtleXMpO1xuXHRcblx0ICAgICAgICByZXR1cm4ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGl0ZW0udXNlID09PSBcInNpZ1wiO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gTWV0YWRhdGFTZXJ2aWNlO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBNZXRhZGF0YVNlcnZpY2U7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHR2YXIgX0dsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHR2YXIgX0dsb2JhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9HbG9iYWwpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9IC8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Ly8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblx0XG5cdHZhciBKc29uU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEpzb25TZXJ2aWNlKCkge1xuXHQgICAgICAgIHZhciBYTUxIdHRwUmVxdWVzdEN0b3IgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyBfR2xvYmFsMi5kZWZhdWx0LlhNTEh0dHBSZXF1ZXN0IDogYXJndW1lbnRzWzBdO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSnNvblNlcnZpY2UpO1xuXHRcblx0ICAgICAgICB0aGlzLl9YTUxIdHRwUmVxdWVzdCA9IFhNTEh0dHBSZXF1ZXN0Q3Rvcjtcblx0ICAgIH1cblx0XG5cdCAgICBKc29uU2VydmljZS5wcm90b3R5cGUuZ2V0SnNvbiA9IGZ1bmN0aW9uIGdldEpzb24odXJsLCB0b2tlbikge1xuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIkpzb25TZXJ2aWNlLmdldEpzb25cIiwgdXJsKTtcblx0XG5cdCAgICAgICAgaWYgKCF1cmwpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIk5vIHVybCBwYXNzZWRcIik7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVybFwiKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFxuXHQgICAgICAgICAgICB2YXIgcmVxID0gbmV3IF90aGlzLl9YTUxIdHRwUmVxdWVzdCgpO1xuXHQgICAgICAgICAgICByZXEub3BlbignR0VUJywgdXJsKTtcblx0XG5cdCAgICAgICAgICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJIVFRQIHJlc3BvbnNlIHJlY2VpdmVkLCBzdGF0dXNcIiwgcmVxLnN0YXR1cyk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT09IDIwMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXEucmVzcG9uc2VUZXh0KSk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJlamVjdChFcnJvcihyZXEuc3RhdHVzVGV4dCArIFwiIChcIiArIHJlcS5zdGF0dXMgKyBcIilcIikpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwibmV0d29yayBlcnJvclwiKTtcblx0ICAgICAgICAgICAgICAgIHJlamVjdChFcnJvcihcIk5ldHdvcmsgRXJyb3JcIikpO1xuXHQgICAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgICAgaWYgKHRva2VuKSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJ0b2tlbiBwYXNzZWQsIHNldHRpbmcgQXV0aG9yaXphdGlvbiBoZWFkZXJcIik7XG5cdCAgICAgICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkF1dGhvcml6YXRpb25cIiwgXCJCZWFyZXIgXCIgKyB0b2tlbik7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHJlcS5zZW5kKCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiBKc29uU2VydmljZTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gSnNvblNlcnZpY2U7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfSnNvblNlcnZpY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHRcblx0dmFyIF9Kc29uU2VydmljZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Kc29uU2VydmljZSk7XG5cdFxuXHR2YXIgX01ldGFkYXRhU2VydmljZSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdFxuXHR2YXIgX01ldGFkYXRhU2VydmljZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZXRhZGF0YVNlcnZpY2UpO1xuXHRcblx0dmFyIF9Mb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9Mb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9nKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfSAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgVXNlckluZm9TZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVXNlckluZm9TZXJ2aWNlKHNldHRpbmdzKSB7XG5cdCAgICAgICAgdmFyIEpzb25TZXJ2aWNlQ3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IF9Kc29uU2VydmljZTIuZGVmYXVsdCA6IGFyZ3VtZW50c1sxXTtcblx0ICAgICAgICB2YXIgTWV0YWRhdGFTZXJ2aWNlQ3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IF9NZXRhZGF0YVNlcnZpY2UyLmRlZmF1bHQgOiBhcmd1bWVudHNbMl07XG5cdFxuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVc2VySW5mb1NlcnZpY2UpO1xuXHRcblx0ICAgICAgICBpZiAoIXNldHRpbmdzKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJObyBzZXR0aW5ncyBwYXNzZWQgdG8gVXNlckluZm9TZXJ2aWNlXCIpO1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR0aW5nc1wiKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG5cdCAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKCk7XG5cdCAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gbmV3IE1ldGFkYXRhU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xuXHQgICAgfVxuXHRcblx0ICAgIFVzZXJJbmZvU2VydmljZS5wcm90b3R5cGUuZ2V0Q2xhaW1zID0gZnVuY3Rpb24gZ2V0Q2xhaW1zKHRva2VuKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiVXNlckluZm9TZXJ2aWNlLmdldENsYWltc1wiKTtcblx0XG5cdCAgICAgICAgaWYgKCF0b2tlbikge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gdG9rZW4gcGFzc2VkXCIpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQSB0b2tlbiBpcyByZXF1aXJlZFwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFVzZXJJbmZvRW5kcG9pbnQoKS50aGVuKGZ1bmN0aW9uICh1cmwpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwicmVjZWl2ZWQgdXNlcmluZm8gdXJsXCIsIHVybCk7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gX3RoaXMuX2pzb25TZXJ2aWNlLmdldEpzb24odXJsLCB0b2tlbikudGhlbihmdW5jdGlvbiAoY2xhaW1zKSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJjbGFpbXMgcmVjZWl2ZWRcIiwgY2xhaW1zKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBjbGFpbXM7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gVXNlckluZm9TZXJ2aWNlO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBVc2VySW5mb1NlcnZpY2U7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Ly8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblx0XG5cdHZhciBFcnJvclJlc3BvbnNlID0gZnVuY3Rpb24gKF9FcnJvcikge1xuXHQgICAgX2luaGVyaXRzKEVycm9yUmVzcG9uc2UsIF9FcnJvcik7XG5cdFxuXHQgICAgZnVuY3Rpb24gRXJyb3JSZXNwb25zZSgpIHtcblx0ICAgICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXHRcblx0ICAgICAgICB2YXIgZXJyb3IgPSBfcmVmLmVycm9yO1xuXHQgICAgICAgIHZhciBlcnJvcl9kZXNjcmlwdGlvbiA9IF9yZWYuZXJyb3JfZGVzY3JpcHRpb247XG5cdCAgICAgICAgdmFyIGVycm9yX3VyaSA9IF9yZWYuZXJyb3JfdXJpO1xuXHQgICAgICAgIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cdFxuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFcnJvclJlc3BvbnNlKTtcblx0XG5cdCAgICAgICAgaWYgKCFlcnJvcikge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gZXJyb3IgcGFzc2VkIHRvIEVycm9yUmVzcG9uc2VcIik7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImVycm9yXCIpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0Vycm9yLmNhbGwodGhpcywgZXJyb3JfZGVzY3JpcHRpb24gfHwgZXJyb3IpKTtcblx0XG5cdCAgICAgICAgX3RoaXMubmFtZSA9IFwiRXJyb3JSZXNwb25zZVwiO1xuXHRcblx0ICAgICAgICBfdGhpcy5lcnJvciA9IGVycm9yO1xuXHQgICAgICAgIF90aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gZXJyb3JfZGVzY3JpcHRpb247XG5cdCAgICAgICAgX3RoaXMuZXJyb3JfdXJpID0gZXJyb3JfdXJpO1xuXHRcblx0ICAgICAgICBfdGhpcy5zdGF0ZSA9IHN0YXRlO1xuXHQgICAgICAgIHJldHVybiBfdGhpcztcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gRXJyb3JSZXNwb25zZTtcblx0fShFcnJvcik7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBFcnJvclJlc3BvbnNlO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9qc3JzYXNpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH0gLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIEFsbG93ZWRTaWduaW5nQWxncyA9IFsnUlMyNTYnLCAnUlMzODQnLCAnUlM1MTInLCAnUFMyNTYnLCAnUFMzODQnLCAnUFM1MTInLCAnRVMyNTYnLCAnRVMzODQnLCAnRVM1MTInXTtcblx0XG5cdHZhciBKb3NlVXRpbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEpvc2VVdGlsKCkge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBKb3NlVXRpbCk7XG5cdCAgICB9XG5cdFxuXHQgICAgSm9zZVV0aWwucGFyc2VKd3QgPSBmdW5jdGlvbiBwYXJzZUp3dChqd3QpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJKb3NlVXRpbC5wYXJzZUp3dFwiKTtcblx0ICAgICAgICB0cnkge1xuXHRcdFx0XHRkZWJ1Z2dlcjtcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gX2pzcnNhc2lnbi5qd3MuSldTLnBhcnNlKGp3dCk7XG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICBoZWFkZXI6IHRva2VuLmhlYWRlck9iaixcblx0ICAgICAgICAgICAgICAgIHBheWxvYWQ6IHRva2VuLnBheWxvYWRPYmpcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBKb3NlVXRpbC52YWxpZGF0ZUp3dCA9IGZ1bmN0aW9uIHZhbGlkYXRlSnd0KGp3dCwga2V5LCBpc3N1ZXIsIGF1ZGllbmNlLCBjbG9ja1NrZXcsIG5vdykge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIkpvc2VVdGlsLnZhbGlkYXRlSnd0XCIpO1xuXHRcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBpZiAoa2V5Lmt0eSA9PT0gXCJSU0FcIikge1xuXHQgICAgICAgICAgICAgICAgaWYgKGtleS5lICYmIGtleS5uKSB7XG5cdCAgICAgICAgICAgICAgICAgICAga2V5ID0gX2pzcnNhc2lnbi5LRVlVVElMLmdldEtleShrZXkpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkueDVjICYmIGtleS54NWMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAga2V5ID0gX2pzcnNhc2lnbi5LRVlVVElMLmdldEtleShfanNyc2FzaWduLlg1MDkuZ2V0UHVibGljS2V5RnJvbUNlcnRQRU0oa2V5Lng1Y1swXSkpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiUlNBIGtleSBtaXNzaW5nIGtleSBtYXRlcmlhbFwiLCBrZXkpO1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJSU0Ega2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkua3R5ID09PSBcIkVDXCIpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChrZXkuY3J2ICYmIGtleS54ICYmIGtleS55KSB7XG5cdCAgICAgICAgICAgICAgICAgICAga2V5ID0gX2pzcnNhc2lnbi5LRVlVVElMLmdldEtleShrZXkpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiRUMga2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIsIGtleSk7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkVDIGtleSBtaXNzaW5nIGtleSBtYXRlcmlhbFwiKSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiVW5zdXBwb3J0ZWQga2V5IHR5cGVcIiwga2V5ICYmIGtleS5rdHkpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGtleSB0eXBlOiBcIiArIGtleSAmJiBrZXkua3R5KSk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHJldHVybiBKb3NlVXRpbC5fdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93KTtcblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoZSAmJiBlLm1lc3NhZ2UgfHwgZSk7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIkpXVCB2YWxpZGF0aW9uIGZhaWxlZFwiKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIEpvc2VVdGlsLl92YWxpZGF0ZUp3dCA9IGZ1bmN0aW9uIF92YWxpZGF0ZUp3dChqd3QsIGtleSwgaXNzdWVyLCBhdWRpZW5jZSwgY2xvY2tTa2V3LCBub3cpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3RcIik7XG5cdFxuXHQgICAgICAgIGlmICghY2xvY2tTa2V3KSB7XG5cdCAgICAgICAgICAgIGNsb2NrU2tldyA9IDA7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoIW5vdykge1xuXHQgICAgICAgICAgICBub3cgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB2YXIgcGF5bG9hZCA9IEpvc2VVdGlsLnBhcnNlSnd0KGp3dCkucGF5bG9hZDtcblx0XG5cdCAgICAgICAgaWYgKHBheWxvYWQuaXNzICE9PSBpc3N1ZXIpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIkludmFsaWQgaXNzdWVyIGluIHRva2VuXCIsIHBheWxvYWQuaXNzKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgaXNzdWVyIGluIHRva2VuOiBcIiArIHBheWxvYWQuaXNzKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAocGF5bG9hZC5hdWQgIT09IGF1ZGllbmNlKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJJbnZhbGlkIGF1ZGllbmNlIGluIHRva2VuXCIsIHBheWxvYWQuYXVkKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgYXVkaWVuY2UgaW4gdG9rZW46IFwiICsgcGF5bG9hZC5hdWQpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBsb3dlck5vdyA9IG5vdyArIGNsb2NrU2tldztcblx0ICAgICAgICB2YXIgdXBwZXJOb3cgPSBub3cgLSBjbG9ja1NrZXc7XG5cdFxuXHQgICAgICAgIGlmIChsb3dlck5vdyA8IHBheWxvYWQuaWF0KSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJpYXQgaXMgaW4gdGhlIGZ1dHVyZVwiLCBwYXlsb2FkLmlhdCk7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpYXQgaXMgaW4gdGhlIGZ1dHVyZTogXCIgKyBwYXlsb2FkLmlhdCkpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKGxvd2VyTm93IDwgcGF5bG9hZC5uYmYpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIm5iZiBpcyBpbiB0aGUgZnV0dXJlXCIsIHBheWxvYWQubmJmKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIm5iZiBpcyBpbiB0aGUgZnV0dXJlOiBcIiArIHBheWxvYWQubmJmKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAocGF5bG9hZC5leHAgPCB1cHBlck5vdykge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiZXhwIGlzIGluIHRoZSBwYXN0XCIsIHBheWxvYWQuZXhwKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImV4cCBpcyBpbiB0aGUgcGFzdDpcIiArIHBheWxvYWQuZXhwKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBpZiAoIV9qc3JzYXNpZ24uandzLkpXUy52ZXJpZnkoand0LCBrZXksIEFsbG93ZWRTaWduaW5nQWxncykpIHtcblx0ICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJzaWduYXR1cmUgdmFsaWRhdGlvbiBmYWlsZWRcIik7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwic2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihlICYmIGUubWVzc2FnZSB8fCBlKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInNpZ25hdHVyZSB2YWxpZGF0aW9uIGZhaWxlZFwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIEpvc2VVdGlsLmhhc2hTdHJpbmcgPSBmdW5jdGlvbiBoYXNoU3RyaW5nKHZhbHVlLCBhbGcpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJKb3NlVXRpbC5oYXNoU3RyaW5nXCIsIHZhbHVlLCBhbGcpO1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfanNyc2FzaWduLmNyeXB0by5VdGlsLmhhc2hTdHJpbmcodmFsdWUsIGFsZyk7XG5cdCAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgSm9zZVV0aWwuaGV4VG9CYXNlNjRVcmwgPSBmdW5jdGlvbiBoZXhUb0Jhc2U2NFVybCh2YWx1ZSkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIkpvc2VVdGlsLmhleFRvQmFzZTY0VXJsXCIsIHZhbHVlKTtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICByZXR1cm4gKDAsIF9qc3JzYXNpZ24uaGV4dG9iNjR1KSh2YWx1ZSk7XG5cdCAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgcmV0dXJuIEpvc2VVdGlsO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBKb3NlVXRpbDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAxMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKEJ1ZmZlcikge1xuXHR2YXIgbmF2aWdhdG9yID0ge307XG5cdG5hdmlnYXRvci51c2VyQWdlbnQgPSBmYWxzZTtcblx0XG5cdHZhciB3aW5kb3cgPSB7fTtcblx0Lypcblx0ICoganNyc2FzaWduIDUuMC4xMiAoYykgMjAxMC0yMDE2IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG5cdCAqL1xuXHRcblx0Lypcblx0eWFob28tbWluLmpzXG5cdENvcHlyaWdodCAoYykgMjAxMSwgWWFob28hIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Q29kZSBsaWNlbnNlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2U6XG5cdGh0dHA6Ly9kZXZlbG9wZXIueWFob28uY29tL3l1aS9saWNlbnNlLmh0bWxcblx0dmVyc2lvbjogMi45LjBcblx0Ki9cblx0aWYodHlwZW9mIFlBSE9PPT1cInVuZGVmaW5lZFwifHwhWUFIT08pe3ZhciBZQUhPTz17fTt9WUFIT08ubmFtZXNwYWNlPWZ1bmN0aW9uKCl7dmFyIGI9YXJndW1lbnRzLGc9bnVsbCxlLGMsZjtmb3IoZT0wO2U8Yi5sZW5ndGg7ZT1lKzEpe2Y9KFwiXCIrYltlXSkuc3BsaXQoXCIuXCIpO2c9WUFIT087Zm9yKGM9KGZbMF09PVwiWUFIT09cIik/MTowO2M8Zi5sZW5ndGg7Yz1jKzEpe2dbZltjXV09Z1tmW2NdXXx8e307Zz1nW2ZbY11dO319cmV0dXJuIGc7fTtZQUhPTy5sb2c9ZnVuY3Rpb24oZCxhLGMpe3ZhciBiPVlBSE9PLndpZGdldC5Mb2dnZXI7aWYoYiYmYi5sb2cpe3JldHVybiBiLmxvZyhkLGEsYyk7fWVsc2V7cmV0dXJuIGZhbHNlO319O1lBSE9PLnJlZ2lzdGVyPWZ1bmN0aW9uKGEsZixlKXt2YXIgaz1ZQUhPTy5lbnYubW9kdWxlcyxjLGosaCxnLGQ7aWYoIWtbYV0pe2tbYV09e3ZlcnNpb25zOltdLGJ1aWxkczpbXX07fWM9a1thXTtqPWUudmVyc2lvbjtoPWUuYnVpbGQ7Zz1ZQUhPTy5lbnYubGlzdGVuZXJzO2MubmFtZT1hO2MudmVyc2lvbj1qO2MuYnVpbGQ9aDtjLnZlcnNpb25zLnB1c2goaik7Yy5idWlsZHMucHVzaChoKTtjLm1haW5DbGFzcz1mO2ZvcihkPTA7ZDxnLmxlbmd0aDtkPWQrMSl7Z1tkXShjKTt9aWYoZil7Zi5WRVJTSU9OPWo7Zi5CVUlMRD1oO31lbHNle1lBSE9PLmxvZyhcIm1haW5DbGFzcyBpcyB1bmRlZmluZWQgZm9yIG1vZHVsZSBcIithLFwid2FyblwiKTt9fTtZQUhPTy5lbnY9WUFIT08uZW52fHx7bW9kdWxlczpbXSxsaXN0ZW5lcnM6W119O1lBSE9PLmVudi5nZXRWZXJzaW9uPWZ1bmN0aW9uKGEpe3JldHVybiBZQUhPTy5lbnYubW9kdWxlc1thXXx8bnVsbDt9O1lBSE9PLmVudi5wYXJzZVVBPWZ1bmN0aW9uKGQpe3ZhciBlPWZ1bmN0aW9uKGkpe3ZhciBqPTA7cmV0dXJuIHBhcnNlRmxvYXQoaS5yZXBsYWNlKC9cXC4vZyxmdW5jdGlvbigpe3JldHVybihqKys9PTEpP1wiXCI6XCIuXCI7fSkpO30saD1uYXZpZ2F0b3IsZz17aWU6MCxvcGVyYTowLGdlY2tvOjAsd2Via2l0OjAsY2hyb21lOjAsbW9iaWxlOm51bGwsYWlyOjAsaXBhZDowLGlwaG9uZTowLGlwb2Q6MCxpb3M6bnVsbCxhbmRyb2lkOjAsd2Vib3M6MCxjYWphOmgmJmguY2FqYVZlcnNpb24sc2VjdXJlOmZhbHNlLG9zOm51bGx9LGM9ZHx8KG5hdmlnYXRvciYmbmF2aWdhdG9yLnVzZXJBZ2VudCksZj13aW5kb3cmJndpbmRvdy5sb2NhdGlvbixiPWYmJmYuaHJlZixhO2cuc2VjdXJlPWImJihiLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImh0dHBzXCIpPT09MCk7aWYoYyl7aWYoKC93aW5kb3dzfHdpbjMyL2kpLnRlc3QoYykpe2cub3M9XCJ3aW5kb3dzXCI7fWVsc2V7aWYoKC9tYWNpbnRvc2gvaSkudGVzdChjKSl7Zy5vcz1cIm1hY2ludG9zaFwiO31lbHNle2lmKCgvcmhpbm8vaSkudGVzdChjKSl7Zy5vcz1cInJoaW5vXCI7fX19aWYoKC9LSFRNTC8pLnRlc3QoYykpe2cud2Via2l0PTE7fWE9Yy5tYXRjaCgvQXBwbGVXZWJLaXRcXC8oW15cXHNdKikvKTtpZihhJiZhWzFdKXtnLndlYmtpdD1lKGFbMV0pO2lmKC8gTW9iaWxlXFwvLy50ZXN0KGMpKXtnLm1vYmlsZT1cIkFwcGxlXCI7YT1jLm1hdGNoKC9PUyAoW15cXHNdKikvKTtpZihhJiZhWzFdKXthPWUoYVsxXS5yZXBsYWNlKFwiX1wiLFwiLlwiKSk7fWcuaW9zPWE7Zy5pcGFkPWcuaXBvZD1nLmlwaG9uZT0wO2E9Yy5tYXRjaCgvaVBhZHxpUG9kfGlQaG9uZS8pO2lmKGEmJmFbMF0pe2dbYVswXS50b0xvd2VyQ2FzZSgpXT1nLmlvczt9fWVsc2V7YT1jLm1hdGNoKC9Ob2tpYU5bXlxcL10qfEFuZHJvaWQgXFxkXFwuXFxkfHdlYk9TXFwvXFxkXFwuXFxkLyk7aWYoYSl7Zy5tb2JpbGU9YVswXTt9aWYoL3dlYk9TLy50ZXN0KGMpKXtnLm1vYmlsZT1cIldlYk9TXCI7YT1jLm1hdGNoKC93ZWJPU1xcLyhbXlxcc10qKTsvKTtpZihhJiZhWzFdKXtnLndlYm9zPWUoYVsxXSk7fX1pZigvIEFuZHJvaWQvLnRlc3QoYykpe2cubW9iaWxlPVwiQW5kcm9pZFwiO2E9Yy5tYXRjaCgvQW5kcm9pZCAoW15cXHNdKik7Lyk7aWYoYSYmYVsxXSl7Zy5hbmRyb2lkPWUoYVsxXSk7fX19YT1jLm1hdGNoKC9DaHJvbWVcXC8oW15cXHNdKikvKTtpZihhJiZhWzFdKXtnLmNocm9tZT1lKGFbMV0pO31lbHNle2E9Yy5tYXRjaCgvQWRvYmVBSVJcXC8oW15cXHNdKikvKTtpZihhKXtnLmFpcj1hWzBdO319fWlmKCFnLndlYmtpdCl7YT1jLm1hdGNoKC9PcGVyYVtcXHNcXC9dKFteXFxzXSopLyk7aWYoYSYmYVsxXSl7Zy5vcGVyYT1lKGFbMV0pO2E9Yy5tYXRjaCgvVmVyc2lvblxcLyhbXlxcc10qKS8pO2lmKGEmJmFbMV0pe2cub3BlcmE9ZShhWzFdKTt9YT1jLm1hdGNoKC9PcGVyYSBNaW5pW147XSovKTtpZihhKXtnLm1vYmlsZT1hWzBdO319ZWxzZXthPWMubWF0Y2goL01TSUVcXHMoW147XSopLyk7aWYoYSYmYVsxXSl7Zy5pZT1lKGFbMV0pO31lbHNle2E9Yy5tYXRjaCgvR2Vja29cXC8oW15cXHNdKikvKTtpZihhKXtnLmdlY2tvPTE7YT1jLm1hdGNoKC9ydjooW15cXHNcXCldKikvKTtpZihhJiZhWzFdKXtnLmdlY2tvPWUoYVsxXSk7fX19fX19cmV0dXJuIGc7fTtZQUhPTy5lbnYudWE9WUFIT08uZW52LnBhcnNlVUEoKTsoZnVuY3Rpb24oKXtZQUhPTy5uYW1lc3BhY2UoXCJ1dGlsXCIsXCJ3aWRnZXRcIixcImV4YW1wbGVcIik7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBZQUhPT19jb25maWcpe3ZhciBiPVlBSE9PX2NvbmZpZy5saXN0ZW5lcixhPVlBSE9PLmVudi5saXN0ZW5lcnMsZD10cnVlLGM7aWYoYil7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyl7aWYoYVtjXT09Yil7ZD1mYWxzZTticmVhazt9fWlmKGQpe2EucHVzaChiKTt9fX19KSgpO1lBSE9PLmxhbmc9WUFIT08ubGFuZ3x8e307KGZ1bmN0aW9uKCl7dmFyIGY9WUFIT08ubGFuZyxhPU9iamVjdC5wcm90b3R5cGUsYz1cIltvYmplY3QgQXJyYXldXCIsaD1cIltvYmplY3QgRnVuY3Rpb25dXCIsaT1cIltvYmplY3QgT2JqZWN0XVwiLGI9W10sZz17XCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLCdcIic6XCImcXVvdDtcIixcIidcIjpcIiYjeDI3O1wiLFwiL1wiOlwiJiN4MkY7XCIsXCJgXCI6XCImI3g2MDtcIn0sZD1bXCJ0b1N0cmluZ1wiLFwidmFsdWVPZlwiXSxlPXtpc0FycmF5OmZ1bmN0aW9uKGope3JldHVybiBhLnRvU3RyaW5nLmFwcGx5KGopPT09Yzt9LGlzQm9vbGVhbjpmdW5jdGlvbihqKXtyZXR1cm4gdHlwZW9mIGo9PT1cImJvb2xlYW5cIjt9LGlzRnVuY3Rpb246ZnVuY3Rpb24oail7cmV0dXJuKHR5cGVvZiBqPT09XCJmdW5jdGlvblwiKXx8YS50b1N0cmluZy5hcHBseShqKT09PWg7fSxpc051bGw6ZnVuY3Rpb24oail7cmV0dXJuIGo9PT1udWxsO30saXNOdW1iZXI6ZnVuY3Rpb24oail7cmV0dXJuIHR5cGVvZiBqPT09XCJudW1iZXJcIiYmaXNGaW5pdGUoaik7fSxpc09iamVjdDpmdW5jdGlvbihqKXtyZXR1cm4oaiYmKHR5cGVvZiBqPT09XCJvYmplY3RcInx8Zi5pc0Z1bmN0aW9uKGopKSl8fGZhbHNlO30saXNTdHJpbmc6ZnVuY3Rpb24oail7cmV0dXJuIHR5cGVvZiBqPT09XCJzdHJpbmdcIjt9LGlzVW5kZWZpbmVkOmZ1bmN0aW9uKGope3JldHVybiB0eXBlb2Ygaj09PVwidW5kZWZpbmVkXCI7fSxfSUVFbnVtRml4OihZQUhPTy5lbnYudWEuaWUpP2Z1bmN0aW9uKGwsayl7dmFyIGosbixtO2ZvcihqPTA7ajxkLmxlbmd0aDtqPWorMSl7bj1kW2pdO209a1tuXTtpZihmLmlzRnVuY3Rpb24obSkmJm0hPWFbbl0pe2xbbl09bTt9fX06ZnVuY3Rpb24oKXt9LGVzY2FwZUhUTUw6ZnVuY3Rpb24oail7cmV0dXJuIGoucmVwbGFjZSgvWyY8PlwiJ1xcL2BdL2csZnVuY3Rpb24oayl7cmV0dXJuIGdba107fSk7fSxleHRlbmQ6ZnVuY3Rpb24obSxuLGwpe2lmKCFufHwhbSl7dGhyb3cgbmV3IEVycm9yKFwiZXh0ZW5kIGZhaWxlZCwgcGxlYXNlIGNoZWNrIHRoYXQgXCIrXCJhbGwgZGVwZW5kZW5jaWVzIGFyZSBpbmNsdWRlZC5cIik7fXZhciBrPWZ1bmN0aW9uKCl7fSxqO2sucHJvdG90eXBlPW4ucHJvdG90eXBlO20ucHJvdG90eXBlPW5ldyBrKCk7bS5wcm90b3R5cGUuY29uc3RydWN0b3I9bTttLnN1cGVyY2xhc3M9bi5wcm90b3R5cGU7aWYobi5wcm90b3R5cGUuY29uc3RydWN0b3I9PWEuY29uc3RydWN0b3Ipe24ucHJvdG90eXBlLmNvbnN0cnVjdG9yPW47fWlmKGwpe2ZvcihqIGluIGwpe2lmKGYuaGFzT3duUHJvcGVydHkobCxqKSl7bS5wcm90b3R5cGVbal09bFtqXTt9fWYuX0lFRW51bUZpeChtLnByb3RvdHlwZSxsKTt9fSxhdWdtZW50T2JqZWN0OmZ1bmN0aW9uKG4sbSl7aWYoIW18fCFuKXt0aHJvdyBuZXcgRXJyb3IoXCJBYnNvcmIgZmFpbGVkLCB2ZXJpZnkgZGVwZW5kZW5jaWVzLlwiKTt9dmFyIGo9YXJndW1lbnRzLGwsbyxrPWpbMl07aWYoayYmayE9PXRydWUpe2ZvcihsPTI7bDxqLmxlbmd0aDtsPWwrMSl7bltqW2xdXT1tW2pbbF1dO319ZWxzZXtmb3IobyBpbiBtKXtpZihrfHwhKG8gaW4gbikpe25bb109bVtvXTt9fWYuX0lFRW51bUZpeChuLG0pO31yZXR1cm4gbjt9LGF1Z21lbnRQcm90bzpmdW5jdGlvbihtLGwpe2lmKCFsfHwhbSl7dGhyb3cgbmV3IEVycm9yKFwiQXVnbWVudCBmYWlsZWQsIHZlcmlmeSBkZXBlbmRlbmNpZXMuXCIpO312YXIgaj1bbS5wcm90b3R5cGUsbC5wcm90b3R5cGVdLGs7Zm9yKGs9MjtrPGFyZ3VtZW50cy5sZW5ndGg7az1rKzEpe2oucHVzaChhcmd1bWVudHNba10pO31mLmF1Z21lbnRPYmplY3QuYXBwbHkodGhpcyxqKTtyZXR1cm4gbTt9LGR1bXA6ZnVuY3Rpb24oaixwKXt2YXIgbCxuLHI9W10sdD1cInsuLi59XCIsaz1cImYoKXsuLi59XCIscT1cIiwgXCIsbT1cIiA9PiBcIjtpZighZi5pc09iamVjdChqKSl7cmV0dXJuIGorXCJcIjt9ZWxzZXtpZihqIGluc3RhbmNlb2YgRGF0ZXx8KFwibm9kZVR5cGVcIiBpbiBqJiZcInRhZ05hbWVcIiBpbiBqKSl7cmV0dXJuIGo7fWVsc2V7aWYoZi5pc0Z1bmN0aW9uKGopKXtyZXR1cm4gazt9fX1wPShmLmlzTnVtYmVyKHApKT9wOjM7aWYoZi5pc0FycmF5KGopKXtyLnB1c2goXCJbXCIpO2ZvcihsPTAsbj1qLmxlbmd0aDtsPG47bD1sKzEpe2lmKGYuaXNPYmplY3QoaltsXSkpe3IucHVzaCgocD4wKT9mLmR1bXAoaltsXSxwLTEpOnQpO31lbHNle3IucHVzaChqW2xdKTt9ci5wdXNoKHEpO31pZihyLmxlbmd0aD4xKXtyLnBvcCgpO31yLnB1c2goXCJdXCIpO31lbHNle3IucHVzaChcIntcIik7Zm9yKGwgaW4gail7aWYoZi5oYXNPd25Qcm9wZXJ0eShqLGwpKXtyLnB1c2gobCttKTtpZihmLmlzT2JqZWN0KGpbbF0pKXtyLnB1c2goKHA+MCk/Zi5kdW1wKGpbbF0scC0xKTp0KTt9ZWxzZXtyLnB1c2goaltsXSk7fXIucHVzaChxKTt9fWlmKHIubGVuZ3RoPjEpe3IucG9wKCk7fXIucHVzaChcIn1cIik7fXJldHVybiByLmpvaW4oXCJcIik7fSxzdWJzdGl0dXRlOmZ1bmN0aW9uKHgseSxFLGwpe3ZhciBELEMsQixHLHQsdSxGPVtdLHAsej14Lmxlbmd0aCxBPVwiZHVtcFwiLHI9XCIgXCIscT1cIntcIixtPVwifVwiLG4sdztmb3IoOzspe0Q9eC5sYXN0SW5kZXhPZihxLHopO2lmKEQ8MCl7YnJlYWs7fUM9eC5pbmRleE9mKG0sRCk7aWYoRCsxPkMpe2JyZWFrO31wPXguc3Vic3RyaW5nKEQrMSxDKTtHPXA7dT1udWxsO0I9Ry5pbmRleE9mKHIpO2lmKEI+LTEpe3U9Ry5zdWJzdHJpbmcoQisxKTtHPUcuc3Vic3RyaW5nKDAsQik7fXQ9eVtHXTtpZihFKXt0PUUoRyx0LHUpO31pZihmLmlzT2JqZWN0KHQpKXtpZihmLmlzQXJyYXkodCkpe3Q9Zi5kdW1wKHQscGFyc2VJbnQodSwxMCkpO31lbHNle3U9dXx8XCJcIjtuPXUuaW5kZXhPZihBKTtpZihuPi0xKXt1PXUuc3Vic3RyaW5nKDQpO313PXQudG9TdHJpbmcoKTtpZih3PT09aXx8bj4tMSl7dD1mLmR1bXAodCxwYXJzZUludCh1LDEwKSk7fWVsc2V7dD13O319fWVsc2V7aWYoIWYuaXNTdHJpbmcodCkmJiFmLmlzTnVtYmVyKHQpKXt0PVwifi1cIitGLmxlbmd0aCtcIi1+XCI7RltGLmxlbmd0aF09cDt9fXg9eC5zdWJzdHJpbmcoMCxEKSt0K3guc3Vic3RyaW5nKEMrMSk7aWYobD09PWZhbHNlKXt6PUQtMTt9fWZvcihEPUYubGVuZ3RoLTE7RD49MDtEPUQtMSl7eD14LnJlcGxhY2UobmV3IFJlZ0V4cChcIn4tXCIrRCtcIi1+XCIpLFwie1wiK0ZbRF0rXCJ9XCIsXCJnXCIpO31yZXR1cm4geDt9LHRyaW06ZnVuY3Rpb24oail7dHJ5e3JldHVybiBqLnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIik7fWNhdGNoKGspe3JldHVybiBqO1xuXHR9fSxtZXJnZTpmdW5jdGlvbigpe3ZhciBuPXt9LGs9YXJndW1lbnRzLGo9ay5sZW5ndGgsbTtmb3IobT0wO208ajttPW0rMSl7Zi5hdWdtZW50T2JqZWN0KG4sa1ttXSx0cnVlKTt9cmV0dXJuIG47fSxsYXRlcjpmdW5jdGlvbih0LGssdSxuLHApe3Q9dHx8MDtrPWt8fHt9O3ZhciBsPXUscz1uLHEsajtpZihmLmlzU3RyaW5nKHUpKXtsPWtbdV07fWlmKCFsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwibWV0aG9kIHVuZGVmaW5lZFwiKTt9aWYoIWYuaXNVbmRlZmluZWQobikmJiFmLmlzQXJyYXkocykpe3M9W25dO31xPWZ1bmN0aW9uKCl7bC5hcHBseShrLHN8fGIpO307aj0ocCk/c2V0SW50ZXJ2YWwocSx0KTpzZXRUaW1lb3V0KHEsdCk7cmV0dXJue2ludGVydmFsOnAsY2FuY2VsOmZ1bmN0aW9uKCl7aWYodGhpcy5pbnRlcnZhbCl7Y2xlYXJJbnRlcnZhbChqKTt9ZWxzZXtjbGVhclRpbWVvdXQoaik7fX19O30saXNWYWx1ZTpmdW5jdGlvbihqKXtyZXR1cm4oZi5pc09iamVjdChqKXx8Zi5pc1N0cmluZyhqKXx8Zi5pc051bWJlcihqKXx8Zi5pc0Jvb2xlYW4oaikpO319O2YuaGFzT3duUHJvcGVydHk9KGEuaGFzT3duUHJvcGVydHkpP2Z1bmN0aW9uKGosayl7cmV0dXJuIGomJmouaGFzT3duUHJvcGVydHkmJmouaGFzT3duUHJvcGVydHkoayk7fTpmdW5jdGlvbihqLGspe3JldHVybiAhZi5pc1VuZGVmaW5lZChqW2tdKSYmai5jb25zdHJ1Y3Rvci5wcm90b3R5cGVba10hPT1qW2tdO307ZS5hdWdtZW50T2JqZWN0KGYsZSx0cnVlKTtZQUhPTy51dGlsLkxhbmc9ZjtmLmF1Z21lbnQ9Zi5hdWdtZW50UHJvdG87WUFIT08uYXVnbWVudD1mLmF1Z21lbnRQcm90bztZQUhPTy5leHRlbmQ9Zi5leHRlbmQ7fSkoKTtZQUhPTy5yZWdpc3RlcihcInlhaG9vXCIsWUFIT08se3ZlcnNpb246XCIyLjkuMFwiLGJ1aWxkOlwiMjgwMFwifSk7XG5cdFxuXHQvKiEgQ3J5cHRvSlMgdjMuMS4yIGNvcmUtZml4LmpzXG5cdCAqIGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuXHQgKiAoYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0ICogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuXHQgKiBUSElTIElTIEZJWCBvZiAnY29yZS5qcycgdG8gZml4IEhtYWMgaXNzdWUuXG5cdCAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL2lzc3Vlcy9kZXRhaWw/aWQ9ODRcblx0ICogaHR0cHM6Ly9jcnlwdG8tanMuZ29vZ2xlY29kZS5jb20vc3ZuLWhpc3RvcnkvcjY2Ny9icmFuY2hlcy8zLngvc3JjL2NvcmUuanNcblx0ICovXG5cdHZhciBDcnlwdG9KUz1DcnlwdG9KU3x8KGZ1bmN0aW9uKGUsZyl7dmFyIGE9e307dmFyIGI9YS5saWI9e307dmFyIGo9Yi5CYXNlPShmdW5jdGlvbigpe2Z1bmN0aW9uIG4oKXt9cmV0dXJue2V4dGVuZDpmdW5jdGlvbihwKXtuLnByb3RvdHlwZT10aGlzO3ZhciBvPW5ldyBuKCk7aWYocCl7by5taXhJbihwKX1pZighby5oYXNPd25Qcm9wZXJ0eShcImluaXRcIikpe28uaW5pdD1mdW5jdGlvbigpe28uJHN1cGVyLmluaXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX1vLmluaXQucHJvdG90eXBlPW87by4kc3VwZXI9dGhpcztyZXR1cm4gb30sY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIG89dGhpcy5leHRlbmQoKTtvLmluaXQuYXBwbHkobyxhcmd1bWVudHMpO3JldHVybiBvfSxpbml0OmZ1bmN0aW9uKCl7fSxtaXhJbjpmdW5jdGlvbihwKXtmb3IodmFyIG8gaW4gcCl7aWYocC5oYXNPd25Qcm9wZXJ0eShvKSl7dGhpc1tvXT1wW29dfX1pZihwLmhhc093blByb3BlcnR5KFwidG9TdHJpbmdcIikpe3RoaXMudG9TdHJpbmc9cC50b1N0cmluZ319LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5pdC5wcm90b3R5cGUuZXh0ZW5kKHRoaXMpfX19KCkpO3ZhciBsPWIuV29yZEFycmF5PWouZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKG8sbil7bz10aGlzLndvcmRzPW98fFtdO2lmKG4hPWcpe3RoaXMuc2lnQnl0ZXM9bn1lbHNle3RoaXMuc2lnQnl0ZXM9by5sZW5ndGgqNH19LHRvU3RyaW5nOmZ1bmN0aW9uKG4pe3JldHVybihufHxoKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbih0KXt2YXIgcT10aGlzLndvcmRzO3ZhciBwPXQud29yZHM7dmFyIG49dGhpcy5zaWdCeXRlczt2YXIgcz10LnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihuJTQpe2Zvcih2YXIgcj0wO3I8cztyKyspe3ZhciBvPShwW3I+Pj4yXT4+PigyNC0ociU0KSo4KSkmMjU1O3FbKG4rcik+Pj4yXXw9bzw8KDI0LSgobityKSU0KSo4KX19ZWxzZXtmb3IodmFyIHI9MDtyPHM7cis9NCl7cVsobityKT4+PjJdPXBbcj4+PjJdfX10aGlzLnNpZ0J5dGVzKz1zO3JldHVybiB0aGlzfSxjbGFtcDpmdW5jdGlvbigpe3ZhciBvPXRoaXMud29yZHM7dmFyIG49dGhpcy5zaWdCeXRlcztvW24+Pj4yXSY9NDI5NDk2NzI5NTw8KDMyLShuJTQpKjgpO28ubGVuZ3RoPWUuY2VpbChuLzQpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBuPWouY2xvbmUuY2FsbCh0aGlzKTtuLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIG59LHJhbmRvbTpmdW5jdGlvbihwKXt2YXIgbz1bXTtmb3IodmFyIG49MDtuPHA7bis9NCl7by5wdXNoKChlLnJhbmRvbSgpKjQyOTQ5NjcyOTYpfDApfXJldHVybiBuZXcgbC5pbml0KG8scCl9fSk7dmFyIG09YS5lbmM9e307dmFyIGg9bS5IZXg9e3N0cmluZ2lmeTpmdW5jdGlvbihwKXt2YXIgcj1wLndvcmRzO3ZhciBvPXAuc2lnQnl0ZXM7dmFyIHE9W107Zm9yKHZhciBuPTA7bjxvO24rKyl7dmFyIHM9KHJbbj4+PjJdPj4+KDI0LShuJTQpKjgpKSYyNTU7cS5wdXNoKChzPj4+NCkudG9TdHJpbmcoMTYpKTtxLnB1c2goKHMmMTUpLnRvU3RyaW5nKDE2KSl9cmV0dXJuIHEuam9pbihcIlwiKX0scGFyc2U6ZnVuY3Rpb24ocCl7dmFyIG49cC5sZW5ndGg7dmFyIHE9W107Zm9yKHZhciBvPTA7bzxuO28rPTIpe3Fbbz4+PjNdfD1wYXJzZUludChwLnN1YnN0cihvLDIpLDE2KTw8KDI0LShvJTgpKjQpfXJldHVybiBuZXcgbC5pbml0KHEsbi8yKX19O3ZhciBkPW0uTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24ocSl7dmFyIHI9cS53b3Jkczt2YXIgcD1xLnNpZ0J5dGVzO3ZhciBuPVtdO2Zvcih2YXIgbz0wO288cDtvKyspe3ZhciBzPShyW28+Pj4yXT4+PigyNC0obyU0KSo4KSkmMjU1O24ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHMpKX1yZXR1cm4gbi5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbihwKXt2YXIgbj1wLmxlbmd0aDt2YXIgcT1bXTtmb3IodmFyIG89MDtvPG47bysrKXtxW28+Pj4yXXw9KHAuY2hhckNvZGVBdChvKSYyNTUpPDwoMjQtKG8lNCkqOCl9cmV0dXJuIG5ldyBsLmluaXQocSxuKX19O3ZhciBjPW0uVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKG4pe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShkLnN0cmluZ2lmeShuKSkpfWNhdGNoKG8pe3Rocm93IG5ldyBFcnJvcihcIk1hbGZvcm1lZCBVVEYtOCBkYXRhXCIpfX0scGFyc2U6ZnVuY3Rpb24obil7cmV0dXJuIGQucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KG4pKSl9fTt2YXIgaT1iLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09ai5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgbC5pbml0KCk7dGhpcy5fbkRhdGFCeXRlcz0wfSxfYXBwZW5kOmZ1bmN0aW9uKG4pe2lmKHR5cGVvZiBuPT1cInN0cmluZ1wiKXtuPWMucGFyc2Uobil9dGhpcy5fZGF0YS5jb25jYXQobik7dGhpcy5fbkRhdGFCeXRlcys9bi5zaWdCeXRlc30sX3Byb2Nlc3M6ZnVuY3Rpb24odyl7dmFyIHE9dGhpcy5fZGF0YTt2YXIgeD1xLndvcmRzO3ZhciBuPXEuc2lnQnl0ZXM7dmFyIHQ9dGhpcy5ibG9ja1NpemU7dmFyIHY9dCo0O3ZhciB1PW4vdjtpZih3KXt1PWUuY2VpbCh1KX1lbHNle3U9ZS5tYXgoKHV8MCktdGhpcy5fbWluQnVmZmVyU2l6ZSwwKX12YXIgcz11KnQ7dmFyIHI9ZS5taW4ocyo0LG4pO2lmKHMpe2Zvcih2YXIgcD0wO3A8cztwKz10KXt0aGlzLl9kb1Byb2Nlc3NCbG9jayh4LHApfXZhciBvPXguc3BsaWNlKDAscyk7cS5zaWdCeXRlcy09cn1yZXR1cm4gbmV3IGwuaW5pdChvLHIpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBuPWouY2xvbmUuY2FsbCh0aGlzKTtuLl9kYXRhPXRoaXMuX2RhdGEuY2xvbmUoKTtyZXR1cm4gbn0sX21pbkJ1ZmZlclNpemU6MH0pO3ZhciBmPWIuSGFzaGVyPWkuZXh0ZW5kKHtjZmc6ai5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKG4pe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChuKTt0aGlzLnJlc2V0KCl9LHJlc2V0OmZ1bmN0aW9uKCl7aS5yZXNldC5jYWxsKHRoaXMpO3RoaXMuX2RvUmVzZXQoKX0sdXBkYXRlOmZ1bmN0aW9uKG4pe3RoaXMuX2FwcGVuZChuKTt0aGlzLl9wcm9jZXNzKCk7cmV0dXJuIHRoaXN9LGZpbmFsaXplOmZ1bmN0aW9uKG4pe2lmKG4pe3RoaXMuX2FwcGVuZChuKX12YXIgbz10aGlzLl9kb0ZpbmFsaXplKCk7cmV0dXJuIG99LGJsb2NrU2l6ZTo1MTIvMzIsX2NyZWF0ZUhlbHBlcjpmdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24ocCxvKXtyZXR1cm4gbmV3IG4uaW5pdChvKS5maW5hbGl6ZShwKX19LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbihwLG8pe3JldHVybiBuZXcgay5ITUFDLmluaXQobixvKS5maW5hbGl6ZShwKX19fSk7dmFyIGs9YS5hbGdvPXt9O3JldHVybiBhfShNYXRoKSk7XG5cdC8qXG5cdENyeXB0b0pTIHYzLjEuMiB4NjQtY29yZS1taW4uanNcblx0Y29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG5cdChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG5cdCovXG5cdChmdW5jdGlvbihnKXt2YXIgYT1DcnlwdG9KUyxmPWEubGliLGU9Zi5CYXNlLGg9Zi5Xb3JkQXJyYXksYT1hLng2ND17fTthLldvcmQ9ZS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oYixjKXt0aGlzLmhpZ2g9Yjt0aGlzLmxvdz1jfX0pO2EuV29yZEFycmF5PWUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGIsYyl7Yj10aGlzLndvcmRzPWJ8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9Zz9jOjgqYi5sZW5ndGh9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBiPXRoaXMud29yZHMsYz1iLmxlbmd0aCxhPVtdLGQ9MDtkPGM7ZCsrKXt2YXIgZT1iW2RdO2EucHVzaChlLmhpZ2gpO2EucHVzaChlLmxvdyl9cmV0dXJuIGguY3JlYXRlKGEsdGhpcy5zaWdCeXRlcyl9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBiPWUuY2xvbmUuY2FsbCh0aGlzKSxjPWIud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKSxhPWMubGVuZ3RoLGQ9MDtkPGE7ZCsrKWNbZF09Y1tkXS5jbG9uZSgpO3JldHVybiBifX0pfSkoKTtcblx0XG5cdC8qXG5cdENyeXB0b0pTIHYzLjEuMiBjaXBoZXItY29yZS1taW4uanNcblx0Y29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG5cdChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG5cdCovXG5cdENyeXB0b0pTLmxpYi5DaXBoZXJ8fGZ1bmN0aW9uKHUpe3ZhciBnPUNyeXB0b0pTLGY9Zy5saWIsaz1mLkJhc2UsbD1mLldvcmRBcnJheSxxPWYuQnVmZmVyZWRCbG9ja0FsZ29yaXRobSxyPWcuZW5jLkJhc2U2NCx2PWcuYWxnby5FdnBLREYsbj1mLkNpcGhlcj1xLmV4dGVuZCh7Y2ZnOmsuZXh0ZW5kKCksY3JlYXRlRW5jcnlwdG9yOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuY3JlYXRlKHRoaXMuX0VOQ19YRk9STV9NT0RFLGEsYil9LGNyZWF0ZURlY3J5cHRvcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmNyZWF0ZSh0aGlzLl9ERUNfWEZPUk1fTU9ERSxhLGIpfSxpbml0OmZ1bmN0aW9uKGEsYixjKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYyk7dGhpcy5feGZvcm1Nb2RlPWE7dGhpcy5fa2V5PWI7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3EucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHByb2Nlc3M6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO1xuXHRyZXR1cm4gdGhpcy5fcHJvY2VzcygpfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sa2V5U2l6ZTo0LGl2U2l6ZTo0LF9FTkNfWEZPUk1fTU9ERToxLF9ERUNfWEZPUk1fTU9ERToyLF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJue2VuY3J5cHQ6ZnVuY3Rpb24oYixjLGQpe3JldHVybihcInN0cmluZ1wiPT10eXBlb2YgYz9zOmopLmVuY3J5cHQoYSxiLGMsZCl9LGRlY3J5cHQ6ZnVuY3Rpb24oYixjLGQpe3JldHVybihcInN0cmluZ1wiPT10eXBlb2YgYz9zOmopLmRlY3J5cHQoYSxiLGMsZCl9fX19KTtmLlN0cmVhbUNpcGhlcj1uLmV4dGVuZCh7X2RvRmluYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJvY2VzcyghMCl9LGJsb2NrU2l6ZToxfSk7dmFyIG09Zy5tb2RlPXt9LHQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2l2O2Q/dGhpcy5faXY9dTpkPXRoaXMuX3ByZXZCbG9jaztmb3IodmFyIGU9XG5cdDA7ZTxjO2UrKylhW2IrZV1ePWRbZV19LGg9KGYuQmxvY2tDaXBoZXJNb2RlPWsuZXh0ZW5kKHtjcmVhdGVFbmNyeXB0b3I6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5FbmNyeXB0b3IuY3JlYXRlKGEsYil9LGNyZWF0ZURlY3J5cHRvcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLkRlY3J5cHRvci5jcmVhdGUoYSxiKX0saW5pdDpmdW5jdGlvbihhLGIpe3RoaXMuX2NpcGhlcj1hO3RoaXMuX2l2PWJ9fSkpLmV4dGVuZCgpO2guRW5jcnlwdG9yPWguZXh0ZW5kKHtwcm9jZXNzQmxvY2s6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9jaXBoZXIsZD1jLmJsb2NrU2l6ZTt0LmNhbGwodGhpcyxhLGIsZCk7Yy5lbmNyeXB0QmxvY2soYSxiKTt0aGlzLl9wcmV2QmxvY2s9YS5zbGljZShiLGIrZCl9fSk7aC5EZWNyeXB0b3I9aC5leHRlbmQoe3Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2NpcGhlcixkPWMuYmxvY2tTaXplLGU9YS5zbGljZShiLGIrZCk7Yy5kZWNyeXB0QmxvY2soYSxcblx0Yik7dC5jYWxsKHRoaXMsYSxiLGQpO3RoaXMuX3ByZXZCbG9jaz1lfX0pO209bS5DQkM9aDtoPShnLnBhZD17fSkuUGtjczc9e3BhZDpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz00KmIsYz1jLWEuc2lnQnl0ZXMlYyxkPWM8PDI0fGM8PDE2fGM8PDh8YyxlPVtdLGY9MDtmPGM7Zis9NCllLnB1c2goZCk7Yz1sLmNyZWF0ZShlLGMpO2EuY29uY2F0KGMpfSx1bnBhZDpmdW5jdGlvbihhKXthLnNpZ0J5dGVzLT1hLndvcmRzW2Euc2lnQnl0ZXMtMT4+PjJdJjI1NX19O2YuQmxvY2tDaXBoZXI9bi5leHRlbmQoe2NmZzpuLmNmZy5leHRlbmQoe21vZGU6bSxwYWRkaW5nOmh9KSxyZXNldDpmdW5jdGlvbigpe24ucmVzZXQuY2FsbCh0aGlzKTt2YXIgYT10aGlzLmNmZyxiPWEuaXYsYT1hLm1vZGU7aWYodGhpcy5feGZvcm1Nb2RlPT10aGlzLl9FTkNfWEZPUk1fTU9ERSl2YXIgYz1hLmNyZWF0ZUVuY3J5cHRvcjtlbHNlIGM9YS5jcmVhdGVEZWNyeXB0b3IsdGhpcy5fbWluQnVmZmVyU2l6ZT0xO1xuXHR0aGlzLl9tb2RlPWMuY2FsbChhLHRoaXMsYiYmYi53b3Jkcyl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe3RoaXMuX21vZGUucHJvY2Vzc0Jsb2NrKGEsYil9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jZmcucGFkZGluZztpZih0aGlzLl94Zm9ybU1vZGU9PXRoaXMuX0VOQ19YRk9STV9NT0RFKXthLnBhZCh0aGlzLl9kYXRhLHRoaXMuYmxvY2tTaXplKTt2YXIgYj10aGlzLl9wcm9jZXNzKCEwKX1lbHNlIGI9dGhpcy5fcHJvY2VzcyghMCksYS51bnBhZChiKTtyZXR1cm4gYn0sYmxvY2tTaXplOjR9KTt2YXIgcD1mLkNpcGhlclBhcmFtcz1rLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhKXt0aGlzLm1peEluKGEpfSx0b1N0cmluZzpmdW5jdGlvbihhKXtyZXR1cm4oYXx8dGhpcy5mb3JtYXR0ZXIpLnN0cmluZ2lmeSh0aGlzKX19KSxtPShnLmZvcm1hdD17fSkuT3BlblNTTD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEuY2lwaGVydGV4dDthPWEuc2FsdDtcblx0cmV0dXJuKGE/bC5jcmVhdGUoWzEzOTg4OTM2ODQsMTcwMTA3NjgzMV0pLmNvbmNhdChhKS5jb25jYXQoYik6YikudG9TdHJpbmcocil9LHBhcnNlOmZ1bmN0aW9uKGEpe2E9ci5wYXJzZShhKTt2YXIgYj1hLndvcmRzO2lmKDEzOTg4OTM2ODQ9PWJbMF0mJjE3MDEwNzY4MzE9PWJbMV0pe3ZhciBjPWwuY3JlYXRlKGIuc2xpY2UoMiw0KSk7Yi5zcGxpY2UoMCw0KTthLnNpZ0J5dGVzLT0xNn1yZXR1cm4gcC5jcmVhdGUoe2NpcGhlcnRleHQ6YSxzYWx0OmN9KX19LGo9Zi5TZXJpYWxpemFibGVDaXBoZXI9ay5leHRlbmQoe2NmZzprLmV4dGVuZCh7Zm9ybWF0Om19KSxlbmNyeXB0OmZ1bmN0aW9uKGEsYixjLGQpe2Q9dGhpcy5jZmcuZXh0ZW5kKGQpO3ZhciBlPWEuY3JlYXRlRW5jcnlwdG9yKGMsZCk7Yj1lLmZpbmFsaXplKGIpO2U9ZS5jZmc7cmV0dXJuIHAuY3JlYXRlKHtjaXBoZXJ0ZXh0OmIsa2V5OmMsaXY6ZS5pdixhbGdvcml0aG06YSxtb2RlOmUubW9kZSxwYWRkaW5nOmUucGFkZGluZyxcblx0YmxvY2tTaXplOmEuYmxvY2tTaXplLGZvcm1hdHRlcjpkLmZvcm1hdH0pfSxkZWNyeXB0OmZ1bmN0aW9uKGEsYixjLGQpe2Q9dGhpcy5jZmcuZXh0ZW5kKGQpO2I9dGhpcy5fcGFyc2UoYixkLmZvcm1hdCk7cmV0dXJuIGEuY3JlYXRlRGVjcnlwdG9yKGMsZCkuZmluYWxpemUoYi5jaXBoZXJ0ZXh0KX0sX3BhcnNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGE/Yi5wYXJzZShhLHRoaXMpOmF9fSksZz0oZy5rZGY9e30pLk9wZW5TU0w9e2V4ZWN1dGU6ZnVuY3Rpb24oYSxiLGMsZCl7ZHx8KGQ9bC5yYW5kb20oOCkpO2E9di5jcmVhdGUoe2tleVNpemU6YitjfSkuY29tcHV0ZShhLGQpO2M9bC5jcmVhdGUoYS53b3Jkcy5zbGljZShiKSw0KmMpO2Euc2lnQnl0ZXM9NCpiO3JldHVybiBwLmNyZWF0ZSh7a2V5OmEsaXY6YyxzYWx0OmR9KX19LHM9Zi5QYXNzd29yZEJhc2VkQ2lwaGVyPWouZXh0ZW5kKHtjZmc6ai5jZmcuZXh0ZW5kKHtrZGY6Z30pLGVuY3J5cHQ6ZnVuY3Rpb24oYSxcblx0YixjLGQpe2Q9dGhpcy5jZmcuZXh0ZW5kKGQpO2M9ZC5rZGYuZXhlY3V0ZShjLGEua2V5U2l6ZSxhLml2U2l6ZSk7ZC5pdj1jLml2O2E9ai5lbmNyeXB0LmNhbGwodGhpcyxhLGIsYy5rZXksZCk7YS5taXhJbihjKTtyZXR1cm4gYX0sZGVjcnlwdDpmdW5jdGlvbihhLGIsYyxkKXtkPXRoaXMuY2ZnLmV4dGVuZChkKTtiPXRoaXMuX3BhcnNlKGIsZC5mb3JtYXQpO2M9ZC5rZGYuZXhlY3V0ZShjLGEua2V5U2l6ZSxhLml2U2l6ZSxiLnNhbHQpO2QuaXY9Yy5pdjtyZXR1cm4gai5kZWNyeXB0LmNhbGwodGhpcyxhLGIsYy5rZXksZCl9fSl9KCk7XG5cdFxuXHQvKlxuXHRDcnlwdG9KUyB2My4xLjIgYWVzLW1pbi5qc1xuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcblx0KGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2Vcblx0Ki9cblx0KGZ1bmN0aW9uKCl7Zm9yKHZhciBxPUNyeXB0b0pTLHg9cS5saWIuQmxvY2tDaXBoZXIscj1xLmFsZ28saj1bXSx5PVtdLHo9W10sQT1bXSxCPVtdLEM9W10scz1bXSx1PVtdLHY9W10sdz1bXSxnPVtdLGs9MDsyNTY+aztrKyspZ1trXT0xMjg+az9rPDwxOms8PDFeMjgzO2Zvcih2YXIgbj0wLGw9MCxrPTA7MjU2Pms7aysrKXt2YXIgZj1sXmw8PDFebDw8Ml5sPDwzXmw8PDQsZj1mPj4+OF5mJjI1NV45OTtqW25dPWY7eVtmXT1uO3ZhciB0PWdbbl0sRD1nW3RdLEU9Z1tEXSxiPTI1NypnW2ZdXjE2ODQzMDA4KmY7eltuXT1iPDwyNHxiPj4+ODtBW25dPWI8PDE2fGI+Pj4xNjtCW25dPWI8PDh8Yj4+PjI0O0Nbbl09YjtiPTE2ODQzMDA5KkVeNjU1MzcqRF4yNTcqdF4xNjg0MzAwOCpuO3NbZl09Yjw8MjR8Yj4+Pjg7dVtmXT1iPDwxNnxiPj4+MTY7dltmXT1iPDw4fGI+Pj4yNDt3W2ZdPWI7bj8obj10XmdbZ1tnW0VedF1dXSxsXj1nW2dbbF1dKTpuPWw9MX12YXIgRj1bMCwxLDIsNCw4LFxuXHQxNiwzMiw2NCwxMjgsMjcsNTRdLHI9ci5BRVM9eC5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7Zm9yKHZhciBjPXRoaXMuX2tleSxlPWMud29yZHMsYT1jLnNpZ0J5dGVzLzQsYz00KigodGhpcy5fblJvdW5kcz1hKzYpKzEpLGI9dGhpcy5fa2V5U2NoZWR1bGU9W10saD0wO2g8YztoKyspaWYoaDxhKWJbaF09ZVtoXTtlbHNle3ZhciBkPWJbaC0xXTtoJWE/NjxhJiY0PT1oJWEmJihkPWpbZD4+PjI0XTw8MjR8altkPj4+MTYmMjU1XTw8MTZ8altkPj4+OCYyNTVdPDw4fGpbZCYyNTVdKTooZD1kPDw4fGQ+Pj4yNCxkPWpbZD4+PjI0XTw8MjR8altkPj4+MTYmMjU1XTw8MTZ8altkPj4+OCYyNTVdPDw4fGpbZCYyNTVdLGRePUZbaC9hfDBdPDwyNCk7YltoXT1iW2gtYV1eZH1lPXRoaXMuX2ludktleVNjaGVkdWxlPVtdO2ZvcihhPTA7YTxjO2ErKyloPWMtYSxkPWElND9iW2hdOmJbaC00XSxlW2FdPTQ+YXx8ND49aD9kOnNbaltkPj4+MjRdXV51W2pbZD4+PjE2JjI1NV1dXnZbaltkPj4+XG5cdDgmMjU1XV1ed1tqW2QmMjU1XV19LGVuY3J5cHRCbG9jazpmdW5jdGlvbihjLGUpe3RoaXMuX2RvQ3J5cHRCbG9jayhjLGUsdGhpcy5fa2V5U2NoZWR1bGUseixBLEIsQyxqKX0sZGVjcnlwdEJsb2NrOmZ1bmN0aW9uKGMsZSl7dmFyIGE9Y1tlKzFdO2NbZSsxXT1jW2UrM107Y1tlKzNdPWE7dGhpcy5fZG9DcnlwdEJsb2NrKGMsZSx0aGlzLl9pbnZLZXlTY2hlZHVsZSxzLHUsdix3LHkpO2E9Y1tlKzFdO2NbZSsxXT1jW2UrM107Y1tlKzNdPWF9LF9kb0NyeXB0QmxvY2s6ZnVuY3Rpb24oYyxlLGEsYixoLGQsaixtKXtmb3IodmFyIG49dGhpcy5fblJvdW5kcyxmPWNbZV1eYVswXSxnPWNbZSsxXV5hWzFdLGs9Y1tlKzJdXmFbMl0scD1jW2UrM11eYVszXSxsPTQsdD0xO3Q8bjt0KyspdmFyIHE9YltmPj4+MjRdXmhbZz4+PjE2JjI1NV1eZFtrPj4+OCYyNTVdXmpbcCYyNTVdXmFbbCsrXSxyPWJbZz4+PjI0XV5oW2s+Pj4xNiYyNTVdXmRbcD4+PjgmMjU1XV5qW2YmMjU1XV5hW2wrK10scz1cblx0YltrPj4+MjRdXmhbcD4+PjE2JjI1NV1eZFtmPj4+OCYyNTVdXmpbZyYyNTVdXmFbbCsrXSxwPWJbcD4+PjI0XV5oW2Y+Pj4xNiYyNTVdXmRbZz4+PjgmMjU1XV5qW2smMjU1XV5hW2wrK10sZj1xLGc9cixrPXM7cT0obVtmPj4+MjRdPDwyNHxtW2c+Pj4xNiYyNTVdPDwxNnxtW2s+Pj44JjI1NV08PDh8bVtwJjI1NV0pXmFbbCsrXTtyPShtW2c+Pj4yNF08PDI0fG1baz4+PjE2JjI1NV08PDE2fG1bcD4+PjgmMjU1XTw8OHxtW2YmMjU1XSleYVtsKytdO3M9KG1baz4+PjI0XTw8MjR8bVtwPj4+MTYmMjU1XTw8MTZ8bVtmPj4+OCYyNTVdPDw4fG1bZyYyNTVdKV5hW2wrK107cD0obVtwPj4+MjRdPDwyNHxtW2Y+Pj4xNiYyNTVdPDwxNnxtW2c+Pj44JjI1NV08PDh8bVtrJjI1NV0pXmFbbCsrXTtjW2VdPXE7Y1tlKzFdPXI7Y1tlKzJdPXM7Y1tlKzNdPXB9LGtleVNpemU6OH0pO3EuQUVTPXguX2NyZWF0ZUhlbHBlcihyKX0pKCk7XG5cdFxuXHQvKlxuXHRDcnlwdG9KUyB2My4xLjIgdHJpcGxlZGVzLW1pbi5qc1xuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcblx0KGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2Vcblx0Ki9cblx0KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gaihiLGMpe3ZhciBhPSh0aGlzLl9sQmxvY2s+Pj5iXnRoaXMuX3JCbG9jaykmYzt0aGlzLl9yQmxvY2tePWE7dGhpcy5fbEJsb2NrXj1hPDxifWZ1bmN0aW9uIGwoYixjKXt2YXIgYT0odGhpcy5fckJsb2NrPj4+Yl50aGlzLl9sQmxvY2spJmM7dGhpcy5fbEJsb2NrXj1hO3RoaXMuX3JCbG9ja149YTw8Yn12YXIgaD1DcnlwdG9KUyxlPWgubGliLG49ZS5Xb3JkQXJyYXksZT1lLkJsb2NrQ2lwaGVyLGc9aC5hbGdvLHE9WzU3LDQ5LDQxLDMzLDI1LDE3LDksMSw1OCw1MCw0MiwzNCwyNiwxOCwxMCwyLDU5LDUxLDQzLDM1LDI3LDE5LDExLDMsNjAsNTIsNDQsMzYsNjMsNTUsNDcsMzksMzEsMjMsMTUsNyw2Miw1NCw0NiwzOCwzMCwyMiwxNCw2LDYxLDUzLDQ1LDM3LDI5LDIxLDEzLDUsMjgsMjAsMTIsNF0scD1bMTQsMTcsMTEsMjQsMSw1LDMsMjgsMTUsNiwyMSwxMCwyMywxOSwxMiw0LDI2LDgsMTYsNywyNywyMCwxMywyLDQxLDUyLDMxLDM3LDQ3LFxuXHQ1NSwzMCw0MCw1MSw0NSwzMyw0OCw0NCw0OSwzOSw1NiwzNCw1Myw0Niw0Miw1MCwzNiwyOSwzMl0scj1bMSwyLDQsNiw4LDEwLDEyLDE0LDE1LDE3LDE5LDIxLDIzLDI1LDI3LDI4XSxzPVt7XCIwXCI6ODQyMTg4OCwyNjg0MzU0NTY6MzI3NjgsNTM2ODcwOTEyOjg0MjEzNzgsODA1MzA2MzY4OjIsMTA3Mzc0MTgyNDo1MTIsMTM0MjE3NzI4MDo4NDIxODkwLDE2MTA2MTI3MzY6ODM4OTEyMiwxODc5MDQ4MTkyOjgzODg2MDgsMjE0NzQ4MzY0ODo1MTQsMjQxNTkxOTEwNDo4Mzg5MTIwLDI2ODQzNTQ1NjA6MzMyODAsMjk1Mjc5MDAxNjo4NDIxMzc2LDMyMjEyMjU0NzI6MzI3NzAsMzQ4OTY2MDkyODo4Mzg4NjEwLDM3NTgwOTYzODQ6MCw0MDI2NTMxODQwOjMzMjgyLDEzNDIxNzcyODowLDQwMjY1MzE4NDo4NDIxODkwLDY3MTA4ODY0MDozMzI4Miw5Mzk1MjQwOTY6MzI3NjgsMTIwNzk1OTU1Mjo4NDIxODg4LDE0NzYzOTUwMDg6NTEyLDE3NDQ4MzA0NjQ6ODQyMTM3OCwyMDEzMjY1OTIwOjIsXG5cdDIyODE3MDEzNzY6ODM4OTEyMCwyNTUwMTM2ODMyOjMzMjgwLDI4MTg1NzIyODg6ODQyMTM3NiwzMDg3MDA3NzQ0OjgzODkxMjIsMzM1NTQ0MzIwMDo4Mzg4NjEwLDM2MjM4Nzg2NTY6MzI3NzAsMzg5MjMxNDExMjo1MTQsNDE2MDc0OTU2ODo4Mzg4NjA4LDE6MzI3NjgsMjY4NDM1NDU3OjIsNTM2ODcwOTEzOjg0MjE4ODgsODA1MzA2MzY5OjgzODg2MDgsMTA3Mzc0MTgyNTo4NDIxMzc4LDEzNDIxNzcyODE6MzMyODAsMTYxMDYxMjczNzo1MTIsMTg3OTA0ODE5Mzo4Mzg5MTIyLDIxNDc0ODM2NDk6ODQyMTg5MCwyNDE1OTE5MTA1Ojg0MjEzNzYsMjY4NDM1NDU2MTo4Mzg4NjEwLDI5NTI3OTAwMTc6MzMyODIsMzIyMTIyNTQ3Mzo1MTQsMzQ4OTY2MDkyOTo4Mzg5MTIwLDM3NTgwOTYzODU6MzI3NzAsNDAyNjUzMTg0MTowLDEzNDIxNzcyOTo4NDIxODkwLDQwMjY1MzE4NTo4NDIxMzc2LDY3MTA4ODY0MTo4Mzg4NjA4LDkzOTUyNDA5Nzo1MTIsMTIwNzk1OTU1MzozMjc2OCwxNDc2Mzk1MDA5OjgzODg2MTAsXG5cdDE3NDQ4MzA0NjU6MiwyMDEzMjY1OTIxOjMzMjgyLDIyODE3MDEzNzc6MzI3NzAsMjU1MDEzNjgzMzo4Mzg5MTIyLDI4MTg1NzIyODk6NTE0LDMwODcwMDc3NDU6ODQyMTg4OCwzMzU1NDQzMjAxOjgzODkxMjAsMzYyMzg3ODY1NzowLDM4OTIzMTQxMTM6MzMyODAsNDE2MDc0OTU2OTo4NDIxMzc4fSx7XCIwXCI6MTA3NDI4MjUxMiwxNjc3NzIxNjoxNjM4NCwzMzU1NDQzMjo1MjQyODgsNTAzMzE2NDg6MTA3NDI2NjEyOCw2NzEwODg2NDoxMDczNzQxODQwLDgzODg2MDgwOjEwNzQyODI0OTYsMTAwNjYzMjk2OjEwNzM3NTgyMDgsMTE3NDQwNTEyOjE2LDEzNDIxNzcyODo1NDA2NzIsMTUwOTk0OTQ0OjEwNzM3NTgyMjQsMTY3NzcyMTYwOjEwNzM3NDE4MjQsMTg0NTQ5Mzc2OjU0MDY4OCwyMDEzMjY1OTI6NTI0MzA0LDIxODEwMzgwODowLDIzNDg4MTAyNDoxNjQwMCwyNTE2NTgyNDA6MTA3NDI2NjExMiw4Mzg4NjA4OjEwNzM3NTgyMDgsMjUxNjU4MjQ6NTQwNjg4LDQxOTQzMDQwOjE2LDU4NzIwMjU2OjEwNzM3NTgyMjQsXG5cdDc1NDk3NDcyOjEwNzQyODI1MTIsOTIyNzQ2ODg6MTA3Mzc0MTgyNCwxMDkwNTE5MDQ6NTI0Mjg4LDEyNTgyOTEyMDoxMDc0MjY2MTI4LDE0MjYwNjMzNjo1MjQzMDQsMTU5MzgzNTUyOjAsMTc2MTYwNzY4OjE2Mzg0LDE5MjkzNzk4NDoxMDc0MjY2MTEyLDIwOTcxNTIwMDoxMDczNzQxODQwLDIyNjQ5MjQxNjo1NDA2NzIsMjQzMjY5NjMyOjEwNzQyODI0OTYsMjYwMDQ2ODQ4OjE2NDAwLDI2ODQzNTQ1NjowLDI4NTIxMjY3MjoxMDc0MjY2MTI4LDMwMTk4OTg4ODoxMDczNzU4MjI0LDMxODc2NzEwNDoxMDc0MjgyNDk2LDMzNTU0NDMyMDoxMDc0MjY2MTEyLDM1MjMyMTUzNjoxNiwzNjkwOTg3NTI6NTQwNjg4LDM4NTg3NTk2ODoxNjM4NCw0MDI2NTMxODQ6MTY0MDAsNDE5NDMwNDAwOjUyNDI4OCw0MzYyMDc2MTY6NTI0MzA0LDQ1Mjk4NDgzMjoxMDczNzQxODQwLDQ2OTc2MjA0ODo1NDA2NzIsNDg2NTM5MjY0OjEwNzM3NTgyMDgsNTAzMzE2NDgwOjEwNzM3NDE4MjQsNTIwMDkzNjk2OjEwNzQyODI1MTIsXG5cdDI3NjgyNDA2NDo1NDA2ODgsMjkzNjAxMjgwOjUyNDI4OCwzMTAzNzg0OTY6MTA3NDI2NjExMiwzMjcxNTU3MTI6MTYzODQsMzQzOTMyOTI4OjEwNzM3NTgyMDgsMzYwNzEwMTQ0OjEwNzQyODI1MTIsMzc3NDg3MzYwOjE2LDM5NDI2NDU3NjoxMDczNzQxODI0LDQxMTA0MTc5MjoxMDc0MjgyNDk2LDQyNzgxOTAwODoxMDczNzQxODQwLDQ0NDU5NjIyNDoxMDczNzU4MjI0LDQ2MTM3MzQ0MDo1MjQzMDQsNDc4MTUwNjU2OjAsNDk0OTI3ODcyOjE2NDAwLDUxMTcwNTA4ODoxMDc0MjY2MTI4LDUyODQ4MjMwNDo1NDA2NzJ9LHtcIjBcIjoyNjAsMTA0ODU3NjowLDIwOTcxNTI6NjcxMDkxMjAsMzE0NTcyODo2NTc5Niw0MTk0MzA0OjY1NTQwLDUyNDI4ODA6NjcxMDg4NjgsNjI5MTQ1Njo2NzE3NDY2MCw3MzQwMDMyOjY3MTc0NDAwLDgzODg2MDg6NjcxMDg4NjQsOTQzNzE4NDo2NzE3NDY1NiwxMDQ4NTc2MDo2NTc5MiwxMTUzNDMzNjo2NzE3NDQwNCwxMjU4MjkxMjo2NzEwOTEyNCwxMzYzMTQ4ODo2NTUzNixcblx0MTQ2ODAwNjQ6NCwxNTcyODY0MDoyNTYsNTI0Mjg4OjY3MTc0NjU2LDE1NzI4NjQ6NjcxNzQ0MDQsMjYyMTQ0MDowLDM2NzAwMTY6NjcxMDkxMjAsNDcxODU5Mjo2NzEwODg2OCw1NzY3MTY4OjY1NTM2LDY4MTU3NDQ6NjU1NDAsNzg2NDMyMDoyNjAsODkxMjg5Njo0LDk5NjE0NzI6MjU2LDExMDEwMDQ4OjY3MTc0NDAwLDEyMDU4NjI0OjY1Nzk2LDEzMTA3MjAwOjY1NzkyLDE0MTU1Nzc2OjY3MTA5MTI0LDE1MjA0MzUyOjY3MTc0NjYwLDE2MjUyOTI4OjY3MTA4ODY0LDE2Nzc3MjE2OjY3MTc0NjU2LDE3ODI1NzkyOjY1NTQwLDE4ODc0MzY4OjY1NTM2LDE5OTIyOTQ0OjY3MTA5MTIwLDIwOTcxNTIwOjI1NiwyMjAyMDA5Njo2NzE3NDY2MCwyMzA2ODY3Mjo2NzEwODg2OCwyNDExNzI0ODowLDI1MTY1ODI0OjY3MTA5MTI0LDI2MjE0NDAwOjY3MTA4ODY0LDI3MjYyOTc2OjQsMjgzMTE1NTI6NjU3OTIsMjkzNjAxMjg6NjcxNzQ0MDAsMzA0MDg3MDQ6MjYwLDMxNDU3MjgwOjY1Nzk2LDMyNTA1ODU2OjY3MTc0NDA0LFxuXHQxNzMwMTUwNDo2NzEwODg2NCwxODM1MDA4MDoyNjAsMTkzOTg2NTY6NjcxNzQ2NTYsMjA0NDcyMzI6MCwyMTQ5NTgwODo2NTU0MCwyMjU0NDM4NDo2NzEwOTEyMCwyMzU5Mjk2MDoyNTYsMjQ2NDE1MzY6NjcxNzQ0MDQsMjU2OTAxMTI6NjU1MzYsMjY3Mzg2ODg6NjcxNzQ2NjAsMjc3ODcyNjQ6NjU3OTYsMjg4MzU4NDA6NjcxMDg4NjgsMjk4ODQ0MTY6NjcxMDkxMjQsMzA5MzI5OTI6NjcxNzQ0MDAsMzE5ODE1Njg6NCwzMzAzMDE0NDo2NTc5Mn0se1wiMFwiOjIxNTE2ODIwNDgsNjU1MzY6MjE0NzQ4NzgwOCwxMzEwNzI6NDE5ODQ2NCwxOTY2MDg6MjE1MTY3Nzk1MiwyNjIxNDQ6MCwzMjc2ODA6NDE5ODQwMCwzOTMyMTY6MjE0NzQ4MzcxMiw0NTg3NTI6NDE5NDM2OCw1MjQyODg6MjE0NzQ4MzY0OCw1ODk4MjQ6NDE5NDMwNCw2NTUzNjA6NjQsNzIwODk2OjIxNDc0ODc3NDQsNzg2NDMyOjIxNTE2NzgwMTYsODUxOTY4OjQxNjAsOTE3NTA0OjQwOTYsOTgzMDQwOjIxNTE2ODIxMTIsMzI3Njg6MjE0NzQ4NzgwOCxcblx0OTgzMDQ6NjQsMTYzODQwOjIxNTE2NzgwMTYsMjI5Mzc2OjIxNDc0ODc3NDQsMjk0OTEyOjQxOTg0MDAsMzYwNDQ4OjIxNTE2ODIxMTIsNDI1OTg0OjAsNDkxNTIwOjIxNTE2Nzc5NTIsNTU3MDU2OjQwOTYsNjIyNTkyOjIxNTE2ODIwNDgsNjg4MTI4OjQxOTQzMDQsNzUzNjY0OjQxNjAsODE5MjAwOjIxNDc0ODM2NDgsODg0NzM2OjQxOTQzNjgsOTUwMjcyOjQxOTg0NjQsMTAxNTgwODoyMTQ3NDgzNzEyLDEwNDg1NzY6NDE5NDM2OCwxMTE0MTEyOjQxOTg0MDAsMTE3OTY0ODoyMTQ3NDgzNzEyLDEyNDUxODQ6MCwxMzEwNzIwOjQxNjAsMTM3NjI1NjoyMTUxNjc4MDE2LDE0NDE3OTI6MjE1MTY4MjA0OCwxNTA3MzI4OjIxNDc0ODc4MDgsMTU3Mjg2NDoyMTUxNjgyMTEyLDE2Mzg0MDA6MjE0NzQ4MzY0OCwxNzAzOTM2OjIxNTE2Nzc5NTIsMTc2OTQ3Mjo0MTk4NDY0LDE4MzUwMDg6MjE0NzQ4Nzc0NCwxOTAwNTQ0OjQxOTQzMDQsMTk2NjA4MDo2NCwyMDMxNjE2OjQwOTYsMTA4MTM0NDoyMTUxNjc3OTUyLFxuXHQxMTQ2ODgwOjIxNTE2ODIxMTIsMTIxMjQxNjowLDEyNzc5NTI6NDE5ODQwMCwxMzQzNDg4OjQxOTQzNjgsMTQwOTAyNDoyMTQ3NDgzNjQ4LDE0NzQ1NjA6MjE0NzQ4NzgwOCwxNTQwMDk2OjY0LDE2MDU2MzI6MjE0NzQ4MzcxMiwxNjcxMTY4OjQwOTYsMTczNjcwNDoyMTQ3NDg3NzQ0LDE4MDIyNDA6MjE1MTY3ODAxNiwxODY3Nzc2OjQxNjAsMTkzMzMxMjoyMTUxNjgyMDQ4LDE5OTg4NDg6NDE5NDMwNCwyMDY0Mzg0OjQxOTg0NjR9LHtcIjBcIjoxMjgsNDA5NjoxNzAzOTM2MCw4MTkyOjI2MjE0NCwxMjI4ODo1MzY4NzA5MTIsMTYzODQ6NTM3MTMzMTg0LDIwNDgwOjE2Nzc3MzQ0LDI0NTc2OjU1MzY0ODI1NiwyODY3MjoyNjIyNzIsMzI3Njg6MTY3NzcyMTYsMzY4NjQ6NTM3MTMzMDU2LDQwOTYwOjUzNjg3MTA0MCw0NTA1Njo1NTM5MTA0MDAsNDkxNTI6NTUzOTEwMjcyLDUzMjQ4OjAsNTczNDQ6MTcwMzk0ODgsNjE0NDA6NTUzNjQ4MTI4LDIwNDg6MTcwMzk0ODgsNjE0NDo1NTM2NDgyNTYsXG5cdDEwMjQwOjEyOCwxNDMzNjoxNzAzOTM2MCwxODQzMjoyNjIxNDQsMjI1Mjg6NTM3MTMzMTg0LDI2NjI0OjU1MzkxMDI3MiwzMDcyMDo1MzY4NzA5MTIsMzQ4MTY6NTM3MTMzMDU2LDM4OTEyOjAsNDMwMDg6NTUzOTEwNDAwLDQ3MTA0OjE2Nzc3MzQ0LDUxMjAwOjUzNjg3MTA0MCw1NTI5Njo1NTM2NDgxMjgsNTkzOTI6MTY3NzcyMTYsNjM0ODg6MjYyMjcyLDY1NTM2OjI2MjE0NCw2OTYzMjoxMjgsNzM3Mjg6NTM2ODcwOTEyLDc3ODI0OjU1MzY0ODI1Niw4MTkyMDoxNjc3NzM0NCw4NjAxNjo1NTM5MTAyNzIsOTAxMTI6NTM3MTMzMTg0LDk0MjA4OjE2Nzc3MjE2LDk4MzA0OjU1MzkxMDQwMCwxMDI0MDA6NTUzNjQ4MTI4LDEwNjQ5NjoxNzAzOTM2MCwxMTA1OTI6NTM3MTMzMDU2LDExNDY4ODoyNjIyNzIsMTE4Nzg0OjUzNjg3MTA0MCwxMjI4ODA6MCwxMjY5NzY6MTcwMzk0ODgsNjc1ODQ6NTUzNjQ4MjU2LDcxNjgwOjE2Nzc3MjE2LDc1Nzc2OjE3MDM5MzYwLDc5ODcyOjUzNzEzMzE4NCxcblx0ODM5Njg6NTM2ODcwOTEyLDg4MDY0OjE3MDM5NDg4LDkyMTYwOjEyOCw5NjI1Njo1NTM5MTAyNzIsMTAwMzUyOjI2MjI3MiwxMDQ0NDg6NTUzOTEwNDAwLDEwODU0NDowLDExMjY0MDo1NTM2NDgxMjgsMTE2NzM2OjE2Nzc3MzQ0LDEyMDgzMjoyNjIxNDQsMTI0OTI4OjUzNzEzMzA1NiwxMjkwMjQ6NTM2ODcxMDQwfSx7XCIwXCI6MjY4NDM1NDY0LDI1Njo4MTkyLDUxMjoyNzA1MzI2MDgsNzY4OjI3MDU0MDgwOCwxMDI0OjI2ODQ0MzY0OCwxMjgwOjIwOTcxNTIsMTUzNjoyMDk3MTYwLDE3OTI6MjY4NDM1NDU2LDIwNDg6MCwyMzA0OjI2ODQ0MzY1NiwyNTYwOjIxMDUzNDQsMjgxNjo4LDMwNzI6MjcwNTMyNjE2LDMzMjg6MjEwNTM1MiwzNTg0OjgyMDAsMzg0MDoyNzA1NDA4MDAsMTI4OjI3MDUzMjYwOCwzODQ6MjcwNTQwODA4LDY0MDo4LDg5NjoyMDk3MTUyLDExNTI6MjEwNTM1MiwxNDA4OjI2ODQzNTQ2NCwxNjY0OjI2ODQ0MzY0OCwxOTIwOjgyMDAsMjE3NjoyMDk3MTYwLDI0MzI6ODE5Mixcblx0MjY4ODoyNjg0NDM2NTYsMjk0NDoyNzA1MzI2MTYsMzIwMDowLDM0NTY6MjcwNTQwODAwLDM3MTI6MjEwNTM0NCwzOTY4OjI2ODQzNTQ1Niw0MDk2OjI2ODQ0MzY0OCw0MzUyOjI3MDUzMjYxNiw0NjA4OjI3MDU0MDgwOCw0ODY0OjgyMDAsNTEyMDoyMDk3MTUyLDUzNzY6MjY4NDM1NDU2LDU2MzI6MjY4NDM1NDY0LDU4ODg6MjEwNTM0NCw2MTQ0OjIxMDUzNTIsNjQwMDowLDY2NTY6OCw2OTEyOjI3MDUzMjYwOCw3MTY4OjgxOTIsNzQyNDoyNjg0NDM2NTYsNzY4MDoyNzA1NDA4MDAsNzkzNjoyMDk3MTYwLDQyMjQ6OCw0NDgwOjIxMDUzNDQsNDczNjoyMDk3MTUyLDQ5OTI6MjY4NDM1NDY0LDUyNDg6MjY4NDQzNjQ4LDU1MDQ6ODIwMCw1NzYwOjI3MDU0MDgwOCw2MDE2OjI3MDUzMjYwOCw2MjcyOjI3MDU0MDgwMCw2NTI4OjI3MDUzMjYxNiw2Nzg0OjgxOTIsNzA0MDoyMTA1MzUyLDcyOTY6MjA5NzE2MCw3NTUyOjAsNzgwODoyNjg0MzU0NTYsODA2NDoyNjg0NDM2NTZ9LHtcIjBcIjoxMDQ4NTc2LFxuXHQxNjozMzU1NTQ1NywzMjoxMDI0LDQ4OjEwNDk2MDEsNjQ6MzQ2MDQwMzMsODA6MCw5NjoxLDExMjozNDYwMzAwOSwxMjg6MzM1NTU0NTYsMTQ0OjEwNDg1NzcsMTYwOjMzNTU0NDMzLDE3NjozNDYwNDAzMiwxOTI6MzQ2MDMwMDgsMjA4OjEwMjUsMjI0OjEwNDk2MDAsMjQwOjMzNTU0NDMyLDg6MzQ2MDMwMDksMjQ6MCw0MDozMzU1NTQ1Nyw1NjozNDYwNDAzMiw3MjoxMDQ4NTc2LDg4OjMzNTU0NDMzLDEwNDozMzU1NDQzMiwxMjA6MTAyNSwxMzY6MTA0OTYwMSwxNTI6MzM1NTU0NTYsMTY4OjM0NjAzMDA4LDE4NDoxMDQ4NTc3LDIwMDoxMDI0LDIxNjozNDYwNDAzMywyMzI6MSwyNDg6MTA0OTYwMCwyNTY6MzM1NTQ0MzIsMjcyOjEwNDg1NzYsMjg4OjMzNTU1NDU3LDMwNDozNDYwMzAwOSwzMjA6MTA0ODU3NywzMzY6MzM1NTU0NTYsMzUyOjM0NjA0MDMyLDM2ODoxMDQ5NjAxLDM4NDoxMDI1LDQwMDozNDYwNDAzMyw0MTY6MTA0OTYwMCw0MzI6MSw0NDg6MCw0NjQ6MzQ2MDMwMDgsNDgwOjMzNTU0NDMzLFxuXHQ0OTY6MTAyNCwyNjQ6MTA0OTYwMCwyODA6MzM1NTU0NTcsMjk2OjM0NjAzMDA5LDMxMjoxLDMyODozMzU1NDQzMiwzNDQ6MTA0ODU3NiwzNjA6MTAyNSwzNzY6MzQ2MDQwMzIsMzkyOjMzNTU0NDMzLDQwODozNDYwMzAwOCw0MjQ6MCw0NDA6MzQ2MDQwMzMsNDU2OjEwNDk2MDEsNDcyOjEwMjQsNDg4OjMzNTU1NDU2LDUwNDoxMDQ4NTc3fSx7XCIwXCI6MTM0MjE5ODA4LDE6MTMxMDcyLDI6MTM0MjE3NzI4LDM6MzIsNDoxMzExMDQsNToxMzQzNTA4ODAsNjoxMzQzNTA4NDgsNzoyMDQ4LDg6MTM0MzQ4ODAwLDk6MTM0MjE5Nzc2LDEwOjEzMzEyMCwxMToxMzQzNDg4MzIsMTI6MjA4MCwxMzowLDE0OjEzNDIxNzc2MCwxNToxMzMxNTIsMjE0NzQ4MzY0ODoyMDQ4LDIxNDc0ODM2NDk6MTM0MzUwODgwLDIxNDc0ODM2NTA6MTM0MjE5ODA4LDIxNDc0ODM2NTE6MTM0MjE3NzI4LDIxNDc0ODM2NTI6MTM0MzQ4ODAwLDIxNDc0ODM2NTM6MTMzMTIwLDIxNDc0ODM2NTQ6MTMzMTUyLDIxNDc0ODM2NTU6MzIsXG5cdDIxNDc0ODM2NTY6MTM0MjE3NzYwLDIxNDc0ODM2NTc6MjA4MCwyMTQ3NDgzNjU4OjEzMTEwNCwyMTQ3NDgzNjU5OjEzNDM1MDg0OCwyMTQ3NDgzNjYwOjAsMjE0NzQ4MzY2MToxMzQzNDg4MzIsMjE0NzQ4MzY2MjoxMzQyMTk3NzYsMjE0NzQ4MzY2MzoxMzEwNzIsMTY6MTMzMTUyLDE3OjEzNDM1MDg0OCwxODozMiwxOToyMDQ4LDIwOjEzNDIxOTc3NiwyMToxMzQyMTc3NjAsMjI6MTM0MzQ4ODMyLDIzOjEzMTA3MiwyNDowLDI1OjEzMTEwNCwyNjoxMzQzNDg4MDAsMjc6MTM0MjE5ODA4LDI4OjEzNDM1MDg4MCwyOToxMzMxMjAsMzA6MjA4MCwzMToxMzQyMTc3MjgsMjE0NzQ4MzY2NDoxMzEwNzIsMjE0NzQ4MzY2NToyMDQ4LDIxNDc0ODM2NjY6MTM0MzQ4ODMyLDIxNDc0ODM2Njc6MTMzMTUyLDIxNDc0ODM2Njg6MzIsMjE0NzQ4MzY2OToxMzQzNDg4MDAsMjE0NzQ4MzY3MDoxMzQyMTc3MjgsMjE0NzQ4MzY3MToxMzQyMTk4MDgsMjE0NzQ4MzY3MjoxMzQzNTA4ODAsMjE0NzQ4MzY3MzoxMzQyMTc3NjAsXG5cdDIxNDc0ODM2NzQ6MTM0MjE5Nzc2LDIxNDc0ODM2NzU6MCwyMTQ3NDgzNjc2OjEzMzEyMCwyMTQ3NDgzNjc3OjIwODAsMjE0NzQ4MzY3ODoxMzExMDQsMjE0NzQ4MzY3OToxMzQzNTA4NDh9XSx0PVs0MTYwNzQ5NTY5LDUyODQ4MjMwNCwzMzAzMDE0NCwyMDY0Mzg0LDEyOTAyNCw4MDY0LDUwNCwyMTQ3NDgzNjc5XSxtPWcuREVTPWUuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe2Zvcih2YXIgYj10aGlzLl9rZXkud29yZHMsYz1bXSxhPTA7NTY+YTthKyspe3ZhciBmPXFbYV0tMTtjW2FdPWJbZj4+PjVdPj4+MzEtZiUzMiYxfWI9dGhpcy5fc3ViS2V5cz1bXTtmb3IoZj0wOzE2PmY7ZisrKXtmb3IodmFyIGQ9YltmXT1bXSxlPXJbZl0sYT0wOzI0PmE7YSsrKWRbYS82fDBdfD1jWyhwW2FdLTErZSklMjhdPDwzMS1hJTYsZFs0KyhhLzZ8MCldfD1jWzI4KyhwW2ErMjRdLTErZSklMjhdPDwzMS1hJTY7ZFswXT1kWzBdPDwxfGRbMF0+Pj4zMTtmb3IoYT0xOzc+YTthKyspZFthXT4+Pj1cblx0NCooYS0xKSszO2RbN109ZFs3XTw8NXxkWzddPj4+Mjd9Yz10aGlzLl9pbnZTdWJLZXlzPVtdO2ZvcihhPTA7MTY+YTthKyspY1thXT1iWzE1LWFdfSxlbmNyeXB0QmxvY2s6ZnVuY3Rpb24oYixjKXt0aGlzLl9kb0NyeXB0QmxvY2soYixjLHRoaXMuX3N1YktleXMpfSxkZWNyeXB0QmxvY2s6ZnVuY3Rpb24oYixjKXt0aGlzLl9kb0NyeXB0QmxvY2soYixjLHRoaXMuX2ludlN1YktleXMpfSxfZG9DcnlwdEJsb2NrOmZ1bmN0aW9uKGIsYyxhKXt0aGlzLl9sQmxvY2s9YltjXTt0aGlzLl9yQmxvY2s9YltjKzFdO2ouY2FsbCh0aGlzLDQsMjUyNjQ1MTM1KTtqLmNhbGwodGhpcywxNiw2NTUzNSk7bC5jYWxsKHRoaXMsMiw4NTg5OTM0NTkpO2wuY2FsbCh0aGlzLDgsMTY3MTE5MzUpO2ouY2FsbCh0aGlzLDEsMTQzMTY1NTc2NSk7Zm9yKHZhciBmPTA7MTY+ZjtmKyspe2Zvcih2YXIgZD1hW2ZdLGU9dGhpcy5fbEJsb2NrLGg9dGhpcy5fckJsb2NrLGc9MCxrPTA7OD5rO2srKylnfD1zW2tdWygoaF5cblx0ZFtrXSkmdFtrXSk+Pj4wXTt0aGlzLl9sQmxvY2s9aDt0aGlzLl9yQmxvY2s9ZV5nfWE9dGhpcy5fbEJsb2NrO3RoaXMuX2xCbG9jaz10aGlzLl9yQmxvY2s7dGhpcy5fckJsb2NrPWE7ai5jYWxsKHRoaXMsMSwxNDMxNjU1NzY1KTtsLmNhbGwodGhpcyw4LDE2NzExOTM1KTtsLmNhbGwodGhpcywyLDg1ODk5MzQ1OSk7ai5jYWxsKHRoaXMsMTYsNjU1MzUpO2ouY2FsbCh0aGlzLDQsMjUyNjQ1MTM1KTtiW2NdPXRoaXMuX2xCbG9jaztiW2MrMV09dGhpcy5fckJsb2NrfSxrZXlTaXplOjIsaXZTaXplOjIsYmxvY2tTaXplOjJ9KTtoLkRFUz1lLl9jcmVhdGVIZWxwZXIobSk7Zz1nLlRyaXBsZURFUz1lLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt2YXIgYj10aGlzLl9rZXkud29yZHM7dGhpcy5fZGVzMT1tLmNyZWF0ZUVuY3J5cHRvcihuLmNyZWF0ZShiLnNsaWNlKDAsMikpKTt0aGlzLl9kZXMyPW0uY3JlYXRlRW5jcnlwdG9yKG4uY3JlYXRlKGIuc2xpY2UoMiw0KSkpO3RoaXMuX2RlczM9XG5cdG0uY3JlYXRlRW5jcnlwdG9yKG4uY3JlYXRlKGIuc2xpY2UoNCw2KSkpfSxlbmNyeXB0QmxvY2s6ZnVuY3Rpb24oYixjKXt0aGlzLl9kZXMxLmVuY3J5cHRCbG9jayhiLGMpO3RoaXMuX2RlczIuZGVjcnlwdEJsb2NrKGIsYyk7dGhpcy5fZGVzMy5lbmNyeXB0QmxvY2soYixjKX0sZGVjcnlwdEJsb2NrOmZ1bmN0aW9uKGIsYyl7dGhpcy5fZGVzMy5kZWNyeXB0QmxvY2soYixjKTt0aGlzLl9kZXMyLmVuY3J5cHRCbG9jayhiLGMpO3RoaXMuX2RlczEuZGVjcnlwdEJsb2NrKGIsYyl9LGtleVNpemU6NixpdlNpemU6MixibG9ja1NpemU6Mn0pO2guVHJpcGxlREVTPWUuX2NyZWF0ZUhlbHBlcihnKX0pKCk7XG5cdFxuXHQvKlxuXHRDcnlwdG9KUyB2My4xLjIgZW5jLWJhc2U2NC1taW4uanNcblx0Y29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG5cdChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG5cdCovXG5cdChmdW5jdGlvbigpe3ZhciBoPUNyeXB0b0pTLGo9aC5saWIuV29yZEFycmF5O2guZW5jLkJhc2U2ND17c3RyaW5naWZ5OmZ1bmN0aW9uKGIpe3ZhciBlPWIud29yZHMsZj1iLnNpZ0J5dGVzLGM9dGhpcy5fbWFwO2IuY2xhbXAoKTtiPVtdO2Zvcih2YXIgYT0wO2E8ZjthKz0zKWZvcih2YXIgZD0oZVthPj4+Ml0+Pj4yNC04KihhJTQpJjI1NSk8PDE2fChlW2ErMT4+PjJdPj4+MjQtOCooKGErMSklNCkmMjU1KTw8OHxlW2ErMj4+PjJdPj4+MjQtOCooKGErMiklNCkmMjU1LGc9MDs0PmcmJmErMC43NSpnPGY7ZysrKWIucHVzaChjLmNoYXJBdChkPj4+NiooMy1nKSY2MykpO2lmKGU9Yy5jaGFyQXQoNjQpKWZvcig7Yi5sZW5ndGglNDspYi5wdXNoKGUpO3JldHVybiBiLmpvaW4oXCJcIil9LHBhcnNlOmZ1bmN0aW9uKGIpe3ZhciBlPWIubGVuZ3RoLGY9dGhpcy5fbWFwLGM9Zi5jaGFyQXQoNjQpO2MmJihjPWIuaW5kZXhPZihjKSwtMSE9YyYmKGU9YykpO2Zvcih2YXIgYz1bXSxhPTAsZD0wO2Q8XG5cdGU7ZCsrKWlmKGQlNCl7dmFyIGc9Zi5pbmRleE9mKGIuY2hhckF0KGQtMSkpPDwyKihkJTQpLGg9Zi5pbmRleE9mKGIuY2hhckF0KGQpKT4+PjYtMiooZCU0KTtjW2E+Pj4yXXw9KGd8aCk8PDI0LTgqKGElNCk7YSsrfXJldHVybiBqLmNyZWF0ZShjLGEpfSxfbWFwOlwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIn19KSgpO1xuXHRcblx0Lypcblx0Q3J5cHRvSlMgdjMuMS4yIG1kNS1taW4uanNcblx0Y29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG5cdChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG5cdCovXG5cdChmdW5jdGlvbihFKXtmdW5jdGlvbiBoKGEsZixnLGoscCxoLGspe2E9YSsoZiZnfH5mJmopK3AraztyZXR1cm4oYTw8aHxhPj4+MzItaCkrZn1mdW5jdGlvbiBrKGEsZixnLGoscCxoLGspe2E9YSsoZiZqfGcmfmopK3AraztyZXR1cm4oYTw8aHxhPj4+MzItaCkrZn1mdW5jdGlvbiBsKGEsZixnLGosaCxrLGwpe2E9YSsoZl5nXmopK2grbDtyZXR1cm4oYTw8a3xhPj4+MzItaykrZn1mdW5jdGlvbiBuKGEsZixnLGosaCxrLGwpe2E9YSsoZ14oZnx+aikpK2grbDtyZXR1cm4oYTw8a3xhPj4+MzItaykrZn1mb3IodmFyIHI9Q3J5cHRvSlMscT1yLmxpYixGPXEuV29yZEFycmF5LHM9cS5IYXNoZXIscT1yLmFsZ28sYT1bXSx0PTA7NjQ+dDt0KyspYVt0XT00Mjk0OTY3Mjk2KkUuYWJzKEUuc2luKHQrMSkpfDA7cT1xLk1ENT1zLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBGLmluaXQoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OF0pfSxcblx0X2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKG0sZil7Zm9yKHZhciBnPTA7MTY+ZztnKyspe3ZhciBqPWYrZyxwPW1bal07bVtqXT0ocDw8OHxwPj4+MjQpJjE2NzExOTM1fChwPDwyNHxwPj4+OCkmNDI3ODI1NTM2MH12YXIgZz10aGlzLl9oYXNoLndvcmRzLGo9bVtmKzBdLHA9bVtmKzFdLHE9bVtmKzJdLHI9bVtmKzNdLHM9bVtmKzRdLHQ9bVtmKzVdLHU9bVtmKzZdLHY9bVtmKzddLHc9bVtmKzhdLHg9bVtmKzldLHk9bVtmKzEwXSx6PW1bZisxMV0sQT1tW2YrMTJdLEI9bVtmKzEzXSxDPW1bZisxNF0sRD1tW2YrMTVdLGI9Z1swXSxjPWdbMV0sZD1nWzJdLGU9Z1szXSxiPWgoYixjLGQsZSxqLDcsYVswXSksZT1oKGUsYixjLGQscCwxMixhWzFdKSxkPWgoZCxlLGIsYyxxLDE3LGFbMl0pLGM9aChjLGQsZSxiLHIsMjIsYVszXSksYj1oKGIsYyxkLGUscyw3LGFbNF0pLGU9aChlLGIsYyxkLHQsMTIsYVs1XSksZD1oKGQsZSxiLGMsdSwxNyxhWzZdKSxjPWgoYyxkLGUsYix2LDIyLGFbN10pLFxuXHRiPWgoYixjLGQsZSx3LDcsYVs4XSksZT1oKGUsYixjLGQseCwxMixhWzldKSxkPWgoZCxlLGIsYyx5LDE3LGFbMTBdKSxjPWgoYyxkLGUsYix6LDIyLGFbMTFdKSxiPWgoYixjLGQsZSxBLDcsYVsxMl0pLGU9aChlLGIsYyxkLEIsMTIsYVsxM10pLGQ9aChkLGUsYixjLEMsMTcsYVsxNF0pLGM9aChjLGQsZSxiLEQsMjIsYVsxNV0pLGI9ayhiLGMsZCxlLHAsNSxhWzE2XSksZT1rKGUsYixjLGQsdSw5LGFbMTddKSxkPWsoZCxlLGIsYyx6LDE0LGFbMThdKSxjPWsoYyxkLGUsYixqLDIwLGFbMTldKSxiPWsoYixjLGQsZSx0LDUsYVsyMF0pLGU9ayhlLGIsYyxkLHksOSxhWzIxXSksZD1rKGQsZSxiLGMsRCwxNCxhWzIyXSksYz1rKGMsZCxlLGIscywyMCxhWzIzXSksYj1rKGIsYyxkLGUseCw1LGFbMjRdKSxlPWsoZSxiLGMsZCxDLDksYVsyNV0pLGQ9ayhkLGUsYixjLHIsMTQsYVsyNl0pLGM9ayhjLGQsZSxiLHcsMjAsYVsyN10pLGI9ayhiLGMsZCxlLEIsNSxhWzI4XSksZT1rKGUsYixcblx0YyxkLHEsOSxhWzI5XSksZD1rKGQsZSxiLGMsdiwxNCxhWzMwXSksYz1rKGMsZCxlLGIsQSwyMCxhWzMxXSksYj1sKGIsYyxkLGUsdCw0LGFbMzJdKSxlPWwoZSxiLGMsZCx3LDExLGFbMzNdKSxkPWwoZCxlLGIsYyx6LDE2LGFbMzRdKSxjPWwoYyxkLGUsYixDLDIzLGFbMzVdKSxiPWwoYixjLGQsZSxwLDQsYVszNl0pLGU9bChlLGIsYyxkLHMsMTEsYVszN10pLGQ9bChkLGUsYixjLHYsMTYsYVszOF0pLGM9bChjLGQsZSxiLHksMjMsYVszOV0pLGI9bChiLGMsZCxlLEIsNCxhWzQwXSksZT1sKGUsYixjLGQsaiwxMSxhWzQxXSksZD1sKGQsZSxiLGMsciwxNixhWzQyXSksYz1sKGMsZCxlLGIsdSwyMyxhWzQzXSksYj1sKGIsYyxkLGUseCw0LGFbNDRdKSxlPWwoZSxiLGMsZCxBLDExLGFbNDVdKSxkPWwoZCxlLGIsYyxELDE2LGFbNDZdKSxjPWwoYyxkLGUsYixxLDIzLGFbNDddKSxiPW4oYixjLGQsZSxqLDYsYVs0OF0pLGU9bihlLGIsYyxkLHYsMTAsYVs0OV0pLGQ9bihkLGUsYixjLFxuXHRDLDE1LGFbNTBdKSxjPW4oYyxkLGUsYix0LDIxLGFbNTFdKSxiPW4oYixjLGQsZSxBLDYsYVs1Ml0pLGU9bihlLGIsYyxkLHIsMTAsYVs1M10pLGQ9bihkLGUsYixjLHksMTUsYVs1NF0pLGM9bihjLGQsZSxiLHAsMjEsYVs1NV0pLGI9bihiLGMsZCxlLHcsNixhWzU2XSksZT1uKGUsYixjLGQsRCwxMCxhWzU3XSksZD1uKGQsZSxiLGMsdSwxNSxhWzU4XSksYz1uKGMsZCxlLGIsQiwyMSxhWzU5XSksYj1uKGIsYyxkLGUscyw2LGFbNjBdKSxlPW4oZSxiLGMsZCx6LDEwLGFbNjFdKSxkPW4oZCxlLGIsYyxxLDE1LGFbNjJdKSxjPW4oYyxkLGUsYix4LDIxLGFbNjNdKTtnWzBdPWdbMF0rYnwwO2dbMV09Z1sxXStjfDA7Z1syXT1nWzJdK2R8MDtnWzNdPWdbM10rZXwwfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZj1hLndvcmRzLGc9OCp0aGlzLl9uRGF0YUJ5dGVzLGo9OCphLnNpZ0J5dGVzO2Zbaj4+PjVdfD0xMjg8PDI0LWolMzI7dmFyIGg9RS5mbG9vcihnL1xuXHQ0Mjk0OTY3Mjk2KTtmWyhqKzY0Pj4+OTw8NCkrMTVdPShoPDw4fGg+Pj4yNCkmMTY3MTE5MzV8KGg8PDI0fGg+Pj44KSY0Mjc4MjU1MzYwO2ZbKGorNjQ+Pj45PDw0KSsxNF09KGc8PDh8Zz4+PjI0KSYxNjcxMTkzNXwoZzw8MjR8Zz4+PjgpJjQyNzgyNTUzNjA7YS5zaWdCeXRlcz00KihmLmxlbmd0aCsxKTt0aGlzLl9wcm9jZXNzKCk7YT10aGlzLl9oYXNoO2Y9YS53b3Jkcztmb3IoZz0wOzQ+ZztnKyspaj1mW2ddLGZbZ109KGo8PDh8aj4+PjI0KSYxNjcxMTkzNXwoajw8MjR8aj4+PjgpJjQyNzgyNTUzNjA7cmV0dXJuIGF9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9cy5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhfX0pO3IuTUQ1PXMuX2NyZWF0ZUhlbHBlcihxKTtyLkhtYWNNRDU9cy5fY3JlYXRlSG1hY0hlbHBlcihxKX0pKE1hdGgpO1xuXHRcblx0Lypcblx0Q3J5cHRvSlMgdjMuMS4yIHNoYTEtbWluLmpzXG5cdGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuXHQoYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Y29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuXHQqL1xuXHQoZnVuY3Rpb24oKXt2YXIgaz1DcnlwdG9KUyxiPWsubGliLG09Yi5Xb3JkQXJyYXksbD1iLkhhc2hlcixkPVtdLGI9ay5hbGdvLlNIQTE9bC5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgbS5pbml0KFsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzgsMzI4NTM3NzUyMF0pfSxfZG9Qcm9jZXNzQmxvY2s6ZnVuY3Rpb24obixwKXtmb3IodmFyIGE9dGhpcy5faGFzaC53b3JkcyxlPWFbMF0sZj1hWzFdLGg9YVsyXSxqPWFbM10sYj1hWzRdLGM9MDs4MD5jO2MrKyl7aWYoMTY+YylkW2NdPW5bcCtjXXwwO2Vsc2V7dmFyIGc9ZFtjLTNdXmRbYy04XV5kW2MtMTRdXmRbYy0xNl07ZFtjXT1nPDwxfGc+Pj4zMX1nPShlPDw1fGU+Pj4yNykrYitkW2NdO2c9MjA+Yz9nKygoZiZofH5mJmopKzE1MTg1MDAyNDkpOjQwPmM/ZysoKGZeaF5qKSsxODU5Nzc1MzkzKTo2MD5jP2crKChmJmh8ZiZqfGgmaiktMTg5NDAwNzU4OCk6ZysoKGZeaF5cblx0aiktODk5NDk3NTE0KTtiPWo7aj1oO2g9Zjw8MzB8Zj4+PjI7Zj1lO2U9Z31hWzBdPWFbMF0rZXwwO2FbMV09YVsxXStmfDA7YVsyXT1hWzJdK2h8MDthWzNdPWFbM10ranwwO2FbNF09YVs0XStifDB9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGI9dGhpcy5fZGF0YSxkPWIud29yZHMsYT04KnRoaXMuX25EYXRhQnl0ZXMsZT04KmIuc2lnQnl0ZXM7ZFtlPj4+NV18PTEyODw8MjQtZSUzMjtkWyhlKzY0Pj4+OTw8NCkrMTRdPU1hdGguZmxvb3IoYS80Mjk0OTY3Mjk2KTtkWyhlKzY0Pj4+OTw8NCkrMTVdPWE7Yi5zaWdCeXRlcz00KmQubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaH0sY2xvbmU6ZnVuY3Rpb24oKXt2YXIgYj1sLmNsb25lLmNhbGwodGhpcyk7Yi5faGFzaD10aGlzLl9oYXNoLmNsb25lKCk7cmV0dXJuIGJ9fSk7ay5TSEExPWwuX2NyZWF0ZUhlbHBlcihiKTtrLkhtYWNTSEExPWwuX2NyZWF0ZUhtYWNIZWxwZXIoYil9KSgpO1xuXHRcblx0Lypcblx0Q3J5cHRvSlMgdjMuMS4yIHNoYTI1Ni1taW4uanNcblx0Y29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG5cdChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG5cdCovXG5cdChmdW5jdGlvbihrKXtmb3IodmFyIGc9Q3J5cHRvSlMsaD1nLmxpYix2PWguV29yZEFycmF5LGo9aC5IYXNoZXIsaD1nLmFsZ28scz1bXSx0PVtdLHU9ZnVuY3Rpb24ocSl7cmV0dXJuIDQyOTQ5NjcyOTYqKHEtKHF8MCkpfDB9LGw9MixiPTA7NjQ+Yjspe3ZhciBkO2E6e2Q9bDtmb3IodmFyIHc9ay5zcXJ0KGQpLHI9MjtyPD13O3IrKylpZighKGQlcikpe2Q9ITE7YnJlYWsgYX1kPSEwfWQmJig4PmImJihzW2JdPXUoay5wb3cobCwwLjUpKSksdFtiXT11KGsucG93KGwsMS8zKSksYisrKTtsKyt9dmFyIG49W10saD1oLlNIQTI1Nj1qLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyB2LmluaXQocy5zbGljZSgwKSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihxLGgpe2Zvcih2YXIgYT10aGlzLl9oYXNoLndvcmRzLGM9YVswXSxkPWFbMV0sYj1hWzJdLGs9YVszXSxmPWFbNF0sZz1hWzVdLGo9YVs2XSxsPWFbN10sZT0wOzY0PmU7ZSsrKXtpZigxNj5lKW5bZV09XG5cdHFbaCtlXXwwO2Vsc2V7dmFyIG09bltlLTE1XSxwPW5bZS0yXTtuW2VdPSgobTw8MjV8bT4+PjcpXihtPDwxNHxtPj4+MTgpXm0+Pj4zKStuW2UtN10rKChwPDwxNXxwPj4+MTcpXihwPDwxM3xwPj4+MTkpXnA+Pj4xMCkrbltlLTE2XX1tPWwrKChmPDwyNnxmPj4+NileKGY8PDIxfGY+Pj4xMSleKGY8PDd8Zj4+PjI1KSkrKGYmZ15+ZiZqKSt0W2VdK25bZV07cD0oKGM8PDMwfGM+Pj4yKV4oYzw8MTl8Yz4+PjEzKV4oYzw8MTB8Yz4+PjIyKSkrKGMmZF5jJmJeZCZiKTtsPWo7aj1nO2c9ZjtmPWsrbXwwO2s9YjtiPWQ7ZD1jO2M9bStwfDB9YVswXT1hWzBdK2N8MDthWzFdPWFbMV0rZHwwO2FbMl09YVsyXStifDA7YVszXT1hWzNdK2t8MDthWzRdPWFbNF0rZnwwO2FbNV09YVs1XStnfDA7YVs2XT1hWzZdK2p8MDthWzddPWFbN10rbHwwfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBkPXRoaXMuX2RhdGEsYj1kLndvcmRzLGE9OCp0aGlzLl9uRGF0YUJ5dGVzLGM9OCpkLnNpZ0J5dGVzO1xuXHRiW2M+Pj41XXw9MTI4PDwyNC1jJTMyO2JbKGMrNjQ+Pj45PDw0KSsxNF09ay5mbG9vcihhLzQyOTQ5NjcyOTYpO2JbKGMrNjQ+Pj45PDw0KSsxNV09YTtkLnNpZ0J5dGVzPTQqYi5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBiPWouY2xvbmUuY2FsbCh0aGlzKTtiLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gYn19KTtnLlNIQTI1Nj1qLl9jcmVhdGVIZWxwZXIoaCk7Zy5IbWFjU0hBMjU2PWouX2NyZWF0ZUhtYWNIZWxwZXIoaCl9KShNYXRoKTtcblx0XG5cdC8qXG5cdENyeXB0b0pTIHYzLjEuMiBzaGEyMjQtbWluLmpzXG5cdGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuXHQoYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Y29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuXHQqL1xuXHQoZnVuY3Rpb24oKXt2YXIgYj1DcnlwdG9KUyxkPWIubGliLldvcmRBcnJheSxhPWIuYWxnbyxjPWEuU0hBMjU2LGE9YS5TSEEyMjQ9Yy5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgZC5pbml0KFszMjM4MzcxMDMyLDkxNDE1MDY2Myw4MTI3MDI5OTksNDE0NDkxMjY5Nyw0MjkwNzc1ODU3LDE3NTA2MDMwMjUsMTY5NDA3NjgzOSwzMjA0MDc1NDI4XSl9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9Yy5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpO2Euc2lnQnl0ZXMtPTQ7cmV0dXJuIGF9fSk7Yi5TSEEyMjQ9Yy5fY3JlYXRlSGVscGVyKGEpO2IuSG1hY1NIQTIyND1jLl9jcmVhdGVIbWFjSGVscGVyKGEpfSkoKTtcblx0XG5cdC8qXG5cdENyeXB0b0pTIHYzLjEuMiBzaGE1MTItbWluLmpzXG5cdGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuXHQoYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Y29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuXHQqL1xuXHQoZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7cmV0dXJuIGQuY3JlYXRlLmFwcGx5KGQsYXJndW1lbnRzKX1mb3IodmFyIG49Q3J5cHRvSlMscj1uLmxpYi5IYXNoZXIsZT1uLng2NCxkPWUuV29yZCxUPWUuV29yZEFycmF5LGU9bi5hbGdvLGVhPVthKDExMTYzNTI0MDgsMzYwOTc2NzQ1OCksYSgxODk5NDQ3NDQxLDYwMjg5MTcyNSksYSgzMDQ5MzIzNDcxLDM5NjQ0ODQzOTkpLGEoMzkyMTAwOTU3MywyMTczMjk1NTQ4KSxhKDk2MTk4NzE2Myw0MDgxNjI4NDcyKSxhKDE1MDg5NzA5OTMsMzA1MzgzNDI2NSksYSgyNDUzNjM1NzQ4LDI5Mzc2NzE1NzkpLGEoMjg3MDc2MzIyMSwzNjY0NjA5NTYwKSxhKDM2MjQzODEwODAsMjczNDg4MzM5NCksYSgzMTA1OTg0MDEsMTE2NDk5NjU0MiksYSg2MDcyMjUyNzgsMTMyMzYxMDc2NCksYSgxNDI2ODgxOTg3LDM1OTAzMDQ5OTQpLGEoMTkyNTA3ODM4OCw0MDY4MTgyMzgzKSxhKDIxNjIwNzgyMDYsOTkxMzM2MTEzKSxhKDI2MTQ4ODgxMDMsNjMzODAzMzE3KSxcblx0YSgzMjQ4MjIyNTgwLDM0Nzk3NzQ4NjgpLGEoMzgzNTM5MDQwMSwyNjY2NjEzNDU4KSxhKDQwMjIyMjQ3NzQsOTQ0NzExMTM5KSxhKDI2NDM0NzA3OCwyMzQxMjYyNzczKSxhKDYwNDgwNzYyOCwyMDA3ODAwOTMzKSxhKDc3MDI1NTk4MywxNDk1OTkwOTAxKSxhKDEyNDkxNTAxMjIsMTg1NjQzMTIzNSksYSgxNTU1MDgxNjkyLDMxNzUyMTgxMzIpLGEoMTk5NjA2NDk4NiwyMTk4OTUwODM3KSxhKDI1NTQyMjA4ODIsMzk5OTcxOTMzOSksYSgyODIxODM0MzQ5LDc2Njc4NDAxNiksYSgyOTUyOTk2ODA4LDI1NjY1OTQ4NzkpLGEoMzIxMDMxMzY3MSwzMjAzMzM3OTU2KSxhKDMzMzY1NzE4OTEsMTAzNDQ1NzAyNiksYSgzNTg0NTI4NzExLDI0NjY5NDg5MDEpLGEoMTEzOTI2OTkzLDM3NTgzMjYzODMpLGEoMzM4MjQxODk1LDE2ODcxNzkzNiksYSg2NjYzMDcyMDUsMTE4ODE3OTk2NCksYSg3NzM1Mjk5MTIsMTU0NjA0NTczNCksYSgxMjk0NzU3MzcyLDE1MjI4MDU0ODUpLGEoMTM5NjE4MjI5MSxcblx0MjY0MzgzMzgyMyksYSgxNjk1MTgzNzAwLDIzNDM1MjczOTApLGEoMTk4NjY2MTA1MSwxMDE0NDc3NDgwKSxhKDIxNzcwMjYzNTAsMTIwNjc1OTE0MiksYSgyNDU2OTU2MDM3LDM0NDA3NzYyNyksYSgyNzMwNDg1OTIxLDEyOTA4NjM0NjApLGEoMjgyMDMwMjQxMSwzMTU4NDU0MjczKSxhKDMyNTk3MzA4MDAsMzUwNTk1MjY1NyksYSgzMzQ1NzY0NzcxLDEwNjIxNzAwOCksYSgzNTE2MDY1ODE3LDM2MDYwMDgzNDQpLGEoMzYwMDM1MjgwNCwxNDMyNzI1Nzc2KSxhKDQwOTQ1NzE5MDksMTQ2NzAzMTU5NCksYSgyNzU0MjMzNDQsODUxMTY5NzIwKSxhKDQzMDIyNzczNCwzMTAwODIzNzUyKSxhKDUwNjk0ODYxNiwxMzYzMjU4MTk1KSxhKDY1OTA2MDU1NiwzNzUwNjg1NTkzKSxhKDg4Mzk5Nzg3NywzNzg1MDUwMjgwKSxhKDk1ODEzOTU3MSwzMzE4MzA3NDI3KSxhKDEzMjI4MjIyMTgsMzgxMjcyMzQwMyksYSgxNTM3MDAyMDYzLDIwMDMwMzQ5OTUpLGEoMTc0Nzg3Mzc3OSwzNjAyMDM2ODk5KSxcblx0YSgxOTU1NTYyMjIyLDE1NzU5OTAwMTIpLGEoMjAyNDEwNDgxNSwxMTI1NTkyOTI4KSxhKDIyMjc3MzA0NTIsMjcxNjkwNDMwNiksYSgyMzYxODUyNDI0LDQ0Mjc3NjA0NCksYSgyNDI4NDM2NDc0LDU5MzY5ODM0NCksYSgyNzU2NzM0MTg3LDM3MzMxMTAyNDkpLGEoMzIwNDAzMTQ3OSwyOTk5MzUxNTczKSxhKDMzMjkzMjUyOTgsMzgxNTkyMDQyNyksYSgzMzkxNTY5NjE0LDM5MjgzODM5MDApLGEoMzUxNTI2NzI3MSw1NjYyODA3MTEpLGEoMzk0MDE4NzYwNiwzNDU0MDY5NTM0KSxhKDQxMTg2MzAyNzEsNDAwMDIzOTk5MiksYSgxMTY0MTg0NzQsMTkxNDEzODU1NCksYSgxNzQyOTI0MjEsMjczMTA1NTI3MCksYSgyODkzODAzNTYsMzIwMzk5MzAwNiksYSg0NjAzOTMyNjksMzIwNjIwMzE1KSxhKDY4NTQ3MTczMyw1ODc0OTY4MzYpLGEoODUyMTQyOTcxLDEwODY3OTI4NTEpLGEoMTAxNzAzNjI5OCwzNjU1NDMxMDApLGEoMTEyNjAwMDU4MCwyNjE4Mjk3Njc2KSxhKDEyODgwMzM0NzAsXG5cdDM0MDk4NTUxNTgpLGEoMTUwMTUwNTk0OCw0MjM0NTA5ODY2KSxhKDE2MDcxNjc5MTUsOTg3MTY3NDY4KSxhKDE4MTY0MDIzMTYsMTI0NjE4OTU5MSldLHY9W10sdz0wOzgwPnc7dysrKXZbd109YSgpO2U9ZS5TSEE1MTI9ci5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgVC5pbml0KFtuZXcgZC5pbml0KDE3NzkwMzM3MDMsNDA4OTIzNTcyMCksbmV3IGQuaW5pdCgzMTQ0MTM0Mjc3LDIyMjc4NzM1OTUpLG5ldyBkLmluaXQoMTAxMzkwNDI0Miw0MjcxMTc1NzIzKSxuZXcgZC5pbml0KDI3NzM0ODA3NjIsMTU5NTc1MDEyOSksbmV3IGQuaW5pdCgxMzU5ODkzMTE5LDI5MTc1NjUxMzcpLG5ldyBkLmluaXQoMjYwMDgyMjkyNCw3MjU1MTExOTkpLG5ldyBkLmluaXQoNTI4NzM0NjM1LDQyMTUzODk1NDcpLG5ldyBkLmluaXQoMTU0MTQ1OTIyNSwzMjcwMzMyMDkpXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGQpe2Zvcih2YXIgZj10aGlzLl9oYXNoLndvcmRzLFxuXHRGPWZbMF0sZT1mWzFdLG49ZlsyXSxyPWZbM10sRz1mWzRdLEg9Zls1XSxJPWZbNl0sZj1mWzddLHc9Ri5oaWdoLEo9Ri5sb3csWD1lLmhpZ2gsSz1lLmxvdyxZPW4uaGlnaCxMPW4ubG93LFo9ci5oaWdoLE09ci5sb3csJD1HLmhpZ2gsTj1HLmxvdyxhYT1ILmhpZ2gsTz1ILmxvdyxiYT1JLmhpZ2gsUD1JLmxvdyxjYT1mLmhpZ2gsUT1mLmxvdyxrPXcsZz1KLHo9WCx4PUssQT1ZLHk9TCxVPVosQj1NLGw9JCxoPU4sUj1hYSxDPU8sUz1iYSxEPVAsVj1jYSxFPVEsbT0wOzgwPm07bSsrKXt2YXIgcz12W21dO2lmKDE2Pm0pdmFyIGo9cy5oaWdoPWFbZCsyKm1dfDAsYj1zLmxvdz1hW2QrMiptKzFdfDA7ZWxzZXt2YXIgaj12W20tMTVdLGI9ai5oaWdoLHA9ai5sb3csaj0oYj4+PjF8cDw8MzEpXihiPj4+OHxwPDwyNCleYj4+PjcscD0ocD4+PjF8Yjw8MzEpXihwPj4+OHxiPDwyNCleKHA+Pj43fGI8PDI1KSx1PXZbbS0yXSxiPXUuaGlnaCxjPXUubG93LHU9KGI+Pj4xOXxjPDwxMyleKGI8PFxuXHQzfGM+Pj4yOSleYj4+PjYsYz0oYz4+PjE5fGI8PDEzKV4oYzw8M3xiPj4+MjkpXihjPj4+NnxiPDwyNiksYj12W20tN10sVz1iLmhpZ2gsdD12W20tMTZdLHE9dC5oaWdoLHQ9dC5sb3csYj1wK2IubG93LGo9aitXKyhiPj4+MDxwPj4+MD8xOjApLGI9YitjLGo9ait1KyhiPj4+MDxjPj4+MD8xOjApLGI9Yit0LGo9aitxKyhiPj4+MDx0Pj4+MD8xOjApO3MuaGlnaD1qO3MubG93PWJ9dmFyIFc9bCZSXn5sJlMsdD1oJkNefmgmRCxzPWsmel5rJkFeeiZBLFQ9ZyZ4XmcmeV54JnkscD0oaz4+PjI4fGc8PDQpXihrPDwzMHxnPj4+MileKGs8PDI1fGc+Pj43KSx1PShnPj4+Mjh8azw8NCleKGc8PDMwfGs+Pj4yKV4oZzw8MjV8az4+PjcpLGM9ZWFbbV0sZmE9Yy5oaWdoLGRhPWMubG93LGM9RSsoKGg+Pj4xNHxsPDwxOCleKGg+Pj4xOHxsPDwxNCleKGg8PDIzfGw+Pj45KSkscT1WKygobD4+PjE0fGg8PDE4KV4obD4+PjE4fGg8PDE0KV4obDw8MjN8aD4+PjkpKSsoYz4+PjA8RT4+PjA/MTpcblx0MCksYz1jK3QscT1xK1crKGM+Pj4wPHQ+Pj4wPzE6MCksYz1jK2RhLHE9cStmYSsoYz4+PjA8ZGE+Pj4wPzE6MCksYz1jK2IscT1xK2orKGM+Pj4wPGI+Pj4wPzE6MCksYj11K1Qscz1wK3MrKGI+Pj4wPHU+Pj4wPzE6MCksVj1TLEU9RCxTPVIsRD1DLFI9bCxDPWgsaD1CK2N8MCxsPVUrcSsoaD4+PjA8Qj4+PjA/MTowKXwwLFU9QSxCPXksQT16LHk9eCx6PWsseD1nLGc9YytifDAsaz1xK3MrKGc+Pj4wPGM+Pj4wPzE6MCl8MH1KPUYubG93PUorZztGLmhpZ2g9dytrKyhKPj4+MDxnPj4+MD8xOjApO0s9ZS5sb3c9Syt4O2UuaGlnaD1YK3orKEs+Pj4wPHg+Pj4wPzE6MCk7TD1uLmxvdz1MK3k7bi5oaWdoPVkrQSsoTD4+PjA8eT4+PjA/MTowKTtNPXIubG93PU0rQjtyLmhpZ2g9WitVKyhNPj4+MDxCPj4+MD8xOjApO049Ry5sb3c9TitoO0cuaGlnaD0kK2wrKE4+Pj4wPGg+Pj4wPzE6MCk7Tz1ILmxvdz1PK0M7SC5oaWdoPWFhK1IrKE8+Pj4wPEM+Pj4wPzE6MCk7UD1JLmxvdz1QK0Q7XG5cdEkuaGlnaD1iYStTKyhQPj4+MDxEPj4+MD8xOjApO1E9Zi5sb3c9UStFO2YuaGlnaD1jYStWKyhRPj4+MDxFPj4+MD8xOjApfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZD1hLndvcmRzLGY9OCp0aGlzLl9uRGF0YUJ5dGVzLGU9OCphLnNpZ0J5dGVzO2RbZT4+PjVdfD0xMjg8PDI0LWUlMzI7ZFsoZSsxMjg+Pj4xMDw8NSkrMzBdPU1hdGguZmxvb3IoZi80Mjk0OTY3Mjk2KTtkWyhlKzEyOD4+PjEwPDw1KSszMV09ZjthLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNoLnRvWDMyKCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9ci5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhfSxibG9ja1NpemU6MzJ9KTtuLlNIQTUxMj1yLl9jcmVhdGVIZWxwZXIoZSk7bi5IbWFjU0hBNTEyPXIuX2NyZWF0ZUhtYWNIZWxwZXIoZSl9KSgpO1xuXHRcblx0Lypcblx0Q3J5cHRvSlMgdjMuMS4yIHNoYTM4NC1taW4uanNcblx0Y29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG5cdChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG5cdCovXG5cdChmdW5jdGlvbigpe3ZhciBjPUNyeXB0b0pTLGE9Yy54NjQsYj1hLldvcmQsZT1hLldvcmRBcnJheSxhPWMuYWxnbyxkPWEuU0hBNTEyLGE9YS5TSEEzODQ9ZC5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgZS5pbml0KFtuZXcgYi5pbml0KDM0MTgwNzAzNjUsMzIzODM3MTAzMiksbmV3IGIuaW5pdCgxNjU0MjcwMjUwLDkxNDE1MDY2MyksbmV3IGIuaW5pdCgyNDM4NTI5MzcwLDgxMjcwMjk5OSksbmV3IGIuaW5pdCgzNTU0NjIzNjAsNDE0NDkxMjY5NyksbmV3IGIuaW5pdCgxNzMxNDA1NDE1LDQyOTA3NzU4NTcpLG5ldyBiLmluaXQoMjM5NDE4MDIzMSwxNzUwNjAzMDI1KSxuZXcgYi5pbml0KDM2NzUwMDg1MjUsMTY5NDA3NjgzOSksbmV3IGIuaW5pdCgxMjAzMDYyODEzLDMyMDQwNzU0MjgpXSl9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9ZC5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpO2Euc2lnQnl0ZXMtPTE2O3JldHVybiBhfX0pO2MuU0hBMzg0PVxuXHRkLl9jcmVhdGVIZWxwZXIoYSk7Yy5IbWFjU0hBMzg0PWQuX2NyZWF0ZUhtYWNIZWxwZXIoYSl9KSgpO1xuXHRcblx0Lypcblx0Q3J5cHRvSlMgdjMuMS4yIHJpcGVtZDE2MC1taW4uanNcblx0Y29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG5cdChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG5cdCovXG5cdC8qXG5cdFxuXHQoYykgMjAxMiBieSBDZWRyaWMgTWVzbmlsLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHRcblx0UmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXHRcblx0ICAgIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXHQgICAgLSBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cdFxuXHRUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cdCovXG5cdChmdW5jdGlvbigpe3ZhciBxPUNyeXB0b0pTLGQ9cS5saWIsbj1kLldvcmRBcnJheSxwPWQuSGFzaGVyLGQ9cS5hbGdvLHg9bi5jcmVhdGUoWzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsNyw0LDEzLDEsMTAsNiwxNSwzLDEyLDAsOSw1LDIsMTQsMTEsOCwzLDEwLDE0LDQsOSwxNSw4LDEsMiw3LDAsNiwxMywxMSw1LDEyLDEsOSwxMSwxMCwwLDgsMTIsNCwxMywzLDcsMTUsMTQsNSw2LDIsNCwwLDUsOSw3LDEyLDIsMTAsMTQsMSwzLDgsMTEsNiwxNSwxM10pLHk9bi5jcmVhdGUoWzUsMTQsNywwLDksMiwxMSw0LDEzLDYsMTUsOCwxLDEwLDMsMTIsNiwxMSwzLDcsMCwxMyw1LDEwLDE0LDE1LDgsMTIsNCw5LDEsMiwxNSw1LDEsMyw3LDE0LDYsOSwxMSw4LDEyLDIsMTAsMCw0LDEzLDgsNiw0LDEsMywxMSwxNSwwLDUsMTIsMiwxMyw5LDcsMTAsMTQsMTIsMTUsMTAsNCwxLDUsOCw3LDYsMiwxMywxNCwwLDMsOSwxMV0pLHo9bi5jcmVhdGUoWzExLDE0LDE1LDEyLFxuXHQ1LDgsNyw5LDExLDEzLDE0LDE1LDYsNyw5LDgsNyw2LDgsMTMsMTEsOSw3LDE1LDcsMTIsMTUsOSwxMSw3LDEzLDEyLDExLDEzLDYsNywxNCw5LDEzLDE1LDE0LDgsMTMsNiw1LDEyLDcsNSwxMSwxMiwxNCwxNSwxNCwxNSw5LDgsOSwxNCw1LDYsOCw2LDUsMTIsOSwxNSw1LDExLDYsOCwxMywxMiw1LDEyLDEzLDE0LDExLDgsNSw2XSksQT1uLmNyZWF0ZShbOCw5LDksMTEsMTMsMTUsMTUsNSw3LDcsOCwxMSwxNCwxNCwxMiw2LDksMTMsMTUsNywxMiw4LDksMTEsNyw3LDEyLDcsNiwxNSwxMywxMSw5LDcsMTUsMTEsOCw2LDYsMTQsMTIsMTMsNSwxNCwxMywxMyw3LDUsMTUsNSw4LDExLDE0LDE0LDYsMTQsNiw5LDEyLDksMTIsNSwxNSw4LDgsNSwxMiw5LDEyLDUsMTQsNiw4LDEzLDYsNSwxNSwxMywxMSwxMV0pLEI9bi5jcmVhdGUoWzAsMTUxODUwMDI0OSwxODU5Nzc1MzkzLDI0MDA5NTk3MDgsMjg0MDg1MzgzOF0pLEM9bi5jcmVhdGUoWzEzNTI4Mjk5MjYsMTU0ODYwMzY4NCwxODM2MDcyNjkxLFxuXHQyMDUzOTk0MjE3LDBdKSxkPWQuUklQRU1EMTYwPXAuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bi5jcmVhdGUoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihlLHYpe2Zvcih2YXIgYj0wOzE2PmI7YisrKXt2YXIgYz12K2IsZj1lW2NdO2VbY109KGY8PDh8Zj4+PjI0KSYxNjcxMTkzNXwoZjw8MjR8Zj4+PjgpJjQyNzgyNTUzNjB9dmFyIGM9dGhpcy5faGFzaC53b3JkcyxmPUIud29yZHMsZD1DLndvcmRzLG49eC53b3JkcyxxPXkud29yZHMscD16LndvcmRzLHc9QS53b3Jkcyx0LGcsaCxqLHIsdSxrLGwsbSxzO3U9dD1jWzBdO2s9Zz1jWzFdO2w9aD1jWzJdO209aj1jWzNdO3M9cj1jWzRdO2Zvcih2YXIgYSxiPTA7ODA+YjtiKz0xKWE9dCtlW3YrbltiXV18MCxhPTE2PmI/YSsoKGdeaF5qKStmWzBdKTozMj5iP2ErKChnJmh8fmcmaikrZlsxXSk6NDg+Yj9cblx0YSsoKChnfH5oKV5qKStmWzJdKTo2ND5iP2ErKChnJmp8aCZ+aikrZlszXSk6YSsoKGdeKGh8fmopKStmWzRdKSxhfD0wLGE9YTw8cFtiXXxhPj4+MzItcFtiXSxhPWErcnwwLHQ9cixyPWosaj1oPDwxMHxoPj4+MjIsaD1nLGc9YSxhPXUrZVt2K3FbYl1dfDAsYT0xNj5iP2ErKChrXihsfH5tKSkrZFswXSk6MzI+Yj9hKygoayZtfGwmfm0pK2RbMV0pOjQ4PmI/YSsoKChrfH5sKV5tKStkWzJdKTo2ND5iP2ErKChrJmx8fmsmbSkrZFszXSk6YSsoKGtebF5tKStkWzRdKSxhfD0wLGE9YTw8d1tiXXxhPj4+MzItd1tiXSxhPWErc3wwLHU9cyxzPW0sbT1sPDwxMHxsPj4+MjIsbD1rLGs9YTthPWNbMV0raCttfDA7Y1sxXT1jWzJdK2orc3wwO2NbMl09Y1szXStyK3V8MDtjWzNdPWNbNF0rdCtrfDA7Y1s0XT1jWzBdK2crbHwwO2NbMF09YX0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9kYXRhLGQ9ZS53b3JkcyxiPTgqdGhpcy5fbkRhdGFCeXRlcyxjPTgqZS5zaWdCeXRlcztcblx0ZFtjPj4+NV18PTEyODw8MjQtYyUzMjtkWyhjKzY0Pj4+OTw8NCkrMTRdPShiPDw4fGI+Pj4yNCkmMTY3MTE5MzV8KGI8PDI0fGI+Pj44KSY0Mjc4MjU1MzYwO2Uuc2lnQnl0ZXM9NCooZC5sZW5ndGgrMSk7dGhpcy5fcHJvY2VzcygpO2U9dGhpcy5faGFzaDtkPWUud29yZHM7Zm9yKGI9MDs1PmI7YisrKWM9ZFtiXSxkW2JdPShjPDw4fGM+Pj4yNCkmMTY3MTE5MzV8KGM8PDI0fGM+Pj44KSY0Mjc4MjU1MzYwO3JldHVybiBlfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBkPXAuY2xvbmUuY2FsbCh0aGlzKTtkLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gZH19KTtxLlJJUEVNRDE2MD1wLl9jcmVhdGVIZWxwZXIoZCk7cS5IbWFjUklQRU1EMTYwPXAuX2NyZWF0ZUhtYWNIZWxwZXIoZCl9KShNYXRoKTtcblx0XG5cdC8qXG5cdENyeXB0b0pTIHYzLjEuMiBobWFjLW1pbi5qc1xuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcblx0KGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2Vcblx0Ki9cblx0KGZ1bmN0aW9uKCl7dmFyIGM9Q3J5cHRvSlMsaz1jLmVuYy5VdGY4O2MuYWxnby5ITUFDPWMubGliLkJhc2UuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYil7YT10aGlzLl9oYXNoZXI9bmV3IGEuaW5pdDtcInN0cmluZ1wiPT10eXBlb2YgYiYmKGI9ay5wYXJzZShiKSk7dmFyIGM9YS5ibG9ja1NpemUsZT00KmM7Yi5zaWdCeXRlcz5lJiYoYj1hLmZpbmFsaXplKGIpKTtiLmNsYW1wKCk7Zm9yKHZhciBmPXRoaXMuX29LZXk9Yi5jbG9uZSgpLGc9dGhpcy5faUtleT1iLmNsb25lKCksaD1mLndvcmRzLGo9Zy53b3JkcyxkPTA7ZDxjO2QrKyloW2RdXj0xNTQ5NTU2ODI4LGpbZF1ePTkwOTUyMjQ4NjtmLnNpZ0J5dGVzPWcuc2lnQnl0ZXM9ZTt0aGlzLnJlc2V0KCl9LHJlc2V0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faGFzaGVyO2EucmVzZXQoKTthLnVwZGF0ZSh0aGlzLl9pS2V5KX0sdXBkYXRlOmZ1bmN0aW9uKGEpe3RoaXMuX2hhc2hlci51cGRhdGUoYSk7cmV0dXJuIHRoaXN9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe3ZhciBiPVxuXHR0aGlzLl9oYXNoZXI7YT1iLmZpbmFsaXplKGEpO2IucmVzZXQoKTtyZXR1cm4gYi5maW5hbGl6ZSh0aGlzLl9vS2V5LmNsb25lKCkuY29uY2F0KGEpKX19KX0pKCk7XG5cdFxuXHQvKlxuXHRDcnlwdG9KUyB2My4xLjIgcGJrZGYyLW1pbi5qc1xuXHRjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcblx0KGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2Vcblx0Ki9cblx0KGZ1bmN0aW9uKCl7dmFyIGI9Q3J5cHRvSlMsYT1iLmxpYixkPWEuQmFzZSxtPWEuV29yZEFycmF5LGE9Yi5hbGdvLHE9YS5ITUFDLGw9YS5QQktERjI9ZC5leHRlbmQoe2NmZzpkLmV4dGVuZCh7a2V5U2l6ZTo0LGhhc2hlcjphLlNIQTEsaXRlcmF0aW9uczoxfSksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSl9LGNvbXB1dGU6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcy5jZmcsZj1xLmNyZWF0ZShjLmhhc2hlcixhKSxnPW0uY3JlYXRlKCksZD1tLmNyZWF0ZShbMV0pLGw9Zy53b3JkcyxyPWQud29yZHMsbj1jLmtleVNpemUsYz1jLml0ZXJhdGlvbnM7bC5sZW5ndGg8bjspe3ZhciBoPWYudXBkYXRlKGIpLmZpbmFsaXplKGQpO2YucmVzZXQoKTtmb3IodmFyIGo9aC53b3JkcyxzPWoubGVuZ3RoLGs9aCxwPTE7cDxjO3ArKyl7az1mLmZpbmFsaXplKGspO2YucmVzZXQoKTtmb3IodmFyIHQ9ay53b3JkcyxlPTA7ZTxzO2UrKylqW2VdXj10W2VdfWcuY29uY2F0KGgpO1xuXHRyWzBdKyt9Zy5zaWdCeXRlcz00Km47cmV0dXJuIGd9fSk7Yi5QQktERjI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBsLmNyZWF0ZShjKS5jb21wdXRlKGEsYil9fSkoKTtcblx0XG5cdC8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xuXHQgKi9cblx0dmFyIGI2NG1hcD1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjt2YXIgYjY0cGFkPVwiPVwiO2Z1bmN0aW9uIGhleDJiNjQoZCl7dmFyIGI7dmFyIGU7dmFyIGE9XCJcIjtmb3IoYj0wO2IrMzw9ZC5sZW5ndGg7Yis9Myl7ZT1wYXJzZUludChkLnN1YnN0cmluZyhiLGIrMyksMTYpO2ErPWI2NG1hcC5jaGFyQXQoZT4+NikrYjY0bWFwLmNoYXJBdChlJjYzKX1pZihiKzE9PWQubGVuZ3RoKXtlPXBhcnNlSW50KGQuc3Vic3RyaW5nKGIsYisxKSwxNik7YSs9YjY0bWFwLmNoYXJBdChlPDwyKX1lbHNle2lmKGIrMj09ZC5sZW5ndGgpe2U9cGFyc2VJbnQoZC5zdWJzdHJpbmcoYixiKzIpLDE2KTthKz1iNjRtYXAuY2hhckF0KGU+PjIpK2I2NG1hcC5jaGFyQXQoKGUmMyk8PDQpfX1pZihiNjRwYWQpe3doaWxlKChhLmxlbmd0aCYzKT4wKXthKz1iNjRwYWR9fXJldHVybiBhfWZ1bmN0aW9uIGI2NHRvaGV4KGYpe3ZhciBkPVwiXCI7dmFyIGU7dmFyIGI9MDt2YXIgYzt2YXIgYTtmb3IoZT0wO2U8Zi5sZW5ndGg7KytlKXtpZihmLmNoYXJBdChlKT09YjY0cGFkKXticmVha31hPWI2NG1hcC5pbmRleE9mKGYuY2hhckF0KGUpKTtpZihhPDApe2NvbnRpbnVlfWlmKGI9PTApe2QrPWludDJjaGFyKGE+PjIpO2M9YSYzO2I9MX1lbHNle2lmKGI9PTEpe2QrPWludDJjaGFyKChjPDwyKXwoYT4+NCkpO2M9YSYxNTtiPTJ9ZWxzZXtpZihiPT0yKXtkKz1pbnQyY2hhcihjKTtkKz1pbnQyY2hhcihhPj4yKTtjPWEmMztiPTN9ZWxzZXtkKz1pbnQyY2hhcigoYzw8Mil8KGE+PjQpKTtkKz1pbnQyY2hhcihhJjE1KTtiPTB9fX19aWYoYj09MSl7ZCs9aW50MmNoYXIoYzw8Mil9cmV0dXJuIGR9ZnVuY3Rpb24gYjY0dG9CQShlKXt2YXIgZD1iNjR0b2hleChlKTt2YXIgYzt2YXIgYj1uZXcgQXJyYXkoKTtmb3IoYz0wOzIqYzxkLmxlbmd0aDsrK2Mpe2JbY109cGFyc2VJbnQoZC5zdWJzdHJpbmcoMipjLDIqYysyKSwxNil9cmV0dXJuIGJ9O1xuXHQvKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cblx0ICovXG5cdHZhciBkYml0czt2YXIgY2FuYXJ5PTI0NDgzNzgxNDA5NDU5MDt2YXIgal9sbT0oKGNhbmFyeSYxNjc3NzIxNSk9PTE1NzE1MDcwKTtmdW5jdGlvbiBCaWdJbnRlZ2VyKGUsZCxmKXtpZihlIT1udWxsKXtpZihcIm51bWJlclwiPT10eXBlb2YgZSl7dGhpcy5mcm9tTnVtYmVyKGUsZCxmKX1lbHNle2lmKGQ9PW51bGwmJlwic3RyaW5nXCIhPXR5cGVvZiBlKXt0aGlzLmZyb21TdHJpbmcoZSwyNTYpfWVsc2V7dGhpcy5mcm9tU3RyaW5nKGUsZCl9fX19ZnVuY3Rpb24gbmJpKCl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKG51bGwpfWZ1bmN0aW9uIGFtMShmLGEsYixlLGgsZyl7d2hpbGUoLS1nPj0wKXt2YXIgZD1hKnRoaXNbZisrXStiW2VdK2g7aD1NYXRoLmZsb29yKGQvNjcxMDg4NjQpO2JbZSsrXT1kJjY3MTA4ODYzfXJldHVybiBofWZ1bmN0aW9uIGFtMihmLHEscixlLG8sYSl7dmFyIGs9cSYzMjc2NyxwPXE+PjE1O3doaWxlKC0tYT49MCl7dmFyIGQ9dGhpc1tmXSYzMjc2Nzt2YXIgZz10aGlzW2YrK10+PjE1O3ZhciBiPXAqZCtnKms7ZD1rKmQrKChiJjMyNzY3KTw8MTUpK3JbZV0rKG8mMTA3Mzc0MTgyMyk7bz0oZD4+PjMwKSsoYj4+PjE1KStwKmcrKG8+Pj4zMCk7cltlKytdPWQmMTA3Mzc0MTgyM31yZXR1cm4gb31mdW5jdGlvbiBhbTMoZixxLHIsZSxvLGEpe3ZhciBrPXEmMTYzODMscD1xPj4xNDt3aGlsZSgtLWE+PTApe3ZhciBkPXRoaXNbZl0mMTYzODM7dmFyIGc9dGhpc1tmKytdPj4xNDt2YXIgYj1wKmQrZyprO2Q9aypkKygoYiYxNjM4Myk8PDE0KStyW2VdK287bz0oZD4+MjgpKyhiPj4xNCkrcCpnO3JbZSsrXT1kJjI2ODQzNTQ1NX1yZXR1cm4gb31pZihqX2xtJiYobmF2aWdhdG9yLmFwcE5hbWU9PVwiTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyXCIpKXtCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbT1hbTI7ZGJpdHM9MzB9ZWxzZXtpZihqX2xtJiYobmF2aWdhdG9yLmFwcE5hbWUhPVwiTmV0c2NhcGVcIikpe0JpZ0ludGVnZXIucHJvdG90eXBlLmFtPWFtMTtkYml0cz0yNn1lbHNle0JpZ0ludGVnZXIucHJvdG90eXBlLmFtPWFtMztkYml0cz0yOH19QmlnSW50ZWdlci5wcm90b3R5cGUuREI9ZGJpdHM7QmlnSW50ZWdlci5wcm90b3R5cGUuRE09KCgxPDxkYml0cyktMSk7QmlnSW50ZWdlci5wcm90b3R5cGUuRFY9KDE8PGRiaXRzKTt2YXIgQklfRlA9NTI7QmlnSW50ZWdlci5wcm90b3R5cGUuRlY9TWF0aC5wb3coMixCSV9GUCk7QmlnSW50ZWdlci5wcm90b3R5cGUuRjE9QklfRlAtZGJpdHM7QmlnSW50ZWdlci5wcm90b3R5cGUuRjI9MipkYml0cy1CSV9GUDt2YXIgQklfUk09XCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIjt2YXIgQklfUkM9bmV3IEFycmF5KCk7dmFyIHJyLHZ2O3JyPVwiMFwiLmNoYXJDb2RlQXQoMCk7Zm9yKHZ2PTA7dnY8PTk7Kyt2dil7QklfUkNbcnIrK109dnZ9cnI9XCJhXCIuY2hhckNvZGVBdCgwKTtmb3IodnY9MTA7dnY8MzY7Kyt2dil7QklfUkNbcnIrK109dnZ9cnI9XCJBXCIuY2hhckNvZGVBdCgwKTtmb3IodnY9MTA7dnY8MzY7Kyt2dil7QklfUkNbcnIrK109dnZ9ZnVuY3Rpb24gaW50MmNoYXIoYSl7cmV0dXJuIEJJX1JNLmNoYXJBdChhKX1mdW5jdGlvbiBpbnRBdChiLGEpe3ZhciBkPUJJX1JDW2IuY2hhckNvZGVBdChhKV07cmV0dXJuKGQ9PW51bGwpPy0xOmR9ZnVuY3Rpb24gYm5wQ29weVRvKGIpe2Zvcih2YXIgYT10aGlzLnQtMTthPj0wOy0tYSl7YlthXT10aGlzW2FdfWIudD10aGlzLnQ7Yi5zPXRoaXMuc31mdW5jdGlvbiBibnBGcm9tSW50KGEpe3RoaXMudD0xO3RoaXMucz0oYTwwKT8tMTowO2lmKGE+MCl7dGhpc1swXT1hfWVsc2V7aWYoYTwtMSl7dGhpc1swXT1hK3RoaXMuRFZ9ZWxzZXt0aGlzLnQ9MH19fWZ1bmN0aW9uIG5idihhKXt2YXIgYj1uYmkoKTtiLmZyb21JbnQoYSk7cmV0dXJuIGJ9ZnVuY3Rpb24gYm5wRnJvbVN0cmluZyhoLGMpe3ZhciBlO2lmKGM9PTE2KXtlPTR9ZWxzZXtpZihjPT04KXtlPTN9ZWxzZXtpZihjPT0yNTYpe2U9OH1lbHNle2lmKGM9PTIpe2U9MX1lbHNle2lmKGM9PTMyKXtlPTV9ZWxzZXtpZihjPT00KXtlPTJ9ZWxzZXt0aGlzLmZyb21SYWRpeChoLGMpO3JldHVybn19fX19fXRoaXMudD0wO3RoaXMucz0wO3ZhciBnPWgubGVuZ3RoLGQ9ZmFsc2UsZj0wO3doaWxlKC0tZz49MCl7dmFyIGE9KGU9PTgpP2hbZ10mMjU1OmludEF0KGgsZyk7aWYoYTwwKXtpZihoLmNoYXJBdChnKT09XCItXCIpe2Q9dHJ1ZX1jb250aW51ZX1kPWZhbHNlO2lmKGY9PTApe3RoaXNbdGhpcy50KytdPWF9ZWxzZXtpZihmK2U+dGhpcy5EQil7dGhpc1t0aGlzLnQtMV18PShhJigoMTw8KHRoaXMuREItZikpLTEpKTw8Zjt0aGlzW3RoaXMudCsrXT0oYT4+KHRoaXMuREItZikpfWVsc2V7dGhpc1t0aGlzLnQtMV18PWE8PGZ9fWYrPWU7aWYoZj49dGhpcy5EQil7Zi09dGhpcy5EQn19aWYoZT09OCYmKGhbMF0mMTI4KSE9MCl7dGhpcy5zPS0xO2lmKGY+MCl7dGhpc1t0aGlzLnQtMV18PSgoMTw8KHRoaXMuREItZikpLTEpPDxmfX10aGlzLmNsYW1wKCk7aWYoZCl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsdGhpcyl9fWZ1bmN0aW9uIGJucENsYW1wKCl7dmFyIGE9dGhpcy5zJnRoaXMuRE07d2hpbGUodGhpcy50PjAmJnRoaXNbdGhpcy50LTFdPT1hKXstLXRoaXMudH19ZnVuY3Rpb24gYm5Ub1N0cmluZyhjKXtpZih0aGlzLnM8MCl7cmV0dXJuXCItXCIrdGhpcy5uZWdhdGUoKS50b1N0cmluZyhjKX12YXIgZTtpZihjPT0xNil7ZT00fWVsc2V7aWYoYz09OCl7ZT0zfWVsc2V7aWYoYz09Mil7ZT0xfWVsc2V7aWYoYz09MzIpe2U9NX1lbHNle2lmKGM9PTQpe2U9Mn1lbHNle3JldHVybiB0aGlzLnRvUmFkaXgoYyl9fX19fXZhciBnPSgxPDxlKS0xLGwsYT1mYWxzZSxoPVwiXCIsZj10aGlzLnQ7dmFyIGo9dGhpcy5EQi0oZip0aGlzLkRCKSVlO2lmKGYtLT4wKXtpZihqPHRoaXMuREImJihsPXRoaXNbZl0+PmopPjApe2E9dHJ1ZTtoPWludDJjaGFyKGwpfXdoaWxlKGY+PTApe2lmKGo8ZSl7bD0odGhpc1tmXSYoKDE8PGopLTEpKTw8KGUtaik7bHw9dGhpc1stLWZdPj4oais9dGhpcy5EQi1lKX1lbHNle2w9KHRoaXNbZl0+PihqLT1lKSkmZztpZihqPD0wKXtqKz10aGlzLkRCOy0tZn19aWYobD4wKXthPXRydWV9aWYoYSl7aCs9aW50MmNoYXIobCl9fX1yZXR1cm4gYT9oOlwiMFwifWZ1bmN0aW9uIGJuTmVnYXRlKCl7dmFyIGE9bmJpKCk7QmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYm5BYnMoKXtyZXR1cm4odGhpcy5zPDApP3RoaXMubmVnYXRlKCk6dGhpc31mdW5jdGlvbiBibkNvbXBhcmVUbyhiKXt2YXIgZD10aGlzLnMtYi5zO2lmKGQhPTApe3JldHVybiBkfXZhciBjPXRoaXMudDtkPWMtYi50O2lmKGQhPTApe3JldHVybih0aGlzLnM8MCk/LWQ6ZH13aGlsZSgtLWM+PTApe2lmKChkPXRoaXNbY10tYltjXSkhPTApe3JldHVybiBkfX1yZXR1cm4gMH1mdW5jdGlvbiBuYml0cyhhKXt2YXIgYz0xLGI7aWYoKGI9YT4+PjE2KSE9MCl7YT1iO2MrPTE2fWlmKChiPWE+PjgpIT0wKXthPWI7Yys9OH1pZigoYj1hPj40KSE9MCl7YT1iO2MrPTR9aWYoKGI9YT4+MikhPTApe2E9YjtjKz0yfWlmKChiPWE+PjEpIT0wKXthPWI7Yys9MX1yZXR1cm4gY31mdW5jdGlvbiBibkJpdExlbmd0aCgpe2lmKHRoaXMudDw9MCl7cmV0dXJuIDB9cmV0dXJuIHRoaXMuREIqKHRoaXMudC0xKStuYml0cyh0aGlzW3RoaXMudC0xXV4odGhpcy5zJnRoaXMuRE0pKX1mdW5jdGlvbiBibnBETFNoaWZ0VG8oYyxiKXt2YXIgYTtmb3IoYT10aGlzLnQtMTthPj0wOy0tYSl7YlthK2NdPXRoaXNbYV19Zm9yKGE9Yy0xO2E+PTA7LS1hKXtiW2FdPTB9Yi50PXRoaXMudCtjO2Iucz10aGlzLnN9ZnVuY3Rpb24gYm5wRFJTaGlmdFRvKGMsYil7Zm9yKHZhciBhPWM7YTx0aGlzLnQ7KythKXtiW2EtY109dGhpc1thXX1iLnQ9TWF0aC5tYXgodGhpcy50LWMsMCk7Yi5zPXRoaXMuc31mdW5jdGlvbiBibnBMU2hpZnRUbyhqLGUpe3ZhciBiPWoldGhpcy5EQjt2YXIgYT10aGlzLkRCLWI7dmFyIGc9KDE8PGEpLTE7dmFyIGY9TWF0aC5mbG9vcihqL3RoaXMuREIpLGg9KHRoaXMuczw8YikmdGhpcy5ETSxkO2ZvcihkPXRoaXMudC0xO2Q+PTA7LS1kKXtlW2QrZisxXT0odGhpc1tkXT4+YSl8aDtoPSh0aGlzW2RdJmcpPDxifWZvcihkPWYtMTtkPj0wOy0tZCl7ZVtkXT0wfWVbZl09aDtlLnQ9dGhpcy50K2YrMTtlLnM9dGhpcy5zO2UuY2xhbXAoKX1mdW5jdGlvbiBibnBSU2hpZnRUbyhnLGQpe2Qucz10aGlzLnM7dmFyIGU9TWF0aC5mbG9vcihnL3RoaXMuREIpO2lmKGU+PXRoaXMudCl7ZC50PTA7cmV0dXJufXZhciBiPWcldGhpcy5EQjt2YXIgYT10aGlzLkRCLWI7dmFyIGY9KDE8PGIpLTE7ZFswXT10aGlzW2VdPj5iO2Zvcih2YXIgYz1lKzE7Yzx0aGlzLnQ7KytjKXtkW2MtZS0xXXw9KHRoaXNbY10mZik8PGE7ZFtjLWVdPXRoaXNbY10+PmJ9aWYoYj4wKXtkW3RoaXMudC1lLTFdfD0odGhpcy5zJmYpPDxhfWQudD10aGlzLnQtZTtkLmNsYW1wKCl9ZnVuY3Rpb24gYm5wU3ViVG8oZCxmKXt2YXIgZT0wLGc9MCxiPU1hdGgubWluKGQudCx0aGlzLnQpO3doaWxlKGU8Yil7Zys9dGhpc1tlXS1kW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9aWYoZC50PHRoaXMudCl7Zy09ZC5zO3doaWxlKGU8dGhpcy50KXtnKz10aGlzW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zys9dGhpcy5zfWVsc2V7Zys9dGhpcy5zO3doaWxlKGU8ZC50KXtnLT1kW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zy09ZC5zfWYucz0oZzwwKT8tMTowO2lmKGc8LTEpe2ZbZSsrXT10aGlzLkRWK2d9ZWxzZXtpZihnPjApe2ZbZSsrXT1nfX1mLnQ9ZTtmLmNsYW1wKCl9ZnVuY3Rpb24gYm5wTXVsdGlwbHlUbyhjLGUpe3ZhciBiPXRoaXMuYWJzKCksZj1jLmFicygpO3ZhciBkPWIudDtlLnQ9ZCtmLnQ7d2hpbGUoLS1kPj0wKXtlW2RdPTB9Zm9yKGQ9MDtkPGYudDsrK2Qpe2VbZCtiLnRdPWIuYW0oMCxmW2RdLGUsZCwwLGIudCl9ZS5zPTA7ZS5jbGFtcCgpO2lmKHRoaXMucyE9Yy5zKXtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8oZSxlKX19ZnVuY3Rpb24gYm5wU3F1YXJlVG8oZCl7dmFyIGE9dGhpcy5hYnMoKTt2YXIgYj1kLnQ9MiphLnQ7d2hpbGUoLS1iPj0wKXtkW2JdPTB9Zm9yKGI9MDtiPGEudC0xOysrYil7dmFyIGU9YS5hbShiLGFbYl0sZCwyKmIsMCwxKTtpZigoZFtiK2EudF0rPWEuYW0oYisxLDIqYVtiXSxkLDIqYisxLGUsYS50LWItMSkpPj1hLkRWKXtkW2IrYS50XS09YS5EVjtkW2IrYS50KzFdPTF9fWlmKGQudD4wKXtkW2QudC0xXSs9YS5hbShiLGFbYl0sZCwyKmIsMCwxKX1kLnM9MDtkLmNsYW1wKCl9ZnVuY3Rpb24gYm5wRGl2UmVtVG8obixoLGcpe3ZhciB3PW4uYWJzKCk7aWYody50PD0wKXtyZXR1cm59dmFyIGs9dGhpcy5hYnMoKTtpZihrLnQ8dy50KXtpZihoIT1udWxsKXtoLmZyb21JbnQoMCl9aWYoZyE9bnVsbCl7dGhpcy5jb3B5VG8oZyl9cmV0dXJufWlmKGc9PW51bGwpe2c9bmJpKCl9dmFyIGQ9bmJpKCksYT10aGlzLnMsbD1uLnM7dmFyIHY9dGhpcy5EQi1uYml0cyh3W3cudC0xXSk7aWYodj4wKXt3LmxTaGlmdFRvKHYsZCk7ay5sU2hpZnRUbyh2LGcpfWVsc2V7dy5jb3B5VG8oZCk7ay5jb3B5VG8oZyl9dmFyIHA9ZC50O3ZhciBiPWRbcC0xXTtpZihiPT0wKXtyZXR1cm59dmFyIG89YiooMTw8dGhpcy5GMSkrKChwPjEpP2RbcC0yXT4+dGhpcy5GMjowKTt2YXIgQT10aGlzLkZWL28sej0oMTw8dGhpcy5GMSkvbyx4PTE8PHRoaXMuRjI7dmFyIHU9Zy50LHM9dS1wLGY9KGg9PW51bGwpP25iaSgpOmg7ZC5kbFNoaWZ0VG8ocyxmKTtpZihnLmNvbXBhcmVUbyhmKT49MCl7Z1tnLnQrK109MTtnLnN1YlRvKGYsZyl9QmlnSW50ZWdlci5PTkUuZGxTaGlmdFRvKHAsZik7Zi5zdWJUbyhkLGQpO3doaWxlKGQudDxwKXtkW2QudCsrXT0wfXdoaWxlKC0tcz49MCl7dmFyIGM9KGdbLS11XT09Yik/dGhpcy5ETTpNYXRoLmZsb29yKGdbdV0qQSsoZ1t1LTFdK3gpKnopO2lmKChnW3VdKz1kLmFtKDAsYyxnLHMsMCxwKSk8Yyl7ZC5kbFNoaWZ0VG8ocyxmKTtnLnN1YlRvKGYsZyk7d2hpbGUoZ1t1XTwtLWMpe2cuc3ViVG8oZixnKX19fWlmKGghPW51bGwpe2cuZHJTaGlmdFRvKHAsaCk7aWYoYSE9bCl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKGgsaCl9fWcudD1wO2cuY2xhbXAoKTtpZih2PjApe2cuclNoaWZ0VG8odixnKX1pZihhPDApe0JpZ0ludGVnZXIuWkVSTy5zdWJUbyhnLGcpfX1mdW5jdGlvbiBibk1vZChiKXt2YXIgYz1uYmkoKTt0aGlzLmFicygpLmRpdlJlbVRvKGIsbnVsbCxjKTtpZih0aGlzLnM8MCYmYy5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKT4wKXtiLnN1YlRvKGMsYyl9cmV0dXJuIGN9ZnVuY3Rpb24gQ2xhc3NpYyhhKXt0aGlzLm09YX1mdW5jdGlvbiBjQ29udmVydChhKXtpZihhLnM8MHx8YS5jb21wYXJlVG8odGhpcy5tKT49MCl7cmV0dXJuIGEubW9kKHRoaXMubSl9ZWxzZXtyZXR1cm4gYX19ZnVuY3Rpb24gY1JldmVydChhKXtyZXR1cm4gYX1mdW5jdGlvbiBjUmVkdWNlKGEpe2EuZGl2UmVtVG8odGhpcy5tLG51bGwsYSl9ZnVuY3Rpb24gY011bFRvKGEsYyxiKXthLm11bHRpcGx5VG8oYyxiKTt0aGlzLnJlZHVjZShiKX1mdW5jdGlvbiBjU3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpO3RoaXMucmVkdWNlKGIpfUNsYXNzaWMucHJvdG90eXBlLmNvbnZlcnQ9Y0NvbnZlcnQ7Q2xhc3NpYy5wcm90b3R5cGUucmV2ZXJ0PWNSZXZlcnQ7Q2xhc3NpYy5wcm90b3R5cGUucmVkdWNlPWNSZWR1Y2U7Q2xhc3NpYy5wcm90b3R5cGUubXVsVG89Y011bFRvO0NsYXNzaWMucHJvdG90eXBlLnNxclRvPWNTcXJUbztmdW5jdGlvbiBibnBJbnZEaWdpdCgpe2lmKHRoaXMudDwxKXtyZXR1cm4gMH12YXIgYT10aGlzWzBdO2lmKChhJjEpPT0wKXtyZXR1cm4gMH12YXIgYj1hJjM7Yj0oYiooMi0oYSYxNSkqYikpJjE1O2I9KGIqKDItKGEmMjU1KSpiKSkmMjU1O2I9KGIqKDItKCgoYSY2NTUzNSkqYikmNjU1MzUpKSkmNjU1MzU7Yj0oYiooMi1hKmIldGhpcy5EVikpJXRoaXMuRFY7cmV0dXJuKGI+MCk/dGhpcy5EVi1iOi1ifWZ1bmN0aW9uIE1vbnRnb21lcnkoYSl7dGhpcy5tPWE7dGhpcy5tcD1hLmludkRpZ2l0KCk7dGhpcy5tcGw9dGhpcy5tcCYzMjc2Nzt0aGlzLm1waD10aGlzLm1wPj4xNTt0aGlzLnVtPSgxPDwoYS5EQi0xNSkpLTE7dGhpcy5tdDI9MiphLnR9ZnVuY3Rpb24gbW9udENvbnZlcnQoYSl7dmFyIGI9bmJpKCk7YS5hYnMoKS5kbFNoaWZ0VG8odGhpcy5tLnQsYik7Yi5kaXZSZW1Ubyh0aGlzLm0sbnVsbCxiKTtpZihhLnM8MCYmYi5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKT4wKXt0aGlzLm0uc3ViVG8oYixiKX1yZXR1cm4gYn1mdW5jdGlvbiBtb250UmV2ZXJ0KGEpe3ZhciBiPW5iaSgpO2EuY29weVRvKGIpO3RoaXMucmVkdWNlKGIpO3JldHVybiBifWZ1bmN0aW9uIG1vbnRSZWR1Y2UoYSl7d2hpbGUoYS50PD10aGlzLm10Mil7YVthLnQrK109MH1mb3IodmFyIGM9MDtjPHRoaXMubS50OysrYyl7dmFyIGI9YVtjXSYzMjc2Nzt2YXIgZD0oYip0aGlzLm1wbCsoKChiKnRoaXMubXBoKyhhW2NdPj4xNSkqdGhpcy5tcGwpJnRoaXMudW0pPDwxNSkpJmEuRE07Yj1jK3RoaXMubS50O2FbYl0rPXRoaXMubS5hbSgwLGQsYSxjLDAsdGhpcy5tLnQpO3doaWxlKGFbYl0+PWEuRFYpe2FbYl0tPWEuRFY7YVsrK2JdKyt9fWEuY2xhbXAoKTthLmRyU2hpZnRUbyh0aGlzLm0udCxhKTtpZihhLmNvbXBhcmVUbyh0aGlzLm0pPj0wKXthLnN1YlRvKHRoaXMubSxhKX19ZnVuY3Rpb24gbW9udFNxclRvKGEsYil7YS5zcXVhcmVUbyhiKTt0aGlzLnJlZHVjZShiKX1mdW5jdGlvbiBtb250TXVsVG8oYSxjLGIpe2EubXVsdGlwbHlUbyhjLGIpO3RoaXMucmVkdWNlKGIpfU1vbnRnb21lcnkucHJvdG90eXBlLmNvbnZlcnQ9bW9udENvbnZlcnQ7TW9udGdvbWVyeS5wcm90b3R5cGUucmV2ZXJ0PW1vbnRSZXZlcnQ7TW9udGdvbWVyeS5wcm90b3R5cGUucmVkdWNlPW1vbnRSZWR1Y2U7TW9udGdvbWVyeS5wcm90b3R5cGUubXVsVG89bW9udE11bFRvO01vbnRnb21lcnkucHJvdG90eXBlLnNxclRvPW1vbnRTcXJUbztmdW5jdGlvbiBibnBJc0V2ZW4oKXtyZXR1cm4oKHRoaXMudD4wKT8odGhpc1swXSYxKTp0aGlzLnMpPT0wfWZ1bmN0aW9uIGJucEV4cChoLGope2lmKGg+NDI5NDk2NzI5NXx8aDwxKXtyZXR1cm4gQmlnSW50ZWdlci5PTkV9dmFyIGY9bmJpKCksYT1uYmkoKSxkPWouY29udmVydCh0aGlzKSxjPW5iaXRzKGgpLTE7ZC5jb3B5VG8oZik7d2hpbGUoLS1jPj0wKXtqLnNxclRvKGYsYSk7aWYoKGgmKDE8PGMpKT4wKXtqLm11bFRvKGEsZCxmKX1lbHNle3ZhciBiPWY7Zj1hO2E9Yn19cmV0dXJuIGoucmV2ZXJ0KGYpfWZ1bmN0aW9uIGJuTW9kUG93SW50KGIsYSl7dmFyIGM7aWYoYjwyNTZ8fGEuaXNFdmVuKCkpe2M9bmV3IENsYXNzaWMoYSl9ZWxzZXtjPW5ldyBNb250Z29tZXJ5KGEpfXJldHVybiB0aGlzLmV4cChiLGMpfUJpZ0ludGVnZXIucHJvdG90eXBlLmNvcHlUbz1ibnBDb3B5VG87QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbUludD1ibnBGcm9tSW50O0JpZ0ludGVnZXIucHJvdG90eXBlLmZyb21TdHJpbmc9Ym5wRnJvbVN0cmluZztCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbGFtcD1ibnBDbGFtcDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5kbFNoaWZ0VG89Ym5wRExTaGlmdFRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmRyU2hpZnRUbz1ibnBEUlNoaWZ0VG87QmlnSW50ZWdlci5wcm90b3R5cGUubFNoaWZ0VG89Ym5wTFNoaWZ0VG87QmlnSW50ZWdlci5wcm90b3R5cGUuclNoaWZ0VG89Ym5wUlNoaWZ0VG87QmlnSW50ZWdlci5wcm90b3R5cGUuc3ViVG89Ym5wU3ViVG87QmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlUbz1ibnBNdWx0aXBseVRvO0JpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZVRvPWJucFNxdWFyZVRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmRpdlJlbVRvPWJucERpdlJlbVRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmludkRpZ2l0PWJucEludkRpZ2l0O0JpZ0ludGVnZXIucHJvdG90eXBlLmlzRXZlbj1ibnBJc0V2ZW47QmlnSW50ZWdlci5wcm90b3R5cGUuZXhwPWJucEV4cDtCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1N0cmluZz1iblRvU3RyaW5nO0JpZ0ludGVnZXIucHJvdG90eXBlLm5lZ2F0ZT1ibk5lZ2F0ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5hYnM9Ym5BYnM7QmlnSW50ZWdlci5wcm90b3R5cGUuY29tcGFyZVRvPWJuQ29tcGFyZVRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmJpdExlbmd0aD1ibkJpdExlbmd0aDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2Q9Ym5Nb2Q7QmlnSW50ZWdlci5wcm90b3R5cGUubW9kUG93SW50PWJuTW9kUG93SW50O0JpZ0ludGVnZXIuWkVSTz1uYnYoMCk7QmlnSW50ZWdlci5PTkU9bmJ2KDEpO1xuXHQvKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cblx0ICovXG5cdGZ1bmN0aW9uIGJuQ2xvbmUoKXt2YXIgYT1uYmkoKTt0aGlzLmNvcHlUbyhhKTtyZXR1cm4gYX1mdW5jdGlvbiBibkludFZhbHVlKCl7aWYodGhpcy5zPDApe2lmKHRoaXMudD09MSl7cmV0dXJuIHRoaXNbMF0tdGhpcy5EVn1lbHNle2lmKHRoaXMudD09MCl7cmV0dXJuIC0xfX19ZWxzZXtpZih0aGlzLnQ9PTEpe3JldHVybiB0aGlzWzBdfWVsc2V7aWYodGhpcy50PT0wKXtyZXR1cm4gMH19fXJldHVybigodGhpc1sxXSYoKDE8PCgzMi10aGlzLkRCKSktMSkpPDx0aGlzLkRCKXx0aGlzWzBdfWZ1bmN0aW9uIGJuQnl0ZVZhbHVlKCl7cmV0dXJuKHRoaXMudD09MCk/dGhpcy5zOih0aGlzWzBdPDwyNCk+PjI0fWZ1bmN0aW9uIGJuU2hvcnRWYWx1ZSgpe3JldHVybih0aGlzLnQ9PTApP3RoaXMuczoodGhpc1swXTw8MTYpPj4xNn1mdW5jdGlvbiBibnBDaHVua1NpemUoYSl7cmV0dXJuIE1hdGguZmxvb3IoTWF0aC5MTjIqdGhpcy5EQi9NYXRoLmxvZyhhKSl9ZnVuY3Rpb24gYm5TaWdOdW0oKXtpZih0aGlzLnM8MCl7cmV0dXJuIC0xfWVsc2V7aWYodGhpcy50PD0wfHwodGhpcy50PT0xJiZ0aGlzWzBdPD0wKSl7cmV0dXJuIDB9ZWxzZXtyZXR1cm4gMX19fWZ1bmN0aW9uIGJucFRvUmFkaXgoYyl7aWYoYz09bnVsbCl7Yz0xMH1pZih0aGlzLnNpZ251bSgpPT0wfHxjPDJ8fGM+MzYpe3JldHVyblwiMFwifXZhciBmPXRoaXMuY2h1bmtTaXplKGMpO3ZhciBlPU1hdGgucG93KGMsZik7dmFyIGk9bmJ2KGUpLGo9bmJpKCksaD1uYmkoKSxnPVwiXCI7dGhpcy5kaXZSZW1UbyhpLGosaCk7d2hpbGUoai5zaWdudW0oKT4wKXtnPShlK2guaW50VmFsdWUoKSkudG9TdHJpbmcoYykuc3Vic3RyKDEpK2c7ai5kaXZSZW1UbyhpLGosaCl9cmV0dXJuIGguaW50VmFsdWUoKS50b1N0cmluZyhjKStnfWZ1bmN0aW9uIGJucEZyb21SYWRpeChtLGgpe3RoaXMuZnJvbUludCgwKTtpZihoPT1udWxsKXtoPTEwfXZhciBmPXRoaXMuY2h1bmtTaXplKGgpO3ZhciBnPU1hdGgucG93KGgsZiksZT1mYWxzZSxhPTAsbD0wO2Zvcih2YXIgYz0wO2M8bS5sZW5ndGg7KytjKXt2YXIgaz1pbnRBdChtLGMpO2lmKGs8MCl7aWYobS5jaGFyQXQoYyk9PVwiLVwiJiZ0aGlzLnNpZ251bSgpPT0wKXtlPXRydWV9Y29udGludWV9bD1oKmwraztpZigrK2E+PWYpe3RoaXMuZE11bHRpcGx5KGcpO3RoaXMuZEFkZE9mZnNldChsLDApO2E9MDtsPTB9fWlmKGE+MCl7dGhpcy5kTXVsdGlwbHkoTWF0aC5wb3coaCxhKSk7dGhpcy5kQWRkT2Zmc2V0KGwsMCl9aWYoZSl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsdGhpcyl9fWZ1bmN0aW9uIGJucEZyb21OdW1iZXIoZixlLGgpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXtpZihmPDIpe3RoaXMuZnJvbUludCgxKX1lbHNle3RoaXMuZnJvbU51bWJlcihmLGgpO2lmKCF0aGlzLnRlc3RCaXQoZi0xKSl7dGhpcy5iaXR3aXNlVG8oQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGYtMSksb3Bfb3IsdGhpcyl9aWYodGhpcy5pc0V2ZW4oKSl7dGhpcy5kQWRkT2Zmc2V0KDEsMCl9d2hpbGUoIXRoaXMuaXNQcm9iYWJsZVByaW1lKGUpKXt0aGlzLmRBZGRPZmZzZXQoMiwwKTtpZih0aGlzLmJpdExlbmd0aCgpPmYpe3RoaXMuc3ViVG8oQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGYtMSksdGhpcyl9fX19ZWxzZXt2YXIgZD1uZXcgQXJyYXkoKSxnPWYmNztkLmxlbmd0aD0oZj4+MykrMTtlLm5leHRCeXRlcyhkKTtpZihnPjApe2RbMF0mPSgoMTw8ZyktMSl9ZWxzZXtkWzBdPTB9dGhpcy5mcm9tU3RyaW5nKGQsMjU2KX19ZnVuY3Rpb24gYm5Ub0J5dGVBcnJheSgpe3ZhciBiPXRoaXMudCxjPW5ldyBBcnJheSgpO2NbMF09dGhpcy5zO3ZhciBlPXRoaXMuREItKGIqdGhpcy5EQiklOCxmLGE9MDtpZihiLS0+MCl7aWYoZTx0aGlzLkRCJiYoZj10aGlzW2JdPj5lKSE9KHRoaXMucyZ0aGlzLkRNKT4+ZSl7Y1thKytdPWZ8KHRoaXMuczw8KHRoaXMuREItZSkpfXdoaWxlKGI+PTApe2lmKGU8OCl7Zj0odGhpc1tiXSYoKDE8PGUpLTEpKTw8KDgtZSk7Znw9dGhpc1stLWJdPj4oZSs9dGhpcy5EQi04KX1lbHNle2Y9KHRoaXNbYl0+PihlLT04KSkmMjU1O2lmKGU8PTApe2UrPXRoaXMuREI7LS1ifX1pZigoZiYxMjgpIT0wKXtmfD0tMjU2fWlmKGE9PTAmJih0aGlzLnMmMTI4KSE9KGYmMTI4KSl7KythfWlmKGE+MHx8ZiE9dGhpcy5zKXtjW2ErK109Zn19fXJldHVybiBjfWZ1bmN0aW9uIGJuRXF1YWxzKGIpe3JldHVybih0aGlzLmNvbXBhcmVUbyhiKT09MCl9ZnVuY3Rpb24gYm5NaW4oYil7cmV0dXJuKHRoaXMuY29tcGFyZVRvKGIpPDApP3RoaXM6Yn1mdW5jdGlvbiBibk1heChiKXtyZXR1cm4odGhpcy5jb21wYXJlVG8oYik+MCk/dGhpczpifWZ1bmN0aW9uIGJucEJpdHdpc2VUbyhjLGgsZSl7dmFyIGQsZyxiPU1hdGgubWluKGMudCx0aGlzLnQpO2ZvcihkPTA7ZDxiOysrZCl7ZVtkXT1oKHRoaXNbZF0sY1tkXSl9aWYoYy50PHRoaXMudCl7Zz1jLnMmdGhpcy5ETTtmb3IoZD1iO2Q8dGhpcy50OysrZCl7ZVtkXT1oKHRoaXNbZF0sZyl9ZS50PXRoaXMudH1lbHNle2c9dGhpcy5zJnRoaXMuRE07Zm9yKGQ9YjtkPGMudDsrK2Qpe2VbZF09aChnLGNbZF0pfWUudD1jLnR9ZS5zPWgodGhpcy5zLGMucyk7ZS5jbGFtcCgpfWZ1bmN0aW9uIG9wX2FuZChhLGIpe3JldHVybiBhJmJ9ZnVuY3Rpb24gYm5BbmQoYil7dmFyIGM9bmJpKCk7dGhpcy5iaXR3aXNlVG8oYixvcF9hbmQsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gb3Bfb3IoYSxiKXtyZXR1cm4gYXxifWZ1bmN0aW9uIGJuT3IoYil7dmFyIGM9bmJpKCk7dGhpcy5iaXR3aXNlVG8oYixvcF9vcixjKTtyZXR1cm4gY31mdW5jdGlvbiBvcF94b3IoYSxiKXtyZXR1cm4gYV5ifWZ1bmN0aW9uIGJuWG9yKGIpe3ZhciBjPW5iaSgpO3RoaXMuYml0d2lzZVRvKGIsb3BfeG9yLGMpO3JldHVybiBjfWZ1bmN0aW9uIG9wX2FuZG5vdChhLGIpe3JldHVybiBhJn5ifWZ1bmN0aW9uIGJuQW5kTm90KGIpe3ZhciBjPW5iaSgpO3RoaXMuYml0d2lzZVRvKGIsb3BfYW5kbm90LGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuTm90KCl7dmFyIGI9bmJpKCk7Zm9yKHZhciBhPTA7YTx0aGlzLnQ7KythKXtiW2FdPXRoaXMuRE0mfnRoaXNbYV19Yi50PXRoaXMudDtiLnM9fnRoaXMucztyZXR1cm4gYn1mdW5jdGlvbiBiblNoaWZ0TGVmdChiKXt2YXIgYT1uYmkoKTtpZihiPDApe3RoaXMuclNoaWZ0VG8oLWIsYSl9ZWxzZXt0aGlzLmxTaGlmdFRvKGIsYSl9cmV0dXJuIGF9ZnVuY3Rpb24gYm5TaGlmdFJpZ2h0KGIpe3ZhciBhPW5iaSgpO2lmKGI8MCl7dGhpcy5sU2hpZnRUbygtYixhKX1lbHNle3RoaXMuclNoaWZ0VG8oYixhKX1yZXR1cm4gYX1mdW5jdGlvbiBsYml0KGEpe2lmKGE9PTApe3JldHVybiAtMX12YXIgYj0wO2lmKChhJjY1NTM1KT09MCl7YT4+PTE2O2IrPTE2fWlmKChhJjI1NSk9PTApe2E+Pj04O2IrPTh9aWYoKGEmMTUpPT0wKXthPj49NDtiKz00fWlmKChhJjMpPT0wKXthPj49MjtiKz0yfWlmKChhJjEpPT0wKXsrK2J9cmV0dXJuIGJ9ZnVuY3Rpb24gYm5HZXRMb3dlc3RTZXRCaXQoKXtmb3IodmFyIGE9MDthPHRoaXMudDsrK2Epe2lmKHRoaXNbYV0hPTApe3JldHVybiBhKnRoaXMuREIrbGJpdCh0aGlzW2FdKX19aWYodGhpcy5zPDApe3JldHVybiB0aGlzLnQqdGhpcy5EQn1yZXR1cm4gLTF9ZnVuY3Rpb24gY2JpdChhKXt2YXIgYj0wO3doaWxlKGEhPTApe2EmPWEtMTsrK2J9cmV0dXJuIGJ9ZnVuY3Rpb24gYm5CaXRDb3VudCgpe3ZhciBjPTAsYT10aGlzLnMmdGhpcy5ETTtmb3IodmFyIGI9MDtiPHRoaXMudDsrK2Ipe2MrPWNiaXQodGhpc1tiXV5hKX1yZXR1cm4gY31mdW5jdGlvbiBiblRlc3RCaXQoYil7dmFyIGE9TWF0aC5mbG9vcihiL3RoaXMuREIpO2lmKGE+PXRoaXMudCl7cmV0dXJuKHRoaXMucyE9MCl9cmV0dXJuKCh0aGlzW2FdJigxPDwoYiV0aGlzLkRCKSkpIT0wKX1mdW5jdGlvbiBibnBDaGFuZ2VCaXQoYyxiKXt2YXIgYT1CaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYyk7dGhpcy5iaXR3aXNlVG8oYSxiLGEpO3JldHVybiBhfWZ1bmN0aW9uIGJuU2V0Qml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX29yKX1mdW5jdGlvbiBibkNsZWFyQml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX2FuZG5vdCl9ZnVuY3Rpb24gYm5GbGlwQml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX3hvcil9ZnVuY3Rpb24gYm5wQWRkVG8oZCxmKXt2YXIgZT0wLGc9MCxiPU1hdGgubWluKGQudCx0aGlzLnQpO3doaWxlKGU8Yil7Zys9dGhpc1tlXStkW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9aWYoZC50PHRoaXMudCl7Zys9ZC5zO3doaWxlKGU8dGhpcy50KXtnKz10aGlzW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zys9dGhpcy5zfWVsc2V7Zys9dGhpcy5zO3doaWxlKGU8ZC50KXtnKz1kW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zys9ZC5zfWYucz0oZzwwKT8tMTowO2lmKGc+MCl7ZltlKytdPWd9ZWxzZXtpZihnPC0xKXtmW2UrK109dGhpcy5EVitnfX1mLnQ9ZTtmLmNsYW1wKCl9ZnVuY3Rpb24gYm5BZGQoYil7dmFyIGM9bmJpKCk7dGhpcy5hZGRUbyhiLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuU3VidHJhY3QoYil7dmFyIGM9bmJpKCk7dGhpcy5zdWJUbyhiLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuTXVsdGlwbHkoYil7dmFyIGM9bmJpKCk7dGhpcy5tdWx0aXBseVRvKGIsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gYm5TcXVhcmUoKXt2YXIgYT1uYmkoKTt0aGlzLnNxdWFyZVRvKGEpO3JldHVybiBhfWZ1bmN0aW9uIGJuRGl2aWRlKGIpe3ZhciBjPW5iaSgpO3RoaXMuZGl2UmVtVG8oYixjLG51bGwpO3JldHVybiBjfWZ1bmN0aW9uIGJuUmVtYWluZGVyKGIpe3ZhciBjPW5iaSgpO3RoaXMuZGl2UmVtVG8oYixudWxsLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuRGl2aWRlQW5kUmVtYWluZGVyKGIpe3ZhciBkPW5iaSgpLGM9bmJpKCk7dGhpcy5kaXZSZW1UbyhiLGQsYyk7cmV0dXJuIG5ldyBBcnJheShkLGMpfWZ1bmN0aW9uIGJucERNdWx0aXBseShhKXt0aGlzW3RoaXMudF09dGhpcy5hbSgwLGEtMSx0aGlzLDAsMCx0aGlzLnQpOysrdGhpcy50O3RoaXMuY2xhbXAoKX1mdW5jdGlvbiBibnBEQWRkT2Zmc2V0KGIsYSl7aWYoYj09MCl7cmV0dXJufXdoaWxlKHRoaXMudDw9YSl7dGhpc1t0aGlzLnQrK109MH10aGlzW2FdKz1iO3doaWxlKHRoaXNbYV0+PXRoaXMuRFYpe3RoaXNbYV0tPXRoaXMuRFY7aWYoKythPj10aGlzLnQpe3RoaXNbdGhpcy50KytdPTB9Kyt0aGlzW2FdfX1mdW5jdGlvbiBOdWxsRXhwKCl7fWZ1bmN0aW9uIG5Ob3AoYSl7cmV0dXJuIGF9ZnVuY3Rpb24gbk11bFRvKGEsYyxiKXthLm11bHRpcGx5VG8oYyxiKX1mdW5jdGlvbiBuU3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpfU51bGxFeHAucHJvdG90eXBlLmNvbnZlcnQ9bk5vcDtOdWxsRXhwLnByb3RvdHlwZS5yZXZlcnQ9bk5vcDtOdWxsRXhwLnByb3RvdHlwZS5tdWxUbz1uTXVsVG87TnVsbEV4cC5wcm90b3R5cGUuc3FyVG89blNxclRvO2Z1bmN0aW9uIGJuUG93KGEpe3JldHVybiB0aGlzLmV4cChhLG5ldyBOdWxsRXhwKCkpfWZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhiLGYsZSl7dmFyIGQ9TWF0aC5taW4odGhpcy50K2IudCxmKTtlLnM9MDtlLnQ9ZDt3aGlsZShkPjApe2VbLS1kXT0wfXZhciBjO2ZvcihjPWUudC10aGlzLnQ7ZDxjOysrZCl7ZVtkK3RoaXMudF09dGhpcy5hbSgwLGJbZF0sZSxkLDAsdGhpcy50KX1mb3IoYz1NYXRoLm1pbihiLnQsZik7ZDxjOysrZCl7dGhpcy5hbSgwLGJbZF0sZSxkLDAsZi1kKX1lLmNsYW1wKCl9ZnVuY3Rpb24gYm5wTXVsdGlwbHlVcHBlclRvKGIsZSxkKXstLWU7dmFyIGM9ZC50PXRoaXMudCtiLnQtZTtkLnM9MDt3aGlsZSgtLWM+PTApe2RbY109MH1mb3IoYz1NYXRoLm1heChlLXRoaXMudCwwKTtjPGIudDsrK2Mpe2RbdGhpcy50K2MtZV09dGhpcy5hbShlLWMsYltjXSxkLDAsMCx0aGlzLnQrYy1lKX1kLmNsYW1wKCk7ZC5kclNoaWZ0VG8oMSxkKX1mdW5jdGlvbiBCYXJyZXR0KGEpe3RoaXMucjI9bmJpKCk7dGhpcy5xMz1uYmkoKTtCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oMiphLnQsdGhpcy5yMik7dGhpcy5tdT10aGlzLnIyLmRpdmlkZShhKTt0aGlzLm09YX1mdW5jdGlvbiBiYXJyZXR0Q29udmVydChhKXtpZihhLnM8MHx8YS50PjIqdGhpcy5tLnQpe3JldHVybiBhLm1vZCh0aGlzLm0pfWVsc2V7aWYoYS5jb21wYXJlVG8odGhpcy5tKTwwKXtyZXR1cm4gYX1lbHNle3ZhciBiPW5iaSgpO2EuY29weVRvKGIpO3RoaXMucmVkdWNlKGIpO3JldHVybiBifX19ZnVuY3Rpb24gYmFycmV0dFJldmVydChhKXtyZXR1cm4gYX1mdW5jdGlvbiBiYXJyZXR0UmVkdWNlKGEpe2EuZHJTaGlmdFRvKHRoaXMubS50LTEsdGhpcy5yMik7aWYoYS50PnRoaXMubS50KzEpe2EudD10aGlzLm0udCsxO2EuY2xhbXAoKX10aGlzLm11Lm11bHRpcGx5VXBwZXJUbyh0aGlzLnIyLHRoaXMubS50KzEsdGhpcy5xMyk7dGhpcy5tLm11bHRpcGx5TG93ZXJUbyh0aGlzLnEzLHRoaXMubS50KzEsdGhpcy5yMik7d2hpbGUoYS5jb21wYXJlVG8odGhpcy5yMik8MCl7YS5kQWRkT2Zmc2V0KDEsdGhpcy5tLnQrMSl9YS5zdWJUbyh0aGlzLnIyLGEpO3doaWxlKGEuY29tcGFyZVRvKHRoaXMubSk+PTApe2Euc3ViVG8odGhpcy5tLGEpfX1mdW5jdGlvbiBiYXJyZXR0U3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpO3RoaXMucmVkdWNlKGIpfWZ1bmN0aW9uIGJhcnJldHRNdWxUbyhhLGMsYil7YS5tdWx0aXBseVRvKGMsYik7dGhpcy5yZWR1Y2UoYil9QmFycmV0dC5wcm90b3R5cGUuY29udmVydD1iYXJyZXR0Q29udmVydDtCYXJyZXR0LnByb3RvdHlwZS5yZXZlcnQ9YmFycmV0dFJldmVydDtCYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2U9YmFycmV0dFJlZHVjZTtCYXJyZXR0LnByb3RvdHlwZS5tdWxUbz1iYXJyZXR0TXVsVG87QmFycmV0dC5wcm90b3R5cGUuc3FyVG89YmFycmV0dFNxclRvO2Z1bmN0aW9uIGJuTW9kUG93KHEsZil7dmFyIG89cS5iaXRMZW5ndGgoKSxoLGI9bmJ2KDEpLHY7aWYobzw9MCl7cmV0dXJuIGJ9ZWxzZXtpZihvPDE4KXtoPTF9ZWxzZXtpZihvPDQ4KXtoPTN9ZWxzZXtpZihvPDE0NCl7aD00fWVsc2V7aWYobzw3Njgpe2g9NX1lbHNle2g9Nn19fX19aWYobzw4KXt2PW5ldyBDbGFzc2ljKGYpfWVsc2V7aWYoZi5pc0V2ZW4oKSl7dj1uZXcgQmFycmV0dChmKX1lbHNle3Y9bmV3IE1vbnRnb21lcnkoZil9fXZhciBwPW5ldyBBcnJheSgpLGQ9MyxzPWgtMSxhPSgxPDxoKS0xO3BbMV09di5jb252ZXJ0KHRoaXMpO2lmKGg+MSl7dmFyIEE9bmJpKCk7di5zcXJUbyhwWzFdLEEpO3doaWxlKGQ8PWEpe3BbZF09bmJpKCk7di5tdWxUbyhBLHBbZC0yXSxwW2RdKTtkKz0yfX12YXIgbD1xLnQtMSx4LHU9dHJ1ZSxjPW5iaSgpLHk7bz1uYml0cyhxW2xdKS0xO3doaWxlKGw+PTApe2lmKG8+PXMpe3g9KHFbbF0+PihvLXMpKSZhfWVsc2V7eD0ocVtsXSYoKDE8PChvKzEpKS0xKSk8PChzLW8pO2lmKGw+MCl7eHw9cVtsLTFdPj4odGhpcy5EQitvLXMpfX1kPWg7d2hpbGUoKHgmMSk9PTApe3g+Pj0xOy0tZH1pZigoby09ZCk8MCl7bys9dGhpcy5EQjstLWx9aWYodSl7cFt4XS5jb3B5VG8oYik7dT1mYWxzZX1lbHNle3doaWxlKGQ+MSl7di5zcXJUbyhiLGMpO3Yuc3FyVG8oYyxiKTtkLT0yfWlmKGQ+MCl7di5zcXJUbyhiLGMpfWVsc2V7eT1iO2I9YztjPXl9di5tdWxUbyhjLHBbeF0sYil9d2hpbGUobD49MCYmKHFbbF0mKDE8PG8pKT09MCl7di5zcXJUbyhiLGMpO3k9YjtiPWM7Yz15O2lmKC0tbzwwKXtvPXRoaXMuREItMTstLWx9fX1yZXR1cm4gdi5yZXZlcnQoYil9ZnVuY3Rpb24gYm5HQ0QoYyl7dmFyIGI9KHRoaXMuczwwKT90aGlzLm5lZ2F0ZSgpOnRoaXMuY2xvbmUoKTt2YXIgaD0oYy5zPDApP2MubmVnYXRlKCk6Yy5jbG9uZSgpO2lmKGIuY29tcGFyZVRvKGgpPDApe3ZhciBlPWI7Yj1oO2g9ZX12YXIgZD1iLmdldExvd2VzdFNldEJpdCgpLGY9aC5nZXRMb3dlc3RTZXRCaXQoKTtpZihmPDApe3JldHVybiBifWlmKGQ8Zil7Zj1kfWlmKGY+MCl7Yi5yU2hpZnRUbyhmLGIpO2guclNoaWZ0VG8oZixoKX13aGlsZShiLnNpZ251bSgpPjApe2lmKChkPWIuZ2V0TG93ZXN0U2V0Qml0KCkpPjApe2IuclNoaWZ0VG8oZCxiKX1pZigoZD1oLmdldExvd2VzdFNldEJpdCgpKT4wKXtoLnJTaGlmdFRvKGQsaCl9aWYoYi5jb21wYXJlVG8oaCk+PTApe2Iuc3ViVG8oaCxiKTtiLnJTaGlmdFRvKDEsYil9ZWxzZXtoLnN1YlRvKGIsaCk7aC5yU2hpZnRUbygxLGgpfX1pZihmPjApe2gubFNoaWZ0VG8oZixoKX1yZXR1cm4gaH1mdW5jdGlvbiBibnBNb2RJbnQoZSl7aWYoZTw9MCl7cmV0dXJuIDB9dmFyIGM9dGhpcy5EViVlLGI9KHRoaXMuczwwKT9lLTE6MDtpZih0aGlzLnQ+MCl7aWYoYz09MCl7Yj10aGlzWzBdJWV9ZWxzZXtmb3IodmFyIGE9dGhpcy50LTE7YT49MDstLWEpe2I9KGMqYit0aGlzW2FdKSVlfX19cmV0dXJuIGJ9ZnVuY3Rpb24gYm5Nb2RJbnZlcnNlKGYpe3ZhciBqPWYuaXNFdmVuKCk7aWYoKHRoaXMuaXNFdmVuKCkmJmopfHxmLnNpZ251bSgpPT0wKXtyZXR1cm4gQmlnSW50ZWdlci5aRVJPfXZhciBpPWYuY2xvbmUoKSxoPXRoaXMuY2xvbmUoKTt2YXIgZz1uYnYoMSksZT1uYnYoMCksbD1uYnYoMCksaz1uYnYoMSk7d2hpbGUoaS5zaWdudW0oKSE9MCl7d2hpbGUoaS5pc0V2ZW4oKSl7aS5yU2hpZnRUbygxLGkpO2lmKGope2lmKCFnLmlzRXZlbigpfHwhZS5pc0V2ZW4oKSl7Zy5hZGRUbyh0aGlzLGcpO2Uuc3ViVG8oZixlKX1nLnJTaGlmdFRvKDEsZyl9ZWxzZXtpZighZS5pc0V2ZW4oKSl7ZS5zdWJUbyhmLGUpfX1lLnJTaGlmdFRvKDEsZSl9d2hpbGUoaC5pc0V2ZW4oKSl7aC5yU2hpZnRUbygxLGgpO2lmKGope2lmKCFsLmlzRXZlbigpfHwhay5pc0V2ZW4oKSl7bC5hZGRUbyh0aGlzLGwpO2suc3ViVG8oZixrKX1sLnJTaGlmdFRvKDEsbCl9ZWxzZXtpZighay5pc0V2ZW4oKSl7ay5zdWJUbyhmLGspfX1rLnJTaGlmdFRvKDEsayl9aWYoaS5jb21wYXJlVG8oaCk+PTApe2kuc3ViVG8oaCxpKTtpZihqKXtnLnN1YlRvKGwsZyl9ZS5zdWJUbyhrLGUpfWVsc2V7aC5zdWJUbyhpLGgpO2lmKGope2wuc3ViVG8oZyxsKX1rLnN1YlRvKGUsayl9fWlmKGguY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSE9MCl7cmV0dXJuIEJpZ0ludGVnZXIuWkVST31pZihrLmNvbXBhcmVUbyhmKT49MCl7cmV0dXJuIGsuc3VidHJhY3QoZil9aWYoay5zaWdudW0oKTwwKXtrLmFkZFRvKGYsayl9ZWxzZXtyZXR1cm4ga31pZihrLnNpZ251bSgpPDApe3JldHVybiBrLmFkZChmKX1lbHNle3JldHVybiBrfX12YXIgbG93cHJpbWVzPVsyLDMsNSw3LDExLDEzLDE3LDE5LDIzLDI5LDMxLDM3LDQxLDQzLDQ3LDUzLDU5LDYxLDY3LDcxLDczLDc5LDgzLDg5LDk3LDEwMSwxMDMsMTA3LDEwOSwxMTMsMTI3LDEzMSwxMzcsMTM5LDE0OSwxNTEsMTU3LDE2MywxNjcsMTczLDE3OSwxODEsMTkxLDE5MywxOTcsMTk5LDIxMSwyMjMsMjI3LDIyOSwyMzMsMjM5LDI0MSwyNTEsMjU3LDI2MywyNjksMjcxLDI3NywyODEsMjgzLDI5MywzMDcsMzExLDMxMywzMTcsMzMxLDMzNywzNDcsMzQ5LDM1MywzNTksMzY3LDM3MywzNzksMzgzLDM4OSwzOTcsNDAxLDQwOSw0MTksNDIxLDQzMSw0MzMsNDM5LDQ0Myw0NDksNDU3LDQ2MSw0NjMsNDY3LDQ3OSw0ODcsNDkxLDQ5OSw1MDMsNTA5LDUyMSw1MjMsNTQxLDU0Nyw1NTcsNTYzLDU2OSw1NzEsNTc3LDU4Nyw1OTMsNTk5LDYwMSw2MDcsNjEzLDYxNyw2MTksNjMxLDY0MSw2NDMsNjQ3LDY1Myw2NTksNjYxLDY3Myw2NzcsNjgzLDY5MSw3MDEsNzA5LDcxOSw3MjcsNzMzLDczOSw3NDMsNzUxLDc1Nyw3NjEsNzY5LDc3Myw3ODcsNzk3LDgwOSw4MTEsODIxLDgyMyw4MjcsODI5LDgzOSw4NTMsODU3LDg1OSw4NjMsODc3LDg4MSw4ODMsODg3LDkwNyw5MTEsOTE5LDkyOSw5MzcsOTQxLDk0Nyw5NTMsOTY3LDk3MSw5NzcsOTgzLDk5MSw5OTddO3ZhciBscGxpbT0oMTw8MjYpL2xvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdO2Z1bmN0aW9uIGJuSXNQcm9iYWJsZVByaW1lKGUpe3ZhciBkLGI9dGhpcy5hYnMoKTtpZihiLnQ9PTEmJmJbMF08PWxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdKXtmb3IoZD0wO2Q8bG93cHJpbWVzLmxlbmd0aDsrK2Qpe2lmKGJbMF09PWxvd3ByaW1lc1tkXSl7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX1pZihiLmlzRXZlbigpKXtyZXR1cm4gZmFsc2V9ZD0xO3doaWxlKGQ8bG93cHJpbWVzLmxlbmd0aCl7dmFyIGE9bG93cHJpbWVzW2RdLGM9ZCsxO3doaWxlKGM8bG93cHJpbWVzLmxlbmd0aCYmYTxscGxpbSl7YSo9bG93cHJpbWVzW2MrK119YT1iLm1vZEludChhKTt3aGlsZShkPGMpe2lmKGElbG93cHJpbWVzW2QrK109PTApe3JldHVybiBmYWxzZX19fXJldHVybiBiLm1pbGxlclJhYmluKGUpfWZ1bmN0aW9uIGJucE1pbGxlclJhYmluKGYpe3ZhciBnPXRoaXMuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpO3ZhciBjPWcuZ2V0TG93ZXN0U2V0Qml0KCk7aWYoYzw9MCl7cmV0dXJuIGZhbHNlfXZhciBoPWcuc2hpZnRSaWdodChjKTtmPShmKzEpPj4xO2lmKGY+bG93cHJpbWVzLmxlbmd0aCl7Zj1sb3dwcmltZXMubGVuZ3RofXZhciBiPW5iaSgpO2Zvcih2YXIgZT0wO2U8ZjsrK2Upe2IuZnJvbUludChsb3dwcmltZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmxvd3ByaW1lcy5sZW5ndGgpXSk7dmFyIGw9Yi5tb2RQb3coaCx0aGlzKTtpZihsLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkhPTAmJmwuY29tcGFyZVRvKGcpIT0wKXt2YXIgZD0xO3doaWxlKGQrKzxjJiZsLmNvbXBhcmVUbyhnKSE9MCl7bD1sLm1vZFBvd0ludCgyLHRoaXMpO2lmKGwuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKT09MCl7cmV0dXJuIGZhbHNlfX1pZihsLmNvbXBhcmVUbyhnKSE9MCl7cmV0dXJuIGZhbHNlfX19cmV0dXJuIHRydWV9QmlnSW50ZWdlci5wcm90b3R5cGUuY2h1bmtTaXplPWJucENodW5rU2l6ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1JhZGl4PWJucFRvUmFkaXg7QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVJhZGl4PWJucEZyb21SYWRpeDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tTnVtYmVyPWJucEZyb21OdW1iZXI7QmlnSW50ZWdlci5wcm90b3R5cGUuYml0d2lzZVRvPWJucEJpdHdpc2VUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5jaGFuZ2VCaXQ9Ym5wQ2hhbmdlQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmFkZFRvPWJucEFkZFRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmRNdWx0aXBseT1ibnBETXVsdGlwbHk7QmlnSW50ZWdlci5wcm90b3R5cGUuZEFkZE9mZnNldD1ibnBEQWRkT2Zmc2V0O0JpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5TG93ZXJUbz1ibnBNdWx0aXBseUxvd2VyVG87QmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlVcHBlclRvPWJucE11bHRpcGx5VXBwZXJUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnQ9Ym5wTW9kSW50O0JpZ0ludGVnZXIucHJvdG90eXBlLm1pbGxlclJhYmluPWJucE1pbGxlclJhYmluO0JpZ0ludGVnZXIucHJvdG90eXBlLmNsb25lPWJuQ2xvbmU7QmlnSW50ZWdlci5wcm90b3R5cGUuaW50VmFsdWU9Ym5JbnRWYWx1ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5ieXRlVmFsdWU9Ym5CeXRlVmFsdWU7QmlnSW50ZWdlci5wcm90b3R5cGUuc2hvcnRWYWx1ZT1iblNob3J0VmFsdWU7QmlnSW50ZWdlci5wcm90b3R5cGUuc2lnbnVtPWJuU2lnTnVtO0JpZ0ludGVnZXIucHJvdG90eXBlLnRvQnl0ZUFycmF5PWJuVG9CeXRlQXJyYXk7QmlnSW50ZWdlci5wcm90b3R5cGUuZXF1YWxzPWJuRXF1YWxzO0JpZ0ludGVnZXIucHJvdG90eXBlLm1pbj1ibk1pbjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tYXg9Ym5NYXg7QmlnSW50ZWdlci5wcm90b3R5cGUuYW5kPWJuQW5kO0JpZ0ludGVnZXIucHJvdG90eXBlLm9yPWJuT3I7QmlnSW50ZWdlci5wcm90b3R5cGUueG9yPWJuWG9yO0JpZ0ludGVnZXIucHJvdG90eXBlLmFuZE5vdD1ibkFuZE5vdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5ub3Q9Ym5Ob3Q7QmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0PWJuU2hpZnRMZWZ0O0JpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0UmlnaHQ9Ym5TaGlmdFJpZ2h0O0JpZ0ludGVnZXIucHJvdG90eXBlLmdldExvd2VzdFNldEJpdD1ibkdldExvd2VzdFNldEJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXRDb3VudD1ibkJpdENvdW50O0JpZ0ludGVnZXIucHJvdG90eXBlLnRlc3RCaXQ9Ym5UZXN0Qml0O0JpZ0ludGVnZXIucHJvdG90eXBlLnNldEJpdD1iblNldEJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbGVhckJpdD1ibkNsZWFyQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmZsaXBCaXQ9Ym5GbGlwQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmFkZD1ibkFkZDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJ0cmFjdD1iblN1YnRyYWN0O0JpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5PWJuTXVsdGlwbHk7QmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlPWJuRGl2aWRlO0JpZ0ludGVnZXIucHJvdG90eXBlLnJlbWFpbmRlcj1iblJlbWFpbmRlcjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGVBbmRSZW1haW5kZXI9Ym5EaXZpZGVBbmRSZW1haW5kZXI7QmlnSW50ZWdlci5wcm90b3R5cGUubW9kUG93PWJuTW9kUG93O0JpZ0ludGVnZXIucHJvdG90eXBlLm1vZEludmVyc2U9Ym5Nb2RJbnZlcnNlO0JpZ0ludGVnZXIucHJvdG90eXBlLnBvdz1iblBvdztCaWdJbnRlZ2VyLnByb3RvdHlwZS5nY2Q9Ym5HQ0Q7QmlnSW50ZWdlci5wcm90b3R5cGUuaXNQcm9iYWJsZVByaW1lPWJuSXNQcm9iYWJsZVByaW1lO0JpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZT1iblNxdWFyZTtcblx0LyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG5cdCAqL1xuXHRmdW5jdGlvbiBBcmNmb3VyKCl7dGhpcy5pPTA7dGhpcy5qPTA7dGhpcy5TPW5ldyBBcnJheSgpfWZ1bmN0aW9uIEFSQzRpbml0KGQpe3ZhciBjLGEsYjtmb3IoYz0wO2M8MjU2OysrYyl7dGhpcy5TW2NdPWN9YT0wO2ZvcihjPTA7YzwyNTY7KytjKXthPShhK3RoaXMuU1tjXStkW2MlZC5sZW5ndGhdKSYyNTU7Yj10aGlzLlNbY107dGhpcy5TW2NdPXRoaXMuU1thXTt0aGlzLlNbYV09Yn10aGlzLmk9MDt0aGlzLmo9MH1mdW5jdGlvbiBBUkM0bmV4dCgpe3ZhciBhO3RoaXMuaT0odGhpcy5pKzEpJjI1NTt0aGlzLmo9KHRoaXMuait0aGlzLlNbdGhpcy5pXSkmMjU1O2E9dGhpcy5TW3RoaXMuaV07dGhpcy5TW3RoaXMuaV09dGhpcy5TW3RoaXMual07dGhpcy5TW3RoaXMual09YTtyZXR1cm4gdGhpcy5TWyhhK3RoaXMuU1t0aGlzLmldKSYyNTVdfUFyY2ZvdXIucHJvdG90eXBlLmluaXQ9QVJDNGluaXQ7QXJjZm91ci5wcm90b3R5cGUubmV4dD1BUkM0bmV4dDtmdW5jdGlvbiBwcm5nX25ld3N0YXRlKCl7cmV0dXJuIG5ldyBBcmNmb3VyKCl9dmFyIHJuZ19wc2l6ZT0yNTY7XG5cdC8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xuXHQgKi9cblx0dmFyIHJuZ19zdGF0ZTt2YXIgcm5nX3Bvb2w7dmFyIHJuZ19wcHRyO2Z1bmN0aW9uIHJuZ19zZWVkX2ludChhKXtybmdfcG9vbFtybmdfcHB0cisrXV49YSYyNTU7cm5nX3Bvb2xbcm5nX3BwdHIrK11ePShhPj44KSYyNTU7cm5nX3Bvb2xbcm5nX3BwdHIrK11ePShhPj4xNikmMjU1O3JuZ19wb29sW3JuZ19wcHRyKytdXj0oYT4+MjQpJjI1NTtpZihybmdfcHB0cj49cm5nX3BzaXplKXtybmdfcHB0ci09cm5nX3BzaXplfX1mdW5jdGlvbiBybmdfc2VlZF90aW1lKCl7cm5nX3NlZWRfaW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpKX1pZihybmdfcG9vbD09bnVsbCl7cm5nX3Bvb2w9bmV3IEFycmF5KCk7cm5nX3BwdHI9MDt2YXIgdDtpZih3aW5kb3cuY3J5cHRvJiZ3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyl7dmFyIHVhPW5ldyBVaW50OEFycmF5KDMyKTt3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1YSk7Zm9yKHQ9MDt0PDMyOysrdCl7cm5nX3Bvb2xbcm5nX3BwdHIrK109dWFbdF19fWlmKG5hdmlnYXRvci5hcHBOYW1lPT1cIk5ldHNjYXBlXCImJm5hdmlnYXRvci5hcHBWZXJzaW9uPFwiNVwiJiZ3aW5kb3cuY3J5cHRvKXt2YXIgej13aW5kb3cuY3J5cHRvLnJhbmRvbSgzMik7Zm9yKHQ9MDt0PHoubGVuZ3RoOysrdCl7cm5nX3Bvb2xbcm5nX3BwdHIrK109ei5jaGFyQ29kZUF0KHQpJjI1NX19d2hpbGUocm5nX3BwdHI8cm5nX3BzaXplKXt0PU1hdGguZmxvb3IoNjU1MzYqTWF0aC5yYW5kb20oKSk7cm5nX3Bvb2xbcm5nX3BwdHIrK109dD4+Pjg7cm5nX3Bvb2xbcm5nX3BwdHIrK109dCYyNTV9cm5nX3BwdHI9MDtybmdfc2VlZF90aW1lKCl9ZnVuY3Rpb24gcm5nX2dldF9ieXRlKCl7aWYocm5nX3N0YXRlPT1udWxsKXtybmdfc2VlZF90aW1lKCk7cm5nX3N0YXRlPXBybmdfbmV3c3RhdGUoKTtybmdfc3RhdGUuaW5pdChybmdfcG9vbCk7Zm9yKHJuZ19wcHRyPTA7cm5nX3BwdHI8cm5nX3Bvb2wubGVuZ3RoOysrcm5nX3BwdHIpe3JuZ19wb29sW3JuZ19wcHRyXT0wfXJuZ19wcHRyPTB9cmV0dXJuIHJuZ19zdGF0ZS5uZXh0KCl9ZnVuY3Rpb24gcm5nX2dldF9ieXRlcyhiKXt2YXIgYTtmb3IoYT0wO2E8Yi5sZW5ndGg7KythKXtiW2FdPXJuZ19nZXRfYnl0ZSgpfX1mdW5jdGlvbiBTZWN1cmVSYW5kb20oKXt9U2VjdXJlUmFuZG9tLnByb3RvdHlwZS5uZXh0Qnl0ZXM9cm5nX2dldF9ieXRlcztcblx0LyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG5cdCAqL1xuXHRmdW5jdGlvbiBwYXJzZUJpZ0ludChiLGEpe3JldHVybiBuZXcgQmlnSW50ZWdlcihiLGEpfWZ1bmN0aW9uIGxpbmVicmsoYyxkKXt2YXIgYT1cIlwiO3ZhciBiPTA7d2hpbGUoYitkPGMubGVuZ3RoKXthKz1jLnN1YnN0cmluZyhiLGIrZCkrXCJcXG5cIjtiKz1kfXJldHVybiBhK2Muc3Vic3RyaW5nKGIsYy5sZW5ndGgpfWZ1bmN0aW9uIGJ5dGUySGV4KGEpe2lmKGE8MTYpe3JldHVyblwiMFwiK2EudG9TdHJpbmcoMTYpfWVsc2V7cmV0dXJuIGEudG9TdHJpbmcoMTYpfX1mdW5jdGlvbiBwa2NzMXBhZDIoZSxoKXtpZihoPGUubGVuZ3RoKzExKXthbGVydChcIk1lc3NhZ2UgdG9vIGxvbmcgZm9yIFJTQVwiKTtyZXR1cm4gbnVsbH12YXIgZz1uZXcgQXJyYXkoKTt2YXIgZD1lLmxlbmd0aC0xO3doaWxlKGQ+PTAmJmg+MCl7dmFyIGY9ZS5jaGFyQ29kZUF0KGQtLSk7aWYoZjwxMjgpe2dbLS1oXT1mfWVsc2V7aWYoKGY+MTI3KSYmKGY8MjA0OCkpe2dbLS1oXT0oZiY2Myl8MTI4O2dbLS1oXT0oZj4+Nil8MTkyfWVsc2V7Z1stLWhdPShmJjYzKXwxMjg7Z1stLWhdPSgoZj4+NikmNjMpfDEyODtnWy0taF09KGY+PjEyKXwyMjR9fX1nWy0taF09MDt2YXIgYj1uZXcgU2VjdXJlUmFuZG9tKCk7dmFyIGE9bmV3IEFycmF5KCk7d2hpbGUoaD4yKXthWzBdPTA7d2hpbGUoYVswXT09MCl7Yi5uZXh0Qnl0ZXMoYSl9Z1stLWhdPWFbMF19Z1stLWhdPTI7Z1stLWhdPTA7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGcpfWZ1bmN0aW9uIG9hZXBfbWdmMV9hcnIoYyxhLGUpe3ZhciBiPVwiXCIsZD0wO3doaWxlKGIubGVuZ3RoPGEpe2IrPWUoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsYy5jb25jYXQoWyhkJjQyNzgxOTAwODApPj4yNCwoZCYxNjcxMTY4MCk+PjE2LChkJjY1MjgwKT4+OCxkJjI1NV0pKSk7ZCs9MX1yZXR1cm4gYn12YXIgU0hBMV9TSVpFPTIwO2Z1bmN0aW9uIG9hZXBfcGFkKGwsYSxjKXtpZihsLmxlbmd0aCsyKlNIQTFfU0laRSsyPmEpe3Rocm93XCJNZXNzYWdlIHRvbyBsb25nIGZvciBSU0FcIn12YXIgaD1cIlwiLGQ7Zm9yKGQ9MDtkPGEtbC5sZW5ndGgtMipTSEExX1NJWkUtMjtkKz0xKXtoKz1cIlxceDAwXCJ9dmFyIGU9cnN0cl9zaGExKFwiXCIpK2grXCJcXHgwMVwiK2w7dmFyIGY9bmV3IEFycmF5KFNIQTFfU0laRSk7bmV3IFNlY3VyZVJhbmRvbSgpLm5leHRCeXRlcyhmKTt2YXIgZz1vYWVwX21nZjFfYXJyKGYsZS5sZW5ndGgsY3x8cnN0cl9zaGExKTt2YXIgaz1bXTtmb3IoZD0wO2Q8ZS5sZW5ndGg7ZCs9MSl7a1tkXT1lLmNoYXJDb2RlQXQoZCleZy5jaGFyQ29kZUF0KGQpfXZhciBqPW9hZXBfbWdmMV9hcnIoayxmLmxlbmd0aCxyc3RyX3NoYTEpO3ZhciBiPVswXTtmb3IoZD0wO2Q8Zi5sZW5ndGg7ZCs9MSl7YltkKzFdPWZbZF1eai5jaGFyQ29kZUF0KGQpfXJldHVybiBuZXcgQmlnSW50ZWdlcihiLmNvbmNhdChrKSl9ZnVuY3Rpb24gUlNBS2V5KCl7dGhpcy5uPW51bGw7dGhpcy5lPTA7dGhpcy5kPW51bGw7dGhpcy5wPW51bGw7dGhpcy5xPW51bGw7dGhpcy5kbXAxPW51bGw7dGhpcy5kbXExPW51bGw7dGhpcy5jb2VmZj1udWxsfWZ1bmN0aW9uIFJTQVNldFB1YmxpYyhiLGEpe3RoaXMuaXNQdWJsaWM9dHJ1ZTtpZih0eXBlb2YgYiE9PVwic3RyaW5nXCIpe3RoaXMubj1iO3RoaXMuZT1hfWVsc2V7aWYoYiE9bnVsbCYmYSE9bnVsbCYmYi5sZW5ndGg+MCYmYS5sZW5ndGg+MCl7dGhpcy5uPXBhcnNlQmlnSW50KGIsMTYpO3RoaXMuZT1wYXJzZUludChhLDE2KX1lbHNle2FsZXJ0KFwiSW52YWxpZCBSU0EgcHVibGljIGtleVwiKX19fWZ1bmN0aW9uIFJTQURvUHVibGljKGEpe3JldHVybiBhLm1vZFBvd0ludCh0aGlzLmUsdGhpcy5uKX1mdW5jdGlvbiBSU0FFbmNyeXB0KGQpe3ZhciBhPXBrY3MxcGFkMihkLCh0aGlzLm4uYml0TGVuZ3RoKCkrNyk+PjMpO2lmKGE9PW51bGwpe3JldHVybiBudWxsfXZhciBlPXRoaXMuZG9QdWJsaWMoYSk7aWYoZT09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGI9ZS50b1N0cmluZygxNik7aWYoKGIubGVuZ3RoJjEpPT0wKXtyZXR1cm4gYn1lbHNle3JldHVyblwiMFwiK2J9fWZ1bmN0aW9uIFJTQUVuY3J5cHRPQUVQKGUsZCl7dmFyIGE9b2FlcF9wYWQoZSwodGhpcy5uLmJpdExlbmd0aCgpKzcpPj4zLGQpO2lmKGE9PW51bGwpe3JldHVybiBudWxsfXZhciBmPXRoaXMuZG9QdWJsaWMoYSk7aWYoZj09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGI9Zi50b1N0cmluZygxNik7aWYoKGIubGVuZ3RoJjEpPT0wKXtyZXR1cm4gYn1lbHNle3JldHVyblwiMFwiK2J9fVJTQUtleS5wcm90b3R5cGUuZG9QdWJsaWM9UlNBRG9QdWJsaWM7UlNBS2V5LnByb3RvdHlwZS5zZXRQdWJsaWM9UlNBU2V0UHVibGljO1JTQUtleS5wcm90b3R5cGUuZW5jcnlwdD1SU0FFbmNyeXB0O1JTQUtleS5wcm90b3R5cGUuZW5jcnlwdE9BRVA9UlNBRW5jcnlwdE9BRVA7UlNBS2V5LnByb3RvdHlwZS50eXBlPVwiUlNBXCI7XG5cdC8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xuXHQgKi9cblx0ZnVuY3Rpb24gcGtjczF1bnBhZDIoZyxqKXt2YXIgYT1nLnRvQnl0ZUFycmF5KCk7dmFyIGY9MDt3aGlsZShmPGEubGVuZ3RoJiZhW2ZdPT0wKXsrK2Z9aWYoYS5sZW5ndGgtZiE9ai0xfHxhW2ZdIT0yKXtyZXR1cm4gbnVsbH0rK2Y7d2hpbGUoYVtmXSE9MCl7aWYoKytmPj1hLmxlbmd0aCl7cmV0dXJuIG51bGx9fXZhciBlPVwiXCI7d2hpbGUoKytmPGEubGVuZ3RoKXt2YXIgaD1hW2ZdJjI1NTtpZihoPDEyOCl7ZSs9U3RyaW5nLmZyb21DaGFyQ29kZShoKX1lbHNle2lmKChoPjE5MSkmJihoPDIyNCkpe2UrPVN0cmluZy5mcm9tQ2hhckNvZGUoKChoJjMxKTw8Nil8KGFbZisxXSY2MykpOysrZn1lbHNle2UrPVN0cmluZy5mcm9tQ2hhckNvZGUoKChoJjE1KTw8MTIpfCgoYVtmKzFdJjYzKTw8Nil8KGFbZisyXSY2MykpO2YrPTJ9fX1yZXR1cm4gZX1mdW5jdGlvbiBvYWVwX21nZjFfc3RyKGMsYSxlKXt2YXIgYj1cIlwiLGQ9MDt3aGlsZShiLmxlbmd0aDxhKXtiKz1lKGMrU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsWyhkJjQyNzgxOTAwODApPj4yNCwoZCYxNjcxMTY4MCk+PjE2LChkJjY1MjgwKT4+OCxkJjI1NV0pKTtkKz0xfXJldHVybiBifXZhciBTSEExX1NJWkU9MjA7ZnVuY3Rpb24gb2FlcF91bnBhZChsLGIsZSl7bD1sLnRvQnl0ZUFycmF5KCk7dmFyIGY7Zm9yKGY9MDtmPGwubGVuZ3RoO2YrPTEpe2xbZl0mPTI1NX13aGlsZShsLmxlbmd0aDxiKXtsLnVuc2hpZnQoMCl9bD1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxsKTtpZihsLmxlbmd0aDwyKlNIQTFfU0laRSsyKXt0aHJvd1wiQ2lwaGVyIHRvbyBzaG9ydFwifXZhciBjPWwuc3Vic3RyKDEsU0hBMV9TSVpFKTt2YXIgbz1sLnN1YnN0cihTSEExX1NJWkUrMSk7dmFyIG09b2FlcF9tZ2YxX3N0cihvLFNIQTFfU0laRSxlfHxyc3RyX3NoYTEpO3ZhciBoPVtdLGY7Zm9yKGY9MDtmPGMubGVuZ3RoO2YrPTEpe2hbZl09Yy5jaGFyQ29kZUF0KGYpXm0uY2hhckNvZGVBdChmKX12YXIgaj1vYWVwX21nZjFfc3RyKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGgpLGwubGVuZ3RoLVNIQTFfU0laRSxyc3RyX3NoYTEpO3ZhciBnPVtdO2ZvcihmPTA7ZjxvLmxlbmd0aDtmKz0xKXtnW2ZdPW8uY2hhckNvZGVBdChmKV5qLmNoYXJDb2RlQXQoZil9Zz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxnKTtpZihnLnN1YnN0cigwLFNIQTFfU0laRSkhPT1yc3RyX3NoYTEoXCJcIikpe3Rocm93XCJIYXNoIG1pc21hdGNoXCJ9Zz1nLnN1YnN0cihTSEExX1NJWkUpO3ZhciBhPWcuaW5kZXhPZihcIlxceDAxXCIpO3ZhciBrPShhIT0tMSk/Zy5zdWJzdHIoMCxhKS5sYXN0SW5kZXhPZihcIlxceDAwXCIpOi0xO2lmKGsrMSE9YSl7dGhyb3dcIk1hbGZvcm1lZCBkYXRhXCJ9cmV0dXJuIGcuc3Vic3RyKGErMSl9ZnVuY3Rpb24gUlNBU2V0UHJpdmF0ZShjLGEsYil7dGhpcy5pc1ByaXZhdGU9dHJ1ZTtpZih0eXBlb2YgYyE9PVwic3RyaW5nXCIpe3RoaXMubj1jO3RoaXMuZT1hO3RoaXMuZD1ifWVsc2V7aWYoYyE9bnVsbCYmYSE9bnVsbCYmYy5sZW5ndGg+MCYmYS5sZW5ndGg+MCl7dGhpcy5uPXBhcnNlQmlnSW50KGMsMTYpO3RoaXMuZT1wYXJzZUludChhLDE2KTt0aGlzLmQ9cGFyc2VCaWdJbnQoYiwxNil9ZWxzZXthbGVydChcIkludmFsaWQgUlNBIHByaXZhdGUga2V5XCIpfX19ZnVuY3Rpb24gUlNBU2V0UHJpdmF0ZUV4KGcsZCxlLGMsYixhLGgsZil7dGhpcy5pc1ByaXZhdGU9dHJ1ZTtpZihnPT1udWxsKXt0aHJvd1wiUlNBU2V0UHJpdmF0ZUV4IE4gPT0gbnVsbFwifWlmKGQ9PW51bGwpe3Rocm93XCJSU0FTZXRQcml2YXRlRXggRSA9PSBudWxsXCJ9aWYoZy5sZW5ndGg9PTApe3Rocm93XCJSU0FTZXRQcml2YXRlRXggTi5sZW5ndGggPT0gMFwifWlmKGQubGVuZ3RoPT0wKXt0aHJvd1wiUlNBU2V0UHJpdmF0ZUV4IEUubGVuZ3RoID09IDBcIn1pZihnIT1udWxsJiZkIT1udWxsJiZnLmxlbmd0aD4wJiZkLmxlbmd0aD4wKXt0aGlzLm49cGFyc2VCaWdJbnQoZywxNik7dGhpcy5lPXBhcnNlSW50KGQsMTYpO3RoaXMuZD1wYXJzZUJpZ0ludChlLDE2KTt0aGlzLnA9cGFyc2VCaWdJbnQoYywxNik7dGhpcy5xPXBhcnNlQmlnSW50KGIsMTYpO3RoaXMuZG1wMT1wYXJzZUJpZ0ludChhLDE2KTt0aGlzLmRtcTE9cGFyc2VCaWdJbnQoaCwxNik7dGhpcy5jb2VmZj1wYXJzZUJpZ0ludChmLDE2KX1lbHNle2FsZXJ0KFwiSW52YWxpZCBSU0EgcHJpdmF0ZSBrZXkgaW4gUlNBU2V0UHJpdmF0ZUV4XCIpfX1mdW5jdGlvbiBSU0FHZW5lcmF0ZShiLGkpe3ZhciBhPW5ldyBTZWN1cmVSYW5kb20oKTt2YXIgZj1iPj4xO3RoaXMuZT1wYXJzZUludChpLDE2KTt2YXIgYz1uZXcgQmlnSW50ZWdlcihpLDE2KTtmb3IoOzspe2Zvcig7Oyl7dGhpcy5wPW5ldyBCaWdJbnRlZ2VyKGItZiwxLGEpO2lmKHRoaXMucC5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkuZ2NkKGMpLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSk9PTAmJnRoaXMucC5pc1Byb2JhYmxlUHJpbWUoMTApKXticmVha319Zm9yKDs7KXt0aGlzLnE9bmV3IEJpZ0ludGVnZXIoZiwxLGEpO2lmKHRoaXMucS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkuZ2NkKGMpLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSk9PTAmJnRoaXMucS5pc1Byb2JhYmxlUHJpbWUoMTApKXticmVha319aWYodGhpcy5wLmNvbXBhcmVUbyh0aGlzLnEpPD0wKXt2YXIgaD10aGlzLnA7dGhpcy5wPXRoaXMucTt0aGlzLnE9aH12YXIgZz10aGlzLnAuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpO3ZhciBkPXRoaXMucS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7dmFyIGU9Zy5tdWx0aXBseShkKTtpZihlLmdjZChjKS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpPT0wKXt0aGlzLm49dGhpcy5wLm11bHRpcGx5KHRoaXMucSk7dGhpcy5kPWMubW9kSW52ZXJzZShlKTt0aGlzLmRtcDE9dGhpcy5kLm1vZChnKTt0aGlzLmRtcTE9dGhpcy5kLm1vZChkKTt0aGlzLmNvZWZmPXRoaXMucS5tb2RJbnZlcnNlKHRoaXMucCk7YnJlYWt9fX1mdW5jdGlvbiBSU0FEb1ByaXZhdGUoYSl7aWYodGhpcy5wPT1udWxsfHx0aGlzLnE9PW51bGwpe3JldHVybiBhLm1vZFBvdyh0aGlzLmQsdGhpcy5uKX12YXIgYz1hLm1vZCh0aGlzLnApLm1vZFBvdyh0aGlzLmRtcDEsdGhpcy5wKTt2YXIgYj1hLm1vZCh0aGlzLnEpLm1vZFBvdyh0aGlzLmRtcTEsdGhpcy5xKTt3aGlsZShjLmNvbXBhcmVUbyhiKTwwKXtjPWMuYWRkKHRoaXMucCl9cmV0dXJuIGMuc3VidHJhY3QoYikubXVsdGlwbHkodGhpcy5jb2VmZikubW9kKHRoaXMucCkubXVsdGlwbHkodGhpcy5xKS5hZGQoYil9ZnVuY3Rpb24gUlNBRGVjcnlwdChiKXt2YXIgZD1wYXJzZUJpZ0ludChiLDE2KTt2YXIgYT10aGlzLmRvUHJpdmF0ZShkKTtpZihhPT1udWxsKXtyZXR1cm4gbnVsbH1yZXR1cm4gcGtjczF1bnBhZDIoYSwodGhpcy5uLmJpdExlbmd0aCgpKzcpPj4zKX1mdW5jdGlvbiBSU0FEZWNyeXB0T0FFUChkLGIpe3ZhciBlPXBhcnNlQmlnSW50KGQsMTYpO3ZhciBhPXRoaXMuZG9Qcml2YXRlKGUpO2lmKGE9PW51bGwpe3JldHVybiBudWxsfXJldHVybiBvYWVwX3VucGFkKGEsKHRoaXMubi5iaXRMZW5ndGgoKSs3KT4+MyxiKX1SU0FLZXkucHJvdG90eXBlLmRvUHJpdmF0ZT1SU0FEb1ByaXZhdGU7UlNBS2V5LnByb3RvdHlwZS5zZXRQcml2YXRlPVJTQVNldFByaXZhdGU7UlNBS2V5LnByb3RvdHlwZS5zZXRQcml2YXRlRXg9UlNBU2V0UHJpdmF0ZUV4O1JTQUtleS5wcm90b3R5cGUuZ2VuZXJhdGU9UlNBR2VuZXJhdGU7UlNBS2V5LnByb3RvdHlwZS5kZWNyeXB0PVJTQURlY3J5cHQ7UlNBS2V5LnByb3RvdHlwZS5kZWNyeXB0T0FFUD1SU0FEZWNyeXB0T0FFUDtcblx0LyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG5cdCAqL1xuXHRmdW5jdGlvbiBFQ0ZpZWxkRWxlbWVudEZwKGIsYSl7dGhpcy54PWE7dGhpcy5xPWJ9ZnVuY3Rpb24gZmVGcEVxdWFscyhhKXtpZihhPT10aGlzKXtyZXR1cm4gdHJ1ZX1yZXR1cm4odGhpcy5xLmVxdWFscyhhLnEpJiZ0aGlzLnguZXF1YWxzKGEueCkpfWZ1bmN0aW9uIGZlRnBUb0JpZ0ludGVnZXIoKXtyZXR1cm4gdGhpcy54fWZ1bmN0aW9uIGZlRnBOZWdhdGUoKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5uZWdhdGUoKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcEFkZChhKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5hZGQoYS50b0JpZ0ludGVnZXIoKSkubW9kKHRoaXMucSkpfWZ1bmN0aW9uIGZlRnBTdWJ0cmFjdChhKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5zdWJ0cmFjdChhLnRvQmlnSW50ZWdlcigpKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcE11bHRpcGx5KGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54Lm11bHRpcGx5KGEudG9CaWdJbnRlZ2VyKCkpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwU3F1YXJlKCl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLnguc3F1YXJlKCkubW9kKHRoaXMucSkpfWZ1bmN0aW9uIGZlRnBEaXZpZGUoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLngubXVsdGlwbHkoYS50b0JpZ0ludGVnZXIoKS5tb2RJbnZlcnNlKHRoaXMucSkpLm1vZCh0aGlzLnEpKX1FQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5lcXVhbHM9ZmVGcEVxdWFscztFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS50b0JpZ0ludGVnZXI9ZmVGcFRvQmlnSW50ZWdlcjtFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5uZWdhdGU9ZmVGcE5lZ2F0ZTtFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5hZGQ9ZmVGcEFkZDtFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5zdWJ0cmFjdD1mZUZwU3VidHJhY3Q7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUubXVsdGlwbHk9ZmVGcE11bHRpcGx5O0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnNxdWFyZT1mZUZwU3F1YXJlO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmRpdmlkZT1mZUZwRGl2aWRlO2Z1bmN0aW9uIEVDUG9pbnRGcChjLGEsZCxiKXt0aGlzLmN1cnZlPWM7dGhpcy54PWE7dGhpcy55PWQ7aWYoYj09bnVsbCl7dGhpcy56PUJpZ0ludGVnZXIuT05FfWVsc2V7dGhpcy56PWJ9dGhpcy56aW52PW51bGx9ZnVuY3Rpb24gcG9pbnRGcEdldFgoKXtpZih0aGlzLnppbnY9PW51bGwpe3RoaXMuemludj10aGlzLnoubW9kSW52ZXJzZSh0aGlzLmN1cnZlLnEpfXJldHVybiB0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnppbnYpLm1vZCh0aGlzLmN1cnZlLnEpKX1mdW5jdGlvbiBwb2ludEZwR2V0WSgpe2lmKHRoaXMuemludj09bnVsbCl7dGhpcy56aW52PXRoaXMuei5tb2RJbnZlcnNlKHRoaXMuY3VydmUucSl9cmV0dXJuIHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIodGhpcy55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMuemludikubW9kKHRoaXMuY3VydmUucSkpfWZ1bmN0aW9uIHBvaW50RnBFcXVhbHMoYSl7aWYoYT09dGhpcyl7cmV0dXJuIHRydWV9aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiBhLmlzSW5maW5pdHkoKX1pZihhLmlzSW5maW5pdHkoKSl7cmV0dXJuIHRoaXMuaXNJbmZpbml0eSgpfXZhciBjLGI7Yz1hLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkoYS56KSkubW9kKHRoaXMuY3VydmUucSk7aWYoIWMuZXF1YWxzKEJpZ0ludGVnZXIuWkVSTykpe3JldHVybiBmYWxzZX1iPWEueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShhLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtyZXR1cm4gYi5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKX1mdW5jdGlvbiBwb2ludEZwSXNJbmZpbml0eSgpe2lmKCh0aGlzLng9PW51bGwpJiYodGhpcy55PT1udWxsKSl7cmV0dXJuIHRydWV9cmV0dXJuIHRoaXMuei5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKSYmIXRoaXMueS50b0JpZ0ludGVnZXIoKS5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKX1mdW5jdGlvbiBwb2ludEZwTmVnYXRlKCl7cmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcy5jdXJ2ZSx0aGlzLngsdGhpcy55Lm5lZ2F0ZSgpLHRoaXMueil9ZnVuY3Rpb24gcG9pbnRGcEFkZChsKXtpZih0aGlzLmlzSW5maW5pdHkoKSl7cmV0dXJuIGx9aWYobC5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfXZhciBwPWwueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShsLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgbz1sLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkobC56KSkubW9kKHRoaXMuY3VydmUucSk7aWYoQmlnSW50ZWdlci5aRVJPLmVxdWFscyhvKSl7aWYoQmlnSW50ZWdlci5aRVJPLmVxdWFscyhwKSl7cmV0dXJuIHRoaXMudHdpY2UoKX1yZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpfXZhciBqPW5ldyBCaWdJbnRlZ2VyKFwiM1wiKTt2YXIgZT10aGlzLngudG9CaWdJbnRlZ2VyKCk7dmFyIG49dGhpcy55LnRvQmlnSW50ZWdlcigpO3ZhciBjPWwueC50b0JpZ0ludGVnZXIoKTt2YXIgaz1sLnkudG9CaWdJbnRlZ2VyKCk7dmFyIG09by5zcXVhcmUoKTt2YXIgaT1tLm11bHRpcGx5KG8pO3ZhciBkPWUubXVsdGlwbHkobSk7dmFyIGc9cC5zcXVhcmUoKS5tdWx0aXBseSh0aGlzLnopO3ZhciBhPWcuc3VidHJhY3QoZC5zaGlmdExlZnQoMSkpLm11bHRpcGx5KGwueikuc3VidHJhY3QoaSkubXVsdGlwbHkobykubW9kKHRoaXMuY3VydmUucSk7dmFyIGg9ZC5tdWx0aXBseShqKS5tdWx0aXBseShwKS5zdWJ0cmFjdChuLm11bHRpcGx5KGkpKS5zdWJ0cmFjdChnLm11bHRpcGx5KHApKS5tdWx0aXBseShsLnopLmFkZChwLm11bHRpcGx5KGkpKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgZj1pLm11bHRpcGx5KHRoaXMueikubXVsdGlwbHkobC56KS5tb2QodGhpcy5jdXJ2ZS5xKTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoYSksdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihoKSxmKX1mdW5jdGlvbiBwb2ludEZwVHdpY2UoKXtpZih0aGlzLmlzSW5maW5pdHkoKSl7cmV0dXJuIHRoaXN9aWYodGhpcy55LnRvQmlnSW50ZWdlcigpLnNpZ251bSgpPT0wKXtyZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpfXZhciBnPW5ldyBCaWdJbnRlZ2VyKFwiM1wiKTt2YXIgYz10aGlzLngudG9CaWdJbnRlZ2VyKCk7dmFyIGg9dGhpcy55LnRvQmlnSW50ZWdlcigpO3ZhciBlPWgubXVsdGlwbHkodGhpcy56KTt2YXIgaj1lLm11bHRpcGx5KGgpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBpPXRoaXMuY3VydmUuYS50b0JpZ0ludGVnZXIoKTt2YXIgaz1jLnNxdWFyZSgpLm11bHRpcGx5KGcpO2lmKCFCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKGkpKXtrPWsuYWRkKHRoaXMuei5zcXVhcmUoKS5tdWx0aXBseShpKSl9az1rLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBiPWsuc3F1YXJlKCkuc3VidHJhY3QoYy5zaGlmdExlZnQoMykubXVsdGlwbHkoaikpLnNoaWZ0TGVmdCgxKS5tdWx0aXBseShlKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgZj1rLm11bHRpcGx5KGcpLm11bHRpcGx5KGMpLnN1YnRyYWN0KGouc2hpZnRMZWZ0KDEpKS5zaGlmdExlZnQoMikubXVsdGlwbHkoaikuc3VidHJhY3Qoay5zcXVhcmUoKS5tdWx0aXBseShrKSkubW9kKHRoaXMuY3VydmUucSk7dmFyIGQ9ZS5zcXVhcmUoKS5tdWx0aXBseShlKS5zaGlmdExlZnQoMykubW9kKHRoaXMuY3VydmUucSk7cmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcy5jdXJ2ZSx0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKGIpLHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoZiksZCl9ZnVuY3Rpb24gcG9pbnRGcE11bHRpcGx5KGIpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpc31pZihiLnNpZ251bSgpPT0wKXtyZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpfXZhciBnPWI7dmFyIGY9Zy5tdWx0aXBseShuZXcgQmlnSW50ZWdlcihcIjNcIikpO3ZhciBsPXRoaXMubmVnYXRlKCk7dmFyIGQ9dGhpczt2YXIgYztmb3IoYz1mLmJpdExlbmd0aCgpLTI7Yz4wOy0tYyl7ZD1kLnR3aWNlKCk7dmFyIGE9Zi50ZXN0Qml0KGMpO3ZhciBqPWcudGVzdEJpdChjKTtpZihhIT1qKXtkPWQuYWRkKGE/dGhpczpsKX19cmV0dXJuIGR9ZnVuY3Rpb24gcG9pbnRGcE11bHRpcGx5VHdvKGMsYSxiKXt2YXIgZDtpZihjLmJpdExlbmd0aCgpPmIuYml0TGVuZ3RoKCkpe2Q9Yy5iaXRMZW5ndGgoKS0xfWVsc2V7ZD1iLmJpdExlbmd0aCgpLTF9dmFyIGY9dGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpO3ZhciBlPXRoaXMuYWRkKGEpO3doaWxlKGQ+PTApe2Y9Zi50d2ljZSgpO2lmKGMudGVzdEJpdChkKSl7aWYoYi50ZXN0Qml0KGQpKXtmPWYuYWRkKGUpfWVsc2V7Zj1mLmFkZCh0aGlzKX19ZWxzZXtpZihiLnRlc3RCaXQoZCkpe2Y9Zi5hZGQoYSl9fS0tZH1yZXR1cm4gZn1FQ1BvaW50RnAucHJvdG90eXBlLmdldFg9cG9pbnRGcEdldFg7RUNQb2ludEZwLnByb3RvdHlwZS5nZXRZPXBvaW50RnBHZXRZO0VDUG9pbnRGcC5wcm90b3R5cGUuZXF1YWxzPXBvaW50RnBFcXVhbHM7RUNQb2ludEZwLnByb3RvdHlwZS5pc0luZmluaXR5PXBvaW50RnBJc0luZmluaXR5O0VDUG9pbnRGcC5wcm90b3R5cGUubmVnYXRlPXBvaW50RnBOZWdhdGU7RUNQb2ludEZwLnByb3RvdHlwZS5hZGQ9cG9pbnRGcEFkZDtFQ1BvaW50RnAucHJvdG90eXBlLnR3aWNlPXBvaW50RnBUd2ljZTtFQ1BvaW50RnAucHJvdG90eXBlLm11bHRpcGx5PXBvaW50RnBNdWx0aXBseTtFQ1BvaW50RnAucHJvdG90eXBlLm11bHRpcGx5VHdvPXBvaW50RnBNdWx0aXBseVR3bztmdW5jdGlvbiBFQ0N1cnZlRnAoZSxkLGMpe3RoaXMucT1lO3RoaXMuYT10aGlzLmZyb21CaWdJbnRlZ2VyKGQpO3RoaXMuYj10aGlzLmZyb21CaWdJbnRlZ2VyKGMpO3RoaXMuaW5maW5pdHk9bmV3IEVDUG9pbnRGcCh0aGlzLG51bGwsbnVsbCl9ZnVuY3Rpb24gY3VydmVGcEdldFEoKXtyZXR1cm4gdGhpcy5xfWZ1bmN0aW9uIGN1cnZlRnBHZXRBKCl7cmV0dXJuIHRoaXMuYX1mdW5jdGlvbiBjdXJ2ZUZwR2V0Qigpe3JldHVybiB0aGlzLmJ9ZnVuY3Rpb24gY3VydmVGcEVxdWFscyhhKXtpZihhPT10aGlzKXtyZXR1cm4gdHJ1ZX1yZXR1cm4odGhpcy5xLmVxdWFscyhhLnEpJiZ0aGlzLmEuZXF1YWxzKGEuYSkmJnRoaXMuYi5lcXVhbHMoYS5iKSl9ZnVuY3Rpb24gY3VydmVGcEdldEluZmluaXR5KCl7cmV0dXJuIHRoaXMuaW5maW5pdHl9ZnVuY3Rpb24gY3VydmVGcEZyb21CaWdJbnRlZ2VyKGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsYSl9ZnVuY3Rpb24gY3VydmVGcERlY29kZVBvaW50SGV4KGQpe3N3aXRjaChwYXJzZUludChkLnN1YnN0cigwLDIpLDE2KSl7Y2FzZSAwOnJldHVybiB0aGlzLmluZmluaXR5O2Nhc2UgMjpjYXNlIDM6cmV0dXJuIG51bGw7Y2FzZSA0OmNhc2UgNjpjYXNlIDc6dmFyIGE9KGQubGVuZ3RoLTIpLzI7dmFyIGM9ZC5zdWJzdHIoMixhKTt2YXIgYj1kLnN1YnN0cihhKzIsYSk7cmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcyx0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKGMsMTYpKSx0aGlzLmZyb21CaWdJbnRlZ2VyKG5ldyBCaWdJbnRlZ2VyKGIsMTYpKSk7ZGVmYXVsdDpyZXR1cm4gbnVsbH19RUNDdXJ2ZUZwLnByb3RvdHlwZS5nZXRRPWN1cnZlRnBHZXRRO0VDQ3VydmVGcC5wcm90b3R5cGUuZ2V0QT1jdXJ2ZUZwR2V0QTtFQ0N1cnZlRnAucHJvdG90eXBlLmdldEI9Y3VydmVGcEdldEI7RUNDdXJ2ZUZwLnByb3RvdHlwZS5lcXVhbHM9Y3VydmVGcEVxdWFscztFQ0N1cnZlRnAucHJvdG90eXBlLmdldEluZmluaXR5PWN1cnZlRnBHZXRJbmZpbml0eTtFQ0N1cnZlRnAucHJvdG90eXBlLmZyb21CaWdJbnRlZ2VyPWN1cnZlRnBGcm9tQmlnSW50ZWdlcjtFQ0N1cnZlRnAucHJvdG90eXBlLmRlY29kZVBvaW50SGV4PWN1cnZlRnBEZWNvZGVQb2ludEhleDtcblx0LyohIChjKSBTdGVmYW4gVGhvbWFzIHwgaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW5qcy9iaXRjb2luanMtbGliXG5cdCAqL1xuXHRFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5nZXRCeXRlTGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguZmxvb3IoKHRoaXMudG9CaWdJbnRlZ2VyKCkuYml0TGVuZ3RoKCkrNykvOCl9O0VDUG9pbnRGcC5wcm90b3R5cGUuZ2V0RW5jb2RlZD1mdW5jdGlvbihjKXt2YXIgZD1mdW5jdGlvbihoLGYpe3ZhciBnPWgudG9CeXRlQXJyYXlVbnNpZ25lZCgpO2lmKGY8Zy5sZW5ndGgpe2c9Zy5zbGljZShnLmxlbmd0aC1mKX1lbHNle3doaWxlKGY+Zy5sZW5ndGgpe2cudW5zaGlmdCgwKX19cmV0dXJuIGd9O3ZhciBhPXRoaXMuZ2V0WCgpLnRvQmlnSW50ZWdlcigpO3ZhciBlPXRoaXMuZ2V0WSgpLnRvQmlnSW50ZWdlcigpO3ZhciBiPWQoYSwzMik7aWYoYyl7aWYoZS5pc0V2ZW4oKSl7Yi51bnNoaWZ0KDIpfWVsc2V7Yi51bnNoaWZ0KDMpfX1lbHNle2IudW5zaGlmdCg0KTtiPWIuY29uY2F0KGQoZSwzMikpfXJldHVybiBifTtFQ1BvaW50RnAuZGVjb2RlRnJvbT1mdW5jdGlvbihnLGMpe3ZhciBmPWNbMF07dmFyIGU9Yy5sZW5ndGgtMTt2YXIgZD1jLnNsaWNlKDEsMStlLzIpO3ZhciBiPWMuc2xpY2UoMStlLzIsMStlKTtkLnVuc2hpZnQoMCk7Yi51bnNoaWZ0KDApO3ZhciBhPW5ldyBCaWdJbnRlZ2VyKGQpO3ZhciBoPW5ldyBCaWdJbnRlZ2VyKGIpO3JldHVybiBuZXcgRUNQb2ludEZwKGcsZy5mcm9tQmlnSW50ZWdlcihhKSxnLmZyb21CaWdJbnRlZ2VyKGgpKX07RUNQb2ludEZwLmRlY29kZUZyb21IZXg9ZnVuY3Rpb24oZyxjKXt2YXIgZj1jLnN1YnN0cigwLDIpO3ZhciBlPWMubGVuZ3RoLTI7dmFyIGQ9Yy5zdWJzdHIoMixlLzIpO3ZhciBiPWMuc3Vic3RyKDIrZS8yLGUvMik7dmFyIGE9bmV3IEJpZ0ludGVnZXIoZCwxNik7dmFyIGg9bmV3IEJpZ0ludGVnZXIoYiwxNik7cmV0dXJuIG5ldyBFQ1BvaW50RnAoZyxnLmZyb21CaWdJbnRlZ2VyKGEpLGcuZnJvbUJpZ0ludGVnZXIoaCkpfTtFQ1BvaW50RnAucHJvdG90eXBlLmFkZDJEPWZ1bmN0aW9uKGMpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gY31pZihjLmlzSW5maW5pdHkoKSl7cmV0dXJuIHRoaXN9aWYodGhpcy54LmVxdWFscyhjLngpKXtpZih0aGlzLnkuZXF1YWxzKGMueSkpe3JldHVybiB0aGlzLnR3aWNlKCl9cmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKX12YXIgZz1jLnguc3VidHJhY3QodGhpcy54KTt2YXIgZT1jLnkuc3VidHJhY3QodGhpcy55KTt2YXIgYT1lLmRpdmlkZShnKTt2YXIgZD1hLnNxdWFyZSgpLnN1YnRyYWN0KHRoaXMueCkuc3VidHJhY3QoYy54KTt2YXIgZj1hLm11bHRpcGx5KHRoaXMueC5zdWJ0cmFjdChkKSkuc3VidHJhY3QodGhpcy55KTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLGQsZil9O0VDUG9pbnRGcC5wcm90b3R5cGUudHdpY2UyRD1mdW5jdGlvbigpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpc31pZih0aGlzLnkudG9CaWdJbnRlZ2VyKCkuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGI9dGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihCaWdJbnRlZ2VyLnZhbHVlT2YoMikpO3ZhciBlPXRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoQmlnSW50ZWdlci52YWx1ZU9mKDMpKTt2YXIgYT10aGlzLnguc3F1YXJlKCkubXVsdGlwbHkoZSkuYWRkKHRoaXMuY3VydmUuYSkuZGl2aWRlKHRoaXMueS5tdWx0aXBseShiKSk7dmFyIGM9YS5zcXVhcmUoKS5zdWJ0cmFjdCh0aGlzLngubXVsdGlwbHkoYikpO3ZhciBkPWEubXVsdGlwbHkodGhpcy54LnN1YnRyYWN0KGMpKS5zdWJ0cmFjdCh0aGlzLnkpO3JldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsYyxkKX07RUNQb2ludEZwLnByb3RvdHlwZS5tdWx0aXBseTJEPWZ1bmN0aW9uKGIpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpc31pZihiLnNpZ251bSgpPT0wKXtyZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpfXZhciBnPWI7dmFyIGY9Zy5tdWx0aXBseShuZXcgQmlnSW50ZWdlcihcIjNcIikpO3ZhciBsPXRoaXMubmVnYXRlKCk7dmFyIGQ9dGhpczt2YXIgYztmb3IoYz1mLmJpdExlbmd0aCgpLTI7Yz4wOy0tYyl7ZD1kLnR3aWNlKCk7dmFyIGE9Zi50ZXN0Qml0KGMpO3ZhciBqPWcudGVzdEJpdChjKTtpZihhIT1qKXtkPWQuYWRkMkQoYT90aGlzOmwpfX1yZXR1cm4gZH07RUNQb2ludEZwLnByb3RvdHlwZS5pc09uQ3VydmU9ZnVuY3Rpb24oKXt2YXIgZD10aGlzLmdldFgoKS50b0JpZ0ludGVnZXIoKTt2YXIgaT10aGlzLmdldFkoKS50b0JpZ0ludGVnZXIoKTt2YXIgZj10aGlzLmN1cnZlLmdldEEoKS50b0JpZ0ludGVnZXIoKTt2YXIgYz10aGlzLmN1cnZlLmdldEIoKS50b0JpZ0ludGVnZXIoKTt2YXIgaD10aGlzLmN1cnZlLmdldFEoKTt2YXIgZT1pLm11bHRpcGx5KGkpLm1vZChoKTt2YXIgZz1kLm11bHRpcGx5KGQpLm11bHRpcGx5KGQpLmFkZChmLm11bHRpcGx5KGQpKS5hZGQoYykubW9kKGgpO3JldHVybiBlLmVxdWFscyhnKX07RUNQb2ludEZwLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiKFwiK3RoaXMuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLnRvU3RyaW5nKCkrXCIsXCIrdGhpcy5nZXRZKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoKStcIilcIn07RUNQb2ludEZwLnByb3RvdHlwZS52YWxpZGF0ZT1mdW5jdGlvbigpe3ZhciBjPXRoaXMuY3VydmUuZ2V0USgpO2lmKHRoaXMuaXNJbmZpbml0eSgpKXt0aHJvdyBuZXcgRXJyb3IoXCJQb2ludCBpcyBhdCBpbmZpbml0eS5cIil9dmFyIGE9dGhpcy5nZXRYKCkudG9CaWdJbnRlZ2VyKCk7dmFyIGI9dGhpcy5nZXRZKCkudG9CaWdJbnRlZ2VyKCk7aWYoYS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpPDB8fGEuY29tcGFyZVRvKGMuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpKT4wKXt0aHJvdyBuZXcgRXJyb3IoXCJ4IGNvb3JkaW5hdGUgb3V0IG9mIGJvdW5kc1wiKX1pZihiLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSk8MHx8Yi5jb21wYXJlVG8oYy5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkpPjApe3Rocm93IG5ldyBFcnJvcihcInkgY29vcmRpbmF0ZSBvdXQgb2YgYm91bmRzXCIpfWlmKCF0aGlzLmlzT25DdXJ2ZSgpKXt0aHJvdyBuZXcgRXJyb3IoXCJQb2ludCBpcyBub3Qgb24gdGhlIGN1cnZlLlwiKX1pZih0aGlzLm11bHRpcGx5KGMpLmlzSW5maW5pdHkoKSl7dGhyb3cgbmV3IEVycm9yKFwiUG9pbnQgaXMgbm90IGEgc2NhbGFyIG11bHRpcGxlIG9mIEcuXCIpfXJldHVybiB0cnVlfTtcblx0LyohIE1pa2UgU2FtdWVsIChjKSAyMDA5IHwgY29kZS5nb29nbGUuY29tL3AvanNvbi1zYW5zLWV2YWxcblx0ICovXG5cdHZhciBqc29uUGFyc2U9KGZ1bmN0aW9uKCl7dmFyIGU9XCIoPzotP1xcXFxiKD86MHxbMS05XVswLTldKikoPzpcXFxcLlswLTldKyk/KD86W2VFXVsrLV0/WzAtOV0rKT9cXFxcYilcIjt2YXIgaj0nKD86W15cXFxcMC1cXFxceDA4XFxcXHgwYS1cXFxceDFmXCJcXFxcXFxcXF18XFxcXFxcXFwoPzpbXCIvXFxcXFxcXFxiZm5ydF18dVswLTlBLUZhLWZdezR9KSknO3ZhciBpPScoPzpcIicraisnKlwiKSc7dmFyIGQ9bmV3IFJlZ0V4cChcIig/OmZhbHNlfHRydWV8bnVsbHxbXFxcXHtcXFxcfVxcXFxbXFxcXF1dfFwiK2UrXCJ8XCIraStcIilcIixcImdcIik7dmFyIGs9bmV3IFJlZ0V4cChcIlxcXFxcXFxcKD86KFtedV0pfHUoLns0fSkpXCIsXCJnXCIpO3ZhciBnPXsnXCInOidcIicsXCIvXCI6XCIvXCIsXCJcXFxcXCI6XCJcXFxcXCIsYjpcIlxcYlwiLGY6XCJcXGZcIixuOlwiXFxuXCIscjpcIlxcclwiLHQ6XCJcXHRcIn07ZnVuY3Rpb24gaChsLG0sbil7cmV0dXJuIG0/Z1ttXTpTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG4sMTYpKX12YXIgYz1uZXcgU3RyaW5nKFwiXCIpO3ZhciBhPVwiXFxcXFwiO3ZhciBmPXtcIntcIjpPYmplY3QsXCJbXCI6QXJyYXl9O3ZhciBiPU9iamVjdC5oYXNPd25Qcm9wZXJ0eTtyZXR1cm4gZnVuY3Rpb24odSxxKXt2YXIgcD11Lm1hdGNoKGQpO3ZhciB4O3ZhciB2PXBbMF07dmFyIGw9ZmFsc2U7aWYoXCJ7XCI9PT12KXt4PXt9fWVsc2V7aWYoXCJbXCI9PT12KXt4PVtdfWVsc2V7eD1bXTtsPXRydWV9fXZhciB0O3ZhciByPVt4XTtmb3IodmFyIG89MS1sLG09cC5sZW5ndGg7bzxtOysrbyl7dj1wW29dO3ZhciB3O3N3aXRjaCh2LmNoYXJDb2RlQXQoMCkpe2RlZmF1bHQ6dz1yWzBdO3dbdHx8dy5sZW5ndGhdPSsodik7dD12b2lkIDA7YnJlYWs7Y2FzZSAzNDp2PXYuc3Vic3RyaW5nKDEsdi5sZW5ndGgtMSk7aWYodi5pbmRleE9mKGEpIT09LTEpe3Y9di5yZXBsYWNlKGssaCl9dz1yWzBdO2lmKCF0KXtpZih3IGluc3RhbmNlb2YgQXJyYXkpe3Q9dy5sZW5ndGh9ZWxzZXt0PXZ8fGM7YnJlYWt9fXdbdF09djt0PXZvaWQgMDticmVhaztjYXNlIDkxOnc9clswXTtyLnVuc2hpZnQod1t0fHx3Lmxlbmd0aF09W10pO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgOTM6ci5zaGlmdCgpO2JyZWFrO2Nhc2UgMTAyOnc9clswXTt3W3R8fHcubGVuZ3RoXT1mYWxzZTt0PXZvaWQgMDticmVhaztjYXNlIDExMDp3PXJbMF07d1t0fHx3Lmxlbmd0aF09bnVsbDt0PXZvaWQgMDticmVhaztjYXNlIDExNjp3PXJbMF07d1t0fHx3Lmxlbmd0aF09dHJ1ZTt0PXZvaWQgMDticmVhaztjYXNlIDEyMzp3PXJbMF07ci51bnNoaWZ0KHdbdHx8dy5sZW5ndGhdPXt9KTt0PXZvaWQgMDticmVhaztjYXNlIDEyNTpyLnNoaWZ0KCk7YnJlYWt9fWlmKGwpe2lmKHIubGVuZ3RoIT09MSl7dGhyb3cgbmV3IEVycm9yKCl9eD14WzBdfWVsc2V7aWYoci5sZW5ndGgpe3Rocm93IG5ldyBFcnJvcigpfX1pZihxKXt2YXIgcz1mdW5jdGlvbihDLEIpe3ZhciBEPUNbQl07aWYoRCYmdHlwZW9mIEQ9PT1cIm9iamVjdFwiKXt2YXIgbj1udWxsO2Zvcih2YXIgeiBpbiBEKXtpZihiLmNhbGwoRCx6KSYmRCE9PUMpe3ZhciB5PXMoRCx6KTtpZih5IT09dm9pZCAwKXtEW3pdPXl9ZWxzZXtpZighbil7bj1bXX1uLnB1c2goeil9fX1pZihuKXtmb3IodmFyIEE9bi5sZW5ndGg7LS1BPj0wOyl7ZGVsZXRlIERbbltBXV19fX1yZXR1cm4gcS5jYWxsKEMsQixEKX07eD1zKHtcIlwiOnh9LFwiXCIpfXJldHVybiB4fX0pKCk7XG5cdC8qISBhc24xLTEuMC45LmpzIChjKSAyMDEzLTIwMTUgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2Vcblx0ICovXG5cdGlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5hc24xPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xKXtLSlVSLmFzbjE9e319S0pVUi5hc24xLkFTTjFVdGlsPW5ldyBmdW5jdGlvbigpe3RoaXMuaW50ZWdlclRvQnl0ZUhleD1mdW5jdGlvbihhKXt2YXIgYj1hLnRvU3RyaW5nKDE2KTtpZigoYi5sZW5ndGglMik9PTEpe2I9XCIwXCIrYn1yZXR1cm4gYn07dGhpcy5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleD1mdW5jdGlvbihqKXt2YXIgZj1qLnRvU3RyaW5nKDE2KTtpZihmLnN1YnN0cigwLDEpIT1cIi1cIil7aWYoZi5sZW5ndGglMj09MSl7Zj1cIjBcIitmfWVsc2V7aWYoIWYubWF0Y2goL15bMC03XS8pKXtmPVwiMDBcIitmfX19ZWxzZXt2YXIgYT1mLnN1YnN0cigxKTt2YXIgZT1hLmxlbmd0aDtpZihlJTI9PTEpe2UrPTF9ZWxzZXtpZighZi5tYXRjaCgvXlswLTddLykpe2UrPTJ9fXZhciBnPVwiXCI7Zm9yKHZhciBkPTA7ZDxlO2QrKyl7Zys9XCJmXCJ9dmFyIGM9bmV3IEJpZ0ludGVnZXIoZywxNik7dmFyIGI9Yy54b3IoaikuYWRkKEJpZ0ludGVnZXIuT05FKTtmPWIudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14tLyxcIlwiKX1yZXR1cm4gZn07dGhpcy5nZXRQRU1TdHJpbmdGcm9tSGV4PWZ1bmN0aW9uKGEsYil7dmFyIGM9S0pVUi5hc24xO3ZhciBmPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoYSk7dmFyIGQ9Q3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkoZik7dmFyIGU9ZC5yZXBsYWNlKC8oLns2NH0pL2csXCIkMVxcclxcblwiKTtlPWUucmVwbGFjZSgvXFxyXFxuJC8sXCJcIik7cmV0dXJuXCItLS0tLUJFR0lOIFwiK2IrXCItLS0tLVxcclxcblwiK2UrXCJcXHJcXG4tLS0tLUVORCBcIitiK1wiLS0tLS1cXHJcXG5cIn07dGhpcy5uZXdPYmplY3Q9ZnVuY3Rpb24oYil7dmFyIGc9S0pVUi5hc24xO3ZhciBrPU9iamVjdC5rZXlzKGIpO2lmKGsubGVuZ3RoIT0xKXt0aHJvd1wia2V5IG9mIHBhcmFtIHNoYWxsIGJlIG9ubHkgb25lLlwifXZhciBqPWtbMF07aWYoXCI6Ym9vbDppbnQ6Yml0c3RyOm9jdHN0cjpudWxsOm9pZDplbnVtOnV0ZjhzdHI6bnVtc3RyOnBybnN0cjp0ZWxzdHI6aWE1c3RyOnV0Y3RpbWU6Z2VudGltZTpzZXE6c2V0OnRhZzpcIi5pbmRleE9mKFwiOlwiK2orXCI6XCIpPT0tMSl7dGhyb3dcInVuZGVmaW5lZCBrZXk6IFwiK2p9aWYoaj09XCJib29sXCIpe3JldHVybiBuZXcgZy5ERVJCb29sZWFuKGJbal0pfWlmKGo9PVwiaW50XCIpe3JldHVybiBuZXcgZy5ERVJJbnRlZ2VyKGJbal0pfWlmKGo9PVwiYml0c3RyXCIpe3JldHVybiBuZXcgZy5ERVJCaXRTdHJpbmcoYltqXSl9aWYoaj09XCJvY3RzdHJcIil7cmV0dXJuIG5ldyBnLkRFUk9jdGV0U3RyaW5nKGJbal0pfWlmKGo9PVwibnVsbFwiKXtyZXR1cm4gbmV3IGcuREVSTnVsbChiW2pdKX1pZihqPT1cIm9pZFwiKXtyZXR1cm4gbmV3IGcuREVST2JqZWN0SWRlbnRpZmllcihiW2pdKX1pZihqPT1cImVudW1cIil7cmV0dXJuIG5ldyBnLkRFUkVudW1lcmF0ZWQoYltqXSl9aWYoaj09XCJ1dGY4c3RyXCIpe3JldHVybiBuZXcgZy5ERVJVVEY4U3RyaW5nKGJbal0pfWlmKGo9PVwibnVtc3RyXCIpe3JldHVybiBuZXcgZy5ERVJOdW1lcmljU3RyaW5nKGJbal0pfWlmKGo9PVwicHJuc3RyXCIpe3JldHVybiBuZXcgZy5ERVJQcmludGFibGVTdHJpbmcoYltqXSl9aWYoaj09XCJ0ZWxzdHJcIil7cmV0dXJuIG5ldyBnLkRFUlRlbGV0ZXhTdHJpbmcoYltqXSl9aWYoaj09XCJpYTVzdHJcIil7cmV0dXJuIG5ldyBnLkRFUklBNVN0cmluZyhiW2pdKX1pZihqPT1cInV0Y3RpbWVcIil7cmV0dXJuIG5ldyBnLkRFUlVUQ1RpbWUoYltqXSl9aWYoaj09XCJnZW50aW1lXCIpe3JldHVybiBuZXcgZy5ERVJHZW5lcmFsaXplZFRpbWUoYltqXSl9aWYoaj09XCJzZXFcIil7dmFyIG09YltqXTt2YXIgaD1bXTtmb3IodmFyIGU9MDtlPG0ubGVuZ3RoO2UrKyl7dmFyIGw9Zy5BU04xVXRpbC5uZXdPYmplY3QobVtlXSk7aC5wdXNoKGwpfXJldHVybiBuZXcgZy5ERVJTZXF1ZW5jZSh7YXJyYXk6aH0pfWlmKGo9PVwic2V0XCIpe3ZhciBtPWJbal07dmFyIGg9W107Zm9yKHZhciBlPTA7ZTxtLmxlbmd0aDtlKyspe3ZhciBsPWcuQVNOMVV0aWwubmV3T2JqZWN0KG1bZV0pO2gucHVzaChsKX1yZXR1cm4gbmV3IGcuREVSU2V0KHthcnJheTpofSl9aWYoaj09XCJ0YWdcIil7dmFyIGM9YltqXTtpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYyk9PT1cIltvYmplY3QgQXJyYXldXCImJmMubGVuZ3RoPT0zKXt2YXIgZD1nLkFTTjFVdGlsLm5ld09iamVjdChjWzJdKTtyZXR1cm4gbmV3IGcuREVSVGFnZ2VkT2JqZWN0KHt0YWc6Y1swXSxleHBsaWNpdDpjWzFdLG9iajpkfSl9ZWxzZXt2YXIgZj17fTtpZihjLmV4cGxpY2l0IT09dW5kZWZpbmVkKXtmLmV4cGxpY2l0PWMuZXhwbGljaXR9aWYoYy50YWchPT11bmRlZmluZWQpe2YudGFnPWMudGFnfWlmKGMub2JqPT09dW5kZWZpbmVkKXt0aHJvd1wib2JqIHNoYWxsIGJlIHNwZWNpZmllZCBmb3IgJ3RhZycuXCJ9Zi5vYmo9Zy5BU04xVXRpbC5uZXdPYmplY3QoYy5vYmopO3JldHVybiBuZXcgZy5ERVJUYWdnZWRPYmplY3QoZil9fX07dGhpcy5qc29uVG9BU04xSEVYPWZ1bmN0aW9uKGIpe3ZhciBhPXRoaXMubmV3T2JqZWN0KGIpO3JldHVybiBhLmdldEVuY29kZWRIZXgoKX19O0tKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludD1mdW5jdGlvbihhKXt2YXIgaj1cIlwiO3ZhciBrPXBhcnNlSW50KGEuc3Vic3RyKDAsMiksMTYpO3ZhciBkPU1hdGguZmxvb3Ioay80MCk7dmFyIGM9ayU0MDt2YXIgaj1kK1wiLlwiK2M7dmFyIGU9XCJcIjtmb3IodmFyIGY9MjtmPGEubGVuZ3RoO2YrPTIpe3ZhciBnPXBhcnNlSW50KGEuc3Vic3RyKGYsMiksMTYpO3ZhciBoPShcIjAwMDAwMDAwXCIrZy50b1N0cmluZygyKSkuc2xpY2UoLTgpO2U9ZStoLnN1YnN0cigxLDcpO2lmKGguc3Vic3RyKDAsMSk9PVwiMFwiKXt2YXIgYj1uZXcgQmlnSW50ZWdlcihlLDIpO2o9aitcIi5cIitiLnRvU3RyaW5nKDEwKTtlPVwiXCJ9fXJldHVybiBqfTtLSlVSLmFzbjEuQVNOMVV0aWwub2lkSW50VG9IZXg9ZnVuY3Rpb24oZil7dmFyIGU9ZnVuY3Rpb24oYSl7dmFyIGs9YS50b1N0cmluZygxNik7aWYoay5sZW5ndGg9PTEpe2s9XCIwXCIra31yZXR1cm4ga307dmFyIGQ9ZnVuY3Rpb24obyl7dmFyIG49XCJcIjt2YXIgaz1uZXcgQmlnSW50ZWdlcihvLDEwKTt2YXIgYT1rLnRvU3RyaW5nKDIpO3ZhciBsPTctYS5sZW5ndGglNztpZihsPT03KXtsPTB9dmFyIHE9XCJcIjtmb3IodmFyIG09MDttPGw7bSsrKXtxKz1cIjBcIn1hPXErYTtmb3IodmFyIG09MDttPGEubGVuZ3RoLTE7bSs9Nyl7dmFyIHA9YS5zdWJzdHIobSw3KTtpZihtIT1hLmxlbmd0aC03KXtwPVwiMVwiK3B9bis9ZShwYXJzZUludChwLDIpKX1yZXR1cm4gbn07aWYoIWYubWF0Y2goL15bMC05Ll0rJC8pKXt0aHJvd1wibWFsZm9ybWVkIG9pZCBzdHJpbmc6IFwiK2Z9dmFyIGc9XCJcIjt2YXIgYj1mLnNwbGl0KFwiLlwiKTt2YXIgaj1wYXJzZUludChiWzBdKSo0MCtwYXJzZUludChiWzFdKTtnKz1lKGopO2Iuc3BsaWNlKDAsMik7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspe2crPWQoYltjXSl9cmV0dXJuIGd9O0tKVVIuYXNuMS5BU04xT2JqZWN0PWZ1bmN0aW9uKCl7dmFyIGM9dHJ1ZTt2YXIgYj1udWxsO3ZhciBkPVwiMDBcIjt2YXIgZT1cIjAwXCI7dmFyIGE9XCJcIjt0aGlzLmdldExlbmd0aEhleEZyb21WYWx1ZT1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLmhWPT1cInVuZGVmaW5lZFwifHx0aGlzLmhWPT1udWxsKXt0aHJvd1widGhpcy5oViBpcyBudWxsIG9yIHVuZGVmaW5lZC5cIn1pZih0aGlzLmhWLmxlbmd0aCUyPT0xKXt0aHJvd1widmFsdWUgaGV4IG11c3QgYmUgZXZlbiBsZW5ndGg6IG49XCIrYS5sZW5ndGgrXCIsdj1cIit0aGlzLmhWfXZhciBpPXRoaXMuaFYubGVuZ3RoLzI7dmFyIGg9aS50b1N0cmluZygxNik7aWYoaC5sZW5ndGglMj09MSl7aD1cIjBcIitofWlmKGk8MTI4KXtyZXR1cm4gaH1lbHNle3ZhciBnPWgubGVuZ3RoLzI7aWYoZz4xNSl7dGhyb3dcIkFTTi4xIGxlbmd0aCB0b28gbG9uZyB0byByZXByZXNlbnQgYnkgOHg6IG4gPSBcIitpLnRvU3RyaW5nKDE2KX12YXIgZj0xMjgrZztyZXR1cm4gZi50b1N0cmluZygxNikraH19O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuaFRMVj09bnVsbHx8dGhpcy5pc01vZGlmaWVkKXt0aGlzLmhWPXRoaXMuZ2V0RnJlc2hWYWx1ZUhleCgpO3RoaXMuaEw9dGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWUoKTt0aGlzLmhUTFY9dGhpcy5oVCt0aGlzLmhMK3RoaXMuaFY7dGhpcy5pc01vZGlmaWVkPWZhbHNlfXJldHVybiB0aGlzLmhUTFZ9O3RoaXMuZ2V0VmFsdWVIZXg9ZnVuY3Rpb24oKXt0aGlzLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVn07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuXCJcIn19O0tKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZz1mdW5jdGlvbihjKXtLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBiPW51bGw7dmFyIGE9bnVsbDt0aGlzLmdldFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN9O3RoaXMuc2V0U3RyaW5nPWZ1bmN0aW9uKGQpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMucz1kO3RoaXMuaFY9c3RvaGV4KHRoaXMucyl9O3RoaXMuc2V0U3RyaW5nSGV4PWZ1bmN0aW9uKGQpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMucz1udWxsO3RoaXMuaFY9ZH07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9O2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYz09XCJzdHJpbmdcIil7dGhpcy5zZXRTdHJpbmcoYyl9ZWxzZXtpZih0eXBlb2YgYy5zdHIhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0U3RyaW5nKGMuc3RyKX1lbHNle2lmKHR5cGVvZiBjLmhleCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRTdHJpbmdIZXgoYy5oZXgpfX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBiPW51bGw7dmFyIGE9bnVsbDt0aGlzLmxvY2FsRGF0ZVRvVVRDPWZ1bmN0aW9uKGYpe3V0Yz1mLmdldFRpbWUoKSsoZi5nZXRUaW1lem9uZU9mZnNldCgpKjYwMDAwKTt2YXIgZT1uZXcgRGF0ZSh1dGMpO3JldHVybiBlfTt0aGlzLmZvcm1hdERhdGU9ZnVuY3Rpb24obSxvLGUpe3ZhciBnPXRoaXMuemVyb1BhZGRpbmc7dmFyIG49dGhpcy5sb2NhbERhdGVUb1VUQyhtKTt2YXIgcD1TdHJpbmcobi5nZXRGdWxsWWVhcigpKTtpZihvPT1cInV0Y1wiKXtwPXAuc3Vic3RyKDIsMil9dmFyIGw9ZyhTdHJpbmcobi5nZXRNb250aCgpKzEpLDIpO3ZhciBxPWcoU3RyaW5nKG4uZ2V0RGF0ZSgpKSwyKTt2YXIgaD1nKFN0cmluZyhuLmdldEhvdXJzKCkpLDIpO3ZhciBpPWcoU3RyaW5nKG4uZ2V0TWludXRlcygpKSwyKTt2YXIgaj1nKFN0cmluZyhuLmdldFNlY29uZHMoKSksMik7dmFyIHI9cCtsK3EraCtpK2o7aWYoZT09PXRydWUpe3ZhciBmPW4uZ2V0TWlsbGlzZWNvbmRzKCk7aWYoZiE9MCl7dmFyIGs9ZyhTdHJpbmcoZiksMyk7az1rLnJlcGxhY2UoL1swXSskLyxcIlwiKTtyPXIrXCIuXCIra319cmV0dXJuIHIrXCJaXCJ9O3RoaXMuemVyb1BhZGRpbmc9ZnVuY3Rpb24oZSxkKXtpZihlLmxlbmd0aD49ZCl7cmV0dXJuIGV9cmV0dXJuIG5ldyBBcnJheShkLWUubGVuZ3RoKzEpLmpvaW4oXCIwXCIpK2V9O3RoaXMuZ2V0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc307dGhpcy5zZXRTdHJpbmc9ZnVuY3Rpb24oZCl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5zPWQ7dGhpcy5oVj1zdG9oZXgoZCl9O3RoaXMuc2V0QnlEYXRlVmFsdWU9ZnVuY3Rpb24oaCxqLGUsZCxmLGcpe3ZhciBpPW5ldyBEYXRlKERhdGUuVVRDKGgsai0xLGUsZCxmLGcsMCkpO3RoaXMuc2V0QnlEYXRlKGkpfTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQ9ZnVuY3Rpb24oYil7S0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1udWxsO3RoaXMuc2V0QnlBU04xT2JqZWN0QXJyYXk9ZnVuY3Rpb24oYyl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5hc24xQXJyYXk9Y307dGhpcy5hcHBlbmRBU04xT2JqZWN0PWZ1bmN0aW9uKGMpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMuYXNuMUFycmF5LnB1c2goYyl9O3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO2lmKHR5cGVvZiBiIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYi5hcnJheSE9XCJ1bmRlZmluZWRcIil7dGhpcy5hc24xQXJyYXk9Yi5hcnJheX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSQm9vbGVhbj1mdW5jdGlvbigpe0tKVVIuYXNuMS5ERVJCb29sZWFuLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDFcIjt0aGlzLmhUTFY9XCIwMTAxZmZcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkJvb2xlYW4sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJJbnRlZ2VyPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJJbnRlZ2VyLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDJcIjt0aGlzLnNldEJ5QmlnSW50ZWdlcj1mdW5jdGlvbihiKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPUtKVVIuYXNuMS5BU04xVXRpbC5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleChiKX07dGhpcy5zZXRCeUludGVnZXI9ZnVuY3Rpb24oYyl7dmFyIGI9bmV3IEJpZ0ludGVnZXIoU3RyaW5nKGMpLDEwKTt0aGlzLnNldEJ5QmlnSW50ZWdlcihiKX07dGhpcy5zZXRWYWx1ZUhleD1mdW5jdGlvbihiKXt0aGlzLmhWPWJ9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGEuYmlnaW50IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEJ5QmlnSW50ZWdlcihhLmJpZ2ludCl9ZWxzZXtpZih0eXBlb2YgYVtcImludFwiXSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeUludGVnZXIoYVtcImludFwiXSl9ZWxzZXtpZih0eXBlb2YgYT09XCJudW1iZXJcIil7dGhpcy5zZXRCeUludGVnZXIoYSl9ZWxzZXtpZih0eXBlb2YgYS5oZXghPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0VmFsdWVIZXgoYS5oZXgpfX19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJJbnRlZ2VyLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSQml0U3RyaW5nPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJCaXRTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuaFQ9XCIwM1wiO3RoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzPWZ1bmN0aW9uKGIpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMuaFY9Yn07dGhpcy5zZXRVbnVzZWRCaXRzQW5kSGV4VmFsdWU9ZnVuY3Rpb24oYixkKXtpZihiPDB8fDc8Yil7dGhyb3dcInVudXNlZCBiaXRzIHNoYWxsIGJlIGZyb20gMCB0byA3OiB1ID0gXCIrYn12YXIgYz1cIjBcIitiO3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMuaFY9YytkfTt0aGlzLnNldEJ5QmluYXJ5U3RyaW5nPWZ1bmN0aW9uKGUpe2U9ZS5yZXBsYWNlKC8wKyQvLFwiXCIpO3ZhciBmPTgtZS5sZW5ndGglODtpZihmPT04KXtmPTB9Zm9yKHZhciBnPTA7Zzw9ZjtnKyspe2UrPVwiMFwifXZhciBqPVwiXCI7Zm9yKHZhciBnPTA7ZzxlLmxlbmd0aC0xO2crPTgpe3ZhciBkPWUuc3Vic3RyKGcsOCk7dmFyIGM9cGFyc2VJbnQoZCwyKS50b1N0cmluZygxNik7aWYoYy5sZW5ndGg9PTEpe2M9XCIwXCIrY31qKz1jfXRoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMuaFY9XCIwXCIrZitqfTt0aGlzLnNldEJ5Qm9vbGVhbkFycmF5PWZ1bmN0aW9uKGQpe3ZhciBjPVwiXCI7Zm9yKHZhciBiPTA7YjxkLmxlbmd0aDtiKyspe2lmKGRbYl09PXRydWUpe2MrPVwiMVwifWVsc2V7Yys9XCIwXCJ9fXRoaXMuc2V0QnlCaW5hcnlTdHJpbmcoYyl9O3RoaXMubmV3RmFsc2VBcnJheT1mdW5jdGlvbihkKXt2YXIgYj1uZXcgQXJyYXkoZCk7Zm9yKHZhciBjPTA7YzxkO2MrKyl7YltjXT1mYWxzZX1yZXR1cm4gYn07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9O2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYT09XCJzdHJpbmdcIiYmYS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9eWzAtOWEtZl0rJC8pKXt0aGlzLnNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyhhKX1lbHNle2lmKHR5cGVvZiBhLmhleCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRIZXhWYWx1ZUluY2x1ZGluZ1VudXNlZEJpdHMoYS5oZXgpfWVsc2V7aWYodHlwZW9mIGEuYmluIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEJ5QmluYXJ5U3RyaW5nKGEuYmluKX1lbHNle2lmKHR5cGVvZiBhLmFycmF5IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEJ5Qm9vbGVhbkFycmF5KGEuYXJyYXkpfX19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJPY3RldFN0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVST2N0ZXRTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjA0XCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZyxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO0tKVVIuYXNuMS5ERVJOdWxsPWZ1bmN0aW9uKCl7S0pVUi5hc24xLkRFUk51bGwuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuaFQ9XCIwNVwiO3RoaXMuaFRMVj1cIjA1MDBcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUk51bGwsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyPWZ1bmN0aW9uKGMpe3ZhciBiPWZ1bmN0aW9uKGQpe3ZhciBlPWQudG9TdHJpbmcoMTYpO2lmKGUubGVuZ3RoPT0xKXtlPVwiMFwiK2V9cmV0dXJuIGV9O3ZhciBhPWZ1bmN0aW9uKGspe3ZhciBqPVwiXCI7dmFyIGU9bmV3IEJpZ0ludGVnZXIoaywxMCk7dmFyIGQ9ZS50b1N0cmluZygyKTt2YXIgZj03LWQubGVuZ3RoJTc7aWYoZj09Nyl7Zj0wfXZhciBtPVwiXCI7Zm9yKHZhciBnPTA7ZzxmO2crKyl7bSs9XCIwXCJ9ZD1tK2Q7Zm9yKHZhciBnPTA7ZzxkLmxlbmd0aC0xO2crPTcpe3ZhciBsPWQuc3Vic3RyKGcsNyk7aWYoZyE9ZC5sZW5ndGgtNyl7bD1cIjFcIitsfWorPWIocGFyc2VJbnQobCwyKSl9cmV0dXJuIGp9O0tKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDZcIjt0aGlzLnNldFZhbHVlSGV4PWZ1bmN0aW9uKGQpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMucz1udWxsO3RoaXMuaFY9ZH07dGhpcy5zZXRWYWx1ZU9pZFN0cmluZz1mdW5jdGlvbihmKXtpZighZi5tYXRjaCgvXlswLTkuXSskLykpe3Rocm93XCJtYWxmb3JtZWQgb2lkIHN0cmluZzogXCIrZn12YXIgZz1cIlwiO3ZhciBkPWYuc3BsaXQoXCIuXCIpO3ZhciBqPXBhcnNlSW50KGRbMF0pKjQwK3BhcnNlSW50KGRbMV0pO2crPWIoaik7ZC5zcGxpY2UoMCwyKTtmb3IodmFyIGU9MDtlPGQubGVuZ3RoO2UrKyl7Zys9YShkW2VdKX10aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLnM9bnVsbDt0aGlzLmhWPWd9O3RoaXMuc2V0VmFsdWVOYW1lPWZ1bmN0aW9uKGUpe2lmKHR5cGVvZiBLSlVSLmFzbjEueDUwOS5PSUQubmFtZTJvaWRMaXN0W2VdIT1cInVuZGVmaW5lZFwiKXt2YXIgZD1LSlVSLmFzbjEueDUwOS5PSUQubmFtZTJvaWRMaXN0W2VdO3RoaXMuc2V0VmFsdWVPaWRTdHJpbmcoZCl9ZWxzZXt0aHJvd1wiREVST2JqZWN0SWRlbnRpZmllciBvaWROYW1lIHVuZGVmaW5lZDogXCIrZX19O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGM9PVwic3RyaW5nXCImJmMubWF0Y2goL15bMC0yXS5bMC05Ll0rJC8pKXt0aGlzLnNldFZhbHVlT2lkU3RyaW5nKGMpfWVsc2V7aWYoS0pVUi5hc24xLng1MDkuT0lELm5hbWUyb2lkTGlzdFtjXSE9PXVuZGVmaW5lZCl7dGhpcy5zZXRWYWx1ZU9pZFN0cmluZyhLSlVSLmFzbjEueDUwOS5PSUQubmFtZTJvaWRMaXN0W2NdKX1lbHNle2lmKHR5cGVvZiBjLm9pZCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRWYWx1ZU9pZFN0cmluZyhjLm9pZCl9ZWxzZXtpZih0eXBlb2YgYy5oZXghPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0VmFsdWVIZXgoYy5oZXgpfWVsc2V7aWYodHlwZW9mIGMubmFtZSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRWYWx1ZU5hbWUoYy5uYW1lKX19fX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJFbnVtZXJhdGVkPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJFbnVtZXJhdGVkLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMGFcIjt0aGlzLnNldEJ5QmlnSW50ZWdlcj1mdW5jdGlvbihiKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPUtKVVIuYXNuMS5BU04xVXRpbC5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleChiKX07dGhpcy5zZXRCeUludGVnZXI9ZnVuY3Rpb24oYyl7dmFyIGI9bmV3IEJpZ0ludGVnZXIoU3RyaW5nKGMpLDEwKTt0aGlzLnNldEJ5QmlnSW50ZWdlcihiKX07dGhpcy5zZXRWYWx1ZUhleD1mdW5jdGlvbihiKXt0aGlzLmhWPWJ9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGFbXCJpbnRcIl0hPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlJbnRlZ2VyKGFbXCJpbnRcIl0pfWVsc2V7aWYodHlwZW9mIGE9PVwibnVtYmVyXCIpe3RoaXMuc2V0QnlJbnRlZ2VyKGEpfWVsc2V7aWYodHlwZW9mIGEuaGV4IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldFZhbHVlSGV4KGEuaGV4KX19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJFbnVtZXJhdGVkLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSVVRGOFN0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSVVRGOFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMGNcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlVURjhTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSTnVtZXJpY1N0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSTnVtZXJpY1N0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMTJcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUk51bWVyaWNTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJQcmludGFibGVTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjEzXCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJQcmludGFibGVTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSVGVsZXRleFN0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSVGVsZXRleFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMTRcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSSUE1U3RyaW5nPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJJQTVTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjE2XCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJJQTVTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSVVRDVGltZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSVVRDVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMTdcIjt0aGlzLnNldEJ5RGF0ZT1mdW5jdGlvbihiKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmRhdGU9Yjt0aGlzLnM9dGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSxcInV0Y1wiKTt0aGlzLmhWPXN0b2hleCh0aGlzLnMpfTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtpZih0eXBlb2YgdGhpcy5kYXRlPT1cInVuZGVmaW5lZFwiJiZ0eXBlb2YgdGhpcy5zPT1cInVuZGVmaW5lZFwiKXt0aGlzLmRhdGU9bmV3IERhdGUoKTt0aGlzLnM9dGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSxcInV0Y1wiKTt0aGlzLmhWPXN0b2hleCh0aGlzLnMpfXJldHVybiB0aGlzLmhWfTtpZihhIT09dW5kZWZpbmVkKXtpZihhLnN0ciE9PXVuZGVmaW5lZCl7dGhpcy5zZXRTdHJpbmcoYS5zdHIpfWVsc2V7aWYodHlwZW9mIGE9PVwic3RyaW5nXCImJmEubWF0Y2goL15bMC05XXsxMn1aJC8pKXt0aGlzLnNldFN0cmluZyhhKX1lbHNle2lmKGEuaGV4IT09dW5kZWZpbmVkKXt0aGlzLnNldFN0cmluZ0hleChhLmhleCl9ZWxzZXtpZihhLmRhdGUhPT11bmRlZmluZWQpe3RoaXMuc2V0QnlEYXRlKGEuZGF0ZSl9fX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlVUQ1RpbWUsS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSk7S0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxOFwiO3RoaXMud2l0aE1pbGxpcz1mYWxzZTt0aGlzLnNldEJ5RGF0ZT1mdW5jdGlvbihiKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmRhdGU9Yjt0aGlzLnM9dGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSxcImdlblwiLHRoaXMud2l0aE1pbGxpcyk7dGhpcy5oVj1zdG9oZXgodGhpcy5zKX07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5kYXRlPT09dW5kZWZpbmVkJiZ0aGlzLnM9PT11bmRlZmluZWQpe3RoaXMuZGF0ZT1uZXcgRGF0ZSgpO3RoaXMucz10aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLFwiZ2VuXCIsdGhpcy53aXRoTWlsbGlzKTt0aGlzLmhWPXN0b2hleCh0aGlzLnMpfXJldHVybiB0aGlzLmhWfTtpZihhIT09dW5kZWZpbmVkKXtpZihhLnN0ciE9PXVuZGVmaW5lZCl7dGhpcy5zZXRTdHJpbmcoYS5zdHIpfWVsc2V7aWYodHlwZW9mIGE9PVwic3RyaW5nXCImJmEubWF0Y2goL15bMC05XXsxNH1aJC8pKXt0aGlzLnNldFN0cmluZyhhKX1lbHNle2lmKGEuaGV4IT09dW5kZWZpbmVkKXt0aGlzLnNldFN0cmluZ0hleChhLmhleCl9ZWxzZXtpZihhLmRhdGUhPT11bmRlZmluZWQpe3RoaXMuc2V0QnlEYXRlKGEuZGF0ZSl9fX19aWYoYS5taWxsaXM9PT10cnVlKXt0aGlzLndpdGhNaWxsaXM9dHJ1ZX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUpO0tKVVIuYXNuMS5ERVJTZXF1ZW5jZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSU2VxdWVuY2Uuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjMwXCI7dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7dmFyIGM9XCJcIjtmb3IodmFyIGI9MDtiPHRoaXMuYXNuMUFycmF5Lmxlbmd0aDtiKyspe3ZhciBkPXRoaXMuYXNuMUFycmF5W2JdO2MrPWQuZ2V0RW5jb2RlZEhleCgpfXRoaXMuaFY9YztyZXR1cm4gdGhpcy5oVn19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkKTtLSlVSLmFzbjEuREVSU2V0PWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJTZXQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjMxXCI7dGhpcy5zb3J0RmxhZz10cnVlO3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3ZhciBiPW5ldyBBcnJheSgpO2Zvcih2YXIgYz0wO2M8dGhpcy5hc24xQXJyYXkubGVuZ3RoO2MrKyl7dmFyIGQ9dGhpcy5hc24xQXJyYXlbY107Yi5wdXNoKGQuZ2V0RW5jb2RlZEhleCgpKX1pZih0aGlzLnNvcnRGbGFnPT10cnVlKXtiLnNvcnQoKX10aGlzLmhWPWIuam9pbihcIlwiKTtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhLnNvcnRmbGFnIT1cInVuZGVmaW5lZFwiJiZhLnNvcnRmbGFnPT1mYWxzZSl7dGhpcy5zb3J0RmxhZz1mYWxzZX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSU2V0LEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQpO0tKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Q9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cImEwXCI7dGhpcy5oVj1cIlwiO3RoaXMuaXNFeHBsaWNpdD10cnVlO3RoaXMuYXNuMU9iamVjdD1udWxsO3RoaXMuc2V0QVNOMU9iamVjdD1mdW5jdGlvbihiLGMsZCl7dGhpcy5oVD1jO3RoaXMuaXNFeHBsaWNpdD1iO3RoaXMuYXNuMU9iamVjdD1kO2lmKHRoaXMuaXNFeHBsaWNpdCl7dGhpcy5oVj10aGlzLmFzbjFPYmplY3QuZ2V0RW5jb2RlZEhleCgpO3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlfWVsc2V7dGhpcy5oVj1udWxsO3RoaXMuaFRMVj1kLmdldEVuY29kZWRIZXgoKTt0aGlzLmhUTFY9dGhpcy5oVExWLnJlcGxhY2UoL14uLi8sYyk7dGhpcy5pc01vZGlmaWVkPWZhbHNlfX07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9O2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYS50YWchPVwidW5kZWZpbmVkXCIpe3RoaXMuaFQ9YS50YWd9aWYodHlwZW9mIGEuZXhwbGljaXQhPVwidW5kZWZpbmVkXCIpe3RoaXMuaXNFeHBsaWNpdD1hLmV4cGxpY2l0fWlmKHR5cGVvZiBhLm9iaiE9XCJ1bmRlZmluZWRcIil7dGhpcy5hc24xT2JqZWN0PWEub2JqO3RoaXMuc2V0QVNOMU9iamVjdCh0aGlzLmlzRXhwbGljaXQsdGhpcy5oVCx0aGlzLmFzbjFPYmplY3QpfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3QsS0pVUi5hc24xLkFTTjFPYmplY3QpO1xuXHQvKiEgYXNuMWhleC0xLjEuNi5qcyAoYykgMjAxMi0yMDE1IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG5cdCAqL1xuXHR2YXIgQVNOMUhFWD1uZXcgZnVuY3Rpb24oKXt0aGlzLmdldEJ5dGVMZW5ndGhPZkxfQXRPYmo9ZnVuY3Rpb24oYixjKXtpZihiLnN1YnN0cmluZyhjKzIsYyszKSE9XCI4XCIpe3JldHVybiAxfXZhciBhPXBhcnNlSW50KGIuc3Vic3RyaW5nKGMrMyxjKzQpKTtpZihhPT0wKXtyZXR1cm4gLTF9aWYoMDxhJiZhPDEwKXtyZXR1cm4gYSsxfXJldHVybiAtMn07dGhpcy5nZXRIZXhPZkxfQXRPYmo9ZnVuY3Rpb24oYixjKXt2YXIgYT10aGlzLmdldEJ5dGVMZW5ndGhPZkxfQXRPYmooYixjKTtpZihhPDEpe3JldHVyblwiXCJ9cmV0dXJuIGIuc3Vic3RyaW5nKGMrMixjKzIrYSoyKX07dGhpcy5nZXRJbnRPZkxfQXRPYmo9ZnVuY3Rpb24oYyxkKXt2YXIgYj10aGlzLmdldEhleE9mTF9BdE9iaihjLGQpO2lmKGI9PVwiXCIpe3JldHVybiAtMX12YXIgYTtpZihwYXJzZUludChiLnN1YnN0cmluZygwLDEpKTw4KXthPW5ldyBCaWdJbnRlZ2VyKGIsMTYpfWVsc2V7YT1uZXcgQmlnSW50ZWdlcihiLnN1YnN0cmluZygyKSwxNil9cmV0dXJuIGEuaW50VmFsdWUoKX07dGhpcy5nZXRTdGFydFBvc09mVl9BdE9iaj1mdW5jdGlvbihiLGMpe3ZhciBhPXRoaXMuZ2V0Qnl0ZUxlbmd0aE9mTF9BdE9iaihiLGMpO2lmKGE8MCl7cmV0dXJuIGF9cmV0dXJuIGMrKGErMSkqMn07dGhpcy5nZXRIZXhPZlZfQXRPYmo9ZnVuY3Rpb24oYyxkKXt2YXIgYj10aGlzLmdldFN0YXJ0UG9zT2ZWX0F0T2JqKGMsZCk7dmFyIGE9dGhpcy5nZXRJbnRPZkxfQXRPYmooYyxkKTtyZXR1cm4gYy5zdWJzdHJpbmcoYixiK2EqMil9O3RoaXMuZ2V0SGV4T2ZUTFZfQXRPYmo9ZnVuY3Rpb24oYyxlKXt2YXIgYj1jLnN1YnN0cihlLDIpO3ZhciBkPXRoaXMuZ2V0SGV4T2ZMX0F0T2JqKGMsZSk7dmFyIGE9dGhpcy5nZXRIZXhPZlZfQXRPYmooYyxlKTtyZXR1cm4gYitkK2F9O3RoaXMuZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaj1mdW5jdGlvbihjLGQpe3ZhciBiPXRoaXMuZ2V0U3RhcnRQb3NPZlZfQXRPYmooYyxkKTt2YXIgYT10aGlzLmdldEludE9mTF9BdE9iaihjLGQpO3JldHVybiBiK2EqMn07dGhpcy5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmo9ZnVuY3Rpb24oZixqKXt2YXIgYz1uZXcgQXJyYXkoKTt2YXIgaT10aGlzLmdldFN0YXJ0UG9zT2ZWX0F0T2JqKGYsaik7Yy5wdXNoKGkpO3ZhciBiPXRoaXMuZ2V0SW50T2ZMX0F0T2JqKGYsaik7dmFyIGc9aTt2YXIgZD0wO3doaWxlKDEpe3ZhciBlPXRoaXMuZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihmLGcpO2lmKGU9PW51bGx8fChlLWk+PShiKjIpKSl7YnJlYWt9aWYoZD49MjAwKXticmVha31jLnB1c2goZSk7Zz1lO2QrK31yZXR1cm4gY307dGhpcy5nZXROdGhDaGlsZEluZGV4X0F0T2JqPWZ1bmN0aW9uKGQsYixlKXt2YXIgYz10aGlzLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihkLGIpO3JldHVybiBjW2VdfTt0aGlzLmdldERlY2VuZGFudEluZGV4QnlOdGhMaXN0PWZ1bmN0aW9uKGUsZCxjKXtpZihjLmxlbmd0aD09MCl7cmV0dXJuIGR9dmFyIGY9Yy5zaGlmdCgpO3ZhciBiPXRoaXMuZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGUsZCk7cmV0dXJuIHRoaXMuZ2V0RGVjZW5kYW50SW5kZXhCeU50aExpc3QoZSxiW2ZdLGMpfTt0aGlzLmdldERlY2VuZGFudEhleFRMVkJ5TnRoTGlzdD1mdW5jdGlvbihkLGMsYil7dmFyIGE9dGhpcy5nZXREZWNlbmRhbnRJbmRleEJ5TnRoTGlzdChkLGMsYik7cmV0dXJuIHRoaXMuZ2V0SGV4T2ZUTFZfQXRPYmooZCxhKX07dGhpcy5nZXREZWNlbmRhbnRIZXhWQnlOdGhMaXN0PWZ1bmN0aW9uKGQsYyxiKXt2YXIgYT10aGlzLmdldERlY2VuZGFudEluZGV4QnlOdGhMaXN0KGQsYyxiKTtyZXR1cm4gdGhpcy5nZXRIZXhPZlZfQXRPYmooZCxhKX19O0FTTjFIRVguZ2V0VmJ5TGlzdD1mdW5jdGlvbihkLGMsYixlKXt2YXIgYT10aGlzLmdldERlY2VuZGFudEluZGV4QnlOdGhMaXN0KGQsYyxiKTtpZihhPT09dW5kZWZpbmVkKXt0aHJvd1wiY2FuJ3QgZmluZCBudGhMaXN0IG9iamVjdFwifWlmKGUhPT11bmRlZmluZWQpe2lmKGQuc3Vic3RyKGEsMikhPWUpe3Rocm93XCJjaGVja2luZyB0YWcgZG9lc24ndCBtYXRjaDogXCIrZC5zdWJzdHIoYSwyKStcIiE9XCIrZX19cmV0dXJuIHRoaXMuZ2V0SGV4T2ZWX0F0T2JqKGQsYSl9O0FTTjFIRVguaGV4dG9vaWRzdHI9ZnVuY3Rpb24oZSl7dmFyIGg9ZnVuY3Rpb24oYixhKXtpZihiLmxlbmd0aD49YSl7cmV0dXJuIGJ9cmV0dXJuIG5ldyBBcnJheShhLWIubGVuZ3RoKzEpLmpvaW4oXCIwXCIpK2J9O3ZhciBsPVtdO3ZhciBvPWUuc3Vic3RyKDAsMik7dmFyIGY9cGFyc2VJbnQobywxNik7bFswXT1uZXcgU3RyaW5nKE1hdGguZmxvb3IoZi80MCkpO2xbMV09bmV3IFN0cmluZyhmJTQwKTt2YXIgbT1lLnN1YnN0cigyKTt2YXIgaz1bXTtmb3IodmFyIGc9MDtnPG0ubGVuZ3RoLzI7ZysrKXtrLnB1c2gocGFyc2VJbnQobS5zdWJzdHIoZyoyLDIpLDE2KSl9dmFyIGo9W107dmFyIGQ9XCJcIjtmb3IodmFyIGc9MDtnPGsubGVuZ3RoO2crKyl7aWYoa1tnXSYxMjgpe2Q9ZCtoKChrW2ddJjEyNykudG9TdHJpbmcoMiksNyl9ZWxzZXtkPWQraCgoa1tnXSYxMjcpLnRvU3RyaW5nKDIpLDcpO2oucHVzaChuZXcgU3RyaW5nKHBhcnNlSW50KGQsMikpKTtkPVwiXCJ9fXZhciBuPWwuam9pbihcIi5cIik7aWYoai5sZW5ndGg+MCl7bj1uK1wiLlwiK2ouam9pbihcIi5cIil9cmV0dXJuIG59O0FTTjFIRVguZHVtcD1mdW5jdGlvbihlLGMsayxnKXt2YXIgbz1mdW5jdGlvbih3LGkpe2lmKHcubGVuZ3RoPD1pKjIpe3JldHVybiB3fWVsc2V7dmFyIHY9dy5zdWJzdHIoMCxpKStcIi4uKHRvdGFsIFwiK3cubGVuZ3RoLzIrXCJieXRlcykuLlwiK3cuc3Vic3RyKHcubGVuZ3RoLWksaSk7cmV0dXJuIHZ9fTtpZihjPT09dW5kZWZpbmVkKXtjPXtvbW1pdF9sb25nX29jdGV0OjMyfX1pZihrPT09dW5kZWZpbmVkKXtrPTB9aWYoZz09PXVuZGVmaW5lZCl7Zz1cIlwifXZhciByPWMub21taXRfbG9uZ19vY3RldDtpZihlLnN1YnN0cihrLDIpPT1cIjAxXCIpe3ZhciBoPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGUsayk7aWYoaD09XCIwMFwiKXtyZXR1cm4gZytcIkJPT0xFQU4gRkFMU0VcXG5cIn1lbHNle3JldHVybiBnK1wiQk9PTEVBTiBUUlVFXFxuXCJ9fWlmKGUuc3Vic3RyKGssMik9PVwiMDJcIil7dmFyIGg9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKTtyZXR1cm4gZytcIklOVEVHRVIgXCIrbyhoLHIpK1wiXFxuXCJ9aWYoZS5zdWJzdHIoaywyKT09XCIwM1wiKXt2YXIgaD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihlLGspO3JldHVybiBnK1wiQklUU1RSSU5HIFwiK28oaCxyKStcIlxcblwifWlmKGUuc3Vic3RyKGssMik9PVwiMDRcIil7dmFyIGg9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKTtpZihBU04xSEVYLmlzQVNOMUhFWChoKSl7dmFyIGo9ZytcIk9DVEVUU1RSSU5HLCBlbmNhcHN1bGF0ZXNcXG5cIjtqPWorQVNOMUhFWC5kdW1wKGgsYywwLGcrXCIgIFwiKTtyZXR1cm4gan1lbHNle3JldHVybiBnK1wiT0NURVRTVFJJTkcgXCIrbyhoLHIpK1wiXFxuXCJ9fWlmKGUuc3Vic3RyKGssMik9PVwiMDVcIil7cmV0dXJuIGcrXCJOVUxMXFxuXCJ9aWYoZS5zdWJzdHIoaywyKT09XCIwNlwiKXt2YXIgbD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihlLGspO3ZhciBhPUtKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludChsKTt2YXIgbj1LSlVSLmFzbjEueDUwOS5PSUQub2lkMm5hbWUoYSk7dmFyIGI9YS5yZXBsYWNlKC9cXC4vZyxcIiBcIik7aWYobiE9XCJcIil7cmV0dXJuIGcrXCJPYmplY3RJZGVudGlmaWVyIFwiK24rXCIgKFwiK2IrXCIpXFxuXCJ9ZWxzZXtyZXR1cm4gZytcIk9iamVjdElkZW50aWZpZXIgKFwiK2IrXCIpXFxuXCJ9fWlmKGUuc3Vic3RyKGssMik9PVwiMGNcIil7cmV0dXJuIGcrXCJVVEY4U3RyaW5nICdcIitoZXh0b3V0ZjgoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKSkrXCInXFxuXCJ9aWYoZS5zdWJzdHIoaywyKT09XCIxM1wiKXtyZXR1cm4gZytcIlByaW50YWJsZVN0cmluZyAnXCIraGV4dG91dGY4KEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGUsaykpK1wiJ1xcblwifWlmKGUuc3Vic3RyKGssMik9PVwiMTRcIil7cmV0dXJuIGcrXCJUZWxldGV4U3RyaW5nICdcIitoZXh0b3V0ZjgoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKSkrXCInXFxuXCJ9aWYoZS5zdWJzdHIoaywyKT09XCIxNlwiKXtyZXR1cm4gZytcIklBNVN0cmluZyAnXCIraGV4dG91dGY4KEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGUsaykpK1wiJ1xcblwifWlmKGUuc3Vic3RyKGssMik9PVwiMTdcIil7cmV0dXJuIGcrXCJVVENUaW1lIFwiK2hleHRvdXRmOChBU04xSEVYLmdldEhleE9mVl9BdE9iaihlLGspKStcIlxcblwifWlmKGUuc3Vic3RyKGssMik9PVwiMThcIil7cmV0dXJuIGcrXCJHZW5lcmFsaXplZFRpbWUgXCIraGV4dG91dGY4KEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGUsaykpK1wiXFxuXCJ9aWYoZS5zdWJzdHIoaywyKT09XCIzMFwiKXtpZihlLnN1YnN0cihrLDQpPT1cIjMwMDBcIil7cmV0dXJuIGcrXCJTRVFVRU5DRSB7fVxcblwifXZhciBqPWcrXCJTRVFVRU5DRVxcblwiO3ZhciBkPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGUsayk7dmFyIGY9YztpZigoZC5sZW5ndGg9PTJ8fGQubGVuZ3RoPT0zKSYmZS5zdWJzdHIoZFswXSwyKT09XCIwNlwiJiZlLnN1YnN0cihkW2QubGVuZ3RoLTFdLDIpPT1cIjA0XCIpe3ZhciB0PUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGUsZFswXSk7dmFyIGE9S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KHQpO3ZhciBuPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQybmFtZShhKTt2YXIgcD1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKTtwLng1MDlFeHROYW1lPW47Zj1wfWZvcih2YXIgcT0wO3E8ZC5sZW5ndGg7cSsrKXtqPWorQVNOMUhFWC5kdW1wKGUsZixkW3FdLGcrXCIgIFwiKX1yZXR1cm4gan1pZihlLnN1YnN0cihrLDIpPT1cIjMxXCIpe3ZhciBqPWcrXCJTRVRcXG5cIjt2YXIgZD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihlLGspO2Zvcih2YXIgcT0wO3E8ZC5sZW5ndGg7cSsrKXtqPWorQVNOMUhFWC5kdW1wKGUsYyxkW3FdLGcrXCIgIFwiKX1yZXR1cm4gan12YXIgdT1wYXJzZUludChlLnN1YnN0cihrLDIpLDE2KTtpZigodSYxMjgpIT0wKXt2YXIgbT11JjMxO2lmKCh1JjMyKSE9MCl7dmFyIGo9ZytcIltcIittK1wiXVxcblwiO3ZhciBkPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGUsayk7Zm9yKHZhciBxPTA7cTxkLmxlbmd0aDtxKyspe2o9aitBU04xSEVYLmR1bXAoZSxjLGRbcV0sZytcIiAgXCIpfXJldHVybiBqfWVsc2V7dmFyIGg9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKTtpZihoLnN1YnN0cigwLDgpPT1cIjY4NzQ3NDcwXCIpe2g9aGV4dG91dGY4KGgpfWlmKGMueDUwOUV4dE5hbWU9PT1cInN1YmplY3RBbHROYW1lXCImJm09PTIpe2g9aGV4dG91dGY4KGgpfXZhciBqPWcrXCJbXCIrbStcIl0gXCIraCtcIlxcblwiO3JldHVybiBqfX1yZXR1cm4gZytcIlVOS05PV04oXCIrZS5zdWJzdHIoaywyKStcIikgXCIrQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxrKStcIlxcblwifTtBU04xSEVYLmlzQVNOMUhFWD1mdW5jdGlvbihkKXtpZihkLmxlbmd0aCUyPT0xKXtyZXR1cm4gZmFsc2V9dmFyIGM9QVNOMUhFWC5nZXRJbnRPZkxfQXRPYmooZCwwKTt2YXIgYj1kLnN1YnN0cigwLDIpO3ZhciBlPUFTTjFIRVguZ2V0SGV4T2ZMX0F0T2JqKGQsMCk7dmFyIGE9ZC5sZW5ndGgtYi5sZW5ndGgtZS5sZW5ndGg7aWYoYT09YyoyKXtyZXR1cm4gdHJ1ZX1yZXR1cm4gZmFsc2V9O1xuXHQvKiEgYXNuMXg1MDktMS4wLjE0LmpzIChjKSAyMDEzLTIwMTUgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2Vcblx0ICovXG5cdGlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5hc24xPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xKXtLSlVSLmFzbjE9e319aWYodHlwZW9mIEtKVVIuYXNuMS54NTA5PT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xLng1MDkpe0tKVVIuYXNuMS54NTA5PXt9fUtKVVIuYXNuMS54NTA5LkNlcnRpZmljYXRlPWZ1bmN0aW9uKGcpe0tKVVIuYXNuMS54NTA5LkNlcnRpZmljYXRlLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYj1udWxsO3ZhciBkPW51bGw7dmFyIGY9bnVsbDt2YXIgYz1udWxsO3ZhciBhPW51bGw7dmFyIGU9bnVsbDt0aGlzLnNldFJzYVBydktleUJ5UEVNYW5kUGFzcz1mdW5jdGlvbihpLGspe3ZhciBoPVBLQ1M1UEtFWS5nZXREZWNyeXB0ZWRLZXlIZXgoaSxrKTt2YXIgaj1uZXcgUlNBS2V5KCk7ai5yZWFkUHJpdmF0ZUtleUZyb21BU04xSGV4U3RyaW5nKGgpO3RoaXMucHJ2S2V5PWp9O3RoaXMuc2lnbj1mdW5jdGlvbigpe3RoaXMuYXNuMVNpZ25hdHVyZUFsZz10aGlzLmFzbjFUQlNDZXJ0LmFzbjFTaWduYXR1cmVBbGc7c2lnPW5ldyBLSlVSLmNyeXB0by5TaWduYXR1cmUoe2FsZzpcIlNIQTF3aXRoUlNBXCJ9KTtzaWcuaW5pdCh0aGlzLnBydktleSk7c2lnLnVwZGF0ZUhleCh0aGlzLmFzbjFUQlNDZXJ0LmdldEVuY29kZWRIZXgoKSk7dGhpcy5oZXhTaWc9c2lnLnNpZ24oKTt0aGlzLmFzbjFTaWc9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2hleDpcIjAwXCIrdGhpcy5oZXhTaWd9KTt2YXIgaD1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbdGhpcy5hc24xVEJTQ2VydCx0aGlzLmFzbjFTaWduYXR1cmVBbGcsdGhpcy5hc24xU2lnXX0pO3RoaXMuaFRMVj1oLmdldEVuY29kZWRIZXgoKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2V9O3RoaXMuc2V0U2lnbmF0dXJlSGV4PWZ1bmN0aW9uKGgpe3RoaXMuYXNuMVNpZ25hdHVyZUFsZz10aGlzLmFzbjFUQlNDZXJ0LmFzbjFTaWduYXR1cmVBbGc7dGhpcy5oZXhTaWc9aDt0aGlzLmFzbjFTaWc9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2hleDpcIjAwXCIrdGhpcy5oZXhTaWd9KTt2YXIgaT1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbdGhpcy5hc24xVEJTQ2VydCx0aGlzLmFzbjFTaWduYXR1cmVBbGcsdGhpcy5hc24xU2lnXX0pO3RoaXMuaFRMVj1pLmdldEVuY29kZWRIZXgoKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2V9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuaXNNb2RpZmllZD09ZmFsc2UmJnRoaXMuaFRMViE9bnVsbCl7cmV0dXJuIHRoaXMuaFRMVn10aHJvd1wibm90IHNpZ25lZCB5ZXRcIn07dGhpcy5nZXRQRU1TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgaj10aGlzLmdldEVuY29kZWRIZXgoKTt2YXIgaD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGopO3ZhciBpPUNyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KGgpO3ZhciBrPWkucmVwbGFjZSgvKC57NjR9KS9nLFwiJDFcXHJcXG5cIik7cmV0dXJuXCItLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS1cXHJcXG5cIitrK1wiXFxyXFxuLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLVxcclxcblwifTtpZih0eXBlb2YgZyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGcudGJzY2VydG9iaiE9XCJ1bmRlZmluZWRcIil7dGhpcy5hc24xVEJTQ2VydD1nLnRic2NlcnRvYmp9aWYodHlwZW9mIGcucHJ2a2V5b2JqIT1cInVuZGVmaW5lZFwiKXt0aGlzLnBydktleT1nLnBydmtleW9ian1lbHNle2lmKHR5cGVvZiBnLnJzYXBydmtleSE9XCJ1bmRlZmluZWRcIil7dGhpcy5wcnZLZXk9Zy5yc2FwcnZrZXl9ZWxzZXtpZigodHlwZW9mIGcucnNhcHJ2cGVtIT1cInVuZGVmaW5lZFwiKSYmKHR5cGVvZiBnLnJzYXBydnBhcyE9XCJ1bmRlZmluZWRcIikpe3RoaXMuc2V0UnNhUHJ2S2V5QnlQRU1hbmRQYXNzKGcucnNhcHJ2cGVtLGcucnNhcHJ2cGFzKX19fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkNlcnRpZmljYXRlLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5UQlNDZXJ0aWZpY2F0ZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEueDUwOS5UQlNDZXJ0aWZpY2F0ZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5faW5pdGlhbGl6ZT1mdW5jdGlvbigpe3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO3RoaXMuYXNuMVZlcnNpb249bmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe29iajpuZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe1wiaW50XCI6Mn0pfSk7dGhpcy5hc24xU2VyaWFsTnVtYmVyPW51bGw7dGhpcy5hc24xU2lnbmF0dXJlQWxnPW51bGw7dGhpcy5hc24xSXNzdWVyPW51bGw7dGhpcy5hc24xTm90QmVmb3JlPW51bGw7dGhpcy5hc24xTm90QWZ0ZXI9bnVsbDt0aGlzLmFzbjFTdWJqZWN0PW51bGw7dGhpcy5hc24xU3VialBLZXk9bnVsbDt0aGlzLmV4dGVuc2lvbnNBcnJheT1uZXcgQXJyYXkoKX07dGhpcy5zZXRTZXJpYWxOdW1iZXJCeVBhcmFtPWZ1bmN0aW9uKGIpe3RoaXMuYXNuMVNlcmlhbE51bWJlcj1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoYil9O3RoaXMuc2V0U2lnbmF0dXJlQWxnQnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFTaWduYXR1cmVBbGc9bmV3IEtKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIoYil9O3RoaXMuc2V0SXNzdWVyQnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFJc3N1ZXI9bmV3IEtKVVIuYXNuMS54NTA5Llg1MDBOYW1lKGIpfTt0aGlzLnNldE5vdEJlZm9yZUJ5UGFyYW09ZnVuY3Rpb24oYil7dGhpcy5hc24xTm90QmVmb3JlPW5ldyBLSlVSLmFzbjEueDUwOS5UaW1lKGIpfTt0aGlzLnNldE5vdEFmdGVyQnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFOb3RBZnRlcj1uZXcgS0pVUi5hc24xLng1MDkuVGltZShiKX07dGhpcy5zZXRTdWJqZWN0QnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFTdWJqZWN0PW5ldyBLSlVSLmFzbjEueDUwOS5YNTAwTmFtZShiKX07dGhpcy5zZXRTdWJqZWN0UHVibGljS2V5QnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFTdWJqUEtleT1uZXcgS0pVUi5hc24xLng1MDkuU3ViamVjdFB1YmxpY0tleUluZm8oYil9O3RoaXMuc2V0U3ViamVjdFB1YmxpY0tleUJ5R2V0S2V5PWZ1bmN0aW9uKGMpe3ZhciBiPUtFWVVUSUwuZ2V0S2V5KGMpO3RoaXMuYXNuMVN1YmpQS2V5PW5ldyBLSlVSLmFzbjEueDUwOS5TdWJqZWN0UHVibGljS2V5SW5mbyhiKX07dGhpcy5hcHBlbmRFeHRlbnNpb249ZnVuY3Rpb24oYil7dGhpcy5leHRlbnNpb25zQXJyYXkucHVzaChiKX07dGhpcy5hcHBlbmRFeHRlbnNpb25CeU5hbWU9ZnVuY3Rpb24oZCxiKXtpZihkLnRvTG93ZXJDYXNlKCk9PVwiYmFzaWNjb25zdHJhaW50c1wiKXt2YXIgYz1uZXcgS0pVUi5hc24xLng1MDkuQmFzaWNDb25zdHJhaW50cyhiKTt0aGlzLmFwcGVuZEV4dGVuc2lvbihjKX1lbHNle2lmKGQudG9Mb3dlckNhc2UoKT09XCJrZXl1c2FnZVwiKXt2YXIgYz1uZXcgS0pVUi5hc24xLng1MDkuS2V5VXNhZ2UoYik7dGhpcy5hcHBlbmRFeHRlbnNpb24oYyl9ZWxzZXtpZihkLnRvTG93ZXJDYXNlKCk9PVwiY3JsZGlzdHJpYnV0aW9ucG9pbnRzXCIpe3ZhciBjPW5ldyBLSlVSLmFzbjEueDUwOS5DUkxEaXN0cmlidXRpb25Qb2ludHMoYik7dGhpcy5hcHBlbmRFeHRlbnNpb24oYyl9ZWxzZXtpZihkLnRvTG93ZXJDYXNlKCk9PVwiZXh0a2V5dXNhZ2VcIil7dmFyIGM9bmV3IEtKVVIuYXNuMS54NTA5LkV4dEtleVVzYWdlKGIpO3RoaXMuYXBwZW5kRXh0ZW5zaW9uKGMpfWVsc2V7aWYoZC50b0xvd2VyQ2FzZSgpPT1cImF1dGhvcml0eWtleWlkZW50aWZpZXJcIil7dmFyIGM9bmV3IEtKVVIuYXNuMS54NTA5LkF1dGhvcml0eUtleUlkZW50aWZpZXIoYik7dGhpcy5hcHBlbmRFeHRlbnNpb24oYyl9ZWxzZXt0aHJvd1widW5zdXBwb3J0ZWQgZXh0ZW5zaW9uIG5hbWU6IFwiK2R9fX19fX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5hc24xTm90QmVmb3JlPT1udWxsfHx0aGlzLmFzbjFOb3RBZnRlcj09bnVsbCl7dGhyb3dcIm5vdEJlZm9yZSBhbmQvb3Igbm90QWZ0ZXIgbm90IHNldFwifXZhciBjPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5Olt0aGlzLmFzbjFOb3RCZWZvcmUsdGhpcy5hc24xTm90QWZ0ZXJdfSk7dGhpcy5hc24xQXJyYXk9bmV3IEFycmF5KCk7dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFWZXJzaW9uKTt0aGlzLmFzbjFBcnJheS5wdXNoKHRoaXMuYXNuMVNlcmlhbE51bWJlcik7dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFTaWduYXR1cmVBbGcpO3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xSXNzdWVyKTt0aGlzLmFzbjFBcnJheS5wdXNoKGMpO3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xU3ViamVjdCk7dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFTdWJqUEtleSk7aWYodGhpcy5leHRlbnNpb25zQXJyYXkubGVuZ3RoPjApe3ZhciBkPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OnRoaXMuZXh0ZW5zaW9uc0FycmF5fSk7dmFyIGI9bmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OnRydWUsdGFnOlwiYTNcIixvYmo6ZH0pO3RoaXMuYXNuMUFycmF5LnB1c2goYil9dmFyIGU9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6dGhpcy5hc24xQXJyYXl9KTt0aGlzLmhUTFY9ZS5nZXRFbmNvZGVkSGV4KCk7dGhpcy5pc01vZGlmaWVkPWZhbHNlO3JldHVybiB0aGlzLmhUTFZ9O3RoaXMuX2luaXRpYWxpemUoKX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuVEJTQ2VydGlmaWNhdGUsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LkV4dGVuc2lvbj1mdW5jdGlvbihiKXtLSlVSLmFzbjEueDUwOS5FeHRlbnNpb24uc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPW51bGw7dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGY9bmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKHtvaWQ6dGhpcy5vaWR9KTt2YXIgZT1uZXcgS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nKHtoZXg6dGhpcy5nZXRFeHRuVmFsdWVIZXgoKX0pO3ZhciBkPW5ldyBBcnJheSgpO2QucHVzaChmKTtpZih0aGlzLmNyaXRpY2FsKXtkLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJCb29sZWFuKCkpfWQucHVzaChlKTt2YXIgYz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpkfSk7cmV0dXJuIGMuZ2V0RW5jb2RlZEhleCgpfTt0aGlzLmNyaXRpY2FsPWZhbHNlO2lmKHR5cGVvZiBiIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYi5jcml0aWNhbCE9XCJ1bmRlZmluZWRcIil7dGhpcy5jcml0aWNhbD1iLmNyaXRpY2FsfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkV4dGVuc2lvbixLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuS2V5VXNhZ2U9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLng1MDkuS2V5VXNhZ2Uuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5nZXRFeHRuVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hc24xRXh0blZhbHVlLmdldEVuY29kZWRIZXgoKX07dGhpcy5vaWQ9XCIyLjUuMjkuMTVcIjtpZih0eXBlb2YgYSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGEuYmluIT1cInVuZGVmaW5lZFwiKXt0aGlzLmFzbjFFeHRuVmFsdWU9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoYSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuS2V5VXNhZ2UsS0pVUi5hc24xLng1MDkuRXh0ZW5zaW9uKTtLSlVSLmFzbjEueDUwOS5CYXNpY0NvbnN0cmFpbnRzPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS54NTA5LkJhc2ljQ29uc3RyYWludHMuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYyk7dmFyIGE9ZmFsc2U7dmFyIGI9LTE7dGhpcy5nZXRFeHRuVmFsdWVIZXg9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgQXJyYXkoKTtpZih0aGlzLmNBKXtlLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJCb29sZWFuKCkpfWlmKHRoaXMucGF0aExlbj4tMSl7ZS5wdXNoKG5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7XCJpbnRcIjp0aGlzLnBhdGhMZW59KSl9dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6ZX0pO3RoaXMuYXNuMUV4dG5WYWx1ZT1kO3JldHVybiB0aGlzLmFzbjFFeHRuVmFsdWUuZ2V0RW5jb2RlZEhleCgpfTt0aGlzLm9pZD1cIjIuNS4yOS4xOVwiO3RoaXMuY0E9ZmFsc2U7dGhpcy5wYXRoTGVuPS0xO2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYy5jQSE9XCJ1bmRlZmluZWRcIil7dGhpcy5jQT1jLmNBfWlmKHR5cGVvZiBjLnBhdGhMZW4hPVwidW5kZWZpbmVkXCIpe3RoaXMucGF0aExlbj1jLnBhdGhMZW59fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuQmFzaWNDb25zdHJhaW50cyxLSlVSLmFzbjEueDUwOS5FeHRlbnNpb24pO0tKVVIuYXNuMS54NTA5LkNSTERpc3RyaWJ1dGlvblBvaW50cz1mdW5jdGlvbihhKXtLSlVSLmFzbjEueDUwOS5DUkxEaXN0cmlidXRpb25Qb2ludHMuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5nZXRFeHRuVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hc24xRXh0blZhbHVlLmdldEVuY29kZWRIZXgoKX07dGhpcy5zZXRCeURQQXJyYXk9ZnVuY3Rpb24oYil7dGhpcy5hc24xRXh0blZhbHVlPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OmJ9KX07dGhpcy5zZXRCeU9uZVVSST1mdW5jdGlvbihlKXt2YXIgYj1uZXcgS0pVUi5hc24xLng1MDkuR2VuZXJhbE5hbWVzKFt7dXJpOmV9XSk7dmFyIGQ9bmV3IEtKVVIuYXNuMS54NTA5LkRpc3RyaWJ1dGlvblBvaW50TmFtZShiKTt2YXIgYz1uZXcgS0pVUi5hc24xLng1MDkuRGlzdHJpYnV0aW9uUG9pbnQoe2Rwb2JqOmR9KTt0aGlzLnNldEJ5RFBBcnJheShbY10pfTt0aGlzLm9pZD1cIjIuNS4yOS4zMVwiO2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYS5hcnJheSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeURQQXJyYXkoYS5hcnJheSl9ZWxzZXtpZih0eXBlb2YgYS51cmkhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlPbmVVUkkoYS51cmkpfX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5DUkxEaXN0cmlidXRpb25Qb2ludHMsS0pVUi5hc24xLng1MDkuRXh0ZW5zaW9uKTtLSlVSLmFzbjEueDUwOS5FeHRLZXlVc2FnZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEueDUwOS5FeHRLZXlVc2FnZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLnNldFB1cnBvc2VBcnJheT1mdW5jdGlvbihiKXt0aGlzLmFzbjFFeHRuVmFsdWU9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSgpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1uZXcgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIoYltjXSk7dGhpcy5hc24xRXh0blZhbHVlLmFwcGVuZEFTTjFPYmplY3QoZCl9fTt0aGlzLmdldEV4dG5WYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFzbjFFeHRuVmFsdWUuZ2V0RW5jb2RlZEhleCgpfTt0aGlzLm9pZD1cIjIuNS4yOS4zN1wiO2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYS5hcnJheSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRQdXJwb3NlQXJyYXkoYS5hcnJheSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuRXh0S2V5VXNhZ2UsS0pVUi5hc24xLng1MDkuRXh0ZW5zaW9uKTtLSlVSLmFzbjEueDUwOS5BdXRob3JpdHlLZXlJZGVudGlmaWVyPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS54NTA5LkF1dGhvcml0eUtleUlkZW50aWZpZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5hc24xS0lEPW51bGw7dGhpcy5hc24xQ2VydElzc3Vlcj1udWxsO3RoaXMuYXNuMUNlcnRTTj1udWxsO3RoaXMuZ2V0RXh0blZhbHVlSGV4PWZ1bmN0aW9uKCl7dmFyIGM9bmV3IEFycmF5KCk7aWYodGhpcy5hc24xS0lEKXtjLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OmZhbHNlLHRhZzpcIjgwXCIsb2JqOnRoaXMuYXNuMUtJRH0pKX1pZih0aGlzLmFzbjFDZXJ0SXNzdWVyKXtjLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OmZhbHNlLHRhZzpcImExXCIsb2JqOnRoaXMuYXNuMUNlcnRJc3N1ZXJ9KSl9aWYodGhpcy5hc24xQ2VydFNOKXtjLnB1c2gobmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OmZhbHNlLHRhZzpcIjgyXCIsb2JqOnRoaXMuYXNuMUNlcnRTTn0pKX12YXIgYj1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpjfSk7dGhpcy5hc24xRXh0blZhbHVlPWI7cmV0dXJuIHRoaXMuYXNuMUV4dG5WYWx1ZS5nZXRFbmNvZGVkSGV4KCl9O3RoaXMuc2V0S0lEQnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFLSUQ9bmV3IEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZyhiKX07dGhpcy5zZXRDZXJ0SXNzdWVyQnlQYXJhbT1mdW5jdGlvbihiKXt0aGlzLmFzbjFDZXJ0SXNzdWVyPW5ldyBLSlVSLmFzbjEueDUwOS5YNTAwTmFtZShiKX07dGhpcy5zZXRDZXJ0U05CeVBhcmFtPWZ1bmN0aW9uKGIpe3RoaXMuYXNuMUNlcnRTTj1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoYil9O3RoaXMub2lkPVwiMi41LjI5LjM1XCI7aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhLmtpZCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRLSURCeVBhcmFtKGEua2lkKX1pZih0eXBlb2YgYS5pc3N1ZXIhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0Q2VydElzc3VlckJ5UGFyYW0oYS5pc3N1ZXIpfWlmKHR5cGVvZiBhLnNuIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldENlcnRTTkJ5UGFyYW0oYS5zbil9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuQXV0aG9yaXR5S2V5SWRlbnRpZmllcixLSlVSLmFzbjEueDUwOS5FeHRlbnNpb24pO0tKVVIuYXNuMS54NTA5LkNSTD1mdW5jdGlvbihmKXtLSlVSLmFzbjEueDUwOS5DUkwuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPW51bGw7dmFyIGM9bnVsbDt2YXIgZT1udWxsO3ZhciBiPW51bGw7dmFyIGQ9bnVsbDt0aGlzLnNldFJzYVBydktleUJ5UEVNYW5kUGFzcz1mdW5jdGlvbihoLGope3ZhciBnPVBLQ1M1UEtFWS5nZXREZWNyeXB0ZWRLZXlIZXgoaCxqKTt2YXIgaT1uZXcgUlNBS2V5KCk7aS5yZWFkUHJpdmF0ZUtleUZyb21BU04xSGV4U3RyaW5nKGcpO3RoaXMucnNhUHJ2S2V5PWl9O3RoaXMuc2lnbj1mdW5jdGlvbigpe3RoaXMuYXNuMVNpZ25hdHVyZUFsZz10aGlzLmFzbjFUQlNDZXJ0TGlzdC5hc24xU2lnbmF0dXJlQWxnO3NpZz1uZXcgS0pVUi5jcnlwdG8uU2lnbmF0dXJlKHthbGc6XCJTSEExd2l0aFJTQVwiLHByb3Y6XCJjcnlwdG9qcy9qc3JzYVwifSk7c2lnLmluaXRTaWduKHRoaXMucnNhUHJ2S2V5KTtzaWcudXBkYXRlSGV4KHRoaXMuYXNuMVRCU0NlcnRMaXN0LmdldEVuY29kZWRIZXgoKSk7dGhpcy5oZXhTaWc9c2lnLnNpZ24oKTt0aGlzLmFzbjFTaWc9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2hleDpcIjAwXCIrdGhpcy5oZXhTaWd9KTt2YXIgZz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbdGhpcy5hc24xVEJTQ2VydExpc3QsdGhpcy5hc24xU2lnbmF0dXJlQWxnLHRoaXMuYXNuMVNpZ119KTt0aGlzLmhUTFY9Zy5nZXRFbmNvZGVkSGV4KCk7dGhpcy5pc01vZGlmaWVkPWZhbHNlfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLmlzTW9kaWZpZWQ9PWZhbHNlJiZ0aGlzLmhUTFYhPW51bGwpe3JldHVybiB0aGlzLmhUTFZ9dGhyb3dcIm5vdCBzaWduZWQgeWV0XCJ9O3RoaXMuZ2V0UEVNU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcy5nZXRFbmNvZGVkSGV4KCk7dmFyIGc9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShpKTt2YXIgaD1DcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeShnKTt2YXIgaj1oLnJlcGxhY2UoLyguezY0fSkvZyxcIiQxXFxyXFxuXCIpO3JldHVyblwiLS0tLS1CRUdJTiBYNTA5IENSTC0tLS0tXFxyXFxuXCIraitcIlxcclxcbi0tLS0tRU5EIFg1MDkgQ1JMLS0tLS1cXHJcXG5cIn07aWYodHlwZW9mIGYhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBmLnRic29iaiE9XCJ1bmRlZmluZWRcIil7dGhpcy5hc24xVEJTQ2VydExpc3Q9Zi50YnNvYmp9aWYodHlwZW9mIGYucnNhcHJ2a2V5IT1cInVuZGVmaW5lZFwiKXt0aGlzLnJzYVBydktleT1mLnJzYXBydmtleX1pZigodHlwZW9mIGYucnNhcHJ2cGVtIT1cInVuZGVmaW5lZFwiKSYmKHR5cGVvZiBmLnJzYXBydnBhcyE9XCJ1bmRlZmluZWRcIikpe3RoaXMuc2V0UnNhUHJ2S2V5QnlQRU1hbmRQYXNzKGYucnNhcHJ2cGVtLGYucnNhcHJ2cGFzKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5DUkwsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LlRCU0NlcnRMaXN0PWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS54NTA5LlRCU0NlcnRMaXN0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1udWxsO3RoaXMuc2V0U2lnbmF0dXJlQWxnQnlQYXJhbT1mdW5jdGlvbihjKXt0aGlzLmFzbjFTaWduYXR1cmVBbGc9bmV3IEtKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIoYyl9O3RoaXMuc2V0SXNzdWVyQnlQYXJhbT1mdW5jdGlvbihjKXt0aGlzLmFzbjFJc3N1ZXI9bmV3IEtKVVIuYXNuMS54NTA5Llg1MDBOYW1lKGMpfTt0aGlzLnNldFRoaXNVcGRhdGVCeVBhcmFtPWZ1bmN0aW9uKGMpe3RoaXMuYXNuMVRoaXNVcGRhdGU9bmV3IEtKVVIuYXNuMS54NTA5LlRpbWUoYyl9O3RoaXMuc2V0TmV4dFVwZGF0ZUJ5UGFyYW09ZnVuY3Rpb24oYyl7dGhpcy5hc24xTmV4dFVwZGF0ZT1uZXcgS0pVUi5hc24xLng1MDkuVGltZShjKX07dGhpcy5hZGRSZXZva2VkQ2VydD1mdW5jdGlvbihjLGQpe3ZhciBmPXt9O2lmKGMhPXVuZGVmaW5lZCYmYyE9bnVsbCl7Zi5zbj1jfWlmKGQhPXVuZGVmaW5lZCYmZCE9bnVsbCl7Zi50aW1lPWR9dmFyIGU9bmV3IEtKVVIuYXNuMS54NTA5LkNSTEVudHJ5KGYpO3RoaXMuYVJldm9rZWRDZXJ0LnB1c2goZSl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO2lmKHRoaXMuYXNuMVZlcnNpb24hPW51bGwpe3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xVmVyc2lvbil9dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFTaWduYXR1cmVBbGcpO3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xSXNzdWVyKTt0aGlzLmFzbjFBcnJheS5wdXNoKHRoaXMuYXNuMVRoaXNVcGRhdGUpO2lmKHRoaXMuYXNuMU5leHRVcGRhdGUhPW51bGwpe3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xTmV4dFVwZGF0ZSl9aWYodGhpcy5hUmV2b2tlZENlcnQubGVuZ3RoPjApe3ZhciBjPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OnRoaXMuYVJldm9rZWRDZXJ0fSk7dGhpcy5hc24xQXJyYXkucHVzaChjKX12YXIgZD1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTp0aGlzLmFzbjFBcnJheX0pO3RoaXMuaFRMVj1kLmdldEVuY29kZWRIZXgoKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2U7cmV0dXJuIHRoaXMuaFRMVn07dGhpcy5faW5pdGlhbGl6ZT1mdW5jdGlvbigpe3RoaXMuYXNuMVZlcnNpb249bnVsbDt0aGlzLmFzbjFTaWduYXR1cmVBbGc9bnVsbDt0aGlzLmFzbjFJc3N1ZXI9bnVsbDt0aGlzLmFzbjFUaGlzVXBkYXRlPW51bGw7dGhpcy5hc24xTmV4dFVwZGF0ZT1udWxsO3RoaXMuYVJldm9rZWRDZXJ0PW5ldyBBcnJheSgpfTt0aGlzLl9pbml0aWFsaXplKCl9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LlRCU0NlcnRMaXN0LEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5DUkxFbnRyeT1mdW5jdGlvbihjKXtLSlVSLmFzbjEueDUwOS5DUkxFbnRyeS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGI9bnVsbDt2YXIgYT1udWxsO3RoaXMuc2V0Q2VydFNlcmlhbD1mdW5jdGlvbihkKXt0aGlzLnNuPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcihkKX07dGhpcy5zZXRSZXZvY2F0aW9uRGF0ZT1mdW5jdGlvbihkKXt0aGlzLnRpbWU9bmV3IEtKVVIuYXNuMS54NTA5LlRpbWUoZCl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBkPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5Olt0aGlzLnNuLHRoaXMudGltZV19KTt0aGlzLlRMVj1kLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5UTFZ9O2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYy50aW1lIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldFJldm9jYXRpb25EYXRlKGMudGltZSl9aWYodHlwZW9mIGMuc24hPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0Q2VydFNlcmlhbChjLnNuKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5DUkxFbnRyeSxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuWDUwME5hbWU9ZnVuY3Rpb24oYil7S0pVUi5hc24xLng1MDkuWDUwME5hbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO3RoaXMuc2V0QnlTdHJpbmc9ZnVuY3Rpb24oYyl7dmFyIGQ9Yy5zcGxpdChcIi9cIik7ZC5zaGlmdCgpO2Zvcih2YXIgZT0wO2U8ZC5sZW5ndGg7ZSsrKXt0aGlzLmFzbjFBcnJheS5wdXNoKG5ldyBLSlVSLmFzbjEueDUwOS5SRE4oe3N0cjpkW2VdfSkpfX07dGhpcy5zZXRCeU9iamVjdD1mdW5jdGlvbihlKXtmb3IodmFyIGMgaW4gZSl7aWYoZS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9bmV3IEtKVVIuYXNuMS54NTA5LlJETih7c3RyOmMrXCI9XCIrZVtjXX0pO3RoaXMuYXNuMUFycmF5P3RoaXMuYXNuMUFycmF5LnB1c2goZCk6dGhpcy5hc24xQXJyYXk9W2RdfX19O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLmhUTFY9PVwic3RyaW5nXCIpe3JldHVybiB0aGlzLmhUTFZ9dmFyIGM9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6dGhpcy5hc24xQXJyYXl9KTt0aGlzLmhUTFY9Yy5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBiLnN0ciE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeVN0cmluZyhiLnN0cil9ZWxzZXtpZih0eXBlb2YgYj09PVwib2JqZWN0XCIpe3RoaXMuc2V0QnlPYmplY3QoYil9fWlmKHR5cGVvZiBiLmNlcnRpc3N1ZXIhPVwidW5kZWZpbmVkXCIpe3ZhciBhPW5ldyBYNTA5KCk7YS5oZXg9WDUwOS5wZW1Ub0hleChiLmNlcnRpc3N1ZXIpO3RoaXMuaFRMVj1hLmdldElzc3VlckhleCgpfWlmKHR5cGVvZiBiLmNlcnRzdWJqZWN0IT1cInVuZGVmaW5lZFwiKXt2YXIgYT1uZXcgWDUwOSgpO2EuaGV4PVg1MDkucGVtVG9IZXgoYi5jZXJ0c3ViamVjdCk7dGhpcy5oVExWPWEuZ2V0U3ViamVjdEhleCgpfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5Llg1MDBOYW1lLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5SRE49ZnVuY3Rpb24oYSl7S0pVUi5hc24xLng1MDkuUkROLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmFzbjFBcnJheT1uZXcgQXJyYXkoKTt0aGlzLmFkZEJ5U3RyaW5nPWZ1bmN0aW9uKGIpe3RoaXMuYXNuMUFycmF5LnB1c2gobmV3IEtKVVIuYXNuMS54NTA5LkF0dHJpYnV0ZVR5cGVBbmRWYWx1ZSh7c3RyOmJ9KSl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBiPW5ldyBLSlVSLmFzbjEuREVSU2V0KHthcnJheTp0aGlzLmFzbjFBcnJheX0pO3RoaXMuVExWPWIuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLlRMVn07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhLnN0ciE9XCJ1bmRlZmluZWRcIil7dGhpcy5hZGRCeVN0cmluZyhhLnN0cil9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuUkROLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5BdHRyaWJ1dGVUeXBlQW5kVmFsdWU9ZnVuY3Rpb24oYil7S0pVUi5hc24xLng1MDkuQXR0cmlidXRlVHlwZUFuZFZhbHVlLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgZD1udWxsO3ZhciBjPW51bGw7dmFyIGE9XCJ1dGY4XCI7dGhpcy5zZXRCeVN0cmluZz1mdW5jdGlvbihlKXtpZihlLm1hdGNoKC9eKFtePV0rKT0oLispJC8pKXt0aGlzLnNldEJ5QXR0clR5cGVBbmRWYWx1ZVN0cihSZWdFeHAuJDEsUmVnRXhwLiQyKX1lbHNle3Rocm93XCJtYWxmb3JtZWQgYXR0clR5cGVBbmRWYWx1ZVN0cjogXCIrZX19O3RoaXMuc2V0QnlBdHRyVHlwZUFuZFZhbHVlU3RyPWZ1bmN0aW9uKGcsZil7dGhpcy50eXBlT2JqPUtKVVIuYXNuMS54NTA5Lk9JRC5hdHlwZTJvYmooZyk7dmFyIGU9YTtpZihnPT1cIkNcIil7ZT1cInByblwifXRoaXMudmFsdWVPYmo9dGhpcy5nZXRWYWx1ZU9iaihlLGYpfTt0aGlzLmdldFZhbHVlT2JqPWZ1bmN0aW9uKGYsZSl7aWYoZj09XCJ1dGY4XCIpe3JldHVybiBuZXcgS0pVUi5hc24xLkRFUlVURjhTdHJpbmcoe3N0cjplfSl9aWYoZj09XCJwcm5cIil7cmV0dXJuIG5ldyBLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nKHtzdHI6ZX0pfWlmKGY9PVwidGVsXCIpe3JldHVybiBuZXcgS0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmcoe3N0cjplfSl9aWYoZj09XCJpYTVcIil7cmV0dXJuIG5ldyBLSlVSLmFzbjEuREVSSUE1U3RyaW5nKHtzdHI6ZX0pfXRocm93XCJ1bnN1cHBvcnRlZCBkaXJlY3Rvcnkgc3RyaW5nIHR5cGU6IHR5cGU9XCIrZitcIiB2YWx1ZT1cIitlfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbdGhpcy50eXBlT2JqLHRoaXMudmFsdWVPYmpdfSk7dGhpcy5UTFY9ZS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuVExWfTtpZih0eXBlb2YgYiE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGIuc3RyIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEJ5U3RyaW5nKGIuc3RyKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5BdHRyaWJ1dGVUeXBlQW5kVmFsdWUsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LlN1YmplY3RQdWJsaWNLZXlJbmZvPWZ1bmN0aW9uKGQpe0tKVVIuYXNuMS54NTA5LlN1YmplY3RQdWJsaWNLZXlJbmZvLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYj1udWxsO3ZhciBjPW51bGw7dmFyIGE9bnVsbDt0aGlzLnNldFJTQUtleT1mdW5jdGlvbihlKXtpZighUlNBS2V5LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGUpKXt0aHJvd1wiYXJndW1lbnQgaXMgbm90IFJTQUtleSBpbnN0YW5jZVwifXRoaXMucnNhS2V5PWU7dmFyIGc9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6ZS5ufSk7dmFyIGY9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtcImludFwiOmUuZX0pO3ZhciBpPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OltnLGZdfSk7dmFyIGg9aS5nZXRFbmNvZGVkSGV4KCk7dGhpcy5hc24xQWxnSWQ9bmV3IEtKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIoe25hbWU6XCJyc2FFbmNyeXB0aW9uXCJ9KTt0aGlzLmFzbjFTdWJqUEtleT1uZXcgS0pVUi5hc24xLkRFUkJpdFN0cmluZyh7aGV4OlwiMDBcIitofSl9O3RoaXMuc2V0UlNBUEVNPWZ1bmN0aW9uKGcpe2lmKGcubWF0Y2goLy0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tLykpe3ZhciBuPWc7bj1uLnJlcGxhY2UoL14tLS0tLVteLV0rLS0tLS0vLFwiXCIpO249bi5yZXBsYWNlKC8tLS0tLVteLV0rLS0tLS1cXHMqJC8sXCJcIik7dmFyIG09bi5yZXBsYWNlKC9cXHMrL2csXCJcIik7dmFyIGY9Q3J5cHRvSlMuZW5jLkJhc2U2NC5wYXJzZShtKTt2YXIgaT1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShmKTt2YXIgaz1fcnNhcGVtX2dldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleChpKTt2YXIgaD1rWzFdO3ZhciBsPWguc3Vic3RyKDIpO3ZhciBlPV9yc2FwZW1fZ2V0SGV4VmFsdWVBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4KGwpO3ZhciBqPW5ldyBSU0FLZXkoKTtqLnNldFB1YmxpYyhlWzBdLGVbMV0pO3RoaXMuc2V0UlNBS2V5KGopfWVsc2V7dGhyb3dcImtleSBub3Qgc3VwcG9ydGVkXCJ9fTt0aGlzLmdldEFTTjFPYmplY3Q9ZnVuY3Rpb24oKXtpZih0aGlzLmFzbjFBbGdJZD09bnVsbHx8dGhpcy5hc24xU3VialBLZXk9PW51bGwpe3Rocm93XCJhbGdJZCBhbmQvb3Igc3VialB1YktleSBub3Qgc2V0XCJ9dmFyIGU9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6W3RoaXMuYXNuMUFsZ0lkLHRoaXMuYXNuMVN1YmpQS2V5XX0pO3JldHVybiBlfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmdldEFTTjFPYmplY3QoKTt0aGlzLmhUTFY9ZS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07dGhpcy5fc2V0UlNBS2V5PWZ1bmN0aW9uKGUpe3ZhciBnPUtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3Qoe3NlcTpbe1wiaW50XCI6e2JpZ2ludDplLm59fSx7XCJpbnRcIjp7XCJpbnRcIjplLmV9fV19KTt2YXIgZj1nLmdldEVuY29kZWRIZXgoKTt0aGlzLmFzbjFBbGdJZD1uZXcgS0pVUi5hc24xLng1MDkuQWxnb3JpdGhtSWRlbnRpZmllcih7bmFtZTpcInJzYUVuY3J5cHRpb25cIn0pO3RoaXMuYXNuMVN1YmpQS2V5PW5ldyBLSlVSLmFzbjEuREVSQml0U3RyaW5nKHtoZXg6XCIwMFwiK2Z9KX07dGhpcy5fc2V0RUM9ZnVuY3Rpb24oZSl7dmFyIGY9bmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKHtuYW1lOmUuY3VydmVOYW1lfSk7dGhpcy5hc24xQWxnSWQ9bmV3IEtKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIoe25hbWU6XCJlY1B1YmxpY0tleVwiLGFzbjFwYXJhbXM6Zn0pO3RoaXMuYXNuMVN1YmpQS2V5PW5ldyBLSlVSLmFzbjEuREVSQml0U3RyaW5nKHtoZXg6XCIwMFwiK2UucHViS2V5SGV4fSl9O3RoaXMuX3NldERTQT1mdW5jdGlvbihlKXt2YXIgZj1uZXcgS0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdCh7c2VxOlt7XCJpbnRcIjp7YmlnaW50OmUucH19LHtcImludFwiOntiaWdpbnQ6ZS5xfX0se1wiaW50XCI6e2JpZ2ludDplLmd9fV19KTt0aGlzLmFzbjFBbGdJZD1uZXcgS0pVUi5hc24xLng1MDkuQWxnb3JpdGhtSWRlbnRpZmllcih7bmFtZTpcImRzYVwiLGFzbjFwYXJhbXM6Zn0pO3ZhciBnPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OmUueX0pO3RoaXMuYXNuMVN1YmpQS2V5PW5ldyBLSlVSLmFzbjEuREVSQml0U3RyaW5nKHtoZXg6XCIwMFwiK2cuZ2V0RW5jb2RlZEhleCgpfSl9O2lmKHR5cGVvZiBkIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgUlNBS2V5IT1cInVuZGVmaW5lZFwiJiZkIGluc3RhbmNlb2YgUlNBS2V5KXt0aGlzLl9zZXRSU0FLZXkoZCl9ZWxzZXtpZih0eXBlb2YgS0pVUi5jcnlwdG8uRUNEU0EhPVwidW5kZWZpbmVkXCImJmQgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSl7dGhpcy5fc2V0RUMoZCl9ZWxzZXtpZih0eXBlb2YgS0pVUi5jcnlwdG8uRFNBIT1cInVuZGVmaW5lZFwiJiZkIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRFNBKXt0aGlzLl9zZXREU0EoZCl9ZWxzZXtpZih0eXBlb2YgZC5yc2FrZXkhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0UlNBS2V5KGQucnNha2V5KX1lbHNle2lmKHR5cGVvZiBkLnJzYXBlbSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRSU0FQRU0oZC5yc2FwZW0pfX19fX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5TdWJqZWN0UHVibGljS2V5SW5mbyxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuVGltZT1mdW5jdGlvbihjKXtLSlVSLmFzbjEueDUwOS5UaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYj1udWxsO3ZhciBhPW51bGw7dGhpcy5zZXRUaW1lUGFyYW1zPWZ1bmN0aW9uKGQpe3RoaXMudGltZVBhcmFtcz1kfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgZD1udWxsO2lmKHRoaXMudGltZVBhcmFtcyE9bnVsbCl7aWYodGhpcy50eXBlPT1cInV0Y1wiKXtkPW5ldyBLSlVSLmFzbjEuREVSVVRDVGltZSh0aGlzLnRpbWVQYXJhbXMpfWVsc2V7ZD1uZXcgS0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZSh0aGlzLnRpbWVQYXJhbXMpfX1lbHNle2lmKHRoaXMudHlwZT09XCJ1dGNcIil7ZD1uZXcgS0pVUi5hc24xLkRFUlVUQ1RpbWUoKX1lbHNle2Q9bmV3IEtKVVIuYXNuMS5ERVJHZW5lcmFsaXplZFRpbWUoKX19dGhpcy5UTFY9ZC5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuVExWfTt0aGlzLnR5cGU9XCJ1dGNcIjtpZih0eXBlb2YgYyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGMudHlwZSE9XCJ1bmRlZmluZWRcIil7dGhpcy50eXBlPWMudHlwZX1lbHNle2lmKHR5cGVvZiBjLnN0ciE9XCJ1bmRlZmluZWRcIil7aWYoYy5zdHIubWF0Y2goL15bMC05XXsxMn1aJC8pKXt0aGlzLnR5cGU9XCJ1dGNcIn1pZihjLnN0ci5tYXRjaCgvXlswLTldezE0fVokLykpe3RoaXMudHlwZT1cImdlblwifX19dGhpcy50aW1lUGFyYW1zPWN9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5UaW1lLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5BbGdvcml0aG1JZGVudGlmaWVyPWZ1bmN0aW9uKGUpe0tKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPW51bGw7dmFyIGQ9bnVsbDt2YXIgYj1udWxsO3ZhciBjPWZhbHNlO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMubmFtZUFsZz09bnVsbCYmdGhpcy5hc24xQWxnPT1udWxsKXt0aHJvd1wiYWxnb3JpdGhtIG5vdCBzcGVjaWZpZWRcIn1pZih0aGlzLm5hbWVBbGchPW51bGwmJnRoaXMuYXNuMUFsZz09bnVsbCl7dGhpcy5hc24xQWxnPUtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9iaih0aGlzLm5hbWVBbGcpfXZhciBmPVt0aGlzLmFzbjFBbGddO2lmKCF0aGlzLnBhcmFtRW1wdHkpe2YucHVzaCh0aGlzLmFzbjFQYXJhbXMpfXZhciBnPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OmZ9KTt0aGlzLmhUTFY9Zy5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGUhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBlLm5hbWUhPVwidW5kZWZpbmVkXCIpe3RoaXMubmFtZUFsZz1lLm5hbWV9aWYodHlwZW9mIGUuYXNuMXBhcmFtcyE9XCJ1bmRlZmluZWRcIil7dGhpcy5hc24xUGFyYW1zPWUuYXNuMXBhcmFtc31pZih0eXBlb2YgZS5wYXJhbWVtcHR5IT1cInVuZGVmaW5lZFwiKXt0aGlzLnBhcmFtRW1wdHk9ZS5wYXJhbWVtcHR5fX1pZih0aGlzLmFzbjFQYXJhbXM9PW51bGwpe3RoaXMuYXNuMVBhcmFtcz1uZXcgS0pVUi5hc24xLkRFUk51bGwoKX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS54NTA5LkFsZ29yaXRobUlkZW50aWZpZXIsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LkdlbmVyYWxOYW1lPWZ1bmN0aW9uKGQpe0tKVVIuYXNuMS54NTA5LkdlbmVyYWxOYW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYz1udWxsO3ZhciBiPW51bGw7dmFyIGE9e3JmYzgyMjpcIjgxXCIsZG5zOlwiODJcIixkbjpcImE0XCIsdXJpOlwiODZcIn07dGhpcy5leHBsaWNpdD1mYWxzZTt0aGlzLnNldEJ5UGFyYW09ZnVuY3Rpb24oayl7dmFyIGo9bnVsbDt2YXIgZz1udWxsO2lmKHR5cGVvZiBrPT1cInVuZGVmaW5lZFwiKXtyZXR1cm59aWYodHlwZW9mIGsucmZjODIyIT1cInVuZGVmaW5lZFwiKXt0aGlzLnR5cGU9XCJyZmM4MjJcIjtnPW5ldyBLSlVSLmFzbjEuREVSSUE1U3RyaW5nKHtzdHI6a1t0aGlzLnR5cGVdfSl9aWYodHlwZW9mIGsuZG5zIT1cInVuZGVmaW5lZFwiKXt0aGlzLnR5cGU9XCJkbnNcIjtnPW5ldyBLSlVSLmFzbjEuREVSSUE1U3RyaW5nKHtzdHI6a1t0aGlzLnR5cGVdfSl9aWYodHlwZW9mIGsudXJpIT1cInVuZGVmaW5lZFwiKXt0aGlzLnR5cGU9XCJ1cmlcIjtnPW5ldyBLSlVSLmFzbjEuREVSSUE1U3RyaW5nKHtzdHI6a1t0aGlzLnR5cGVdfSl9aWYodHlwZW9mIGsuY2VydGlzc3VlciE9XCJ1bmRlZmluZWRcIil7dGhpcy50eXBlPVwiZG5cIjt0aGlzLmV4cGxpY2l0PXRydWU7dmFyIGg9ay5jZXJ0aXNzdWVyO3ZhciBmPW51bGw7aWYoaC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7Zj09aH1pZihoLmluZGV4T2YoXCItLS0tLUJFR0lOIFwiKSE9LTEpe2Y9WDUwOS5wZW1Ub0hleChoKX1pZihmPT1udWxsKXt0aHJvd1wiY2VydGlzc3VlciBwYXJhbSBub3QgY2VydFwifXZhciBlPW5ldyBYNTA5KCk7ZS5oZXg9Zjt2YXIgaT1lLmdldElzc3VlckhleCgpO2c9bmV3IEtKVVIuYXNuMS5BU04xT2JqZWN0KCk7Zy5oVExWPWl9aWYodHlwZW9mIGsuY2VydHN1YmohPVwidW5kZWZpbmVkXCIpe3RoaXMudHlwZT1cImRuXCI7dGhpcy5leHBsaWNpdD10cnVlO3ZhciBoPWsuY2VydHN1Ymo7dmFyIGY9bnVsbDtpZihoLm1hdGNoKC9eWzAtOUEtRmEtZl0rJC8pKXtmPT1ofWlmKGguaW5kZXhPZihcIi0tLS0tQkVHSU4gXCIpIT0tMSl7Zj1YNTA5LnBlbVRvSGV4KGgpfWlmKGY9PW51bGwpe3Rocm93XCJjZXJ0c3ViaiBwYXJhbSBub3QgY2VydFwifXZhciBlPW5ldyBYNTA5KCk7ZS5oZXg9Zjt2YXIgaT1lLmdldFN1YmplY3RIZXgoKTtnPW5ldyBLSlVSLmFzbjEuQVNOMU9iamVjdCgpO2cuaFRMVj1pfWlmKHRoaXMudHlwZT09bnVsbCl7dGhyb3dcInVuc3VwcG9ydGVkIHR5cGUgaW4gcGFyYW1zPVwiK2t9dGhpcy5hc24xT2JqPW5ldyBLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0KHtleHBsaWNpdDp0aGlzLmV4cGxpY2l0LHRhZzphW3RoaXMudHlwZV0sb2JqOmd9KX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNuMU9iai5nZXRFbmNvZGVkSGV4KCl9O2lmKHR5cGVvZiBkIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEJ5UGFyYW0oZCl9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5HZW5lcmFsTmFtZSxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuR2VuZXJhbE5hbWVzPWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS54NTA5LkdlbmVyYWxOYW1lcy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9bnVsbDt0aGlzLnNldEJ5UGFyYW1BcnJheT1mdW5jdGlvbihlKXtmb3IodmFyIGM9MDtjPGUubGVuZ3RoO2MrKyl7dmFyIGQ9bmV3IEtKVVIuYXNuMS54NTA5LkdlbmVyYWxOYW1lKGVbY10pO3RoaXMuYXNuMUFycmF5LnB1c2goZCl9fTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgYz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTp0aGlzLmFzbjFBcnJheX0pO3JldHVybiBjLmdldEVuY29kZWRIZXgoKX07dGhpcy5hc24xQXJyYXk9bmV3IEFycmF5KCk7aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlQYXJhbUFycmF5KGIpfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLng1MDkuR2VuZXJhbE5hbWVzLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEueDUwOS5EaXN0cmlidXRpb25Qb2ludE5hbWU9ZnVuY3Rpb24oYil7S0pVUi5hc24xLng1MDkuRGlzdHJpYnV0aW9uUG9pbnROYW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgZT1udWxsO3ZhciBjPW51bGw7dmFyIGE9bnVsbDt2YXIgZD1udWxsO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMudHlwZSE9XCJmdWxsXCIpe3Rocm93XCJjdXJyZW50bHkgdHlwZSBzaGFsbCBiZSAnZnVsbCc6IFwiK3RoaXMudHlwZX10aGlzLmFzbjFPYmo9bmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OmZhbHNlLHRhZzp0aGlzLnRhZyxvYmo6dGhpcy5hc24xVn0pO3RoaXMuaFRMVj10aGlzLmFzbjFPYmouZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBiIT1cInVuZGVmaW5lZFwiKXtpZihLSlVSLmFzbjEueDUwOS5HZW5lcmFsTmFtZXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYikpe3RoaXMudHlwZT1cImZ1bGxcIjt0aGlzLnRhZz1cImEwXCI7dGhpcy5hc24xVj1ifWVsc2V7dGhyb3dcIlRoaXMgY2xhc3Mgc3VwcG9ydHMgR2VuZXJhbE5hbWVzIG9ubHkgYXMgYXJndW1lbnRcIn19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5EaXN0cmlidXRpb25Qb2ludE5hbWUsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS54NTA5LkRpc3RyaWJ1dGlvblBvaW50PWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS54NTA5LkRpc3RyaWJ1dGlvblBvaW50LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1udWxsO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBjPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2UoKTtpZih0aGlzLmFzbjFEUCE9bnVsbCl7dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Qoe2V4cGxpY2l0OnRydWUsdGFnOlwiYTBcIixvYmo6dGhpcy5hc24xRFB9KTtjLmFwcGVuZEFTTjFPYmplY3QoZCl9dGhpcy5oVExWPWMuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBiIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYi5kcG9iaiE9XCJ1bmRlZmluZWRcIil7dGhpcy5hc24xRFA9Yi5kcG9ian19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEueDUwOS5EaXN0cmlidXRpb25Qb2ludCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLng1MDkuT0lEPW5ldyBmdW5jdGlvbihhKXt0aGlzLmF0eXBlMm9pZExpc3Q9e0M6XCIyLjUuNC42XCIsTzpcIjIuNS40LjEwXCIsT1U6XCIyLjUuNC4xMVwiLFNUOlwiMi41LjQuOFwiLEw6XCIyLjUuNC43XCIsQ046XCIyLjUuNC4zXCIsU046XCIyLjUuNC40XCIsRE46XCIyLjUuNC40OVwiLERDOlwiMC45LjIzNDIuMTkyMDAzMDAuMTAwLjEuMjVcIix9O3RoaXMubmFtZTJvaWRMaXN0PXtzaGExOlwiMS4zLjE0LjMuMi4yNlwiLHNoYTI1NjpcIjIuMTYuODQwLjEuMTAxLjMuNC4yLjFcIixzaGEzODQ6XCIyLjE2Ljg0MC4xLjEwMS4zLjQuMi4yXCIsc2hhNTEyOlwiMi4xNi44NDAuMS4xMDEuMy40LjIuM1wiLHNoYTIyNDpcIjIuMTYuODQwLjEuMTAxLjMuNC4yLjRcIixtZDU6XCIxLjIuODQwLjExMzU0OS4yLjVcIixtZDI6XCIxLjMuMTQuNy4yLjIuMVwiLHJpcGVtZDE2MDpcIjEuMy4zNi4zLjIuMVwiLE1EMndpdGhSU0E6XCIxLjIuODQwLjExMzU0OS4xLjEuMlwiLE1ENHdpdGhSU0E6XCIxLjIuODQwLjExMzU0OS4xLjEuM1wiLE1ENXdpdGhSU0E6XCIxLjIuODQwLjExMzU0OS4xLjEuNFwiLFNIQTF3aXRoUlNBOlwiMS4yLjg0MC4xMTM1NDkuMS4xLjVcIixTSEEyMjR3aXRoUlNBOlwiMS4yLjg0MC4xMTM1NDkuMS4xLjE0XCIsU0hBMjU2d2l0aFJTQTpcIjEuMi44NDAuMTEzNTQ5LjEuMS4xMVwiLFNIQTM4NHdpdGhSU0E6XCIxLjIuODQwLjExMzU0OS4xLjEuMTJcIixTSEE1MTJ3aXRoUlNBOlwiMS4yLjg0MC4xMTM1NDkuMS4xLjEzXCIsU0hBMXdpdGhFQ0RTQTpcIjEuMi44NDAuMTAwNDUuNC4xXCIsU0hBMjI0d2l0aEVDRFNBOlwiMS4yLjg0MC4xMDA0NS40LjMuMVwiLFNIQTI1NndpdGhFQ0RTQTpcIjEuMi44NDAuMTAwNDUuNC4zLjJcIixTSEEzODR3aXRoRUNEU0E6XCIxLjIuODQwLjEwMDQ1LjQuMy4zXCIsU0hBNTEyd2l0aEVDRFNBOlwiMS4yLjg0MC4xMDA0NS40LjMuNFwiLGRzYTpcIjEuMi44NDAuMTAwNDAuNC4xXCIsU0hBMXdpdGhEU0E6XCIxLjIuODQwLjEwMDQwLjQuM1wiLFNIQTIyNHdpdGhEU0E6XCIyLjE2Ljg0MC4xLjEwMS4zLjQuMy4xXCIsU0hBMjU2d2l0aERTQTpcIjIuMTYuODQwLjEuMTAxLjMuNC4zLjJcIixyc2FFbmNyeXB0aW9uOlwiMS4yLjg0MC4xMTM1NDkuMS4xLjFcIixjb3VudHJ5TmFtZTpcIjIuNS40LjZcIixvcmdhbml6YXRpb246XCIyLjUuNC4xMFwiLG9yZ2FuaXphdGlvbmFsVW5pdDpcIjIuNS40LjExXCIsc3RhdGVPclByb3ZpbmNlTmFtZTpcIjIuNS40LjhcIixsb2NhbGl0eTpcIjIuNS40LjdcIixjb21tb25OYW1lOlwiMi41LjQuM1wiLHN1YmplY3RLZXlJZGVudGlmaWVyOlwiMi41LjI5LjE0XCIsa2V5VXNhZ2U6XCIyLjUuMjkuMTVcIixzdWJqZWN0QWx0TmFtZTpcIjIuNS4yOS4xN1wiLGJhc2ljQ29uc3RyYWludHM6XCIyLjUuMjkuMTlcIixuYW1lQ29uc3RyYWludHM6XCIyLjUuMjkuMzBcIixjUkxEaXN0cmlidXRpb25Qb2ludHM6XCIyLjUuMjkuMzFcIixjZXJ0aWZpY2F0ZVBvbGljaWVzOlwiMi41LjI5LjMyXCIsYXV0aG9yaXR5S2V5SWRlbnRpZmllcjpcIjIuNS4yOS4zNVwiLHBvbGljeUNvbnN0cmFpbnRzOlwiMi41LjI5LjM2XCIsZXh0S2V5VXNhZ2U6XCIyLjUuMjkuMzdcIixhdXRob3JpdHlJbmZvQWNjZXNzOlwiMS4zLjYuMS41LjUuNy4xLjFcIixhbnlFeHRlbmRlZEtleVVzYWdlOlwiMi41LjI5LjM3LjBcIixzZXJ2ZXJBdXRoOlwiMS4zLjYuMS41LjUuNy4zLjFcIixjbGllbnRBdXRoOlwiMS4zLjYuMS41LjUuNy4zLjJcIixjb2RlU2lnbmluZzpcIjEuMy42LjEuNS41LjcuMy4zXCIsZW1haWxQcm90ZWN0aW9uOlwiMS4zLjYuMS41LjUuNy4zLjRcIix0aW1lU3RhbXBpbmc6XCIxLjMuNi4xLjUuNS43LjMuOFwiLG9jc3BTaWduaW5nOlwiMS4zLjYuMS41LjUuNy4zLjlcIixlY1B1YmxpY0tleTpcIjEuMi44NDAuMTAwNDUuMi4xXCIsc2VjcDI1NnIxOlwiMS4yLjg0MC4xMDA0NS4zLjEuN1wiLHNlY3AyNTZrMTpcIjEuMy4xMzIuMC4xMFwiLHNlY3AzODRyMTpcIjEuMy4xMzIuMC4zNFwiLHBrY3M1UEJFUzI6XCIxLjIuODQwLjExMzU0OS4xLjUuMTNcIixwa2NzNVBCS0RGMjpcIjEuMi44NDAuMTEzNTQ5LjEuNS4xMlwiLFwiZGVzLUVERTMtQ0JDXCI6XCIxLjIuODQwLjExMzU0OS4zLjdcIixkYXRhOlwiMS4yLjg0MC4xMTM1NDkuMS43LjFcIixcInNpZ25lZC1kYXRhXCI6XCIxLjIuODQwLjExMzU0OS4xLjcuMlwiLFwiZW52ZWxvcGVkLWRhdGFcIjpcIjEuMi44NDAuMTEzNTQ5LjEuNy4zXCIsXCJkaWdlc3RlZC1kYXRhXCI6XCIxLjIuODQwLjExMzU0OS4xLjcuNVwiLFwiZW5jcnlwdGVkLWRhdGFcIjpcIjEuMi44NDAuMTEzNTQ5LjEuNy42XCIsXCJhdXRoZW50aWNhdGVkLWRhdGFcIjpcIjEuMi44NDAuMTEzNTQ5LjEuOS4xNi4xLjJcIix0c3RpbmZvOlwiMS4yLjg0MC4xMTM1NDkuMS45LjE2LjEuNFwiLH07dGhpcy5vYmpDYWNoZT17fTt0aGlzLm5hbWUyb2JqPWZ1bmN0aW9uKGIpe2lmKHR5cGVvZiB0aGlzLm9iakNhY2hlW2JdIT1cInVuZGVmaW5lZFwiKXtyZXR1cm4gdGhpcy5vYmpDYWNoZVtiXX1pZih0eXBlb2YgdGhpcy5uYW1lMm9pZExpc3RbYl09PVwidW5kZWZpbmVkXCIpe3Rocm93XCJOYW1lIG9mIE9iamVjdElkZW50aWZpZXIgbm90IGRlZmluZWQ6IFwiK2J9dmFyIGM9dGhpcy5uYW1lMm9pZExpc3RbYl07dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKHtvaWQ6Y30pO3RoaXMub2JqQ2FjaGVbYl09ZDtyZXR1cm4gZH07dGhpcy5hdHlwZTJvYmo9ZnVuY3Rpb24oYil7aWYodHlwZW9mIHRoaXMub2JqQ2FjaGVbYl0hPVwidW5kZWZpbmVkXCIpe3JldHVybiB0aGlzLm9iakNhY2hlW2JdfWlmKHR5cGVvZiB0aGlzLmF0eXBlMm9pZExpc3RbYl09PVwidW5kZWZpbmVkXCIpe3Rocm93XCJBdHRyaWJ1dGVUeXBlIG5hbWUgdW5kZWZpbmVkOiBcIitifXZhciBjPXRoaXMuYXR5cGUyb2lkTGlzdFtiXTt2YXIgZD1uZXcgS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIoe29pZDpjfSk7dGhpcy5vYmpDYWNoZVtiXT1kO3JldHVybiBkfX07S0pVUi5hc24xLng1MDkuT0lELm9pZDJuYW1lPWZ1bmN0aW9uKGIpe3ZhciBjPUtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZExpc3Q7Zm9yKHZhciBhIGluIGMpe2lmKGNbYV09PWIpe3JldHVybiBhfX1yZXR1cm5cIlwifTtLSlVSLmFzbjEueDUwOS5PSUQubmFtZTJvaWQ9ZnVuY3Rpb24oYSl7dmFyIGI9S0pVUi5hc24xLng1MDkuT0lELm5hbWUyb2lkTGlzdDtpZihiW2FdPT09dW5kZWZpbmVkKXtyZXR1cm5cIlwifXJldHVybiBiW2FdfTtLSlVSLmFzbjEueDUwOS5YNTA5VXRpbD1uZXcgZnVuY3Rpb24oKXt0aGlzLmdldFBLQ1M4UHViS2V5UEVNZnJvbVJTQUtleT1mdW5jdGlvbihpKXt2YXIgaD1udWxsO3ZhciBmPUtKVVIuYXNuMS5BU04xVXRpbC5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleChpLm4pO3ZhciBqPUtKVVIuYXNuMS5BU04xVXRpbC5pbnRlZ2VyVG9CeXRlSGV4KGkuZSk7dmFyIGE9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtoZXg6Zn0pO3ZhciBnPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7aGV4Omp9KTt2YXIgbD1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbYSxnXX0pO3ZhciBjPWwuZ2V0RW5jb2RlZEhleCgpO3ZhciBkPW5ldyBLSlVSLmFzbjEueDUwOS5BbGdvcml0aG1JZGVudGlmaWVyKHtuYW1lOlwicnNhRW5jcnlwdGlvblwifSk7dmFyIGI9bmV3IEtKVVIuYXNuMS5ERVJCaXRTdHJpbmcoe2hleDpcIjAwXCIrY30pO3ZhciBrPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OltkLGJdfSk7dmFyIGU9ay5nZXRFbmNvZGVkSGV4KCk7dmFyIGg9S0pVUi5hc24xLkFTTjFVdGlsLmdldFBFTVN0cmluZ0Zyb21IZXgoZSxcIlBVQkxJQyBLRVlcIik7cmV0dXJuIGh9fTtLSlVSLmFzbjEueDUwOS5YNTA5VXRpbC5uZXdDZXJ0UEVNPWZ1bmN0aW9uKGYpe3ZhciBjPUtKVVIuYXNuMS54NTA5O3ZhciBlPW5ldyBjLlRCU0NlcnRpZmljYXRlKCk7aWYoZi5zZXJpYWwhPT11bmRlZmluZWQpe2Uuc2V0U2VyaWFsTnVtYmVyQnlQYXJhbShmLnNlcmlhbCl9ZWxzZXt0aHJvd1wic2VyaWFsIG51bWJlciB1bmRlZmluZWQuXCJ9aWYodHlwZW9mIGYuc2lnYWxnLm5hbWU9PVwic3RyaW5nXCIpe2Uuc2V0U2lnbmF0dXJlQWxnQnlQYXJhbShmLnNpZ2FsZyl9ZWxzZXt0aHJvd1widW5wcm9wZXIgc2lnbmF0dXJlIGFsZ29yaXRobSBuYW1lXCJ9aWYoZi5pc3N1ZXIhPT11bmRlZmluZWQpe2Uuc2V0SXNzdWVyQnlQYXJhbShmLmlzc3Vlcil9ZWxzZXt0aHJvd1wiaXNzdWVyIG5hbWUgdW5kZWZpbmVkLlwifWlmKGYubm90YmVmb3JlIT09dW5kZWZpbmVkKXtlLnNldE5vdEJlZm9yZUJ5UGFyYW0oZi5ub3RiZWZvcmUpfWVsc2V7dGhyb3dcIm5vdGJlZm9yZSB1bmRlZmluZWQuXCJ9aWYoZi5ub3RhZnRlciE9PXVuZGVmaW5lZCl7ZS5zZXROb3RBZnRlckJ5UGFyYW0oZi5ub3RhZnRlcil9ZWxzZXt0aHJvd1wibm90YWZ0ZXIgdW5kZWZpbmVkLlwifWlmKGYuc3ViamVjdCE9PXVuZGVmaW5lZCl7ZS5zZXRTdWJqZWN0QnlQYXJhbShmLnN1YmplY3QpfWVsc2V7dGhyb3dcInN1YmplY3QgbmFtZSB1bmRlZmluZWQuXCJ9aWYoZi5zYmpwdWJrZXkhPT11bmRlZmluZWQpe2Uuc2V0U3ViamVjdFB1YmxpY0tleUJ5R2V0S2V5KGYuc2JqcHVia2V5KX1lbHNle3Rocm93XCJzdWJqZWN0IHB1YmxpYyBrZXkgdW5kZWZpbmVkLlwifWlmKGYuZXh0IT09dW5kZWZpbmVkJiZmLmV4dC5sZW5ndGghPT11bmRlZmluZWQpe2Zvcih2YXIgYj0wO2I8Zi5leHQubGVuZ3RoO2IrKyl7Zm9yKGtleSBpbiBmLmV4dFtiXSl7ZS5hcHBlbmRFeHRlbnNpb25CeU5hbWUoa2V5LGYuZXh0W2JdW2tleV0pfX19aWYoZi5jYWtleT09PXVuZGVmaW5lZCYmZi5zaWdoZXg9PT11bmRlZmluZWQpe3Rocm93XCJwYXJhbSBjYWtleSBhbmQgc2lnaGV4IHVuZGVmaW5lZC5cIn12YXIgZD1udWxsO3ZhciBhPW51bGw7aWYoZi5jYWtleSl7ZD1LRVlVVElMLmdldEtleS5hcHBseShudWxsLGYuY2FrZXkpO2E9bmV3IGMuQ2VydGlmaWNhdGUoe3Ric2NlcnRvYmo6ZSxwcnZrZXlvYmo6ZH0pO2Euc2lnbigpfWlmKGYuc2lnaGV4KXthPW5ldyBjLkNlcnRpZmljYXRlKHt0YnNjZXJ0b2JqOmV9KTthLnNldFNpZ25hdHVyZUhleChmLnNpZ2hleCl9cmV0dXJuIGEuZ2V0UEVNU3RyaW5nKCl9O1xuXHQvKiEgYXNuMWNtcy0xLjAuMi5qcyAoYykgMjAxMy0yMDE0IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG5cdCAqL1xuXHRpZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIuYXNuMT09XCJ1bmRlZmluZWRcInx8IUtKVVIuYXNuMSl7S0pVUi5hc24xPXt9fWlmKHR5cGVvZiBLSlVSLmFzbjEuY21zPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xLmNtcyl7S0pVUi5hc24xLmNtcz17fX1LSlVSLmFzbjEuY21zLkF0dHJpYnV0ZT1mdW5jdGlvbihiKXtLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9W107dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGYsZSxjO2Y9bmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKHtvaWQ6dGhpcy5hdHRyVHlwZU9pZH0pO2U9bmV3IEtKVVIuYXNuMS5ERVJTZXQoe2FycmF5OnRoaXMudmFsdWVMaXN0fSk7dHJ5e2UuZ2V0RW5jb2RlZEhleCgpfWNhdGNoKGQpe3Rocm93XCJmYWlsIHZhbHVlU2V0LmdldEVuY29kZWRIZXggaW4gQXR0cmlidXRlKDEpL1wiK2R9Yz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTpbZixlXX0pO3RyeXt0aGlzLmhUTFY9Yy5nZXRFbmNvZGVkSGV4KCl9Y2F0Y2goZCl7dGhyb3dcImZhaWxlZCBzZXEuZ2V0RW5jb2RlZEhleCBpbiBBdHRyaWJ1dGUoMikvXCIrZH1yZXR1cm4gdGhpcy5oVExWfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNtcy5BdHRyaWJ1dGUsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5jbXMuQ29udGVudFR5cGU9ZnVuY3Rpb24oYil7S0pVUi5hc24xLmNtcy5Db250ZW50VHlwZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5hdHRyVHlwZU9pZD1cIjEuMi44NDAuMTEzNTQ5LjEuOS4zXCI7dmFyIGE9bnVsbDtpZih0eXBlb2YgYiE9XCJ1bmRlZmluZWRcIil7dmFyIGE9bmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKGIpO3RoaXMudmFsdWVMaXN0PVthXX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5jbXMuQ29udGVudFR5cGUsS0pVUi5hc24xLmNtcy5BdHRyaWJ1dGUpO0tKVVIuYXNuMS5jbXMuTWVzc2FnZURpZ2VzdD1mdW5jdGlvbihlKXtLSlVSLmFzbjEuY21zLk1lc3NhZ2VEaWdlc3Quc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuYXR0clR5cGVPaWQ9XCIxLjIuODQwLjExMzU0OS4xLjkuNFwiO2lmKHR5cGVvZiBlIT1cInVuZGVmaW5lZFwiKXtpZihlLmVjaU9iaiBpbnN0YW5jZW9mIEtKVVIuYXNuMS5jbXMuRW5jYXBzdWxhdGVkQ29udGVudEluZm8mJnR5cGVvZiBlLmhhc2hBbGc9PVwic3RyaW5nXCIpe3ZhciBiPWUuZWNpT2JqLmVDb250ZW50VmFsdWVIZXg7dmFyIGE9ZS5oYXNoQWxnO3ZhciBjPUtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChiLGEpO3ZhciBkPW5ldyBLSlVSLmFzbjEuREVST2N0ZXRTdHJpbmcoe2hleDpjfSk7ZC5nZXRFbmNvZGVkSGV4KCk7dGhpcy52YWx1ZUxpc3Q9W2RdfWVsc2V7dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJPY3RldFN0cmluZyhlKTtkLmdldEVuY29kZWRIZXgoKTt0aGlzLnZhbHVlTGlzdD1bZF19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNtcy5NZXNzYWdlRGlnZXN0LEtKVVIuYXNuMS5jbXMuQXR0cmlidXRlKTtLSlVSLmFzbjEuY21zLlNpZ25pbmdUaW1lPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5jbXMuU2lnbmluZ1RpbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuYXR0clR5cGVPaWQ9XCIxLjIuODQwLjExMzU0OS4xLjkuNVwiO2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXt2YXIgYT1uZXcgS0pVUi5hc24xLng1MDkuVGltZShjKTt0cnl7YS5nZXRFbmNvZGVkSGV4KCl9Y2F0Y2goYil7dGhyb3dcIlNpZ25pbmdUaW1lLmdldEVuY29kZWRIZXgoKSBmYWlsZWQvXCIrYn10aGlzLnZhbHVlTGlzdD1bYV19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY21zLlNpZ25pbmdUaW1lLEtKVVIuYXNuMS5jbXMuQXR0cmlidXRlKTtLSlVSLmFzbjEuY21zLlNpZ25pbmdDZXJ0aWZpY2F0ZT1mdW5jdGlvbihkKXtLSlVSLmFzbjEuY21zLlNpZ25pbmdDZXJ0aWZpY2F0ZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5hdHRyVHlwZU9pZD1cIjEuMi44NDAuMTEzNTQ5LjEuOS4xNi4yLjEyXCI7dmFyIGE9S0pVUi5hc24xO3ZhciBjPUtKVVIuYXNuMS5jbXM7dmFyIGI9S0pVUi5jcnlwdG87dGhpcy5zZXRDZXJ0cz1mdW5jdGlvbihsKXt2YXIgaj1bXTtmb3IodmFyIGg9MDtoPGwubGVuZ3RoO2grKyl7dmFyIGY9S0VZVVRJTC5nZXRIZXhGcm9tUEVNKGxbaF0pO3ZhciBlPWIuVXRpbC5oYXNoSGV4KGYsXCJzaGExXCIpO3ZhciBtPW5ldyBhLkRFUk9jdGV0U3RyaW5nKHtoZXg6ZX0pO20uZ2V0RW5jb2RlZEhleCgpO3ZhciBrPW5ldyBjLklzc3VlckFuZFNlcmlhbE51bWJlcih7Y2VydDpsW2hdfSk7ay5nZXRFbmNvZGVkSGV4KCk7dmFyIG49bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5OlttLGtdfSk7bi5nZXRFbmNvZGVkSGV4KCk7ai5wdXNoKG4pfXZhciBnPW5ldyBhLkRFUlNlcXVlbmNlKHthcnJheTpqfSk7Zy5nZXRFbmNvZGVkSGV4KCk7dGhpcy52YWx1ZUxpc3Q9W2ddfTtpZih0eXBlb2YgZCE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGQuYXJyYXk9PVwib2JqZWN0XCIpe3RoaXMuc2V0Q2VydHMoZC5hcnJheSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNtcy5TaWduaW5nQ2VydGlmaWNhdGUsS0pVUi5hc24xLmNtcy5BdHRyaWJ1dGUpO0tKVVIuYXNuMS5jbXMuU2lnbmluZ0NlcnRpZmljYXRlVjI9ZnVuY3Rpb24oZSl7S0pVUi5hc24xLmNtcy5TaWduaW5nQ2VydGlmaWNhdGVWMi5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5hdHRyVHlwZU9pZD1cIjEuMi44NDAuMTEzNTQ5LjEuOS4xNi4yLjQ3XCI7dmFyIGI9S0pVUi5hc24xO3ZhciBmPUtKVVIuYXNuMS54NTA5O3ZhciBkPUtKVVIuYXNuMS5jbXM7dmFyIGM9S0pVUi5jcnlwdG87dGhpcy5zZXRDZXJ0cz1mdW5jdGlvbihwLGgpe3ZhciBuPVtdO2Zvcih2YXIgbD0wO2w8cC5sZW5ndGg7bCsrKXt2YXIgaj1LRVlVVElMLmdldEhleEZyb21QRU0ocFtsXSk7dmFyIHI9W107aWYoaCE9XCJzaGEyNTZcIil7ci5wdXNoKG5ldyBmLkFsZ29yaXRobUlkZW50aWZpZXIoe25hbWU6aH0pKX12YXIgZz1jLlV0aWwuaGFzaEhleChqLGgpO3ZhciBxPW5ldyBiLkRFUk9jdGV0U3RyaW5nKHtoZXg6Z30pO3EuZ2V0RW5jb2RlZEhleCgpO3IucHVzaChxKTt2YXIgbT1uZXcgZC5Jc3N1ZXJBbmRTZXJpYWxOdW1iZXIoe2NlcnQ6cFtsXX0pO20uZ2V0RW5jb2RlZEhleCgpO3IucHVzaChtKTt2YXIgbz1uZXcgYi5ERVJTZXF1ZW5jZSh7YXJyYXk6cn0pO28uZ2V0RW5jb2RlZEhleCgpO24ucHVzaChvKX12YXIgaz1uZXcgYi5ERVJTZXF1ZW5jZSh7YXJyYXk6bn0pO2suZ2V0RW5jb2RlZEhleCgpO3RoaXMudmFsdWVMaXN0PVtrXX07aWYodHlwZW9mIGUhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBlLmFycmF5PT1cIm9iamVjdFwiKXt2YXIgYT1cInNoYTI1NlwiO2lmKHR5cGVvZiBlLmhhc2hBbGc9PVwic3RyaW5nXCIpe2E9ZS5oYXNoQWxnfXRoaXMuc2V0Q2VydHMoZS5hcnJheSxhKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY21zLlNpZ25pbmdDZXJ0aWZpY2F0ZVYyLEtKVVIuYXNuMS5jbXMuQXR0cmlidXRlKTtLSlVSLmFzbjEuY21zLklzc3VlckFuZFNlcmlhbE51bWJlcj1mdW5jdGlvbihjKXtLSlVSLmFzbjEuY21zLklzc3VlckFuZFNlcmlhbE51bWJlci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGU9bnVsbDt2YXIgYj1udWxsO3ZhciBhPUtKVVIuYXNuMTt2YXIgZD1hLng1MDk7dGhpcy5zZXRCeUNlcnRQRU09ZnVuY3Rpb24oaSl7dmFyIGc9S0VZVVRJTC5nZXRIZXhGcm9tUEVNKGkpO3ZhciBmPW5ldyBYNTA5KCk7Zi5oZXg9Zzt2YXIgaj1mLmdldElzc3VlckhleCgpO3RoaXMuZElzc3Vlcj1uZXcgZC5YNTAwTmFtZSgpO3RoaXMuZElzc3Vlci5oVExWPWo7dmFyIGg9Zi5nZXRTZXJpYWxOdW1iZXJIZXgoKTt0aGlzLmRTZXJpYWw9bmV3IGEuREVSSW50ZWdlcih7aGV4Omh9KX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGY9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6W3RoaXMuZElzc3Vlcix0aGlzLmRTZXJpYWxdfSk7dGhpcy5oVExWPWYuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYz09XCJzdHJpbmdcIiYmYy5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIikhPS0xKXt0aGlzLnNldEJ5Q2VydFBFTShjKX1pZihjLmlzc3VlciYmYy5zZXJpYWwpe2lmKGMuaXNzdWVyIGluc3RhbmNlb2YgS0pVUi5hc24xLng1MDkuWDUwME5hbWUpe3RoaXMuZElzc3Vlcj1jLmlzc3Vlcn1lbHNle3RoaXMuZElzc3Vlcj1uZXcgS0pVUi5hc24xLng1MDkuWDUwME5hbWUoYy5pc3N1ZXIpfWlmKGMuc2VyaWFsIGluc3RhbmNlb2YgS0pVUi5hc24xLkRFUkludGVnZXIpe3RoaXMuZFNlcmlhbD1jLnNlcmlhbH1lbHNle3RoaXMuZFNlcmlhbD1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoYy5zZXJpYWwpfX1pZih0eXBlb2YgYy5jZXJ0PT1cInN0cmluZ1wiKXt0aGlzLnNldEJ5Q2VydFBFTShjLmNlcnQpfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5jbXMuSXNzdWVyQW5kU2VyaWFsTnVtYmVyLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZUxpc3Q9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLmNtcy5BdHRyaWJ1dGVMaXN0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmxpc3Q9bmV3IEFycmF5KCk7dGhpcy5zb3J0RmxhZz10cnVlO3RoaXMuYWRkPWZ1bmN0aW9uKGIpe2lmKGIgaW5zdGFuY2VvZiBLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZSl7dGhpcy5saXN0LnB1c2goYil9fTt0aGlzLmxlbmd0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxpc3QubGVuZ3RofTt0aGlzLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5saXN0PW5ldyBBcnJheSgpO3RoaXMuaFRMVj1udWxsO3RoaXMuaFY9bnVsbH07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodHlwZW9mIHRoaXMuaFRMVj09XCJzdHJpbmdcIil7cmV0dXJuIHRoaXMuaFRMVn12YXIgYj1uZXcgS0pVUi5hc24xLkRFUlNldCh7YXJyYXk6dGhpcy5saXN0LHNvcnRmbGFnOnRoaXMuc29ydEZsYWd9KTt0aGlzLmhUTFY9Yi5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhLnNvcnRmbGFnIT1cInVuZGVmaW5lZFwiJiZhLnNvcnRmbGFnPT1mYWxzZSl7dGhpcy5zb3J0RmxhZz1mYWxzZX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZUxpc3QsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5jbXMuU2lnbmVySW5mbz1mdW5jdGlvbihjKXtLSlVSLmFzbjEuY21zLlNpZ25lckluZm8uc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgYj1LSlVSLmFzbjEuY21zO3ZhciBkPUtKVVIuYXNuMS54NTA5O3RoaXMuZENNU1ZlcnNpb249bmV3IGEuREVSSW50ZWdlcih7XCJpbnRcIjoxfSk7dGhpcy5kU2lnbmVySWRlbnRpZmllcj1udWxsO3RoaXMuZERpZ2VzdEFsZ29yaXRobT1udWxsO3RoaXMuZFNpZ25lZEF0dHJzPW5ldyBiLkF0dHJpYnV0ZUxpc3QoKTt0aGlzLmRTaWdBbGc9bnVsbDt0aGlzLmRTaWc9bnVsbDt0aGlzLmRVbnNpZ25lZEF0dHJzPW5ldyBiLkF0dHJpYnV0ZUxpc3QoKTt0aGlzLnNldFNpZ25lcklkZW50aWZpZXI9ZnVuY3Rpb24oZil7aWYodHlwZW9mIGY9PVwic3RyaW5nXCImJmYuaW5kZXhPZihcIkNFUlRJRklDQVRFXCIpIT0tMSYmZi5pbmRleE9mKFwiQkVHSU5cIikhPS0xJiZmLmluZGV4T2YoXCJFTkRcIikhPS0xKXt2YXIgZT1mO3RoaXMuZFNpZ25lcklkZW50aWZpZXI9bmV3IGIuSXNzdWVyQW5kU2VyaWFsTnVtYmVyKHtjZXJ0OmZ9KX19O3RoaXMuc2V0Rm9yQ29udGVudEFuZEhhc2g9ZnVuY3Rpb24oZSl7aWYodHlwZW9mIGUhPVwidW5kZWZpbmVkXCIpe2lmKGUuZWNpT2JqIGluc3RhbmNlb2YgS0pVUi5hc24xLmNtcy5FbmNhcHN1bGF0ZWRDb250ZW50SW5mbyl7dGhpcy5kU2lnbmVkQXR0cnMuYWRkKG5ldyBiLkNvbnRlbnRUeXBlKHtvaWQ6XCIxLjIuODQwLjExMzU0OS4xLjcuMVwifSkpO3RoaXMuZFNpZ25lZEF0dHJzLmFkZChuZXcgYi5NZXNzYWdlRGlnZXN0KHtlY2lPYmo6ZS5lY2lPYmosaGFzaEFsZzplLmhhc2hBbGd9KSl9aWYodHlwZW9mIGUuc2RPYmohPVwidW5kZWZpbmVkXCImJmUuc2RPYmogaW5zdGFuY2VvZiBLSlVSLmFzbjEuY21zLlNpZ25lZERhdGEpe2lmKGUuc2RPYmouZGlnZXN0QWxnTmFtZUxpc3Quam9pbihcIjpcIikuaW5kZXhPZihlLmhhc2hBbGcpPT0tMSl7ZS5zZE9iai5kaWdlc3RBbGdOYW1lTGlzdC5wdXNoKGUuaGFzaEFsZyl9fWlmKHR5cGVvZiBlLmhhc2hBbGc9PVwic3RyaW5nXCIpe3RoaXMuZERpZ2VzdEFsZ29yaXRobT1uZXcgZC5BbGdvcml0aG1JZGVudGlmaWVyKHtuYW1lOmUuaGFzaEFsZ30pfX19O3RoaXMuc2lnbj1mdW5jdGlvbihqLGYpe3RoaXMuZFNpZ0FsZz1uZXcgZC5BbGdvcml0aG1JZGVudGlmaWVyKHtuYW1lOmZ9KTt2YXIgZz10aGlzLmRTaWduZWRBdHRycy5nZXRFbmNvZGVkSGV4KCk7dmFyIGU9S0VZVVRJTC5nZXRLZXkoaik7dmFyIGk9bmV3IEtKVVIuY3J5cHRvLlNpZ25hdHVyZSh7YWxnOmZ9KTtpLmluaXQoZSk7aS51cGRhdGVIZXgoZyk7dmFyIGg9aS5zaWduKCk7dGhpcy5kU2lnPW5ldyBhLkRFUk9jdGV0U3RyaW5nKHtoZXg6aH0pfTt0aGlzLmFkZFVuc2lnbmVkPWZ1bmN0aW9uKGUpe3RoaXMuaFRMVj1udWxsO3RoaXMuZFVuc2lnbmVkQXR0cnMuaFRMVj1udWxsO3RoaXMuZFVuc2lnbmVkQXR0cnMuYWRkKGUpfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLmRTaWduZWRBdHRycyBpbnN0YW5jZW9mIEtKVVIuYXNuMS5jbXMuQXR0cmlidXRlTGlzdCYmdGhpcy5kU2lnbmVkQXR0cnMubGVuZ3RoKCk9PTApe3Rocm93XCJTaWduZWRBdHRycyBsZW5ndGggPSAwIChlbXB0eSlcIn12YXIgZT1uZXcgYS5ERVJUYWdnZWRPYmplY3Qoe29iajp0aGlzLmRTaWduZWRBdHRycyx0YWc6XCJhMFwiLGV4cGxpY2l0OmZhbHNlfSk7dmFyIGg9bnVsbDtpZih0aGlzLmRVbnNpZ25lZEF0dHJzLmxlbmd0aCgpPjApe2g9bmV3IGEuREVSVGFnZ2VkT2JqZWN0KHtvYmo6dGhpcy5kVW5zaWduZWRBdHRycyx0YWc6XCJhMVwiLGV4cGxpY2l0OmZhbHNlfSl9dmFyIGc9W3RoaXMuZENNU1ZlcnNpb24sdGhpcy5kU2lnbmVySWRlbnRpZmllcix0aGlzLmREaWdlc3RBbGdvcml0aG0sZSx0aGlzLmRTaWdBbGcsdGhpcy5kU2lnLF07aWYoaCE9bnVsbCl7Zy5wdXNoKGgpfXZhciBmPW5ldyBhLkRFUlNlcXVlbmNlKHthcnJheTpnfSk7dGhpcy5oVExWPWYuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY21zLlNpZ25lckluZm8sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5jbXMuRW5jYXBzdWxhdGVkQ29udGVudEluZm89ZnVuY3Rpb24oYyl7S0pVUi5hc24xLmNtcy5FbmNhcHN1bGF0ZWRDb250ZW50SW5mby5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9S0pVUi5hc24xO3ZhciBiPUtKVVIuYXNuMS5jbXM7dmFyIGQ9S0pVUi5hc24xLng1MDk7dGhpcy5kRUNvbnRlbnRUeXBlPW5ldyBhLkRFUk9iamVjdElkZW50aWZpZXIoe25hbWU6XCJkYXRhXCJ9KTt0aGlzLmRFQ29udGVudD1udWxsO3RoaXMuaXNEZXRhY2hlZD1mYWxzZTt0aGlzLmVDb250ZW50VmFsdWVIZXg9bnVsbDt0aGlzLnNldENvbnRlbnRUeXBlPWZ1bmN0aW9uKGUpe2lmKGUubWF0Y2goL15bMC0yXVsuXVswLTkuXSskLykpe3RoaXMuZEVDb250ZW50VHlwZT1uZXcgYS5ERVJPYmplY3RJZGVudGlmaWVyKHtvaWQ6ZX0pfWVsc2V7dGhpcy5kRUNvbnRlbnRUeXBlPW5ldyBhLkRFUk9iamVjdElkZW50aWZpZXIoe25hbWU6ZX0pfX07dGhpcy5zZXRDb250ZW50VmFsdWU9ZnVuY3Rpb24oZSl7aWYodHlwZW9mIGUhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBlLmhleD09XCJzdHJpbmdcIil7dGhpcy5lQ29udGVudFZhbHVlSGV4PWUuaGV4fWVsc2V7aWYodHlwZW9mIGUuc3RyPT1cInN0cmluZ1wiKXt0aGlzLmVDb250ZW50VmFsdWVIZXg9dXRmOHRvaGV4KGUuc3RyKX19fX07dGhpcy5zZXRDb250ZW50VmFsdWVIZXg9ZnVuY3Rpb24oZSl7dGhpcy5lQ29udGVudFZhbHVlSGV4PWV9O3RoaXMuc2V0Q29udGVudFZhbHVlU3RyPWZ1bmN0aW9uKGUpe3RoaXMuZUNvbnRlbnRWYWx1ZUhleD11dGY4dG9oZXgoZSl9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLmVDb250ZW50VmFsdWVIZXghPVwic3RyaW5nXCIpe3Rocm93XCJlQ29udGVudFZhbHVlIG5vdCB5ZXQgc2V0XCJ9dmFyIGc9bmV3IGEuREVST2N0ZXRTdHJpbmcoe2hleDp0aGlzLmVDb250ZW50VmFsdWVIZXh9KTt0aGlzLmRFQ29udGVudD1uZXcgYS5ERVJUYWdnZWRPYmplY3Qoe29iajpnLHRhZzpcImEwXCIsZXhwbGljaXQ6dHJ1ZX0pO3ZhciBlPVt0aGlzLmRFQ29udGVudFR5cGVdO2lmKCF0aGlzLmlzRGV0YWNoZWQpe2UucHVzaCh0aGlzLmRFQ29udGVudCl9dmFyIGY9bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5OmV9KTt0aGlzLmhUTFY9Zi5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5jbXMuRW5jYXBzdWxhdGVkQ29udGVudEluZm8sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5jbXMuQ29udGVudEluZm89ZnVuY3Rpb24oYyl7S0pVUi5hc24xLmNtcy5Db250ZW50SW5mby5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9S0pVUi5hc24xO3ZhciBiPUtKVVIuYXNuMS5jbXM7dmFyIGQ9S0pVUi5hc24xLng1MDk7dGhpcy5kQ29udGVudFR5cGU9bnVsbDt0aGlzLmRDb250ZW50PW51bGw7dGhpcy5zZXRDb250ZW50VHlwZT1mdW5jdGlvbihlKXtpZih0eXBlb2YgZT09XCJzdHJpbmdcIil7dGhpcy5kQ29udGVudFR5cGU9ZC5PSUQubmFtZTJvYmooZSl9fTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgZj1uZXcgYS5ERVJUYWdnZWRPYmplY3Qoe29iajp0aGlzLmRDb250ZW50LHRhZzpcImEwXCIsZXhwbGljaXQ6dHJ1ZX0pO3ZhciBlPW5ldyBhLkRFUlNlcXVlbmNlKHthcnJheTpbdGhpcy5kQ29udGVudFR5cGUsZl19KTt0aGlzLmhUTFY9ZS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGMhPVwidW5kZWZpbmVkXCIpe2lmKGMudHlwZSl7dGhpcy5zZXRDb250ZW50VHlwZShjLnR5cGUpfWlmKGMub2JqJiZjLm9iaiBpbnN0YW5jZW9mIGEuQVNOMU9iamVjdCl7dGhpcy5kQ29udGVudD1jLm9ian19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY21zLkNvbnRlbnRJbmZvLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY21zLlNpZ25lZERhdGE9ZnVuY3Rpb24oYyl7S0pVUi5hc24xLmNtcy5TaWduZWREYXRhLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dmFyIGI9S0pVUi5hc24xLmNtczt2YXIgZD1LSlVSLmFzbjEueDUwOTt0aGlzLmRDTVNWZXJzaW9uPW5ldyBhLkRFUkludGVnZXIoe1wiaW50XCI6MX0pO3RoaXMuZERpZ2VzdEFsZ3M9bnVsbDt0aGlzLmRpZ2VzdEFsZ05hbWVMaXN0PVtdO3RoaXMuZEVuY2FwQ29udGVudEluZm89bmV3IGIuRW5jYXBzdWxhdGVkQ29udGVudEluZm8oKTt0aGlzLmRDZXJ0cz1udWxsO3RoaXMuY2VydGlmaWNhdGVMaXN0PVtdO3RoaXMuY3JsTGlzdD1bXTt0aGlzLnNpZ25lckluZm9MaXN0PVtuZXcgYi5TaWduZXJJbmZvKCldO3RoaXMuYWRkQ2VydGlmaWNhdGVzQnlQRU09ZnVuY3Rpb24oZSl7dmFyIGY9S0VZVVRJTC5nZXRIZXhGcm9tUEVNKGUpO3ZhciBnPW5ldyBhLkFTTjFPYmplY3QoKTtnLmhUTFY9Zjt0aGlzLmNlcnRpZmljYXRlTGlzdC5wdXNoKGcpfTt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0eXBlb2YgdGhpcy5oVExWPT1cInN0cmluZ1wiKXtyZXR1cm4gdGhpcy5oVExWfWlmKHRoaXMuZERpZ2VzdEFsZ3M9PW51bGwpe3ZhciBrPVtdO2Zvcih2YXIgaj0wO2o8dGhpcy5kaWdlc3RBbGdOYW1lTGlzdC5sZW5ndGg7aisrKXt2YXIgaD10aGlzLmRpZ2VzdEFsZ05hbWVMaXN0W2pdO3ZhciBtPW5ldyBkLkFsZ29yaXRobUlkZW50aWZpZXIoe25hbWU6aH0pO2sucHVzaChtKX10aGlzLmREaWdlc3RBbGdzPW5ldyBhLkRFUlNldCh7YXJyYXk6a30pfXZhciBlPVt0aGlzLmRDTVNWZXJzaW9uLHRoaXMuZERpZ2VzdEFsZ3MsdGhpcy5kRW5jYXBDb250ZW50SW5mb107aWYodGhpcy5kQ2VydHM9PW51bGwpe2lmKHRoaXMuY2VydGlmaWNhdGVMaXN0Lmxlbmd0aD4wKXt2YXIgbD1uZXcgYS5ERVJTZXQoe2FycmF5OnRoaXMuY2VydGlmaWNhdGVMaXN0fSk7dGhpcy5kQ2VydHM9bmV3IGEuREVSVGFnZ2VkT2JqZWN0KHtvYmo6bCx0YWc6XCJhMFwiLGV4cGxpY2l0OmZhbHNlfSl9fWlmKHRoaXMuZENlcnRzIT1udWxsKXtlLnB1c2godGhpcy5kQ2VydHMpfXZhciBnPW5ldyBhLkRFUlNldCh7YXJyYXk6dGhpcy5zaWduZXJJbmZvTGlzdH0pO2UucHVzaChnKTt2YXIgZj1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6ZX0pO3RoaXMuaFRMVj1mLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTt0aGlzLmdldENvbnRlbnRJbmZvPWZ1bmN0aW9uKCl7dGhpcy5nZXRFbmNvZGVkSGV4KCk7dmFyIGU9bmV3IGIuQ29udGVudEluZm8oe3R5cGU6XCJzaWduZWQtZGF0YVwiLG9iajp0aGlzfSk7cmV0dXJuIGV9O3RoaXMuZ2V0Q29udGVudEluZm9FbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZXRDb250ZW50SW5mbygpO3ZhciBmPWUuZ2V0RW5jb2RlZEhleCgpO3JldHVybiBmfTt0aGlzLmdldFBFTT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuZ2V0Q29udGVudEluZm9FbmNvZGVkSGV4KCk7dmFyIGY9YS5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KGUsXCJDTVNcIik7cmV0dXJuIGZ9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY21zLlNpZ25lZERhdGEsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5jbXMuQ01TVXRpbD1uZXcgZnVuY3Rpb24oKXt9O0tKVVIuYXNuMS5jbXMuQ01TVXRpbC5uZXdTaWduZWREYXRhPWZ1bmN0aW9uKGEpe3ZhciBoPUtKVVIuYXNuMS5jbXM7dmFyIGc9S0pVUi5hc24xLmNhZGVzO3ZhciBmPW5ldyBoLlNpZ25lZERhdGEoKTtmLmRFbmNhcENvbnRlbnRJbmZvLnNldENvbnRlbnRWYWx1ZShhLmNvbnRlbnQpO2lmKHR5cGVvZiBhLmNlcnRzPT1cIm9iamVjdFwiKXtmb3IodmFyIGI9MDtiPGEuY2VydHMubGVuZ3RoO2IrKyl7Zi5hZGRDZXJ0aWZpY2F0ZXNCeVBFTShhLmNlcnRzW2JdKX19Zi5zaWduZXJJbmZvTGlzdD1bXTtmb3IodmFyIGI9MDtiPGEuc2lnbmVySW5mb3MubGVuZ3RoO2IrKyl7dmFyIGQ9YS5zaWduZXJJbmZvc1tiXTt2YXIgYz1uZXcgaC5TaWduZXJJbmZvKCk7Yy5zZXRTaWduZXJJZGVudGlmaWVyKGQuc2lnbmVyQ2VydCk7Yy5zZXRGb3JDb250ZW50QW5kSGFzaCh7c2RPYmo6ZixlY2lPYmo6Zi5kRW5jYXBDb250ZW50SW5mbyxoYXNoQWxnOmQuaGFzaEFsZ30pO2ZvcihhdHRyTmFtZSBpbiBkLnNBdHRyKXt2YXIgaj1kLnNBdHRyW2F0dHJOYW1lXTtpZihhdHRyTmFtZT09XCJTaWduaW5nVGltZVwiKXt2YXIgZT1uZXcgaC5TaWduaW5nVGltZShqKTtjLmRTaWduZWRBdHRycy5hZGQoZSl9aWYoYXR0ck5hbWU9PVwiU2lnbmluZ0NlcnRpZmljYXRlXCIpe3ZhciBlPW5ldyBoLlNpZ25pbmdDZXJ0aWZpY2F0ZShqKTtjLmRTaWduZWRBdHRycy5hZGQoZSl9aWYoYXR0ck5hbWU9PVwiU2lnbmluZ0NlcnRpZmljYXRlVjJcIil7dmFyIGU9bmV3IGguU2lnbmluZ0NlcnRpZmljYXRlVjIoaik7Yy5kU2lnbmVkQXR0cnMuYWRkKGUpfWlmKGF0dHJOYW1lPT1cIlNpZ25hdHVyZVBvbGljeUlkZW50aWZpZXJcIil7dmFyIGU9bmV3IGcuU2lnbmF0dXJlUG9saWN5SWRlbnRpZmllcihqKTtjLmRTaWduZWRBdHRycy5hZGQoZSl9fWMuc2lnbihkLnNpZ25lclBydktleSxkLnNpZ0FsZyk7Zi5zaWduZXJJbmZvTGlzdC5wdXNoKGMpfXJldHVybiBmfTtcblx0LyohIGFzbjF0c3AtMS4wLjEuanMgKGMpIDIwMTQgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2Vcblx0ICovXG5cdGlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5hc24xPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xKXtLSlVSLmFzbjE9e319aWYodHlwZW9mIEtKVVIuYXNuMS50c3A9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmFzbjEudHNwKXtLSlVSLmFzbjEudHNwPXt9fUtKVVIuYXNuMS50c3AuQWNjdXJhY3k9ZnVuY3Rpb24oYil7S0pVUi5hc24xLnRzcC5BY2N1cmFjeS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9S0pVUi5hc24xO3RoaXMuc2Vjb25kcz1udWxsO3RoaXMubWlsbGlzPW51bGw7dGhpcy5taWNyb3M9bnVsbDt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgZT1udWxsO3ZhciBnPW51bGw7dmFyIGk9bnVsbDt2YXIgYz1bXTtpZih0aGlzLnNlY29uZHMhPW51bGwpe2U9bmV3IGEuREVSSW50ZWdlcih7XCJpbnRcIjp0aGlzLnNlY29uZHN9KTtjLnB1c2goZSl9aWYodGhpcy5taWxsaXMhPW51bGwpe3ZhciBoPW5ldyBhLkRFUkludGVnZXIoe1wiaW50XCI6dGhpcy5taWxsaXN9KTtnPW5ldyBhLkRFUlRhZ2dlZE9iamVjdCh7b2JqOmgsdGFnOlwiODBcIixleHBsaWNpdDpmYWxzZX0pO2MucHVzaChnKX1pZih0aGlzLm1pY3JvcyE9bnVsbCl7dmFyIGY9bmV3IGEuREVSSW50ZWdlcih7XCJpbnRcIjp0aGlzLm1pY3Jvc30pO2k9bmV3IGEuREVSVGFnZ2VkT2JqZWN0KHtvYmo6Zix0YWc6XCI4MVwiLGV4cGxpY2l0OmZhbHNlfSk7Yy5wdXNoKGkpfXZhciBkPW5ldyBhLkRFUlNlcXVlbmNlKHthcnJheTpjfSk7dGhpcy5oVExWPWQuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBiIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYi5zZWNvbmRzPT1cIm51bWJlclwiKXt0aGlzLnNlY29uZHM9Yi5zZWNvbmRzfWlmKHR5cGVvZiBiLm1pbGxpcz09XCJudW1iZXJcIil7dGhpcy5taWxsaXM9Yi5taWxsaXN9aWYodHlwZW9mIGIubWljcm9zPT1cIm51bWJlclwiKXt0aGlzLm1pY3Jvcz1iLm1pY3Jvc319fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEudHNwLkFjY3VyYWN5LEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEudHNwLk1lc3NhZ2VJbXByaW50PWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS50c3AuTWVzc2FnZUltcHJpbnQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgYz1LSlVSLmFzbjEueDUwOTt0aGlzLmRIYXNoQWxnPW51bGw7dGhpcy5kSGFzaFZhbHVlPW51bGw7dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodHlwZW9mIHRoaXMuaFRMVj09XCJzdHJpbmdcIil7cmV0dXJuIHRoaXMuaFRMVn12YXIgZD1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6W3RoaXMuZEhhc2hBbGcsdGhpcy5kSGFzaFZhbHVlXX0pO3JldHVybiBkLmdldEVuY29kZWRIZXgoKX07aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBiLmhhc2hBbGc9PVwic3RyaW5nXCIpe3RoaXMuZEhhc2hBbGc9bmV3IGMuQWxnb3JpdGhtSWRlbnRpZmllcih7bmFtZTpiLmhhc2hBbGd9KX1pZih0eXBlb2YgYi5oYXNoVmFsdWU9PVwic3RyaW5nXCIpe3RoaXMuZEhhc2hWYWx1ZT1uZXcgYS5ERVJPY3RldFN0cmluZyh7aGV4OmIuaGFzaFZhbHVlfSl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLnRzcC5NZXNzYWdlSW1wcmludCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLnRzcC5UaW1lU3RhbXBSZXE9ZnVuY3Rpb24oYyl7S0pVUi5hc24xLnRzcC5UaW1lU3RhbXBSZXEuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgYj1LSlVSLmFzbjEudHNwO3RoaXMuZFZlcnNpb249bmV3IGEuREVSSW50ZWdlcih7XCJpbnRcIjoxfSk7dGhpcy5kTWVzc2FnZUltcHJpbnQ9bnVsbDt0aGlzLmRQb2xpY3k9bnVsbDt0aGlzLmROb25jZT1udWxsO3RoaXMuY2VydFJlcT10cnVlO3RoaXMuc2V0TWVzc2FnZUltcHJpbnQ9ZnVuY3Rpb24oZCl7aWYoZCBpbnN0YW5jZW9mIEtKVVIuYXNuMS50c3AuTWVzc2FnZUltcHJpbnQpe3RoaXMuZE1lc3NhZ2VJbXByaW50PWQ7cmV0dXJufWlmKHR5cGVvZiBkPT1cIm9iamVjdFwiKXt0aGlzLmRNZXNzYWdlSW1wcmludD1uZXcgYi5NZXNzYWdlSW1wcmludChkKX19O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuZE1lc3NhZ2VJbXByaW50PT1udWxsKXt0aHJvd1wibWVzc2FnZUltcHJpbnQgc2hhbGwgYmUgc3BlY2lmaWVkXCJ9dmFyIGQ9W3RoaXMuZFZlcnNpb24sdGhpcy5kTWVzc2FnZUltcHJpbnRdO2lmKHRoaXMuZFBvbGljeSE9bnVsbCl7ZC5wdXNoKHRoaXMuZFBvbGljeSl9aWYodGhpcy5kTm9uY2UhPW51bGwpe2QucHVzaCh0aGlzLmROb25jZSl9aWYodGhpcy5jZXJ0UmVxKXtkLnB1c2gobmV3IGEuREVSQm9vbGVhbigpKX12YXIgZT1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6ZH0pO3RoaXMuaFRMVj1lLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGMubWk9PVwib2JqZWN0XCIpe3RoaXMuc2V0TWVzc2FnZUltcHJpbnQoYy5taSl9aWYodHlwZW9mIGMucG9saWN5PT1cIm9iamVjdFwiKXt0aGlzLmRQb2xpY3k9bmV3IGEuREVST2JqZWN0SWRlbnRpZmllcihjLnBvbGljeSl9aWYodHlwZW9mIGMubm9uY2U9PVwib2JqZWN0XCIpe3RoaXMuZE5vbmNlPW5ldyBhLkRFUkludGVnZXIoYy5ub25jZSl9aWYodHlwZW9mIGMuY2VydHJlcT09XCJib29sZWFuXCIpe3RoaXMuY2VydFJlcT1jLmNlcnRyZXF9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLnRzcC5UaW1lU3RhbXBSZXEsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS50c3AuVFNUSW5mbz1mdW5jdGlvbihjKXtLSlVSLmFzbjEudHNwLlRTVEluZm8uc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgZD1LSlVSLmFzbjEueDUwOTt2YXIgYj1LSlVSLmFzbjEudHNwO3RoaXMuZFZlcnNpb249bmV3IGEuREVSSW50ZWdlcih7XCJpbnRcIjoxfSk7dGhpcy5kUG9saWN5PW51bGw7dGhpcy5kTWVzc2FnZUltcHJpbnQ9bnVsbDt0aGlzLmRTZXJpYWxOdW1iZXI9bnVsbDt0aGlzLmRHZW5UaW1lPW51bGw7dGhpcy5kQWNjdXJhY3k9bnVsbDt0aGlzLmRPcmRlcmluZz1udWxsO3RoaXMuZE5vbmNlPW51bGw7dGhpcy5kVHNhPW51bGw7dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7dmFyIGU9W3RoaXMuZFZlcnNpb25dO2lmKHRoaXMuZFBvbGljeT09bnVsbCl7dGhyb3dcInBvbGljeSBzaGFsbCBiZSBzcGVjaWZpZWQuXCJ9ZS5wdXNoKHRoaXMuZFBvbGljeSk7aWYodGhpcy5kTWVzc2FnZUltcHJpbnQ9PW51bGwpe3Rocm93XCJtZXNzYWdlSW1wcmludCBzaGFsbCBiZSBzcGVjaWZpZWQuXCJ9ZS5wdXNoKHRoaXMuZE1lc3NhZ2VJbXByaW50KTtpZih0aGlzLmRTZXJpYWxOdW1iZXI9PW51bGwpe3Rocm93XCJzZXJpYWxOdW1iZXIgc2hhbGwgYmUgc3BlY2lmaWVkLlwifWUucHVzaCh0aGlzLmRTZXJpYWxOdW1iZXIpO2lmKHRoaXMuZEdlblRpbWU9PW51bGwpe3Rocm93XCJnZW5UaW1lIHNoYWxsIGJlIHNwZWNpZmllZC5cIn1lLnB1c2godGhpcy5kR2VuVGltZSk7aWYodGhpcy5kQWNjdXJhY3khPW51bGwpe2UucHVzaCh0aGlzLmRBY2N1cmFjeSl9aWYodGhpcy5kT3JkZXJpbmchPW51bGwpe2UucHVzaCh0aGlzLmRPcmRlcmluZyl9aWYodGhpcy5kTm9uY2UhPW51bGwpe2UucHVzaCh0aGlzLmROb25jZSl9aWYodGhpcy5kVHNhIT1udWxsKXtlLnB1c2godGhpcy5kVHNhKX12YXIgZj1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6ZX0pO3RoaXMuaFRMVj1mLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGMucG9saWN5PT1cInN0cmluZ1wiKXtpZighYy5wb2xpY3kubWF0Y2goL15bMC05Ll0rJC8pKXt0aHJvd1wicG9saWN5IHNoYWxsIGJlIG9pZCBsaWtlIDAuMS40LjEzNFwifXRoaXMuZFBvbGljeT1uZXcgYS5ERVJPYmplY3RJZGVudGlmaWVyKHtvaWQ6Yy5wb2xpY3l9KX1pZih0eXBlb2YgYy5tZXNzYWdlSW1wcmludCE9XCJ1bmRlZmluZWRcIil7dGhpcy5kTWVzc2FnZUltcHJpbnQ9bmV3IGIuTWVzc2FnZUltcHJpbnQoYy5tZXNzYWdlSW1wcmludCl9aWYodHlwZW9mIGMuc2VyaWFsTnVtYmVyIT1cInVuZGVmaW5lZFwiKXt0aGlzLmRTZXJpYWxOdW1iZXI9bmV3IGEuREVSSW50ZWdlcihjLnNlcmlhbE51bWJlcil9aWYodHlwZW9mIGMuZ2VuVGltZSE9XCJ1bmRlZmluZWRcIil7dGhpcy5kR2VuVGltZT1uZXcgYS5ERVJHZW5lcmFsaXplZFRpbWUoYy5nZW5UaW1lKX1pZih0eXBlb2YgYy5hY2N1cmFjeSE9XCJ1bmRlZmluZFwiKXt0aGlzLmRBY2N1cmFjeT1uZXcgYi5BY2N1cmFjeShjLmFjY3VyYWN5KX1pZih0eXBlb2YgYy5vcmRlcmluZyE9XCJ1bmRlZmluZWRcIiYmYy5vcmRlcmluZz09dHJ1ZSl7dGhpcy5kT3JkZXJpbmc9bmV3IGEuREVSQm9vbGVhbigpfWlmKHR5cGVvZiBjLm5vbmNlIT1cInVuZGVmaW5lZFwiKXt0aGlzLmROb25jZT1uZXcgYS5ERVJJbnRlZ2VyKGMubm9uY2UpfWlmKHR5cGVvZiBjLnRzYSE9XCJ1bmRlZmluZWRcIil7dGhpcy5kVHNhPW5ldyBkLlg1MDBOYW1lKGMudHNhKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEudHNwLlRTVEluZm8sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS50c3AuVGltZVN0YW1wUmVzcD1mdW5jdGlvbihjKXtLSlVSLmFzbjEudHNwLlRpbWVTdGFtcFJlc3Auc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgYj1LSlVSLmFzbjEudHNwO3RoaXMuZFN0YXR1cz1udWxsO3RoaXMuZFRTVD1udWxsO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuZFN0YXR1cz09bnVsbCl7dGhyb3dcInN0YXR1cyBzaGFsbCBiZSBzcGVjaWZpZWRcIn12YXIgZD1bdGhpcy5kU3RhdHVzXTtpZih0aGlzLmRUU1QhPW51bGwpe2QucHVzaCh0aGlzLmRUU1QpfXZhciBlPW5ldyBhLkRFUlNlcXVlbmNlKHthcnJheTpkfSk7dGhpcy5oVExWPWUuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYy5zdGF0dXM9PVwib2JqZWN0XCIpe3RoaXMuZFN0YXR1cz1uZXcgYi5QS0lTdGF0dXNJbmZvKGMuc3RhdHVzKX1pZih0eXBlb2YgYy50c3QhPVwidW5kZWZpbmVkXCImJmMudHN0IGluc3RhbmNlb2YgS0pVUi5hc24xLkFTTjFPYmplY3Qpe3RoaXMuZFRTVD1jLnRzdC5nZXRDb250ZW50SW5mbygpfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS50c3AuVGltZVN0YW1wUmVzcCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLnRzcC5QS0lTdGF0dXNJbmZvPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS50c3AuUEtJU3RhdHVzSW5mby5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9S0pVUi5hc24xO3ZhciBiPUtKVVIuYXNuMS50c3A7dGhpcy5kU3RhdHVzPW51bGw7dGhpcy5kU3RhdHVzU3RyaW5nPW51bGw7dGhpcy5kRmFpbHVyZUluZm89bnVsbDt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXtpZih0aGlzLmRTdGF0dXM9PW51bGwpe3Rocm93XCJzdGF0dXMgc2hhbGwgYmUgc3BlY2lmaWVkXCJ9dmFyIGQ9W3RoaXMuZFN0YXR1c107aWYodGhpcy5kU3RhdHVzU3RyaW5nIT1udWxsKXtkLnB1c2godGhpcy5kU3RhdHVzU3RyaW5nKX1pZih0aGlzLmRGYWlsdXJlSW5mbyE9bnVsbCl7ZC5wdXNoKHRoaXMuZEZhaWx1cmVJbmZvKX12YXIgZT1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6ZH0pO3RoaXMuaFRMVj1lLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGMuc3RhdHVzPT1cIm9iamVjdFwiKXt0aGlzLmRTdGF0dXM9bmV3IGIuUEtJU3RhdHVzKGMuc3RhdHVzKX1pZih0eXBlb2YgYy5zdGF0c3RyPT1cIm9iamVjdFwiKXt0aGlzLmRTdGF0dXNTdHJpbmc9bmV3IGIuUEtJRnJlZVRleHQoe2FycmF5OmMuc3RhdHN0cn0pfWlmKHR5cGVvZiBjLmZhaWxpbmZvPT1cIm9iamVjdFwiKXt0aGlzLmRGYWlsdXJlSW5mbz1uZXcgYi5QS0lGYWlsdXJlSW5mbyhjLmZhaWxpbmZvKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEudHNwLlBLSVN0YXR1c0luZm8sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS50c3AuUEtJU3RhdHVzPWZ1bmN0aW9uKGUpe0tKVVIuYXNuMS50c3AuUEtJU3RhdHVzLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dmFyIGI9S0pVUi5hc24xLnRzcDt2YXIgZD1udWxsO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3RoaXMuaFRMVj10aGlzLmRTdGF0dXMuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhUTFZ9O2lmKHR5cGVvZiBlIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgZS5uYW1lIT1cInVuZGVmaW5lZFwiKXt2YXIgYz1iLlBLSVN0YXR1cy52YWx1ZUxpc3Q7aWYodHlwZW9mIGNbZS5uYW1lXT09XCJ1bmRlZmluZWRcIil7dGhyb3dcIm5hbWUgdW5kZWZpbmVkOiBcIitlLm5hbWV9dGhpcy5kU3RhdHVzPW5ldyBhLkRFUkludGVnZXIoe1wiaW50XCI6Y1tlLm5hbWVdfSl9ZWxzZXt0aGlzLmRTdGF0dXM9bmV3IGEuREVSSW50ZWdlcihlKX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEudHNwLlBLSVN0YXR1cyxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLnRzcC5QS0lTdGF0dXMudmFsdWVMaXN0PXtncmFudGVkOjAsZ3JhbnRlZFdpdGhNb2RzOjEscmVqZWN0aW9uOjIsd2FpdGluZzozLHJldm9jYXRpb25XYXJuaW5nOjQscmV2b2NhdGlvbk5vdGlmaWNhdGlvbjo1fTtLSlVSLmFzbjEudHNwLlBLSUZyZWVUZXh0PWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS50c3AuUEtJRnJlZVRleHQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt0aGlzLnRleHRMaXN0PVtdO3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3ZhciBjPVtdO2Zvcih2YXIgZT0wO2U8dGhpcy50ZXh0TGlzdC5sZW5ndGg7ZSsrKXtjLnB1c2gobmV3IGEuREVSVVRGOFN0cmluZyh7c3RyOnRoaXMudGV4dExpc3RbZV19KSl9dmFyIGQ9bmV3IGEuREVSU2VxdWVuY2Uoe2FycmF5OmN9KTt0aGlzLmhUTFY9ZC5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBiLmFycmF5PT1cIm9iamVjdFwiKXt0aGlzLnRleHRMaXN0PWIuYXJyYXl9fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLnRzcC5QS0lGcmVlVGV4dCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLnRzcC5QS0lGYWlsdXJlSW5mbz1mdW5jdGlvbihkKXtLSlVSLmFzbjEudHNwLlBLSUZhaWx1cmVJbmZvLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYT1LSlVSLmFzbjE7dmFyIGI9S0pVUi5hc24xLnRzcDt0aGlzLnZhbHVlPW51bGw7dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy52YWx1ZT09bnVsbCl7dGhyb3dcInZhbHVlIHNoYWxsIGJlIHNwZWNpZmllZFwifXZhciBlPW5ldyBOdW1iZXIodGhpcy52YWx1ZSkudG9TdHJpbmcoMik7dmFyIGY9bmV3IGEuREVSQml0U3RyaW5nKCk7Zi5zZXRCeUJpbmFyeVN0cmluZyhlKTt0aGlzLmhUTFY9Zi5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIHRoaXMuaFRMVn07aWYodHlwZW9mIGQhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBkLm5hbWU9PVwic3RyaW5nXCIpe3ZhciBjPWIuUEtJRmFpbHVyZUluZm8udmFsdWVMaXN0O2lmKHR5cGVvZiBjW2QubmFtZV09PVwidW5kZWZpbmVkXCIpe3Rocm93XCJuYW1lIHVuZGVmaW5lZDogXCIrZC5uYW1lfXRoaXMudmFsdWU9Y1tkLm5hbWVdfWVsc2V7aWYodHlwZW9mIGRbXCJpbnRcIl09PVwibnVtYmVyXCIpe3RoaXMudmFsdWU9ZFtcImludFwiXX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLnRzcC5QS0lGYWlsdXJlSW5mbyxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLnRzcC5QS0lGYWlsdXJlSW5mby52YWx1ZUxpc3Q9e2JhZEFsZzowLGJhZFJlcXVlc3Q6MixiYWREYXRhRm9ybWF0OjUsdGltZU5vdEF2YWlsYWJsZToxNCx1bmFjY2VwdGVkUG9saWN5OjE1LHVuYWNjZXB0ZWRFeHRlbnNpb246MTYsYWRkSW5mb05vdEF2YWlsYWJsZToxNyxzeXN0ZW1GYWlsdXJlOjI1fTtLSlVSLmFzbjEudHNwLkFic3RyYWN0VFNBQWRhcHRlcj1mdW5jdGlvbihhKXt0aGlzLmdldFRTVEhleD1mdW5jdGlvbihjLGIpe3Rocm93XCJub3QgaW1wbGVtZW50ZWQgeWV0XCJ9fTtLSlVSLmFzbjEudHNwLlNpbXBsZVRTQUFkYXB0ZXI9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLnRzcC5TaW1wbGVUU0FBZGFwdGVyLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLnBhcmFtcz1udWxsO3RoaXMuc2VyaWFsPTA7dGhpcy5nZXRUU1RIZXg9ZnVuY3Rpb24oYyxiKXt2YXIgZT1LSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoYyxiKTt0aGlzLnBhcmFtcy50c3RJbmZvLm1lc3NhZ2VJbXByaW50PXtoYXNoQWxnOmIsaGFzaFZhbHVlOmV9O3RoaXMucGFyYW1zLnRzdEluZm8uc2VyaWFsTnVtYmVyPXtcImludFwiOnRoaXMuc2VyaWFsKyt9O3ZhciBkPU1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxMDAwMDAwMDAwKTt0aGlzLnBhcmFtcy50c3RJbmZvLm5vbmNlPXtcImludFwiOmR9O3ZhciBmPUtKVVIuYXNuMS50c3AuVFNQVXRpbC5uZXdUaW1lU3RhbXBUb2tlbih0aGlzLnBhcmFtcyk7cmV0dXJuIGYuZ2V0Q29udGVudEluZm9FbmNvZGVkSGV4KCl9O2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXt0aGlzLnBhcmFtcz1hfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLnRzcC5TaW1wbGVUU0FBZGFwdGVyLEtKVVIuYXNuMS50c3AuQWJzdHJhY3RUU0FBZGFwdGVyKTtLSlVSLmFzbjEudHNwLkZpeGVkVFNBQWRhcHRlcj1mdW5jdGlvbihhKXtLSlVSLmFzbjEudHNwLkZpeGVkVFNBQWRhcHRlci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5wYXJhbXM9bnVsbDt0aGlzLmdldFRTVEhleD1mdW5jdGlvbihjLGIpe3ZhciBkPUtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChjLGIpO3RoaXMucGFyYW1zLnRzdEluZm8ubWVzc2FnZUltcHJpbnQ9e2hhc2hBbGc6YixoYXNoVmFsdWU6ZH07dmFyIGU9S0pVUi5hc24xLnRzcC5UU1BVdGlsLm5ld1RpbWVTdGFtcFRva2VuKHRoaXMucGFyYW1zKTtyZXR1cm4gZS5nZXRDb250ZW50SW5mb0VuY29kZWRIZXgoKX07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe3RoaXMucGFyYW1zPWF9fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEudHNwLkZpeGVkVFNBQWRhcHRlcixLSlVSLmFzbjEudHNwLkFic3RyYWN0VFNBQWRhcHRlcik7S0pVUi5hc24xLnRzcC5UU1BVdGlsPW5ldyBmdW5jdGlvbigpe307S0pVUi5hc24xLnRzcC5UU1BVdGlsLm5ld1RpbWVTdGFtcFRva2VuPWZ1bmN0aW9uKGIpe3ZhciBqPUtKVVIuYXNuMS5jbXM7dmFyIGE9S0pVUi5hc24xLnRzcDt2YXIgZz1uZXcgai5TaWduZWREYXRhKCk7dmFyIGU9bmV3IGEuVFNUSW5mbyhiLnRzdEluZm8pO3ZhciBmPWUuZ2V0RW5jb2RlZEhleCgpO2cuZEVuY2FwQ29udGVudEluZm8uc2V0Q29udGVudFZhbHVlKHtoZXg6Zn0pO2cuZEVuY2FwQ29udGVudEluZm8uc2V0Q29udGVudFR5cGUoXCJ0c3RpbmZvXCIpO2lmKHR5cGVvZiBiLmNlcnRzPT1cIm9iamVjdFwiKXtmb3IodmFyIGM9MDtjPGIuY2VydHMubGVuZ3RoO2MrKyl7Zy5hZGRDZXJ0aWZpY2F0ZXNCeVBFTShiLmNlcnRzW2NdKX19dmFyIGQ9Zy5zaWduZXJJbmZvTGlzdFswXTtkLnNldFNpZ25lcklkZW50aWZpZXIoYi5zaWduZXJDZXJ0KTtkLnNldEZvckNvbnRlbnRBbmRIYXNoKHtzZE9iajpnLGVjaU9iajpnLmRFbmNhcENvbnRlbnRJbmZvLGhhc2hBbGc6Yi5oYXNoQWxnfSk7dmFyIGg9bmV3IGouU2lnbmluZ0NlcnRpZmljYXRlKHthcnJheTpbYi5zaWduZXJDZXJ0XX0pO2QuZFNpZ25lZEF0dHJzLmFkZChoKTtkLnNpZ24oYi5zaWduZXJQcnZLZXksYi5zaWdBbGcpO3JldHVybiBnfTtLSlVSLmFzbjEudHNwLlRTUFV0aWwucGFyc2VUaW1lU3RhbXBSZXE9ZnVuY3Rpb24oZCl7dmFyIGY9e307Zi5jZXJ0cmVxPWZhbHNlO3ZhciBoPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGQsMCk7aWYoaC5sZW5ndGg8Mil7dGhyb3dcIlRpbWVTdGFtcFJlcSBtdXN0IGhhdmUgYXQgbGVhc3QgMiBpdGVtc1wifXZhciBjPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZCxoWzFdKTtmLm1pPUtKVVIuYXNuMS50c3AuVFNQVXRpbC5wYXJzZU1lc3NhZ2VJbXByaW50KGMpO2Zvcih2YXIgZT0yO2U8aC5sZW5ndGg7ZSsrKXt2YXIgYj1oW2VdO3ZhciBhPWQuc3Vic3RyKGIsMik7aWYoYT09XCIwNlwiKXt2YXIgZz1BU04xSEVYLmdldEhleE9mVl9BdE9iaihkLGIpO2YucG9saWN5PUFTTjFIRVguaGV4dG9vaWRzdHIoZyl9aWYoYT09XCIwMlwiKXtmLm5vbmNlPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGQsYil9aWYoYT09XCIwMVwiKXtmLmNlcnRyZXE9dHJ1ZX19cmV0dXJuIGZ9O0tKVVIuYXNuMS50c3AuVFNQVXRpbC5wYXJzZU1lc3NhZ2VJbXByaW50PWZ1bmN0aW9uKGMpe3ZhciBoPXt9O2lmKGMuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3dcImhlYWQgb2YgbWVzc2FnZUltcHJpbnQgaGV4IHNoYWxsIGJlICczMCdcIn12YXIgYT1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihjLDApO3ZhciBpPUFTTjFIRVguZ2V0RGVjZW5kYW50SW5kZXhCeU50aExpc3QoYywwLFswLDBdKTt2YXIgZD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihjLGkpO3ZhciBlPUFTTjFIRVguaGV4dG9vaWRzdHIoZCk7dmFyIGc9S0pVUi5hc24xLng1MDkuT0lELm9pZDJuYW1lKGUpO2lmKGc9PVwiXCIpe3Rocm93XCJoYXNoQWxnIG5hbWUgdW5kZWZpbmVkOiBcIitlfXZhciBiPWc7dmFyIGY9QVNOMUhFWC5nZXREZWNlbmRhbnRJbmRleEJ5TnRoTGlzdChjLDAsWzFdKTtoLmhhc2hBbGc9YjtoLmhhc2hWYWx1ZT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihjLGYpO3JldHVybiBofTtcblx0LyohIGFzbjFjYWRlcy0xLjAuMC5qcyAoYykgMjAxMy0yMDE0IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG5cdCAqL1xuXHRpZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIuYXNuMT09XCJ1bmRlZmluZWRcInx8IUtKVVIuYXNuMSl7S0pVUi5hc24xPXt9fWlmKHR5cGVvZiBLSlVSLmFzbjEuY2FkZXM9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmFzbjEuY2FkZXMpe0tKVVIuYXNuMS5jYWRlcz17fX1LSlVSLmFzbjEuY2FkZXMuU2lnbmF0dXJlUG9saWN5SWRlbnRpZmllcj1mdW5jdGlvbihlKXtLSlVSLmFzbjEuY2FkZXMuU2lnbmF0dXJlUG9saWN5SWRlbnRpZmllci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5hdHRyVHlwZU9pZD1cIjEuMi44NDAuMTEzNTQ5LjEuOS4xNi4yLjE1XCI7dmFyIGI9S0pVUi5hc24xO3ZhciBkPUtKVVIuYXNuMS5jYWRlcztpZih0eXBlb2YgZSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGUub2lkPT1cInN0cmluZ1wiJiZ0eXBlb2YgZS5oYXNoPT1cIm9iamVjdFwiKXt2YXIgZj1uZXcgYi5ERVJPYmplY3RJZGVudGlmaWVyKHtvaWQ6ZS5vaWR9KTt2YXIgYT1uZXcgZC5PdGhlckhhc2hBbGdBbmRWYWx1ZShlLmhhc2gpO3ZhciBjPW5ldyBiLkRFUlNlcXVlbmNlKHthcnJheTpbZixhXX0pO3RoaXMudmFsdWVMaXN0PVtjXX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY2FkZXMuU2lnbmF0dXJlUG9saWN5SWRlbnRpZmllcixLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZSk7S0pVUi5hc24xLmNhZGVzLk90aGVySGFzaEFsZ0FuZFZhbHVlPWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS5jYWRlcy5PdGhlckhhc2hBbGdBbmRWYWx1ZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9S0pVUi5hc24xO3ZhciBjPUtKVVIuYXNuMS54NTA5O3RoaXMuZEFsZz1udWxsO3RoaXMuZEhhc2g9bnVsbDt0aGlzLmdldEVuY29kZWRIZXg9ZnVuY3Rpb24oKXt2YXIgZD1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6W3RoaXMuZEFsZyx0aGlzLmRIYXNoXX0pO3RoaXMuaFRMVj1kLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgYiE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGIuYWxnPT1cInN0cmluZ1wiJiZ0eXBlb2YgYi5oYXNoPT1cInN0cmluZ1wiKXt0aGlzLmRBbGc9bmV3IGMuQWxnb3JpdGhtSWRlbnRpZmllcih7bmFtZTpiLmFsZ30pO3RoaXMuZEhhc2g9bmV3IGEuREVST2N0ZXRTdHJpbmcoe2hleDpiLmhhc2h9KX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY2FkZXMuT3RoZXJIYXNoQWxnQW5kVmFsdWUsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5jYWRlcy5TaWduYXR1cmVUaW1lU3RhbXA9ZnVuY3Rpb24oYyl7S0pVUi5hc24xLmNhZGVzLlNpZ25hdHVyZVRpbWVTdGFtcC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5hdHRyVHlwZU9pZD1cIjEuMi44NDAuMTEzNTQ5LjEuOS4xNi4yLjE0XCI7dGhpcy50c3RIZXg9bnVsbDt2YXIgYT1LSlVSLmFzbjE7aWYodHlwZW9mIGMhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjLnJlcyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGMucmVzPT1cInN0cmluZ1wiJiZjLnJlcy5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7fWVsc2V7aWYoYy5yZXMgaW5zdGFuY2VvZiBLSlVSLmFzbjEuQVNOMU9iamVjdCl7fWVsc2V7dGhyb3dcInJlcyBwYXJhbSBzaGFsbCBiZSBBU04xT2JqZWN0IG9yIGhleCBzdHJpbmdcIn19fWlmKHR5cGVvZiBjLnRzdCE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGMudHN0PT1cInN0cmluZ1wiJiZjLnRzdC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7dmFyIGI9bmV3IGEuQVNOMU9iamVjdCgpO3RoaXMudHN0SGV4PWMudHN0O2IuaFRMVj10aGlzLnRzdEhleDtiLmdldEVuY29kZWRIZXgoKTt0aGlzLnZhbHVlTGlzdD1bYl19ZWxzZXtpZihjLnRzdCBpbnN0YW5jZW9mIEtKVVIuYXNuMS5BU04xT2JqZWN0KXt9ZWxzZXt0aHJvd1widHN0IHBhcmFtIHNoYWxsIGJlIEFTTjFPYmplY3Qgb3IgaGV4IHN0cmluZ1wifX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNhZGVzLlNpZ25hdHVyZVRpbWVTdGFtcCxLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZSk7S0pVUi5hc24xLmNhZGVzLkNvbXBsZXRlQ2VydGlmaWNhdGVSZWZzPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5jYWRlcy5Db21wbGV0ZUNlcnRpZmljYXRlUmVmcy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5hdHRyVHlwZU9pZD1cIjEuMi44NDAuMTEzNTQ5LjEuOS4xNi4yLjIxXCI7dmFyIGE9S0pVUi5hc24xO3ZhciBiPUtKVVIuYXNuMS5jYWRlczt0aGlzLnNldEJ5QXJyYXk9ZnVuY3Rpb24oZCl7dGhpcy52YWx1ZUxpc3Q9W107Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe3ZhciBmPW5ldyBiLk90aGVyQ2VydElEKGRbZV0pO3RoaXMudmFsdWVMaXN0LnB1c2goZil9fTtpZih0eXBlb2YgYyE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGM9PVwib2JqZWN0XCImJnR5cGVvZiBjLmxlbmd0aD09XCJudW1iZXJcIil7dGhpcy5zZXRCeUFycmF5KGMpfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5jYWRlcy5Db21wbGV0ZUNlcnRpZmljYXRlUmVmcyxLSlVSLmFzbjEuY21zLkF0dHJpYnV0ZSk7S0pVUi5hc24xLmNhZGVzLk90aGVyQ2VydElEPWZ1bmN0aW9uKGQpe0tKVVIuYXNuMS5jYWRlcy5PdGhlckNlcnRJRC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9S0pVUi5hc24xO3ZhciBjPUtKVVIuYXNuMS5jbXM7dmFyIGI9S0pVUi5hc24xLmNhZGVzO3RoaXMuaGFzSXNzdWVyU2VyaWFsPXRydWU7dGhpcy5kT3RoZXJDZXJ0SGFzaD1udWxsO3RoaXMuZElzc3VlclNlcmlhbD1udWxsO3RoaXMuc2V0QnlDZXJ0UEVNPWZ1bmN0aW9uKGUpe3RoaXMuZE90aGVyQ2VydEhhc2g9bmV3IGIuT3RoZXJIYXNoKGUpO2lmKHRoaXMuaGFzSXNzdWVyU2VyaWFsKXt0aGlzLmRJc3N1ZXJTZXJpYWw9bmV3IGMuSXNzdWVyQW5kU2VyaWFsTnVtYmVyKGUpfX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5oVExWIT1udWxsKXtyZXR1cm4gdGhpcy5oVExWfWlmKHRoaXMuZE90aGVyQ2VydEhhc2g9PW51bGwpe3Rocm93XCJvdGhlckNlcnRIYXNoIG5vdCBzZXRcIn12YXIgZT1bdGhpcy5kT3RoZXJDZXJ0SGFzaF07aWYodGhpcy5kSXNzdWVyU2VyaWFsIT1udWxsKXtlLnB1c2godGhpcy5kSXNzdWVyU2VyaWFsKX12YXIgZj1uZXcgYS5ERVJTZXF1ZW5jZSh7YXJyYXk6ZX0pO3RoaXMuaFRMVj1mLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVExWfTtpZih0eXBlb2YgZCE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGQ9PVwic3RyaW5nXCImJmQuaW5kZXhPZihcIi0tLS0tQkVHSU4gXCIpIT0tMSl7dGhpcy5zZXRCeUNlcnRQRU0oZCl9aWYodHlwZW9mIGQ9PVwib2JqZWN0XCIpe2lmKGQuaGFzaXM9PT1mYWxzZSl7dGhpcy5oYXNJc3N1ZXJTZXJpYWw9ZmFsc2V9aWYodHlwZW9mIGQuY2VydD09XCJzdHJpbmdcIil7dGhpcy5zZXRCeUNlcnRQRU0oZC5jZXJ0KX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLmNhZGVzLk90aGVyQ2VydElELEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY2FkZXMuT3RoZXJIYXNoPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5jYWRlcy5PdGhlckhhc2guc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPUtKVVIuYXNuMTt2YXIgYj1LSlVSLmFzbjEuY2FkZXM7dGhpcy5hbGc9XCJzaGEyNTZcIjt0aGlzLmRPdGhlckhhc2g9bnVsbDt0aGlzLnNldEJ5Q2VydFBFTT1mdW5jdGlvbihkKXtpZihkLmluZGV4T2YoXCItLS0tLUJFR0lOIFwiKT09LTEpe3Rocm93XCJjZXJ0UEVNIG5vdCB0byBzZWVtIFBFTSBmb3JtYXRcIn12YXIgZT1YNTA5LnBlbVRvSGV4KGQpO3ZhciBmPUtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChlLHRoaXMuYWxnKTt0aGlzLmRPdGhlckhhc2g9bmV3IGIuT3RoZXJIYXNoQWxnQW5kVmFsdWUoe2FsZzp0aGlzLmFsZyxoYXNoOmZ9KX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5kT3RoZXJIYXNoPT1udWxsKXt0aHJvd1wiT3RoZXJIYXNoIG5vdCBzZXRcIn1yZXR1cm4gdGhpcy5kT3RoZXJIYXNoLmdldEVuY29kZWRIZXgoKX07aWYodHlwZW9mIGMhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjPT1cInN0cmluZ1wiKXtpZihjLmluZGV4T2YoXCItLS0tLUJFR0lOIFwiKSE9LTEpe3RoaXMuc2V0QnlDZXJ0UEVNKGMpfWVsc2V7aWYoYy5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7dGhpcy5kT3RoZXJIYXNoPW5ldyBhLkRFUk9jdGV0U3RyaW5nKHtoZXg6Y30pfWVsc2V7dGhyb3dcInVuc3VwcG9ydGVkIHN0cmluZyB2YWx1ZSBmb3IgcGFyYW1zXCJ9fX1lbHNle2lmKHR5cGVvZiBjPT1cIm9iamVjdFwiKXtpZih0eXBlb2YgYy5jZXJ0PT1cInN0cmluZ1wiKXtpZih0eXBlb2YgYy5hbGc9PVwic3RyaW5nXCIpe3RoaXMuYWxnPWMuYWxnfXRoaXMuc2V0QnlDZXJ0UEVNKGMuY2VydCl9ZWxzZXt0aGlzLmRPdGhlckhhc2g9bmV3IGIuT3RoZXJIYXNoQWxnQW5kVmFsdWUoYyl9fX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY2FkZXMuT3RoZXJIYXNoLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuY2FkZXMuQ0FkRVNVdGlsPW5ldyBmdW5jdGlvbigpe307S0pVUi5hc24xLmNhZGVzLkNBZEVTVXRpbC5hZGRTaWdUUz1mdW5jdGlvbihjLGIsYSl7fTtLSlVSLmFzbjEuY2FkZXMuQ0FkRVNVdGlsLnBhcnNlU2lnbmVkRGF0YUZvckFkZGluZ1Vuc2lnbmVkPWZ1bmN0aW9uKGQpe3ZhciBxPUtKVVIuYXNuMTt2YXIgcD1LSlVSLmFzbjEuY21zO3ZhciBjPUtKVVIuYXNuMS5jYWRlcy5DQWRFU1V0aWw7dmFyIGE9e307aWYoQVNOMUhFWC5nZXREZWNlbmRhbnRIZXhUTFZCeU50aExpc3QoZCwwLFswXSkhPVwiMDYwOTJhODY0ODg2ZjcwZDAxMDcwMlwiKXt0aHJvd1wiaGV4IGlzIG5vdCBDTVMgU2lnbmVkRGF0YVwifXZhciBzPUFTTjFIRVguZ2V0RGVjZW5kYW50SW5kZXhCeU50aExpc3QoZCwwLFsxLDBdKTt2YXIgYj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihkLHMpO2lmKGIubGVuZ3RoPDQpe3Rocm93XCJudW0gb2YgU2lnbmVkRGF0YSBlbGVtIHNoYWxsIGJlIDQgYXQgbGVhc3RcIn12YXIgZj1iLnNoaWZ0KCk7YS52ZXJzaW9uPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZCxmKTt2YXIgbD1iLnNoaWZ0KCk7YS5hbGdzPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZCxsKTt2YXIgbT1iLnNoaWZ0KCk7YS5lbmNhcGNvbnRlbnQ9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihkLG0pO2EuY2VydHM9bnVsbDthLnJldnM9bnVsbDthLnNpPVtdO3ZhciBuPWIuc2hpZnQoKTtpZihkLnN1YnN0cihuLDIpPT1cImEwXCIpe2EuY2VydHM9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihkLG4pO249Yi5zaGlmdCgpfWlmKGQuc3Vic3RyKG4sMik9PVwiYTFcIil7YS5yZXZzPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZCxuKTtuPWIuc2hpZnQoKX12YXIgaz1uO2lmKGQuc3Vic3RyKGssMikhPVwiMzFcIil7dGhyb3dcIkNhbid0IGZpbmQgc2lnbmVySW5mb3NcIn12YXIgaj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihkLGspO2Zvcih2YXIgaD0wO2g8ai5sZW5ndGg7aCsrKXt2YXIgbz1qW2hdO3ZhciBlPWMucGFyc2VTaWduZXJJbmZvRm9yQWRkaW5nVW5zaWduZWQoZCxvLGgpO2Euc2lbaF09ZX12YXIgZz1udWxsO2Eub2JqPW5ldyBwLlNpZ25lZERhdGEoKTtnPW5ldyBxLkFTTjFPYmplY3QoKTtnLmhUTFY9YS52ZXJzaW9uO2Eub2JqLmRDTVNWZXJzaW9uPWc7Zz1uZXcgcS5BU04xT2JqZWN0KCk7Zy5oVExWPWEuYWxnczthLm9iai5kRGlnZXN0QWxncz1nO2c9bmV3IHEuQVNOMU9iamVjdCgpO2cuaFRMVj1hLmVuY2FwY29udGVudDthLm9iai5kRW5jYXBDb250ZW50SW5mbz1nO2c9bmV3IHEuQVNOMU9iamVjdCgpO2cuaFRMVj1hLmNlcnRzO2Eub2JqLmRDZXJ0cz1nO2Eub2JqLnNpZ25lckluZm9MaXN0PVtdO2Zvcih2YXIgaD0wO2g8YS5zaS5sZW5ndGg7aCsrKXthLm9iai5zaWduZXJJbmZvTGlzdC5wdXNoKGEuc2lbaF0ub2JqKX1yZXR1cm4gYX07S0pVUi5hc24xLmNhZGVzLkNBZEVTVXRpbC5wYXJzZVNpZ25lckluZm9Gb3JBZGRpbmdVbnNpZ25lZD1mdW5jdGlvbihkLGssYSl7dmFyIG09S0pVUi5hc24xO3ZhciBsPUtKVVIuYXNuMS5jbXM7dmFyIGI9e307dmFyIGU9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZCxrKTtpZihlLmxlbmd0aCE9Nil7dGhyb3dcIm5vdCBzdXBwb3J0ZWQgaXRlbXMgZm9yIFNpZ25lckluZm8gKCE9NilcIn12YXIgZj1lLnNoaWZ0KCk7Yi52ZXJzaW9uPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZCxmKTt2YXIgbj1lLnNoaWZ0KCk7Yi5zaT1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGQsbik7dmFyIGg9ZS5zaGlmdCgpO2IuZGlnYWxnPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZCxoKTt2YXIgYz1lLnNoaWZ0KCk7Yi5zYXR0cnM9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihkLGMpO3ZhciBpPWUuc2hpZnQoKTtiLnNpZ2FsZz1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGQsaSk7dmFyIGo9ZS5zaGlmdCgpO2Iuc2lnPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmooZCxqKTtiLnNpZ3ZhbD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihkLGopO3ZhciBnPW51bGw7Yi5vYmo9bmV3IGwuU2lnbmVySW5mbygpO2c9bmV3IG0uQVNOMU9iamVjdCgpO2cuaFRMVj1iLnZlcnNpb247Yi5vYmouZENNU1ZlcnNpb249ZztnPW5ldyBtLkFTTjFPYmplY3QoKTtnLmhUTFY9Yi5zaTtiLm9iai5kU2lnbmVySWRlbnRpZmllcj1nO2c9bmV3IG0uQVNOMU9iamVjdCgpO2cuaFRMVj1iLmRpZ2FsZztiLm9iai5kRGlnZXN0QWxnb3JpdGhtPWc7Zz1uZXcgbS5BU04xT2JqZWN0KCk7Zy5oVExWPWIuc2F0dHJzO2Iub2JqLmRTaWduZWRBdHRycz1nO2c9bmV3IG0uQVNOMU9iamVjdCgpO2cuaFRMVj1iLnNpZ2FsZztiLm9iai5kU2lnQWxnPWc7Zz1uZXcgbS5BU04xT2JqZWN0KCk7Zy5oVExWPWIuc2lnO2Iub2JqLmRTaWc9ZztiLm9iai5kVW5zaWduZWRBdHRycz1uZXcgbC5BdHRyaWJ1dGVMaXN0KCk7cmV0dXJuIGJ9O1xuXHQvKiEgYXNuMWNzci0xLjAuMC5qcyAoYykgMjAxNSBLZW5qaSBVcnVzaGltYSB8IGtqdXIuZ2l0aHViLmNvbS9qc3JzYXNpZ24vbGljZW5zZVxuXHQgKi9cblx0aWYodHlwZW9mIEtKVVIuYXNuMS5jc3I9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmFzbjEuY3NyKXtLSlVSLmFzbjEuY3NyPXt9fUtKVVIuYXNuMS5jc3IuQ2VydGlmaWNhdGlvblJlcXVlc3Q9ZnVuY3Rpb24oZil7S0pVUi5hc24xLmNzci5DZXJ0aWZpY2F0aW9uUmVxdWVzdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGI9bnVsbDt2YXIgZD1udWxsO3ZhciBlPW51bGw7dmFyIGM9bnVsbDt2YXIgYT1udWxsO3RoaXMuc2lnbj1mdW5jdGlvbihpLGgpe2lmKHRoaXMucHJ2S2V5PT1udWxsKXt0aGlzLnBydktleT1ofXRoaXMuYXNuMVNpZ25hdHVyZUFsZz1uZXcgS0pVUi5hc24xLng1MDkuQWxnb3JpdGhtSWRlbnRpZmllcih7bmFtZTppfSk7c2lnPW5ldyBLSlVSLmNyeXB0by5TaWduYXR1cmUoe2FsZzppfSk7c2lnLmluaXRTaWduKHRoaXMucHJ2S2V5KTtzaWcudXBkYXRlSGV4KHRoaXMuYXNuMUNTUkluZm8uZ2V0RW5jb2RlZEhleCgpKTt0aGlzLmhleFNpZz1zaWcuc2lnbigpO3RoaXMuYXNuMVNpZz1uZXcgS0pVUi5hc24xLkRFUkJpdFN0cmluZyh7aGV4OlwiMDBcIit0aGlzLmhleFNpZ30pO3ZhciBnPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5Olt0aGlzLmFzbjFDU1JJbmZvLHRoaXMuYXNuMVNpZ25hdHVyZUFsZyx0aGlzLmFzbjFTaWddfSk7dGhpcy5oVExWPWcuZ2V0RW5jb2RlZEhleCgpO3RoaXMuaXNNb2RpZmllZD1mYWxzZX07dGhpcy5nZXRQRU1TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgZz1LSlVSLmFzbjEuQVNOMVV0aWwuZ2V0UEVNU3RyaW5nRnJvbUhleCh0aGlzLmdldEVuY29kZWRIZXgoKSxcIkNFUlRJRklDQVRFIFJFUVVFU1RcIik7cmV0dXJuIGd9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuaXNNb2RpZmllZD09ZmFsc2UmJnRoaXMuaFRMViE9bnVsbCl7cmV0dXJuIHRoaXMuaFRMVn10aHJvd1wibm90IHNpZ25lZCB5ZXRcIn07aWYodHlwZW9mIGYhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBmLmNzcmluZm8hPVwidW5kZWZpbmVkXCIpe3RoaXMuYXNuMUNTUkluZm89Zi5jc3JpbmZvfX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5jc3IuQ2VydGlmaWNhdGlvblJlcXVlc3QsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5jc3IuQ2VydGlmaWNhdGlvblJlcXVlc3RJbmZvPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5jc3IuQ2VydGlmaWNhdGlvblJlcXVlc3RJbmZvLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLl9pbml0aWFsaXplPWZ1bmN0aW9uKCl7dGhpcy5hc24xQXJyYXk9bmV3IEFycmF5KCk7dGhpcy5hc24xVmVyc2lvbj1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe1wiaW50XCI6MH0pO3RoaXMuYXNuMVN1YmplY3Q9bnVsbDt0aGlzLmFzbjFTdWJqUEtleT1udWxsO3RoaXMuZXh0ZW5zaW9uc0FycmF5PW5ldyBBcnJheSgpfTt0aGlzLnNldFN1YmplY3RCeVBhcmFtPWZ1bmN0aW9uKGIpe3RoaXMuYXNuMVN1YmplY3Q9bmV3IEtKVVIuYXNuMS54NTA5Llg1MDBOYW1lKGIpfTt0aGlzLnNldFN1YmplY3RQdWJsaWNLZXlCeUdldEtleT1mdW5jdGlvbihjKXt2YXIgYj1LRVlVVElMLmdldEtleShjKTt0aGlzLmFzbjFTdWJqUEtleT1uZXcgS0pVUi5hc24xLng1MDkuU3ViamVjdFB1YmxpY0tleUluZm8oYil9O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe3RoaXMuYXNuMUFycmF5PW5ldyBBcnJheSgpO3RoaXMuYXNuMUFycmF5LnB1c2godGhpcy5hc24xVmVyc2lvbik7dGhpcy5hc24xQXJyYXkucHVzaCh0aGlzLmFzbjFTdWJqZWN0KTt0aGlzLmFzbjFBcnJheS5wdXNoKHRoaXMuYXNuMVN1YmpQS2V5KTt2YXIgYz1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTp0aGlzLmV4dGVuc2lvbnNBcnJheX0pO3ZhciBiPW5ldyBLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0KHtleHBsaWNpdDpmYWxzZSx0YWc6XCJhMFwiLG9iajpjfSk7dGhpcy5hc24xQXJyYXkucHVzaChiKTt2YXIgZD1uZXcgS0pVUi5hc24xLkRFUlNlcXVlbmNlKHthcnJheTp0aGlzLmFzbjFBcnJheX0pO3RoaXMuaFRMVj1kLmdldEVuY29kZWRIZXgoKTt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2U7cmV0dXJuIHRoaXMuaFRMVn07dGhpcy5faW5pdGlhbGl6ZSgpfTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuY3NyLkNlcnRpZmljYXRpb25SZXF1ZXN0SW5mbyxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLmNzci5DU1JVdGlsPW5ldyBmdW5jdGlvbigpe307S0pVUi5hc24xLmNzci5DU1JVdGlsLm5ld0NTUlBFTT1mdW5jdGlvbihmKXt2YXIgYz1LSlVSLmFzbjEuY3NyO2lmKGYuc3ViamVjdD09PXVuZGVmaW5lZCl7dGhyb3dcInBhcmFtZXRlciBzdWJqZWN0IHVuZGVmaW5lZFwifWlmKGYuc2JqcHVia2V5PT09dW5kZWZpbmVkKXt0aHJvd1wicGFyYW1ldGVyIHNianB1YmtleSB1bmRlZmluZWRcIn1pZihmLnNpZ2FsZz09PXVuZGVmaW5lZCl7dGhyb3dcInBhcmFtZXRlciBzaWdhbGcgdW5kZWZpbmVkXCJ9aWYoZi5zYmpwcnZrZXk9PT11bmRlZmluZWQpe3Rocm93XCJwYXJhbWV0ZXIgc2JqcHVia2V5IHVuZGVmaW5lZFwifXZhciBiPW5ldyBjLkNlcnRpZmljYXRpb25SZXF1ZXN0SW5mbygpO2Iuc2V0U3ViamVjdEJ5UGFyYW0oZi5zdWJqZWN0KTtiLnNldFN1YmplY3RQdWJsaWNLZXlCeUdldEtleShmLnNianB1YmtleSk7dmFyIGQ9bmV3IGMuQ2VydGlmaWNhdGlvblJlcXVlc3Qoe2NzcmluZm86Yn0pO3ZhciBhPUtFWVVUSUwuZ2V0S2V5KGYuc2JqcHJ2a2V5KTtkLnNpZ24oZi5zaWdhbGcsYSk7dmFyIGU9ZC5nZXRQRU1TdHJpbmcoKTtyZXR1cm4gZX07XG5cdC8qISBiYXNlNjR4LTEuMS42IChjKSAyMDEyLTIwMTUgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2Vcblx0ICovXG5cdGZ1bmN0aW9uIEJhc2U2NHgoKXt9ZnVuY3Rpb24gc3RvQkEoZCl7dmFyIGI9bmV3IEFycmF5KCk7Zm9yKHZhciBjPTA7YzxkLmxlbmd0aDtjKyspe2JbY109ZC5jaGFyQ29kZUF0KGMpfXJldHVybiBifWZ1bmN0aW9uIEJBdG9zKGIpe3ZhciBkPVwiXCI7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspe2Q9ZCtTdHJpbmcuZnJvbUNoYXJDb2RlKGJbY10pfXJldHVybiBkfWZ1bmN0aW9uIEJBdG9oZXgoYil7dmFyIGU9XCJcIjtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGM9YltkXS50b1N0cmluZygxNik7aWYoYy5sZW5ndGg9PTEpe2M9XCIwXCIrY31lPWUrY31yZXR1cm4gZX1mdW5jdGlvbiBzdG9oZXgoYSl7cmV0dXJuIEJBdG9oZXgoc3RvQkEoYSkpfWZ1bmN0aW9uIHN0b2I2NChhKXtyZXR1cm4gaGV4MmI2NChzdG9oZXgoYSkpfWZ1bmN0aW9uIHN0b2I2NHUoYSl7cmV0dXJuIGI2NHRvYjY0dShoZXgyYjY0KHN0b2hleChhKSkpfWZ1bmN0aW9uIGI2NHV0b3MoYSl7cmV0dXJuIEJBdG9zKGI2NHRvQkEoYjY0dXRvYjY0KGEpKSl9ZnVuY3Rpb24gYjY0dG9iNjR1KGEpe2E9YS5yZXBsYWNlKC9cXD0vZyxcIlwiKTthPWEucmVwbGFjZSgvXFwrL2csXCItXCIpO2E9YS5yZXBsYWNlKC9cXC8vZyxcIl9cIik7cmV0dXJuIGF9ZnVuY3Rpb24gYjY0dXRvYjY0KGEpe2lmKGEubGVuZ3RoJTQ9PTIpe2E9YStcIj09XCJ9ZWxzZXtpZihhLmxlbmd0aCU0PT0zKXthPWErXCI9XCJ9fWE9YS5yZXBsYWNlKC8tL2csXCIrXCIpO2E9YS5yZXBsYWNlKC9fL2csXCIvXCIpO3JldHVybiBhfWZ1bmN0aW9uIGhleHRvYjY0dShhKXtpZihhLmxlbmd0aCUyPT0xKXthPVwiMFwiK2F9cmV0dXJuIGI2NHRvYjY0dShoZXgyYjY0KGEpKX1mdW5jdGlvbiBiNjR1dG9oZXgoYSl7cmV0dXJuIGI2NHRvaGV4KGI2NHV0b2I2NChhKSl9dmFyIHV0Zjh0b2I2NHUsYjY0dXRvdXRmODtpZih0eXBlb2YgQnVmZmVyPT09XCJmdW5jdGlvblwiKXt1dGY4dG9iNjR1PWZ1bmN0aW9uKGEpe3JldHVybiBiNjR0b2I2NHUobmV3IEJ1ZmZlcihhLFwidXRmOFwiKS50b1N0cmluZyhcImJhc2U2NFwiKSl9O2I2NHV0b3V0Zjg9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBCdWZmZXIoYjY0dXRvYjY0KGEpLFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwidXRmOFwiKX19ZWxzZXt1dGY4dG9iNjR1PWZ1bmN0aW9uKGEpe3JldHVybiBoZXh0b2I2NHUodXJpY21wdG9oZXgoZW5jb2RlVVJJQ29tcG9uZW50QWxsKGEpKSl9O2I2NHV0b3V0Zjg9ZnVuY3Rpb24oYSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChoZXh0b3VyaWNtcChiNjR1dG9oZXgoYSkpKX19ZnVuY3Rpb24gdXRmOHRvYjY0KGEpe3JldHVybiBoZXgyYjY0KHVyaWNtcHRvaGV4KGVuY29kZVVSSUNvbXBvbmVudEFsbChhKSkpfWZ1bmN0aW9uIGI2NHRvdXRmOChhKXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGhleHRvdXJpY21wKGI2NHRvaGV4KGEpKSl9ZnVuY3Rpb24gdXRmOHRvaGV4KGEpe3JldHVybiB1cmljbXB0b2hleChlbmNvZGVVUklDb21wb25lbnRBbGwoYSkpfWZ1bmN0aW9uIGhleHRvdXRmOChhKXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGhleHRvdXJpY21wKGEpKX1mdW5jdGlvbiBoZXh0b3JzdHIoYyl7dmFyIGI9XCJcIjtmb3IodmFyIGE9MDthPGMubGVuZ3RoLTE7YSs9Mil7Yis9U3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChjLnN1YnN0cihhLDIpLDE2KSl9cmV0dXJuIGJ9ZnVuY3Rpb24gcnN0cnRvaGV4KGMpe3ZhciBhPVwiXCI7Zm9yKHZhciBiPTA7YjxjLmxlbmd0aDtiKyspe2ErPShcIjBcIitjLmNoYXJDb2RlQXQoYikudG9TdHJpbmcoMTYpKS5zbGljZSgtMil9cmV0dXJuIGF9ZnVuY3Rpb24gaGV4dG9iNjQoYSl7cmV0dXJuIGhleDJiNjQoYSl9ZnVuY3Rpb24gaGV4dG9iNjRubChiKXt2YXIgYT1oZXh0b2I2NChiKTt2YXIgYz1hLnJlcGxhY2UoLyguezY0fSkvZyxcIiQxXFxyXFxuXCIpO2M9Yy5yZXBsYWNlKC9cXHJcXG4kLyxcIlwiKTtyZXR1cm4gY31mdW5jdGlvbiBiNjRubHRvaGV4KGIpe3ZhciBhPWIucmVwbGFjZSgvW14wLTlBLVphLXpcXC8rPV0qL2csXCJcIik7dmFyIGM9YjY0dG9oZXgoYSk7cmV0dXJuIGN9ZnVuY3Rpb24gdXJpY21wdG9oZXgoYSl7cmV0dXJuIGEucmVwbGFjZSgvJS9nLFwiXCIpfWZ1bmN0aW9uIGhleHRvdXJpY21wKGEpe3JldHVybiBhLnJlcGxhY2UoLyguLikvZyxcIiUkMVwiKX1mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRBbGwoYSl7dmFyIGQ9ZW5jb2RlVVJJQ29tcG9uZW50KGEpO3ZhciBiPVwiXCI7Zm9yKHZhciBjPTA7YzxkLmxlbmd0aDtjKyspe2lmKGRbY109PVwiJVwiKXtiPWIrZC5zdWJzdHIoYywzKTtjPWMrMn1lbHNle2I9YitcIiVcIitzdG9oZXgoZFtjXSl9fXJldHVybiBifWZ1bmN0aW9uIG5ld2xpbmVfdG9Vbml4KGEpe2E9YS5yZXBsYWNlKC9cXHJcXG4vbWcsXCJcXG5cIik7cmV0dXJuIGF9ZnVuY3Rpb24gbmV3bGluZV90b0RvcyhhKXthPWEucmVwbGFjZSgvXFxyXFxuL21nLFwiXFxuXCIpO2E9YS5yZXBsYWNlKC9cXG4vbWcsXCJcXHJcXG5cIik7cmV0dXJuIGF9ZnVuY3Rpb24gaW50YXJ5c3RydG9oZXgoYil7Yj1iLnJlcGxhY2UoL15cXHMqXFxbXFxzKi8sXCJcIik7Yj1iLnJlcGxhY2UoL1xccypcXF1cXHMqJC8sXCJcIik7Yj1iLnJlcGxhY2UoL1xccyovZyxcIlwiKTt0cnl7dmFyIGM9Yi5zcGxpdCgvLC8pLm1hcChmdW5jdGlvbihnLGUsaCl7dmFyIGY9cGFyc2VJbnQoZyk7aWYoZjwwfHwyNTU8Zil7dGhyb3dcImludGVnZXIgbm90IGluIHJhbmdlIDAtMjU1XCJ9dmFyIGQ9KFwiMDBcIitmLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO3JldHVybiBkfSkuam9pbihcIlwiKTtyZXR1cm4gY31jYXRjaChhKXt0aHJvd1wibWFsZm9ybWVkIGludGVnZXIgYXJyYXkgc3RyaW5nOiBcIithfX12YXIgc3RyZGlmZmlkeD1mdW5jdGlvbihjLGEpe3ZhciBkPWMubGVuZ3RoO2lmKGMubGVuZ3RoPmEubGVuZ3RoKXtkPWEubGVuZ3RofWZvcih2YXIgYj0wO2I8ZDtiKyspe2lmKGMuY2hhckNvZGVBdChiKSE9YS5jaGFyQ29kZUF0KGIpKXtyZXR1cm4gYn19aWYoYy5sZW5ndGghPWEubGVuZ3RoKXtyZXR1cm4gZH1yZXR1cm4gLTF9O1xuXHQvKiEgY3J5cHRvLTEuMS44LmpzIChjKSAyMDEzLTIwMTYgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2Vcblx0ICovXG5cdGlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5jcnlwdG89PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmNyeXB0byl7S0pVUi5jcnlwdG89e319S0pVUi5jcnlwdG8uVXRpbD1uZXcgZnVuY3Rpb24oKXt0aGlzLkRJR0VTVElORk9IRUFEPXtzaGExOlwiMzAyMTMwMDkwNjA1MmIwZTAzMDIxYTA1MDAwNDE0XCIsc2hhMjI0OlwiMzAyZDMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjA0MDUwMDA0MWNcIixzaGEyNTY6XCIzMDMxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDEwNTAwMDQyMFwiLHNoYTM4NDpcIjMwNDEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMjA1MDAwNDMwXCIsc2hhNTEyOlwiMzA1MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAzMDUwMDA0NDBcIixtZDI6XCIzMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjAyMDUwMDA0MTBcIixtZDU6XCIzMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjA1MDUwMDA0MTBcIixyaXBlbWQxNjA6XCIzMDIxMzAwOTA2MDUyYjI0MDMwMjAxMDUwMDA0MTRcIix9O3RoaXMuREVGQVVMVFBST1ZJREVSPXttZDU6XCJjcnlwdG9qc1wiLHNoYTE6XCJjcnlwdG9qc1wiLHNoYTIyNDpcImNyeXB0b2pzXCIsc2hhMjU2OlwiY3J5cHRvanNcIixzaGEzODQ6XCJjcnlwdG9qc1wiLHNoYTUxMjpcImNyeXB0b2pzXCIscmlwZW1kMTYwOlwiY3J5cHRvanNcIixobWFjbWQ1OlwiY3J5cHRvanNcIixobWFjc2hhMTpcImNyeXB0b2pzXCIsaG1hY3NoYTIyNDpcImNyeXB0b2pzXCIsaG1hY3NoYTI1NjpcImNyeXB0b2pzXCIsaG1hY3NoYTM4NDpcImNyeXB0b2pzXCIsaG1hY3NoYTUxMjpcImNyeXB0b2pzXCIsaG1hY3JpcGVtZDE2MDpcImNyeXB0b2pzXCIsTUQ1d2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTIyNHdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTI1NndpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTM4NHdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTUxMndpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFJJUEVNRDE2MHdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLE1ENXdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjI0d2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyNTZ3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTM4NHdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBNTEyd2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixSSVBFTUQxNjB3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTF3aXRoRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyNTZ3aXRoRFNBOlwiY3J5cHRvanMvanNyc2FcIixNRDV3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjU2d2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTM4NHdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEE1MTJ3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsUklQRU1EMTYwd2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLH07dGhpcy5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FPXttZDU6Q3J5cHRvSlMuYWxnby5NRDUsc2hhMTpDcnlwdG9KUy5hbGdvLlNIQTEsc2hhMjI0OkNyeXB0b0pTLmFsZ28uU0hBMjI0LHNoYTI1NjpDcnlwdG9KUy5hbGdvLlNIQTI1NixzaGEzODQ6Q3J5cHRvSlMuYWxnby5TSEEzODQsc2hhNTEyOkNyeXB0b0pTLmFsZ28uU0hBNTEyLHJpcGVtZDE2MDpDcnlwdG9KUy5hbGdvLlJJUEVNRDE2MH07dGhpcy5nZXREaWdlc3RJbmZvSGV4PWZ1bmN0aW9uKGEsYil7aWYodHlwZW9mIHRoaXMuRElHRVNUSU5GT0hFQURbYl09PVwidW5kZWZpbmVkXCIpe3Rocm93XCJhbGcgbm90IHN1cHBvcnRlZCBpbiBVdGlsLkRJR0VTVElORk9IRUFEOiBcIitifXJldHVybiB0aGlzLkRJR0VTVElORk9IRUFEW2JdK2F9O3RoaXMuZ2V0UGFkZGVkRGlnZXN0SW5mb0hleD1mdW5jdGlvbihoLGEsail7dmFyIGM9dGhpcy5nZXREaWdlc3RJbmZvSGV4KGgsYSk7dmFyIGQ9ai80O2lmKGMubGVuZ3RoKzIyPmQpe3Rocm93XCJrZXkgaXMgdG9vIHNob3J0IGZvciBTaWdBbGc6IGtleWxlbj1cIitqK1wiLFwiK2F9dmFyIGI9XCIwMDAxXCI7dmFyIGs9XCIwMFwiK2M7dmFyIGc9XCJcIjt2YXIgbD1kLWIubGVuZ3RoLWsubGVuZ3RoO2Zvcih2YXIgZj0wO2Y8bDtmKz0yKXtnKz1cImZmXCJ9dmFyIGU9YitnK2s7cmV0dXJuIGV9O3RoaXMuaGFzaFN0cmluZz1mdW5jdGlvbihhLGMpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6Y30pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07dGhpcy5oYXNoSGV4PWZ1bmN0aW9uKGIsYyl7dmFyIGE9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpjfSk7cmV0dXJuIGEuZGlnZXN0SGV4KGIpfTt0aGlzLnNoYTE9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcInNoYTFcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07dGhpcy5zaGEyNTY9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcInNoYTI1NlwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0U3RyaW5nKGEpfTt0aGlzLnNoYTI1NkhleD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOlwic2hhMjU2XCIscHJvdjpcImNyeXB0b2pzXCJ9KTtyZXR1cm4gYi5kaWdlc3RIZXgoYSl9O3RoaXMuc2hhNTEyPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJzaGE1MTJcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07dGhpcy5zaGE1MTJIZXg9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcInNoYTUxMlwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0SGV4KGEpfTt0aGlzLm1kNT1mdW5jdGlvbihhKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOlwibWQ1XCIscHJvdjpcImNyeXB0b2pzXCJ9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O3RoaXMucmlwZW1kMTYwPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJyaXBlbWQxNjBcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07dGhpcy5nZXRDcnlwdG9KU01EQnlOYW1lPWZ1bmN0aW9uKGEpe319O0tKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Q9ZnVuY3Rpb24oYyl7dmFyIGI9bnVsbDt2YXIgYT1udWxsO3ZhciBkPW51bGw7dGhpcy5zZXRBbGdBbmRQcm92aWRlcj1mdW5jdGlvbihnLGYpe2lmKGchPW51bGwmJmY9PT11bmRlZmluZWQpe2Y9S0pVUi5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJbZ119aWYoXCI6bWQ1OnNoYTE6c2hhMjI0OnNoYTI1NjpzaGEzODQ6c2hhNTEyOnJpcGVtZDE2MDpcIi5pbmRleE9mKGcpIT0tMSYmZj09XCJjcnlwdG9qc1wiKXt0cnl7dGhpcy5tZD1LSlVSLmNyeXB0by5VdGlsLkNSWVBUT0pTTUVTU0FHRURJR0VTVE5BTUVbZ10uY3JlYXRlKCl9Y2F0Y2goZSl7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIGhhc2ggYWxnIHNldCBmYWlsIGFsZz1cIitnK1wiL1wiK2V9dGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24oaCl7dGhpcy5tZC51cGRhdGUoaCl9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKGgpe3ZhciBpPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoaCk7dGhpcy5tZC51cGRhdGUoaSl9O3RoaXMuZGlnZXN0PWZ1bmN0aW9uKCl7dmFyIGg9dGhpcy5tZC5maW5hbGl6ZSgpO3JldHVybiBoLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5IZXgpfTt0aGlzLmRpZ2VzdFN0cmluZz1mdW5jdGlvbihoKXt0aGlzLnVwZGF0ZVN0cmluZyhoKTtyZXR1cm4gdGhpcy5kaWdlc3QoKX07dGhpcy5kaWdlc3RIZXg9ZnVuY3Rpb24oaCl7dGhpcy51cGRhdGVIZXgoaCk7cmV0dXJuIHRoaXMuZGlnZXN0KCl9fWlmKFwiOnNoYTI1NjpcIi5pbmRleE9mKGcpIT0tMSYmZj09XCJzamNsXCIpe3RyeXt0aGlzLm1kPW5ldyBzamNsLmhhc2guc2hhMjU2KCl9Y2F0Y2goZSl7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIGhhc2ggYWxnIHNldCBmYWlsIGFsZz1cIitnK1wiL1wiK2V9dGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24oaCl7dGhpcy5tZC51cGRhdGUoaCl9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKGkpe3ZhciBoPXNqY2wuY29kZWMuaGV4LnRvQml0cyhpKTt0aGlzLm1kLnVwZGF0ZShoKX07dGhpcy5kaWdlc3Q9ZnVuY3Rpb24oKXt2YXIgaD10aGlzLm1kLmZpbmFsaXplKCk7cmV0dXJuIHNqY2wuY29kZWMuaGV4LmZyb21CaXRzKGgpfTt0aGlzLmRpZ2VzdFN0cmluZz1mdW5jdGlvbihoKXt0aGlzLnVwZGF0ZVN0cmluZyhoKTtyZXR1cm4gdGhpcy5kaWdlc3QoKX07dGhpcy5kaWdlc3RIZXg9ZnVuY3Rpb24oaCl7dGhpcy51cGRhdGVIZXgoaCk7cmV0dXJuIHRoaXMuZGlnZXN0KCl9fX07dGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24oZSl7dGhyb3dcInVwZGF0ZVN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfTt0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbihlKXt0aHJvd1widXBkYXRlSGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdOYW1lK1wiL1wiK3RoaXMucHJvdk5hbWV9O3RoaXMuZGlnZXN0PWZ1bmN0aW9uKCl7dGhyb3dcImRpZ2VzdCgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfTt0aGlzLmRpZ2VzdFN0cmluZz1mdW5jdGlvbihlKXt0aHJvd1wiZGlnZXN0U3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdOYW1lK1wiL1wiK3RoaXMucHJvdk5hbWV9O3RoaXMuZGlnZXN0SGV4PWZ1bmN0aW9uKGUpe3Rocm93XCJkaWdlc3RIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07aWYoYyE9PXVuZGVmaW5lZCl7aWYoYy5hbGchPT11bmRlZmluZWQpe3RoaXMuYWxnTmFtZT1jLmFsZztpZihjLnByb3Y9PT11bmRlZmluZWQpe3RoaXMucHJvdk5hbWU9S0pVUi5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJbdGhpcy5hbGdOYW1lXX10aGlzLnNldEFsZ0FuZFByb3ZpZGVyKHRoaXMuYWxnTmFtZSx0aGlzLnByb3ZOYW1lKX19fTtLSlVSLmNyeXB0by5NYWM9ZnVuY3Rpb24oZCl7dmFyIGY9bnVsbDt2YXIgYz1udWxsO3ZhciBhPW51bGw7dmFyIGU9bnVsbDt2YXIgYj1udWxsO3RoaXMuc2V0QWxnQW5kUHJvdmlkZXI9ZnVuY3Rpb24oayxpKXtrPWsudG9Mb3dlckNhc2UoKTtpZihrPT1udWxsKXtrPVwiaG1hY3NoYTFcIn1rPWsudG9Mb3dlckNhc2UoKTtpZihrLnN1YnN0cigwLDQpIT1cImhtYWNcIil7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIHVuc3VwcG9ydGVkIEhNQUMgYWxnOiBcIitrfWlmKGk9PT11bmRlZmluZWQpe2k9S0pVUi5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJba119dGhpcy5hbGdQcm92PWsrXCIvXCIraTt2YXIgZz1rLnN1YnN0cig0KTtpZihcIjptZDU6c2hhMTpzaGEyMjQ6c2hhMjU2OnNoYTM4NDpzaGE1MTI6cmlwZW1kMTYwOlwiLmluZGV4T2YoZykhPS0xJiZpPT1cImNyeXB0b2pzXCIpe3RyeXt2YXIgaj1LSlVSLmNyeXB0by5VdGlsLkNSWVBUT0pTTUVTU0FHRURJR0VTVE5BTUVbZ107dGhpcy5tYWM9Q3J5cHRvSlMuYWxnby5ITUFDLmNyZWF0ZShqLHRoaXMucGFzcyl9Y2F0Y2goaCl7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIGhhc2ggYWxnIHNldCBmYWlsIGhhc2hBbGc9XCIrZytcIi9cIitofXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGwpe3RoaXMubWFjLnVwZGF0ZShsKX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24obCl7dmFyIG09Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShsKTt0aGlzLm1hYy51cGRhdGUobSl9O3RoaXMuZG9GaW5hbD1mdW5jdGlvbigpe3ZhciBsPXRoaXMubWFjLmZpbmFsaXplKCk7cmV0dXJuIGwudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLkhleCl9O3RoaXMuZG9GaW5hbFN0cmluZz1mdW5jdGlvbihsKXt0aGlzLnVwZGF0ZVN0cmluZyhsKTtyZXR1cm4gdGhpcy5kb0ZpbmFsKCl9O3RoaXMuZG9GaW5hbEhleD1mdW5jdGlvbihsKXt0aGlzLnVwZGF0ZUhleChsKTtyZXR1cm4gdGhpcy5kb0ZpbmFsKCl9fX07dGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24oZyl7dGhyb3dcInVwZGF0ZVN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24oZyl7dGhyb3dcInVwZGF0ZUhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy5kb0ZpbmFsPWZ1bmN0aW9uKCl7dGhyb3dcImRpZ2VzdCgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy5kb0ZpbmFsU3RyaW5nPWZ1bmN0aW9uKGcpe3Rocm93XCJkaWdlc3RTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMuZG9GaW5hbEhleD1mdW5jdGlvbihnKXt0aHJvd1wiZGlnZXN0SGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdQcm92fTt0aGlzLnNldFBhc3N3b3JkPWZ1bmN0aW9uKGgpe2lmKHR5cGVvZiBoPT1cInN0cmluZ1wiKXt2YXIgZz1oO2lmKGgubGVuZ3RoJTI9PTF8fCFoLm1hdGNoKC9eWzAtOUEtRmEtZl0rJC8pKXtnPXJzdHJ0b2hleChoKX10aGlzLnBhc3M9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShnKTtyZXR1cm59aWYodHlwZW9mIGghPVwib2JqZWN0XCIpe3Rocm93XCJLSlVSLmNyeXB0by5NYWMgdW5zdXBwb3J0ZWQgcGFzc3dvcmQgdHlwZTogXCIraH12YXIgZz1udWxsO2lmKGguaGV4IT09dW5kZWZpbmVkKXtpZihoLmhleC5sZW5ndGglMiE9MHx8IWguaGV4Lm1hdGNoKC9eWzAtOUEtRmEtZl0rJC8pKXt0aHJvd1wiTWFjOiB3cm9uZyBoZXggcGFzc3dvcmQ6IFwiK2guaGV4fWc9aC5oZXh9aWYoaC51dGY4IT09dW5kZWZpbmVkKXtnPXV0Zjh0b2hleChoLnV0ZjgpfWlmKGgucnN0ciE9PXVuZGVmaW5lZCl7Zz1yc3RydG9oZXgoaC5yc3RyKX1pZihoLmI2NCE9PXVuZGVmaW5lZCl7Zz1iNjR0b2hleChoLmI2NCl9aWYoaC5iNjR1IT09dW5kZWZpbmVkKXtnPWI2NHV0b2hleChoLmI2NHUpfWlmKGc9PW51bGwpe3Rocm93XCJLSlVSLmNyeXB0by5NYWMgdW5zdXBwb3J0ZWQgcGFzc3dvcmQgdHlwZTogXCIraH10aGlzLnBhc3M9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShnKX07aWYoZCE9PXVuZGVmaW5lZCl7aWYoZC5wYXNzIT09dW5kZWZpbmVkKXt0aGlzLnNldFBhc3N3b3JkKGQucGFzcyl9aWYoZC5hbGchPT11bmRlZmluZWQpe3RoaXMuYWxnTmFtZT1kLmFsZztpZihkLnByb3Y9PT11bmRlZmluZWQpe3RoaXMucHJvdk5hbWU9S0pVUi5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJbdGhpcy5hbGdOYW1lXX10aGlzLnNldEFsZ0FuZFByb3ZpZGVyKHRoaXMuYWxnTmFtZSx0aGlzLnByb3ZOYW1lKX19fTtLSlVSLmNyeXB0by5TaWduYXR1cmU9ZnVuY3Rpb24obyl7dmFyIHE9bnVsbDt2YXIgbj1udWxsO3ZhciByPW51bGw7dmFyIGM9bnVsbDt2YXIgbD1udWxsO3ZhciBkPW51bGw7dmFyIGs9bnVsbDt2YXIgaD1udWxsO3ZhciBwPW51bGw7dmFyIGU9bnVsbDt2YXIgYj0tMTt2YXIgZz1udWxsO3ZhciBqPW51bGw7dmFyIGE9bnVsbDt2YXIgaT1udWxsO3ZhciBmPW51bGw7dGhpcy5fc2V0QWxnTmFtZXM9ZnVuY3Rpb24oKXtpZih0aGlzLmFsZ05hbWUubWF0Y2goL14oLispd2l0aCguKykkLykpe3RoaXMubWRBbGdOYW1lPVJlZ0V4cC4kMS50b0xvd2VyQ2FzZSgpO3RoaXMucHVia2V5QWxnTmFtZT1SZWdFeHAuJDIudG9Mb3dlckNhc2UoKX19O3RoaXMuX3plcm9QYWRkaW5nT2ZTaWduYXR1cmU9ZnVuY3Rpb24oeCx3KXt2YXIgdj1cIlwiO3ZhciB0PXcvNC14Lmxlbmd0aDtmb3IodmFyIHU9MDt1PHQ7dSsrKXt2PXYrXCIwXCJ9cmV0dXJuIHYreH07dGhpcy5zZXRBbGdBbmRQcm92aWRlcj1mdW5jdGlvbih1LHQpe3RoaXMuX3NldEFsZ05hbWVzKCk7aWYodCE9XCJjcnlwdG9qcy9qc3JzYVwiKXt0aHJvd1wicHJvdmlkZXIgbm90IHN1cHBvcnRlZDogXCIrdH1pZihcIjptZDU6c2hhMTpzaGEyMjQ6c2hhMjU2OnNoYTM4NDpzaGE1MTI6cmlwZW1kMTYwOlwiLmluZGV4T2YodGhpcy5tZEFsZ05hbWUpIT0tMSl7dHJ5e3RoaXMubWQ9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzp0aGlzLm1kQWxnTmFtZX0pfWNhdGNoKHMpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBhbGc9XCIrdGhpcy5tZEFsZ05hbWUrXCIvXCIrc310aGlzLmluaXQ9ZnVuY3Rpb24odyx4KXt2YXIgeT1udWxsO3RyeXtpZih4PT09dW5kZWZpbmVkKXt5PUtFWVVUSUwuZ2V0S2V5KHcpfWVsc2V7eT1LRVlVVElMLmdldEtleSh3LHgpfX1jYXRjaCh2KXt0aHJvd1wiaW5pdCBmYWlsZWQ6XCIrdn1pZih5LmlzUHJpdmF0ZT09PXRydWUpe3RoaXMucHJ2S2V5PXk7dGhpcy5zdGF0ZT1cIlNJR05cIn1lbHNle2lmKHkuaXNQdWJsaWM9PT10cnVlKXt0aGlzLnB1YktleT15O3RoaXMuc3RhdGU9XCJWRVJJRllcIn1lbHNle3Rocm93XCJpbml0IGZhaWxlZC46XCIreX19fTt0aGlzLmluaXRTaWduPWZ1bmN0aW9uKHYpe2lmKHR5cGVvZiB2LmVjcHJ2aGV4PT1cInN0cmluZ1wiJiZ0eXBlb2Ygdi5lY2N1cnZlbmFtZT09XCJzdHJpbmdcIil7dGhpcy5lY3BydmhleD12LmVjcHJ2aGV4O3RoaXMuZWNjdXJ2ZW5hbWU9di5lY2N1cnZlbmFtZX1lbHNle3RoaXMucHJ2S2V5PXZ9dGhpcy5zdGF0ZT1cIlNJR05cIn07dGhpcy5pbml0VmVyaWZ5QnlQdWJsaWNLZXk9ZnVuY3Rpb24odil7aWYodHlwZW9mIHYuZWNwdWJoZXg9PVwic3RyaW5nXCImJnR5cGVvZiB2LmVjY3VydmVuYW1lPT1cInN0cmluZ1wiKXt0aGlzLmVjcHViaGV4PXYuZWNwdWJoZXg7dGhpcy5lY2N1cnZlbmFtZT12LmVjY3VydmVuYW1lfWVsc2V7aWYodiBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkVDRFNBKXt0aGlzLnB1YktleT12fWVsc2V7aWYodiBpbnN0YW5jZW9mIFJTQUtleSl7dGhpcy5wdWJLZXk9dn19fXRoaXMuc3RhdGU9XCJWRVJJRllcIn07dGhpcy5pbml0VmVyaWZ5QnlDZXJ0aWZpY2F0ZVBFTT1mdW5jdGlvbih2KXt2YXIgdz1uZXcgWDUwOSgpO3cucmVhZENlcnRQRU0odik7dGhpcy5wdWJLZXk9dy5zdWJqZWN0UHVibGljS2V5UlNBO3RoaXMuc3RhdGU9XCJWRVJJRllcIn07dGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24odil7dGhpcy5tZC51cGRhdGVTdHJpbmcodil9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKHYpe3RoaXMubWQudXBkYXRlSGV4KHYpfTt0aGlzLnNpZ249ZnVuY3Rpb24oKXt0aGlzLnNIYXNoSGV4PXRoaXMubWQuZGlnZXN0KCk7aWYodHlwZW9mIHRoaXMuZWNwcnZoZXghPVwidW5kZWZpbmVkXCImJnR5cGVvZiB0aGlzLmVjY3VydmVuYW1lIT1cInVuZGVmaW5lZFwiKXt2YXIgdj1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOnRoaXMuZWNjdXJ2ZW5hbWV9KTt0aGlzLmhTaWduPXYuc2lnbkhleCh0aGlzLnNIYXNoSGV4LHRoaXMuZWNwcnZoZXgpfWVsc2V7aWYodGhpcy5wcnZLZXkgaW5zdGFuY2VvZiBSU0FLZXkmJnRoaXMucHVia2V5QWxnTmFtZT09XCJyc2FhbmRtZ2YxXCIpe3RoaXMuaFNpZ249dGhpcy5wcnZLZXkuc2lnbldpdGhNZXNzYWdlSGFzaFBTUyh0aGlzLnNIYXNoSGV4LHRoaXMubWRBbGdOYW1lLHRoaXMucHNzU2FsdExlbil9ZWxzZXtpZih0aGlzLnBydktleSBpbnN0YW5jZW9mIFJTQUtleSYmdGhpcy5wdWJrZXlBbGdOYW1lPT1cInJzYVwiKXt0aGlzLmhTaWduPXRoaXMucHJ2S2V5LnNpZ25XaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx0aGlzLm1kQWxnTmFtZSl9ZWxzZXtpZih0aGlzLnBydktleSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkVDRFNBKXt0aGlzLmhTaWduPXRoaXMucHJ2S2V5LnNpZ25XaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCl9ZWxzZXtpZih0aGlzLnBydktleSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkRTQSl7dGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgpfWVsc2V7dGhyb3dcIlNpZ25hdHVyZTogdW5zdXBwb3J0ZWQgcHVibGljIGtleSBhbGc6IFwiK3RoaXMucHVia2V5QWxnTmFtZX19fX19cmV0dXJuIHRoaXMuaFNpZ259O3RoaXMuc2lnblN0cmluZz1mdW5jdGlvbih2KXt0aGlzLnVwZGF0ZVN0cmluZyh2KTtyZXR1cm4gdGhpcy5zaWduKCl9O3RoaXMuc2lnbkhleD1mdW5jdGlvbih2KXt0aGlzLnVwZGF0ZUhleCh2KTtyZXR1cm4gdGhpcy5zaWduKCl9O3RoaXMudmVyaWZ5PWZ1bmN0aW9uKHYpe3RoaXMuc0hhc2hIZXg9dGhpcy5tZC5kaWdlc3QoKTtpZih0eXBlb2YgdGhpcy5lY3B1YmhleCE9XCJ1bmRlZmluZWRcIiYmdHlwZW9mIHRoaXMuZWNjdXJ2ZW5hbWUhPVwidW5kZWZpbmVkXCIpe3ZhciB3PW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6dGhpcy5lY2N1cnZlbmFtZX0pO3JldHVybiB3LnZlcmlmeUhleCh0aGlzLnNIYXNoSGV4LHYsdGhpcy5lY3B1YmhleCl9ZWxzZXtpZih0aGlzLnB1YktleSBpbnN0YW5jZW9mIFJTQUtleSYmdGhpcy5wdWJrZXlBbGdOYW1lPT1cInJzYWFuZG1nZjFcIil7cmV0dXJuIHRoaXMucHViS2V5LnZlcmlmeVdpdGhNZXNzYWdlSGFzaFBTUyh0aGlzLnNIYXNoSGV4LHYsdGhpcy5tZEFsZ05hbWUsdGhpcy5wc3NTYWx0TGVuKX1lbHNle2lmKHRoaXMucHViS2V5IGluc3RhbmNlb2YgUlNBS2V5JiZ0aGlzLnB1YmtleUFsZ05hbWU9PVwicnNhXCIpe3JldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx2KX1lbHNle2lmKHRoaXMucHViS2V5IGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0Epe3JldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx2KX1lbHNle2lmKHRoaXMucHViS2V5IGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRFNBKXtyZXR1cm4gdGhpcy5wdWJLZXkudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgsdil9ZWxzZXt0aHJvd1wiU2lnbmF0dXJlOiB1bnN1cHBvcnRlZCBwdWJsaWMga2V5IGFsZzogXCIrdGhpcy5wdWJrZXlBbGdOYW1lfX19fX19fX07dGhpcy5pbml0PWZ1bmN0aW9uKHMsdCl7dGhyb3dcImluaXQoa2V5LCBwYXNzKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMuaW5pdFZlcmlmeUJ5UHVibGljS2V5PWZ1bmN0aW9uKHMpe3Rocm93XCJpbml0VmVyaWZ5QnlQdWJsaWNLZXkocnNhUHViS2V5eSkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLmluaXRWZXJpZnlCeUNlcnRpZmljYXRlUEVNPWZ1bmN0aW9uKHMpe3Rocm93XCJpbml0VmVyaWZ5QnlDZXJ0aWZpY2F0ZVBFTShjZXJ0UEVNKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMuaW5pdFNpZ249ZnVuY3Rpb24ocyl7dGhyb3dcImluaXRTaWduKHBydktleSkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihzKXt0aHJvd1widXBkYXRlU3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbihzKXt0aHJvd1widXBkYXRlSGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnNpZ249ZnVuY3Rpb24oKXt0aHJvd1wic2lnbigpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy5zaWduU3RyaW5nPWZ1bmN0aW9uKHMpe3Rocm93XCJkaWdlc3RTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMuc2lnbkhleD1mdW5jdGlvbihzKXt0aHJvd1wiZGlnZXN0SGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnZlcmlmeT1mdW5jdGlvbihzKXt0aHJvd1widmVyaWZ5KGhTaWdWYWwpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy5pbml0UGFyYW1zPW87aWYobyE9PXVuZGVmaW5lZCl7aWYoby5hbGchPT11bmRlZmluZWQpe3RoaXMuYWxnTmFtZT1vLmFsZztpZihvLnByb3Y9PT11bmRlZmluZWQpe3RoaXMucHJvdk5hbWU9S0pVUi5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJbdGhpcy5hbGdOYW1lXX1lbHNle3RoaXMucHJvdk5hbWU9by5wcm92fXRoaXMuYWxnUHJvdk5hbWU9dGhpcy5hbGdOYW1lK1wiOlwiK3RoaXMucHJvdk5hbWU7dGhpcy5zZXRBbGdBbmRQcm92aWRlcih0aGlzLmFsZ05hbWUsdGhpcy5wcm92TmFtZSk7dGhpcy5fc2V0QWxnTmFtZXMoKX1pZihvLnBzc3NhbHRsZW4hPT11bmRlZmluZWQpe3RoaXMucHNzU2FsdExlbj1vLnBzc3NhbHRsZW59aWYoby5wcnZrZXlwZW0hPT11bmRlZmluZWQpe2lmKG8ucHJ2a2V5cGFzIT09dW5kZWZpbmVkKXt0aHJvd1wiYm90aCBwcnZrZXlwZW0gYW5kIHBydmtleXBhcyBwYXJhbWV0ZXJzIG5vdCBzdXBwb3J0ZWRcIn1lbHNle3RyeXt2YXIgcT1uZXcgUlNBS2V5KCk7cS5yZWFkUHJpdmF0ZUtleUZyb21QRU1TdHJpbmcoby5wcnZrZXlwZW0pO3RoaXMuaW5pdFNpZ24ocSl9Y2F0Y2gobSl7dGhyb3dcImZhdGFsIGVycm9yIHRvIGxvYWQgcGVtIHByaXZhdGUga2V5OiBcIittfX19fX07S0pVUi5jcnlwdG8uT0lEPW5ldyBmdW5jdGlvbigpe3RoaXMub2lkaGV4Mm5hbWU9e1wiMmE4NjQ4ODZmNzBkMDEwMTAxXCI6XCJyc2FFbmNyeXB0aW9uXCIsXCIyYTg2NDhjZTNkMDIwMVwiOlwiZWNQdWJsaWNLZXlcIixcIjJhODY0OGNlMzgwNDAxXCI6XCJkc2FcIixcIjJhODY0OGNlM2QwMzAxMDdcIjpcInNlY3AyNTZyMVwiLFwiMmI4MTA0MDAxZlwiOlwic2VjcDE5MmsxXCIsXCIyYjgxMDQwMDIxXCI6XCJzZWNwMjI0cjFcIixcIjJiODEwNDAwMGFcIjpcInNlY3AyNTZrMVwiLFwiMmI4MTA0MDAyM1wiOlwic2VjcDUyMXIxXCIsXCIyYjgxMDQwMDIyXCI6XCJzZWNwMzg0cjFcIixcIjJhODY0OGNlMzgwNDAzXCI6XCJTSEExd2l0aERTQVwiLFwiNjA4NjQ4MDE2NTAzMDQwMzAxXCI6XCJTSEEyMjR3aXRoRFNBXCIsXCI2MDg2NDgwMTY1MDMwNDAzMDJcIjpcIlNIQTI1NndpdGhEU0FcIix9fTtcblx0LyohIGVjZHNhLW1vZGlmaWVkLTEuMC40LmpzIChjKSBTdGVwaGFuIFRob21hcywgS2VuamkgVXJ1c2hpbWEgfCBnaXRodWIuY29tL2JpdGNvaW5qcy9iaXRjb2luanMtbGliL2Jsb2IvbWFzdGVyL0xJQ0VOU0Vcblx0ICovXG5cdGlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5jcnlwdG89PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmNyeXB0byl7S0pVUi5jcnlwdG89e319S0pVUi5jcnlwdG8uRUNEU0E9ZnVuY3Rpb24oaCl7dmFyIGU9XCJzZWNwMjU2cjFcIjt2YXIgZz1udWxsO3ZhciBiPW51bGw7dmFyIGY9bnVsbDt2YXIgYT1uZXcgU2VjdXJlUmFuZG9tKCk7dmFyIGQ9bnVsbDt0aGlzLnR5cGU9XCJFQ1wiO2Z1bmN0aW9uIGMocyxvLHIsbil7dmFyIGo9TWF0aC5tYXgoby5iaXRMZW5ndGgoKSxuLmJpdExlbmd0aCgpKTt2YXIgdD1zLmFkZDJEKHIpO3ZhciBxPXMuY3VydmUuZ2V0SW5maW5pdHkoKTtmb3IodmFyIHA9ai0xO3A+PTA7LS1wKXtxPXEudHdpY2UyRCgpO3Euej1CaWdJbnRlZ2VyLk9ORTtpZihvLnRlc3RCaXQocCkpe2lmKG4udGVzdEJpdChwKSl7cT1xLmFkZDJEKHQpfWVsc2V7cT1xLmFkZDJEKHMpfX1lbHNle2lmKG4udGVzdEJpdChwKSl7cT1xLmFkZDJEKHIpfX19cmV0dXJuIHF9dGhpcy5nZXRCaWdSYW5kb209ZnVuY3Rpb24oaSl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGkuYml0TGVuZ3RoKCksYSkubW9kKGkuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpKS5hZGQoQmlnSW50ZWdlci5PTkUpfTt0aGlzLnNldE5hbWVkQ3VydmU9ZnVuY3Rpb24oaSl7dGhpcy5lY3BhcmFtcz1LSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLmdldEJ5TmFtZShpKTt0aGlzLnBydktleUhleD1udWxsO3RoaXMucHViS2V5SGV4PW51bGw7dGhpcy5jdXJ2ZU5hbWU9aX07dGhpcy5zZXRQcml2YXRlS2V5SGV4PWZ1bmN0aW9uKGkpe3RoaXMuaXNQcml2YXRlPXRydWU7dGhpcy5wcnZLZXlIZXg9aX07dGhpcy5zZXRQdWJsaWNLZXlIZXg9ZnVuY3Rpb24oaSl7dGhpcy5pc1B1YmxpYz10cnVlO3RoaXMucHViS2V5SGV4PWl9O3RoaXMuZ2VuZXJhdGVLZXlQYWlySGV4PWZ1bmN0aW9uKCl7dmFyIGs9dGhpcy5lY3BhcmFtcy5uO3ZhciBuPXRoaXMuZ2V0QmlnUmFuZG9tKGspO3ZhciBsPXRoaXMuZWNwYXJhbXMuRy5tdWx0aXBseShuKTt2YXIgcT1sLmdldFgoKS50b0JpZ0ludGVnZXIoKTt2YXIgbz1sLmdldFkoKS50b0JpZ0ludGVnZXIoKTt2YXIgaT10aGlzLmVjcGFyYW1zLmtleWxlbi80O3ZhciBtPShcIjAwMDAwMDAwMDBcIituLnRvU3RyaW5nKDE2KSkuc2xpY2UoLWkpO3ZhciByPShcIjAwMDAwMDAwMDBcIitxLnRvU3RyaW5nKDE2KSkuc2xpY2UoLWkpO3ZhciBwPShcIjAwMDAwMDAwMDBcIitvLnRvU3RyaW5nKDE2KSkuc2xpY2UoLWkpO3ZhciBqPVwiMDRcIityK3A7dGhpcy5zZXRQcml2YXRlS2V5SGV4KG0pO3RoaXMuc2V0UHVibGljS2V5SGV4KGopO3JldHVybntlY3BydmhleDptLGVjcHViaGV4Omp9fTt0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXMuc2lnbkhleChpLHRoaXMucHJ2S2V5SGV4KX07dGhpcy5zaWduSGV4PWZ1bmN0aW9uKG8sail7dmFyIHQ9bmV3IEJpZ0ludGVnZXIoaiwxNik7dmFyIGw9dGhpcy5lY3BhcmFtcy5uO3ZhciBxPW5ldyBCaWdJbnRlZ2VyKG8sMTYpO2Rve3ZhciBtPXRoaXMuZ2V0QmlnUmFuZG9tKGwpO3ZhciB1PXRoaXMuZWNwYXJhbXMuRzt2YXIgcD11Lm11bHRpcGx5KG0pO3ZhciBpPXAuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZChsKX13aGlsZShpLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPD0wKTt2YXIgdj1tLm1vZEludmVyc2UobCkubXVsdGlwbHkocS5hZGQodC5tdWx0aXBseShpKSkpLm1vZChsKTtyZXR1cm4gS0pVUi5jcnlwdG8uRUNEU0EuYmlSU1NpZ1RvQVNOMVNpZyhpLHYpfTt0aGlzLnNpZ249ZnVuY3Rpb24obSx1KXt2YXIgcT11O3ZhciBqPXRoaXMuZWNwYXJhbXMubjt2YXIgcD1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChtKTtkb3t2YXIgbD10aGlzLmdldEJpZ1JhbmRvbShqKTt2YXIgdD10aGlzLmVjcGFyYW1zLkc7dmFyIG89dC5tdWx0aXBseShsKTt2YXIgaT1vLmdldFgoKS50b0JpZ0ludGVnZXIoKS5tb2Qoail9d2hpbGUoaS5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKTw9MCk7dmFyIHY9bC5tb2RJbnZlcnNlKGopLm11bHRpcGx5KHAuYWRkKHEubXVsdGlwbHkoaSkpKS5tb2Qoaik7cmV0dXJuIHRoaXMuc2VyaWFsaXplU2lnKGksdil9O3RoaXMudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKGosaSl7cmV0dXJuIHRoaXMudmVyaWZ5SGV4KGosaSx0aGlzLnB1YktleUhleCl9O3RoaXMudmVyaWZ5SGV4PWZ1bmN0aW9uKG0saSxwKXt2YXIgbCxqO3ZhciBvPUtKVVIuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4KGkpO2w9by5yO2o9by5zO3ZhciBrO2s9RUNQb2ludEZwLmRlY29kZUZyb21IZXgodGhpcy5lY3BhcmFtcy5jdXJ2ZSxwKTt2YXIgbj1uZXcgQmlnSW50ZWdlcihtLDE2KTtyZXR1cm4gdGhpcy52ZXJpZnlSYXcobixsLGosayl9O3RoaXMudmVyaWZ5PWZ1bmN0aW9uKG8scCxqKXt2YXIgbCxpO2lmKEJpdGNvaW4uVXRpbC5pc0FycmF5KHApKXt2YXIgbj10aGlzLnBhcnNlU2lnKHApO2w9bi5yO2k9bi5zfWVsc2V7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwJiZwLnImJnAucyl7bD1wLnI7aT1wLnN9ZWxzZXt0aHJvd1wiSW52YWxpZCB2YWx1ZSBmb3Igc2lnbmF0dXJlXCJ9fXZhciBrO2lmKGogaW5zdGFuY2VvZiBFQ1BvaW50RnApe2s9an1lbHNle2lmKEJpdGNvaW4uVXRpbC5pc0FycmF5KGopKXtrPUVDUG9pbnRGcC5kZWNvZGVGcm9tKHRoaXMuZWNwYXJhbXMuY3VydmUsail9ZWxzZXt0aHJvd1wiSW52YWxpZCBmb3JtYXQgZm9yIHB1YmtleSB2YWx1ZSwgbXVzdCBiZSBieXRlIGFycmF5IG9yIEVDUG9pbnRGcFwifX12YXIgbT1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChvKTtyZXR1cm4gdGhpcy52ZXJpZnlSYXcobSxsLGksayl9O3RoaXMudmVyaWZ5UmF3PWZ1bmN0aW9uKG8saSx3LG0pe3ZhciBsPXRoaXMuZWNwYXJhbXMubjt2YXIgdT10aGlzLmVjcGFyYW1zLkc7aWYoaS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpPDB8fGkuY29tcGFyZVRvKGwpPj0wKXtyZXR1cm4gZmFsc2V9aWYody5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpPDB8fHcuY29tcGFyZVRvKGwpPj0wKXtyZXR1cm4gZmFsc2V9dmFyIHA9dy5tb2RJbnZlcnNlKGwpO3ZhciBrPW8ubXVsdGlwbHkocCkubW9kKGwpO3ZhciBqPWkubXVsdGlwbHkocCkubW9kKGwpO3ZhciBxPXUubXVsdGlwbHkoaykuYWRkKG0ubXVsdGlwbHkoaikpO3ZhciB0PXEuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZChsKTtyZXR1cm4gdC5lcXVhbHMoaSl9O3RoaXMuc2VyaWFsaXplU2lnPWZ1bmN0aW9uKGssail7dmFyIGw9ay50b0J5dGVBcnJheVNpZ25lZCgpO3ZhciBpPWoudG9CeXRlQXJyYXlTaWduZWQoKTt2YXIgbT1bXTttLnB1c2goMik7bS5wdXNoKGwubGVuZ3RoKTttPW0uY29uY2F0KGwpO20ucHVzaCgyKTttLnB1c2goaS5sZW5ndGgpO209bS5jb25jYXQoaSk7bS51bnNoaWZ0KG0ubGVuZ3RoKTttLnVuc2hpZnQoNDgpO3JldHVybiBtfTt0aGlzLnBhcnNlU2lnPWZ1bmN0aW9uKG4pe3ZhciBtO2lmKG5bMF0hPTQ4KXt0aHJvdyBuZXcgRXJyb3IoXCJTaWduYXR1cmUgbm90IGEgdmFsaWQgREVSU2VxdWVuY2VcIil9bT0yO2lmKG5bbV0hPTIpe3Rocm93IG5ldyBFcnJvcihcIkZpcnN0IGVsZW1lbnQgaW4gc2lnbmF0dXJlIG11c3QgYmUgYSBERVJJbnRlZ2VyXCIpfXZhciBsPW4uc2xpY2UobSsyLG0rMituW20rMV0pO20rPTIrblttKzFdO2lmKG5bbV0hPTIpe3Rocm93IG5ldyBFcnJvcihcIlNlY29uZCBlbGVtZW50IGluIHNpZ25hdHVyZSBtdXN0IGJlIGEgREVSSW50ZWdlclwiKX12YXIgaT1uLnNsaWNlKG0rMixtKzIrblttKzFdKTttKz0yK25bbSsxXTt2YXIgaz1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChsKTt2YXIgaj1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChpKTtyZXR1cm57cjprLHM6an19O3RoaXMucGFyc2VTaWdDb21wYWN0PWZ1bmN0aW9uKG0pe2lmKG0ubGVuZ3RoIT09NjUpe3Rocm93XCJTaWduYXR1cmUgaGFzIHRoZSB3cm9uZyBsZW5ndGhcIn12YXIgaj1tWzBdLTI3O2lmKGo8MHx8aj43KXt0aHJvd1wiSW52YWxpZCBzaWduYXR1cmUgdHlwZVwifXZhciBvPXRoaXMuZWNwYXJhbXMubjt2YXIgbD1CaWdJbnRlZ2VyLmZyb21CeXRlQXJyYXlVbnNpZ25lZChtLnNsaWNlKDEsMzMpKS5tb2Qobyk7dmFyIGs9QmlnSW50ZWdlci5mcm9tQnl0ZUFycmF5VW5zaWduZWQobS5zbGljZSgzMyw2NSkpLm1vZChvKTtyZXR1cm57cjpsLHM6ayxpOmp9fTtpZihoIT09dW5kZWZpbmVkKXtpZihoLmN1cnZlIT09dW5kZWZpbmVkKXt0aGlzLmN1cnZlTmFtZT1oLmN1cnZlfX1pZih0aGlzLmN1cnZlTmFtZT09PXVuZGVmaW5lZCl7dGhpcy5jdXJ2ZU5hbWU9ZX10aGlzLnNldE5hbWVkQ3VydmUodGhpcy5jdXJ2ZU5hbWUpO2lmKGghPT11bmRlZmluZWQpe2lmKGgucHJ2IT09dW5kZWZpbmVkKXt0aGlzLnNldFByaXZhdGVLZXlIZXgoaC5wcnYpfWlmKGgucHViIT09dW5kZWZpbmVkKXt0aGlzLnNldFB1YmxpY0tleUhleChoLnB1Yil9fX07S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXg9ZnVuY3Rpb24oYSl7dmFyIGI9S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXhJbkhleFJTKGEpO3ZhciBkPW5ldyBCaWdJbnRlZ2VyKGIuciwxNik7dmFyIGM9bmV3IEJpZ0ludGVnZXIoYi5zLDE2KTtyZXR1cm57cjpkLHM6Y319O0tKVVIuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4SW5IZXhSUz1mdW5jdGlvbihjKXtpZihjLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJzaWduYXR1cmUgaXMgbm90IGEgQVNOLjEgc2VxdWVuY2VcIn12YXIgYj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihjLDApO2lmKGIubGVuZ3RoIT0yKXt0aHJvd1wibnVtYmVyIG9mIHNpZ25hdHVyZSBBU04uMSBzZXF1ZW5jZSBlbGVtZW50cyBzZWVtIHdyb25nXCJ9dmFyIGc9YlswXTt2YXIgZj1iWzFdO2lmKGMuc3Vic3RyKGcsMikhPVwiMDJcIil7dGhyb3dcIjFzdCBpdGVtIG9mIHNlcXVlbmUgb2Ygc2lnbmF0dXJlIGlzIG5vdCBBU04uMSBpbnRlZ2VyXCJ9aWYoYy5zdWJzdHIoZiwyKSE9XCIwMlwiKXt0aHJvd1wiMm5kIGl0ZW0gb2Ygc2VxdWVuZSBvZiBzaWduYXR1cmUgaXMgbm90IEFTTi4xIGludGVnZXJcIn12YXIgZT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihjLGcpO3ZhciBkPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGMsZik7cmV0dXJue3I6ZSxzOmR9fTtLSlVSLmNyeXB0by5FQ0RTQS5hc24xU2lnVG9Db25jYXRTaWc9ZnVuY3Rpb24oYyl7dmFyIGQ9S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXhJbkhleFJTKGMpO3ZhciBiPWQucjt2YXIgYT1kLnM7aWYoYi5zdWJzdHIoMCwyKT09XCIwMFwiJiYoKChiLmxlbmd0aC8yKSo4KSUoMTYqOCkpPT04KXtiPWIuc3Vic3RyKDIpfWlmKGEuc3Vic3RyKDAsMik9PVwiMDBcIiYmKCgoYS5sZW5ndGgvMikqOCklKDE2KjgpKT09OCl7YT1hLnN1YnN0cigyKX1pZigoKChiLmxlbmd0aC8yKSo4KSUoMTYqOCkpIT0wKXt0aHJvd1widW5rbm93biBFQ0RTQSBzaWcgciBsZW5ndGggZXJyb3JcIn1pZigoKChhLmxlbmd0aC8yKSo4KSUoMTYqOCkpIT0wKXt0aHJvd1widW5rbm93biBFQ0RTQSBzaWcgcyBsZW5ndGggZXJyb3JcIn1yZXR1cm4gYithfTtLSlVSLmNyeXB0by5FQ0RTQS5jb25jYXRTaWdUb0FTTjFTaWc9ZnVuY3Rpb24oYSl7aWYoKCgoYS5sZW5ndGgvMikqOCklKDE2KjgpKSE9MCl7dGhyb3dcInVua25vd24gRUNEU0EgY29uY2F0aW5hdGVkIHItcyBzaWcgIGxlbmd0aCBlcnJvclwifXZhciBjPWEuc3Vic3RyKDAsYS5sZW5ndGgvMik7dmFyIGI9YS5zdWJzdHIoYS5sZW5ndGgvMik7cmV0dXJuIEtKVVIuY3J5cHRvLkVDRFNBLmhleFJTU2lnVG9BU04xU2lnKGMsYil9O0tKVVIuY3J5cHRvLkVDRFNBLmhleFJTU2lnVG9BU04xU2lnPWZ1bmN0aW9uKGIsYSl7dmFyIGQ9bmV3IEJpZ0ludGVnZXIoYiwxNik7dmFyIGM9bmV3IEJpZ0ludGVnZXIoYSwxNik7cmV0dXJuIEtKVVIuY3J5cHRvLkVDRFNBLmJpUlNTaWdUb0FTTjFTaWcoZCxjKX07S0pVUi5jcnlwdG8uRUNEU0EuYmlSU1NpZ1RvQVNOMVNpZz1mdW5jdGlvbihlLGMpe3ZhciBiPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OmV9KTt2YXIgYT1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2JpZ2ludDpjfSk7dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6W2IsYV19KTtyZXR1cm4gZC5nZXRFbmNvZGVkSGV4KCl9O1xuXHQvKiEgZWNwYXJhbS0xLjAuMC5qcyAoYykgMjAxMyBLZW5qaSBVcnVzaGltYSB8IGtqdXIuZ2l0aHViLmNvbS9qc3JzYXNpZ24vbGljZW5zZVxuXHQgKi9cblx0aWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmNyeXB0bz09XCJ1bmRlZmluZWRcInx8IUtKVVIuY3J5cHRvKXtLSlVSLmNyeXB0bz17fX1LSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCPW5ldyBmdW5jdGlvbigpe3ZhciBiPXt9O3ZhciBjPXt9O2Z1bmN0aW9uIGEoZCl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGQsMTYpfXRoaXMuZ2V0QnlOYW1lPWZ1bmN0aW9uKGUpe3ZhciBkPWU7aWYodHlwZW9mIGNbZF0hPVwidW5kZWZpbmVkXCIpe2Q9Y1tlXX1pZih0eXBlb2YgYltkXSE9XCJ1bmRlZmluZWRcIil7cmV0dXJuIGJbZF19dGhyb3dcInVucmVnaXN0ZXJlZCBFQyBjdXJ2ZSBuYW1lOiBcIitkfTt0aGlzLnJlZ2lzdD1mdW5jdGlvbihBLGwsbyxnLG0sZSxqLGYsayx1LGQseCl7YltBXT17fTt2YXIgcz1hKG8pO3ZhciB6PWEoZyk7dmFyIHk9YShtKTt2YXIgdD1hKGUpO3ZhciB3PWEoaik7dmFyIHI9bmV3IEVDQ3VydmVGcChzLHoseSk7dmFyIHE9ci5kZWNvZGVQb2ludEhleChcIjA0XCIrZitrKTtiW0FdW1wibmFtZVwiXT1BO2JbQV1bXCJrZXlsZW5cIl09bDtiW0FdW1wiY3VydmVcIl09cjtiW0FdW1wiR1wiXT1xO2JbQV1bXCJuXCJdPXQ7YltBXVtcImhcIl09dztiW0FdW1wib2lkXCJdPWQ7YltBXVtcImluZm9cIl09eDtmb3IodmFyIHY9MDt2PHUubGVuZ3RoO3YrKyl7Y1t1W3ZdXT1BfX19O0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDEyOHIxXCIsMTI4LFwiRkZGRkZGRkRGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIkZGRkZGRkZERkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIsXCJFODc1NzlDMTEwNzlGNDNERDgyNDk5M0MyQ0VFNUVEM1wiLFwiRkZGRkZGRkUwMDAwMDAwMDc1QTMwRDFCOTAzOEExMTVcIixcIjFcIixcIjE2MUZGNzUyOEI4OTlCMkQwQzI4NjA3Q0E1MkM1Qjg2XCIsXCJDRjVBQzgzOTVCQUZFQjEzQzAyREEyOTJEREVEN0E4M1wiLFtdLFwiXCIsXCJzZWNwMTI4cjEgOiBTRUNHIGN1cnZlIG92ZXIgYSAxMjggYml0IHByaW1lIGZpZWxkXCIpO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDE2MGsxXCIsMTYwLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGQUM3M1wiLFwiMFwiLFwiN1wiLFwiMDEwMDAwMDAwMDAwMDAwMDAwMDAwMUI4RkExNkRGQUI5QUNBMTZCNkIzXCIsXCIxXCIsXCIzQjRDMzgyQ0UzN0FBMTkyQTQwMTlFNzYzMDM2RjRGNURENEQ3RUJCXCIsXCI5MzhDRjkzNTMxOEZEQ0VENkJDMjgyODY1MzE3MzNDM0YwM0M0RkVFXCIsW10sXCJcIixcInNlY3AxNjBrMSA6IFNFQ0cgY3VydmUgb3ZlciBhIDE2MCBiaXQgcHJpbWUgZmllbGRcIik7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMTYwcjFcIiwxNjAsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjdGRkZGRkZGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjdGRkZGRkZDXCIsXCIxQzk3QkVGQzU0QkQ3QThCNjVBQ0Y4OUY4MUQ0RDRBREM1NjVGQTQ1XCIsXCIwMTAwMDAwMDAwMDAwMDAwMDAwMDAxRjRDOEY5MjdBRUQzQ0E3NTIyNTdcIixcIjFcIixcIjRBOTZCNTY4OEVGNTczMjg0NjY0Njk4OTY4QzM4QkI5MTNDQkZDODJcIixcIjIzQTYyODU1MzE2ODk0N0Q1OURDQzkxMjA0MjM1MTM3N0FDNUZCMzJcIixbXSxcIlwiLFwic2VjcDE2MHIxIDogU0VDRyBjdXJ2ZSBvdmVyIGEgMTYwIGJpdCBwcmltZSBmaWVsZFwiKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxOTJrMVwiLDE5MixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRUUzN1wiLFwiMFwiLFwiM1wiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFMjZGMkZDMTcwRjY5NDY2QTc0REVGRDhEXCIsXCIxXCIsXCJEQjRGRjEwRUMwNTdFOUFFMjZCMDdEMDI4MEI3RjQzNDFEQTVEMUIxRUFFMDZDN0RcIixcIjlCMkYyRjZEOUM1NjI4QTc4NDQxNjNEMDE1QkU4NjM0NDA4MkFBODhEOTVFMkY5RFwiLFtdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxOTJyMVwiLDE5MixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkZGRkZGRkZGRlwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZDXCIsXCI2NDIxMDUxOUU1OUM4MEU3MEZBN0U5QUI3MjI0MzA0OUZFQjhERUVDQzE0NkI5QjFcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjk5REVGODM2MTQ2QkM5QjFCNEQyMjgzMVwiLFwiMVwiLFwiMTg4REE4MEVCMDMwOTBGNjdDQkYyMEVCNDNBMTg4MDBGNEZGMEFGRDgyRkYxMDEyXCIsXCIwNzE5MkI5NUZGQzhEQTc4NjMxMDExRUQ2QjI0Q0RENTczRjk3N0ExMUU3OTQ4MTFcIixbXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMjI0cjFcIiwyMjQsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMVwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVcIixcIkI0MDUwQTg1MEMwNEIzQUJGNTQxMzI1NjUwNDRCMEI3RDdCRkQ4QkEyNzBCMzk0MzIzNTVGRkI0XCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGMTZBMkUwQjhGMDNFMTNERDI5NDU1QzVDMkEzRFwiLFwiMVwiLFwiQjcwRTBDQkQ2QkI0QkY3RjMyMTM5MEI5NEEwM0MxRDM1NkMyMTEyMjM0MzI4MEQ2MTE1QzFEMjFcIixcIkJEMzc2Mzg4QjVGNzIzRkI0QzIyREZFNkNENDM3NUEwNUEwNzQ3NjQ0NEQ1ODE5OTg1MDA3RTM0XCIsW10pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDI1NmsxXCIsMjU2LFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkMyRlwiLFwiMFwiLFwiN1wiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVCQUFFRENFNkFGNDhBMDNCQkZEMjVFOENEMDM2NDE0MVwiLFwiMVwiLFwiNzlCRTY2N0VGOURDQkJBQzU1QTA2Mjk1Q0U4NzBCMDcwMjlCRkNEQjJEQ0UyOEQ5NTlGMjgxNUIxNkY4MTc5OFwiLFwiNDgzQURBNzcyNkEzQzQ2NTVEQTRGQkZDMEUxMTA4QThGRDE3QjQ0OEE2ODU1NDE5OUM0N0QwOEZGQjEwRDRCOFwiLFtdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AyNTZyMVwiLDI1NixcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIixcIjVBQzYzNUQ4QUEzQTkzRTdCM0VCQkQ1NTc2OTg4NkJDNjUxRDA2QjBDQzUzQjBGNjNCQ0UzQzNFMjdEMjYwNEJcIixcIkZGRkZGRkZGMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGQkNFNkZBQURBNzE3OUU4NEYzQjlDQUMyRkM2MzI1NTFcIixcIjFcIixcIjZCMTdEMUYyRTEyQzQyNDdGOEJDRTZFNTYzQTQ0MEYyNzcwMzdEODEyREVCMzNBMEY0QTEzOTQ1RDg5OEMyOTZcIixcIjRGRTM0MkUyRkUxQTdGOUI4RUU3RUI0QTdDMEY5RTE2MkJDRTMzNTc2QjMxNUVDRUNCQjY0MDY4MzdCRjUxRjVcIixbXCJOSVNUIFAtMjU2XCIsXCJQLTI1NlwiLFwicHJpbWUyNTZ2MVwiXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMzg0cjFcIiwzODQsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkYwMDAwMDAwMDAwMDAwMDAwRkZGRkZGRkZcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGQ1wiLFwiQjMzMTJGQTdFMjNFRTdFNDk4OEUwNTZCRTNGODJEMTkxODFEOUM2RUZFODE0MTEyMDMxNDA4OEY1MDEzODc1QUM2NTYzOThEOEEyRUQxOUQyQTg1QzhFREQzRUMyQUVGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDNzYzNEQ4MUY0MzcyRERGNTgxQTBEQjI0OEIwQTc3QUVDRUMxOTZBQ0NDNTI5NzNcIixcIjFcIixcIkFBODdDQTIyQkU4QjA1Mzc4RUIxQzcxRUYzMjBBRDc0NkUxRDNCNjI4QkE3OUI5ODU5Rjc0MUUwODI1NDJBMzg1NTAyRjI1REJGNTUyOTZDM0E1NDVFMzg3Mjc2MEFCN1wiLFwiMzYxN2RlNGE5NjI2MmM2ZjVkOWU5OGJmOTI5MmRjMjlmOGY0MWRiZDI4OWExNDdjZTlkYTMxMTNiNWYwYjhjMDBhNjBiMWNlMWQ3ZTgxOWQ3YTQzMWQ3YzkwZWEwZTVmXCIsW1wiTklTVCBQLTM4NFwiLFwiUC0zODRcIl0pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDUyMXIxXCIsNTIxLFwiMUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIjFGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIsXCIwNTE5NTNFQjk2MThFMUM5QTFGOTI5QTIxQTBCNjg1NDBFRUEyREE3MjVCOTlCMzE1RjNCOEI0ODk5MThFRjEwOUUxNTYxOTM5NTFFQzdFOTM3QjE2NTJDMEJEM0JCMUJGMDczNTczREY4ODNEMkMzNEYxRUY0NTFGRDQ2QjUwM0YwMFwiLFwiMUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGQTUxODY4NzgzQkYyRjk2NkI3RkNDMDE0OEY3MDlBNUQwM0JCNUM5Qjg4OTlDNDdBRUJCNkZCNzFFOTEzODY0MDlcIixcIjFcIixcIkM2ODU4RTA2QjcwNDA0RTlDRDlFM0VDQjY2MjM5NUI0NDI5QzY0ODEzOTA1M0ZCNTIxRjgyOEFGNjA2QjREM0RCQUExNEI1RTc3RUZFNzU5MjhGRTFEQzEyN0EyRkZBOERFMzM0OEIzQzE4NTZBNDI5QkY5N0U3RTMxQzJFNUJENjZcIixcIjAxMTgzOTI5NmE3ODlhM2JjMDA0NWM4YTVmYjQyYzdkMWJkOTk4ZjU0NDQ5NTc5YjQ0NjgxN2FmYmQxNzI3M2U2NjJjOTdlZTcyOTk1ZWY0MjY0MGM1NTBiOTAxM2ZhZDA3NjEzNTNjNzA4NmEyNzJjMjQwODhiZTk0NzY5ZmQxNjY1MFwiLFtcIk5JU1QgUC01MjFcIixcIlAtNTIxXCJdKTtcblx0LyohIGRzYS1tb2RpZmllZC0xLjAuMS5qcyAoYykgUmVjdXJpdHkgTGFicyBHbWJILCBLZW5qaSBVcnVzaGltbWEgfCBnaXRodWIuY29tL29wZW5wZ3Bqcy9vcGVucGdwanMvYmxvYi9tYXN0ZXIvTElDRU5TRVxuXHQgKi9cblx0aWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmNyeXB0bz09XCJ1bmRlZmluZWRcInx8IUtKVVIuY3J5cHRvKXtLSlVSLmNyeXB0bz17fX1LSlVSLmNyeXB0by5EU0E9ZnVuY3Rpb24oKXt0aGlzLnA9bnVsbDt0aGlzLnE9bnVsbDt0aGlzLmc9bnVsbDt0aGlzLnk9bnVsbDt0aGlzLng9bnVsbDt0aGlzLnR5cGU9XCJEU0FcIjt0aGlzLnNldFByaXZhdGU9ZnVuY3Rpb24oeix3LHYsQSx1KXt0aGlzLmlzUHJpdmF0ZT10cnVlO3RoaXMucD16O3RoaXMucT13O3RoaXMuZz12O3RoaXMueT1BO3RoaXMueD11fTt0aGlzLnNldFB1YmxpYz1mdW5jdGlvbih3LHYsdSx6KXt0aGlzLmlzUHVibGljPXRydWU7dGhpcy5wPXc7dGhpcy5xPXY7dGhpcy5nPXU7dGhpcy55PXo7dGhpcy54PW51bGx9O3RoaXMuc2lnbldpdGhNZXNzYWdlSGFzaD1mdW5jdGlvbih6KXt2YXIgdj10aGlzLnA7dmFyIHU9dGhpcy5xO3ZhciBDPXRoaXMuZzt2YXIgRD10aGlzLnk7dmFyIEU9dGhpcy54O3ZhciBBPXouc3Vic3RyKDAsdS5iaXRMZW5ndGgoKS80KTt2YXIgQj1uZXcgQmlnSW50ZWdlcih6LDE2KTt2YXIgdz1uKEJpZ0ludGVnZXIuT05FLmFkZChCaWdJbnRlZ2VyLk9ORSksdS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkpO3ZhciBHPShDLm1vZFBvdyh3LHYpKS5tb2QodSk7dmFyIEY9KHcubW9kSW52ZXJzZSh1KS5tdWx0aXBseShCLmFkZChFLm11bHRpcGx5KEcpKSkpLm1vZCh1KTt2YXIgSD1LSlVSLmFzbjEuQVNOMVV0aWwuanNvblRvQVNOMUhFWCh7c2VxOlt7XCJpbnRcIjp7YmlnaW50Okd9fSx7XCJpbnRcIjp7YmlnaW50OkZ9fV19KTtyZXR1cm4gSH07dGhpcy52ZXJpZnlXaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24oQyxCKXt2YXIgej10aGlzLnA7dmFyIHU9dGhpcy5xO3ZhciBHPXRoaXMuZzt2YXIgSD10aGlzLnk7dmFyIEU9dGhpcy5wYXJzZUFTTjFTaWduYXR1cmUoQik7dmFyIEs9RVswXTt2YXIgSj1FWzFdO3ZhciBDPUMuc3Vic3RyKDAsdS5iaXRMZW5ndGgoKS80KTt2YXIgRD1uZXcgQmlnSW50ZWdlcihDLDE2KTtpZihCaWdJbnRlZ2VyLlpFUk8uY29tcGFyZVRvKEspPjB8fEsuY29tcGFyZVRvKHUpPjB8fEJpZ0ludGVnZXIuWkVSTy5jb21wYXJlVG8oSik+MHx8Si5jb21wYXJlVG8odSk+MCl7dGhyb3dcImludmFsaWQgRFNBIHNpZ25hdHVyZVwifXZhciBJPUoubW9kSW52ZXJzZSh1KTt2YXIgQT1ELm11bHRpcGx5KEkpLm1vZCh1KTt2YXIgdj1LLm11bHRpcGx5KEkpLm1vZCh1KTt2YXIgRj1HLm1vZFBvdyhBLHopLm11bHRpcGx5KEgubW9kUG93KHYseikpLm1vZCh6KS5tb2QodSk7cmV0dXJuIEYuY29tcGFyZVRvKEspPT0wfTt0aGlzLnBhcnNlQVNOMVNpZ25hdHVyZT1mdW5jdGlvbih1KXt0cnl7dmFyIHk9bmV3IEJpZ0ludGVnZXIoQVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbMF0sXCIwMlwiKSwxNik7dmFyIHY9bmV3IEJpZ0ludGVnZXIoQVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbMV0sXCIwMlwiKSwxNik7cmV0dXJuW3ksdl19Y2F0Y2godyl7dGhyb3dcIm1hbGZvcm1lZCBEU0Egc2lnbmF0dXJlXCJ9fTtmdW5jdGlvbiBkKEUsdyxCLHYsdSxDKXt2YXIgej1LSlVSLmNyeXB0by5VdGlsLmhhc2hTdHJpbmcodyxFLnRvTG93ZXJDYXNlKCkpO3ZhciB6PXouc3Vic3RyKDAsdS5iaXRMZW5ndGgoKS80KTt2YXIgQT1uZXcgQmlnSW50ZWdlcih6LDE2KTt2YXIgeT1uKEJpZ0ludGVnZXIuT05FLmFkZChCaWdJbnRlZ2VyLk9ORSksdS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkpO3ZhciBGPShCLm1vZFBvdyh5LHYpKS5tb2QodSk7dmFyIEQ9KHkubW9kSW52ZXJzZSh1KS5tdWx0aXBseShBLmFkZChDLm11bHRpcGx5KEYpKSkpLm1vZCh1KTt2YXIgRz1uZXcgQXJyYXkoKTtHWzBdPUY7R1sxXT1EO3JldHVybiBHfWZ1bmN0aW9uIHIodil7dmFyIHU9b3BlbnBncC5jb25maWcuY29uZmlnLnByZWZlcl9oYXNoX2FsZ29yaXRobTtzd2l0Y2goTWF0aC5yb3VuZCh2LmJpdExlbmd0aCgpLzgpKXtjYXNlIDIwOmlmKHUhPTImJnU+MTEmJnUhPTEwJiZ1PDgpe3JldHVybiAyfXJldHVybiB1O2Nhc2UgMjg6aWYodT4xMSYmdTw4KXtyZXR1cm4gMTF9cmV0dXJuIHU7Y2FzZSAzMjppZih1PjEwJiZ1PDgpe3JldHVybiA4fXJldHVybiB1O2RlZmF1bHQ6dXRpbC5wcmludF9kZWJ1ZyhcIkRTQSBzZWxlY3QgaGFzaCBhbGdvcml0aG06IHJldHVybmluZyBudWxsIGZvciBhbiB1bmtub3duIGxlbmd0aCBvZiBxXCIpO3JldHVybiBudWxsfX10aGlzLnNlbGVjdF9oYXNoX2FsZ29yaXRobT1yO2Z1bmN0aW9uIG0oSSxLLEosQix6LHUsRixHKXt2YXIgQz1LSlVSLmNyeXB0by5VdGlsLmhhc2hTdHJpbmcoQixJLnRvTG93ZXJDYXNlKCkpO3ZhciBDPUMuc3Vic3RyKDAsdS5iaXRMZW5ndGgoKS80KTt2YXIgRD1uZXcgQmlnSW50ZWdlcihDLDE2KTtpZihCaWdJbnRlZ2VyLlpFUk8uY29tcGFyZVRvKEspPjB8fEsuY29tcGFyZVRvKHUpPjB8fEJpZ0ludGVnZXIuWkVSTy5jb21wYXJlVG8oSik+MHx8Si5jb21wYXJlVG8odSk+MCl7dXRpbC5wcmludF9lcnJvcihcImludmFsaWQgRFNBIFNpZ25hdHVyZVwiKTtyZXR1cm4gbnVsbH12YXIgSD1KLm1vZEludmVyc2UodSk7dmFyIEE9RC5tdWx0aXBseShIKS5tb2QodSk7dmFyIHY9Sy5tdWx0aXBseShIKS5tb2QodSk7dmFyIEU9Ri5tb2RQb3coQSx6KS5tdWx0aXBseShHLm1vZFBvdyh2LHopKS5tb2QoeikubW9kKHUpO3JldHVybiBFLmNvbXBhcmVUbyhLKT09MH1mdW5jdGlvbiBhKHope3ZhciBBPW5ldyBCaWdJbnRlZ2VyKHoscHJpbWVDZW50ZXJpZSk7dmFyIHk9aihxLDUxMik7dmFyIHU9dChwLHEseik7dmFyIHY7ZG97dj1uZXcgQmlnSW50ZWdlcihxLmJpdENvdW50KCkscmFuZCl9d2hpbGUoeC5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKSE9MSYmeC5jb21wYXJlVG8ocSkhPS0xKTt2YXIgdz1nLm1vZFBvdyh4LHApO3JldHVybnt4OnYscTpBLHA6eSxnOnUseTp3fX1mdW5jdGlvbiBqKHkseix3KXtpZih6JTY0IT0wKXtyZXR1cm4gZmFsc2V9dmFyIHU7dmFyIHY7ZG97dT13KGJpdGNvdW50LHRydWUpO3Y9dS5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7dT11LnN1YnRyYWN0KHYucmVtYWluZGVyKHkpKX13aGlsZSghdS5pc1Byb2JhYmxlUHJpbWUocHJpbWVDZW50ZXJpZSl8fHUuYml0TGVuZ3RoKCkhPWwpO3JldHVybiB1fWZ1bmN0aW9uIHQoQix6LEEsdyl7dmFyIHU9Qi5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7dmFyIHk9dS5kaXZpZGUoeik7dmFyIHY7ZG97dj13KEEpfXdoaWxlKHYuY29tcGFyZVRvKHUpIT0tMSYmdi5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpIT0xKTtyZXR1cm4gdi5tb2RQb3coeSxCKX1mdW5jdGlvbiBvKHcseSx1KXt2YXIgdjtkb3t2PXUoeSxmYWxzZSl9d2hpbGUodi5jb21wYXJlVG8odykhPS0xJiZ2LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pIT0xKTtyZXR1cm4gdn1mdW5jdGlvbiBpKHYsdyl7az1vKHYpO3ZhciB1PWcubW9kUG93KGssdykubW9kKHYpO3JldHVybiB1fWZ1bmN0aW9uIGgoQix3LHksdix6LHUpe3ZhciBBPUIodik7cz0ody5tb2RJbnZlcnNlKHopLm11bHRpcGx5KEEuYWRkKHUubXVsdGlwbHkoeSkpKSkubW9kKHopO3JldHVybiBzfXRoaXMuc2lnbj1kO3RoaXMudmVyaWZ5PW07ZnVuY3Rpb24gbih3LHUpe2lmKHUuY29tcGFyZVRvKHcpPD0wKXtyZXR1cm59dmFyIHY9dS5zdWJ0cmFjdCh3KTt2YXIgeT1lKHYuYml0TGVuZ3RoKCkpO3doaWxlKHk+dil7eT1lKHYuYml0TGVuZ3RoKCkpfXJldHVybiB3LmFkZCh5KX1mdW5jdGlvbiBlKHcpe2lmKHc8MCl7cmV0dXJuIG51bGx9dmFyIHU9TWF0aC5mbG9vcigodys3KS84KTt2YXIgdj1jKHUpO2lmKHclOD4wKXt2PVN0cmluZy5mcm9tQ2hhckNvZGUoKE1hdGgucG93KDIsdyU4KS0xKSZ2LmNoYXJDb2RlQXQoMCkpK3Yuc3Vic3RyaW5nKDEpfXJldHVybiBuZXcgQmlnSW50ZWdlcihmKHYpLDE2KX1mdW5jdGlvbiBjKHcpe3ZhciB1PVwiXCI7Zm9yKHZhciB2PTA7djx3O3YrKyl7dSs9U3RyaW5nLmZyb21DaGFyQ29kZShiKCkpfXJldHVybiB1fWZ1bmN0aW9uIGIoKXt2YXIgdT1uZXcgVWludDMyQXJyYXkoMSk7d2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXModSk7cmV0dXJuIHVbMF0mMjU1fWZ1bmN0aW9uIGYoeSl7aWYoeT09bnVsbCl7cmV0dXJuXCJcIn12YXIgdj1bXTt2YXIgdz15Lmxlbmd0aDt2YXIgej0wO3ZhciB1O3doaWxlKHo8dyl7dT15W3orK10uY2hhckNvZGVBdCgpLnRvU3RyaW5nKDE2KTt3aGlsZSh1Lmxlbmd0aDwyKXt1PVwiMFwiK3V9di5wdXNoKFwiXCIrdSl9cmV0dXJuIHYuam9pbihcIlwiKX10aGlzLmdldFJhbmRvbUJpZ0ludGVnZXJJblJhbmdlPW47dGhpcy5nZXRSYW5kb21CaWdJbnRlZ2VyPWU7dGhpcy5nZXRSYW5kb21CeXRlcz1jfTtcblx0LyohIHBrY3M1cGtleS0xLjAuNi5qcyAoYykgMjAxMy0yMDE0IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG5cdCAqL1xuXHR2YXIgUEtDUzVQS0VZPWZ1bmN0aW9uKCl7dmFyIGM9ZnVuY3Rpb24obixwLG8pe3JldHVybiBpKENyeXB0b0pTLkFFUyxuLHAsbyl9O3ZhciBkPWZ1bmN0aW9uKG4scCxvKXtyZXR1cm4gaShDcnlwdG9KUy5UcmlwbGVERVMsbixwLG8pfTt2YXIgaT1mdW5jdGlvbihxLHYscyxvKXt2YXIgcD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHYpO3ZhciB1PUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uocyk7dmFyIG49Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShvKTt2YXIgcj17fTtyLmtleT11O3IuaXY9bjtyLmNpcGhlcnRleHQ9cDt2YXIgdD1xLmRlY3J5cHQocix1LHtpdjpufSk7cmV0dXJuIENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHQpfTt2YXIgaj1mdW5jdGlvbihuLHAsbyl7cmV0dXJuIGUoQ3J5cHRvSlMuQUVTLG4scCxvKX07dmFyIG09ZnVuY3Rpb24obixwLG8pe3JldHVybiBlKENyeXB0b0pTLlRyaXBsZURFUyxuLHAsbyl9O3ZhciBlPWZ1bmN0aW9uKHMseCx2LHApe3ZhciByPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoeCk7dmFyIHc9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh2KTt2YXIgbz1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHApO3ZhciBuPXt9O3ZhciB1PXMuZW5jcnlwdChyLHcse2l2Om99KTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHUudG9TdHJpbmcoKSk7dmFyIHQ9Q3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkocSk7cmV0dXJuIHR9O3ZhciBnPXtcIkFFUy0yNTYtQ0JDXCI6e3Byb2M6YyxlcHJvYzpqLGtleWxlbjozMixpdmxlbjoxNn0sXCJBRVMtMTkyLUNCQ1wiOntwcm9jOmMsZXByb2M6aixrZXlsZW46MjQsaXZsZW46MTZ9LFwiQUVTLTEyOC1DQkNcIjp7cHJvYzpjLGVwcm9jOmosa2V5bGVuOjE2LGl2bGVuOjE2fSxcIkRFUy1FREUzLUNCQ1wiOntwcm9jOmQsZXByb2M6bSxrZXlsZW46MjQsaXZsZW46OH19O3ZhciBiPWZ1bmN0aW9uKG4pe3JldHVybiBnW25dW1wicHJvY1wiXX07dmFyIGs9ZnVuY3Rpb24obil7dmFyIHA9Q3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20obik7dmFyIG89Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkocCk7cmV0dXJuIG99O3ZhciBsPWZ1bmN0aW9uKHEpe3ZhciByPXt9O2lmKHEubWF0Y2gobmV3IFJlZ0V4cChcIkRFSy1JbmZvOiAoW14sXSspLChbMC05QS1GYS1mXSspXCIsXCJtXCIpKSl7ci5jaXBoZXI9UmVnRXhwLiQxO3IuaXZzYWx0PVJlZ0V4cC4kMn1pZihxLm1hdGNoKG5ldyBSZWdFeHAoXCItLS0tLUJFR0lOIChbQS1aXSspIFBSSVZBVEUgS0VZLS0tLS1cIikpKXtyLnR5cGU9UmVnRXhwLiQxfXZhciBwPS0xO3ZhciB0PTA7aWYocS5pbmRleE9mKFwiXFxyXFxuXFxyXFxuXCIpIT0tMSl7cD1xLmluZGV4T2YoXCJcXHJcXG5cXHJcXG5cIik7dD0yfWlmKHEuaW5kZXhPZihcIlxcblxcblwiKSE9LTEpe3A9cS5pbmRleE9mKFwiXFxuXFxuXCIpO3Q9MX12YXIgbz1xLmluZGV4T2YoXCItLS0tLUVORFwiKTtpZihwIT0tMSYmbyE9LTEpe3ZhciBuPXEuc3Vic3RyaW5nKHArdCoyLG8tdCk7bj1uLnJlcGxhY2UoL1xccysvZyxcIlwiKTtyLmRhdGE9bn1yZXR1cm4gcn07dmFyIGg9ZnVuY3Rpb24obyx3LG4pe3ZhciB0PW4uc3Vic3RyaW5nKDAsMTYpO3ZhciByPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UodCk7dmFyIHA9Q3J5cHRvSlMuZW5jLlV0ZjgucGFyc2Uodyk7dmFyIHM9Z1tvXVtcImtleWxlblwiXStnW29dW1wiaXZsZW5cIl07dmFyIHY9XCJcIjt2YXIgdT1udWxsO2Zvcig7Oyl7dmFyIHE9Q3J5cHRvSlMuYWxnby5NRDUuY3JlYXRlKCk7aWYodSE9bnVsbCl7cS51cGRhdGUodSl9cS51cGRhdGUocCk7cS51cGRhdGUocik7dT1xLmZpbmFsaXplKCk7dj12K0NyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHUpO2lmKHYubGVuZ3RoPj1zKjIpe2JyZWFrfX12YXIgeD17fTt4LmtleWhleD12LnN1YnN0cigwLGdbb11bXCJrZXlsZW5cIl0qMik7eC5pdmhleD12LnN1YnN0cihnW29dW1wia2V5bGVuXCJdKjIsZ1tvXVtcIml2bGVuXCJdKjIpO3JldHVybiB4fTt2YXIgYT1mdW5jdGlvbihuLHQscCx1KXt2YXIgcT1DcnlwdG9KUy5lbmMuQmFzZTY0LnBhcnNlKG4pO3ZhciBvPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHEpO3ZhciBzPWdbdF1bXCJwcm9jXCJdO3ZhciByPXMobyxwLHUpO3JldHVybiByfTt2YXIgZj1mdW5jdGlvbihuLHEsbyxzKXt2YXIgcD1nW3FdW1wiZXByb2NcIl07dmFyIHI9cChuLG8scyk7cmV0dXJuIHJ9O3JldHVybnt2ZXJzaW9uOlwiMS4wLjVcIixnZXRIZXhGcm9tUEVNOmZ1bmN0aW9uKG8scil7dmFyIHA9bztpZihwLmluZGV4T2YoXCJCRUdJTiBcIityKT09LTEpe3Rocm93XCJjYW4ndCBmaW5kIFBFTSBoZWFkZXI6IFwiK3J9cD1wLnJlcGxhY2UoXCItLS0tLUJFR0lOIFwiK3IrXCItLS0tLVwiLFwiXCIpO3A9cC5yZXBsYWNlKFwiLS0tLS1FTkQgXCIrcitcIi0tLS0tXCIsXCJcIik7dmFyIHE9cC5yZXBsYWNlKC9cXHMrL2csXCJcIik7dmFyIG49YjY0dG9oZXgocSk7cmV0dXJuIG59LGdldERlY3J5cHRlZEtleUhleEJ5S2V5SVY6ZnVuY3Rpb24obyxyLHEscCl7dmFyIG49YihyKTtyZXR1cm4gbihvLHEscCl9LHBhcnNlUEtDUzVQRU06ZnVuY3Rpb24obil7cmV0dXJuIGwobil9LGdldEtleUFuZFVudXNlZEl2QnlQYXNzY29kZUFuZEl2c2FsdDpmdW5jdGlvbihvLG4scCl7cmV0dXJuIGgobyxuLHApfSxkZWNyeXB0S2V5QjY0OmZ1bmN0aW9uKG4scCxvLHEpe3JldHVybiBhKG4scCxvLHEpfSxnZXREZWNyeXB0ZWRLZXlIZXg6ZnVuY3Rpb24odyx2KXt2YXIgbz1sKHcpO3ZhciByPW8udHlwZTt2YXIgcD1vLmNpcGhlcjt2YXIgbj1vLml2c2FsdDt2YXIgcT1vLmRhdGE7dmFyIHU9aChwLHYsbik7dmFyIHQ9dS5rZXloZXg7dmFyIHM9YShxLHAsdCxuKTtyZXR1cm4gc30sZ2V0UlNBS2V5RnJvbUVuY3J5cHRlZFBLQ1M1UEVNOmZ1bmN0aW9uKHAsbyl7dmFyIHE9dGhpcy5nZXREZWNyeXB0ZWRLZXlIZXgocCxvKTt2YXIgbj1uZXcgUlNBS2V5KCk7bi5yZWFkUHJpdmF0ZUtleUZyb21BU04xSGV4U3RyaW5nKHEpO3JldHVybiBufSxnZXRFcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4OmZ1bmN0aW9uKHEseCxyLHApe3ZhciBuPVwiXCI7aWYodHlwZW9mIHI9PVwidW5kZWZpbmVkXCJ8fHI9PW51bGwpe3I9XCJBRVMtMjU2LUNCQ1wifWlmKHR5cGVvZiBnW3JdPT1cInVuZGVmaW5lZFwiKXt0aHJvd1wiUEtDUzVQS0VZIHVuc3VwcG9ydGVkIGFsZ29yaXRobTogXCIrcn1pZih0eXBlb2YgcD09XCJ1bmRlZmluZWRcInx8cD09bnVsbCl7dmFyIHQ9Z1tyXVtcIml2bGVuXCJdO3ZhciBzPWsodCk7cD1zLnRvVXBwZXJDYXNlKCl9dmFyIHc9aChyLHgscCk7dmFyIHY9dy5rZXloZXg7dmFyIHU9ZihxLHIsdixwKTt2YXIgbz11LnJlcGxhY2UoLyguezY0fSkvZyxcIiQxXFxyXFxuXCIpO3ZhciBuPVwiLS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLVxcclxcblwiO24rPVwiUHJvYy1UeXBlOiA0LEVOQ1JZUFRFRFxcclxcblwiO24rPVwiREVLLUluZm86IFwiK3IrXCIsXCIrcCtcIlxcclxcblwiO24rPVwiXFxyXFxuXCI7bis9bztuKz1cIlxcclxcbi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tXFxyXFxuXCI7cmV0dXJuIG59LGdldEVyeXB0ZWRQS0NTNVBFTUZyb21SU0FLZXk6ZnVuY3Rpb24oQyxELG8scyl7dmFyIEE9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtcImludFwiOjB9KTt2YXIgdj1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2JpZ2ludDpDLm59KTt2YXIgej1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe1wiaW50XCI6Qy5lfSk7dmFyIEI9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6Qy5kfSk7dmFyIHQ9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6Qy5wfSk7dmFyIHI9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6Qy5xfSk7dmFyIHk9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6Qy5kbXAxfSk7dmFyIHU9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6Qy5kbXExfSk7dmFyIHg9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6Qy5jb2VmZn0pO3ZhciBFPW5ldyBLSlVSLmFzbjEuREVSU2VxdWVuY2Uoe2FycmF5OltBLHYseixCLHQscix5LHUseF19KTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5nZXRFcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4KHcsRCxvLHMpfSxuZXdFbmNyeXB0ZWRQS0NTNVBFTTpmdW5jdGlvbihuLG8scixzKXtpZih0eXBlb2Ygbz09XCJ1bmRlZmluZWRcInx8bz09bnVsbCl7bz0xMDI0fWlmKHR5cGVvZiByPT1cInVuZGVmaW5lZFwifHxyPT1udWxsKXtyPVwiMTAwMDFcIn12YXIgcD1uZXcgUlNBS2V5KCk7cC5nZW5lcmF0ZShvLHIpO3ZhciBxPW51bGw7aWYodHlwZW9mIHM9PVwidW5kZWZpbmVkXCJ8fHM9PW51bGwpe3E9dGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21SU0FLZXkocGtleSxuKX1lbHNle3E9dGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21SU0FLZXkocGtleSxuLHMpfXJldHVybiBxfSxnZXRSU0FLZXlGcm9tUGxhaW5QS0NTOFBFTTpmdW5jdGlvbihwKXtpZihwLm1hdGNoKC9FTkNSWVBURUQvKSl7dGhyb3dcInBlbSBzaGFsbCBiZSBub3QgRU5DUllQVEVEXCJ9dmFyIG89dGhpcy5nZXRIZXhGcm9tUEVNKHAsXCJQUklWQVRFIEtFWVwiKTt2YXIgbj10aGlzLmdldFJTQUtleUZyb21QbGFpblBLQ1M4SGV4KG8pO3JldHVybiBufSxnZXRSU0FLZXlGcm9tUGxhaW5QS0NTOEhleDpmdW5jdGlvbihxKXt2YXIgcD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihxLDApO2lmKHAubGVuZ3RoIT0zKXt0aHJvd1wib3V0ZXIgREVSU2VxdWVuY2Ugc2hhbGwgaGF2ZSAzIGVsZW1lbnRzOiBcIitwLmxlbmd0aH12YXIgbz1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKHEscFsxXSk7aWYobyE9XCIzMDBkMDYwOTJhODY0ODg2ZjcwZDAxMDEwMTA1MDBcIil7dGhyb3dcIlBLQ1M4IEFsZ29yaXRobUlkZW50aWZpZXIgaXMgbm90IHJzYUVuYzogXCIrb312YXIgbz1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKHEscFsxXSk7dmFyIHI9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihxLHBbMl0pO3ZhciBzPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHIsMCk7dmFyIG49bmV3IFJTQUtleSgpO24ucmVhZFByaXZhdGVLZXlGcm9tQVNOMUhleFN0cmluZyhzKTtyZXR1cm4gbn0scGFyc2VIZXhPZkVuY3J5cHRlZFBLQ1M4OmZ1bmN0aW9uKHUpe3ZhciBxPXt9O3ZhciBwPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHUsMCk7aWYocC5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwKS5pdGVtcyAhPSAyOiBcIitwLmxlbmd0aH1xLmNpcGhlcnRleHQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodSxwWzFdKTt2YXIgdz1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaih1LHBbMF0pO2lmKHcubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wKS5pdGVtcyAhPSAyOiBcIit3Lmxlbmd0aH1pZihBU04xSEVYLmdldEhleE9mVl9BdE9iaih1LHdbMF0pIT1cIjJhODY0ODg2ZjcwZDAxMDUwZFwiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIHBrY3M1UEJFUzJcIn12YXIgbj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaih1LHdbMV0pO2lmKHcubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEpLml0ZW1zICE9IDI6IFwiK24ubGVuZ3RofXZhciBvPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHUsblsxXSk7aWYoby5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMS4xKS5pdGVtcyAhPSAyOiBcIitvLmxlbmd0aH1pZihBU04xSEVYLmdldEhleE9mVl9BdE9iaih1LG9bMF0pIT1cIjJhODY0ODg2ZjcwZDAzMDdcIil7dGhyb3dcInRoaXMgb25seSBzdXBwb3J0cyBUcmlwbGVERVNcIn1xLmVuY3J5cHRpb25TY2hlbWVBbGc9XCJUcmlwbGVERVNcIjtxLmVuY3J5cHRpb25TY2hlbWVJVj1BU04xSEVYLmdldEhleE9mVl9BdE9iaih1LG9bMV0pO3ZhciByPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHUsblswXSk7aWYoci5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMS4wKS5pdGVtcyAhPSAyOiBcIityLmxlbmd0aH1pZihBU04xSEVYLmdldEhleE9mVl9BdE9iaih1LHJbMF0pIT1cIjJhODY0ODg2ZjcwZDAxMDUwY1wiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIHBrY3M1UEJLREYyXCJ9dmFyIHY9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoodSxyWzFdKTtpZih2Lmxlbmd0aDwyKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEuMC4xKS5pdGVtcyA8IDI6IFwiK3YubGVuZ3RofXEucGJrZGYyU2FsdD1BU04xSEVYLmdldEhleE9mVl9BdE9iaih1LHZbMF0pO3ZhciBzPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHUsdlsxXSk7dHJ5e3EucGJrZGYySXRlcj1wYXJzZUludChzLDE2KX1jYXRjaCh0KXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdCBwYmtkZjJJdGVyOiBcIitzfXJldHVybiBxfSxnZXRQQktERjJLZXlIZXhGcm9tUGFyYW06ZnVuY3Rpb24ocyxuKXt2YXIgcj1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHMucGJrZGYyU2FsdCk7dmFyIG89cy5wYmtkZjJJdGVyO3ZhciBxPUNyeXB0b0pTLlBCS0RGMihuLHIse2tleVNpemU6MTkyLzMyLGl0ZXJhdGlvbnM6b30pO3ZhciBwPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHEpO3JldHVybiBwfSxnZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uKHYsdyl7dmFyIHA9dGhpcy5nZXRIZXhGcm9tUEVNKHYsXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIik7dmFyIG49dGhpcy5wYXJzZUhleE9mRW5jcnlwdGVkUEtDUzgocCk7dmFyIHM9UEtDUzVQS0VZLmdldFBCS0RGMktleUhleEZyb21QYXJhbShuLHcpO3ZhciB0PXt9O3QuY2lwaGVydGV4dD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKG4uY2lwaGVydGV4dCk7dmFyIHI9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShzKTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKG4uZW5jcnlwdGlvblNjaGVtZUlWKTt2YXIgdT1DcnlwdG9KUy5UcmlwbGVERVMuZGVjcnlwdCh0LHIse2l2OnF9KTt2YXIgbz1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh1KTtyZXR1cm4gb30sZ2V0UlNBS2V5RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uKHEscCl7dmFyIG89dGhpcy5nZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNKHEscCk7dmFyIG49dGhpcy5nZXRSU0FLZXlGcm9tUGxhaW5QS0NTOEhleChvKTtyZXR1cm4gbn0sZ2V0S2V5RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uKHEsbyl7dmFyIG49dGhpcy5nZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNKHEsbyk7dmFyIHA9dGhpcy5nZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhIZXgobik7cmV0dXJuIHB9LHBhcnNlUGxhaW5Qcml2YXRlUEtDUzhIZXg6ZnVuY3Rpb24ocSl7dmFyIG89e307by5hbGdwYXJhbT1udWxsO2lmKHEuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBwbGFpbiBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMSlcIn12YXIgcD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihxLDApO2lmKHAubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIHBsYWluIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDAyKVwifWlmKHEuc3Vic3RyKHBbMV0sMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMylcIn12YXIgbj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihxLHBbMV0pO2lmKG4ubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDA0KVwifWlmKHEuc3Vic3RyKG5bMF0sMikhPVwiMDZcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNSlcIn1vLmFsZ29pZD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihxLG5bMF0pO2lmKHEuc3Vic3RyKG5bMV0sMik9PVwiMDZcIil7by5hbGdwYXJhbT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihxLG5bMV0pfWlmKHEuc3Vic3RyKHBbMl0sMikhPVwiMDRcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNilcIn1vLmtleWlkeD1BU04xSEVYLmdldFN0YXJ0UG9zT2ZWX0F0T2JqKHEscFsyXSk7cmV0dXJuIG99LGdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOFBFTTpmdW5jdGlvbihvKXt2YXIgbj10aGlzLmdldEhleEZyb21QRU0obyxcIlBSSVZBVEUgS0VZXCIpO3ZhciBwPXRoaXMuZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4KG4pO3JldHVybiBwfSxnZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhIZXg6ZnVuY3Rpb24obil7dmFyIHA9dGhpcy5wYXJzZVBsYWluUHJpdmF0ZVBLQ1M4SGV4KG4pO2lmKHAuYWxnb2lkPT1cIjJhODY0ODg2ZjcwZDAxMDEwMVwiKXt0aGlzLnBhcnNlUHJpdmF0ZVJhd1JTQUtleUhleEF0T2JqKG4scCk7dmFyIG89cC5rZXk7dmFyIHE9bmV3IFJTQUtleSgpO3Euc2V0UHJpdmF0ZUV4KG8ubixvLmUsby5kLG8ucCxvLnEsby5kcCxvLmRxLG8uY28pO3JldHVybiBxfWVsc2V7aWYocC5hbGdvaWQ9PVwiMmE4NjQ4Y2UzZDAyMDFcIil7dGhpcy5wYXJzZVByaXZhdGVSYXdFQ0tleUhleEF0T2JqKG4scCk7aWYoS0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW3AuYWxncGFyYW1dPT09dW5kZWZpbmVkKXt0aHJvd1wiS0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lIHVuZGVmaW5lZDogXCIrcC5hbGdwYXJhbX12YXIgcj1LSlVSLmNyeXB0by5PSUQub2lkaGV4Mm5hbWVbcC5hbGdwYXJhbV07dmFyIHE9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTpyLHBydjpwLmtleX0pO3JldHVybiBxfWVsc2V7dGhyb3dcInVuc3VwcG9ydGVkIHByaXZhdGUga2V5IGFsZ29yaXRobVwifX19LGdldFJTQUtleUZyb21QdWJsaWNQS0NTOFBFTTpmdW5jdGlvbihvKXt2YXIgcD10aGlzLmdldEhleEZyb21QRU0obyxcIlBVQkxJQyBLRVlcIik7dmFyIG49dGhpcy5nZXRSU0FLZXlGcm9tUHVibGljUEtDUzhIZXgocCk7cmV0dXJuIG59LGdldEtleUZyb21QdWJsaWNQS0NTOFBFTTpmdW5jdGlvbihvKXt2YXIgcD10aGlzLmdldEhleEZyb21QRU0obyxcIlBVQkxJQyBLRVlcIik7dmFyIG49dGhpcy5nZXRLZXlGcm9tUHVibGljUEtDUzhIZXgocCk7cmV0dXJuIG59LGdldEtleUZyb21QdWJsaWNQS0NTOEhleDpmdW5jdGlvbihvKXt2YXIgbj10aGlzLnBhcnNlUHVibGljUEtDUzhIZXgobyk7aWYobi5hbGdvaWQ9PVwiMmE4NjQ4ODZmNzBkMDEwMTAxXCIpe3ZhciByPXRoaXMucGFyc2VQdWJsaWNSYXdSU0FLZXlIZXgobi5rZXkpO3ZhciBwPW5ldyBSU0FLZXkoKTtwLnNldFB1YmxpYyhyLm4sci5lKTtyZXR1cm4gcH1lbHNle2lmKG4uYWxnb2lkPT1cIjJhODY0OGNlM2QwMjAxXCIpe2lmKEtKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZVtuLmFsZ3BhcmFtXT09PXVuZGVmaW5lZCl7dGhyb3dcIktKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZSB1bmRlZmluZWQ6IFwiK24uYWxncGFyYW19dmFyIHE9S0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW24uYWxncGFyYW1dO3ZhciBwPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6cSxwdWI6bi5rZXl9KTtyZXR1cm4gcH1lbHNle3Rocm93XCJ1bnN1cHBvcnRlZCBwdWJsaWMga2V5IGFsZ29yaXRobVwifX19LHBhcnNlUHVibGljUmF3UlNBS2V5SGV4OmZ1bmN0aW9uKHApe3ZhciBuPXt9O2lmKHAuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBSU0Ega2V5KGNvZGU6MDAxKVwifXZhciBvPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHAsMCk7aWYoby5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwMilcIn1pZihwLnN1YnN0cihvWzBdLDIpIT1cIjAyXCIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwMylcIn1uLm49QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocCxvWzBdKTtpZihwLnN1YnN0cihvWzFdLDIpIT1cIjAyXCIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwNClcIn1uLmU9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocCxvWzFdKTtyZXR1cm4gbn0scGFyc2VQcml2YXRlUmF3UlNBS2V5SGV4QXRPYmo6ZnVuY3Rpb24obyxxKXt2YXIgcD1xLmtleWlkeDtpZihvLnN1YnN0cihwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIHByaXZhdGUga2V5KGNvZGU6MDAxKVwifXZhciBuPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKG8scCk7aWYobi5sZW5ndGghPTkpe3Rocm93XCJtYWxmb3JtZWQgUlNBIHByaXZhdGUga2V5KGNvZGU6MDAyKVwifXEua2V5PXt9O3Eua2V5Lm49QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoobyxuWzFdKTtxLmtleS5lPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKG8sblsyXSk7cS5rZXkuZD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihvLG5bM10pO3Eua2V5LnA9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoobyxuWzRdKTtxLmtleS5xPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKG8sbls1XSk7cS5rZXkuZHA9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoobyxuWzZdKTtxLmtleS5kcT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihvLG5bN10pO3Eua2V5LmNvPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKG8sbls4XSl9LHBhcnNlUHJpdmF0ZVJhd0VDS2V5SGV4QXRPYmo6ZnVuY3Rpb24obyxxKXt2YXIgcD1xLmtleWlkeDtpZihvLnN1YnN0cihwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgRUNDIHByaXZhdGUga2V5KGNvZGU6MDAxKVwifXZhciBuPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKG8scCk7aWYobi5sZW5ndGghPTMpe3Rocm93XCJtYWxmb3JtZWQgRUNDIHByaXZhdGUga2V5KGNvZGU6MDAyKVwifWlmKG8uc3Vic3RyKG5bMV0sMikhPVwiMDRcIil7dGhyb3dcIm1hbGZvcm1lZCBFQ0MgcHJpdmF0ZSBrZXkoY29kZTowMDMpXCJ9cS5rZXk9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoobyxuWzFdKX0scGFyc2VQdWJsaWNQS0NTOEhleDpmdW5jdGlvbihxKXt2YXIgbz17fTtvLmFsZ3BhcmFtPW51bGw7dmFyIHA9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocSwwKTtpZihwLmxlbmd0aCE9Mil7dGhyb3dcIm91dGVyIERFUlNlcXVlbmNlIHNoYWxsIGhhdmUgMiBlbGVtZW50czogXCIrcC5sZW5ndGh9dmFyIHI9cFswXTtpZihxLnN1YnN0cihyLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMSlcIn12YXIgbj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihxLHIpO2lmKG4ubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDIpXCJ9aWYocS5zdWJzdHIoblswXSwyKSE9XCIwNlwiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDMpXCJ9by5hbGdvaWQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocSxuWzBdKTtpZihxLnN1YnN0cihuWzFdLDIpPT1cIjA2XCIpe28uYWxncGFyYW09QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocSxuWzFdKX1pZihxLnN1YnN0cihwWzFdLDIpIT1cIjAzXCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwNClcIn1vLmtleT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihxLHBbMV0pLnN1YnN0cigyKTtyZXR1cm4gb30sZ2V0UlNBS2V5RnJvbVB1YmxpY1BLQ1M4SGV4OmZ1bmN0aW9uKHIpe3ZhciBxPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHIsMCk7aWYocS5sZW5ndGghPTIpe3Rocm93XCJvdXRlciBERVJTZXF1ZW5jZSBzaGFsbCBoYXZlIDIgZWxlbWVudHM6IFwiK3EubGVuZ3RofXZhciBwPUFTTjFIRVguZ2V0SGV4T2ZUTFZfQXRPYmoocixxWzBdKTtpZihwIT1cIjMwMGQwNjA5MmE4NjQ4ODZmNzBkMDEwMTAxMDUwMFwiKXt0aHJvd1wiUEtDUzggQWxnb3JpdGhtSWQgaXMgbm90IHJzYUVuY3J5cHRpb25cIn1pZihyLnN1YnN0cihxWzFdLDIpIT1cIjAzXCIpe3Rocm93XCJQS0NTOCBQdWJsaWMgS2V5IGlzIG5vdCBCSVRTVFJJTkcgZW5jYXBzbGF0ZWQuXCJ9dmFyIHQ9QVNOMUhFWC5nZXRTdGFydFBvc09mVl9BdE9iaihyLHFbMV0pKzI7aWYoci5zdWJzdHIodCwyKSE9XCIzMFwiKXt0aHJvd1wiUEtDUzggUHVibGljIEtleSBpcyBub3QgU0VRVUVOQ0UuXCJ9dmFyIG49QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocix0KTtpZihuLmxlbmd0aCE9Mil7dGhyb3dcImlubmVyIERFUlNlcXVlbmNlIHNoYWxsIGhhdmUgMiBlbGVtZW50czogXCIrbi5sZW5ndGh9aWYoci5zdWJzdHIoblswXSwyKSE9XCIwMlwiKXt0aHJvd1wiTiBpcyBub3QgQVNOLjEgSU5URUdFUlwifWlmKHIuc3Vic3RyKG5bMV0sMikhPVwiMDJcIil7dGhyb3dcIkUgaXMgbm90IEFTTi4xIElOVEVHRVJcIn12YXIgdT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihyLG5bMF0pO3ZhciBzPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHIsblsxXSk7dmFyIG89bmV3IFJTQUtleSgpO28uc2V0UHVibGljKHUscyk7cmV0dXJuIG99LH19KCk7XG5cdC8qISBrZXl1dGlsLTEuMC4xMi5qcyAoYykgMjAxMy0yMDE1IEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG5cdCAqL1xuXHR2YXIgS0VZVVRJTD1mdW5jdGlvbigpe3ZhciBkPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gayhDcnlwdG9KUy5BRVMscCxyLHEpfTt2YXIgZT1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGsoQ3J5cHRvSlMuVHJpcGxlREVTLHAscixxKX07dmFyIGE9ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBrKENyeXB0b0pTLkRFUyxwLHIscSl9O3ZhciBrPWZ1bmN0aW9uKHMseCx1LHEpe3ZhciByPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoeCk7dmFyIHc9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh1KTt2YXIgcD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHEpO3ZhciB0PXt9O3Qua2V5PXc7dC5pdj1wO3QuY2lwaGVydGV4dD1yO3ZhciB2PXMuZGVjcnlwdCh0LHcse2l2OnB9KTtyZXR1cm4gQ3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkodil9O3ZhciBsPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gZyhDcnlwdG9KUy5BRVMscCxyLHEpfTt2YXIgbz1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGcoQ3J5cHRvSlMuVHJpcGxlREVTLHAscixxKX07dmFyIGY9ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBnKENyeXB0b0pTLkRFUyxwLHIscSl9O3ZhciBnPWZ1bmN0aW9uKHQseSx2LHEpe3ZhciBzPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoeSk7dmFyIHg9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh2KTt2YXIgcD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHEpO3ZhciB3PXQuZW5jcnlwdChzLHgse2l2OnB9KTt2YXIgcj1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHcudG9TdHJpbmcoKSk7dmFyIHU9Q3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkocik7cmV0dXJuIHV9O3ZhciBpPXtcIkFFUy0yNTYtQ0JDXCI6e3Byb2M6ZCxlcHJvYzpsLGtleWxlbjozMixpdmxlbjoxNn0sXCJBRVMtMTkyLUNCQ1wiOntwcm9jOmQsZXByb2M6bCxrZXlsZW46MjQsaXZsZW46MTZ9LFwiQUVTLTEyOC1DQkNcIjp7cHJvYzpkLGVwcm9jOmwsa2V5bGVuOjE2LGl2bGVuOjE2fSxcIkRFUy1FREUzLUNCQ1wiOntwcm9jOmUsZXByb2M6byxrZXlsZW46MjQsaXZsZW46OH0sXCJERVMtQ0JDXCI6e3Byb2M6YSxlcHJvYzpmLGtleWxlbjo4LGl2bGVuOjh9fTt2YXIgYz1mdW5jdGlvbihwKXtyZXR1cm4gaVtwXVtcInByb2NcIl19O3ZhciBtPWZ1bmN0aW9uKHApe3ZhciByPUNyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKHApO3ZhciBxPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHIpO3JldHVybiBxfTt2YXIgbj1mdW5jdGlvbih0KXt2YXIgdT17fTtpZih0Lm1hdGNoKG5ldyBSZWdFeHAoXCJERUstSW5mbzogKFteLF0rKSwoWzAtOUEtRmEtZl0rKVwiLFwibVwiKSkpe3UuY2lwaGVyPVJlZ0V4cC4kMTt1Lml2c2FsdD1SZWdFeHAuJDJ9aWYodC5tYXRjaChuZXcgUmVnRXhwKFwiLS0tLS1CRUdJTiAoW0EtWl0rKSBQUklWQVRFIEtFWS0tLS0tXCIpKSl7dS50eXBlPVJlZ0V4cC4kMX12YXIgcj0tMTt2YXIgdj0wO2lmKHQuaW5kZXhPZihcIlxcclxcblxcclxcblwiKSE9LTEpe3I9dC5pbmRleE9mKFwiXFxyXFxuXFxyXFxuXCIpO3Y9Mn1pZih0LmluZGV4T2YoXCJcXG5cXG5cIikhPS0xKXtyPXQuaW5kZXhPZihcIlxcblxcblwiKTt2PTF9dmFyIHE9dC5pbmRleE9mKFwiLS0tLS1FTkRcIik7aWYociE9LTEmJnEhPS0xKXt2YXIgcD10LnN1YnN0cmluZyhyK3YqMixxLXYpO3A9cC5yZXBsYWNlKC9cXHMrL2csXCJcIik7dS5kYXRhPXB9cmV0dXJuIHV9O3ZhciBqPWZ1bmN0aW9uKHEseSxwKXt2YXIgdj1wLnN1YnN0cmluZygwLDE2KTt2YXIgdD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHYpO3ZhciByPUNyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHkpO3ZhciB1PWlbcV1bXCJrZXlsZW5cIl0raVtxXVtcIml2bGVuXCJdO3ZhciB4PVwiXCI7dmFyIHc9bnVsbDtmb3IoOzspe3ZhciBzPUNyeXB0b0pTLmFsZ28uTUQ1LmNyZWF0ZSgpO2lmKHchPW51bGwpe3MudXBkYXRlKHcpfXMudXBkYXRlKHIpO3MudXBkYXRlKHQpO3c9cy5maW5hbGl6ZSgpO3g9eCtDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh3KTtpZih4Lmxlbmd0aD49dSoyKXticmVha319dmFyIHo9e307ei5rZXloZXg9eC5zdWJzdHIoMCxpW3FdW1wia2V5bGVuXCJdKjIpO3ouaXZoZXg9eC5zdWJzdHIoaVtxXVtcImtleWxlblwiXSoyLGlbcV1bXCJpdmxlblwiXSoyKTtyZXR1cm4gen07dmFyIGI9ZnVuY3Rpb24ocCx2LHIsdyl7dmFyIHM9Q3J5cHRvSlMuZW5jLkJhc2U2NC5wYXJzZShwKTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShzKTt2YXIgdT1pW3ZdW1wicHJvY1wiXTt2YXIgdD11KHEscix3KTtyZXR1cm4gdH07dmFyIGg9ZnVuY3Rpb24ocCxzLHEsdSl7dmFyIHI9aVtzXVtcImVwcm9jXCJdO3ZhciB0PXIocCxxLHUpO3JldHVybiB0fTtyZXR1cm57dmVyc2lvbjpcIjEuMC4wXCIsZ2V0SGV4RnJvbVBFTTpmdW5jdGlvbihxLHUpe3ZhciByPXE7aWYoci5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIik9PS0xKXt0aHJvd1wiY2FuJ3QgZmluZCBQRU0gaGVhZGVyOiBcIit1fWlmKHR5cGVvZiB1PT1cInN0cmluZ1wiJiZ1IT1cIlwiKXtyPXIucmVwbGFjZShcIi0tLS0tQkVHSU4gXCIrdStcIi0tLS0tXCIsXCJcIik7cj1yLnJlcGxhY2UoXCItLS0tLUVORCBcIit1K1wiLS0tLS1cIixcIlwiKX1lbHNle3I9ci5yZXBsYWNlKC8tLS0tLUJFR0lOIFteLV0rLS0tLS0vLFwiXCIpO3I9ci5yZXBsYWNlKC8tLS0tLUVORCBbXi1dKy0tLS0tLyxcIlwiKX12YXIgdD1yLnJlcGxhY2UoL1xccysvZyxcIlwiKTt2YXIgcD1iNjR0b2hleCh0KTtyZXR1cm4gcH0sZ2V0RGVjcnlwdGVkS2V5SGV4QnlLZXlJVjpmdW5jdGlvbihxLHQscyxyKXt2YXIgcD1jKHQpO3JldHVybiBwKHEscyxyKX0scGFyc2VQS0NTNVBFTTpmdW5jdGlvbihwKXtyZXR1cm4gbihwKX0sZ2V0S2V5QW5kVW51c2VkSXZCeVBhc3Njb2RlQW5kSXZzYWx0OmZ1bmN0aW9uKHEscCxyKXtyZXR1cm4gaihxLHAscil9LGRlY3J5cHRLZXlCNjQ6ZnVuY3Rpb24ocCxyLHEscyl7cmV0dXJuIGIocCxyLHEscyl9LGdldERlY3J5cHRlZEtleUhleDpmdW5jdGlvbih5LHgpe3ZhciBxPW4oeSk7dmFyIHQ9cS50eXBlO3ZhciByPXEuY2lwaGVyO3ZhciBwPXEuaXZzYWx0O3ZhciBzPXEuZGF0YTt2YXIgdz1qKHIseCxwKTt2YXIgdj13LmtleWhleDt2YXIgdT1iKHMscix2LHApO3JldHVybiB1fSxnZXRSU0FLZXlGcm9tRW5jcnlwdGVkUEtDUzVQRU06ZnVuY3Rpb24ocixxKXt2YXIgcz10aGlzLmdldERlY3J5cHRlZEtleUhleChyLHEpO3ZhciBwPW5ldyBSU0FLZXkoKTtwLnJlYWRQcml2YXRlS2V5RnJvbUFTTjFIZXhTdHJpbmcocyk7cmV0dXJuIHB9LGdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleDpmdW5jdGlvbih4LHMsQSx0LHIpe3ZhciBwPVwiXCI7aWYodHlwZW9mIHQ9PVwidW5kZWZpbmVkXCJ8fHQ9PW51bGwpe3Q9XCJBRVMtMjU2LUNCQ1wifWlmKHR5cGVvZiBpW3RdPT1cInVuZGVmaW5lZFwiKXt0aHJvd1wiS0VZVVRJTCB1bnN1cHBvcnRlZCBhbGdvcml0aG06IFwiK3R9aWYodHlwZW9mIHI9PVwidW5kZWZpbmVkXCJ8fHI9PW51bGwpe3ZhciB2PWlbdF1bXCJpdmxlblwiXTt2YXIgdT1tKHYpO3I9dS50b1VwcGVyQ2FzZSgpfXZhciB6PWoodCxBLHIpO3ZhciB5PXoua2V5aGV4O3ZhciB3PWgocyx0LHkscik7dmFyIHE9dy5yZXBsYWNlKC8oLns2NH0pL2csXCIkMVxcclxcblwiKTt2YXIgcD1cIi0tLS0tQkVHSU4gXCIreCtcIiBQUklWQVRFIEtFWS0tLS0tXFxyXFxuXCI7cCs9XCJQcm9jLVR5cGU6IDQsRU5DUllQVEVEXFxyXFxuXCI7cCs9XCJERUstSW5mbzogXCIrdCtcIixcIityK1wiXFxyXFxuXCI7cCs9XCJcXHJcXG5cIjtwKz1xO3ArPVwiXFxyXFxuLS0tLS1FTkQgXCIreCtcIiBQUklWQVRFIEtFWS0tLS0tXFxyXFxuXCI7cmV0dXJuIHB9LGdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVJTQUtleTpmdW5jdGlvbihELEUscix0KXt2YXIgQj1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe1wiaW50XCI6MH0pO3ZhciB3PW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7YmlnaW50OkQubn0pO3ZhciBBPW5ldyBLSlVSLmFzbjEuREVSSW50ZWdlcih7XCJpbnRcIjpELmV9KTt2YXIgQz1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2JpZ2ludDpELmR9KTt2YXIgdT1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2JpZ2ludDpELnB9KTt2YXIgcz1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2JpZ2ludDpELnF9KTt2YXIgej1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2JpZ2ludDpELmRtcDF9KTt2YXIgdj1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2JpZ2ludDpELmRtcTF9KTt2YXIgeT1uZXcgS0pVUi5hc24xLkRFUkludGVnZXIoe2JpZ2ludDpELmNvZWZmfSk7dmFyIEY9bmV3IEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSh7YXJyYXk6W0IsdyxBLEMsdSxzLHosdix5XX0pO3ZhciB4PUYuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleChcIlJTQVwiLHgsRSxyLHQpfSxuZXdFbmNyeXB0ZWRQS0NTNVBFTTpmdW5jdGlvbihwLHEsdCx1KXtpZih0eXBlb2YgcT09XCJ1bmRlZmluZWRcInx8cT09bnVsbCl7cT0xMDI0fWlmKHR5cGVvZiB0PT1cInVuZGVmaW5lZFwifHx0PT1udWxsKXt0PVwiMTAwMDFcIn12YXIgcj1uZXcgUlNBS2V5KCk7ci5nZW5lcmF0ZShxLHQpO3ZhciBzPW51bGw7aWYodHlwZW9mIHU9PVwidW5kZWZpbmVkXCJ8fHU9PW51bGwpe3M9dGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21SU0FLZXkocixwKX1lbHNle3M9dGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21SU0FLZXkocixwLHUpfXJldHVybiBzfSxnZXRSU0FLZXlGcm9tUGxhaW5QS0NTOFBFTTpmdW5jdGlvbihyKXtpZihyLm1hdGNoKC9FTkNSWVBURUQvKSl7dGhyb3dcInBlbSBzaGFsbCBiZSBub3QgRU5DUllQVEVEXCJ9dmFyIHE9dGhpcy5nZXRIZXhGcm9tUEVNKHIsXCJQUklWQVRFIEtFWVwiKTt2YXIgcD10aGlzLmdldFJTQUtleUZyb21QbGFpblBLQ1M4SGV4KHEpO3JldHVybiBwfSxnZXRSU0FLZXlGcm9tUGxhaW5QS0NTOEhleDpmdW5jdGlvbihzKXt2YXIgcj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihzLDApO2lmKHIubGVuZ3RoIT0zKXt0aHJvd1wib3V0ZXIgREVSU2VxdWVuY2Ugc2hhbGwgaGF2ZSAzIGVsZW1lbnRzOiBcIityLmxlbmd0aH12YXIgcT1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKHMsclsxXSk7aWYocSE9XCIzMDBkMDYwOTJhODY0ODg2ZjcwZDAxMDEwMTA1MDBcIil7dGhyb3dcIlBLQ1M4IEFsZ29yaXRobUlkZW50aWZpZXIgaXMgbm90IHJzYUVuYzogXCIrcX12YXIgcT1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKHMsclsxXSk7dmFyIHQ9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihzLHJbMl0pO3ZhciB1PUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHQsMCk7dmFyIHA9bmV3IFJTQUtleSgpO3AucmVhZFByaXZhdGVLZXlGcm9tQVNOMUhleFN0cmluZyh1KTtyZXR1cm4gcH0scGFyc2VIZXhPZkVuY3J5cHRlZFBLQ1M4OmZ1bmN0aW9uKHcpe3ZhciBzPXt9O3ZhciByPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHcsMCk7aWYoci5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwKS5pdGVtcyAhPSAyOiBcIityLmxlbmd0aH1zLmNpcGhlcnRleHQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodyxyWzFdKTt2YXIgeT1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaih3LHJbMF0pO2lmKHkubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wKS5pdGVtcyAhPSAyOiBcIit5Lmxlbmd0aH1pZihBU04xSEVYLmdldEhleE9mVl9BdE9iaih3LHlbMF0pIT1cIjJhODY0ODg2ZjcwZDAxMDUwZFwiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIHBrY3M1UEJFUzJcIn12YXIgcD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaih3LHlbMV0pO2lmKHkubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEpLml0ZW1zICE9IDI6IFwiK3AubGVuZ3RofXZhciBxPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHcscFsxXSk7aWYocS5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMS4xKS5pdGVtcyAhPSAyOiBcIitxLmxlbmd0aH1pZihBU04xSEVYLmdldEhleE9mVl9BdE9iaih3LHFbMF0pIT1cIjJhODY0ODg2ZjcwZDAzMDdcIil7dGhyb3dcInRoaXMgb25seSBzdXBwb3J0cyBUcmlwbGVERVNcIn1zLmVuY3J5cHRpb25TY2hlbWVBbGc9XCJUcmlwbGVERVNcIjtzLmVuY3J5cHRpb25TY2hlbWVJVj1BU04xSEVYLmdldEhleE9mVl9BdE9iaih3LHFbMV0pO3ZhciB0PUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHcscFswXSk7aWYodC5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMS4wKS5pdGVtcyAhPSAyOiBcIit0Lmxlbmd0aH1pZihBU04xSEVYLmdldEhleE9mVl9BdE9iaih3LHRbMF0pIT1cIjJhODY0ODg2ZjcwZDAxMDUwY1wiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIHBrY3M1UEJLREYyXCJ9dmFyIHg9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoodyx0WzFdKTtpZih4Lmxlbmd0aDwyKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEuMC4xKS5pdGVtcyA8IDI6IFwiK3gubGVuZ3RofXMucGJrZGYyU2FsdD1BU04xSEVYLmdldEhleE9mVl9BdE9iaih3LHhbMF0pO3ZhciB1PUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHcseFsxXSk7dHJ5e3MucGJrZGYySXRlcj1wYXJzZUludCh1LDE2KX1jYXRjaCh2KXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdCBwYmtkZjJJdGVyOiBcIit1fXJldHVybiBzfSxnZXRQQktERjJLZXlIZXhGcm9tUGFyYW06ZnVuY3Rpb24odSxwKXt2YXIgdD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHUucGJrZGYyU2FsdCk7dmFyIHE9dS5wYmtkZjJJdGVyO3ZhciBzPUNyeXB0b0pTLlBCS0RGMihwLHQse2tleVNpemU6MTkyLzMyLGl0ZXJhdGlvbnM6cX0pO3ZhciByPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHMpO3JldHVybiByfSxnZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uKHgseSl7dmFyIHI9dGhpcy5nZXRIZXhGcm9tUEVNKHgsXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIik7dmFyIHA9dGhpcy5wYXJzZUhleE9mRW5jcnlwdGVkUEtDUzgocik7dmFyIHU9S0VZVVRJTC5nZXRQQktERjJLZXlIZXhGcm9tUGFyYW0ocCx5KTt2YXIgdj17fTt2LmNpcGhlcnRleHQ9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShwLmNpcGhlcnRleHQpO3ZhciB0PUNyeXB0b0pTLmVuYy5IZXgucGFyc2UodSk7dmFyIHM9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShwLmVuY3J5cHRpb25TY2hlbWVJVik7dmFyIHc9Q3J5cHRvSlMuVHJpcGxlREVTLmRlY3J5cHQodix0LHtpdjpzfSk7dmFyIHE9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkodyk7cmV0dXJuIHF9LGdldFJTQUtleUZyb21FbmNyeXB0ZWRQS0NTOFBFTTpmdW5jdGlvbihzLHIpe3ZhciBxPXRoaXMuZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTShzLHIpO3ZhciBwPXRoaXMuZ2V0UlNBS2V5RnJvbVBsYWluUEtDUzhIZXgocSk7cmV0dXJuIHB9LGdldEtleUZyb21FbmNyeXB0ZWRQS0NTOFBFTTpmdW5jdGlvbihzLHEpe3ZhciBwPXRoaXMuZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTShzLHEpO3ZhciByPXRoaXMuZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4KHApO3JldHVybiByfSxwYXJzZVBsYWluUHJpdmF0ZVBLQ1M4SGV4OmZ1bmN0aW9uKHMpe3ZhciBxPXt9O3EuYWxncGFyYW09bnVsbDtpZihzLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgcGxhaW4gUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDEpXCJ9dmFyIHI9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocywwKTtpZihyLmxlbmd0aCE9Myl7dGhyb3dcIm1hbGZvcm1lZCBwbGFpbiBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMilcIn1pZihzLnN1YnN0cihyWzFdLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDMpXCJ9dmFyIHA9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocyxyWzFdKTtpZihwLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNClcIn1pZihzLnN1YnN0cihwWzBdLDIpIT1cIjA2XCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDUpXCJ9cS5hbGdvaWQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocyxwWzBdKTtpZihzLnN1YnN0cihwWzFdLDIpPT1cIjA2XCIpe3EuYWxncGFyYW09QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocyxwWzFdKX1pZihzLnN1YnN0cihyWzJdLDIpIT1cIjA0XCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDYpXCJ9cS5rZXlpZHg9QVNOMUhFWC5nZXRTdGFydFBvc09mVl9BdE9iaihzLHJbMl0pO3JldHVybiBxfSxnZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhQRU06ZnVuY3Rpb24ocSl7dmFyIHA9dGhpcy5nZXRIZXhGcm9tUEVNKHEsXCJQUklWQVRFIEtFWVwiKTt2YXIgcj10aGlzLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleChwKTtyZXR1cm4gcn0sZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4OmZ1bmN0aW9uKHApe3ZhciB3PXRoaXMucGFyc2VQbGFpblByaXZhdGVQS0NTOEhleChwKTtpZih3LmFsZ29pZD09XCIyYTg2NDg4NmY3MGQwMTAxMDFcIil7dGhpcy5wYXJzZVByaXZhdGVSYXdSU0FLZXlIZXhBdE9iaihwLHcpO3ZhciB1PXcua2V5O3ZhciB6PW5ldyBSU0FLZXkoKTt6LnNldFByaXZhdGVFeCh1Lm4sdS5lLHUuZCx1LnAsdS5xLHUuZHAsdS5kcSx1LmNvKTtyZXR1cm4gen1lbHNle2lmKHcuYWxnb2lkPT1cIjJhODY0OGNlM2QwMjAxXCIpe3RoaXMucGFyc2VQcml2YXRlUmF3RUNLZXlIZXhBdE9iaihwLHcpO2lmKEtKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZVt3LmFsZ3BhcmFtXT09PXVuZGVmaW5lZCl7dGhyb3dcIktKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZSB1bmRlZmluZWQ6IFwiK3cuYWxncGFyYW19dmFyIHY9S0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW3cuYWxncGFyYW1dO3ZhciB6PW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6dn0pO3ouc2V0UHVibGljS2V5SGV4KHcucHVia2V5KTt6LnNldFByaXZhdGVLZXlIZXgody5rZXkpO3ouaXNQdWJsaWM9ZmFsc2U7cmV0dXJuIHp9ZWxzZXtpZih3LmFsZ29pZD09XCIyYTg2NDhjZTM4MDQwMVwiKXt2YXIgdD1BU04xSEVYLmdldFZieUxpc3QocCwwLFsxLDEsMF0sXCIwMlwiKTt2YXIgcz1BU04xSEVYLmdldFZieUxpc3QocCwwLFsxLDEsMV0sXCIwMlwiKTt2YXIgeT1BU04xSEVYLmdldFZieUxpc3QocCwwLFsxLDEsMl0sXCIwMlwiKTt2YXIgQj1BU04xSEVYLmdldFZieUxpc3QocCwwLFsyLDBdLFwiMDJcIik7dmFyIHI9bmV3IEJpZ0ludGVnZXIodCwxNik7dmFyIHE9bmV3IEJpZ0ludGVnZXIocywxNik7dmFyIHg9bmV3IEJpZ0ludGVnZXIoeSwxNik7dmFyIEE9bmV3IEJpZ0ludGVnZXIoQiwxNik7dmFyIHo9bmV3IEtKVVIuY3J5cHRvLkRTQSgpO3ouc2V0UHJpdmF0ZShyLHEseCxudWxsLEEpO3JldHVybiB6fWVsc2V7dGhyb3dcInVuc3VwcG9ydGVkIHByaXZhdGUga2V5IGFsZ29yaXRobVwifX19fSxnZXRSU0FLZXlGcm9tUHVibGljUEtDUzhQRU06ZnVuY3Rpb24ocSl7dmFyIHI9dGhpcy5nZXRIZXhGcm9tUEVNKHEsXCJQVUJMSUMgS0VZXCIpO3ZhciBwPXRoaXMuZ2V0UlNBS2V5RnJvbVB1YmxpY1BLQ1M4SGV4KHIpO3JldHVybiBwfSxnZXRLZXlGcm9tUHVibGljUEtDUzhQRU06ZnVuY3Rpb24ocSl7dmFyIHI9dGhpcy5nZXRIZXhGcm9tUEVNKHEsXCJQVUJMSUMgS0VZXCIpO3ZhciBwPXRoaXMuZ2V0S2V5RnJvbVB1YmxpY1BLQ1M4SGV4KHIpO3JldHVybiBwfSxnZXRLZXlGcm9tUHVibGljUEtDUzhIZXg6ZnVuY3Rpb24ocSl7dmFyIHA9dGhpcy5wYXJzZVB1YmxpY1BLQ1M4SGV4KHEpO2lmKHAuYWxnb2lkPT1cIjJhODY0ODg2ZjcwZDAxMDEwMVwiKXt2YXIgdT10aGlzLnBhcnNlUHVibGljUmF3UlNBS2V5SGV4KHAua2V5KTt2YXIgcj1uZXcgUlNBS2V5KCk7ci5zZXRQdWJsaWModS5uLHUuZSk7cmV0dXJuIHJ9ZWxzZXtpZihwLmFsZ29pZD09XCIyYTg2NDhjZTNkMDIwMVwiKXtpZihLSlVSLmNyeXB0by5PSUQub2lkaGV4Mm5hbWVbcC5hbGdwYXJhbV09PT11bmRlZmluZWQpe3Rocm93XCJLSlVSLmNyeXB0by5PSUQub2lkaGV4Mm5hbWUgdW5kZWZpbmVkOiBcIitwLmFsZ3BhcmFtfXZhciBzPUtKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZVtwLmFsZ3BhcmFtXTt2YXIgcj1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOnMscHViOnAua2V5fSk7cmV0dXJuIHJ9ZWxzZXtpZihwLmFsZ29pZD09XCIyYTg2NDhjZTM4MDQwMVwiKXt2YXIgdD1wLmFsZ3BhcmFtO3ZhciB2PUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHAua2V5LDApO3ZhciByPW5ldyBLSlVSLmNyeXB0by5EU0EoKTtyLnNldFB1YmxpYyhuZXcgQmlnSW50ZWdlcih0LnAsMTYpLG5ldyBCaWdJbnRlZ2VyKHQucSwxNiksbmV3IEJpZ0ludGVnZXIodC5nLDE2KSxuZXcgQmlnSW50ZWdlcih2LDE2KSk7cmV0dXJuIHJ9ZWxzZXt0aHJvd1widW5zdXBwb3J0ZWQgcHVibGljIGtleSBhbGdvcml0aG1cIn19fX0scGFyc2VQdWJsaWNSYXdSU0FLZXlIZXg6ZnVuY3Rpb24ocil7dmFyIHA9e307aWYoci5zdWJzdHIoMCwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDEpXCJ9dmFyIHE9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoociwwKTtpZihxLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBSU0Ega2V5KGNvZGU6MDAyKVwifWlmKHIuc3Vic3RyKHFbMF0sMikhPVwiMDJcIil7dGhyb3dcIm1hbGZvcm1lZCBSU0Ega2V5KGNvZGU6MDAzKVwifXAubj1BU04xSEVYLmdldEhleE9mVl9BdE9iaihyLHFbMF0pO2lmKHIuc3Vic3RyKHFbMV0sMikhPVwiMDJcIil7dGhyb3dcIm1hbGZvcm1lZCBSU0Ega2V5KGNvZGU6MDA0KVwifXAuZT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihyLHFbMV0pO3JldHVybiBwfSxwYXJzZVByaXZhdGVSYXdSU0FLZXlIZXhBdE9iajpmdW5jdGlvbihxLHMpe3ZhciByPXMua2V5aWR4O2lmKHEuc3Vic3RyKHIsMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBSU0EgcHJpdmF0ZSBrZXkoY29kZTowMDEpXCJ9dmFyIHA9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocSxyKTtpZihwLmxlbmd0aCE9OSl7dGhyb3dcIm1hbGZvcm1lZCBSU0EgcHJpdmF0ZSBrZXkoY29kZTowMDIpXCJ9cy5rZXk9e307cy5rZXkubj1BU04xSEVYLmdldEhleE9mVl9BdE9iaihxLHBbMV0pO3Mua2V5LmU9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocSxwWzJdKTtzLmtleS5kPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHEscFszXSk7cy5rZXkucD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihxLHBbNF0pO3Mua2V5LnE9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocSxwWzVdKTtzLmtleS5kcD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihxLHBbNl0pO3Mua2V5LmRxPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHEscFs3XSk7cy5rZXkuY289QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoocSxwWzhdKX0scGFyc2VQcml2YXRlUmF3RUNLZXlIZXhBdE9iajpmdW5jdGlvbihwLHQpe3ZhciBxPXQua2V5aWR4O3ZhciByPUFTTjFIRVguZ2V0VmJ5TGlzdChwLHEsWzFdLFwiMDRcIik7dmFyIHM9QVNOMUhFWC5nZXRWYnlMaXN0KHAscSxbMiwwXSxcIjAzXCIpLnN1YnN0cigyKTt0LmtleT1yO3QucHVia2V5PXN9LHBhcnNlUHVibGljUEtDUzhIZXg6ZnVuY3Rpb24ocyl7dmFyIHE9e307cS5hbGdwYXJhbT1udWxsO3ZhciByPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKHMsMCk7aWYoci5sZW5ndGghPTIpe3Rocm93XCJvdXRlciBERVJTZXF1ZW5jZSBzaGFsbCBoYXZlIDIgZWxlbWVudHM6IFwiK3IubGVuZ3RofXZhciB0PXJbMF07aWYocy5zdWJzdHIodCwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDEpXCJ9dmFyIHA9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoocyx0KTtpZihwLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwdWJsaWMga2V5KGNvZGU6MDAyKVwifWlmKHMuc3Vic3RyKHBbMF0sMikhPVwiMDZcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwdWJsaWMga2V5KGNvZGU6MDAzKVwifXEuYWxnb2lkPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHMscFswXSk7aWYocy5zdWJzdHIocFsxXSwyKT09XCIwNlwiKXtxLmFsZ3BhcmFtPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHMscFsxXSl9ZWxzZXtpZihzLnN1YnN0cihwWzFdLDIpPT1cIjMwXCIpe3EuYWxncGFyYW09e307cS5hbGdwYXJhbS5wPUFTTjFIRVguZ2V0VmJ5TGlzdChzLHBbMV0sWzBdLFwiMDJcIik7cS5hbGdwYXJhbS5xPUFTTjFIRVguZ2V0VmJ5TGlzdChzLHBbMV0sWzFdLFwiMDJcIik7cS5hbGdwYXJhbS5nPUFTTjFIRVguZ2V0VmJ5TGlzdChzLHBbMV0sWzJdLFwiMDJcIil9fWlmKHMuc3Vic3RyKHJbMV0sMikhPVwiMDNcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwdWJsaWMga2V5KGNvZGU6MDA0KVwifXEua2V5PUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHMsclsxXSkuc3Vic3RyKDIpO3JldHVybiBxfSxnZXRSU0FLZXlGcm9tUHVibGljUEtDUzhIZXg6ZnVuY3Rpb24odCl7dmFyIHM9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmoodCwwKTtpZihzLmxlbmd0aCE9Mil7dGhyb3dcIm91dGVyIERFUlNlcXVlbmNlIHNoYWxsIGhhdmUgMiBlbGVtZW50czogXCIrcy5sZW5ndGh9dmFyIHI9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaih0LHNbMF0pO2lmKHIhPVwiMzAwZDA2MDkyYTg2NDg4NmY3MGQwMTAxMDEwNTAwXCIpe3Rocm93XCJQS0NTOCBBbGdvcml0aG1JZCBpcyBub3QgcnNhRW5jcnlwdGlvblwifWlmKHQuc3Vic3RyKHNbMV0sMikhPVwiMDNcIil7dGhyb3dcIlBLQ1M4IFB1YmxpYyBLZXkgaXMgbm90IEJJVFNUUklORyBlbmNhcHNsYXRlZC5cIn12YXIgdj1BU04xSEVYLmdldFN0YXJ0UG9zT2ZWX0F0T2JqKHQsc1sxXSkrMjtpZih0LnN1YnN0cih2LDIpIT1cIjMwXCIpe3Rocm93XCJQS0NTOCBQdWJsaWMgS2V5IGlzIG5vdCBTRVFVRU5DRS5cIn12YXIgcD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaih0LHYpO2lmKHAubGVuZ3RoIT0yKXt0aHJvd1wiaW5uZXIgREVSU2VxdWVuY2Ugc2hhbGwgaGF2ZSAyIGVsZW1lbnRzOiBcIitwLmxlbmd0aH1pZih0LnN1YnN0cihwWzBdLDIpIT1cIjAyXCIpe3Rocm93XCJOIGlzIG5vdCBBU04uMSBJTlRFR0VSXCJ9aWYodC5zdWJzdHIocFsxXSwyKSE9XCIwMlwiKXt0aHJvd1wiRSBpcyBub3QgQVNOLjEgSU5URUdFUlwifXZhciB3PUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKHQscFswXSk7dmFyIHU9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmoodCxwWzFdKTt2YXIgcT1uZXcgUlNBS2V5KCk7cS5zZXRQdWJsaWModyx1KTtyZXR1cm4gcX0sfX0oKTtLRVlVVElMLmdldEtleT1mdW5jdGlvbihmLGUsaCl7aWYodHlwZW9mIFJTQUtleSE9XCJ1bmRlZmluZWRcIiYmZiBpbnN0YW5jZW9mIFJTQUtleSl7cmV0dXJuIGZ9aWYodHlwZW9mIEtKVVIuY3J5cHRvLkVDRFNBIT1cInVuZGVmaW5lZFwiJiZmIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0Epe3JldHVybiBmfWlmKHR5cGVvZiBLSlVSLmNyeXB0by5EU0EhPVwidW5kZWZpbmVkXCImJmYgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5EU0Epe3JldHVybiBmfWlmKGYuY3VydmUhPT11bmRlZmluZWQmJmYueHkhPT11bmRlZmluZWQmJmYuZD09PXVuZGVmaW5lZCl7cmV0dXJuIG5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7cHViOmYueHksY3VydmU6Zi5jdXJ2ZX0pfWlmKGYuY3VydmUhPT11bmRlZmluZWQmJmYuZCE9PXVuZGVmaW5lZCl7cmV0dXJuIG5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7cHJ2OmYuZCxjdXJ2ZTpmLmN1cnZlfSl9aWYoZi5rdHk9PT11bmRlZmluZWQmJmYubiE9PXVuZGVmaW5lZCYmZi5lIT09dW5kZWZpbmVkJiZmLmQ9PT11bmRlZmluZWQpe3ZhciB3PW5ldyBSU0FLZXkoKTt3LnNldFB1YmxpYyhmLm4sZi5lKTtyZXR1cm4gd31pZihmLmt0eT09PXVuZGVmaW5lZCYmZi5uIT09dW5kZWZpbmVkJiZmLmUhPT11bmRlZmluZWQmJmYuZCE9PXVuZGVmaW5lZCYmZi5wIT09dW5kZWZpbmVkJiZmLnEhPT11bmRlZmluZWQmJmYuZHAhPT11bmRlZmluZWQmJmYuZHEhPT11bmRlZmluZWQmJmYuY28hPT11bmRlZmluZWQmJmYucWk9PT11bmRlZmluZWQpe3ZhciB3PW5ldyBSU0FLZXkoKTt3LnNldFByaXZhdGVFeChmLm4sZi5lLGYuZCxmLnAsZi5xLGYuZHAsZi5kcSxmLmNvKTtyZXR1cm4gd31pZihmLmt0eT09PXVuZGVmaW5lZCYmZi5uIT09dW5kZWZpbmVkJiZmLmUhPT11bmRlZmluZWQmJmYuZCE9PXVuZGVmaW5lZCYmZi5wPT09dW5kZWZpbmVkKXt2YXIgdz1uZXcgUlNBS2V5KCk7dy5zZXRQcml2YXRlKGYubixmLmUsZi5kKTtyZXR1cm4gd31pZihmLnAhPT11bmRlZmluZWQmJmYucSE9PXVuZGVmaW5lZCYmZi5nIT09dW5kZWZpbmVkJiZmLnkhPT11bmRlZmluZWQmJmYueD09PXVuZGVmaW5lZCl7dmFyIHc9bmV3IEtKVVIuY3J5cHRvLkRTQSgpO3cuc2V0UHVibGljKGYucCxmLnEsZi5nLGYueSk7cmV0dXJuIHd9aWYoZi5wIT09dW5kZWZpbmVkJiZmLnEhPT11bmRlZmluZWQmJmYuZyE9PXVuZGVmaW5lZCYmZi55IT09dW5kZWZpbmVkJiZmLnghPT11bmRlZmluZWQpe3ZhciB3PW5ldyBLSlVSLmNyeXB0by5EU0EoKTt3LnNldFByaXZhdGUoZi5wLGYucSxmLmcsZi55LGYueCk7cmV0dXJuIHd9aWYoZi5rdHk9PT1cIlJTQVwiJiZmLm4hPT11bmRlZmluZWQmJmYuZSE9PXVuZGVmaW5lZCYmZi5kPT09dW5kZWZpbmVkKXt2YXIgdz1uZXcgUlNBS2V5KCk7dy5zZXRQdWJsaWMoYjY0dXRvaGV4KGYubiksYjY0dXRvaGV4KGYuZSkpO3JldHVybiB3fWlmKGYua3R5PT09XCJSU0FcIiYmZi5uIT09dW5kZWZpbmVkJiZmLmUhPT11bmRlZmluZWQmJmYuZCE9PXVuZGVmaW5lZCYmZi5wIT09dW5kZWZpbmVkJiZmLnEhPT11bmRlZmluZWQmJmYuZHAhPT11bmRlZmluZWQmJmYuZHEhPT11bmRlZmluZWQmJmYucWkhPT11bmRlZmluZWQpe3ZhciB3PW5ldyBSU0FLZXkoKTt3LnNldFByaXZhdGVFeChiNjR1dG9oZXgoZi5uKSxiNjR1dG9oZXgoZi5lKSxiNjR1dG9oZXgoZi5kKSxiNjR1dG9oZXgoZi5wKSxiNjR1dG9oZXgoZi5xKSxiNjR1dG9oZXgoZi5kcCksYjY0dXRvaGV4KGYuZHEpLGI2NHV0b2hleChmLnFpKSk7cmV0dXJuIHd9aWYoZi5rdHk9PT1cIlJTQVwiJiZmLm4hPT11bmRlZmluZWQmJmYuZSE9PXVuZGVmaW5lZCYmZi5kIT09dW5kZWZpbmVkKXt2YXIgdz1uZXcgUlNBS2V5KCk7dy5zZXRQcml2YXRlKGI2NHV0b2hleChmLm4pLGI2NHV0b2hleChmLmUpLGI2NHV0b2hleChmLmQpKTtyZXR1cm4gd31pZihmLmt0eT09PVwiRUNcIiYmZi5jcnYhPT11bmRlZmluZWQmJmYueCE9PXVuZGVmaW5lZCYmZi55IT09dW5kZWZpbmVkJiZmLmQ9PT11bmRlZmluZWQpe3ZhciBkPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6Zi5jcnZ9KTt2YXIgbD1kLmVjcGFyYW1zLmtleWxlbi80O3ZhciByPShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgoZi54KSkuc2xpY2UoLWwpO3ZhciBuPShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgoZi55KSkuc2xpY2UoLWwpO3ZhciBtPVwiMDRcIityK247ZC5zZXRQdWJsaWNLZXlIZXgobSk7cmV0dXJuIGR9aWYoZi5rdHk9PT1cIkVDXCImJmYuY3J2IT09dW5kZWZpbmVkJiZmLnghPT11bmRlZmluZWQmJmYueSE9PXVuZGVmaW5lZCYmZi5kIT09dW5kZWZpbmVkKXt2YXIgZD1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOmYuY3J2fSk7dmFyIGw9ZC5lY3BhcmFtcy5rZXlsZW4vNDt2YXIgYT0oXCIwMDAwMDAwMDAwXCIrYjY0dXRvaGV4KGYuZCkpLnNsaWNlKC1sKTtkLnNldFByaXZhdGVLZXlIZXgoYSk7cmV0dXJuIGR9aWYoZi5pbmRleE9mKFwiLUVORCBDRVJUSUZJQ0FURS1cIiwwKSE9LTF8fGYuaW5kZXhPZihcIi1FTkQgWDUwOSBDRVJUSUZJQ0FURS1cIiwwKSE9LTF8fGYuaW5kZXhPZihcIi1FTkQgVFJVU1RFRCBDRVJUSUZJQ0FURS1cIiwwKSE9LTEpe3JldHVybiBYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0UEVNKGYpfWlmKGg9PT1cInBrY3M4cHViXCIpe3JldHVybiBLRVlVVElMLmdldEtleUZyb21QdWJsaWNQS0NTOEhleChmKX1pZihmLmluZGV4T2YoXCItRU5EIFBVQkxJQyBLRVktXCIpIT0tMSl7cmV0dXJuIEtFWVVUSUwuZ2V0S2V5RnJvbVB1YmxpY1BLQ1M4UEVNKGYpfWlmKGg9PT1cInBrY3M1cHJ2XCIpe3ZhciB3PW5ldyBSU0FLZXkoKTt3LnJlYWRQcml2YXRlS2V5RnJvbUFTTjFIZXhTdHJpbmcoZik7cmV0dXJuIHd9aWYoaD09PVwicGtjczVwcnZcIil7dmFyIHc9bmV3IFJTQUtleSgpO3cucmVhZFByaXZhdGVLZXlGcm9tQVNOMUhleFN0cmluZyhmKTtyZXR1cm4gd31pZihmLmluZGV4T2YoXCItRU5EIFJTQSBQUklWQVRFIEtFWS1cIikhPS0xJiZmLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKT09LTEpe3ZhciBpPUtFWVVUSUwuZ2V0SGV4RnJvbVBFTShmLFwiUlNBIFBSSVZBVEUgS0VZXCIpO3JldHVybiBLRVlVVElMLmdldEtleShpLG51bGwsXCJwa2NzNXBydlwiKX1pZihmLmluZGV4T2YoXCItRU5EIERTQSBQUklWQVRFIEtFWS1cIikhPS0xJiZmLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKT09LTEpe3ZhciB1PXRoaXMuZ2V0SGV4RnJvbVBFTShmLFwiRFNBIFBSSVZBVEUgS0VZXCIpO3ZhciB0PUFTTjFIRVguZ2V0VmJ5TGlzdCh1LDAsWzFdLFwiMDJcIik7dmFyIHM9QVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbMl0sXCIwMlwiKTt2YXIgdj1BU04xSEVYLmdldFZieUxpc3QodSwwLFszXSxcIjAyXCIpO3ZhciBqPUFTTjFIRVguZ2V0VmJ5TGlzdCh1LDAsWzRdLFwiMDJcIik7dmFyIGs9QVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbNV0sXCIwMlwiKTt2YXIgdz1uZXcgS0pVUi5jcnlwdG8uRFNBKCk7dy5zZXRQcml2YXRlKG5ldyBCaWdJbnRlZ2VyKHQsMTYpLG5ldyBCaWdJbnRlZ2VyKHMsMTYpLG5ldyBCaWdJbnRlZ2VyKHYsMTYpLG5ldyBCaWdJbnRlZ2VyKGosMTYpLG5ldyBCaWdJbnRlZ2VyKGssMTYpKTtyZXR1cm4gd31pZihmLmluZGV4T2YoXCItRU5EIFBSSVZBVEUgS0VZLVwiKSE9LTEpe3JldHVybiBLRVlVVElMLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOFBFTShmKX1pZihmLmluZGV4T2YoXCItRU5EIFJTQSBQUklWQVRFIEtFWS1cIikhPS0xJiZmLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKSE9LTEpe3JldHVybiBLRVlVVElMLmdldFJTQUtleUZyb21FbmNyeXB0ZWRQS0NTNVBFTShmLGUpfWlmKGYuaW5kZXhPZihcIi1FTkQgRUMgUFJJVkFURSBLRVktXCIpIT0tMSYmZi5pbmRleE9mKFwiNCxFTkNSWVBURURcIikhPS0xKXt2YXIgdT1LRVlVVElMLmdldERlY3J5cHRlZEtleUhleChmLGUpO3ZhciB3PUFTTjFIRVguZ2V0VmJ5TGlzdCh1LDAsWzFdLFwiMDRcIik7dmFyIGM9QVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbMiwwXSxcIjA2XCIpO3ZhciBvPUFTTjFIRVguZ2V0VmJ5TGlzdCh1LDAsWzMsMF0sXCIwM1wiKS5zdWJzdHIoMik7dmFyIGI9XCJcIjtpZihLSlVSLmNyeXB0by5PSUQub2lkaGV4Mm5hbWVbY10hPT11bmRlZmluZWQpe2I9S0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW2NdfWVsc2V7dGhyb3dcInVuZGVmaW5lZCBPSUQoaGV4KSBpbiBLSlVSLmNyeXB0by5PSUQ6IFwiK2N9dmFyIGQ9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtuYW1lOmJ9KTtkLnNldFB1YmxpY0tleUhleChvKTtkLnNldFByaXZhdGVLZXlIZXgodyk7ZC5pc1B1YmxpYz1mYWxzZTtyZXR1cm4gZH1pZihmLmluZGV4T2YoXCItRU5EIERTQSBQUklWQVRFIEtFWS1cIikhPS0xJiZmLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKSE9LTEpe3ZhciB1PUtFWVVUSUwuZ2V0RGVjcnlwdGVkS2V5SGV4KGYsZSk7dmFyIHQ9QVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbMV0sXCIwMlwiKTt2YXIgcz1BU04xSEVYLmdldFZieUxpc3QodSwwLFsyXSxcIjAyXCIpO3ZhciB2PUFTTjFIRVguZ2V0VmJ5TGlzdCh1LDAsWzNdLFwiMDJcIik7dmFyIGo9QVNOMUhFWC5nZXRWYnlMaXN0KHUsMCxbNF0sXCIwMlwiKTt2YXIgaz1BU04xSEVYLmdldFZieUxpc3QodSwwLFs1XSxcIjAyXCIpO3ZhciB3PW5ldyBLSlVSLmNyeXB0by5EU0EoKTt3LnNldFByaXZhdGUobmV3IEJpZ0ludGVnZXIodCwxNiksbmV3IEJpZ0ludGVnZXIocywxNiksbmV3IEJpZ0ludGVnZXIodiwxNiksbmV3IEJpZ0ludGVnZXIoaiwxNiksbmV3IEJpZ0ludGVnZXIoaywxNikpO3JldHVybiB3fWlmKGYuaW5kZXhPZihcIi1FTkQgRU5DUllQVEVEIFBSSVZBVEUgS0VZLVwiKSE9LTEpe3JldHVybiBLRVlVVElMLmdldEtleUZyb21FbmNyeXB0ZWRQS0NTOFBFTShmLGUpfXRocm93XCJub3Qgc3VwcG9ydGVkIGFyZ3VtZW50XCJ9O0tFWVVUSUwuZ2VuZXJhdGVLZXlwYWlyPWZ1bmN0aW9uKGEsYyl7aWYoYT09XCJSU0FcIil7dmFyIGI9Yzt2YXIgaD1uZXcgUlNBS2V5KCk7aC5nZW5lcmF0ZShiLFwiMTAwMDFcIik7aC5pc1ByaXZhdGU9dHJ1ZTtoLmlzUHVibGljPXRydWU7dmFyIGY9bmV3IFJTQUtleSgpO3ZhciBlPWgubi50b1N0cmluZygxNik7dmFyIGk9aC5lLnRvU3RyaW5nKDE2KTtmLnNldFB1YmxpYyhlLGkpO2YuaXNQcml2YXRlPWZhbHNlO2YuaXNQdWJsaWM9dHJ1ZTt2YXIgaz17fTtrLnBydktleU9iaj1oO2sucHViS2V5T2JqPWY7cmV0dXJuIGt9ZWxzZXtpZihhPT1cIkVDXCIpe3ZhciBkPWM7dmFyIGc9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTpkfSk7dmFyIGo9Zy5nZW5lcmF0ZUtleVBhaXJIZXgoKTt2YXIgaD1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOmR9KTtoLnNldFByaXZhdGVLZXlIZXgoai5lY3BydmhleCk7aC5pc1ByaXZhdGU9dHJ1ZTtoLmlzUHVibGljPWZhbHNlO3ZhciBmPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6ZH0pO2Yuc2V0UHVibGljS2V5SGV4KGouZWNwdWJoZXgpO2YuaXNQcml2YXRlPWZhbHNlO2YuaXNQdWJsaWM9dHJ1ZTt2YXIgaz17fTtrLnBydktleU9iaj1oO2sucHViS2V5T2JqPWY7cmV0dXJuIGt9ZWxzZXt0aHJvd1widW5rbm93biBhbGdvcml0aG06IFwiK2F9fX07S0VZVVRJTC5nZXRQRU09ZnVuY3Rpb24oYSxyLG8sZyxqKXt2YXIgdj1LSlVSLmFzbjE7dmFyIHU9S0pVUi5jcnlwdG87ZnVuY3Rpb24gcChzKXt2YXIgdz1LSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KHtzZXE6W3tcImludFwiOjB9LHtcImludFwiOntiaWdpbnQ6cy5ufX0se1wiaW50XCI6cy5lfSx7XCJpbnRcIjp7YmlnaW50OnMuZH19LHtcImludFwiOntiaWdpbnQ6cy5wfX0se1wiaW50XCI6e2JpZ2ludDpzLnF9fSx7XCJpbnRcIjp7YmlnaW50OnMuZG1wMX19LHtcImludFwiOntiaWdpbnQ6cy5kbXExfX0se1wiaW50XCI6e2JpZ2ludDpzLmNvZWZmfX1dfSk7cmV0dXJuIHd9ZnVuY3Rpb24gcSh3KXt2YXIgcz1LSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KHtzZXE6W3tcImludFwiOjF9LHtvY3RzdHI6e2hleDp3LnBydktleUhleH19LHt0YWc6W1wiYTBcIix0cnVlLHtvaWQ6e25hbWU6dy5jdXJ2ZU5hbWV9fV19LHt0YWc6W1wiYTFcIix0cnVlLHtiaXRzdHI6e2hleDpcIjAwXCIrdy5wdWJLZXlIZXh9fV19XX0pO3JldHVybiBzfWZ1bmN0aW9uIG4ocyl7dmFyIHc9S0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdCh7c2VxOlt7XCJpbnRcIjowfSx7XCJpbnRcIjp7YmlnaW50OnMucH19LHtcImludFwiOntiaWdpbnQ6cy5xfX0se1wiaW50XCI6e2JpZ2ludDpzLmd9fSx7XCJpbnRcIjp7YmlnaW50OnMueX19LHtcImludFwiOntiaWdpbnQ6cy54fX1dfSk7cmV0dXJuIHd9aWYoKCh0eXBlb2YgUlNBS2V5IT1cInVuZGVmaW5lZFwiJiZhIGluc3RhbmNlb2YgUlNBS2V5KXx8KHR5cGVvZiB1LkRTQSE9XCJ1bmRlZmluZWRcIiYmYSBpbnN0YW5jZW9mIHUuRFNBKXx8KHR5cGVvZiB1LkVDRFNBIT1cInVuZGVmaW5lZFwiJiZhIGluc3RhbmNlb2YgdS5FQ0RTQSkpJiZhLmlzUHVibGljPT10cnVlJiYocj09PXVuZGVmaW5lZHx8cj09XCJQS0NTOFBVQlwiKSl7dmFyIHQ9bmV3IEtKVVIuYXNuMS54NTA5LlN1YmplY3RQdWJsaWNLZXlJbmZvKGEpO3ZhciBtPXQuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB2LkFTTjFVdGlsLmdldFBFTVN0cmluZ0Zyb21IZXgobSxcIlBVQkxJQyBLRVlcIil9aWYocj09XCJQS0NTMVBSVlwiJiZ0eXBlb2YgUlNBS2V5IT1cInVuZGVmaW5lZFwiJiZhIGluc3RhbmNlb2YgUlNBS2V5JiYobz09PXVuZGVmaW5lZHx8bz09bnVsbCkmJmEuaXNQcml2YXRlPT10cnVlKXt2YXIgdD1wKGEpO3ZhciBtPXQuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB2LkFTTjFVdGlsLmdldFBFTVN0cmluZ0Zyb21IZXgobSxcIlJTQSBQUklWQVRFIEtFWVwiKX1pZihyPT1cIlBLQ1MxUFJWXCImJnR5cGVvZiBSU0FLZXkhPVwidW5kZWZpbmVkXCImJmEgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSYmKG89PT11bmRlZmluZWR8fG89PW51bGwpJiZhLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIGY9bmV3IEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyKHtuYW1lOmEuY3VydmVOYW1lfSk7dmFyIGw9Zi5nZXRFbmNvZGVkSGV4KCk7dmFyIGU9cShhKTt2YXIgaz1lLmdldEVuY29kZWRIZXgoKTt2YXIgaT1cIlwiO2krPXYuQVNOMVV0aWwuZ2V0UEVNU3RyaW5nRnJvbUhleChsLFwiRUMgUEFSQU1FVEVSU1wiKTtpKz12LkFTTjFVdGlsLmdldFBFTVN0cmluZ0Zyb21IZXgoayxcIkVDIFBSSVZBVEUgS0VZXCIpO3JldHVybiBpfWlmKHI9PVwiUEtDUzFQUlZcIiYmdHlwZW9mIEtKVVIuY3J5cHRvLkRTQSE9XCJ1bmRlZmluZWRcIiYmYSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkRTQSYmKG89PT11bmRlZmluZWR8fG89PW51bGwpJiZhLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIHQ9bihhKTt2YXIgbT10LmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdi5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KG0sXCJEU0EgUFJJVkFURSBLRVlcIil9aWYocj09XCJQS0NTNVBSVlwiJiZ0eXBlb2YgUlNBS2V5IT1cInVuZGVmaW5lZFwiJiZhIGluc3RhbmNlb2YgUlNBS2V5JiYobyE9PXVuZGVmaW5lZCYmbyE9bnVsbCkmJmEuaXNQcml2YXRlPT10cnVlKXt2YXIgdD1wKGEpO3ZhciBtPXQuZ2V0RW5jb2RlZEhleCgpO2lmKGc9PT11bmRlZmluZWQpe2c9XCJERVMtRURFMy1DQkNcIn1yZXR1cm4gdGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXgoXCJSU0FcIixtLG8sZyl9aWYocj09XCJQS0NTNVBSVlwiJiZ0eXBlb2YgS0pVUi5jcnlwdG8uRUNEU0EhPVwidW5kZWZpbmVkXCImJmEgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSYmKG8hPT11bmRlZmluZWQmJm8hPW51bGwpJiZhLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIHQ9cShhKTt2YXIgbT10LmdldEVuY29kZWRIZXgoKTtpZihnPT09dW5kZWZpbmVkKXtnPVwiREVTLUVERTMtQ0JDXCJ9cmV0dXJuIHRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4KFwiRUNcIixtLG8sZyl9aWYocj09XCJQS0NTNVBSVlwiJiZ0eXBlb2YgS0pVUi5jcnlwdG8uRFNBIT1cInVuZGVmaW5lZFwiJiZhIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRFNBJiYobyE9PXVuZGVmaW5lZCYmbyE9bnVsbCkmJmEuaXNQcml2YXRlPT10cnVlKXt2YXIgdD1uKGEpO3ZhciBtPXQuZ2V0RW5jb2RlZEhleCgpO2lmKGc9PT11bmRlZmluZWQpe2c9XCJERVMtRURFMy1DQkNcIn1yZXR1cm4gdGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXgoXCJEU0FcIixtLG8sZyl9dmFyIGg9ZnVuY3Rpb24odyxzKXt2YXIgeT1iKHcscyk7dmFyIHg9bmV3IEtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3Qoe3NlcTpbe3NlcTpbe29pZDp7bmFtZTpcInBrY3M1UEJFUzJcIn19LHtzZXE6W3tzZXE6W3tvaWQ6e25hbWU6XCJwa2NzNVBCS0RGMlwifX0se3NlcTpbe29jdHN0cjp7aGV4OnkucGJrZGYyU2FsdH19LHtcImludFwiOnkucGJrZGYySXRlcn1dfV19LHtzZXE6W3tvaWQ6e25hbWU6XCJkZXMtRURFMy1DQkNcIn19LHtvY3RzdHI6e2hleDp5LmVuY3J5cHRpb25TY2hlbWVJVn19XX1dfV19LHtvY3RzdHI6e2hleDp5LmNpcGhlcnRleHR9fV19KTtyZXR1cm4geC5nZXRFbmNvZGVkSGV4KCl9O3ZhciBiPWZ1bmN0aW9uKEQsRSl7dmFyIHg9MTAwO3ZhciBDPUNyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKDgpO3ZhciBCPVwiREVTLUVERTMtQ0JDXCI7dmFyIHM9Q3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oOCk7dmFyIHk9Q3J5cHRvSlMuUEJLREYyKEUsQyx7a2V5U2l6ZToxOTIvMzIsaXRlcmF0aW9uczp4fSk7dmFyIHo9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShEKTt2YXIgQT1DcnlwdG9KUy5UcmlwbGVERVMuZW5jcnlwdCh6LHkse2l2OnN9KStcIlwiO3ZhciB3PXt9O3cuY2lwaGVydGV4dD1BO3cucGJrZGYyU2FsdD1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShDKTt3LnBia2RmMkl0ZXI9eDt3LmVuY3J5cHRpb25TY2hlbWVBbGc9Qjt3LmVuY3J5cHRpb25TY2hlbWVJVj1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShzKTtyZXR1cm4gd307aWYocj09XCJQS0NTOFBSVlwiJiZ0eXBlb2YgUlNBS2V5IT1cInVuZGVmaW5lZFwiJiZhIGluc3RhbmNlb2YgUlNBS2V5JiZhLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIGQ9cChhKTt2YXIgYz1kLmdldEVuY29kZWRIZXgoKTt2YXIgdD1LSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KHtzZXE6W3tcImludFwiOjB9LHtzZXE6W3tvaWQ6e25hbWU6XCJyc2FFbmNyeXB0aW9uXCJ9fSx7XCJudWxsXCI6dHJ1ZX1dfSx7b2N0c3RyOntoZXg6Y319XX0pO3ZhciBtPXQuZ2V0RW5jb2RlZEhleCgpO2lmKG89PT11bmRlZmluZWR8fG89PW51bGwpe3JldHVybiB2LkFTTjFVdGlsLmdldFBFTVN0cmluZ0Zyb21IZXgobSxcIlBSSVZBVEUgS0VZXCIpfWVsc2V7dmFyIGs9aChtLG8pO3JldHVybiB2LkFTTjFVdGlsLmdldFBFTVN0cmluZ0Zyb21IZXgoayxcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiKX19aWYocj09XCJQS0NTOFBSVlwiJiZ0eXBlb2YgS0pVUi5jcnlwdG8uRUNEU0EhPVwidW5kZWZpbmVkXCImJmEgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSYmYS5pc1ByaXZhdGU9PXRydWUpe3ZhciBkPW5ldyBLSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KHtzZXE6W3tcImludFwiOjF9LHtvY3RzdHI6e2hleDphLnBydktleUhleH19LHt0YWc6W1wiYTFcIix0cnVlLHtiaXRzdHI6e2hleDpcIjAwXCIrYS5wdWJLZXlIZXh9fV19XX0pO3ZhciBjPWQuZ2V0RW5jb2RlZEhleCgpO3ZhciB0PUtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3Qoe3NlcTpbe1wiaW50XCI6MH0se3NlcTpbe29pZDp7bmFtZTpcImVjUHVibGljS2V5XCJ9fSx7b2lkOntuYW1lOmEuY3VydmVOYW1lfX1dfSx7b2N0c3RyOntoZXg6Y319XX0pO3ZhciBtPXQuZ2V0RW5jb2RlZEhleCgpO2lmKG89PT11bmRlZmluZWR8fG89PW51bGwpe3JldHVybiB2LkFTTjFVdGlsLmdldFBFTVN0cmluZ0Zyb21IZXgobSxcIlBSSVZBVEUgS0VZXCIpfWVsc2V7dmFyIGs9aChtLG8pO3JldHVybiB2LkFTTjFVdGlsLmdldFBFTVN0cmluZ0Zyb21IZXgoayxcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiKX19aWYocj09XCJQS0NTOFBSVlwiJiZ0eXBlb2YgS0pVUi5jcnlwdG8uRFNBIT1cInVuZGVmaW5lZFwiJiZhIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRFNBJiZhLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIGQ9bmV3IEtKVVIuYXNuMS5ERVJJbnRlZ2VyKHtiaWdpbnQ6YS54fSk7dmFyIGM9ZC5nZXRFbmNvZGVkSGV4KCk7dmFyIHQ9S0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdCh7c2VxOlt7XCJpbnRcIjowfSx7c2VxOlt7b2lkOntuYW1lOlwiZHNhXCJ9fSx7c2VxOlt7XCJpbnRcIjp7YmlnaW50OmEucH19LHtcImludFwiOntiaWdpbnQ6YS5xfX0se1wiaW50XCI6e2JpZ2ludDphLmd9fV19XX0se29jdHN0cjp7aGV4OmN9fV19KTt2YXIgbT10LmdldEVuY29kZWRIZXgoKTtpZihvPT09dW5kZWZpbmVkfHxvPT1udWxsKXtyZXR1cm4gdi5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KG0sXCJQUklWQVRFIEtFWVwiKX1lbHNle3ZhciBrPWgobSxvKTtyZXR1cm4gdi5BU04xVXRpbC5nZXRQRU1TdHJpbmdGcm9tSGV4KGssXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIil9fXRocm93XCJ1bnN1cHBvcnRlZCBvYmplY3Qgbm9yIGZvcm1hdFwifTtLRVlVVElMLmdldEtleUZyb21DU1JQRU09ZnVuY3Rpb24oYil7dmFyIGE9S0VZVVRJTC5nZXRIZXhGcm9tUEVNKGIsXCJDRVJUSUZJQ0FURSBSRVFVRVNUXCIpO3ZhciBjPUtFWVVUSUwuZ2V0S2V5RnJvbUNTUkhleChhKTtyZXR1cm4gY307S0VZVVRJTC5nZXRLZXlGcm9tQ1NSSGV4PWZ1bmN0aW9uKGEpe3ZhciBjPUtFWVVUSUwucGFyc2VDU1JIZXgoYSk7dmFyIGI9S0VZVVRJTC5nZXRLZXkoYy5wOHB1YmtleWhleCxudWxsLFwicGtjczhwdWJcIik7cmV0dXJuIGJ9O0tFWVVUSUwucGFyc2VDU1JIZXg9ZnVuY3Rpb24oYyl7dmFyIGI9e307dmFyIGU9YztpZihlLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDAxKVwifXZhciBkPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGUsMCk7aWYoZC5sZW5ndGg8MSl7dGhyb3dcIm1hbGZvcm1lZCBDU1IoY29kZTowMDIpXCJ9aWYoZS5zdWJzdHIoZFswXSwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIENTUihjb2RlOjAwMylcIn12YXIgYT1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihlLGRbMF0pO2lmKGEubGVuZ3RoPDMpe3Rocm93XCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDA0KVwifWIucDhwdWJrZXloZXg9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihlLGFbMl0pO3JldHVybiBifTtcblx0LyohIHJzYXBlbS0xLjEuanMgKGMpIDIwMTIgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2Vcblx0ICovXG5cdGZ1bmN0aW9uIF9yc2FwZW1fcGVtVG9CYXNlNjQoYil7dmFyIGE9YjthPWEucmVwbGFjZShcIi0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS1cIixcIlwiKTthPWEucmVwbGFjZShcIi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tXCIsXCJcIik7YT1hLnJlcGxhY2UoL1sgXFxuXSsvZyxcIlwiKTtyZXR1cm4gYX1mdW5jdGlvbiBfcnNhcGVtX2dldFBvc0FycmF5T2ZDaGlsZHJlbkZyb21IZXgoZCl7dmFyIGo9bmV3IEFycmF5KCk7dmFyIGs9QVNOMUhFWC5nZXRTdGFydFBvc09mVl9BdE9iaihkLDApO3ZhciBmPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGspO3ZhciBoPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGYpO3ZhciBiPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGgpO3ZhciBsPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGIpO3ZhciBlPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGwpO3ZhciBnPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGUpO3ZhciBjPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGcpO3ZhciBpPUFTTjFIRVguZ2V0UG9zT2ZOZXh0U2libGluZ19BdE9iaihkLGMpO2oucHVzaChrLGYsaCxiLGwsZSxnLGMsaSk7cmV0dXJuIGp9ZnVuY3Rpb24gX3JzYXBlbV9nZXRIZXhWYWx1ZUFycmF5T2ZDaGlsZHJlbkZyb21IZXgoaSl7dmFyIG89X3JzYXBlbV9nZXRQb3NBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4KGkpO3ZhciByPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGksb1swXSk7dmFyIGY9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooaSxvWzFdKTt2YXIgaj1BU04xSEVYLmdldEhleE9mVl9BdE9iaihpLG9bMl0pO3ZhciBrPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGksb1szXSk7dmFyIGM9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooaSxvWzRdKTt2YXIgYj1BU04xSEVYLmdldEhleE9mVl9BdE9iaihpLG9bNV0pO3ZhciBoPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGksb1s2XSk7dmFyIGc9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooaSxvWzddKTt2YXIgbD1BU04xSEVYLmdldEhleE9mVl9BdE9iaihpLG9bOF0pO3ZhciBtPW5ldyBBcnJheSgpO20ucHVzaChyLGYsaixrLGMsYixoLGcsbCk7cmV0dXJuIG19ZnVuY3Rpb24gX3JzYXBlbV9yZWFkUHJpdmF0ZUtleUZyb21BU04xSGV4U3RyaW5nKGMpe3ZhciBiPV9yc2FwZW1fZ2V0SGV4VmFsdWVBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4KGMpO3RoaXMuc2V0UHJpdmF0ZUV4KGJbMV0sYlsyXSxiWzNdLGJbNF0sYls1XSxiWzZdLGJbN10sYls4XSl9ZnVuY3Rpb24gX3JzYXBlbV9yZWFkUHJpdmF0ZUtleUZyb21QRU1TdHJpbmcoZSl7dmFyIGM9X3JzYXBlbV9wZW1Ub0Jhc2U2NChlKTt2YXIgZD1iNjR0b2hleChjKTt2YXIgYj1fcnNhcGVtX2dldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleChkKTt0aGlzLnNldFByaXZhdGVFeChiWzFdLGJbMl0sYlszXSxiWzRdLGJbNV0sYls2XSxiWzddLGJbOF0pfVJTQUtleS5wcm90b3R5cGUucmVhZFByaXZhdGVLZXlGcm9tUEVNU3RyaW5nPV9yc2FwZW1fcmVhZFByaXZhdGVLZXlGcm9tUEVNU3RyaW5nO1JTQUtleS5wcm90b3R5cGUucmVhZFByaXZhdGVLZXlGcm9tQVNOMUhleFN0cmluZz1fcnNhcGVtX3JlYWRQcml2YXRlS2V5RnJvbUFTTjFIZXhTdHJpbmc7XG5cdC8qISByc2FzaWduLTEuMi43LmpzIChjKSAyMDEyIEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuY29tL2pzcnNhc2lnbi9saWNlbnNlXG5cdCAqL1xuXHR2YXIgX1JFX0hFWERFQ09OTFk9bmV3IFJlZ0V4cChcIlwiKTtfUkVfSEVYREVDT05MWS5jb21waWxlKFwiW14wLTlhLWZdXCIsXCJnaVwiKTtmdW5jdGlvbiBfcnNhc2lnbl9nZXRIZXhQYWRkZWREaWdlc3RJbmZvRm9yU3RyaW5nKGQsZSxhKXt2YXIgYj1mdW5jdGlvbihmKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoU3RyaW5nKGYsYSl9O3ZhciBjPWIoZCk7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuZ2V0UGFkZGVkRGlnZXN0SW5mb0hleChjLGEsZSl9ZnVuY3Rpb24gX3plcm9QYWRkaW5nT2ZTaWduYXR1cmUoZSxkKXt2YXIgYz1cIlwiO3ZhciBhPWQvNC1lLmxlbmd0aDtmb3IodmFyIGI9MDtiPGE7YisrKXtjPWMrXCIwXCJ9cmV0dXJuIGMrZX1mdW5jdGlvbiBfcnNhc2lnbl9zaWduU3RyaW5nKGQsYSl7dmFyIGI9ZnVuY3Rpb24oZSl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhlLGEpfTt2YXIgYz1iKGQpO3JldHVybiB0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2goYyxhKX1mdW5jdGlvbiBfcnNhc2lnbl9zaWduV2l0aE1lc3NhZ2VIYXNoKGUsYyl7dmFyIGY9S0pVUi5jcnlwdG8uVXRpbC5nZXRQYWRkZWREaWdlc3RJbmZvSGV4KGUsYyx0aGlzLm4uYml0TGVuZ3RoKCkpO3ZhciBiPXBhcnNlQmlnSW50KGYsMTYpO3ZhciBkPXRoaXMuZG9Qcml2YXRlKGIpO3ZhciBhPWQudG9TdHJpbmcoMTYpO3JldHVybiBfemVyb1BhZGRpbmdPZlNpZ25hdHVyZShhLHRoaXMubi5iaXRMZW5ndGgoKSl9ZnVuY3Rpb24gX3JzYXNpZ25fc2lnblN0cmluZ1dpdGhTSEExKGEpe3JldHVybiBfcnNhc2lnbl9zaWduU3RyaW5nLmNhbGwodGhpcyxhLFwic2hhMVwiKX1mdW5jdGlvbiBfcnNhc2lnbl9zaWduU3RyaW5nV2l0aFNIQTI1NihhKXtyZXR1cm4gX3JzYXNpZ25fc2lnblN0cmluZy5jYWxsKHRoaXMsYSxcInNoYTI1NlwiKX1mdW5jdGlvbiBwc3NfbWdmMV9zdHIoYyxhLGUpe3ZhciBiPVwiXCIsZD0wO3doaWxlKGIubGVuZ3RoPGEpe2IrPWhleHRvcnN0cihlKHJzdHJ0b2hleChjK1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLFsoZCY0Mjc4MTkwMDgwKT4+MjQsKGQmMTY3MTE2ODApPj4xNiwoZCY2NTI4MCk+PjgsZCYyNTVdKSkpKTtkKz0xfXJldHVybiBifWZ1bmN0aW9uIF9yc2FzaWduX3NpZ25TdHJpbmdQU1MoZSxhLGQpe3ZhciBjPWZ1bmN0aW9uKGYpe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoZixhKX07dmFyIGI9Yyhyc3RydG9oZXgoZSkpO2lmKGQ9PT11bmRlZmluZWQpe2Q9LTF9cmV0dXJuIHRoaXMuc2lnbldpdGhNZXNzYWdlSGFzaFBTUyhiLGEsZCl9ZnVuY3Rpb24gX3JzYXNpZ25fc2lnbldpdGhNZXNzYWdlSGFzaFBTUyhsLGEsayl7dmFyIGI9aGV4dG9yc3RyKGwpO3ZhciBnPWIubGVuZ3RoO3ZhciBtPXRoaXMubi5iaXRMZW5ndGgoKS0xO3ZhciBjPU1hdGguY2VpbChtLzgpO3ZhciBkO3ZhciBvPWZ1bmN0aW9uKGkpe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoaSxhKX07aWYoaz09PS0xfHxrPT09dW5kZWZpbmVkKXtrPWd9ZWxzZXtpZihrPT09LTIpe2s9Yy1nLTJ9ZWxzZXtpZihrPC0yKXt0aHJvd1wiaW52YWxpZCBzYWx0IGxlbmd0aFwifX19aWYoYzwoZytrKzIpKXt0aHJvd1wiZGF0YSB0b28gbG9uZ1wifXZhciBmPVwiXCI7aWYoaz4wKXtmPW5ldyBBcnJheShrKTtuZXcgU2VjdXJlUmFuZG9tKCkubmV4dEJ5dGVzKGYpO2Y9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsZil9dmFyIG49aGV4dG9yc3RyKG8ocnN0cnRvaGV4KFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiK2IrZikpKTt2YXIgaj1bXTtmb3IoZD0wO2Q8Yy1rLWctMjtkKz0xKXtqW2RdPTB9dmFyIGU9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsaikrXCJcXHgwMVwiK2Y7dmFyIGg9cHNzX21nZjFfc3RyKG4sZS5sZW5ndGgsbyk7dmFyIHE9W107Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrPTEpe3FbZF09ZS5jaGFyQ29kZUF0KGQpXmguY2hhckNvZGVBdChkKX12YXIgcD0oNjUyODA+Pig4KmMtbSkpJjI1NTtxWzBdJj1+cDtmb3IoZD0wO2Q8ZztkKyspe3EucHVzaChuLmNoYXJDb2RlQXQoZCkpfXEucHVzaCgxODgpO3JldHVybiBfemVyb1BhZGRpbmdPZlNpZ25hdHVyZSh0aGlzLmRvUHJpdmF0ZShuZXcgQmlnSW50ZWdlcihxKSkudG9TdHJpbmcoMTYpLHRoaXMubi5iaXRMZW5ndGgoKSl9ZnVuY3Rpb24gX3JzYXNpZ25fZ2V0RGVjcnlwdFNpZ25hdHVyZUJJKGEsZCxjKXt2YXIgYj1uZXcgUlNBS2V5KCk7Yi5zZXRQdWJsaWMoZCxjKTt2YXIgZT1iLmRvUHVibGljKGEpO3JldHVybiBlfWZ1bmN0aW9uIF9yc2FzaWduX2dldEhleERpZ2VzdEluZm9Gcm9tU2lnKGEsYyxiKXt2YXIgZT1fcnNhc2lnbl9nZXREZWNyeXB0U2lnbmF0dXJlQkkoYSxjLGIpO3ZhciBkPWUudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14xZiswMC8sXCJcIik7cmV0dXJuIGR9ZnVuY3Rpb24gX3JzYXNpZ25fZ2V0QWxnTmFtZUFuZEhhc2hGcm9tSGV4RGlzZ2VzdEluZm8oZil7Zm9yKHZhciBlIGluIEtKVVIuY3J5cHRvLlV0aWwuRElHRVNUSU5GT0hFQUQpe3ZhciBkPUtKVVIuY3J5cHRvLlV0aWwuRElHRVNUSU5GT0hFQURbZV07dmFyIGI9ZC5sZW5ndGg7aWYoZi5zdWJzdHJpbmcoMCxiKT09ZCl7dmFyIGM9W2UsZi5zdWJzdHJpbmcoYildO3JldHVybiBjfX1yZXR1cm5bXX1mdW5jdGlvbiBfcnNhc2lnbl92ZXJpZnlTaWduYXR1cmVXaXRoQXJncyhmLGIsZyxqKXt2YXIgZT1fcnNhc2lnbl9nZXRIZXhEaWdlc3RJbmZvRnJvbVNpZyhiLGcsaik7dmFyIGg9X3JzYXNpZ25fZ2V0QWxnTmFtZUFuZEhhc2hGcm9tSGV4RGlzZ2VzdEluZm8oZSk7aWYoaC5sZW5ndGg9PTApe3JldHVybiBmYWxzZX12YXIgZD1oWzBdO3ZhciBpPWhbMV07dmFyIGE9ZnVuY3Rpb24oayl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhrLGQpfTt2YXIgYz1hKGYpO3JldHVybihpPT1jKX1mdW5jdGlvbiBfcnNhc2lnbl92ZXJpZnlIZXhTaWduYXR1cmVGb3JNZXNzYWdlKGMsYil7dmFyIGQ9cGFyc2VCaWdJbnQoYywxNik7dmFyIGE9X3JzYXNpZ25fdmVyaWZ5U2lnbmF0dXJlV2l0aEFyZ3MoYixkLHRoaXMubi50b1N0cmluZygxNiksdGhpcy5lLnRvU3RyaW5nKDE2KSk7cmV0dXJuIGF9ZnVuY3Rpb24gX3JzYXNpZ25fdmVyaWZ5U3RyaW5nKGYsail7aj1qLnJlcGxhY2UoX1JFX0hFWERFQ09OTFksXCJcIik7aj1qLnJlcGxhY2UoL1sgXFxuXSsvZyxcIlwiKTt2YXIgYj1wYXJzZUJpZ0ludChqLDE2KTtpZihiLmJpdExlbmd0aCgpPnRoaXMubi5iaXRMZW5ndGgoKSl7cmV0dXJuIDB9dmFyIGk9dGhpcy5kb1B1YmxpYyhiKTt2YXIgZT1pLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3ZhciBnPV9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGUpO2lmKGcubGVuZ3RoPT0wKXtyZXR1cm4gZmFsc2V9dmFyIGQ9Z1swXTt2YXIgaD1nWzFdO3ZhciBhPWZ1bmN0aW9uKGspe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hTdHJpbmcoayxkKX07dmFyIGM9YShmKTtyZXR1cm4oaD09Yyl9ZnVuY3Rpb24gX3JzYXNpZ25fdmVyaWZ5V2l0aE1lc3NhZ2VIYXNoKGUsYSl7YT1hLnJlcGxhY2UoX1JFX0hFWERFQ09OTFksXCJcIik7YT1hLnJlcGxhY2UoL1sgXFxuXSsvZyxcIlwiKTt2YXIgYj1wYXJzZUJpZ0ludChhLDE2KTtpZihiLmJpdExlbmd0aCgpPnRoaXMubi5iaXRMZW5ndGgoKSl7cmV0dXJuIDB9dmFyIGg9dGhpcy5kb1B1YmxpYyhiKTt2YXIgZz1oLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3ZhciBjPV9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGcpO2lmKGMubGVuZ3RoPT0wKXtyZXR1cm4gZmFsc2V9dmFyIGQ9Y1swXTt2YXIgZj1jWzFdO3JldHVybihmPT1lKX1mdW5jdGlvbiBfcnNhc2lnbl92ZXJpZnlTdHJpbmdQU1MoYyxiLGEsZil7dmFyIGU9ZnVuY3Rpb24oZyl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChnLGEpfTt2YXIgZD1lKHJzdHJ0b2hleChjKSk7aWYoZj09PXVuZGVmaW5lZCl7Zj0tMX1yZXR1cm4gdGhpcy52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1MoZCxiLGEsZil9ZnVuY3Rpb24gX3JzYXNpZ25fdmVyaWZ5V2l0aE1lc3NhZ2VIYXNoUFNTKGYscyxsLGMpe3ZhciBrPW5ldyBCaWdJbnRlZ2VyKHMsMTYpO2lmKGsuYml0TGVuZ3RoKCk+dGhpcy5uLmJpdExlbmd0aCgpKXtyZXR1cm4gZmFsc2V9dmFyIHI9ZnVuY3Rpb24oaSl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChpLGwpfTt2YXIgaj1oZXh0b3JzdHIoZik7dmFyIGg9ai5sZW5ndGg7dmFyIGc9dGhpcy5uLmJpdExlbmd0aCgpLTE7dmFyIG09TWF0aC5jZWlsKGcvOCk7dmFyIHE7aWYoYz09PS0xfHxjPT09dW5kZWZpbmVkKXtjPWh9ZWxzZXtpZihjPT09LTIpe2M9bS1oLTJ9ZWxzZXtpZihjPC0yKXt0aHJvd1wiaW52YWxpZCBzYWx0IGxlbmd0aFwifX19aWYobTwoaCtjKzIpKXt0aHJvd1wiZGF0YSB0b28gbG9uZ1wifXZhciBhPXRoaXMuZG9QdWJsaWMoaykudG9CeXRlQXJyYXkoKTtmb3IocT0wO3E8YS5sZW5ndGg7cSs9MSl7YVtxXSY9MjU1fXdoaWxlKGEubGVuZ3RoPG0pe2EudW5zaGlmdCgwKX1pZihhW20tMV0hPT0xODgpe3Rocm93XCJlbmNvZGVkIG1lc3NhZ2UgZG9lcyBub3QgZW5kIGluIDB4YmNcIn1hPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGEpO3ZhciBkPWEuc3Vic3RyKDAsbS1oLTEpO3ZhciBlPWEuc3Vic3RyKGQubGVuZ3RoLGgpO3ZhciBwPSg2NTI4MD4+KDgqbS1nKSkmMjU1O2lmKChkLmNoYXJDb2RlQXQoMCkmcCkhPT0wKXt0aHJvd1wiYml0cyBiZXlvbmQga2V5c2l6ZSBub3QgemVyb1wifXZhciBuPXBzc19tZ2YxX3N0cihlLGQubGVuZ3RoLHIpO3ZhciBvPVtdO2ZvcihxPTA7cTxkLmxlbmd0aDtxKz0xKXtvW3FdPWQuY2hhckNvZGVBdChxKV5uLmNoYXJDb2RlQXQocSl9b1swXSY9fnA7dmFyIGI9bS1oLWMtMjtmb3IocT0wO3E8YjtxKz0xKXtpZihvW3FdIT09MCl7dGhyb3dcImxlZnRtb3N0IG9jdGV0cyBub3QgemVyb1wifX1pZihvW2JdIT09MSl7dGhyb3dcIjB4MDEgbWFya2VyIG5vdCBmb3VuZFwifXJldHVybiBlPT09aGV4dG9yc3RyKHIocnN0cnRvaGV4KFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiK2orU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsby5zbGljZSgtYykpKSkpfVJTQUtleS5wcm90b3R5cGUuc2lnbldpdGhNZXNzYWdlSGFzaD1fcnNhc2lnbl9zaWduV2l0aE1lc3NhZ2VIYXNoO1JTQUtleS5wcm90b3R5cGUuc2lnblN0cmluZz1fcnNhc2lnbl9zaWduU3RyaW5nO1JTQUtleS5wcm90b3R5cGUuc2lnblN0cmluZ1dpdGhTSEExPV9yc2FzaWduX3NpZ25TdHJpbmdXaXRoU0hBMTtSU0FLZXkucHJvdG90eXBlLnNpZ25TdHJpbmdXaXRoU0hBMjU2PV9yc2FzaWduX3NpZ25TdHJpbmdXaXRoU0hBMjU2O1JTQUtleS5wcm90b3R5cGUuc2lnbj1fcnNhc2lnbl9zaWduU3RyaW5nO1JTQUtleS5wcm90b3R5cGUuc2lnbldpdGhTSEExPV9yc2FzaWduX3NpZ25TdHJpbmdXaXRoU0hBMTtSU0FLZXkucHJvdG90eXBlLnNpZ25XaXRoU0hBMjU2PV9yc2FzaWduX3NpZ25TdHJpbmdXaXRoU0hBMjU2O1JTQUtleS5wcm90b3R5cGUuc2lnbldpdGhNZXNzYWdlSGFzaFBTUz1fcnNhc2lnbl9zaWduV2l0aE1lc3NhZ2VIYXNoUFNTO1JTQUtleS5wcm90b3R5cGUuc2lnblN0cmluZ1BTUz1fcnNhc2lnbl9zaWduU3RyaW5nUFNTO1JTQUtleS5wcm90b3R5cGUuc2lnblBTUz1fcnNhc2lnbl9zaWduU3RyaW5nUFNTO1JTQUtleS5TQUxUX0xFTl9ITEVOPS0xO1JTQUtleS5TQUxUX0xFTl9NQVg9LTI7UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlXaXRoTWVzc2FnZUhhc2g9X3JzYXNpZ25fdmVyaWZ5V2l0aE1lc3NhZ2VIYXNoO1JTQUtleS5wcm90b3R5cGUudmVyaWZ5U3RyaW5nPV9yc2FzaWduX3ZlcmlmeVN0cmluZztSU0FLZXkucHJvdG90eXBlLnZlcmlmeUhleFNpZ25hdHVyZUZvck1lc3NhZ2U9X3JzYXNpZ25fdmVyaWZ5SGV4U2lnbmF0dXJlRm9yTWVzc2FnZTtSU0FLZXkucHJvdG90eXBlLnZlcmlmeT1fcnNhc2lnbl92ZXJpZnlTdHJpbmc7UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlIZXhTaWduYXR1cmVGb3JCeXRlQXJyYXlNZXNzYWdlPV9yc2FzaWduX3ZlcmlmeUhleFNpZ25hdHVyZUZvck1lc3NhZ2U7UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1M9X3JzYXNpZ25fdmVyaWZ5V2l0aE1lc3NhZ2VIYXNoUFNTO1JTQUtleS5wcm90b3R5cGUudmVyaWZ5U3RyaW5nUFNTPV9yc2FzaWduX3ZlcmlmeVN0cmluZ1BTUztSU0FLZXkucHJvdG90eXBlLnZlcmlmeVBTUz1fcnNhc2lnbl92ZXJpZnlTdHJpbmdQU1M7UlNBS2V5LlNBTFRfTEVOX1JFQ09WRVI9LTI7XG5cdC8qISB4NTA5LTEuMS45LmpzIChjKSAyMDEyLTIwMTYgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2Vcblx0ICovXG5cdGZ1bmN0aW9uIFg1MDkoKXt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0E9bnVsbDt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0FfaE49bnVsbDt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0FfaEU9bnVsbDt0aGlzLmhleD1udWxsO3RoaXMuZ2V0U2VyaWFsTnVtYmVySGV4PWZ1bmN0aW9uKCl7cmV0dXJuIEFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VkJ5TnRoTGlzdCh0aGlzLmhleCwwLFswLDFdKX07dGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZD1mdW5jdGlvbigpe3ZhciBiPUFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VkJ5TnRoTGlzdCh0aGlzLmhleCwwLFswLDIsMF0pO3ZhciBhPUtKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludChiKTt2YXIgYz1LSlVSLmFzbjEueDUwOS5PSUQub2lkMm5hbWUoYSk7cmV0dXJuIGN9O3RoaXMuZ2V0SXNzdWVySGV4PWZ1bmN0aW9uKCl7cmV0dXJuIEFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VExWQnlOdGhMaXN0KHRoaXMuaGV4LDAsWzAsM10pfTt0aGlzLmdldElzc3VlclN0cmluZz1mdW5jdGlvbigpe3JldHVybiBYNTA5LmhleDJkbihBU04xSEVYLmdldERlY2VuZGFudEhleFRMVkJ5TnRoTGlzdCh0aGlzLmhleCwwLFswLDNdKSl9O3RoaXMuZ2V0U3ViamVjdEhleD1mdW5jdGlvbigpe3JldHVybiBBU04xSEVYLmdldERlY2VuZGFudEhleFRMVkJ5TnRoTGlzdCh0aGlzLmhleCwwLFswLDVdKX07dGhpcy5nZXRTdWJqZWN0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIFg1MDkuaGV4MmRuKEFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VExWQnlOdGhMaXN0KHRoaXMuaGV4LDAsWzAsNV0pKX07dGhpcy5nZXROb3RCZWZvcmU9ZnVuY3Rpb24oKXt2YXIgYT1BU04xSEVYLmdldERlY2VuZGFudEhleFZCeU50aExpc3QodGhpcy5oZXgsMCxbMCw0LDBdKTthPWEucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpO2E9ZGVjb2RlVVJJQ29tcG9uZW50KGEpO3JldHVybiBhfTt0aGlzLmdldE5vdEFmdGVyPWZ1bmN0aW9uKCl7dmFyIGE9QVNOMUhFWC5nZXREZWNlbmRhbnRIZXhWQnlOdGhMaXN0KHRoaXMuaGV4LDAsWzAsNCwxXSk7YT1hLnJlcGxhY2UoLyguLikvZyxcIiUkMVwiKTthPWRlY29kZVVSSUNvbXBvbmVudChhKTtyZXR1cm4gYX07dGhpcy5yZWFkQ2VydFBFTT1mdW5jdGlvbihjKXt2YXIgZT1YNTA5LnBlbVRvSGV4KGMpO3ZhciBiPVg1MDkuZ2V0UHVibGljS2V5SGV4QXJyYXlGcm9tQ2VydEhleChlKTt2YXIgZD1uZXcgUlNBS2V5KCk7ZC5zZXRQdWJsaWMoYlswXSxiWzFdKTt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0E9ZDt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0FfaE49YlswXTt0aGlzLnN1YmplY3RQdWJsaWNLZXlSU0FfaEU9YlsxXTt0aGlzLmhleD1lfTt0aGlzLnJlYWRDZXJ0UEVNV2l0aG91dFJTQUluaXQ9ZnVuY3Rpb24oYyl7dmFyIGQ9WDUwOS5wZW1Ub0hleChjKTt2YXIgYj1YNTA5LmdldFB1YmxpY0tleUhleEFycmF5RnJvbUNlcnRIZXgoZCk7dGhpcy5zdWJqZWN0UHVibGljS2V5UlNBLnNldFB1YmxpYyhiWzBdLGJbMV0pO3RoaXMuc3ViamVjdFB1YmxpY0tleVJTQV9oTj1iWzBdO3RoaXMuc3ViamVjdFB1YmxpY0tleVJTQV9oRT1iWzFdO3RoaXMuaGV4PWR9O3RoaXMuZ2V0SW5mbz1mdW5jdGlvbigpe3ZhciBwPVwiQmFzaWMgRmllbGRzXFxuXCI7cCs9XCIgIHNlcmlhbCBudW1iZXI6IFwiK3RoaXMuZ2V0U2VyaWFsTnVtYmVySGV4KCkrXCJcXG5cIjtwKz1cIiAgc2lnbmF0dXJlIGFsZ29yaXRobTogXCIrdGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZCgpK1wiXFxuXCI7cCs9XCIgIGlzc3VlcjogXCIrdGhpcy5nZXRJc3N1ZXJTdHJpbmcoKStcIlxcblwiO3ArPVwiICBub3RCZWZvcmU6IFwiK3RoaXMuZ2V0Tm90QmVmb3JlKCkrXCJcXG5cIjtwKz1cIiAgbm90QWZ0ZXI6IFwiK3RoaXMuZ2V0Tm90QWZ0ZXIoKStcIlxcblwiO3ArPVwiICBzdWJqZWN0OiBcIit0aGlzLmdldFN1YmplY3RTdHJpbmcoKStcIlxcblwiO3ArPVwiICBzdWJqZWN0IHB1YmxpYyBrZXkgaW5mbzogXFxuXCI7dmFyIGo9WDUwOS5nZXRTdWJqZWN0UHVibGljS2V5SW5mb1Bvc0Zyb21DZXJ0SGV4KHRoaXMuaGV4KTt2YXIgZD1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKHRoaXMuaGV4LGopO3ZhciBuPUtFWVVUSUwuZ2V0S2V5KGQsbnVsbCxcInBrY3M4cHViXCIpO2lmKG4gaW5zdGFuY2VvZiBSU0FLZXkpe3ArPVwiICAgIGtleSBhbGdvcml0aG06IFJTQVxcblwiO3ArPVwiICAgIG49XCIrbi5uLnRvU3RyaW5nKDE2KS5zdWJzdHIoMCwxNikrXCIuLi5cXG5cIjtwKz1cIiAgICBlPVwiK24uZS50b1N0cmluZygxNikrXCJcXG5cIn1wKz1cIlg1MDl2MyBFeHRlbnNpb25zOlxcblwiO3ZhciBtPVg1MDkuZ2V0VjNFeHRJbmZvTGlzdE9mQ2VydEhleCh0aGlzLmhleCk7Zm9yKHZhciBlPTA7ZTxtLmxlbmd0aDtlKyspe3ZhciBiPW1bZV07dmFyIG89S0pVUi5hc24xLng1MDkuT0lELm9pZDJuYW1lKGIub2lkKTtpZihvPT09XCJcIil7bz1iLm9pZH12YXIgaz1cIlwiO2lmKGIuY3JpdGljYWw9PT10cnVlKXtrPVwiQ1JJVElDQUxcIn1wKz1cIiAgXCIrbytcIiBcIitrK1wiOlxcblwiO2lmKG89PT1cImJhc2ljQ29uc3RyYWludHNcIil7dmFyIGc9WDUwOS5nZXRFeHRCYXNpY0NvbnN0cmFpbnRzKHRoaXMuaGV4KTtpZihnLmNBPT09dW5kZWZpbmVkKXtwKz1cIiAgICB7fVxcblwifWVsc2V7cCs9XCIgICAgY0E9dHJ1ZVwiO2lmKGcucGF0aExlbiE9PXVuZGVmaW5lZCl7cCs9XCIsIHBhdGhMZW49XCIrZy5wYXRoTGVufXArPVwiXFxuXCJ9fWVsc2V7aWYobz09PVwia2V5VXNhZ2VcIil7cCs9XCIgICAgXCIrWDUwOS5nZXRFeHRLZXlVc2FnZVN0cmluZyh0aGlzLmhleCkrXCJcXG5cIn1lbHNle2lmKG89PT1cInN1YmplY3RLZXlJZGVudGlmaWVyXCIpe3ArPVwiICAgIFwiK1g1MDkuZ2V0RXh0U3ViamVjdEtleUlkZW50aWZpZXIodGhpcy5oZXgpK1wiXFxuXCJ9ZWxzZXtpZihvPT09XCJhdXRob3JpdHlLZXlJZGVudGlmaWVyXCIpe3ZhciBhPVg1MDkuZ2V0RXh0QXV0aG9yaXR5S2V5SWRlbnRpZmllcih0aGlzLmhleCk7aWYoYS5raWQhPT11bmRlZmluZWQpe3ArPVwiICAgIGtpZD1cIithLmtpZCtcIlxcblwifX1lbHNle2lmKG89PT1cImV4dEtleVVzYWdlXCIpe3ZhciBoPVg1MDkuZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lKHRoaXMuaGV4KTtwKz1cIiAgICBcIitoLmpvaW4oXCIsIFwiKStcIlxcblwifWVsc2V7aWYobz09PVwic3ViamVjdEFsdE5hbWVcIil7dmFyIGY9WDUwOS5nZXRFeHRTdWJqZWN0QWx0TmFtZSh0aGlzLmhleCk7cCs9XCIgICAgXCIrZi5qb2luKFwiLCBcIikrXCJcXG5cIn1lbHNle2lmKG89PT1cImNSTERpc3RyaWJ1dGlvblBvaW50c1wiKXt2YXIgbD1YNTA5LmdldEV4dENSTERpc3RyaWJ1dGlvblBvaW50c1VSSSh0aGlzLmhleCk7cCs9XCIgICAgXCIrbCtcIlxcblwifWVsc2V7aWYobz09PVwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKXt2YXIgYz1YNTA5LmdldEV4dEFJQUluZm8odGhpcy5oZXgpO2lmKGMub2NzcCE9PXVuZGVmaW5lZCl7cCs9XCIgICAgb2NzcDogXCIrYy5vY3NwLmpvaW4oXCIsXCIpK1wiXFxuXCJ9aWYoYy5jYWlzc3VlciE9PXVuZGVmaW5lZCl7cCs9XCIgICAgY2Fpc3N1ZXI6IFwiK2MuY2Fpc3N1ZXIuam9pbihcIixcIikrXCJcXG5cIn19fX19fX19fX1wKz1cInNpZ25hdHVyZSBhbGdvcml0aG06IFwiK1g1MDkuZ2V0U2lnbmF0dXJlQWxnb3JpdGhtTmFtZSh0aGlzLmhleCkrXCJcXG5cIjtwKz1cInNpZ25hdHVyZTogXCIrWDUwOS5nZXRTaWduYXR1cmVWYWx1ZUhleCh0aGlzLmhleCkuc3Vic3RyKDAsMTYpK1wiLi4uXFxuXCI7cmV0dXJuIHB9fVg1MDkucGVtVG9CYXNlNjQ9ZnVuY3Rpb24oYSl7dmFyIGI9YTtiPWIucmVwbGFjZShcIi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLVwiLFwiXCIpO2I9Yi5yZXBsYWNlKFwiLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLVwiLFwiXCIpO2I9Yi5yZXBsYWNlKC9bIFxcbl0rL2csXCJcIik7cmV0dXJuIGJ9O1g1MDkucGVtVG9IZXg9ZnVuY3Rpb24oYSl7dmFyIGM9WDUwOS5wZW1Ub0Jhc2U2NChhKTt2YXIgYj1iNjR0b2hleChjKTtyZXR1cm4gYn07WDUwOS5nZXRTdWJqZWN0UHVibGljS2V5UG9zRnJvbUNlcnRIZXg9ZnVuY3Rpb24oZil7dmFyIGU9WDUwOS5nZXRTdWJqZWN0UHVibGljS2V5SW5mb1Bvc0Zyb21DZXJ0SGV4KGYpO2lmKGU9PS0xKXtyZXR1cm4gLTF9dmFyIGI9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZixlKTtpZihiLmxlbmd0aCE9Mil7cmV0dXJuIC0xfXZhciBkPWJbMV07aWYoZi5zdWJzdHJpbmcoZCxkKzIpIT1cIjAzXCIpe3JldHVybiAtMX12YXIgYz1BU04xSEVYLmdldFN0YXJ0UG9zT2ZWX0F0T2JqKGYsZCk7aWYoZi5zdWJzdHJpbmcoYyxjKzIpIT1cIjAwXCIpe3JldHVybiAtMX1yZXR1cm4gYysyfTtYNTA5LmdldFN1YmplY3RQdWJsaWNLZXlJbmZvUG9zRnJvbUNlcnRIZXg9ZnVuY3Rpb24oZCl7dmFyIGM9QVNOMUhFWC5nZXRTdGFydFBvc09mVl9BdE9iaihkLDApO3ZhciBiPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGQsYyk7aWYoYi5sZW5ndGg8MSl7cmV0dXJuIC0xfWlmKGQuc3Vic3RyaW5nKGJbMF0sYlswXSsxMCk9PVwiYTAwMzAyMDEwMlwiKXtpZihiLmxlbmd0aDw2KXtyZXR1cm4gLTF9cmV0dXJuIGJbNl19ZWxzZXtpZihiLmxlbmd0aDw1KXtyZXR1cm4gLTF9cmV0dXJuIGJbNV19fTtYNTA5LmdldFB1YmxpY0tleUhleEFycmF5RnJvbUNlcnRIZXg9ZnVuY3Rpb24oZil7dmFyIGU9WDUwOS5nZXRTdWJqZWN0UHVibGljS2V5UG9zRnJvbUNlcnRIZXgoZik7dmFyIGI9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZixlKTtpZihiLmxlbmd0aCE9Mil7cmV0dXJuW119dmFyIGQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZixiWzBdKTt2YXIgYz1BU04xSEVYLmdldEhleE9mVl9BdE9iaihmLGJbMV0pO2lmKGQhPW51bGwmJmMhPW51bGwpe3JldHVybltkLGNdfWVsc2V7cmV0dXJuW119fTtYNTA5LmdldEhleFRic0NlcnRpZmljYXRlRnJvbUNlcnQ9ZnVuY3Rpb24oYil7dmFyIGE9QVNOMUhFWC5nZXRTdGFydFBvc09mVl9BdE9iaihiLDApO3JldHVybiBhfTtYNTA5LmdldFB1YmxpY0tleUhleEFycmF5RnJvbUNlcnRQRU09ZnVuY3Rpb24oYyl7dmFyIGQ9WDUwOS5wZW1Ub0hleChjKTt2YXIgYj1YNTA5LmdldFB1YmxpY0tleUhleEFycmF5RnJvbUNlcnRIZXgoZCk7cmV0dXJuIGJ9O1g1MDkuaGV4MmRuPWZ1bmN0aW9uKGUpe3ZhciBmPVwiXCI7dmFyIGM9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZSwwKTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGI9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihlLGNbZF0pO2Y9ZitcIi9cIitYNTA5LmhleDJyZG4oYil9cmV0dXJuIGZ9O1g1MDkuaGV4MnJkbj1mdW5jdGlvbihhKXt2YXIgZj1BU04xSEVYLmdldERlY2VuZGFudEhleFRMVkJ5TnRoTGlzdChhLDAsWzAsMF0pO3ZhciBlPUFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VkJ5TnRoTGlzdChhLDAsWzAsMV0pO3ZhciBjPVwiXCI7dHJ5e2M9WDUwOS5ETl9BVFRSSEVYW2ZdfWNhdGNoKGIpe2M9Zn1lPWUucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpO3ZhciBkPWRlY29kZVVSSUNvbXBvbmVudChlKTtyZXR1cm4gYytcIj1cIitkfTtYNTA5LkROX0FUVFJIRVg9e1wiMDYwMzU1MDQwNlwiOlwiQ1wiLFwiMDYwMzU1MDQwYVwiOlwiT1wiLFwiMDYwMzU1MDQwYlwiOlwiT1VcIixcIjA2MDM1NTA0MDNcIjpcIkNOXCIsXCIwNjAzNTUwNDA1XCI6XCJTTlwiLFwiMDYwMzU1MDQwOFwiOlwiU1RcIixcIjA2MDM1NTA0MDdcIjpcIkxcIixcIjA2MDM1NTA0MDlcIjpcInN0cmVldEFkZHJlc3NcIixcIjA2MDM1NTA0MGZcIjpcImJ1c2luZXNzQ2F0ZWdvcnlcIixcIjA2MDM1NTA0MTFcIjpcInBvc3RhbENvZGVcIixcIjA2MGIyYjA2MDEwNDAxODIzNzNjMDIwMTAyXCI6XCJqdXJpc2RpY3Rpb25PZkluY29ycG9yYXRpb25TUFwiLFwiMDYwYjJiMDYwMTA0MDE4MjM3M2MwMjAxMDNcIjpcImp1cmlzZGljdGlvbk9mSW5jb3Jwb3JhdGlvbkNcIix9O1g1MDkuZ2V0UHVibGljS2V5RnJvbUNlcnRQRU09ZnVuY3Rpb24oZil7dmFyIGM9WDUwOS5nZXRQdWJsaWNLZXlJbmZvUHJvcE9mQ2VydFBFTShmKTtpZihjLmFsZ29pZD09XCIyYTg2NDg4NmY3MGQwMTAxMDFcIil7dmFyIGk9S0VZVVRJTC5wYXJzZVB1YmxpY1Jhd1JTQUtleUhleChjLmtleWhleCk7dmFyIGo9bmV3IFJTQUtleSgpO2ouc2V0UHVibGljKGkubixpLmUpO3JldHVybiBqfWVsc2V7aWYoYy5hbGdvaWQ9PVwiMmE4NjQ4Y2UzZDAyMDFcIil7dmFyIGU9S0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW2MuYWxncGFyYW1dO3ZhciBqPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6ZSxpbmZvOmMua2V5aGV4fSk7ai5zZXRQdWJsaWNLZXlIZXgoYy5rZXloZXgpO3JldHVybiBqfWVsc2V7aWYoYy5hbGdvaWQ9PVwiMmE4NjQ4Y2UzODA0MDFcIil7dmFyIGI9QVNOMUhFWC5nZXRWYnlMaXN0KGMuYWxncGFyYW0sMCxbMF0sXCIwMlwiKTt2YXIgYT1BU04xSEVYLmdldFZieUxpc3QoYy5hbGdwYXJhbSwwLFsxXSxcIjAyXCIpO3ZhciBkPUFTTjFIRVguZ2V0VmJ5TGlzdChjLmFsZ3BhcmFtLDAsWzJdLFwiMDJcIik7dmFyIGg9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooYy5rZXloZXgsMCk7aD1oLnN1YnN0cigyKTt2YXIgaj1uZXcgS0pVUi5jcnlwdG8uRFNBKCk7ai5zZXRQdWJsaWMobmV3IEJpZ0ludGVnZXIoYiwxNiksbmV3IEJpZ0ludGVnZXIoYSwxNiksbmV3IEJpZ0ludGVnZXIoZCwxNiksbmV3IEJpZ0ludGVnZXIoaCwxNikpO3JldHVybiBqfWVsc2V7dGhyb3dcInVuc3VwcG9ydGVkIGtleVwifX19fTtYNTA5LmdldFB1YmxpY0tleUluZm9Qcm9wT2ZDZXJ0UEVNPWZ1bmN0aW9uKGUpe3ZhciBpPXt9O2kuYWxncGFyYW09bnVsbDt2YXIgZj1YNTA5LnBlbVRvSGV4KGUpO3ZhciBkPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGYsMCk7aWYoZC5sZW5ndGghPTMpe3Rocm93XCJtYWxmb3JtZWQgWC41MDkgY2VydGlmaWNhdGUgUEVNIChjb2RlOjAwMSlcIn1pZihmLnN1YnN0cihkWzBdLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgWC41MDkgY2VydGlmaWNhdGUgUEVNIChjb2RlOjAwMilcIn12YXIgYz1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihmLGRbMF0pO3ZhciBnPTY7aWYoZi5zdWJzdHIoY1swXSwyKSE9PVwiYTBcIil7Zz01fWlmKGMubGVuZ3RoPGcrMSl7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOSBjZXJ0aWZpY2F0ZSBQRU0gKGNvZGU6MDAzKVwifXZhciBhPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGYsY1tnXSk7aWYoYS5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgWC41MDkgY2VydGlmaWNhdGUgUEVNIChjb2RlOjAwNClcIn12YXIgaD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihmLGFbMF0pO2lmKGgubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDUpXCJ9aS5hbGdvaWQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZixoWzBdKTtpZihmLnN1YnN0cihoWzFdLDIpPT1cIjA2XCIpe2kuYWxncGFyYW09QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZixoWzFdKX1lbHNle2lmKGYuc3Vic3RyKGhbMV0sMik9PVwiMzBcIil7aS5hbGdwYXJhbT1BU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGYsaFsxXSl9fWlmKGYuc3Vic3RyKGFbMV0sMikhPVwiMDNcIil7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOSBjZXJ0aWZpY2F0ZSBQRU0gKGNvZGU6MDA2KVwifXZhciBiPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGYsYVsxXSk7aS5rZXloZXg9Yi5zdWJzdHIoMik7cmV0dXJuIGl9O1g1MDkuZ2V0UHVibGljS2V5SW5mb1Bvc09mQ2VydEhFWD1mdW5jdGlvbihjKXt2YXIgYj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihjLDApO2lmKGIubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDEpXCJ9aWYoYy5zdWJzdHIoYlswXSwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDIpXCJ9dmFyIGE9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooYyxiWzBdKTtpZihhLmxlbmd0aDw3KXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDMpXCJ9cmV0dXJuIGFbNl19O1g1MDkuZ2V0VjNFeHRJbmZvTGlzdE9mQ2VydEhleD1mdW5jdGlvbihnKXt2YXIgYj1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihnLDApO2lmKGIubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDEpXCJ9aWYoZy5zdWJzdHIoYlswXSwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDIpXCJ9dmFyIGE9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZyxiWzBdKTtpZihhLmxlbmd0aDw4KXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDMpXCJ9aWYoZy5zdWJzdHIoYVs3XSwyKSE9XCJhM1wiKXt0aHJvd1wibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIFBFTSAoY29kZTowMDQpXCJ9dmFyIGg9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZyxhWzddKTtpZihoLmxlbmd0aCE9MSl7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOSBjZXJ0aWZpY2F0ZSBQRU0gKGNvZGU6MDA1KVwifWlmKGcuc3Vic3RyKGhbMF0sMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOSBjZXJ0aWZpY2F0ZSBQRU0gKGNvZGU6MDA2KVwifXZhciBmPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGcsaFswXSk7dmFyIGU9Zi5sZW5ndGg7dmFyIGQ9bmV3IEFycmF5KGUpO2Zvcih2YXIgYz0wO2M8ZTtjKyspe2RbY109WDUwOS5nZXRWM0V4dEl0ZW1JbmZvX0F0T2JqKGcsZltjXSl9cmV0dXJuIGR9O1g1MDkuZ2V0VjNFeHRJdGVtSW5mb19BdE9iaj1mdW5jdGlvbihmLGcpe3ZhciBlPXt9O2UucG9zVExWPWc7dmFyIGI9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZixnKTtpZihiLmxlbmd0aCE9MiYmYi5sZW5ndGghPTMpe3Rocm93XCJtYWxmb3JtZWQgWC41MDl2MyBFeHQgKGNvZGU6MDAxKVwifWlmKGYuc3Vic3RyKGJbMF0sMikhPVwiMDZcIil7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOXYzIEV4dCAoY29kZTowMDIpXCJ9dmFyIGQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZixiWzBdKTtlLm9pZD1BU04xSEVYLmhleHRvb2lkc3RyKGQpO2UuY3JpdGljYWw9ZmFsc2U7aWYoYi5sZW5ndGg9PTMpe2UuY3JpdGljYWw9dHJ1ZX12YXIgYz1iW2IubGVuZ3RoLTFdO2lmKGYuc3Vic3RyKGMsMikhPVwiMDRcIil7dGhyb3dcIm1hbGZvcm1lZCBYLjUwOXYzIEV4dCAoY29kZTowMDMpXCJ9ZS5wb3NWPUFTTjFIRVguZ2V0U3RhcnRQb3NPZlZfQXRPYmooZixjKTtyZXR1cm4gZX07WDUwOS5nZXRIZXhPZlRMVl9WM0V4dFZhbHVlPWZ1bmN0aW9uKGIsYSl7dmFyIGM9WDUwOS5nZXRQb3NPZlRMVl9WM0V4dFZhbHVlKGIsYSk7aWYoYz09LTEpe3JldHVybiBudWxsfXJldHVybiBBU04xSEVYLmdldEhleE9mVExWX0F0T2JqKGIsYyl9O1g1MDkuZ2V0SGV4T2ZWX1YzRXh0VmFsdWU9ZnVuY3Rpb24oYixhKXt2YXIgYz1YNTA5LmdldFBvc09mVExWX1YzRXh0VmFsdWUoYixhKTtpZihjPT0tMSl7cmV0dXJuIG51bGx9cmV0dXJuIEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGIsYyl9O1g1MDkuZ2V0UG9zT2ZUTFZfVjNFeHRWYWx1ZT1mdW5jdGlvbihmLGIpe3ZhciBkPWI7aWYoIWIubWF0Y2goL15bMC05Ll0rJC8pKXtkPUtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZChiKX1pZihkPT1cIlwiKXtyZXR1cm4gLTF9dmFyIGM9WDUwOS5nZXRWM0V4dEluZm9MaXN0T2ZDZXJ0SGV4KGYpO2Zvcih2YXIgYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZT1jW2FdO2lmKGUub2lkPT1kKXtyZXR1cm4gZS5wb3NWfX1yZXR1cm4gLTF9O1g1MDkuZ2V0RXh0QmFzaWNDb25zdHJhaW50cz1mdW5jdGlvbihkKXt2YXIgYT1YNTA5LmdldEhleE9mVl9WM0V4dFZhbHVlKGQsXCJiYXNpY0NvbnN0cmFpbnRzXCIpO2lmKGE9PT1udWxsKXtyZXR1cm4gbnVsbH1pZihhPT09XCJcIil7cmV0dXJue319aWYoYT09PVwiMDEwMWZmXCIpe3JldHVybntjQTp0cnVlfX1pZihhLnN1YnN0cigwLDgpPT09XCIwMTAxZmYwMlwiKXt2YXIgYz1BU04xSEVYLmdldEhleE9mVl9BdE9iaihhLDYpO3ZhciBiPXBhcnNlSW50KGMsMTYpO3JldHVybntjQTp0cnVlLHBhdGhMZW46Yn19dGhyb3dcInVua25vd24gZXJyb3JcIn07WDUwOS5LRVlVU0FHRV9OQU1FPVtcImRpZ2l0YWxTaWduYXR1cmVcIixcIm5vblJlcHVkaWF0aW9uXCIsXCJrZXlFbmNpcGhlcm1lbnRcIixcImRhdGFFbmNpcGhlcm1lbnRcIixcImtleUFncmVlbWVudFwiLFwia2V5Q2VydFNpZ25cIixcImNSTFNpZ25cIixcImVuY2lwaGVyT25seVwiLFwiZGVjaXBoZXJPbmx5XCJdO1g1MDkuZ2V0RXh0S2V5VXNhZ2VCaW49ZnVuY3Rpb24oZCl7dmFyIGI9WDUwOS5nZXRIZXhPZlZfVjNFeHRWYWx1ZShkLFwia2V5VXNhZ2VcIik7aWYoYj09XCJcIil7cmV0dXJuXCJcIn1pZihiLmxlbmd0aCUyIT0wfHxiLmxlbmd0aDw9Mil7dGhyb3dcIm1hbGZvcm1lZCBrZXkgdXNhZ2UgdmFsdWVcIn12YXIgYT1wYXJzZUludChiLnN1YnN0cigwLDIpKTt2YXIgYz1wYXJzZUludChiLnN1YnN0cigyKSwxNikudG9TdHJpbmcoMik7cmV0dXJuIGMuc3Vic3RyKDAsYy5sZW5ndGgtYSl9O1g1MDkuZ2V0RXh0S2V5VXNhZ2VTdHJpbmc9ZnVuY3Rpb24oZSl7dmFyIGQ9WDUwOS5nZXRFeHRLZXlVc2FnZUJpbihlKTt2YXIgYj1uZXcgQXJyYXkoKTtmb3IodmFyIGM9MDtjPGQubGVuZ3RoO2MrKyl7aWYoZC5zdWJzdHIoYywxKT09XCIxXCIpe2IucHVzaChYNTA5LktFWVVTQUdFX05BTUVbY10pfX1yZXR1cm4gYi5qb2luKFwiLFwiKX07WDUwOS5nZXRFeHRTdWJqZWN0S2V5SWRlbnRpZmllcj1mdW5jdGlvbihiKXt2YXIgYT1YNTA5LmdldEhleE9mVl9WM0V4dFZhbHVlKGIsXCJzdWJqZWN0S2V5SWRlbnRpZmllclwiKTtyZXR1cm4gYX07WDUwOS5nZXRFeHRBdXRob3JpdHlLZXlJZGVudGlmaWVyPWZ1bmN0aW9uKGYpe3ZhciBiPXt9O3ZhciBlPVg1MDkuZ2V0SGV4T2ZUTFZfVjNFeHRWYWx1ZShmLFwiYXV0aG9yaXR5S2V5SWRlbnRpZmllclwiKTtpZihlPT09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGM9QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooZSwwKTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7aWYoZS5zdWJzdHIoY1tkXSwyKT09PVwiODBcIil7Yi5raWQ9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZSxjW2RdKX19cmV0dXJuIGJ9O1g1MDkuZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lPWZ1bmN0aW9uKGspe3ZhciBiPW5ldyBBcnJheSgpO3ZhciBmPVg1MDkuZ2V0SGV4T2ZUTFZfVjNFeHRWYWx1ZShrLFwiZXh0S2V5VXNhZ2VcIik7aWYoZj09PW51bGwpe3JldHVybiBudWxsfXZhciBjPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGYsMCk7Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspe3ZhciBqPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGYsY1tlXSk7dmFyIGc9S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KGopO3ZhciBkPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQybmFtZShnKTtiLnB1c2goZCl9cmV0dXJuIGJ9O1g1MDkuZ2V0RXh0U3ViamVjdEFsdE5hbWU9ZnVuY3Rpb24oZyl7dmFyIGI9bmV3IEFycmF5KCk7dmFyIGY9WDUwOS5nZXRIZXhPZlRMVl9WM0V4dFZhbHVlKGcsXCJzdWJqZWN0QWx0TmFtZVwiKTt2YXIgYz1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihmLDApO2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKXtpZihmLnN1YnN0cihjW2VdLDIpPT09XCI4MlwiKXt2YXIgZD1oZXh0b3V0ZjgoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZixjW2VdKSk7Yi5wdXNoKGQpfX1yZXR1cm4gYn07WDUwOS5nZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHNVUkk9ZnVuY3Rpb24obil7dmFyIHA9bmV3IEFycmF5KCk7dmFyIGs9WDUwOS5nZXRIZXhPZlRMVl9WM0V4dFZhbHVlKG4sXCJjUkxEaXN0cmlidXRpb25Qb2ludHNcIik7dmFyIG89QVNOMUhFWC5nZXRQb3NBcnJheU9mQ2hpbGRyZW5fQXRPYmooaywwKTtmb3IodmFyIGc9MDtnPG8ubGVuZ3RoO2crKyl7dmFyIGw9QVNOMUhFWC5nZXRIZXhPZlRMVl9BdE9iaihrLG9bZ10pO3ZhciBiPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGwsMCk7Zm9yKHZhciBlPTA7ZTxiLmxlbmd0aDtlKyspe2lmKGwuc3Vic3RyKGJbZV0sMik9PT1cImEwXCIpe3ZhciBmPUFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGwsYltlXSk7aWYoZi5zdWJzdHIoMCwyKT09PVwiYTBcIil7dmFyIGM9QVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZiwwKTtpZihjLnN1YnN0cigwLDIpPT09XCI4NlwiKXt2YXIgbT1BU04xSEVYLmdldEhleE9mVl9BdE9iaihjLDApO3ZhciBkPWhleHRvdXRmOChtKTtwLnB1c2goZCl9fX19fXJldHVybiBwfTtYNTA5LmdldEV4dEFJQUluZm89ZnVuY3Rpb24oZyl7dmFyIGo9e307ai5vY3NwPVtdO2ouY2Fpc3N1ZXI9W107dmFyIGg9WDUwOS5nZXRQb3NPZlRMVl9WM0V4dFZhbHVlKGcsXCJhdXRob3JpdHlJbmZvQWNjZXNzXCIpO2lmKGg9PS0xKXtyZXR1cm4gbnVsbH1pZihnLnN1YnN0cihoLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgQUlBIEV4dG4gVmFsdWVcIn12YXIgZD1BU04xSEVYLmdldFBvc0FycmF5T2ZDaGlsZHJlbl9BdE9iaihnLGgpO2Zvcih2YXIgYz0wO2M8ZC5sZW5ndGg7YysrKXt2YXIgYT1kW2NdO3ZhciBiPUFTTjFIRVguZ2V0UG9zQXJyYXlPZkNoaWxkcmVuX0F0T2JqKGcsYSk7aWYoYi5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgQWNjZXNzRGVzY3JpcHRpb24gb2YgQUlBIEV4dG5cIn12YXIgZT1iWzBdO3ZhciBmPWJbMV07aWYoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZyxlKT09XCIyYjA2MDEwNTA1MDczMDAxXCIpe2lmKGcuc3Vic3RyKGYsMik9PVwiODZcIil7ai5vY3NwLnB1c2goaGV4dG91dGY4KEFTTjFIRVguZ2V0SGV4T2ZWX0F0T2JqKGcsZikpKX19aWYoQVNOMUhFWC5nZXRIZXhPZlZfQXRPYmooZyxlKT09XCIyYjA2MDEwNTA1MDczMDAyXCIpe2lmKGcuc3Vic3RyKGYsMik9PVwiODZcIil7ai5jYWlzc3Vlci5wdXNoKGhleHRvdXRmOChBU04xSEVYLmdldEhleE9mVl9BdE9iaihnLGYpKSl9fX1yZXR1cm4gan07WDUwOS5nZXRTaWduYXR1cmVBbGdvcml0aG1OYW1lPWZ1bmN0aW9uKGQpe3ZhciBiPUFTTjFIRVguZ2V0RGVjZW5kYW50SGV4VkJ5TnRoTGlzdChkLDAsWzEsMF0pO3ZhciBhPUtKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludChiKTt2YXIgYz1LSlVSLmFzbjEueDUwOS5PSUQub2lkMm5hbWUoYSk7cmV0dXJuIGN9O1g1MDkuZ2V0U2lnbmF0dXJlVmFsdWVIZXg9ZnVuY3Rpb24oYil7dmFyIGE9QVNOMUhFWC5nZXREZWNlbmRhbnRIZXhWQnlOdGhMaXN0KGIsMCxbMl0pO2lmKGEuc3Vic3RyKDAsMikhPT1cIjAwXCIpe3Rocm93XCJjYW4ndCBnZXQgc2lnbmF0dXJlIHZhbHVlXCJ9cmV0dXJuIGEuc3Vic3RyKDIpfTtYNTA5LmdldFNlcmlhbE51bWJlckhleD1mdW5jdGlvbihhKXtyZXR1cm4gQVNOMUhFWC5nZXREZWNlbmRhbnRIZXhWQnlOdGhMaXN0KGEsMCxbMCwxXSl9O1xuXHQvKiEgandzLTMuMy40IChjKSAyMDEzLTIwMTYgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNyc2FzaWduL2xpY2Vuc2Vcblx0ICovXG5cdGlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5qd3M9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmp3cyl7S0pVUi5qd3M9e319S0pVUi5qd3MuSldTPWZ1bmN0aW9uKCl7dmFyIGE9S0pVUi5qd3MuSldTO3RoaXMucGFyc2VKV1M9ZnVuY3Rpb24oZSxnKXtpZigodGhpcy5wYXJzZWRKV1MhPT11bmRlZmluZWQpJiYoZ3x8KHRoaXMucGFyc2VkSldTLnNpZ3ZhbEghPT11bmRlZmluZWQpKSl7cmV0dXJufWlmKGUubWF0Y2goL14oW14uXSspXFwuKFteLl0rKVxcLihbXi5dKykkLyk9PW51bGwpe3Rocm93XCJKV1Mgc2lnbmF0dXJlIGlzIG5vdCBhIGZvcm0gb2YgJ0hlYWQuUGF5bG9hZC5TaWdWYWx1ZScuXCJ9dmFyIGg9UmVnRXhwLiQxO3ZhciBjPVJlZ0V4cC4kMjt2YXIgaT1SZWdFeHAuJDM7dmFyIGs9aCtcIi5cIitjO3RoaXMucGFyc2VkSldTPXt9O3RoaXMucGFyc2VkSldTLmhlYWRCNjRVPWg7dGhpcy5wYXJzZWRKV1MucGF5bG9hZEI2NFU9Yzt0aGlzLnBhcnNlZEpXUy5zaWd2YWxCNjRVPWk7dGhpcy5wYXJzZWRKV1Muc2k9aztpZighZyl7dmFyIGY9YjY0dXRvaGV4KGkpO3ZhciBkPXBhcnNlQmlnSW50KGYsMTYpO3RoaXMucGFyc2VkSldTLnNpZ3ZhbEg9Zjt0aGlzLnBhcnNlZEpXUy5zaWd2YWxCST1kfXZhciBiPWI2NHV0b3V0ZjgoaCk7dmFyIGo9YjY0dXRvdXRmOChjKTt0aGlzLnBhcnNlZEpXUy5oZWFkUz1iO3RoaXMucGFyc2VkSldTLnBheWxvYWRTPWo7aWYoIWEuaXNTYWZlSlNPTlN0cmluZyhiLHRoaXMucGFyc2VkSldTLFwiaGVhZFBcIikpe3Rocm93XCJtYWxmb3JtZWQgSlNPTiBzdHJpbmcgZm9yIEpXUyBIZWFkOiBcIitifX19O0tKVVIuandzLkpXUy5zaWduPWZ1bmN0aW9uKGEsaSxjLG0sbCl7dmFyIGs9S0pVUi5qd3MuSldTO3ZhciBxLGUsajtpZih0eXBlb2YgaSE9XCJzdHJpbmdcIiYmdHlwZW9mIGkhPVwib2JqZWN0XCIpe3Rocm93XCJzcEhlYWRlciBtdXN0IGJlIEpTT04gc3RyaW5nIG9yIG9iamVjdDogXCIraX1pZih0eXBlb2YgaT09XCJvYmplY3RcIil7ZT1pO3E9SlNPTi5zdHJpbmdpZnkoZSl9aWYodHlwZW9mIGk9PVwic3RyaW5nXCIpe3E9aTtpZighay5pc1NhZmVKU09OU3RyaW5nKHEpKXt0aHJvd1wiSldTIEhlYWQgaXMgbm90IHNhZmUgSlNPTiBzdHJpbmc6IFwiK3F9ZT1rLnJlYWRTYWZlSlNPTlN0cmluZyhxKX1qPWM7aWYodHlwZW9mIGM9PVwib2JqZWN0XCIpe2o9SlNPTi5zdHJpbmdpZnkoYyl9aWYoKGE9PVwiXCJ8fGE9PW51bGwpJiZlLmFsZyE9PXVuZGVmaW5lZCl7YT1lLmFsZ31pZigoYSE9XCJcIiYmYSE9bnVsbCkmJmUuYWxnPT09dW5kZWZpbmVkKXtlLmFsZz1hO3E9SlNPTi5zdHJpbmdpZnkoZSl9aWYoYSE9PWUuYWxnKXt0aHJvd1wiYWxnIGFuZCBzSGVhZGVyLmFsZyBkb2Vzbid0IG1hdGNoOiBcIithK1wiIT1cIitlLmFsZ312YXIgZD1udWxsO2lmKGsuandzYWxnMnNpZ2FsZ1thXT09PXVuZGVmaW5lZCl7dGhyb3dcInVuc3VwcG9ydGVkIGFsZyBuYW1lOiBcIithfWVsc2V7ZD1rLmp3c2FsZzJzaWdhbGdbYV19dmFyIGI9dXRmOHRvYjY0dShxKTt2YXIgZz11dGY4dG9iNjR1KGopO3ZhciBvPWIrXCIuXCIrZzt2YXIgbj1cIlwiO2lmKGQuc3Vic3RyKDAsNCk9PVwiSG1hY1wiKXtpZihtPT09dW5kZWZpbmVkKXt0aHJvd1wibWFjIGtleSBzaGFsbCBiZSBzcGVjaWZpZWQgZm9yIEhTKiBhbGdcIn12YXIgaD1uZXcgS0pVUi5jcnlwdG8uTWFjKHthbGc6ZCxwcm92OlwiY3J5cHRvanNcIixwYXNzOm19KTtoLnVwZGF0ZVN0cmluZyhvKTtuPWguZG9GaW5hbCgpfWVsc2V7aWYoZC5pbmRleE9mKFwid2l0aEVDRFNBXCIpIT0tMSl7dmFyIHA9bmV3IEtKVVIuY3J5cHRvLlNpZ25hdHVyZSh7YWxnOmR9KTtwLmluaXQobSxsKTtwLnVwZGF0ZVN0cmluZyhvKTtoQVNOMVNpZz1wLnNpZ24oKTtuPUtKVVIuY3J5cHRvLkVDRFNBLmFzbjFTaWdUb0NvbmNhdFNpZyhoQVNOMVNpZyl9ZWxzZXtpZihkIT1cIm5vbmVcIil7dmFyIHA9bmV3IEtKVVIuY3J5cHRvLlNpZ25hdHVyZSh7YWxnOmR9KTtwLmluaXQobSxsKTtwLnVwZGF0ZVN0cmluZyhvKTtuPXAuc2lnbigpfX19dmFyIGY9aGV4dG9iNjR1KG4pO3JldHVybiBvK1wiLlwiK2Z9O0tKVVIuandzLkpXUy52ZXJpZnk9ZnVuY3Rpb24ocCx0LGope3ZhciBtPUtKVVIuandzLkpXUzt2YXIgcT1wLnNwbGl0KFwiLlwiKTt2YXIgZD1xWzBdO3ZhciBsPXFbMV07dmFyIGI9ZCtcIi5cIitsO3ZhciByPWI2NHV0b2hleChxWzJdKTt2YXIgaT1tLnJlYWRTYWZlSlNPTlN0cmluZyhiNjR1dG91dGY4KHFbMF0pKTt2YXIgaD1udWxsO3ZhciBzPW51bGw7aWYoaS5hbGc9PT11bmRlZmluZWQpe3Rocm93XCJhbGdvcml0aG0gbm90IHNwZWNpZmllZCBpbiBoZWFkZXJcIn1lbHNle2g9aS5hbGc7cz1oLnN1YnN0cigwLDIpfWlmKGohPW51bGwmJk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChqKT09PVwiW29iamVjdCBBcnJheV1cIiYmai5sZW5ndGg+MCl7dmFyIGM9XCI6XCIrai5qb2luKFwiOlwiKStcIjpcIjtpZihjLmluZGV4T2YoXCI6XCIraCtcIjpcIik9PS0xKXt0aHJvd1wiYWxnb3JpdGhtICdcIitoK1wiJyBub3QgYWNjZXB0ZWQgaW4gdGhlIGxpc3RcIn19aWYoaCE9XCJub25lXCImJnQ9PT1udWxsKXt0aHJvd1wia2V5IHNoYWxsIGJlIHNwZWNpZmllZCB0byB2ZXJpZnkuXCJ9aWYodHlwZW9mIHQ9PVwic3RyaW5nXCImJnQuaW5kZXhPZihcIi0tLS0tQkVHSU4gXCIpIT0tMSl7dD1LRVlVVElMLmdldEtleSh0KX1pZihzPT1cIlJTXCJ8fHM9PVwiUFNcIil7aWYoISh0IGluc3RhbmNlb2YgUlNBS2V5KSl7dGhyb3dcImtleSBzaGFsbCBiZSBhIFJTQUtleSBvYmogZm9yIFJTKiBhbmQgUFMqIGFsZ3NcIn19aWYocz09XCJFU1wiKXtpZighKHQgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSkpe3Rocm93XCJrZXkgc2hhbGwgYmUgYSBFQ0RTQSBvYmogZm9yIEVTKiBhbGdzXCJ9fWlmKGg9PVwibm9uZVwiKXt9dmFyIG49bnVsbDtpZihtLmp3c2FsZzJzaWdhbGdbaS5hbGddPT09dW5kZWZpbmVkKXt0aHJvd1widW5zdXBwb3J0ZWQgYWxnIG5hbWU6IFwiK2h9ZWxzZXtuPW0uandzYWxnMnNpZ2FsZ1toXX1pZihuPT1cIm5vbmVcIil7dGhyb3dcIm5vdCBzdXBwb3J0ZWRcIn1lbHNle2lmKG4uc3Vic3RyKDAsNCk9PVwiSG1hY1wiKXt2YXIgaz1udWxsO2lmKHQ9PT11bmRlZmluZWQpe3Rocm93XCJoZXhhZGVjaW1hbCBrZXkgc2hhbGwgYmUgc3BlY2lmaWVkIGZvciBITUFDXCJ9dmFyIGc9bmV3IEtKVVIuY3J5cHRvLk1hYyh7YWxnOm4scGFzczp0fSk7Zy51cGRhdGVTdHJpbmcoYik7az1nLmRvRmluYWwoKTtyZXR1cm4gcj09a31lbHNle2lmKG4uaW5kZXhPZihcIndpdGhFQ0RTQVwiKSE9LTEpe3ZhciBmPW51bGw7dHJ5e2Y9S0pVUi5jcnlwdG8uRUNEU0EuY29uY2F0U2lnVG9BU04xU2lnKHIpfWNhdGNoKG8pe3JldHVybiBmYWxzZX12YXIgZT1uZXcgS0pVUi5jcnlwdG8uU2lnbmF0dXJlKHthbGc6bn0pO2UuaW5pdCh0KTtlLnVwZGF0ZVN0cmluZyhiKTtyZXR1cm4gZS52ZXJpZnkoZil9ZWxzZXt2YXIgZT1uZXcgS0pVUi5jcnlwdG8uU2lnbmF0dXJlKHthbGc6bn0pO2UuaW5pdCh0KTtlLnVwZGF0ZVN0cmluZyhiKTtyZXR1cm4gZS52ZXJpZnkocil9fX19O0tKVVIuandzLkpXUy5wYXJzZT1mdW5jdGlvbihnKXt2YXIgYz1nLnNwbGl0KFwiLlwiKTt2YXIgYj17fTt2YXIgZixlLGQ7aWYoYy5sZW5ndGghPTImJmMubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIHNKV1M6IHdyb25nIG51bWJlciBvZiAnLicgc3BsaXR0ZWQgZWxlbWVudHNcIn1mPWNbMF07ZT1jWzFdO2lmKGMubGVuZ3RoPT0zKXtkPWNbMl19Yi5oZWFkZXJPYmo9S0pVUi5qd3MuSldTLnJlYWRTYWZlSlNPTlN0cmluZyhiNjR1dG91dGY4KGYpKTtiLnBheWxvYWRPYmo9S0pVUi5qd3MuSldTLnJlYWRTYWZlSlNPTlN0cmluZyhiNjR1dG91dGY4KGUpKTtiLmhlYWRlclBQPUpTT04uc3RyaW5naWZ5KGIuaGVhZGVyT2JqLG51bGwsXCIgIFwiKTtpZihiLnBheWxvYWRPYmo9PW51bGwpe2IucGF5bG9hZFBQPWI2NHV0b3V0ZjgoZSl9ZWxzZXtiLnBheWxvYWRQUD1KU09OLnN0cmluZ2lmeShiLnBheWxvYWRPYmosbnVsbCxcIiAgXCIpfWlmKGQhPT11bmRlZmluZWQpe2Iuc2lnSGV4PWI2NHV0b2hleChkKX1yZXR1cm4gYn07S0pVUi5qd3MuSldTLnZlcmlmeUpXVD1mdW5jdGlvbihkLGosbCl7dmFyIGg9S0pVUi5qd3MuSldTO3ZhciBpPWQuc3BsaXQoXCIuXCIpO3ZhciBjPWlbMF07dmFyIGc9aVsxXTt2YXIgbT1jK1wiLlwiK2c7dmFyIGs9YjY0dXRvaGV4KGlbMl0pO3ZhciBmPWgucmVhZFNhZmVKU09OU3RyaW5nKGI2NHV0b3V0ZjgoYykpO3ZhciBlPWgucmVhZFNhZmVKU09OU3RyaW5nKGI2NHV0b3V0ZjgoZykpO2lmKGYuYWxnPT09dW5kZWZpbmVkKXtyZXR1cm4gZmFsc2V9aWYobC5hbGc9PT11bmRlZmluZWQpe3Rocm93XCJhY2NlcHRGaWVsZC5hbGcgc2hhbGwgYmUgc3BlY2lmaWVkXCJ9aWYoIWguaW5BcnJheShmLmFsZyxsLmFsZykpe3JldHVybiBmYWxzZX1pZihlLmlzcyE9PXVuZGVmaW5lZCYmdHlwZW9mIGwuaXNzPT09XCJvYmplY3RcIil7aWYoIWguaW5BcnJheShlLmlzcyxsLmlzcykpe3JldHVybiBmYWxzZX19aWYoZS5zdWIhPT11bmRlZmluZWQmJnR5cGVvZiBsLnN1Yj09PVwib2JqZWN0XCIpe2lmKCFoLmluQXJyYXkoZS5zdWIsbC5zdWIpKXtyZXR1cm4gZmFsc2V9fWlmKGUuYXVkIT09dW5kZWZpbmVkJiZ0eXBlb2YgbC5hdWQ9PT1cIm9iamVjdFwiKXtpZih0eXBlb2YgZS5hdWQ9PVwic3RyaW5nXCIpe2lmKCFoLmluQXJyYXkoZS5hdWQsbC5hdWQpKXtyZXR1cm4gZmFsc2V9fWVsc2V7aWYodHlwZW9mIGUuYXVkPT1cIm9iamVjdFwiKXtpZighaC5pbmNsdWRlZEFycmF5KGUuYXVkLGwuYXVkKSl7cmV0dXJuIGZhbHNlfX19fXZhciBiPUtKVVIuandzLkludERhdGUuZ2V0Tm93KCk7aWYobC52ZXJpZnlBdCE9PXVuZGVmaW5lZCYmdHlwZW9mIGwudmVyaWZ5QXQ9PT1cIm51bWJlclwiKXtiPWwudmVyaWZ5QXR9aWYobC5ncmFjZVBlcmlvZD09PXVuZGVmaW5lZHx8dHlwZW9mIGwuZ3JhY2VQZXJpb2QhPT1cIm51bWJlclwiKXtsLmdyYWNlUGVyaW9kPTB9aWYoZS5leHAhPT11bmRlZmluZWQmJnR5cGVvZiBlLmV4cD09XCJudW1iZXJcIil7aWYoZS5leHArbC5ncmFjZVBlcmlvZDxiKXtyZXR1cm4gZmFsc2V9fWlmKGUubmJmIT09dW5kZWZpbmVkJiZ0eXBlb2YgZS5uYmY9PVwibnVtYmVyXCIpe2lmKGI8ZS5uYmYtbC5ncmFjZVBlcmlvZCl7cmV0dXJuIGZhbHNlfX1pZihlLmlhdCE9PXVuZGVmaW5lZCYmdHlwZW9mIGUuaWF0PT1cIm51bWJlclwiKXtpZihiPGUuaWF0LWwuZ3JhY2VQZXJpb2Qpe3JldHVybiBmYWxzZX19aWYoZS5qdGkhPT11bmRlZmluZWQmJmwuanRpIT09dW5kZWZpbmVkKXtpZihlLmp0aSE9PWwuanRpKXtyZXR1cm4gZmFsc2V9fWlmKCFLSlVSLmp3cy5KV1MudmVyaWZ5KGQsaixsLmFsZykpe3JldHVybiBmYWxzZX1yZXR1cm4gdHJ1ZX07S0pVUi5qd3MuSldTLmluY2x1ZGVkQXJyYXk9ZnVuY3Rpb24oYixhKXt2YXIgZD1LSlVSLmp3cy5KV1MuaW5BcnJheTtpZihiPT09bnVsbCl7cmV0dXJuIGZhbHNlfWlmKHR5cGVvZiBiIT09XCJvYmplY3RcIil7cmV0dXJuIGZhbHNlfWlmKHR5cGVvZiBiLmxlbmd0aCE9PVwibnVtYmVyXCIpe3JldHVybiBmYWxzZX1mb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7aWYoIWQoYltjXSxhKSl7cmV0dXJuIGZhbHNlfX1yZXR1cm4gdHJ1ZX07S0pVUi5qd3MuSldTLmluQXJyYXk9ZnVuY3Rpb24oZCxiKXtpZihiPT09bnVsbCl7cmV0dXJuIGZhbHNlfWlmKHR5cGVvZiBiIT09XCJvYmplY3RcIil7cmV0dXJuIGZhbHNlfWlmKHR5cGVvZiBiLmxlbmd0aCE9PVwibnVtYmVyXCIpe3JldHVybiBmYWxzZX1mb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7aWYoYltjXT09ZCl7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX07S0pVUi5qd3MuSldTLmp3c2FsZzJzaWdhbGc9e0hTMjU2OlwiSG1hY1NIQTI1NlwiLEhTMzg0OlwiSG1hY1NIQTM4NFwiLEhTNTEyOlwiSG1hY1NIQTUxMlwiLFJTMjU2OlwiU0hBMjU2d2l0aFJTQVwiLFJTMzg0OlwiU0hBMzg0d2l0aFJTQVwiLFJTNTEyOlwiU0hBNTEyd2l0aFJTQVwiLEVTMjU2OlwiU0hBMjU2d2l0aEVDRFNBXCIsRVMzODQ6XCJTSEEzODR3aXRoRUNEU0FcIixQUzI1NjpcIlNIQTI1NndpdGhSU0FhbmRNR0YxXCIsUFMzODQ6XCJTSEEzODR3aXRoUlNBYW5kTUdGMVwiLFBTNTEyOlwiU0hBNTEyd2l0aFJTQWFuZE1HRjFcIixub25lOlwibm9uZVwiLH07S0pVUi5qd3MuSldTLmlzU2FmZUpTT05TdHJpbmc9ZnVuY3Rpb24oYyxiLGQpe3ZhciBlPW51bGw7dHJ5e2U9anNvblBhcnNlKGMpO2lmKHR5cGVvZiBlIT1cIm9iamVjdFwiKXtyZXR1cm4gMH1pZihlLmNvbnN0cnVjdG9yPT09QXJyYXkpe3JldHVybiAwfWlmKGIpe2JbZF09ZX1yZXR1cm4gMX1jYXRjaChhKXtyZXR1cm4gMH19O0tKVVIuandzLkpXUy5yZWFkU2FmZUpTT05TdHJpbmc9ZnVuY3Rpb24oYil7dmFyIGM9bnVsbDt0cnl7Yz1qc29uUGFyc2UoYik7aWYodHlwZW9mIGMhPVwib2JqZWN0XCIpe3JldHVybiBudWxsfWlmKGMuY29uc3RydWN0b3I9PT1BcnJheSl7cmV0dXJuIG51bGx9cmV0dXJuIGN9Y2F0Y2goYSl7cmV0dXJuIG51bGx9fTtLSlVSLmp3cy5KV1MuZ2V0RW5jb2RlZFNpZ25hdHVyZVZhbHVlRnJvbUpXUz1mdW5jdGlvbihhKXtpZihhLm1hdGNoKC9eW14uXStcXC5bXi5dK1xcLihbXi5dKykkLyk9PW51bGwpe3Rocm93XCJKV1Mgc2lnbmF0dXJlIGlzIG5vdCBhIGZvcm0gb2YgJ0hlYWQuUGF5bG9hZC5TaWdWYWx1ZScuXCJ9cmV0dXJuIFJlZ0V4cC4kMX07S0pVUi5qd3MuSldTLmdldEpXS3RodW1icHJpbnQ9ZnVuY3Rpb24oZCl7aWYoZC5rdHkhPT1cIlJTQVwiJiZkLmt0eSE9PVwiRUNcIiYmZC5rdHkhPT1cIm9jdFwiKXt0aHJvd1widW5zdXBwb3J0ZWQgYWxnb3JpdGhtIGZvciBKV0sgVGh1bXByaW50XCJ9dmFyIGE9XCJ7XCI7aWYoZC5rdHk9PT1cIlJTQVwiKXtpZih0eXBlb2YgZC5uIT1cInN0cmluZ1wifHx0eXBlb2YgZC5lIT1cInN0cmluZ1wiKXt0aHJvd1wid3JvbmcgbiBhbmQgZSB2YWx1ZSBmb3IgUlNBIGtleVwifWErPSdcImVcIjpcIicrZC5lKydcIiwnO2ErPSdcImt0eVwiOlwiJytkLmt0eSsnXCIsJzthKz0nXCJuXCI6XCInK2QubisnXCJ9J31lbHNle2lmKGQua3R5PT09XCJFQ1wiKXtpZih0eXBlb2YgZC5jcnYhPVwic3RyaW5nXCJ8fHR5cGVvZiBkLnghPVwic3RyaW5nXCJ8fHR5cGVvZiBkLnkhPVwic3RyaW5nXCIpe3Rocm93XCJ3cm9uZyBjcnYsIHggYW5kIHkgdmFsdWUgZm9yIEVDIGtleVwifWErPSdcImNydlwiOlwiJytkLmNydisnXCIsJzthKz0nXCJrdHlcIjpcIicrZC5rdHkrJ1wiLCc7YSs9J1wieFwiOlwiJytkLngrJ1wiLCc7YSs9J1wieVwiOlwiJytkLnkrJ1wifSd9ZWxzZXtpZihkLmt0eT09PVwib2N0XCIpe2lmKHR5cGVvZiBkLmshPVwic3RyaW5nXCIpe3Rocm93XCJ3cm9uZyBrIHZhbHVlIGZvciBvY3Qoc3ltbWV0cmljKSBrZXlcIn1hKz0nXCJrdHlcIjpcIicrZC5rdHkrJ1wiLCc7YSs9J1wia1wiOlwiJytkLmsrJ1wifSd9fX12YXIgYj1yc3RydG9oZXgoYSk7dmFyIGM9S0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGIsXCJzaGEyNTZcIik7dmFyIGU9aGV4dG9iNjR1KGMpO3JldHVybiBlfTtLSlVSLmp3cy5JbnREYXRlPXt9O0tKVVIuandzLkludERhdGUuZ2V0PWZ1bmN0aW9uKGEpe2lmKGE9PVwibm93XCIpe3JldHVybiBLSlVSLmp3cy5JbnREYXRlLmdldE5vdygpfWVsc2V7aWYoYT09XCJub3cgKyAxaG91clwiKXtyZXR1cm4gS0pVUi5qd3MuSW50RGF0ZS5nZXROb3coKSs2MCo2MH1lbHNle2lmKGE9PVwibm93ICsgMWRheVwiKXtyZXR1cm4gS0pVUi5qd3MuSW50RGF0ZS5nZXROb3coKSs2MCo2MCoyNH1lbHNle2lmKGE9PVwibm93ICsgMW1vbnRoXCIpe3JldHVybiBLSlVSLmp3cy5JbnREYXRlLmdldE5vdygpKzYwKjYwKjI0KjMwfWVsc2V7aWYoYT09XCJub3cgKyAxeWVhclwiKXtyZXR1cm4gS0pVUi5qd3MuSW50RGF0ZS5nZXROb3coKSs2MCo2MCoyNCozNjV9ZWxzZXtpZihhLm1hdGNoKC9aJC8pKXtyZXR1cm4gS0pVUi5qd3MuSW50RGF0ZS5nZXRadWx1KGEpfWVsc2V7aWYoYS5tYXRjaCgvXlswLTldKyQvKSl7cmV0dXJuIHBhcnNlSW50KGEpfX19fX19fXRocm93XCJ1bnN1cHBvcnRlZCBmb3JtYXQ6IFwiK2F9O0tKVVIuandzLkludERhdGUuZ2V0WnVsdT1mdW5jdGlvbihsKXt2YXIgaztpZihrPWwubWF0Y2goLyhcXGQrKShcXGRcXGQpKFxcZFxcZCkoXFxkXFxkKShcXGRcXGQpKFxcZFxcZClaLykpe3ZhciBiPVJlZ0V4cC4kMTt2YXIgaT1wYXJzZUludChiKTtpZihiLmxlbmd0aD09NCl7fWVsc2V7aWYoYi5sZW5ndGg9PTIpe2lmKDUwPD1pJiZpPDEwMCl7aT0xOTAwK2l9ZWxzZXtpZigwPD1pJiZpPDUwKXtpPTIwMDAraX1lbHNle3Rocm93XCJtYWxmb3JtZWQgeWVhciBzdHJpbmcgZm9yIFVUQ1RpbWVcIn19fWVsc2V7dGhyb3dcIm1hbGZvcm1lZCB5ZWFyIHN0cmluZ1wifX12YXIgZz1wYXJzZUludChSZWdFeHAuJDIpLTE7dmFyIGo9cGFyc2VJbnQoUmVnRXhwLiQzKTt2YXIgYz1wYXJzZUludChSZWdFeHAuJDQpO3ZhciBlPXBhcnNlSW50KFJlZ0V4cC4kNSk7dmFyIGY9cGFyc2VJbnQoUmVnRXhwLiQ2KTt2YXIgaD1uZXcgRGF0ZShEYXRlLlVUQyhpLGcsaixjLGUsZikpO3JldHVybiB+fihoLzEwMDApfXRocm93XCJ1bnN1cHBvcnRlZCBmb3JtYXQ6IFwiK2x9O0tKVVIuandzLkludERhdGUuZ2V0Tm93PWZ1bmN0aW9uKCl7dmFyIGE9fn4obmV3IERhdGUoKS8xMDAwKTtyZXR1cm4gYX07S0pVUi5qd3MuSW50RGF0ZS5pbnREYXRlMlVUQ1N0cmluZz1mdW5jdGlvbihhKXt2YXIgYj1uZXcgRGF0ZShhKjEwMDApO3JldHVybiBiLnRvVVRDU3RyaW5nKCl9O0tKVVIuandzLkludERhdGUuaW50RGF0ZTJadWx1PWZ1bmN0aW9uKGUpe3ZhciBpPW5ldyBEYXRlKGUqMTAwMCk7dmFyIGg9KFwiMDAwMFwiK2kuZ2V0VVRDRnVsbFllYXIoKSkuc2xpY2UoLTQpO3ZhciBnPShcIjAwXCIrKGkuZ2V0VVRDTW9udGgoKSsxKSkuc2xpY2UoLTIpO3ZhciBiPShcIjAwXCIraS5nZXRVVENEYXRlKCkpLnNsaWNlKC0yKTt2YXIgYT0oXCIwMFwiK2kuZ2V0VVRDSG91cnMoKSkuc2xpY2UoLTIpO3ZhciBjPShcIjAwXCIraS5nZXRVVENNaW51dGVzKCkpLnNsaWNlKC0yKTt2YXIgZj0oXCIwMFwiK2kuZ2V0VVRDU2Vjb25kcygpKS5zbGljZSgtMik7cmV0dXJuIGgrZytiK2ErYytmK1wiWlwifTtcblx0LyohIGp3c2pzLTIuMC4xIChjKSAyMDEwLTIwMTUgS2VuamkgVXJ1c2hpbWEgfCBranVyLmdpdGh1Yi5jb20vanNqd3MvbGljZW5zZVxuXHQgKi9cblx0aWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmp3cz09XCJ1bmRlZmluZWRcInx8IUtKVVIuandzKXtLSlVSLmp3cz17fX1LSlVSLmp3cy5KV1NKUz1mdW5jdGlvbigpe3ZhciBhPUtKVVIuandzLkpXUzt0aGlzLmFIZWFkZXI9W107dGhpcy5zUGF5bG9hZD1cIlwiO3RoaXMuYVNpZ25hdHVyZT1bXTt0aGlzLmluaXQ9ZnVuY3Rpb24oKXt0aGlzLmFIZWFkZXI9W107dGhpcy5zUGF5bG9hZD1cIlwiO3RoaXMuYVNpZ25hdHVyZT1bXX07dGhpcy5pbml0V2l0aEpXUz1mdW5jdGlvbihjKXt0aGlzLmluaXQoKTt2YXIgYj1uZXcgS0pVUi5qd3MuSldTKCk7Yi5wYXJzZUpXUyhjKTt0aGlzLmFIZWFkZXIucHVzaChiLnBhcnNlZEpXUy5oZWFkQjY0VSk7dGhpcy5zUGF5bG9hZD1iLnBhcnNlZEpXUy5wYXlsb2FkQjY0VTt0aGlzLmFTaWduYXR1cmUucHVzaChiLnBhcnNlZEpXUy5zaWd2YWxCNjRVKX07dGhpcy5hZGRTaWduYXR1cmVCeUhlYWRlcktleT1mdW5jdGlvbihlLGIpe3ZhciBkPWI2NHV0b3V0ZjgodGhpcy5zUGF5bG9hZCk7dmFyIGM9bmV3IEtKVVIuandzLkpXUygpO3ZhciBmPWMuZ2VuZXJhdGVKV1NCeVAxUHJ2S2V5KGUsZCxiKTt0aGlzLmFIZWFkZXIucHVzaChjLnBhcnNlZEpXUy5oZWFkQjY0VSk7dGhpcy5hU2lnbmF0dXJlLnB1c2goYy5wYXJzZWRKV1Muc2lndmFsQjY0VSl9O3RoaXMuYWRkU2lnbmF0dXJlQnlIZWFkZXJQYXlsb2FkS2V5PWZ1bmN0aW9uKGUsZCxiKXt2YXIgYz1uZXcgS0pVUi5qd3MuSldTKCk7dmFyIGY9Yy5nZW5lcmF0ZUpXU0J5UDFQcnZLZXkoZSxkLGIpO3RoaXMuYUhlYWRlci5wdXNoKGMucGFyc2VkSldTLmhlYWRCNjRVKTt0aGlzLnNQYXlsb2FkPWMucGFyc2VkSldTLnBheWxvYWRCNjRVO3RoaXMuYVNpZ25hdHVyZS5wdXNoKGMucGFyc2VkSldTLnNpZ3ZhbEI2NFUpfTt0aGlzLnZlcmlmeVdpdGhDZXJ0cz1mdW5jdGlvbihjKXtpZih0aGlzLmFIZWFkZXIubGVuZ3RoIT1jLmxlbmd0aCl7dGhyb3dcIm51bSBoZWFkZXJzIGRvZXMgbm90IG1hdGNoIHdpdGggbnVtIGNlcnRzXCJ9aWYodGhpcy5hU2lnbmF0dXJlLmxlbmd0aCE9Yy5sZW5ndGgpe3Rocm93XCJudW0gc2lnbmF0dXJlcyBkb2VzIG5vdCBtYXRjaCB3aXRoIG51bSBjZXJ0c1wifXZhciBrPXRoaXMuc1BheWxvYWQ7dmFyIGc9XCJcIjtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt2YXIgZj10aGlzLmFIZWFkZXJbZF07dmFyIG09dGhpcy5hU2lnbmF0dXJlW2RdO3ZhciBiPWYrXCIuXCIraytcIi5cIittO3ZhciBqPW5ldyBLSlVSLmp3cy5KV1MoKTt0cnl7dmFyIGw9ai52ZXJpZnlKV1NCeVBlbVg1MDlDZXJ0KGIsZSk7aWYobCE9MSl7Zys9KGQrMSkrXCJ0aCBzaWduYXR1cmUgdW5tYXRjaC4gXCJ9fWNhdGNoKGgpe2crPShkKzEpK1widGggc2lnbmF0dXJlIGZhaWwoXCIraCtcIikuIFwifX1pZihnPT1cIlwiKXtyZXR1cm4gMX1lbHNle3Rocm93IGd9fTt0aGlzLnJlYWRKV1NKUz1mdW5jdGlvbihiKXt2YXIgYz1hLnJlYWRTYWZlSlNPTlN0cmluZyhiKTtpZihjPT1udWxsKXt0aHJvd1wiYXJndW1lbnQgaXMgbm90IEpTT04gc3RyaW5nOiBcIitifXRoaXMuYUhlYWRlcj1jLmhlYWRlcnM7dGhpcy5zUGF5bG9hZD1jLnBheWxvYWQ7dGhpcy5hU2lnbmF0dXJlPWMuc2lnbmF0dXJlc307dGhpcy5nZXRKU09OPWZ1bmN0aW9uKCl7cmV0dXJue2hlYWRlcnM6dGhpcy5hSGVhZGVyLHBheWxvYWQ6dGhpcy5zUGF5bG9hZCxzaWduYXR1cmVzOnRoaXMuYVNpZ25hdHVyZX19O3RoaXMuaXNFbXB0eT1mdW5jdGlvbigpe2lmKHRoaXMuYUhlYWRlci5sZW5ndGg9PTApe3JldHVybiAxfXJldHVybiAwfX07XG5cdC8qISBub2RldXRpbC0xLjAuMCAoYykgMjAxNSBLZW5qaSBVcnVzaGltYSB8IGtqdXIuZ2l0aHViLmNvbS9qc3JzYXNpZ24vbGljZW5zZVxuXHQgKi9cblx0ZnVuY3Rpb24gcmVhZEZpbGVVVEY4KGEpe3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KS5yZWFkRmlsZVN5bmMoYSxcInV0ZjhcIil9ZnVuY3Rpb24gcmVhZEZpbGVIZXhCeUJpbihjKXt2YXIgYj1fX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTt2YXIgYT1fX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtyZXR1cm4gYi5yc3RydG9oZXgoYS5yZWFkRmlsZVN5bmMoYyxcImJpbmFyeVwiKSl9ZnVuY3Rpb24gcmVhZEZpbGUoYil7dmFyIGE9X193ZWJwYWNrX3JlcXVpcmVfXygxNyk7cmV0dXJuIGEucmVhZEZpbGVTeW5jKGIsXCJiaW5hcnlcIil9ZnVuY3Rpb24gc2F2ZUZpbGUoYyxiKXt2YXIgYT1fX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTthLndyaXRlRmlsZVN5bmMoYyxiLFwiYmluYXJ5XCIpfWZ1bmN0aW9uIHNhdmVGaWxlQmluQnlIZXgoZSxiKXt2YXIgYT1fX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTt2YXIgYz1fX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTt2YXIgZD1jLmhleHRvcnN0cihiKTthLndyaXRlRmlsZVN5bmMoZSxkLFwiYmluYXJ5XCIpfTtcblx0ZXhwb3J0cy5TZWN1cmVSYW5kb20gPSBTZWN1cmVSYW5kb207XG5cdGV4cG9ydHMucm5nX3NlZWRfdGltZSA9IHJuZ19zZWVkX3RpbWU7XG5cdFxuXHRleHBvcnRzLkJpZ0ludGVnZXIgPSBCaWdJbnRlZ2VyO1xuXHRleHBvcnRzLlJTQUtleSA9IFJTQUtleTtcblx0ZXhwb3J0cy5FQ0RTQSA9IEtKVVIuY3J5cHRvLkVDRFNBO1xuXHRleHBvcnRzLkRTQSA9IEtKVVIuY3J5cHRvLkRTQTtcblx0ZXhwb3J0cy5TaWduYXR1cmUgPSBLSlVSLmNyeXB0by5TaWduYXR1cmU7XG5cdGV4cG9ydHMuTWVzc2FnZURpZ2VzdCA9IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Q7XG5cdGV4cG9ydHMuTWFjID0gS0pVUi5jcnlwdG8uTWFjO1xuXHRleHBvcnRzLktFWVVUSUwgPSBLRVlVVElMO1xuXHRleHBvcnRzLkFTTjFIRVggPSBBU04xSEVYO1xuXHRleHBvcnRzLlg1MDkgPSBYNTA5O1xuXHRleHBvcnRzLkNyeXB0b0pTID0gQ3J5cHRvSlM7XG5cdFxuXHQvLyBleHQvYmFzZTY0LmpzXG5cdGV4cG9ydHMuYjY0dG9oZXggPSBiNjR0b2hleDtcblx0ZXhwb3J0cy5iNjR0b0JBID0gYjY0dG9CQTtcblx0XG5cdC8vIGJhc2U2NHguanNcblx0ZXhwb3J0cy5zdG9CQSA9IHN0b0JBO1xuXHRleHBvcnRzLkJBdG9zID0gQkF0b3M7XG5cdGV4cG9ydHMuQkF0b2hleCA9IEJBdG9oZXg7XG5cdGV4cG9ydHMuc3RvaGV4ID0gc3RvaGV4O1xuXHRleHBvcnRzLnN0b2I2NCA9IHN0b2I2NDtcblx0ZXhwb3J0cy5zdG9iNjR1ID0gc3RvYjY0dTtcblx0ZXhwb3J0cy5iNjR1dG9zID0gYjY0dXRvcztcblx0ZXhwb3J0cy5iNjR0b2I2NHUgPSBiNjR0b2I2NHU7XG5cdGV4cG9ydHMuYjY0dXRvYjY0ID0gYjY0dXRvYjY0O1xuXHRleHBvcnRzLmhleDJiNjQgPSBoZXgyYjY0O1xuXHRleHBvcnRzLmhleHRvYjY0dSA9IGhleHRvYjY0dTtcblx0ZXhwb3J0cy5iNjR1dG9oZXggPSBiNjR1dG9oZXg7XG5cdGV4cG9ydHMuYjY0dG9oZXggPSBiNjR0b2hleDtcblx0ZXhwb3J0cy51dGY4dG9iNjR1ID0gdXRmOHRvYjY0dTtcblx0ZXhwb3J0cy5iNjR1dG91dGY4ID0gYjY0dXRvdXRmODtcblx0ZXhwb3J0cy51dGY4dG9iNjQgPSB1dGY4dG9iNjQ7XG5cdGV4cG9ydHMuYjY0dG91dGY4ID0gYjY0dG91dGY4O1xuXHRleHBvcnRzLnV0Zjh0b2hleCA9IHV0Zjh0b2hleDtcblx0ZXhwb3J0cy5oZXh0b3V0ZjggPSBoZXh0b3V0Zjg7XG5cdGV4cG9ydHMuaGV4dG9yc3RyID0gaGV4dG9yc3RyO1xuXHRleHBvcnRzLnJzdHJ0b2hleCA9IHJzdHJ0b2hleDtcblx0ZXhwb3J0cy5uZXdsaW5lX3RvVW5peCA9IG5ld2xpbmVfdG9Vbml4O1xuXHRleHBvcnRzLm5ld2xpbmVfdG9Eb3MgPSBuZXdsaW5lX3RvRG9zO1xuXHRleHBvcnRzLmludGFyeXN0cnRvaGV4ID0gaW50YXJ5c3RydG9oZXg7XG5cdGV4cG9ydHMuc3RyZGlmZmlkeCA9IHN0cmRpZmZpZHg7XG5cdFxuXHRleHBvcnRzLmNyeXB0byA9IEtKVVIuY3J5cHRvO1xuXHRleHBvcnRzLmFzbjEgPSBLSlVSLmFzbjE7XG5cdGV4cG9ydHMuandzID0gS0pVUi5qd3M7XG5cdFxuXHRleHBvcnRzLnJlYWRGaWxlVVRGOCA9IHJlYWRGaWxlVVRGODtcblx0ZXhwb3J0cy5yZWFkRmlsZUhleEJ5QmluID0gcmVhZEZpbGVIZXhCeUJpbjtcblx0ZXhwb3J0cy5yZWFkRmlsZSA9IHJlYWRGaWxlO1xuXHRleHBvcnRzLnNhdmVGaWxlID0gc2F2ZUZpbGU7XG5cdGV4cG9ydHMuc2F2ZUZpbGVCaW5CeUhleCA9IHNhdmVGaWxlQmluQnlIZXg7XG5cdFxuXHRcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMTMpLkJ1ZmZlcikpXG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKEJ1ZmZlciwgZ2xvYmFsKSB7LyohXG5cdCAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuXHQgKlxuXHQgKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cblx0ICogQGxpY2Vuc2UgIE1JVFxuXHQgKi9cblx0LyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblx0XG5cdCd1c2Ugc3RyaWN0J1xuXHRcblx0dmFyIGJhc2U2NCA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpXG5cdHZhciBpZWVlNzU0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSlcblx0dmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KVxuXHRcblx0ZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcblx0ZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuXHRleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblx0QnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cdFxuXHR2YXIgcm9vdFBhcmVudCA9IHt9XG5cdFxuXHQvKipcblx0ICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcblx0ICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcblx0ICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuXHQgKlxuXHQgKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG5cdCAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cblx0ICpcblx0ICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuXHQgKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cblx0ICpcblx0ICogTm90ZTpcblx0ICpcblx0ICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcblx0ICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuXHQgKlxuXHQgKiAgIC0gU2FmYXJpIDUtNyBsYWNrcyBzdXBwb3J0IGZvciBjaGFuZ2luZyB0aGUgYE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3JgIHByb3BlcnR5XG5cdCAqICAgICBvbiBvYmplY3RzLlxuXHQgKlxuXHQgKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cblx0ICpcblx0ICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2Zcblx0ICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXHRcblx0ICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcblx0ICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG5cdCAqL1xuXHRCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcblx0ICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG5cdCAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cdFxuXHRmdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG5cdCAgZnVuY3Rpb24gQmFyICgpIHt9XG5cdCAgdHJ5IHtcblx0ICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuXHQgICAgYXJyLmZvbyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH1cblx0ICAgIGFyci5jb25zdHJ1Y3RvciA9IEJhclxuXHQgICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcblx0ICAgICAgICBhcnIuY29uc3RydWN0b3IgPT09IEJhciAmJiAvLyBjb25zdHJ1Y3RvciBjYW4gYmUgc2V0XG5cdCAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcblx0ICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuXHQgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIHJldHVybiBmYWxzZVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG5cdCAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG5cdCAgICA/IDB4N2ZmZmZmZmZcblx0ICAgIDogMHgzZmZmZmZmZlxuXHR9XG5cdFxuXHQvKipcblx0ICogQ2xhc3M6IEJ1ZmZlclxuXHQgKiA9PT09PT09PT09PT09XG5cdCAqXG5cdCAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgYXJlIGF1Z21lbnRlZFxuXHQgKiB3aXRoIGZ1bmN0aW9uIHByb3BlcnRpZXMgZm9yIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBBUEkgZnVuY3Rpb25zLiBXZSB1c2Vcblx0ICogYFVpbnQ4QXJyYXlgIHNvIHRoYXQgc3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXQgcmV0dXJuc1xuXHQgKiBhIHNpbmdsZSBvY3RldC5cblx0ICpcblx0ICogQnkgYXVnbWVudGluZyB0aGUgaW5zdGFuY2VzLCB3ZSBjYW4gYXZvaWQgbW9kaWZ5aW5nIHRoZSBgVWludDhBcnJheWBcblx0ICogcHJvdG90eXBlLlxuXHQgKi9cblx0ZnVuY3Rpb24gQnVmZmVyIChhcmcpIHtcblx0ICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuXHQgICAgLy8gQXZvaWQgZ29pbmcgdGhyb3VnaCBhbiBBcmd1bWVudHNBZGFwdG9yVHJhbXBvbGluZSBpbiB0aGUgY29tbW9uIGNhc2UuXG5cdCAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHJldHVybiBuZXcgQnVmZmVyKGFyZywgYXJndW1lbnRzWzFdKVxuXHQgICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnKVxuXHQgIH1cblx0XG5cdCAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgdGhpcy5sZW5ndGggPSAwXG5cdCAgICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZFxuXHQgIH1cblx0XG5cdCAgLy8gQ29tbW9uIGNhc2UuXG5cdCAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG5cdCAgICByZXR1cm4gZnJvbU51bWJlcih0aGlzLCBhcmcpXG5cdCAgfVxuXHRcblx0ICAvLyBTbGlnaHRseSBsZXNzIGNvbW1vbiBjYXNlLlxuXHQgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuXHQgICAgcmV0dXJuIGZyb21TdHJpbmcodGhpcywgYXJnLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6ICd1dGY4Jylcblx0ICB9XG5cdFxuXHQgIC8vIFVudXN1YWwuXG5cdCAgcmV0dXJuIGZyb21PYmplY3QodGhpcywgYXJnKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBmcm9tTnVtYmVyICh0aGF0LCBsZW5ndGgpIHtcblx0ICB0aGF0ID0gYWxsb2NhdGUodGhhdCwgbGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGxlbmd0aCkgfCAwKVxuXHQgIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdGhhdFtpXSA9IDBcblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIHRoYXRcblx0fVxuXHRcblx0ZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuXHQgIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykgZW5jb2RpbmcgPSAndXRmOCdcblx0XG5cdCAgLy8gQXNzdW1wdGlvbjogYnl0ZUxlbmd0aCgpIHJldHVybiB2YWx1ZSBpcyBhbHdheXMgPCBrTWF4TGVuZ3RoLlxuXHQgIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuXHQgIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGgpXG5cdFxuXHQgIHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblx0ICByZXR1cm4gdGhhdFxuXHR9XG5cdFxuXHRmdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmplY3QpIHtcblx0ICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iamVjdCkpIHJldHVybiBmcm9tQnVmZmVyKHRoYXQsIG9iamVjdClcblx0XG5cdCAgaWYgKGlzQXJyYXkob2JqZWN0KSkgcmV0dXJuIGZyb21BcnJheSh0aGF0LCBvYmplY3QpXG5cdFxuXHQgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbXVzdCBzdGFydCB3aXRoIG51bWJlciwgYnVmZmVyLCBhcnJheSBvciBzdHJpbmcnKVxuXHQgIH1cblx0XG5cdCAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIGlmIChvYmplY3QuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcblx0ICAgICAgcmV0dXJuIGZyb21UeXBlZEFycmF5KHRoYXQsIG9iamVjdClcblx0ICAgIH1cblx0ICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuXHQgICAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIG9iamVjdClcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIGlmIChvYmplY3QubGVuZ3RoKSByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmplY3QpXG5cdFxuXHQgIHJldHVybiBmcm9tSnNvbk9iamVjdCh0aGF0LCBvYmplY3QpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGZyb21CdWZmZXIgKHRoYXQsIGJ1ZmZlcikge1xuXHQgIHZhciBsZW5ndGggPSBjaGVja2VkKGJ1ZmZlci5sZW5ndGgpIHwgMFxuXHQgIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGgpXG5cdCAgYnVmZmVyLmNvcHkodGhhdCwgMCwgMCwgbGVuZ3RoKVxuXHQgIHJldHVybiB0aGF0XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGZyb21BcnJheSAodGhhdCwgYXJyYXkpIHtcblx0ICB2YXIgbGVuZ3RoID0gY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuXHQgIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGgpXG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuXHQgICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG5cdCAgfVxuXHQgIHJldHVybiB0aGF0XG5cdH1cblx0XG5cdC8vIER1cGxpY2F0ZSBvZiBmcm9tQXJyYXkoKSB0byBrZWVwIGZyb21BcnJheSgpIG1vbm9tb3JwaGljLlxuXHRmdW5jdGlvbiBmcm9tVHlwZWRBcnJheSAodGhhdCwgYXJyYXkpIHtcblx0ICB2YXIgbGVuZ3RoID0gY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuXHQgIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGgpXG5cdCAgLy8gVHJ1bmNhdGluZyB0aGUgZWxlbWVudHMgaXMgcHJvYmFibHkgbm90IHdoYXQgcGVvcGxlIGV4cGVjdCBmcm9tIHR5cGVkXG5cdCAgLy8gYXJyYXlzIHdpdGggQllURVNfUEVSX0VMRU1FTlQgPiAxIGJ1dCBpdCdzIGNvbXBhdGlibGUgd2l0aCB0aGUgYmVoYXZpb3Jcblx0ICAvLyBvZiB0aGUgb2xkIEJ1ZmZlciBjb25zdHJ1Y3Rvci5cblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcblx0ICB9XG5cdCAgcmV0dXJuIHRoYXRcblx0fVxuXHRcblx0ZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSkge1xuXHQgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG5cdCAgICBhcnJheS5ieXRlTGVuZ3RoXG5cdCAgICB0aGF0ID0gQnVmZmVyLl9hdWdtZW50KG5ldyBVaW50OEFycmF5KGFycmF5KSlcblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuXHQgICAgdGhhdCA9IGZyb21UeXBlZEFycmF5KHRoYXQsIG5ldyBVaW50OEFycmF5KGFycmF5KSlcblx0ICB9XG5cdCAgcmV0dXJuIHRoYXRcblx0fVxuXHRcblx0ZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcblx0ICB2YXIgbGVuZ3RoID0gY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuXHQgIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGgpXG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuXHQgICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG5cdCAgfVxuXHQgIHJldHVybiB0aGF0XG5cdH1cblx0XG5cdC8vIERlc2VyaWFsaXplIHsgdHlwZTogJ0J1ZmZlcicsIGRhdGE6IFsxLDIsMywuLi5dIH0gaW50byBhIEJ1ZmZlciBvYmplY3QuXG5cdC8vIFJldHVybnMgYSB6ZXJvLWxlbmd0aCBidWZmZXIgZm9yIGlucHV0cyB0aGF0IGRvbid0IGNvbmZvcm0gdG8gdGhlIHNwZWMuXG5cdGZ1bmN0aW9uIGZyb21Kc29uT2JqZWN0ICh0aGF0LCBvYmplY3QpIHtcblx0ICB2YXIgYXJyYXlcblx0ICB2YXIgbGVuZ3RoID0gMFxuXHRcblx0ICBpZiAob2JqZWN0LnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqZWN0LmRhdGEpKSB7XG5cdCAgICBhcnJheSA9IG9iamVjdC5kYXRhXG5cdCAgICBsZW5ndGggPSBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG5cdCAgfVxuXHQgIHRoYXQgPSBhbGxvY2F0ZSh0aGF0LCBsZW5ndGgpXG5cdFxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcblx0ICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuXHQgIH1cblx0ICByZXR1cm4gdGhhdFxuXHR9XG5cdFxuXHRpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG5cdCAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcblx0fSBlbHNlIHtcblx0ICAvLyBwcmUtc2V0IGZvciB2YWx1ZXMgdGhhdCBtYXkgZXhpc3QgaW4gdGhlIGZ1dHVyZVxuXHQgIEJ1ZmZlci5wcm90b3R5cGUubGVuZ3RoID0gdW5kZWZpbmVkXG5cdCAgQnVmZmVyLnByb3RvdHlwZS5wYXJlbnQgPSB1bmRlZmluZWRcblx0fVxuXHRcblx0ZnVuY3Rpb24gYWxsb2NhdGUgKHRoYXQsIGxlbmd0aCkge1xuXHQgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG5cdCAgICB0aGF0ID0gQnVmZmVyLl9hdWdtZW50KG5ldyBVaW50OEFycmF5KGxlbmd0aCkpXG5cdCAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuXHQgICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcblx0ICAgIHRoYXQuX2lzQnVmZmVyID0gdHJ1ZVxuXHQgIH1cblx0XG5cdCAgdmFyIGZyb21Qb29sID0gbGVuZ3RoICE9PSAwICYmIGxlbmd0aCA8PSBCdWZmZXIucG9vbFNpemUgPj4+IDFcblx0ICBpZiAoZnJvbVBvb2wpIHRoYXQucGFyZW50ID0gcm9vdFBhcmVudFxuXHRcblx0ICByZXR1cm4gdGhhdFxuXHR9XG5cdFxuXHRmdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcblx0ICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG5cdCAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG5cdCAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcblx0ICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcblx0ICB9XG5cdCAgcmV0dXJuIGxlbmd0aCB8IDBcblx0fVxuXHRcblx0ZnVuY3Rpb24gU2xvd0J1ZmZlciAoc3ViamVjdCwgZW5jb2RpbmcpIHtcblx0ICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2xvd0J1ZmZlcikpIHJldHVybiBuZXcgU2xvd0J1ZmZlcihzdWJqZWN0LCBlbmNvZGluZylcblx0XG5cdCAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoc3ViamVjdCwgZW5jb2RpbmcpXG5cdCAgZGVsZXRlIGJ1Zi5wYXJlbnRcblx0ICByZXR1cm4gYnVmXG5cdH1cblx0XG5cdEJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG5cdCAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcblx0fVxuXHRcblx0QnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG5cdCAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG5cdCAgfVxuXHRcblx0ICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblx0XG5cdCAgdmFyIHggPSBhLmxlbmd0aFxuXHQgIHZhciB5ID0gYi5sZW5ndGhcblx0XG5cdCAgdmFyIGkgPSAwXG5cdCAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cdCAgd2hpbGUgKGkgPCBsZW4pIHtcblx0ICAgIGlmIChhW2ldICE9PSBiW2ldKSBicmVha1xuXHRcblx0ICAgICsraVxuXHQgIH1cblx0XG5cdCAgaWYgKGkgIT09IGxlbikge1xuXHQgICAgeCA9IGFbaV1cblx0ICAgIHkgPSBiW2ldXG5cdCAgfVxuXHRcblx0ICBpZiAoeCA8IHkpIHJldHVybiAtMVxuXHQgIGlmICh5IDwgeCkgcmV0dXJuIDFcblx0ICByZXR1cm4gMFxuXHR9XG5cdFxuXHRCdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG5cdCAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcblx0ICAgIGNhc2UgJ2hleCc6XG5cdCAgICBjYXNlICd1dGY4Jzpcblx0ICAgIGNhc2UgJ3V0Zi04Jzpcblx0ICAgIGNhc2UgJ2FzY2lpJzpcblx0ICAgIGNhc2UgJ2JpbmFyeSc6XG5cdCAgICBjYXNlICdiYXNlNjQnOlxuXHQgICAgY2FzZSAncmF3Jzpcblx0ICAgIGNhc2UgJ3VjczInOlxuXHQgICAgY2FzZSAndWNzLTInOlxuXHQgICAgY2FzZSAndXRmMTZsZSc6XG5cdCAgICBjYXNlICd1dGYtMTZsZSc6XG5cdCAgICAgIHJldHVybiB0cnVlXG5cdCAgICBkZWZhdWx0OlxuXHQgICAgICByZXR1cm4gZmFsc2Vcblx0ICB9XG5cdH1cblx0XG5cdEJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuXHQgIGlmICghaXNBcnJheShsaXN0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbGlzdCBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMuJylcblx0XG5cdCAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG5cdCAgICByZXR1cm4gbmV3IEJ1ZmZlcigwKVxuXHQgIH1cblx0XG5cdCAgdmFyIGlcblx0ICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcblx0ICAgIGxlbmd0aCA9IDBcblx0ICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuXHQgIHZhciBwb3MgPSAwXG5cdCAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBpdGVtID0gbGlzdFtpXVxuXHQgICAgaXRlbS5jb3B5KGJ1ZiwgcG9zKVxuXHQgICAgcG9zICs9IGl0ZW0ubGVuZ3RoXG5cdCAgfVxuXHQgIHJldHVybiBidWZcblx0fVxuXHRcblx0ZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuXHQgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykgc3RyaW5nID0gJycgKyBzdHJpbmdcblx0XG5cdCAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcblx0ICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXHRcblx0ICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cblx0ICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXHQgIGZvciAoOzspIHtcblx0ICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcblx0ICAgICAgY2FzZSAnYXNjaWknOlxuXHQgICAgICBjYXNlICdiaW5hcnknOlxuXHQgICAgICAvLyBEZXByZWNhdGVkXG5cdCAgICAgIGNhc2UgJ3Jhdyc6XG5cdCAgICAgIGNhc2UgJ3Jhd3MnOlxuXHQgICAgICAgIHJldHVybiBsZW5cblx0ICAgICAgY2FzZSAndXRmOCc6XG5cdCAgICAgIGNhc2UgJ3V0Zi04Jzpcblx0ICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcblx0ICAgICAgY2FzZSAndWNzMic6XG5cdCAgICAgIGNhc2UgJ3Vjcy0yJzpcblx0ICAgICAgY2FzZSAndXRmMTZsZSc6XG5cdCAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcblx0ICAgICAgICByZXR1cm4gbGVuICogMlxuXHQgICAgICBjYXNlICdoZXgnOlxuXHQgICAgICAgIHJldHVybiBsZW4gPj4+IDFcblx0ICAgICAgY2FzZSAnYmFzZTY0Jzpcblx0ICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuXHQgICAgICBkZWZhdWx0OlxuXHQgICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG5cdCAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuXHQgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRCdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblx0XG5cdGZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcblx0ICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXHRcblx0ICBzdGFydCA9IHN0YXJ0IHwgMFxuXHQgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA9PT0gSW5maW5pdHkgPyB0aGlzLmxlbmd0aCA6IGVuZCB8IDBcblx0XG5cdCAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblx0ICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcblx0ICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG5cdCAgaWYgKGVuZCA8PSBzdGFydCkgcmV0dXJuICcnXG5cdFxuXHQgIHdoaWxlICh0cnVlKSB7XG5cdCAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG5cdCAgICAgIGNhc2UgJ2hleCc6XG5cdCAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cdFxuXHQgICAgICBjYXNlICd1dGY4Jzpcblx0ICAgICAgY2FzZSAndXRmLTgnOlxuXHQgICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblx0XG5cdCAgICAgIGNhc2UgJ2FzY2lpJzpcblx0ICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXHRcblx0ICAgICAgY2FzZSAnYmluYXJ5Jzpcblx0ICAgICAgICByZXR1cm4gYmluYXJ5U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblx0XG5cdCAgICAgIGNhc2UgJ2Jhc2U2NCc6XG5cdCAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cdFxuXHQgICAgICBjYXNlICd1Y3MyJzpcblx0ICAgICAgY2FzZSAndWNzLTInOlxuXHQgICAgICBjYXNlICd1dGYxNmxlJzpcblx0ICAgICAgY2FzZSAndXRmLTE2bGUnOlxuXHQgICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblx0XG5cdCAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG5cdCAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuXHQgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcblx0ICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG5cdCAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG5cdCAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuXHQgIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuXHQgIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcblx0ICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcblx0ICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG5cdCAgdmFyIHN0ciA9ICcnXG5cdCAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcblx0ICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG5cdCAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuXHQgICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuXHQgIH1cblx0ICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChiKSB7XG5cdCAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuXHQgIGlmICh0aGlzID09PSBiKSByZXR1cm4gMFxuXHQgIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQpIHtcblx0ICBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG5cdCAgZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcblx0ICBieXRlT2Zmc2V0ID4+PSAwXG5cdFxuXHQgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cdCAgaWYgKGJ5dGVPZmZzZXQgPj0gdGhpcy5sZW5ndGgpIHJldHVybiAtMVxuXHRcblx0ICAvLyBOZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG5cdCAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gTWF0aC5tYXgodGhpcy5sZW5ndGggKyBieXRlT2Zmc2V0LCAwKVxuXHRcblx0ICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcblx0ICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSByZXR1cm4gLTEgLy8gc3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcgYWx3YXlzIGZhaWxzXG5cdCAgICByZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mLmNhbGwodGhpcywgdmFsLCBieXRlT2Zmc2V0KVxuXHQgIH1cblx0ICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcblx0ICAgIHJldHVybiBhcnJheUluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0KVxuXHQgIH1cblx0ICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcblx0ICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwodGhpcywgdmFsLCBieXRlT2Zmc2V0KVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGFycmF5SW5kZXhPZih0aGlzLCBbIHZhbCBdLCBieXRlT2Zmc2V0KVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCkge1xuXHQgICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGJ5dGVPZmZzZXQgKyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIGlmIChhcnJbYnl0ZU9mZnNldCArIGldID09PSB2YWxbZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXhdKSB7XG5cdCAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuXHQgICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbC5sZW5ndGgpIHJldHVybiBieXRlT2Zmc2V0ICsgZm91bmRJbmRleFxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGZvdW5kSW5kZXggPSAtMVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gLTFcblx0ICB9XG5cdFxuXHQgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG5cdH1cblx0XG5cdC8vIGBnZXRgIGlzIGRlcHJlY2F0ZWRcblx0QnVmZmVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKG9mZnNldCkge1xuXHQgIGNvbnNvbGUubG9nKCcuZ2V0KCkgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHVzaW5nIGFycmF5IGluZGV4ZXMgaW5zdGVhZC4nKVxuXHQgIHJldHVybiB0aGlzLnJlYWRVSW50OChvZmZzZXQpXG5cdH1cblx0XG5cdC8vIGBzZXRgIGlzIGRlcHJlY2F0ZWRcblx0QnVmZmVyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQgKHYsIG9mZnNldCkge1xuXHQgIGNvbnNvbGUubG9nKCcuc2V0KCkgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHVzaW5nIGFycmF5IGluZGV4ZXMgaW5zdGVhZC4nKVxuXHQgIHJldHVybiB0aGlzLndyaXRlVUludDgodiwgb2Zmc2V0KVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG5cdCAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuXHQgIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG5cdCAgaWYgKCFsZW5ndGgpIHtcblx0ICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuXHQgIH0gZWxzZSB7XG5cdCAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuXHQgICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuXHQgICAgICBsZW5ndGggPSByZW1haW5pbmdcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG5cdCAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblx0ICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXHRcblx0ICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuXHQgICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuXHQgIH1cblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuXHQgICAgaWYgKGlzTmFOKHBhcnNlZCkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblx0ICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuXHQgIH1cblx0ICByZXR1cm4gaVxuXHR9XG5cdFxuXHRmdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuXHQgIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuXHQgIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBiaW5hcnlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG5cdCAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG5cdCAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuXHQgIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcblx0ICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuXHQgIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgZW5jb2RpbmcgPSAndXRmOCdcblx0ICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG5cdCAgICBvZmZzZXQgPSAwXG5cdCAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cdCAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuXHQgICAgZW5jb2RpbmcgPSBvZmZzZXRcblx0ICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG5cdCAgICBvZmZzZXQgPSAwXG5cdCAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcblx0ICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcblx0ICAgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG5cdCAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcblx0ICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBlbmNvZGluZyA9IGxlbmd0aFxuXHQgICAgICBsZW5ndGggPSB1bmRlZmluZWRcblx0ICAgIH1cblx0ICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG5cdCAgfSBlbHNlIHtcblx0ICAgIHZhciBzd2FwID0gZW5jb2Rpbmdcblx0ICAgIGVuY29kaW5nID0gb2Zmc2V0XG5cdCAgICBvZmZzZXQgPSBsZW5ndGggfCAwXG5cdCAgICBsZW5ndGggPSBzd2FwXG5cdCAgfVxuXHRcblx0ICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcblx0ICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblx0XG5cdCAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcblx0ICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdhdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG5cdCAgfVxuXHRcblx0ICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXHRcblx0ICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXHQgIGZvciAoOzspIHtcblx0ICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcblx0ICAgICAgY2FzZSAnaGV4Jzpcblx0ICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblx0XG5cdCAgICAgIGNhc2UgJ3V0ZjgnOlxuXHQgICAgICBjYXNlICd1dGYtOCc6XG5cdCAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXHRcblx0ICAgICAgY2FzZSAnYXNjaWknOlxuXHQgICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cdFxuXHQgICAgICBjYXNlICdiaW5hcnknOlxuXHQgICAgICAgIHJldHVybiBiaW5hcnlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXHRcblx0ICAgICAgY2FzZSAnYmFzZTY0Jzpcblx0ICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuXHQgICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXHRcblx0ICAgICAgY2FzZSAndWNzMic6XG5cdCAgICAgIGNhc2UgJ3Vjcy0yJzpcblx0ICAgICAgY2FzZSAndXRmMTZsZSc6XG5cdCAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcblx0ICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cdFxuXHQgICAgICBkZWZhdWx0OlxuXHQgICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuXHQgICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcblx0ICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgdHlwZTogJ0J1ZmZlcicsXG5cdCAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcblx0ICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG5cdCAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuXHQgIH0gZWxzZSB7XG5cdCAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuXHQgIH1cblx0fVxuXHRcblx0ZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcblx0ICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cdCAgdmFyIHJlcyA9IFtdXG5cdFxuXHQgIHZhciBpID0gc3RhcnRcblx0ICB3aGlsZSAoaSA8IGVuZCkge1xuXHQgICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuXHQgICAgdmFyIGNvZGVQb2ludCA9IG51bGxcblx0ICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuXHQgICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcblx0ICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG5cdCAgICAgIDogMVxuXHRcblx0ICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcblx0ICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXHRcblx0ICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG5cdCAgICAgICAgY2FzZSAxOlxuXHQgICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcblx0ICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBicmVha1xuXHQgICAgICAgIGNhc2UgMjpcblx0ICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG5cdCAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuXHQgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcblx0ICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG5cdCAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBicmVha1xuXHQgICAgICAgIGNhc2UgMzpcblx0ICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG5cdCAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG5cdCAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcblx0ICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG5cdCAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcblx0ICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGJyZWFrXG5cdCAgICAgICAgY2FzZSA0OlxuXHQgICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cblx0ICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cblx0ICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG5cdCAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuXHQgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcblx0ICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG5cdCAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG5cdCAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcblx0ICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuXHQgICAgICBjb2RlUG9pbnQgPSAweEZGRkRcblx0ICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcblx0ICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG5cdCAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG5cdCAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG5cdCAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcblx0ICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcblx0ICAgIH1cblx0XG5cdCAgICByZXMucHVzaChjb2RlUG9pbnQpXG5cdCAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2Vcblx0ICB9XG5cdFxuXHQgIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxuXHR9XG5cdFxuXHQvLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcblx0Ly8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuXHQvLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG5cdHZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXHRcblx0ZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG5cdCAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG5cdCAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuXHQgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG5cdCAgfVxuXHRcblx0ICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG5cdCAgdmFyIHJlcyA9ICcnXG5cdCAgdmFyIGkgPSAwXG5cdCAgd2hpbGUgKGkgPCBsZW4pIHtcblx0ICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuXHQgICAgICBTdHJpbmcsXG5cdCAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcblx0ICAgIClcblx0ICB9XG5cdCAgcmV0dXJuIHJlc1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcblx0ICB2YXIgcmV0ID0gJydcblx0ICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cdFxuXHQgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG5cdCAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuXHQgIH1cblx0ICByZXR1cm4gcmV0XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGJpbmFyeVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcblx0ICB2YXIgcmV0ID0gJydcblx0ICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cdFxuXHQgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG5cdCAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG5cdCAgfVxuXHQgIHJldHVybiByZXRcblx0fVxuXHRcblx0ZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuXHQgIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cdFxuXHQgIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcblx0ICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cdFxuXHQgIHZhciBvdXQgPSAnJ1xuXHQgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG5cdCAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuXHQgIH1cblx0ICByZXR1cm4gb3V0XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG5cdCAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG5cdCAgdmFyIHJlcyA9ICcnXG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuXHQgICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG5cdCAgfVxuXHQgIHJldHVybiByZXNcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG5cdCAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG5cdCAgc3RhcnQgPSB+fnN0YXJ0XG5cdCAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXHRcblx0ICBpZiAoc3RhcnQgPCAwKSB7XG5cdCAgICBzdGFydCArPSBsZW5cblx0ICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuXHQgIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcblx0ICAgIHN0YXJ0ID0gbGVuXG5cdCAgfVxuXHRcblx0ICBpZiAoZW5kIDwgMCkge1xuXHQgICAgZW5kICs9IGxlblxuXHQgICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcblx0ICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuXHQgICAgZW5kID0gbGVuXG5cdCAgfVxuXHRcblx0ICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cdFxuXHQgIHZhciBuZXdCdWZcblx0ICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICAgIG5ld0J1ZiA9IEJ1ZmZlci5fYXVnbWVudCh0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpKVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuXHQgICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgaSsrKSB7XG5cdCAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgaWYgKG5ld0J1Zi5sZW5ndGgpIG5ld0J1Zi5wYXJlbnQgPSB0aGlzLnBhcmVudCB8fCB0aGlzXG5cdFxuXHQgIHJldHVybiBuZXdCdWZcblx0fVxuXHRcblx0Lypcblx0ICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuXHQgIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG5cdCAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHZhciB2YWwgPSB0aGlzW29mZnNldF1cblx0ICB2YXIgbXVsID0gMVxuXHQgIHZhciBpID0gMFxuXHQgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG5cdCAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIHZhbFxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIHtcblx0ICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cdCAgfVxuXHRcblx0ICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG5cdCAgdmFyIG11bCA9IDFcblx0ICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcblx0ICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcblx0ICB9XG5cdFxuXHQgIHJldHVybiB2YWxcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuXHQgIHJldHVybiB0aGlzW29mZnNldF1cblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuXHQgIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG5cdCAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblx0XG5cdCAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG5cdCAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcblx0ICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG5cdCAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG5cdCAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcblx0ICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcblx0ICAgIHRoaXNbb2Zmc2V0ICsgM10pXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHZhciB2YWwgPSB0aGlzW29mZnNldF1cblx0ICB2YXIgbXVsID0gMVxuXHQgIHZhciBpID0gMFxuXHQgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG5cdCAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuXHQgIH1cblx0ICBtdWwgKj0gMHg4MFxuXHRcblx0ICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXHRcblx0ICByZXR1cm4gdmFsXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHZhciBpID0gYnl0ZUxlbmd0aFxuXHQgIHZhciBtdWwgPSAxXG5cdCAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuXHQgIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuXHQgICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuXHQgIH1cblx0ICBtdWwgKj0gMHg4MFxuXHRcblx0ICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXHRcblx0ICByZXR1cm4gdmFsXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG5cdCAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuXHQgIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuXHQgIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuXHQgIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcblx0ICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcblx0ICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG5cdCAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG5cdCAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuXHQgICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cdFxuXHQgIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG5cdCAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuXHQgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuXHQgICAgKHRoaXNbb2Zmc2V0ICsgM10pXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cdCAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXHQgIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcblx0ICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcblx0ICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG5cdCAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYnVmZmVyIG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuXHQgIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ZhbHVlIGlzIG91dCBvZiBib3VuZHMnKVxuXHQgIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignaW5kZXggb3V0IG9mIHJhbmdlJylcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSwgMClcblx0XG5cdCAgdmFyIG11bCA9IDFcblx0ICB2YXIgaSA9IDBcblx0ICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcblx0ICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuXHQgICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG5cdCAgfVxuXHRcblx0ICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG5cdCAgdmFsdWUgPSArdmFsdWVcblx0ICBvZmZzZXQgPSBvZmZzZXQgfCAwXG5cdCAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpLCAwKVxuXHRcblx0ICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG5cdCAgdmFyIG11bCA9IDFcblx0ICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG5cdCAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG5cdCAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcblx0ICB9XG5cdFxuXHQgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG5cdCAgdmFsdWUgPSArdmFsdWVcblx0ICBvZmZzZXQgPSBvZmZzZXQgfCAwXG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcblx0ICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG5cdCAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcblx0ICByZXR1cm4gb2Zmc2V0ICsgMVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcblx0ICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuXHQgIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyBpKyspIHtcblx0ICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG5cdCAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuXHQgIH1cblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG5cdCAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG5cdCAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuXHQgICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcblx0ICB9IGVsc2Uge1xuXHQgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcblx0ICB9XG5cdCAgcmV0dXJuIG9mZnNldCArIDJcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG5cdCAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG5cdCAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG5cdCAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcblx0ICB9IGVsc2Uge1xuXHQgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG5cdCAgfVxuXHQgIHJldHVybiBvZmZzZXQgKyAyXG5cdH1cblx0XG5cdGZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuXHQgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuXHQgIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyBpKyspIHtcblx0ICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcblx0ICB9XG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG5cdCAgdmFsdWUgPSArdmFsdWVcblx0ICBvZmZzZXQgPSBvZmZzZXQgfCAwXG5cdCAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcblx0ICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuXHQgICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG5cdCAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuXHQgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcblx0ICB9IGVsc2Uge1xuXHQgICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcblx0ICB9XG5cdCAgcmV0dXJuIG9mZnNldCArIDRcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuXHQgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcblx0ICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuXHQgICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcblx0ICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuXHQgIH0gZWxzZSB7XG5cdCAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcblx0ICB9XG5cdCAgcmV0dXJuIG9mZnNldCArIDRcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSB7XG5cdCAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cdFxuXHQgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG5cdCAgfVxuXHRcblx0ICB2YXIgaSA9IDBcblx0ICB2YXIgbXVsID0gMVxuXHQgIHZhciBzdWIgPSB2YWx1ZSA8IDAgPyAxIDogMFxuXHQgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuXHQgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG5cdCAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG5cdCAgfVxuXHRcblx0ICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIHtcblx0ICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblx0XG5cdCAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcblx0ICB9XG5cdFxuXHQgIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcblx0ICB2YXIgbXVsID0gMVxuXHQgIHZhciBzdWIgPSB2YWx1ZSA8IDAgPyAxIDogMFxuXHQgIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcblx0ICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcblx0ICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcblx0ICB9XG5cdFxuXHQgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuXHQgIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcblx0ICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcblx0ICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuXHQgIHJldHVybiBvZmZzZXQgKyAxXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcblx0ICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG5cdCAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuXHQgIH0gZWxzZSB7XG5cdCAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuXHQgIH1cblx0ICByZXR1cm4gb2Zmc2V0ICsgMlxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG5cdCAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG5cdCAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG5cdCAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcblx0ICB9IGVsc2Uge1xuXHQgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG5cdCAgfVxuXHQgIHJldHVybiBvZmZzZXQgKyAyXG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHZhbHVlID0gK3ZhbHVlXG5cdCAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuXHQgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuXHQgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcblx0ICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG5cdCAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcblx0ICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuXHQgIH0gZWxzZSB7XG5cdCAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuXHQgIH1cblx0ICByZXR1cm4gb2Zmc2V0ICsgNFxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICB2YWx1ZSA9ICt2YWx1ZVxuXHQgIG9mZnNldCA9IG9mZnNldCB8IDBcblx0ICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcblx0ICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcblx0ICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcblx0ICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG5cdCAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcblx0ICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG5cdCAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcblx0ICB9IGVsc2Uge1xuXHQgICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG5cdCAgfVxuXHQgIHJldHVybiBvZmZzZXQgKyA0XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG5cdCAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndmFsdWUgaXMgb3V0IG9mIGJvdW5kcycpXG5cdCAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdpbmRleCBvdXQgb2YgcmFuZ2UnKVxuXHQgIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignaW5kZXggb3V0IG9mIHJhbmdlJylcblx0fVxuXHRcblx0ZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG5cdCAgaWYgKCFub0Fzc2VydCkge1xuXHQgICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG5cdCAgfVxuXHQgIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuXHQgIHJldHVybiBvZmZzZXQgKyA0XG5cdH1cblx0XG5cdEJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcblx0ICBpZiAoIW5vQXNzZXJ0KSB7XG5cdCAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuXHQgIH1cblx0ICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcblx0ICByZXR1cm4gb2Zmc2V0ICsgOFxuXHR9XG5cdFxuXHRCdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuXHQgIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcblx0fVxuXHRcblx0QnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcblx0ICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxuXHR9XG5cdFxuXHQvLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5cdEJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcblx0ICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcblx0ICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG5cdCAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuXHQgIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuXHQgIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXHRcblx0ICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcblx0ICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcblx0ICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblx0XG5cdCAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuXHQgIGlmICh0YXJnZXRTdGFydCA8IDApIHtcblx0ICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcblx0ICB9XG5cdCAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuXHQgIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXHRcblx0ICAvLyBBcmUgd2Ugb29iP1xuXHQgIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcblx0ICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcblx0ICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG5cdCAgfVxuXHRcblx0ICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcblx0ICB2YXIgaVxuXHRcblx0ICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcblx0ICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuXHQgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG5cdCAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG5cdCAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdGFyZ2V0Ll9zZXQodGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLCB0YXJnZXRTdGFydClcblx0ICB9XG5cdFxuXHQgIHJldHVybiBsZW5cblx0fVxuXHRcblx0Ly8gZmlsbCh2YWx1ZSwgc3RhcnQ9MCwgZW5kPWJ1ZmZlci5sZW5ndGgpXG5cdEJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbHVlLCBzdGFydCwgZW5kKSB7XG5cdCAgaWYgKCF2YWx1ZSkgdmFsdWUgPSAwXG5cdCAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG5cdCAgaWYgKCFlbmQpIGVuZCA9IHRoaXMubGVuZ3RoXG5cdFxuXHQgIGlmIChlbmQgPCBzdGFydCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2VuZCA8IHN0YXJ0Jylcblx0XG5cdCAgLy8gRmlsbCAwIGJ5dGVzOyB3ZSdyZSBkb25lXG5cdCAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVyblxuXHQgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cdFxuXHQgIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzdGFydCBvdXQgb2YgYm91bmRzJylcblx0ICBpZiAoZW5kIDwgMCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2VuZCBvdXQgb2YgYm91bmRzJylcblx0XG5cdCAgdmFyIGlcblx0ICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuXHQgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuXHQgICAgICB0aGlzW2ldID0gdmFsdWVcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgdmFyIGJ5dGVzID0gdXRmOFRvQnl0ZXModmFsdWUudG9TdHJpbmcoKSlcblx0ICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcblx0ICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcblx0ICAgICAgdGhpc1tpXSA9IGJ5dGVzW2kgJSBsZW5dXG5cdCAgICB9XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gdGhpc1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBgQXJyYXlCdWZmZXJgIHdpdGggdGhlICpjb3BpZWQqIG1lbW9yeSBvZiB0aGUgYnVmZmVyIGluc3RhbmNlLlxuXHQgKiBBZGRlZCBpbiBOb2RlIDAuMTIuIE9ubHkgYXZhaWxhYmxlIGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBBcnJheUJ1ZmZlci5cblx0ICovXG5cdEJ1ZmZlci5wcm90b3R5cGUudG9BcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIgKCkge1xuXHQgIGlmICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuXHQgICAgICByZXR1cm4gKG5ldyBCdWZmZXIodGhpcykpLmJ1ZmZlclxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KHRoaXMubGVuZ3RoKVxuXHQgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnVmLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG5cdCAgICAgICAgYnVmW2ldID0gdGhpc1tpXVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBidWYuYnVmZmVyXG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0J1ZmZlci50b0FycmF5QnVmZmVyIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyJylcblx0ICB9XG5cdH1cblx0XG5cdC8vIEhFTFBFUiBGVU5DVElPTlNcblx0Ly8gPT09PT09PT09PT09PT09PVxuXHRcblx0dmFyIEJQID0gQnVmZmVyLnByb3RvdHlwZVxuXHRcblx0LyoqXG5cdCAqIEF1Z21lbnQgYSBVaW50OEFycmF5ICppbnN0YW5jZSogKG5vdCB0aGUgVWludDhBcnJheSBjbGFzcyEpIHdpdGggQnVmZmVyIG1ldGhvZHNcblx0ICovXG5cdEJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIF9hdWdtZW50IChhcnIpIHtcblx0ICBhcnIuY29uc3RydWN0b3IgPSBCdWZmZXJcblx0ICBhcnIuX2lzQnVmZmVyID0gdHJ1ZVxuXHRcblx0ICAvLyBzYXZlIHJlZmVyZW5jZSB0byBvcmlnaW5hbCBVaW50OEFycmF5IHNldCBtZXRob2QgYmVmb3JlIG92ZXJ3cml0aW5nXG5cdCAgYXJyLl9zZXQgPSBhcnIuc2V0XG5cdFxuXHQgIC8vIGRlcHJlY2F0ZWRcblx0ICBhcnIuZ2V0ID0gQlAuZ2V0XG5cdCAgYXJyLnNldCA9IEJQLnNldFxuXHRcblx0ICBhcnIud3JpdGUgPSBCUC53cml0ZVxuXHQgIGFyci50b1N0cmluZyA9IEJQLnRvU3RyaW5nXG5cdCAgYXJyLnRvTG9jYWxlU3RyaW5nID0gQlAudG9TdHJpbmdcblx0ICBhcnIudG9KU09OID0gQlAudG9KU09OXG5cdCAgYXJyLmVxdWFscyA9IEJQLmVxdWFsc1xuXHQgIGFyci5jb21wYXJlID0gQlAuY29tcGFyZVxuXHQgIGFyci5pbmRleE9mID0gQlAuaW5kZXhPZlxuXHQgIGFyci5jb3B5ID0gQlAuY29weVxuXHQgIGFyci5zbGljZSA9IEJQLnNsaWNlXG5cdCAgYXJyLnJlYWRVSW50TEUgPSBCUC5yZWFkVUludExFXG5cdCAgYXJyLnJlYWRVSW50QkUgPSBCUC5yZWFkVUludEJFXG5cdCAgYXJyLnJlYWRVSW50OCA9IEJQLnJlYWRVSW50OFxuXHQgIGFyci5yZWFkVUludDE2TEUgPSBCUC5yZWFkVUludDE2TEVcblx0ICBhcnIucmVhZFVJbnQxNkJFID0gQlAucmVhZFVJbnQxNkJFXG5cdCAgYXJyLnJlYWRVSW50MzJMRSA9IEJQLnJlYWRVSW50MzJMRVxuXHQgIGFyci5yZWFkVUludDMyQkUgPSBCUC5yZWFkVUludDMyQkVcblx0ICBhcnIucmVhZEludExFID0gQlAucmVhZEludExFXG5cdCAgYXJyLnJlYWRJbnRCRSA9IEJQLnJlYWRJbnRCRVxuXHQgIGFyci5yZWFkSW50OCA9IEJQLnJlYWRJbnQ4XG5cdCAgYXJyLnJlYWRJbnQxNkxFID0gQlAucmVhZEludDE2TEVcblx0ICBhcnIucmVhZEludDE2QkUgPSBCUC5yZWFkSW50MTZCRVxuXHQgIGFyci5yZWFkSW50MzJMRSA9IEJQLnJlYWRJbnQzMkxFXG5cdCAgYXJyLnJlYWRJbnQzMkJFID0gQlAucmVhZEludDMyQkVcblx0ICBhcnIucmVhZEZsb2F0TEUgPSBCUC5yZWFkRmxvYXRMRVxuXHQgIGFyci5yZWFkRmxvYXRCRSA9IEJQLnJlYWRGbG9hdEJFXG5cdCAgYXJyLnJlYWREb3VibGVMRSA9IEJQLnJlYWREb3VibGVMRVxuXHQgIGFyci5yZWFkRG91YmxlQkUgPSBCUC5yZWFkRG91YmxlQkVcblx0ICBhcnIud3JpdGVVSW50OCA9IEJQLndyaXRlVUludDhcblx0ICBhcnIud3JpdGVVSW50TEUgPSBCUC53cml0ZVVJbnRMRVxuXHQgIGFyci53cml0ZVVJbnRCRSA9IEJQLndyaXRlVUludEJFXG5cdCAgYXJyLndyaXRlVUludDE2TEUgPSBCUC53cml0ZVVJbnQxNkxFXG5cdCAgYXJyLndyaXRlVUludDE2QkUgPSBCUC53cml0ZVVJbnQxNkJFXG5cdCAgYXJyLndyaXRlVUludDMyTEUgPSBCUC53cml0ZVVJbnQzMkxFXG5cdCAgYXJyLndyaXRlVUludDMyQkUgPSBCUC53cml0ZVVJbnQzMkJFXG5cdCAgYXJyLndyaXRlSW50TEUgPSBCUC53cml0ZUludExFXG5cdCAgYXJyLndyaXRlSW50QkUgPSBCUC53cml0ZUludEJFXG5cdCAgYXJyLndyaXRlSW50OCA9IEJQLndyaXRlSW50OFxuXHQgIGFyci53cml0ZUludDE2TEUgPSBCUC53cml0ZUludDE2TEVcblx0ICBhcnIud3JpdGVJbnQxNkJFID0gQlAud3JpdGVJbnQxNkJFXG5cdCAgYXJyLndyaXRlSW50MzJMRSA9IEJQLndyaXRlSW50MzJMRVxuXHQgIGFyci53cml0ZUludDMyQkUgPSBCUC53cml0ZUludDMyQkVcblx0ICBhcnIud3JpdGVGbG9hdExFID0gQlAud3JpdGVGbG9hdExFXG5cdCAgYXJyLndyaXRlRmxvYXRCRSA9IEJQLndyaXRlRmxvYXRCRVxuXHQgIGFyci53cml0ZURvdWJsZUxFID0gQlAud3JpdGVEb3VibGVMRVxuXHQgIGFyci53cml0ZURvdWJsZUJFID0gQlAud3JpdGVEb3VibGVCRVxuXHQgIGFyci5maWxsID0gQlAuZmlsbFxuXHQgIGFyci5pbnNwZWN0ID0gQlAuaW5zcGVjdFxuXHQgIGFyci50b0FycmF5QnVmZmVyID0gQlAudG9BcnJheUJ1ZmZlclxuXHRcblx0ICByZXR1cm4gYXJyXG5cdH1cblx0XG5cdHZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXHRcblx0ZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuXHQgIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuXHQgIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcblx0ICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG5cdCAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcblx0ICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3Rcblx0ICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcblx0ICAgIHN0ciA9IHN0ciArICc9J1xuXHQgIH1cblx0ICByZXR1cm4gc3RyXG5cdH1cblx0XG5cdGZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuXHQgIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcblx0ICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxuXHR9XG5cdFxuXHRmdW5jdGlvbiB0b0hleCAobikge1xuXHQgIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuXHQgIHJldHVybiBuLnRvU3RyaW5nKDE2KVxuXHR9XG5cdFxuXHRmdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuXHQgIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcblx0ICB2YXIgY29kZVBvaW50XG5cdCAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcblx0ICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblx0ICB2YXIgYnl0ZXMgPSBbXVxuXHRcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXHRcblx0ICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcblx0ICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG5cdCAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG5cdCAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuXHQgICAgICAgIC8vIG5vIGxlYWQgeWV0XG5cdCAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuXHQgICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuXHQgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG5cdCAgICAgICAgICBjb250aW51ZVxuXHQgICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuXHQgICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuXHQgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG5cdCAgICAgICAgICBjb250aW51ZVxuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLy8gdmFsaWQgbGVhZFxuXHQgICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblx0XG5cdCAgICAgICAgY29udGludWVcblx0ICAgICAgfVxuXHRcblx0ICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuXHQgICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG5cdCAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG5cdCAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXHQgICAgICAgIGNvbnRpbnVlXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG5cdCAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcblx0ICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuXHQgICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG5cdCAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuXHQgICAgfVxuXHRcblx0ICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cdFxuXHQgICAgLy8gZW5jb2RlIHV0Zjhcblx0ICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG5cdCAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuXHQgICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcblx0ICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcblx0ICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cdCAgICAgIGJ5dGVzLnB1c2goXG5cdCAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG5cdCAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcblx0ICAgICAgKVxuXHQgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG5cdCAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuXHQgICAgICBieXRlcy5wdXNoKFxuXHQgICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuXHQgICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcblx0ICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuXHQgICAgICApXG5cdCAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG5cdCAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuXHQgICAgICBieXRlcy5wdXNoKFxuXHQgICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcblx0ICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG5cdCAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuXHQgICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG5cdCAgICAgIClcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50Jylcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIHJldHVybiBieXRlc1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuXHQgIHZhciBieXRlQXJyYXkgPSBbXVxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cblx0ICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcblx0ICB9XG5cdCAgcmV0dXJuIGJ5dGVBcnJheVxuXHR9XG5cdFxuXHRmdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuXHQgIHZhciBjLCBoaSwgbG9cblx0ICB2YXIgYnl0ZUFycmF5ID0gW11cblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuXHQgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cdFxuXHQgICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG5cdCAgICBoaSA9IGMgPj4gOFxuXHQgICAgbG8gPSBjICUgMjU2XG5cdCAgICBieXRlQXJyYXkucHVzaChsbylcblx0ICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuXHQgIH1cblx0XG5cdCAgcmV0dXJuIGJ5dGVBcnJheVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcblx0ICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG5cdH1cblx0XG5cdGZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcblx0ICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuXHQgIH1cblx0ICByZXR1cm4gaVxuXHR9XG5cdFxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxMykuQnVmZmVyLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDE0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgbG9va3VwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuXHRcblx0OyhmdW5jdGlvbiAoZXhwb3J0cykge1xuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdCAgdmFyIEFyciA9ICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpXG5cdCAgICA/IFVpbnQ4QXJyYXlcblx0ICAgIDogQXJyYXlcblx0XG5cdFx0dmFyIFBMVVMgICA9ICcrJy5jaGFyQ29kZUF0KDApXG5cdFx0dmFyIFNMQVNIICA9ICcvJy5jaGFyQ29kZUF0KDApXG5cdFx0dmFyIE5VTUJFUiA9ICcwJy5jaGFyQ29kZUF0KDApXG5cdFx0dmFyIExPV0VSICA9ICdhJy5jaGFyQ29kZUF0KDApXG5cdFx0dmFyIFVQUEVSICA9ICdBJy5jaGFyQ29kZUF0KDApXG5cdFx0dmFyIFBMVVNfVVJMX1NBRkUgPSAnLScuY2hhckNvZGVBdCgwKVxuXHRcdHZhciBTTEFTSF9VUkxfU0FGRSA9ICdfJy5jaGFyQ29kZUF0KDApXG5cdFxuXHRcdGZ1bmN0aW9uIGRlY29kZSAoZWx0KSB7XG5cdFx0XHR2YXIgY29kZSA9IGVsdC5jaGFyQ29kZUF0KDApXG5cdFx0XHRpZiAoY29kZSA9PT0gUExVUyB8fFxuXHRcdFx0ICAgIGNvZGUgPT09IFBMVVNfVVJMX1NBRkUpXG5cdFx0XHRcdHJldHVybiA2MiAvLyAnKydcblx0XHRcdGlmIChjb2RlID09PSBTTEFTSCB8fFxuXHRcdFx0ICAgIGNvZGUgPT09IFNMQVNIX1VSTF9TQUZFKVxuXHRcdFx0XHRyZXR1cm4gNjMgLy8gJy8nXG5cdFx0XHRpZiAoY29kZSA8IE5VTUJFUilcblx0XHRcdFx0cmV0dXJuIC0xIC8vbm8gbWF0Y2hcblx0XHRcdGlmIChjb2RlIDwgTlVNQkVSICsgMTApXG5cdFx0XHRcdHJldHVybiBjb2RlIC0gTlVNQkVSICsgMjYgKyAyNlxuXHRcdFx0aWYgKGNvZGUgPCBVUFBFUiArIDI2KVxuXHRcdFx0XHRyZXR1cm4gY29kZSAtIFVQUEVSXG5cdFx0XHRpZiAoY29kZSA8IExPV0VSICsgMjYpXG5cdFx0XHRcdHJldHVybiBjb2RlIC0gTE9XRVIgKyAyNlxuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gYjY0VG9CeXRlQXJyYXkgKGI2NCkge1xuXHRcdFx0dmFyIGksIGosIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcblx0XG5cdFx0XHRpZiAoYjY0Lmxlbmd0aCAlIDQgPiAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcblx0XHRcdC8vIGlmIHRoZXJlIGFyZSB0d28gcGxhY2Vob2xkZXJzLCB0aGFuIHRoZSB0d28gY2hhcmFjdGVycyBiZWZvcmUgaXRcblx0XHRcdC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuXHRcdFx0Ly8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG5cdFx0XHQvLyB0aGlzIGlzIGp1c3QgYSBjaGVhcCBoYWNrIHRvIG5vdCBkbyBpbmRleE9mIHR3aWNlXG5cdFx0XHR2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXHRcdFx0cGxhY2VIb2xkZXJzID0gJz0nID09PSBiNjQuY2hhckF0KGxlbiAtIDIpID8gMiA6ICc9JyA9PT0gYjY0LmNoYXJBdChsZW4gLSAxKSA/IDEgOiAwXG5cdFxuXHRcdFx0Ly8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5cdFx0XHRhcnIgPSBuZXcgQXJyKGI2NC5sZW5ndGggKiAzIC8gNCAtIHBsYWNlSG9sZGVycylcblx0XG5cdFx0XHQvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG5cdFx0XHRsID0gcGxhY2VIb2xkZXJzID4gMCA/IGI2NC5sZW5ndGggLSA0IDogYjY0Lmxlbmd0aFxuXHRcblx0XHRcdHZhciBMID0gMFxuXHRcblx0XHRcdGZ1bmN0aW9uIHB1c2ggKHYpIHtcblx0XHRcdFx0YXJyW0wrK10gPSB2XG5cdFx0XHR9XG5cdFxuXHRcdFx0Zm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuXHRcdFx0XHR0bXAgPSAoZGVjb2RlKGI2NC5jaGFyQXQoaSkpIDw8IDE4KSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpIDw8IDEyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMikpIDw8IDYpIHwgZGVjb2RlKGI2NC5jaGFyQXQoaSArIDMpKVxuXHRcdFx0XHRwdXNoKCh0bXAgJiAweEZGMDAwMCkgPj4gMTYpXG5cdFx0XHRcdHB1c2goKHRtcCAmIDB4RkYwMCkgPj4gOClcblx0XHRcdFx0cHVzaCh0bXAgJiAweEZGKVxuXHRcdFx0fVxuXHRcblx0XHRcdGlmIChwbGFjZUhvbGRlcnMgPT09IDIpIHtcblx0XHRcdFx0dG1wID0gKGRlY29kZShiNjQuY2hhckF0KGkpKSA8PCAyKSB8IChkZWNvZGUoYjY0LmNoYXJBdChpICsgMSkpID4+IDQpXG5cdFx0XHRcdHB1c2godG1wICYgMHhGRilcblx0XHRcdH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG5cdFx0XHRcdHRtcCA9IChkZWNvZGUoYjY0LmNoYXJBdChpKSkgPDwgMTApIHwgKGRlY29kZShiNjQuY2hhckF0KGkgKyAxKSkgPDwgNCkgfCAoZGVjb2RlKGI2NC5jaGFyQXQoaSArIDIpKSA+PiAyKVxuXHRcdFx0XHRwdXNoKCh0bXAgPj4gOCkgJiAweEZGKVxuXHRcdFx0XHRwdXNoKHRtcCAmIDB4RkYpXG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIGFyclxuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gdWludDhUb0Jhc2U2NCAodWludDgpIHtcblx0XHRcdHZhciBpLFxuXHRcdFx0XHRleHRyYUJ5dGVzID0gdWludDgubGVuZ3RoICUgMywgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcblx0XHRcdFx0b3V0cHV0ID0gXCJcIixcblx0XHRcdFx0dGVtcCwgbGVuZ3RoXG5cdFxuXHRcdFx0ZnVuY3Rpb24gZW5jb2RlIChudW0pIHtcblx0XHRcdFx0cmV0dXJuIGxvb2t1cC5jaGFyQXQobnVtKVxuXHRcdFx0fVxuXHRcblx0XHRcdGZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG5cdFx0XHRcdHJldHVybiBlbmNvZGUobnVtID4+IDE4ICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDEyICYgMHgzRikgKyBlbmNvZGUobnVtID4+IDYgJiAweDNGKSArIGVuY29kZShudW0gJiAweDNGKVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcblx0XHRcdGZvciAoaSA9IDAsIGxlbmd0aCA9IHVpbnQ4Lmxlbmd0aCAtIGV4dHJhQnl0ZXM7IGkgPCBsZW5ndGg7IGkgKz0gMykge1xuXHRcdFx0XHR0ZW1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuXHRcdFx0XHRvdXRwdXQgKz0gdHJpcGxldFRvQmFzZTY0KHRlbXApXG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuXHRcdFx0c3dpdGNoIChleHRyYUJ5dGVzKSB7XG5cdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHR0ZW1wID0gdWludDhbdWludDgubGVuZ3RoIC0gMV1cblx0XHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKHRlbXAgPj4gMilcblx0XHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDQpICYgMHgzRilcblx0XHRcdFx0XHRvdXRwdXQgKz0gJz09J1xuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHR0ZW1wID0gKHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDJdIDw8IDgpICsgKHVpbnQ4W3VpbnQ4Lmxlbmd0aCAtIDFdKVxuXHRcdFx0XHRcdG91dHB1dCArPSBlbmNvZGUodGVtcCA+PiAxMClcblx0XHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wID4+IDQpICYgMHgzRilcblx0XHRcdFx0XHRvdXRwdXQgKz0gZW5jb2RlKCh0ZW1wIDw8IDIpICYgMHgzRilcblx0XHRcdFx0XHRvdXRwdXQgKz0gJz0nXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gb3V0cHV0XG5cdFx0fVxuXHRcblx0XHRleHBvcnRzLnRvQnl0ZUFycmF5ID0gYjY0VG9CeXRlQXJyYXlcblx0XHRleHBvcnRzLmZyb21CeXRlQXJyYXkgPSB1aW50OFRvQmFzZTY0XG5cdH0oIGZhbHNlID8gKHRoaXMuYmFzZTY0anMgPSB7fSkgOiBleHBvcnRzKSlcblxuXG4vKioqLyB9LFxuLyogMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdGV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG5cdCAgdmFyIGUsIG1cblx0ICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuXHQgIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG5cdCAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG5cdCAgdmFyIG5CaXRzID0gLTdcblx0ICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG5cdCAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG5cdCAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblx0XG5cdCAgaSArPSBkXG5cdFxuXHQgIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG5cdCAgcyA+Pj0gKC1uQml0cylcblx0ICBuQml0cyArPSBlTGVuXG5cdCAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblx0XG5cdCAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcblx0ICBlID4+PSAoLW5CaXRzKVxuXHQgIG5CaXRzICs9IG1MZW5cblx0ICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXHRcblx0ICBpZiAoZSA9PT0gMCkge1xuXHQgICAgZSA9IDEgLSBlQmlhc1xuXHQgIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuXHQgICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG5cdCAgfSBlbHNlIHtcblx0ICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcblx0ICAgIGUgPSBlIC0gZUJpYXNcblx0ICB9XG5cdCAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcblx0fVxuXHRcblx0ZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuXHQgIHZhciBlLCBtLCBjXG5cdCAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcblx0ICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuXHQgIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuXHQgIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcblx0ICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG5cdCAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG5cdCAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblx0XG5cdCAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblx0XG5cdCAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcblx0ICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuXHQgICAgZSA9IGVNYXhcblx0ICB9IGVsc2Uge1xuXHQgICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG5cdCAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG5cdCAgICAgIGUtLVxuXHQgICAgICBjICo9IDJcblx0ICAgIH1cblx0ICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuXHQgICAgICB2YWx1ZSArPSBydCAvIGNcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuXHQgICAgfVxuXHQgICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG5cdCAgICAgIGUrK1xuXHQgICAgICBjIC89IDJcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcblx0ICAgICAgbSA9IDBcblx0ICAgICAgZSA9IGVNYXhcblx0ICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcblx0ICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG5cdCAgICAgIGUgPSBlICsgZUJpYXNcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuXHQgICAgICBlID0gMFxuXHQgICAgfVxuXHQgIH1cblx0XG5cdCAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblx0XG5cdCAgZSA9IChlIDw8IG1MZW4pIHwgbVxuXHQgIGVMZW4gKz0gbUxlblxuXHQgIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblx0XG5cdCAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG5cdH1cblxuXG4vKioqLyB9LFxuLyogMTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcblx0ICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDE3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXG5cbi8qKiovIH0sXG4vKiAxOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHR2YXIgX1VybFV0aWxpdHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblx0XG5cdHZhciBfVXJsVXRpbGl0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9VcmxVdGlsaXR5KTtcblx0XG5cdHZhciBfU2lnbmluU3RhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0XG5cdHZhciBfU2lnbmluU3RhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2lnbmluU3RhdGUpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9IC8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Ly8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblx0XG5cdHZhciBTaWduaW5SZXF1ZXN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gU2lnbmluUmVxdWVzdChfcmVmKSB7XG5cdCAgICAgICAgdmFyXG5cdCAgICAgICAgLy8gbWFuZGF0b3J5XG5cdCAgICAgICAgdXJsID0gX3JlZi51cmw7XG5cdCAgICAgICAgdmFyIGNsaWVudF9pZCA9IF9yZWYuY2xpZW50X2lkO1xuXHQgICAgICAgIHZhciByZWRpcmVjdF91cmkgPSBfcmVmLnJlZGlyZWN0X3VyaTtcblx0ICAgICAgICB2YXIgcmVzcG9uc2VfdHlwZSA9IF9yZWYucmVzcG9uc2VfdHlwZTtcblx0ICAgICAgICB2YXIgc2NvcGUgPSBfcmVmLnNjb3BlO1xuXHQgICAgICAgIHZhciBhdXRob3JpdHkgPSBfcmVmLmF1dGhvcml0eTtcblx0ICAgICAgICB2YXJcblx0ICAgICAgICAvLyBvcHRpb25hbFxuXHQgICAgICAgIGRhdGEgPSBfcmVmLmRhdGE7XG5cdCAgICAgICAgdmFyIHByb21wdCA9IF9yZWYucHJvbXB0O1xuXHQgICAgICAgIHZhciBkaXNwbGF5ID0gX3JlZi5kaXNwbGF5O1xuXHQgICAgICAgIHZhciBtYXhfYWdlID0gX3JlZi5tYXhfYWdlO1xuXHQgICAgICAgIHZhciB1aV9sb2NhbGVzID0gX3JlZi51aV9sb2NhbGVzO1xuXHQgICAgICAgIHZhciBpZF90b2tlbl9oaW50ID0gX3JlZi5pZF90b2tlbl9oaW50O1xuXHQgICAgICAgIHZhciBsb2dpbl9oaW50ID0gX3JlZi5sb2dpbl9oaW50O1xuXHQgICAgICAgIHZhciBhY3JfdmFsdWVzID0gX3JlZi5hY3JfdmFsdWVzO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2lnbmluUmVxdWVzdCk7XG5cdFxuXHQgICAgICAgIGlmICghdXJsKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJObyB1cmwgcGFzc2VkIHRvIFNpZ25pblJlcXVlc3RcIik7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVybFwiKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFjbGllbnRfaWQpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIk5vIGNsaWVudF9pZCBwYXNzZWQgdG8gU2lnbmluUmVxdWVzdFwiKTtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2xpZW50X2lkXCIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIXJlZGlyZWN0X3VyaSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gcmVkaXJlY3RfdXJpIHBhc3NlZCB0byBTaWduaW5SZXF1ZXN0XCIpO1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWRpcmVjdF91cmlcIik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghcmVzcG9uc2VfdHlwZSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gcmVzcG9uc2VfdHlwZSBwYXNzZWQgdG8gU2lnbmluUmVxdWVzdFwiKTtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVzcG9uc2VfdHlwZVwiKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFzY29wZSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gc2NvcGUgcGFzc2VkIHRvIFNpZ25pblJlcXVlc3RcIik7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNjb3BlXCIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIWF1dGhvcml0eSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gYXV0aG9yaXR5IHBhc3NlZCB0byBTaWduaW5SZXF1ZXN0XCIpO1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhdXRob3JpdHlcIik7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB2YXIgb2lkYyA9IFNpZ25pblJlcXVlc3QuaXNPaWRjKHJlc3BvbnNlX3R5cGUpO1xuXHQgICAgICAgIHRoaXMuc3RhdGUgPSBuZXcgX1NpZ25pblN0YXRlMi5kZWZhdWx0KHsgbm9uY2U6IG9pZGMsIGRhdGE6IGRhdGEsIGNsaWVudF9pZDogY2xpZW50X2lkLCBhdXRob3JpdHk6IGF1dGhvcml0eSB9KTtcblx0XG5cdCAgICAgICAgdXJsID0gX1VybFV0aWxpdHkyLmRlZmF1bHQuYWRkUXVlcnlQYXJhbSh1cmwsIFwiY2xpZW50X2lkXCIsIGNsaWVudF9pZCk7XG5cdCAgICAgICAgdXJsID0gX1VybFV0aWxpdHkyLmRlZmF1bHQuYWRkUXVlcnlQYXJhbSh1cmwsIFwicmVkaXJlY3RfdXJpXCIsIHJlZGlyZWN0X3VyaSk7XG5cdCAgICAgICAgdXJsID0gX1VybFV0aWxpdHkyLmRlZmF1bHQuYWRkUXVlcnlQYXJhbSh1cmwsIFwicmVzcG9uc2VfdHlwZVwiLCByZXNwb25zZV90eXBlKTtcblx0ICAgICAgICB1cmwgPSBfVXJsVXRpbGl0eTIuZGVmYXVsdC5hZGRRdWVyeVBhcmFtKHVybCwgXCJzY29wZVwiLCBzY29wZSk7XG5cdFxuXHQgICAgICAgIHVybCA9IF9VcmxVdGlsaXR5Mi5kZWZhdWx0LmFkZFF1ZXJ5UGFyYW0odXJsLCBcInN0YXRlXCIsIHRoaXMuc3RhdGUuaWQpO1xuXHQgICAgICAgIGlmIChvaWRjKSB7XG5cdCAgICAgICAgICAgIHVybCA9IF9VcmxVdGlsaXR5Mi5kZWZhdWx0LmFkZFF1ZXJ5UGFyYW0odXJsLCBcIm5vbmNlXCIsIHRoaXMuc3RhdGUubm9uY2UpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdmFyIG9wdGlvbmFsID0geyBwcm9tcHQ6IHByb21wdCwgZGlzcGxheTogZGlzcGxheSwgbWF4X2FnZTogbWF4X2FnZSwgdWlfbG9jYWxlczogdWlfbG9jYWxlcywgaWRfdG9rZW5faGludDogaWRfdG9rZW5faGludCwgbG9naW5faGludDogbG9naW5faGludCwgYWNyX3ZhbHVlczogYWNyX3ZhbHVlcyB9O1xuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25hbCkge1xuXHQgICAgICAgICAgICBpZiAob3B0aW9uYWxba2V5XSkge1xuXHQgICAgICAgICAgICAgICAgdXJsID0gX1VybFV0aWxpdHkyLmRlZmF1bHQuYWRkUXVlcnlQYXJhbSh1cmwsIGtleSwgb3B0aW9uYWxba2V5XSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHRoaXMudXJsID0gdXJsO1xuXHQgICAgfVxuXHRcblx0ICAgIFNpZ25pblJlcXVlc3QuaXNPaWRjID0gZnVuY3Rpb24gaXNPaWRjKHJlc3BvbnNlX3R5cGUpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gcmVzcG9uc2VfdHlwZS5zcGxpdCgvXFxzKy9nKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGl0ZW0gPT09IFwiaWRfdG9rZW5cIjtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZXR1cm4gISFyZXN1bHRbMF07XG5cdCAgICB9O1xuXHRcblx0ICAgIFNpZ25pblJlcXVlc3QuaXNPQXV0aCA9IGZ1bmN0aW9uIGlzT0F1dGgocmVzcG9uc2VfdHlwZSkge1xuXHQgICAgICAgIHZhciByZXN1bHQgPSByZXNwb25zZV90eXBlLnNwbGl0KC9cXHMrL2cpLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICByZXR1cm4gaXRlbSA9PT0gXCJ0b2tlblwiO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHJldHVybiAhIXJlc3VsdFswXTtcblx0ICAgIH07XG5cdFxuXHQgICAgcmV0dXJuIFNpZ25pblJlcXVlc3Q7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFNpZ25pblJlcXVlc3Q7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX0xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2cpO1xuXHRcblx0dmFyIF9HbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0dmFyIF9HbG9iYWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR2xvYmFsKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfSAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgVXJsVXRpbGl0eSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFVybFV0aWxpdHkoKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVybFV0aWxpdHkpO1xuXHQgICAgfVxuXHRcblx0ICAgIFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSA9IGZ1bmN0aW9uIGFkZFF1ZXJ5UGFyYW0odXJsLCBuYW1lLCB2YWx1ZSkge1xuXHQgICAgICAgIGlmICh1cmwuaW5kZXhPZignPycpIDwgMCkge1xuXHQgICAgICAgICAgICB1cmwgKz0gXCI/XCI7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodXJsW3VybC5sZW5ndGggLSAxXSAhPT0gXCI/XCIpIHtcblx0ICAgICAgICAgICAgdXJsICs9IFwiJlwiO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdXJsICs9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKTtcblx0ICAgICAgICB1cmwgKz0gXCI9XCI7XG5cdCAgICAgICAgdXJsICs9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG5cdFxuXHQgICAgICAgIHJldHVybiB1cmw7XG5cdCAgICB9O1xuXHRcblx0ICAgIFVybFV0aWxpdHkucGFyc2VVcmxGcmFnbWVudCA9IGZ1bmN0aW9uIHBhcnNlVXJsRnJhZ21lbnQodmFsdWUpIHtcblx0ICAgICAgICB2YXIgZGVsaW1pdGVyID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gXCIjXCIgOiBhcmd1bWVudHNbMV07XG5cdCAgICAgICAgdmFyIGdsb2JhbCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IF9HbG9iYWwyLmRlZmF1bHQgOiBhcmd1bWVudHNbMl07XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlVybFV0aWxpdHkucGFyc2VVcmxGcmFnbWVudFwiKTtcblx0XG5cdCAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgdmFsdWUgPSBnbG9iYWwubG9jYXRpb24uaHJlZjtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBpZHggPSB2YWx1ZS5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuXHQgICAgICAgIGlmIChpZHggPj0gMCkge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cihpZHggKyAxKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBwYXJhbXMgPSB7fSxcblx0ICAgICAgICAgICAgcmVnZXggPSAvKFteJj1dKyk9KFteJl0qKS9nLFxuXHQgICAgICAgICAgICBtO1xuXHRcblx0ICAgICAgICB2YXIgY291bnRlciA9IDA7XG5cdCAgICAgICAgd2hpbGUgKG0gPSByZWdleC5leGVjKHZhbHVlKSkge1xuXHQgICAgICAgICAgICBwYXJhbXNbZGVjb2RlVVJJQ29tcG9uZW50KG1bMV0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChtWzJdKTtcblx0ICAgICAgICAgICAgaWYgKGNvdW50ZXIrKyA+IDUwKSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwicmVzcG9uc2UgZXhjZWVkZWQgZXhwZWN0ZWQgbnVtYmVyIG9mIHBhcmFtZXRlcnNcIiwgdmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgICAgICBlcnJvcjogXCJSZXNwb25zZSBleGNlZWRlZCBleHBlY3RlZCBudW1iZXIgb2YgcGFyYW1ldGVyc1wiXG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBmb3IgKHZhciBwcm9wIGluIHBhcmFtcykge1xuXHQgICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIHt9O1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gVXJsVXRpbGl0eTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVXJsVXRpbGl0eTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX0xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2cpO1xuXHRcblx0dmFyIF9TdGF0ZTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0XG5cdHZhciBfU3RhdGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3RhdGUyKTtcblx0XG5cdHZhciBfcmFuZG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XG5cdFxuXHR2YXIgX3JhbmRvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yYW5kb20pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgU2lnbmluU3RhdGUgPSBmdW5jdGlvbiAoX1N0YXRlKSB7XG5cdCAgICBfaW5oZXJpdHMoU2lnbmluU3RhdGUsIF9TdGF0ZSk7XG5cdFxuXHQgICAgZnVuY3Rpb24gU2lnbmluU3RhdGUoKSB7XG5cdCAgICAgICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblx0XG5cdCAgICAgICAgdmFyIG5vbmNlID0gX3JlZi5ub25jZTtcblx0ICAgICAgICB2YXIgYXV0aG9yaXR5ID0gX3JlZi5hdXRob3JpdHk7XG5cdCAgICAgICAgdmFyIGNsaWVudF9pZCA9IF9yZWYuY2xpZW50X2lkO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2lnbmluU3RhdGUpO1xuXHRcblx0ICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfU3RhdGUuY2FsbCh0aGlzLCBhcmd1bWVudHNbMF0pKTtcblx0XG5cdCAgICAgICAgaWYgKG5vbmNlID09PSB0cnVlKSB7XG5cdCAgICAgICAgICAgIF90aGlzLl9ub25jZSA9ICgwLCBfcmFuZG9tMi5kZWZhdWx0KSgpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAobm9uY2UpIHtcblx0ICAgICAgICAgICAgX3RoaXMuX25vbmNlID0gbm9uY2U7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBfdGhpcy5fYXV0aG9yaXR5ID0gYXV0aG9yaXR5O1xuXHQgICAgICAgIF90aGlzLl9jbGllbnRfaWQgPSBjbGllbnRfaWQ7XG5cdCAgICAgICAgcmV0dXJuIF90aGlzO1xuXHQgICAgfVxuXHRcblx0ICAgIFNpZ25pblN0YXRlLnByb3RvdHlwZS50b1N0b3JhZ2VTdHJpbmcgPSBmdW5jdGlvbiB0b1N0b3JhZ2VTdHJpbmcoKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiU2lnbmluU3RhdGUudG9TdG9yYWdlU3RyaW5nXCIpO1xuXHQgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG5cdCAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuXHQgICAgICAgICAgICBkYXRhOiB0aGlzLmRhdGEsXG5cdCAgICAgICAgICAgIGNyZWF0ZWQ6IHRoaXMuY3JlYXRlZCxcblx0ICAgICAgICAgICAgbm9uY2U6IHRoaXMubm9uY2UsXG5cdCAgICAgICAgICAgIGF1dGhvcml0eTogdGhpcy5hdXRob3JpdHksXG5cdCAgICAgICAgICAgIGNsaWVudF9pZDogdGhpcy5jbGllbnRfaWRcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcgPSBmdW5jdGlvbiBmcm9tU3RvcmFnZVN0cmluZyhzdG9yYWdlU3RyaW5nKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmdcIik7XG5cdCAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHN0b3JhZ2VTdHJpbmcpO1xuXHQgICAgICAgIHJldHVybiBuZXcgU2lnbmluU3RhdGUoZGF0YSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhTaWduaW5TdGF0ZSwgW3tcblx0ICAgICAgICBrZXk6ICdub25jZScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub25jZTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnYXV0aG9yaXR5Jyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F1dGhvcml0eTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY2xpZW50X2lkJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudF9pZDtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIFNpZ25pblN0YXRlO1xuXHR9KF9TdGF0ZTMuZGVmYXVsdCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBTaWduaW5TdGF0ZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7IC8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Ly8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHR2YXIgX3JhbmRvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpO1xuXHRcblx0dmFyIF9yYW5kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmFuZG9tKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIFN0YXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gU3RhdGUoKSB7XG5cdCAgICAgICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblx0XG5cdCAgICAgICAgdmFyIGlkID0gX3JlZi5pZDtcblx0ICAgICAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YTtcblx0ICAgICAgICB2YXIgY3JlYXRlZCA9IF9yZWYuY3JlYXRlZDtcblx0XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRlKTtcblx0XG5cdCAgICAgICAgdGhpcy5faWQgPSBpZCB8fCAoMCwgX3JhbmRvbTIuZGVmYXVsdCkoKTtcblx0ICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcblx0XG5cdCAgICAgICAgaWYgKHR5cGVvZiBjcmVhdGVkID09PSAnbnVtYmVyJyAmJiBjcmVhdGVkID4gMCkge1xuXHQgICAgICAgICAgICB0aGlzLl9jcmVhdGVkID0gY3JlYXRlZDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLl9jcmVhdGVkID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBTdGF0ZS5wcm90b3R5cGUudG9TdG9yYWdlU3RyaW5nID0gZnVuY3Rpb24gdG9TdG9yYWdlU3RyaW5nKCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlN0YXRlLnRvU3RvcmFnZVN0cmluZ1wiKTtcblx0ICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuXHQgICAgICAgICAgICBpZDogdGhpcy5pZCxcblx0ICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxuXHQgICAgICAgICAgICBjcmVhdGVkOiB0aGlzLmNyZWF0ZWRcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcgPSBmdW5jdGlvbiBmcm9tU3RvcmFnZVN0cmluZyhzdG9yYWdlU3RyaW5nKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmdcIik7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBTdGF0ZShKU09OLnBhcnNlKHN0b3JhZ2VTdHJpbmcpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgU3RhdGUuY2xlYXJTdGFsZVN0YXRlID0gZnVuY3Rpb24gY2xlYXJTdGFsZVN0YXRlKHN0b3JhZ2UsIGFnZSkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlN0YXRlLmNsZWFyU3RhbGVTdGF0ZVwiKTtcblx0XG5cdCAgICAgICAgdmFyIGN1dG9mZiA9IERhdGUubm93KCkgLyAxMDAwIC0gYWdlO1xuXHRcblx0ICAgICAgICByZXR1cm4gc3RvcmFnZS5nZXRBbGxLZXlzKCkudGhlbihmdW5jdGlvbiAoa2V5cykge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJnb3Qga2V5c1wiLCBrZXlzKTtcblx0XG5cdCAgICAgICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xuXHQgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG5cdCAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuXHQgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cdFxuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9zdGVwLnZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHAgPSBzdG9yYWdlLmdldChrZXkpLnRoZW4oZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW92ZSA9IGZhbHNlO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcoaXRlbSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcImdvdCBpdGVtIGZyb20ga2V5OiBcIiwga2V5LCBzdGF0ZS5jcmVhdGVkKTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmNyZWF0ZWQgPD0gY3V0b2ZmKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJFcnJvciBwYXJzaW5nIHN0YXRlIGZvciBrZXlcIiwga2V5LCBlLm1lc3NhZ2UpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJubyBpdGVtIGluIHN0b3JhZ2UgZm9yIGtleTogXCIsIGtleSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJyZW1vdmVkIGl0ZW0gZm9yIGtleTogXCIsIGtleSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmFnZS5yZW1vdmUoa2V5KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHRcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChwKTtcblx0ICAgICAgICAgICAgICAgIH07XG5cdFxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0ga2V5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcDtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgX2xvb3AoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcblx0ICAgICAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwid2FpdGluZyBvbiBwcm9taXNlIGNvdW50OlwiLCBwcm9taXNlcy5sZW5ndGgpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoU3RhdGUsIFt7XG5cdCAgICAgICAga2V5OiAnaWQnLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2RhdGEnLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY3JlYXRlZCcsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVkO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gU3RhdGU7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFN0YXRlO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDIyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSByYW5kb207XG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvLyBBZGFsSlMgdjEuMC44XG5cdC8vIEBwcmVzZXJ2ZSBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBPcGVuIFRlY2hub2xvZ2llcywgSW5jLlxuXHQvLyBBbGwgUmlnaHRzIFJlc2VydmVkXG5cdC8vIEFwYWNoZSBMaWNlbnNlIDIuMFxuXHQvL1xuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuXHQvLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG5cdC8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXHQvL1xuXHQvLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblx0Ly9cblx0Ly8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuXHQvLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG5cdC8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuXHQvLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5cdC8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gTk9USUNFOiB0aGUgY29kZSBpbiB0aGlzIGZpbGUgb3JpZ2luYWxseSBkZXZlbG9wZWQgYnkgTWljcm9zb2Z0XG5cdC8vIG9yaWdpbmFsIHNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL0F6dXJlQUQvYXp1cmUtYWN0aXZlZGlyZWN0b3J5LWxpYnJhcnktZm9yLWpzL2Jsb2IvbWFzdGVyL2xpYi9hZGFsLmpzI0wxMDI5XG5cdFxuXHRmdW5jdGlvbiByYW5kb20oKSB7XG5cdCAgICB2YXIgZ3VpZEhvbGRlciA9ICd4eHh4eHh4eHh4eHg0eHh4eXh4eHh4eHh4eHh4eHh4eCc7XG5cdCAgICB2YXIgaGV4ID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuXHQgICAgdmFyIHIgPSAwO1xuXHQgICAgdmFyIGd1aWRSZXNwb25zZSA9IFwiXCI7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGd1aWRIb2xkZXIubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICBpZiAoZ3VpZEhvbGRlcltpXSAhPT0gJy0nICYmIGd1aWRIb2xkZXJbaV0gIT09ICc0Jykge1xuXHQgICAgICAgICAgICAvLyBlYWNoIHggYW5kIHkgbmVlZHMgdG8gYmUgcmFuZG9tXG5cdCAgICAgICAgICAgIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKGd1aWRIb2xkZXJbaV0gPT09ICd4Jykge1xuXHQgICAgICAgICAgICBndWlkUmVzcG9uc2UgKz0gaGV4W3JdO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoZ3VpZEhvbGRlcltpXSA9PT0gJ3knKSB7XG5cdCAgICAgICAgICAgIC8vIGNsb2NrLXNlcS1hbmQtcmVzZXJ2ZWQgZmlyc3QgaGV4IGlzIGZpbHRlcmVkIGFuZCByZW1haW5pbmcgaGV4IHZhbHVlcyBhcmUgcmFuZG9tXG5cdCAgICAgICAgICAgIHIgJj0gMHgzOyAvLyBiaXQgYW5kIHdpdGggMDAxMSB0byBzZXQgcG9zIDIgdG8gemVybyA/MD8/XG5cdCAgICAgICAgICAgIHIgfD0gMHg4OyAvLyBzZXQgcG9zIDMgdG8gMSBhcyAxPz8/XG5cdCAgICAgICAgICAgIGd1aWRSZXNwb25zZSArPSBoZXhbcl07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgZ3VpZFJlc3BvbnNlICs9IGd1aWRIb2xkZXJbaV07XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGd1aWRSZXNwb25zZTtcblx0fVxuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDIzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOyAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgX1VybFV0aWxpdHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblx0XG5cdHZhciBfVXJsVXRpbGl0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9VcmxVdGlsaXR5KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIE9pZGNTY29wZSA9IFwib3BlbmlkXCI7XG5cdFxuXHR2YXIgU2lnbmluUmVzcG9uc2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBTaWduaW5SZXNwb25zZSh1cmwpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2lnbmluUmVzcG9uc2UpO1xuXHRcblx0ICAgICAgICB2YXIgdmFsdWVzID0gX1VybFV0aWxpdHkyLmRlZmF1bHQucGFyc2VVcmxGcmFnbWVudCh1cmwsIFwiI1wiKTtcblx0XG5cdCAgICAgICAgdGhpcy5lcnJvciA9IHZhbHVlcy5lcnJvcjtcblx0ICAgICAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gdmFsdWVzLmVycm9yX2Rlc2NyaXB0aW9uO1xuXHQgICAgICAgIHRoaXMuZXJyb3JfdXJpID0gdmFsdWVzLmVycm9yX3VyaTtcblx0XG5cdCAgICAgICAgdGhpcy5zdGF0ZSA9IHZhbHVlcy5zdGF0ZTtcblx0ICAgICAgICB0aGlzLmlkX3Rva2VuID0gdmFsdWVzLmlkX3Rva2VuO1xuXHQgICAgICAgIHRoaXMuc2Vzc2lvbl9zdGF0ZSA9IHZhbHVlcy5zZXNzaW9uX3N0YXRlO1xuXHQgICAgICAgIHRoaXMuYWNjZXNzX3Rva2VuID0gdmFsdWVzLmFjY2Vzc190b2tlbjtcblx0ICAgICAgICB0aGlzLnRva2VuX3R5cGUgPSB2YWx1ZXMudG9rZW5fdHlwZTtcblx0ICAgICAgICB0aGlzLnNjb3BlID0gdmFsdWVzLnNjb3BlO1xuXHQgICAgICAgIHRoaXMucHJvZmlsZSA9IHVuZGVmaW5lZDsgLy8gd2lsbCBiZSBzZXQgZnJvbSBSZXNwb25zZVZhbGlkYXRvclxuXHRcblx0ICAgICAgICB2YXIgZXhwaXJlc19pbiA9IHBhcnNlSW50KHZhbHVlcy5leHBpcmVzX2luKTtcblx0ICAgICAgICBpZiAodHlwZW9mIGV4cGlyZXNfaW4gPT09ICdudW1iZXInICYmIGV4cGlyZXNfaW4gPiAwKSB7XG5cdCAgICAgICAgICAgIHZhciBub3cgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XG5cdCAgICAgICAgICAgIHRoaXMuZXhwaXJlc19hdCA9IG5vdyArIGV4cGlyZXNfaW47XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhTaWduaW5SZXNwb25zZSwgW3tcblx0ICAgICAgICBrZXk6IFwiZXhwaXJlc19pblwiLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5leHBpcmVzX2F0KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbm93ID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwaXJlc19hdCAtIG5vdztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwiZXhwaXJlZFwiLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICB2YXIgZXhwaXJlc19pbiA9IHRoaXMuZXhwaXJlc19pbjtcblx0ICAgICAgICAgICAgaWYgKGV4cGlyZXNfaW4gIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGlyZXNfaW4gPD0gMDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwic2NvcGVzXCIsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAodGhpcy5zY29wZSB8fCBcIlwiKS5zcGxpdChcIiBcIik7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJpc09wZW5JZENvbm5lY3RcIixcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGVzLmluZGV4T2YoT2lkY1Njb3BlKSA+PSAwO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gU2lnbmluUmVzcG9uc2U7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFNpZ25pblJlc3BvbnNlO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDI0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9Mb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9Mb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9nKTtcblx0XG5cdHZhciBfVXJsVXRpbGl0eSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xuXHRcblx0dmFyIF9VcmxVdGlsaXR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1VybFV0aWxpdHkpO1xuXHRcblx0dmFyIF9TdGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHRcblx0dmFyIF9TdGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdGF0ZSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH0gLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIFNpZ25vdXRSZXF1ZXN0ID0gZnVuY3Rpb24gU2lnbm91dFJlcXVlc3QoX3JlZikge1xuXHQgICAgdmFyIHVybCA9IF9yZWYudXJsO1xuXHQgICAgdmFyIGlkX3Rva2VuX2hpbnQgPSBfcmVmLmlkX3Rva2VuX2hpbnQ7XG5cdCAgICB2YXIgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gX3JlZi5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XG5cdCAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YTtcblx0XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2lnbm91dFJlcXVlc3QpO1xuXHRcblx0ICAgIGlmICghdXJsKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIk5vIHVybCBwYXNzZWQgdG8gU2lnbm91dFJlcXVlc3RcIik7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChpZF90b2tlbl9oaW50KSB7XG5cdCAgICAgICAgdXJsID0gX1VybFV0aWxpdHkyLmRlZmF1bHQuYWRkUXVlcnlQYXJhbSh1cmwsIFwiaWRfdG9rZW5faGludFwiLCBpZF90b2tlbl9oaW50KTtcblx0XG5cdCAgICAgICAgaWYgKHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSkge1xuXHQgICAgICAgICAgICB1cmwgPSBfVXJsVXRpbGl0eTIuZGVmYXVsdC5hZGRRdWVyeVBhcmFtKHVybCwgXCJwb3N0X2xvZ291dF9yZWRpcmVjdF91cmlcIiwgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpKTtcblx0XG5cdCAgICAgICAgICAgIGlmIChkYXRhKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gbmV3IF9TdGF0ZTIuZGVmYXVsdCh7IGRhdGE6IGRhdGEgfSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgdXJsID0gX1VybFV0aWxpdHkyLmRlZmF1bHQuYWRkUXVlcnlQYXJhbSh1cmwsIFwic3RhdGVcIiwgdGhpcy5zdGF0ZS5pZCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgdGhpcy51cmwgPSB1cmw7XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBTaWdub3V0UmVxdWVzdDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9VcmxVdGlsaXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdFxuXHR2YXIgX1VybFV0aWxpdHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXJsVXRpbGl0eSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH0gLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIFNpZ25vdXRSZXNwb25zZSA9IGZ1bmN0aW9uIFNpZ25vdXRSZXNwb25zZSh1cmwpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaWdub3V0UmVzcG9uc2UpO1xuXHRcblx0ICAgIHZhciB2YWx1ZXMgPSBfVXJsVXRpbGl0eTIuZGVmYXVsdC5wYXJzZVVybEZyYWdtZW50KHVybCwgXCI/XCIpO1xuXHRcblx0ICAgIHRoaXMuZXJyb3IgPSB2YWx1ZXMuZXJyb3I7XG5cdCAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gdmFsdWVzLmVycm9yX2Rlc2NyaXB0aW9uO1xuXHQgICAgdGhpcy5lcnJvcl91cmkgPSB2YWx1ZXMuZXJyb3JfdXJpO1xuXHRcblx0ICAgIHRoaXMuc3RhdGUgPSB2YWx1ZXMuc3RhdGU7XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBTaWdub3V0UmVzcG9uc2U7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7IC8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Ly8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdHZhciBJbk1lbW9yeVdlYlN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBJbk1lbW9yeVdlYlN0b3JhZ2UoKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluTWVtb3J5V2ViU3RvcmFnZSk7XG5cdFxuXHQgICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblx0ICAgIH1cblx0XG5cdCAgICBJbk1lbW9yeVdlYlN0b3JhZ2UucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbiBnZXRJdGVtKGtleSkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIkluTWVtb3J5V2ViU3RvcmFnZS5nZXRJdGVtXCIsIGtleSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFba2V5XTtcblx0ICAgIH07XG5cdFxuXHQgICAgSW5NZW1vcnlXZWJTdG9yYWdlLnByb3RvdHlwZS5zZXRJdGVtID0gZnVuY3Rpb24gc2V0SXRlbShrZXksIHZhbHVlKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiSW5NZW1vcnlXZWJTdG9yYWdlLnNldEl0ZW1cIiwga2V5KTtcblx0ICAgICAgICB0aGlzLl9kYXRhW2tleV0gPSB2YWx1ZTtcblx0ICAgIH07XG5cdFxuXHQgICAgSW5NZW1vcnlXZWJTdG9yYWdlLnByb3RvdHlwZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24gcmVtb3ZlSXRlbShrZXkpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJJbk1lbW9yeVdlYlN0b3JhZ2UucmVtb3ZlSXRlbVwiLCBrZXkpO1xuXHQgICAgICAgIGRlbGV0ZSB0aGlzLl9kYXRhW2tleV07XG5cdCAgICB9O1xuXHRcblx0ICAgIEluTWVtb3J5V2ViU3RvcmFnZS5wcm90b3R5cGUua2V5ID0gZnVuY3Rpb24ga2V5KGluZGV4KSB7XG5cdCAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX2RhdGEpW2luZGV4XTtcblx0ICAgIH07XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEluTWVtb3J5V2ViU3RvcmFnZSwgW3tcblx0ICAgICAgICBrZXk6IFwibGVuZ3RoXCIsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9kYXRhKS5sZW5ndGg7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBJbk1lbW9yeVdlYlN0b3JhZ2U7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IEluTWVtb3J5V2ViU3RvcmFnZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX0xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2cpO1xuXHRcblx0dmFyIF9PaWRjQ2xpZW50MiA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX09pZGNDbGllbnQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2lkY0NsaWVudDIpO1xuXHRcblx0dmFyIF9Vc2VyTWFuYWdlclNldHRpbmdzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7XG5cdFxuXHR2YXIgX1VzZXJNYW5hZ2VyU2V0dGluZ3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXNlck1hbmFnZXJTZXR0aW5ncyk7XG5cdFxuXHR2YXIgX1VzZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcblx0XG5cdHZhciBfVXNlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Vc2VyKTtcblx0XG5cdHZhciBfVXNlck1hbmFnZXJFdmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblx0XG5cdHZhciBfVXNlck1hbmFnZXJFdmVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXNlck1hbmFnZXJFdmVudHMpO1xuXHRcblx0dmFyIF9TaWxlbnRSZW5ld1NlcnZpY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcblx0XG5cdHZhciBfU2lsZW50UmVuZXdTZXJ2aWNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NpbGVudFJlbmV3U2VydmljZSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Ly8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblx0XG5cdHZhciBVc2VyTWFuYWdlciA9IGZ1bmN0aW9uIChfT2lkY0NsaWVudCkge1xuXHQgICAgX2luaGVyaXRzKFVzZXJNYW5hZ2VyLCBfT2lkY0NsaWVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gVXNlck1hbmFnZXIoKSB7XG5cdCAgICAgICAgdmFyIHNldHRpbmdzID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG5cdFxuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVc2VyTWFuYWdlcik7XG5cdFxuXHQgICAgICAgIGlmICghKHNldHRpbmdzIGluc3RhbmNlb2YgX1VzZXJNYW5hZ2VyU2V0dGluZ3MyLmRlZmF1bHQpKSB7XG5cdCAgICAgICAgICAgIHNldHRpbmdzID0gbmV3IF9Vc2VyTWFuYWdlclNldHRpbmdzMi5kZWZhdWx0KHNldHRpbmdzKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9PaWRjQ2xpZW50LmNhbGwodGhpcywgc2V0dGluZ3MpKTtcblx0XG5cdCAgICAgICAgX3RoaXMuX2V2ZW50cyA9IG5ldyBfVXNlck1hbmFnZXJFdmVudHMyLmRlZmF1bHQoc2V0dGluZ3MpO1xuXHRcblx0ICAgICAgICBpZiAoX3RoaXMuc2V0dGluZ3MuYXV0b21hdGljU2lsZW50UmVuZXcpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiYXV0b21hdGljU2lsZW50UmVuZXcgaXMgY29uZmlndXJlZCwgc2V0dGluZyB1cCBzaWxlbnQgcmVuZXdcIik7XG5cdCAgICAgICAgICAgIF90aGlzLl9zaWxlbnRSZW5ld1NlcnZpY2UgPSBuZXcgX1NpbGVudFJlbmV3U2VydmljZTIuZGVmYXVsdChfdGhpcyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBfdGhpcztcblx0ICAgIH1cblx0XG5cdCAgICBVc2VyTWFuYWdlci5wcm90b3R5cGUuZ2V0VXNlciA9IGZ1bmN0aW9uIGdldFVzZXIoKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiVXNlck1hbmFnZXIuZ2V0VXNlclwiKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuXHQgICAgICAgICAgICBpZiAodXNlcikge1xuXHQgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwidXNlciBsb2FkZWRcIik7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdXNlcjtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcInVzZXIgbm90IGZvdW5kIGluIHN0b3JhZ2VcIik7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlci5wcm90b3R5cGUucmVtb3ZlVXNlciA9IGZ1bmN0aW9uIHJlbW92ZVVzZXIoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlVzZXJNYW5hZ2VyLnJlbW92ZVVzZXJcIik7XG5cdFxuXHQgICAgICAgIHJldHVybiB0aGlzLl9zdG9yZVVzZXIobnVsbCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcInVzZXIgcmVtb3ZlZCBmcm9tIHN0b3JhZ2VcIik7XG5cdFxuXHQgICAgICAgICAgICBfdGhpczIuX2V2ZW50cy51bmxvYWQoKTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgVXNlck1hbmFnZXIucHJvdG90eXBlLnNpZ25pblBvcHVwID0gZnVuY3Rpb24gc2lnbmluUG9wdXAoKSB7XG5cdCAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUG9wdXBcIik7XG5cdFxuXHQgICAgICAgIHZhciB1cmwgPSBhcmdzLnJlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnBvcHVwX3JlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnJlZGlyZWN0X3VyaTtcblx0ICAgICAgICBpZiAoIXVybCkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpO1xuXHQgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGFyZ3MucmVkaXJlY3RfdXJpID0gdXJsO1xuXHQgICAgICAgIGFyZ3MuZGlzcGxheSA9IFwicG9wdXBcIjtcblx0XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pbihhcmdzLCB0aGlzLl9wb3B1cE5hdmlnYXRvciwge1xuXHQgICAgICAgICAgICBzdGFydFVybDogdXJsLFxuXHQgICAgICAgICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzOiBhcmdzLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd0ZlYXR1cmVzLFxuXHQgICAgICAgICAgICBwb3B1cFdpbmRvd1RhcmdldDogYXJncy5wb3B1cFdpbmRvd1RhcmdldCB8fCB0aGlzLnNldHRpbmdzLnBvcHVwV2luZG93VGFyZ2V0XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFVzZXJNYW5hZ2VyLnByb3RvdHlwZS5zaWduaW5Qb3B1cENhbGxiYWNrID0gZnVuY3Rpb24gc2lnbmluUG9wdXBDYWxsYmFjayh1cmwpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cENhbGxiYWNrXCIpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5DYWxsYmFjayh1cmwsIHRoaXMuX3BvcHVwTmF2aWdhdG9yKTtcblx0ICAgIH07XG5cdFxuXHQgICAgVXNlck1hbmFnZXIucHJvdG90eXBlLnNpZ25pblNpbGVudCA9IGZ1bmN0aW9uIHNpZ25pblNpbGVudCgpIHtcblx0ICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXHRcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnRcIik7XG5cdFxuXHQgICAgICAgIHZhciB1cmwgPSBhcmdzLnJlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnNpbGVudF9yZWRpcmVjdF91cmk7XG5cdCAgICAgICAgaWYgKCF1cmwpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihcIk5vIHNpbGVudF9yZWRpcmVjdF91cmkgY29uZmlndXJlZFwiKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHNpbGVudF9yZWRpcmVjdF91cmkgY29uZmlndXJlZFwiKSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBhcmdzLnJlZGlyZWN0X3VyaSA9IHVybDtcblx0ICAgICAgICBhcmdzLnByb21wdCA9IFwibm9uZVwiO1xuXHRcblx0ICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluKGFyZ3MsIHRoaXMuX2lmcmFtZU5hdmlnYXRvcik7XG5cdCAgICB9O1xuXHRcblx0ICAgIFVzZXJNYW5hZ2VyLnByb3RvdHlwZS5zaWduaW5TaWxlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIHNpZ25pblNpbGVudENhbGxiYWNrKHVybCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblNpbGVudENhbGxiYWNrXCIpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5DYWxsYmFjayh1cmwsIHRoaXMuX2lmcmFtZU5hdmlnYXRvcik7XG5cdCAgICB9O1xuXHRcblx0ICAgIFVzZXJNYW5hZ2VyLnByb3RvdHlwZS5fc2lnbmluID0gZnVuY3Rpb24gX3NpZ25pbihhcmdzLCBuYXZpZ2F0b3IpIHtcblx0ICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblx0XG5cdCAgICAgICAgdmFyIG5hdmlnYXRvclBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzJdO1xuXHRcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJfc2lnbmluXCIpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5TdGFydChhcmdzLCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcykudGhlbihmdW5jdGlvbiAobmF2UmVzcG9uc2UpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5fc2lnbmluRW5kKG5hdlJlc3BvbnNlLnVybCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFVzZXJNYW5hZ2VyLnByb3RvdHlwZS5fc2lnbmluQ2FsbGJhY2sgPSBmdW5jdGlvbiBfc2lnbmluQ2FsbGJhY2sodXJsLCBuYXZpZ2F0b3IpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJfc2lnbmluQ2FsbGJhY2tcIik7XG5cdCAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5jYWxsYmFjayh1cmwpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlci5wcm90b3R5cGUuX3NpZ25vdXQgPSBmdW5jdGlvbiBfc2lnbm91dChhcmdzLCBuYXZpZ2F0b3IpIHtcblx0ICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblx0XG5cdCAgICAgICAgdmFyIG5hdmlnYXRvclBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzJdO1xuXHRcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJfc2lnbm91dFwiKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fc2lnbm91dFN0YXJ0KGFyZ3MsIG5hdmlnYXRvciwgbmF2aWdhdG9yUGFyYW1zKS50aGVuKGZ1bmN0aW9uIChuYXZSZXNwb25zZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gX3RoaXM0Ll9zaWdub3V0RW5kKG5hdlJlc3BvbnNlLnVybCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFVzZXJNYW5hZ2VyLnByb3RvdHlwZS5fc2lnbm91dENhbGxiYWNrID0gZnVuY3Rpb24gX3NpZ25vdXRDYWxsYmFjayh1cmwsIG5hdmlnYXRvcikge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIl9zaWdub3V0Q2FsbGJhY2tcIik7XG5cdCAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5jYWxsYmFjayh1cmwpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlci5wcm90b3R5cGUuc2lnbmluUmVkaXJlY3QgPSBmdW5jdGlvbiBzaWduaW5SZWRpcmVjdChhcmdzKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3RcIik7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pblN0YXJ0KGFyZ3MsIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yKTtcblx0ICAgIH07XG5cdFxuXHQgICAgVXNlck1hbmFnZXIucHJvdG90eXBlLnNpZ25pblJlZGlyZWN0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzaWduaW5SZWRpcmVjdENhbGxiYWNrKHVybCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblJlZGlyZWN0Q2FsbGJhY2tcIik7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pbkVuZCh1cmwgfHwgdGhpcy5fcmVkaXJlY3ROYXZpZ2F0b3IudXJsKTtcblx0ICAgIH07XG5cdFxuXHQgICAgVXNlck1hbmFnZXIucHJvdG90eXBlLnNpZ25vdXRSZWRpcmVjdCA9IGZ1bmN0aW9uIHNpZ25vdXRSZWRpcmVjdChhcmdzKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFJlZGlyZWN0XCIpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0U3RhcnQoYXJncywgdGhpcy5fcmVkaXJlY3ROYXZpZ2F0b3IpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlci5wcm90b3R5cGUuc2lnbm91dFJlZGlyZWN0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzaWdub3V0UmVkaXJlY3RDYWxsYmFjayh1cmwpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJVc2VyTWFuYWdlci5zaWdub3V0UmVkaXJlY3RDYWxsYmFja1wiKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5fc2lnbm91dEVuZCh1cmwgfHwgdGhpcy5fcmVkaXJlY3ROYXZpZ2F0b3IudXJsKTtcblx0ICAgIH07XG5cdFxuXHQgICAgVXNlck1hbmFnZXIucHJvdG90eXBlLl9zaWduaW5TdGFydCA9IGZ1bmN0aW9uIF9zaWduaW5TdGFydChhcmdzLCBuYXZpZ2F0b3IpIHtcblx0ICAgICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblx0XG5cdCAgICAgICAgdmFyIG5hdmlnYXRvclBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzJdO1xuXHRcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJfc2lnbmluU3RhcnRcIik7XG5cdFxuXHQgICAgICAgIHJldHVybiBuYXZpZ2F0b3IucHJlcGFyZShuYXZpZ2F0b3JQYXJhbXMpLnRoZW4oZnVuY3Rpb24gKGhhbmRsZSkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJnb3QgbmF2aWdhdG9yIHdpbmRvdyBoYW5kbGVcIik7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gX3RoaXM1LmNyZWF0ZVNpZ25pblJlcXVlc3QoYXJncykudGhlbihmdW5jdGlvbiAoc2lnbmluUmVxdWVzdCkge1xuXHQgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiZ290IHNpZ25pbiByZXF1ZXN0XCIpO1xuXHRcblx0ICAgICAgICAgICAgICAgIG5hdmlnYXRvclBhcmFtcy51cmwgPSBzaWduaW5SZXF1ZXN0LnVybDtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUubmF2aWdhdGUobmF2aWdhdG9yUGFyYW1zKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFVzZXJNYW5hZ2VyLnByb3RvdHlwZS5fc2lnbmluRW5kID0gZnVuY3Rpb24gX3NpZ25pbkVuZCh1cmwpIHtcblx0ICAgICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiX3NpZ25pbkVuZFwiKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1NpZ25pblJlc3BvbnNlKHVybCkudGhlbihmdW5jdGlvbiAoc2lnbmluUmVzcG9uc2UpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiZ290IHNpZ25pbiByZXNwb25zZVwiKTtcblx0XG5cdCAgICAgICAgICAgIHZhciB1c2VyID0gbmV3IF9Vc2VyMi5kZWZhdWx0KHNpZ25pblJlc3BvbnNlKTtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfdGhpczYuX3N0b3JlVXNlcih1c2VyKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcInVzZXIgc3RvcmVkXCIpO1xuXHRcblx0ICAgICAgICAgICAgICAgIF90aGlzNi5fZXZlbnRzLmxvYWQodXNlcik7XG5cdFxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXI7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlci5wcm90b3R5cGUuX3NpZ25vdXRTdGFydCA9IGZ1bmN0aW9uIF9zaWdub3V0U3RhcnQoKSB7XG5cdCAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblx0XG5cdCAgICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cdFxuXHQgICAgICAgIHZhciBuYXZpZ2F0b3IgPSBhcmd1bWVudHNbMV07XG5cdCAgICAgICAgdmFyIG5hdmlnYXRvclBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzJdO1xuXHRcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJfc2lnbm91dFN0YXJ0XCIpO1xuXHRcblx0ICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnByZXBhcmUobmF2aWdhdG9yUGFyYW1zKS50aGVuKGZ1bmN0aW9uIChoYW5kbGUpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiZ290IG5hdmlnYXRvciB3aW5kb3cgaGFuZGxlXCIpO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIF90aGlzNy5nZXRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuXHQgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwibG9hZGVkIGN1cnJlbnQgdXNlciBmcm9tIHN0b3JhZ2VcIik7XG5cdFxuXHQgICAgICAgICAgICAgICAgdmFyIGlkX3Rva2VuID0gYXJncy5pZF90b2tlbl9oaW50IHx8IHVzZXIgJiYgdXNlci5pZF90b2tlbjtcblx0ICAgICAgICAgICAgICAgIGlmIChpZF90b2tlbikge1xuXHQgICAgICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlNldHRpbmcgaWRfdG9rZW4gaW50byBzaWdub3V0IHJlcXVlc3RcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgYXJncy5pZF90b2tlbl9oaW50ID0gaWRfdG9rZW47XG5cdCAgICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNy5yZW1vdmVVc2VyKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwidXNlciByZW1vdmVkLCBjcmVhdGluZyBzaWdub3V0IHJlcXVlc3RcIik7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczcuY3JlYXRlU2lnbm91dFJlcXVlc3QoYXJncykudGhlbihmdW5jdGlvbiAoc2lnbm91dFJlcXVlc3QpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiZ290IHNpZ25vdXQgcmVxdWVzdFwiKTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvclBhcmFtcy51cmwgPSBzaWdub3V0UmVxdWVzdC51cmw7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUubmF2aWdhdGUobmF2aWdhdG9yUGFyYW1zKTtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgVXNlck1hbmFnZXIucHJvdG90eXBlLl9zaWdub3V0RW5kID0gZnVuY3Rpb24gX3NpZ25vdXRFbmQodXJsKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiX3NpZ25vdXRFbmRcIik7XG5cdFxuXHQgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NTaWdub3V0UmVzcG9uc2UodXJsKS50aGVuKGZ1bmN0aW9uIChzaWdub3V0UmVzcG9uc2UpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiZ290IHNpZ25vdXQgcmVzcG9uc2VcIik7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gc2lnbm91dFJlc3BvbnNlO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlci5wcm90b3R5cGUuX2xvYWRVc2VyID0gZnVuY3Rpb24gX2xvYWRVc2VyKCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIl9sb2FkVXNlclwiKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZS5nZXQodGhpcy5fdXNlclN0b3JlS2V5KS50aGVuKGZ1bmN0aW9uIChzdG9yYWdlU3RyaW5nKSB7XG5cdCAgICAgICAgICAgIGlmIChzdG9yYWdlU3RyaW5nKSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJ1c2VyIHN0b3JhZ2VTdHJpbmcgbG9hZGVkXCIpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIF9Vc2VyMi5kZWZhdWx0LmZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJubyB1c2VyIHN0b3JhZ2VTdHJpbmdcIik7XG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlci5wcm90b3R5cGUuX3N0b3JlVXNlciA9IGZ1bmN0aW9uIF9zdG9yZVVzZXIodXNlcikge1xuXHQgICAgICAgIGlmICh1c2VyKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIl9zdG9yZVVzZXIgc3RvcmluZyB1c2VyXCIpO1xuXHRcblx0ICAgICAgICAgICAgdmFyIHN0b3JhZ2VTdHJpbmcgPSB1c2VyLnRvU3RvcmFnZVN0cmluZygpO1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlclN0b3JlLnNldCh0aGlzLl91c2VyU3RvcmVLZXksIHN0b3JhZ2VTdHJpbmcpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIl9zdG9yZVVzZXIgcmVtb3ZpbmcgdXNlciBzdG9yYWdlXCIpO1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlclN0b3JlLnJlbW92ZSh0aGlzLl91c2VyU3RvcmVLZXkpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKFVzZXJNYW5hZ2VyLCBbe1xuXHQgICAgICAgIGtleTogJ19yZWRpcmVjdE5hdmlnYXRvcicsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnJlZGlyZWN0TmF2aWdhdG9yO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdfcG9wdXBOYXZpZ2F0b3InLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5wb3B1cE5hdmlnYXRvcjtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnX2lmcmFtZU5hdmlnYXRvcicsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmlmcmFtZU5hdmlnYXRvcjtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnX3VzZXJTdG9yZScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnVzZXJTdG9yZTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnZXZlbnRzJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cztcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnX3VzZXJTdG9yZUtleScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAndXNlcjonICsgdGhpcy5zZXR0aW5ncy5hdXRob3JpdHkgKyAnOicgKyB0aGlzLnNldHRpbmdzLmNsaWVudF9pZDtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIFVzZXJNYW5hZ2VyO1xuXHR9KF9PaWRjQ2xpZW50My5kZWZhdWx0KTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFVzZXJNYW5hZ2VyO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDI4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHR2YXIgX09pZGNDbGllbnRTZXR0aW5nczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9PaWRjQ2xpZW50U2V0dGluZ3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2lkY0NsaWVudFNldHRpbmdzMik7XG5cdFxuXHR2YXIgX1JlZGlyZWN0TmF2aWdhdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7XG5cdFxuXHR2YXIgX1JlZGlyZWN0TmF2aWdhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlZGlyZWN0TmF2aWdhdG9yKTtcblx0XG5cdHZhciBfUG9wdXBOYXZpZ2F0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKTtcblx0XG5cdHZhciBfUG9wdXBOYXZpZ2F0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9wdXBOYXZpZ2F0b3IpO1xuXHRcblx0dmFyIF9JRnJhbWVOYXZpZ2F0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcblx0XG5cdHZhciBfSUZyYW1lTmF2aWdhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0lGcmFtZU5hdmlnYXRvcik7XG5cdFxuXHR2YXIgX1dlYlN0b3JhZ2VTdGF0ZVN0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdHZhciBfV2ViU3RvcmFnZVN0YXRlU3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfV2ViU3RvcmFnZVN0YXRlU3RvcmUpO1xuXHRcblx0dmFyIF9HbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0dmFyIF9HbG9iYWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR2xvYmFsKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IDYwO1xuXHRcblx0dmFyIFVzZXJNYW5hZ2VyU2V0dGluZ3MgPSBmdW5jdGlvbiAoX09pZGNDbGllbnRTZXR0aW5ncykge1xuXHQgICAgX2luaGVyaXRzKFVzZXJNYW5hZ2VyU2V0dGluZ3MsIF9PaWRjQ2xpZW50U2V0dGluZ3MpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIFVzZXJNYW5hZ2VyU2V0dGluZ3MoKSB7XG5cdCAgICAgICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblx0XG5cdCAgICAgICAgdmFyIHBvcHVwX3JlZGlyZWN0X3VyaSA9IF9yZWYucG9wdXBfcmVkaXJlY3RfdXJpO1xuXHQgICAgICAgIHZhciBwb3B1cFdpbmRvd0ZlYXR1cmVzID0gX3JlZi5wb3B1cFdpbmRvd0ZlYXR1cmVzO1xuXHQgICAgICAgIHZhciBwb3B1cFdpbmRvd1RhcmdldCA9IF9yZWYucG9wdXBXaW5kb3dUYXJnZXQ7XG5cdCAgICAgICAgdmFyIHNpbGVudF9yZWRpcmVjdF91cmkgPSBfcmVmLnNpbGVudF9yZWRpcmVjdF91cmk7XG5cdCAgICAgICAgdmFyIF9yZWYkYXV0b21hdGljU2lsZW50UiA9IF9yZWYuYXV0b21hdGljU2lsZW50UmVuZXc7XG5cdCAgICAgICAgdmFyIGF1dG9tYXRpY1NpbGVudFJlbmV3ID0gX3JlZiRhdXRvbWF0aWNTaWxlbnRSID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYkYXV0b21hdGljU2lsZW50Ujtcblx0ICAgICAgICB2YXIgX3JlZiRhY2Nlc3NUb2tlbkV4cGlyID0gX3JlZi5hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZTtcblx0ICAgICAgICB2YXIgYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUgPSBfcmVmJGFjY2Vzc1Rva2VuRXhwaXIgPT09IHVuZGVmaW5lZCA/IERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA6IF9yZWYkYWNjZXNzVG9rZW5FeHBpcjtcblx0ICAgICAgICB2YXIgX3JlZiRyZWRpcmVjdE5hdmlnYXRvID0gX3JlZi5yZWRpcmVjdE5hdmlnYXRvcjtcblx0ICAgICAgICB2YXIgcmVkaXJlY3ROYXZpZ2F0b3IgPSBfcmVmJHJlZGlyZWN0TmF2aWdhdG8gPT09IHVuZGVmaW5lZCA/IG5ldyBfUmVkaXJlY3ROYXZpZ2F0b3IyLmRlZmF1bHQoKSA6IF9yZWYkcmVkaXJlY3ROYXZpZ2F0bztcblx0ICAgICAgICB2YXIgX3JlZiRwb3B1cE5hdmlnYXRvciA9IF9yZWYucG9wdXBOYXZpZ2F0b3I7XG5cdCAgICAgICAgdmFyIHBvcHVwTmF2aWdhdG9yID0gX3JlZiRwb3B1cE5hdmlnYXRvciA9PT0gdW5kZWZpbmVkID8gbmV3IF9Qb3B1cE5hdmlnYXRvcjIuZGVmYXVsdCgpIDogX3JlZiRwb3B1cE5hdmlnYXRvcjtcblx0ICAgICAgICB2YXIgX3JlZiRpZnJhbWVOYXZpZ2F0b3IgPSBfcmVmLmlmcmFtZU5hdmlnYXRvcjtcblx0ICAgICAgICB2YXIgaWZyYW1lTmF2aWdhdG9yID0gX3JlZiRpZnJhbWVOYXZpZ2F0b3IgPT09IHVuZGVmaW5lZCA/IG5ldyBfSUZyYW1lTmF2aWdhdG9yMi5kZWZhdWx0KCkgOiBfcmVmJGlmcmFtZU5hdmlnYXRvcjtcblx0ICAgICAgICB2YXIgX3JlZiR1c2VyU3RvcmUgPSBfcmVmLnVzZXJTdG9yZTtcblx0ICAgICAgICB2YXIgdXNlclN0b3JlID0gX3JlZiR1c2VyU3RvcmUgPT09IHVuZGVmaW5lZCA/IG5ldyBfV2ViU3RvcmFnZVN0YXRlU3RvcmUyLmRlZmF1bHQoeyBzdG9yZTogX0dsb2JhbDIuZGVmYXVsdC5zZXNzaW9uU3RvcmFnZSB9KSA6IF9yZWYkdXNlclN0b3JlO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXNlck1hbmFnZXJTZXR0aW5ncyk7XG5cdFxuXHQgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9PaWRjQ2xpZW50U2V0dGluZ3MuY2FsbCh0aGlzLCBhcmd1bWVudHNbMF0pKTtcblx0XG5cdCAgICAgICAgX3RoaXMuX3BvcHVwX3JlZGlyZWN0X3VyaSA9IHBvcHVwX3JlZGlyZWN0X3VyaTtcblx0ICAgICAgICBfdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcyA9IHBvcHVwV2luZG93RmVhdHVyZXM7XG5cdCAgICAgICAgX3RoaXMuX3BvcHVwV2luZG93VGFyZ2V0ID0gcG9wdXBXaW5kb3dUYXJnZXQ7XG5cdFxuXHQgICAgICAgIF90aGlzLl9zaWxlbnRfcmVkaXJlY3RfdXJpID0gc2lsZW50X3JlZGlyZWN0X3VyaTtcblx0ICAgICAgICBfdGhpcy5fYXV0b21hdGljU2lsZW50UmVuZXcgPSAhIWF1dG9tYXRpY1NpbGVudFJlbmV3O1xuXHQgICAgICAgIF90aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lO1xuXHRcblx0ICAgICAgICBfdGhpcy5fcmVkaXJlY3ROYXZpZ2F0b3IgPSByZWRpcmVjdE5hdmlnYXRvcjtcblx0ICAgICAgICBfdGhpcy5fcG9wdXBOYXZpZ2F0b3IgPSBwb3B1cE5hdmlnYXRvcjtcblx0ICAgICAgICBfdGhpcy5faWZyYW1lTmF2aWdhdG9yID0gaWZyYW1lTmF2aWdhdG9yO1xuXHRcblx0ICAgICAgICBfdGhpcy5fdXNlclN0b3JlID0gdXNlclN0b3JlO1xuXHQgICAgICAgIHJldHVybiBfdGhpcztcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoVXNlck1hbmFnZXJTZXR0aW5ncywgW3tcblx0ICAgICAgICBrZXk6ICdwb3B1cF9yZWRpcmVjdF91cmknLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBfcmVkaXJlY3RfdXJpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdwb3B1cFdpbmRvd0ZlYXR1cmVzJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BvcHVwV2luZG93RmVhdHVyZXM7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3BvcHVwV2luZG93VGFyZ2V0Jyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BvcHVwV2luZG93VGFyZ2V0O1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdzaWxlbnRfcmVkaXJlY3RfdXJpJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpbGVudF9yZWRpcmVjdF91cmk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2F1dG9tYXRpY1NpbGVudFJlbmV3Jyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuICEhKHRoaXMuc2lsZW50X3JlZGlyZWN0X3VyaSAmJiB0aGlzLl9hdXRvbWF0aWNTaWxlbnRSZW5ldyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2FjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZWRpcmVjdE5hdmlnYXRvcicsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvcjtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAncG9wdXBOYXZpZ2F0b3InLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBOYXZpZ2F0b3I7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2lmcmFtZU5hdmlnYXRvcicsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9pZnJhbWVOYXZpZ2F0b3I7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3VzZXJTdG9yZScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VyU3RvcmU7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBVc2VyTWFuYWdlclNldHRpbmdzO1xuXHR9KF9PaWRjQ2xpZW50U2V0dGluZ3MzLmRlZmF1bHQpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVXNlck1hbmFnZXJTZXR0aW5ncztcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsgLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIF9Mb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9Mb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9nKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIFJlZGlyZWN0TmF2aWdhdG9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gUmVkaXJlY3ROYXZpZ2F0b3IoKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0TmF2aWdhdG9yKTtcblx0ICAgIH1cblx0XG5cdCAgICBSZWRpcmVjdE5hdmlnYXRvci5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uIHByZXBhcmUoKSB7XG5cdCAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUmVkaXJlY3ROYXZpZ2F0b3IucHJvdG90eXBlLm5hdmlnYXRlID0gZnVuY3Rpb24gbmF2aWdhdGUocGFyYW1zKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiUmVkaXJlY3ROYXZpZ2F0b3IubmF2aWdhdGVcIik7XG5cdFxuXHQgICAgICAgIGlmICghcGFyYW1zIHx8ICFwYXJhbXMudXJsKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuZXJyb3IoXCJObyB1cmwgcHJvdmlkZWRcIik7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyB1cmwgcHJvdmlkZWRcIikpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgd2luZG93LmxvY2F0aW9uID0gcGFyYW1zLnVybDtcblx0XG5cdCAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoUmVkaXJlY3ROYXZpZ2F0b3IsIFt7XG5cdCAgICAgICAga2V5OiBcInVybFwiLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJSZWRpcmVjdE5hdmlnYXRvci51cmxcIik7XG5cdCAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIFJlZGlyZWN0TmF2aWdhdG9yO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBSZWRpcmVjdE5hdmlnYXRvcjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHR2YXIgX1BvcHVwV2luZG93ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG5cdFxuXHR2YXIgX1BvcHVwV2luZG93MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BvcHVwV2luZG93KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfSAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgUG9wdXBOYXZpZ2F0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBQb3B1cE5hdmlnYXRvcigpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wdXBOYXZpZ2F0b3IpO1xuXHQgICAgfVxuXHRcblx0ICAgIFBvcHVwTmF2aWdhdG9yLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24gcHJlcGFyZShwYXJhbXMpIHtcblx0ICAgICAgICB2YXIgcG9wdXAgPSBuZXcgX1BvcHVwV2luZG93Mi5kZWZhdWx0KHBhcmFtcyk7XG5cdCAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwb3B1cCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFBvcHVwTmF2aWdhdG9yLnByb3RvdHlwZS5jYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKHVybCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlBvcHVwTmF2aWdhdG9yLmNhbGxiYWNrXCIpO1xuXHRcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBfUG9wdXBXaW5kb3cyLmRlZmF1bHQubm90aWZ5T3BlbmVyKHVybCk7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiBQb3B1cE5hdmlnYXRvcjtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gUG9wdXBOYXZpZ2F0b3I7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMzEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOyAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgX0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX0xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2cpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHR2YXIgQ2hlY2tGb3JQb3B1cENsb3NlZEludGVydmFsID0gNTAwO1xuXHR2YXIgRGVmYXVsdFBvcHVwRmVhdHVyZXMgPSAnbG9jYXRpb249bm8sdG9vbGJhcj1ubyx3aWR0aD01MDAsaGVpZ2h0PTUwMCxsZWZ0PTEwMCx0b3A9MTAwJztcblx0dmFyIERlZmF1bHRQb3B1cFRhcmdldCA9IFwiX2JsYW5rXCI7XG5cdFxuXHR2YXIgUG9wdXBXaW5kb3cgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBQb3B1cFdpbmRvdyhwYXJhbXMpIHtcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wdXBXaW5kb3cpO1xuXHRcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJQb3B1cFdpbmRvdy5jdG9yXCIpO1xuXHRcblx0ICAgICAgICB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICBfdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XG5cdCAgICAgICAgICAgIF90aGlzLl9yZWplY3QgPSByZWplY3Q7XG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50ID0gdGhpcy5fbWVzc2FnZS5iaW5kKHRoaXMpO1xuXHQgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xuXHRcblx0ICAgICAgICB2YXIgZmVhdHVyZXMgPSBwYXJhbXMucG9wdXBXaW5kb3dGZWF0dXJlcyB8fCBEZWZhdWx0UG9wdXBGZWF0dXJlcztcblx0ICAgICAgICB2YXIgdGFyZ2V0ID0gcGFyYW1zLnBvcHVwV2luZG93VGFyZ2V0IHx8IERlZmF1bHRQb3B1cFRhcmdldDtcblx0XG5cdCAgICAgICAgdGhpcy5fcG9wdXAgPSB3aW5kb3cub3BlbignJywgdGFyZ2V0LCBmZWF0dXJlcyk7XG5cdCAgICAgICAgaWYgKHRoaXMuX3BvcHVwKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcInBvcHVwIHN1Y2Nlc3NmdWxseSBjcmVhdGVkXCIpO1xuXHQgICAgICAgICAgICB0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZC5iaW5kKHRoaXMpLCBDaGVja0ZvclBvcHVwQ2xvc2VkSW50ZXJ2YWwpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBQb3B1cFdpbmRvdy5wcm90b3R5cGUubmF2aWdhdGUgPSBmdW5jdGlvbiBuYXZpZ2F0ZShwYXJhbXMpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJQb3B1cFdpbmRvdy5uYXZpZ2F0ZVwiKTtcblx0XG5cdCAgICAgICAgaWYgKCF0aGlzLl9wb3B1cCkge1xuXHQgICAgICAgICAgICB0aGlzLl9lcnJvcihcIkVycm9yIG9wZW5pbmcgcG9wdXAgd2luZG93XCIpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoIXBhcmFtcyB8fCAhcGFyYW1zLnVybCkge1xuXHQgICAgICAgICAgICB0aGlzLl9lcnJvcihcIk5vIHVybCBwcm92aWRlZFwiKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJTZXR0aW5nIFVSTCBpbiBwb3B1cFwiKTtcblx0XG5cdCAgICAgICAgICAgIHRoaXMuX3BvcHVwLmZvY3VzKCk7XG5cdCAgICAgICAgICAgIHRoaXMuX3BvcHVwLndpbmRvdy5sb2NhdGlvbiA9IHBhcmFtcy51cmw7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xuXHQgICAgfTtcblx0XG5cdCAgICBQb3B1cFdpbmRvdy5wcm90b3R5cGUuX3N1Y2Nlc3MgPSBmdW5jdGlvbiBfc3VjY2VzcyhkYXRhKSB7XG5cdCAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuXHRcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJTdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gcG9wdXAgd2luZG93XCIpO1xuXHQgICAgICAgIHRoaXMuX3Jlc29sdmUoZGF0YSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIFBvcHVwV2luZG93LnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiBfZXJyb3IobWVzc2FnZSkge1xuXHQgICAgICAgIHRoaXMuX2NsZWFudXAoKTtcblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihtZXNzYWdlKTtcblx0ICAgICAgICB0aGlzLl9yZWplY3QobmV3IEVycm9yKG1lc3NhZ2UpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgUG9wdXBXaW5kb3cucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24gX2NsZWFudXAoKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiUG9wdXBXaW5kb3cuX2NsZWFudXBcIik7XG5cdFxuXHQgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xuXHQgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX2NoZWNrRm9yUG9wdXBDbG9zZWRUaW1lcik7XG5cdFxuXHQgICAgICAgIHRoaXMuX2NoZWNrRm9yUG9wdXBDbG9zZWRUaW1lciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnRzc2FnZSA9IG51bGw7XG5cdFxuXHQgICAgICAgIGlmICh0aGlzLl9wb3B1cCkge1xuXHQgICAgICAgICAgICB0aGlzLl9wb3B1cC5jbG9zZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLl9wb3B1cCA9IG51bGw7XG5cdCAgICB9O1xuXHRcblx0ICAgIFBvcHVwV2luZG93LnByb3RvdHlwZS5fY2hlY2tGb3JQb3B1cENsb3NlZCA9IGZ1bmN0aW9uIF9jaGVja0ZvclBvcHVwQ2xvc2VkKCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlBvcHVwV2luZG93Ll9jaGVja0ZvclBvcHVwQ2xvc2VkXCIpO1xuXHRcblx0ICAgICAgICBpZiAoIXRoaXMuX3BvcHVwIHx8IHRoaXMuX3BvcHVwLmNsb3NlZCkge1xuXHQgICAgICAgICAgICB0aGlzLl9lcnJvcihcIlBvcHVwIHdpbmRvdyBjbG9zZWRcIik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBQb3B1cFdpbmRvdy5wcm90b3R5cGUuX21lc3NhZ2UgPSBmdW5jdGlvbiBfbWVzc2FnZShlKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiUG9wdXBXaW5kb3cuX21lc3NhZ2VcIik7XG5cdFxuXHQgICAgICAgIGlmIChlLm9yaWdpbiA9PT0gdGhpcy5fb3JpZ2luICYmIGUuc291cmNlID09PSB0aGlzLl9wb3B1cC53aW5kb3cpIHtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwicHJvY2Vzc2luZyBtZXNzYWdlXCIpO1xuXHRcblx0ICAgICAgICAgICAgdmFyIHVybCA9IGUuZGF0YSB8fCBlLnNvdXJjZS5sb2NhdGlvbi5ocmVmOyAvLyBmb3IgSUU5XG5cdFxuXHQgICAgICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XG5cdFxuXHQgICAgICAgICAgICBpZiAodXJsKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9zdWNjZXNzKHsgdXJsOiB1cmwgfSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9lcnJvcihcIkludmFsaWQgcmVzcG9uc2UgZnJvbSBwb3B1cFwiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgUG9wdXBXaW5kb3cubm90aWZ5T3BlbmVyID0gZnVuY3Rpb24gbm90aWZ5T3BlbmVyKHVybCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lclwiKTtcblx0XG5cdCAgICAgICAgaWYgKHdpbmRvdy5vcGVuZXIpIHtcblx0ICAgICAgICAgICAgdXJsID0gdXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXHQgICAgICAgICAgICBpZiAodXJsKSB7XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJwb3N0aW5nIHVybCBtZXNzYWdlIHRvIG9wZW5lclwiKTtcblx0ICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuZXIucG9zdE1lc3NhZ2UodXJsLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3QpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoUG9wdXBXaW5kb3csIFt7XG5cdCAgICAgICAga2V5OiAncHJvbWlzZScsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdfb3JpZ2luJyxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIFBvcHVwV2luZG93O1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBQb3B1cFdpbmRvdztcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHR2YXIgX0lGcmFtZVdpbmRvdyA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXHRcblx0dmFyIF9JRnJhbWVXaW5kb3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSUZyYW1lV2luZG93KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfSAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgSUZyYW1lTmF2aWdhdG9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gSUZyYW1lTmF2aWdhdG9yKCkge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJRnJhbWVOYXZpZ2F0b3IpO1xuXHQgICAgfVxuXHRcblx0ICAgIElGcmFtZU5hdmlnYXRvci5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uIHByZXBhcmUoKSB7XG5cdCAgICAgICAgdmFyIGZyYW1lID0gbmV3IF9JRnJhbWVXaW5kb3cyLmRlZmF1bHQoKTtcblx0ICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZyYW1lKTtcblx0ICAgIH07XG5cdFxuXHQgICAgSUZyYW1lTmF2aWdhdG9yLnByb3RvdHlwZS5jYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKHVybCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIklGcmFtZU5hdmlnYXRvci5jYWxsYmFja1wiKTtcblx0XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgX0lGcmFtZVdpbmRvdzIuZGVmYXVsdC5ub3RpZnlQYXJlbnQodXJsKTtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgcmV0dXJuIElGcmFtZU5hdmlnYXRvcjtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gSUZyYW1lTmF2aWdhdG9yO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDMzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOyAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgX0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX0xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2cpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHR2YXIgRGVmYXVsdFRpbWVvdXQgPSA1MDAwO1xuXHRcblx0dmFyIElGcmFtZVdpbmRvdyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIElGcmFtZVdpbmRvdygpIHtcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSUZyYW1lV2luZG93KTtcblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiSUZyYW1lV2luZG93LmN0b3JcIik7XG5cdFxuXHQgICAgICAgIHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgICAgIF90aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcblx0ICAgICAgICAgICAgX3RoaXMuX3JlamVjdCA9IHJlamVjdDtcblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgdGhpcy5fYm91bmRNZXNzYWdlRXZlbnQgPSB0aGlzLl9tZXNzYWdlLmJpbmQodGhpcyk7XG5cdCAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XG5cdFxuXHQgICAgICAgIHRoaXMuX2ZyYW1lID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG5cdCAgICAgICAgdGhpcy5fZnJhbWUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHQgICAgICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2ZyYW1lKTtcblx0ICAgIH1cblx0XG5cdCAgICBJRnJhbWVXaW5kb3cucHJvdG90eXBlLm5hdmlnYXRlID0gZnVuY3Rpb24gbmF2aWdhdGUocGFyYW1zKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiSUZyYW1lV2luZG93Lm5hdmlnYXRlXCIpO1xuXHRcblx0ICAgICAgICBpZiAoIXBhcmFtcyB8fCAhcGFyYW1zLnVybCkge1xuXHQgICAgICAgICAgICB0aGlzLl9lcnJvcihcIk5vIHVybCBwcm92aWRlZFwiKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLl90aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuX3RpbWVvdXQuYmluZCh0aGlzKSwgRGVmYXVsdFRpbWVvdXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9mcmFtZS5zcmMgPSBwYXJhbXMudXJsO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcblx0ICAgIH07XG5cdFxuXHQgICAgSUZyYW1lV2luZG93LnByb3RvdHlwZS5fc3VjY2VzcyA9IGZ1bmN0aW9uIF9zdWNjZXNzKGRhdGEpIHtcblx0ICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XG5cdFxuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlN1Y2Nlc3NmdWwgcmVzcG9uc2UgZnJvbSBmcmFtZSB3aW5kb3dcIik7XG5cdCAgICAgICAgdGhpcy5fcmVzb2x2ZShkYXRhKTtcblx0ICAgIH07XG5cdFxuXHQgICAgSUZyYW1lV2luZG93LnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiBfZXJyb3IobWVzc2FnZSkge1xuXHQgICAgICAgIHRoaXMuX2NsZWFudXAoKTtcblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5lcnJvcihtZXNzYWdlKTtcblx0ICAgICAgICB0aGlzLl9yZWplY3QobmV3IEVycm9yKG1lc3NhZ2UpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgSUZyYW1lV2luZG93LnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uIF9jbGVhbnVwKCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIklGcmFtZVdpbmRvdy5fY2xlYW51cFwiKTtcblx0XG5cdCAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XG5cdCAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG5cdCAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5fZnJhbWUpO1xuXHRcblx0ICAgICAgICB0aGlzLl90aW1lciA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5fZnJhbWUgPSBudWxsO1xuXHQgICAgICAgIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50c3NhZ2UgPSBudWxsO1xuXHQgICAgfTtcblx0XG5cdCAgICBJRnJhbWVXaW5kb3cucHJvdG90eXBlLl90aW1lb3V0ID0gZnVuY3Rpb24gX3RpbWVvdXQoKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiSUZyYW1lV2luZG93Ll90aW1lb3V0XCIpO1xuXHQgICAgICAgIHRoaXMuX2Vycm9yKFwiRnJhbWUgd2luZG93IHRpbWVkIG91dFwiKTtcblx0ICAgIH07XG5cdFxuXHQgICAgSUZyYW1lV2luZG93LnByb3RvdHlwZS5fbWVzc2FnZSA9IGZ1bmN0aW9uIF9tZXNzYWdlKGUpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJJRnJhbWVXaW5kb3cuX21lc3NhZ2VcIik7XG5cdFxuXHQgICAgICAgIGlmICh0aGlzLl90aW1lciAmJiBlLm9yaWdpbiA9PT0gdGhpcy5fb3JpZ2luICYmIGUuc291cmNlID09PSB0aGlzLl9mcmFtZS5jb250ZW50V2luZG93KSB7XG5cdCAgICAgICAgICAgIHZhciB1cmwgPSBlLmRhdGE7XG5cdCAgICAgICAgICAgIGlmICh1cmwpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3N1Y2Nlc3MoeyB1cmw6IHVybCB9KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiSW52YWxpZCByZXNwb25zZSBmcm9tIGZyYW1lXCIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0XG5cdCAgICBJRnJhbWVXaW5kb3cubm90aWZ5UGFyZW50ID0gZnVuY3Rpb24gbm90aWZ5UGFyZW50KHVybCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIklGcmFtZVdpbmRvdy5ub3RpZnlQYXJlbnRcIik7XG5cdFxuXHQgICAgICAgIGlmICh3aW5kb3cucGFyZW50ICYmIHdpbmRvdyAhPT0gd2luZG93LnBhcmVudCkge1xuXHQgICAgICAgICAgICB1cmwgPSB1cmwgfHwgd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cdCAgICAgICAgICAgIGlmICh1cmwpIHtcblx0ICAgICAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcInBvc3RpbmcgdXJsIG1lc3NhZ2UgdG8gcGFyZW50XCIpO1xuXHQgICAgICAgICAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSh1cmwsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhJRnJhbWVXaW5kb3csIFt7XG5cdCAgICAgICAga2V5OiBcInByb21pc2VcIixcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2U7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJfb3JpZ2luXCIsXG5cdCAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBJRnJhbWVXaW5kb3c7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IElGcmFtZVdpbmRvdztcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsgLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIF9Mb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9Mb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9nKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIFVzZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBVc2VyKF9yZWYpIHtcblx0ICAgICAgICB2YXIgaWRfdG9rZW4gPSBfcmVmLmlkX3Rva2VuO1xuXHQgICAgICAgIHZhciBzZXNzaW9uX3N0YXRlID0gX3JlZi5zZXNzaW9uX3N0YXRlO1xuXHQgICAgICAgIHZhciBhY2Nlc3NfdG9rZW4gPSBfcmVmLmFjY2Vzc190b2tlbjtcblx0ICAgICAgICB2YXIgdG9rZW5fdHlwZSA9IF9yZWYudG9rZW5fdHlwZTtcblx0ICAgICAgICB2YXIgc2NvcGUgPSBfcmVmLnNjb3BlO1xuXHQgICAgICAgIHZhciBwcm9maWxlID0gX3JlZi5wcm9maWxlO1xuXHQgICAgICAgIHZhciBleHBpcmVzX2F0ID0gX3JlZi5leHBpcmVzX2F0O1xuXHQgICAgICAgIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cdFxuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVc2VyKTtcblx0XG5cdCAgICAgICAgdGhpcy5pZF90b2tlbiA9IGlkX3Rva2VuO1xuXHQgICAgICAgIHRoaXMuc2Vzc2lvbl9zdGF0ZSA9IHNlc3Npb25fc3RhdGU7XG5cdCAgICAgICAgdGhpcy5hY2Nlc3NfdG9rZW4gPSBhY2Nlc3NfdG9rZW47XG5cdCAgICAgICAgdGhpcy50b2tlbl90eXBlID0gdG9rZW5fdHlwZTtcblx0ICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG5cdCAgICAgICAgdGhpcy5wcm9maWxlID0gcHJvZmlsZTtcblx0ICAgICAgICB0aGlzLmV4cGlyZXNfYXQgPSBleHBpcmVzX2F0O1xuXHQgICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcblx0ICAgIH1cblx0XG5cdCAgICBVc2VyLnByb3RvdHlwZS50b1N0b3JhZ2VTdHJpbmcgPSBmdW5jdGlvbiB0b1N0b3JhZ2VTdHJpbmcoKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiVXNlci50b1N0b3JhZ2VTdHJpbmdcIik7XG5cdCAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcblx0ICAgICAgICAgICAgaWRfdG9rZW46IHRoaXMuaWRfdG9rZW4sXG5cdCAgICAgICAgICAgIHNlc3Npb25fc3RhdGU6IHRoaXMuc2Vzc2lvbl9zdGF0ZSxcblx0ICAgICAgICAgICAgYWNjZXNzX3Rva2VuOiB0aGlzLmFjY2Vzc190b2tlbixcblx0ICAgICAgICAgICAgdG9rZW5fdHlwZTogdGhpcy50b2tlbl90eXBlLFxuXHQgICAgICAgICAgICBzY29wZTogdGhpcy5zY29wZSxcblx0ICAgICAgICAgICAgcHJvZmlsZTogdGhpcy5wcm9maWxlLFxuXHQgICAgICAgICAgICBleHBpcmVzX2F0OiB0aGlzLmV4cGlyZXNfYXRcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdFxuXHQgICAgVXNlci5mcm9tU3RvcmFnZVN0cmluZyA9IGZ1bmN0aW9uIGZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJVc2VyLmZyb21TdG9yYWdlU3RyaW5nXCIpO1xuXHQgICAgICAgIHJldHVybiBuZXcgVXNlcihKU09OLnBhcnNlKHN0b3JhZ2VTdHJpbmcpKTtcblx0ICAgIH07XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKFVzZXIsIFt7XG5cdCAgICAgICAga2V5OiBcImV4cGlyZXNfaW5cIixcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuZXhwaXJlc19hdCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIG5vdyA9IHBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4cGlyZXNfYXQgLSBub3c7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcImV4cGlyZWRcIixcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgdmFyIGV4cGlyZXNfaW4gPSB0aGlzLmV4cGlyZXNfaW47XG5cdCAgICAgICAgICAgIGlmIChleHBpcmVzX2luICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBleHBpcmVzX2luIDw9IDA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcInNjb3Blc1wiLFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gKHRoaXMuc2NvcGUgfHwgXCJcIikuc3BsaXQoXCIgXCIpO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gVXNlcjtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVXNlcjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHR2YXIgX0FjY2Vzc1Rva2VuRXZlbnRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXHRcblx0dmFyIF9BY2Nlc3NUb2tlbkV2ZW50czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BY2Nlc3NUb2tlbkV2ZW50czIpO1xuXHRcblx0dmFyIF9FdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXHRcblx0dmFyIF9FdmVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FdmVudCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Ly8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblx0XG5cdHZhciBVc2VyTWFuYWdlckV2ZW50cyA9IGZ1bmN0aW9uIChfQWNjZXNzVG9rZW5FdmVudHMpIHtcblx0ICAgIF9pbmhlcml0cyhVc2VyTWFuYWdlckV2ZW50cywgX0FjY2Vzc1Rva2VuRXZlbnRzKTtcblx0XG5cdCAgICBmdW5jdGlvbiBVc2VyTWFuYWdlckV2ZW50cyhzZXR0aW5ncykge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVc2VyTWFuYWdlckV2ZW50cyk7XG5cdFxuXHQgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9BY2Nlc3NUb2tlbkV2ZW50cy5jYWxsKHRoaXMsIHNldHRpbmdzKSk7XG5cdFxuXHQgICAgICAgIF90aGlzLl91c2VyTG9hZGVkID0gbmV3IF9FdmVudDIuZGVmYXVsdChcIlVzZXIgbG9hZGVkXCIpO1xuXHQgICAgICAgIF90aGlzLl91c2VyVW5sb2FkZWQgPSBuZXcgX0V2ZW50Mi5kZWZhdWx0KFwiVXNlciB1bmxvYWRlZFwiKTtcblx0ICAgICAgICBfdGhpcy5fc2lsZW50UmVuZXdFcnJvciA9IG5ldyBfRXZlbnQyLmRlZmF1bHQoXCJTaWxlbnQgcmVuZXcgZXJyb3JcIik7XG5cdCAgICAgICAgcmV0dXJuIF90aGlzO1xuXHQgICAgfVxuXHRcblx0ICAgIFVzZXJNYW5hZ2VyRXZlbnRzLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gbG9hZCh1c2VyKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiVXNlck1hbmFnZXJFdmVudHMubG9hZFwiKTtcblx0ICAgICAgICBfQWNjZXNzVG9rZW5FdmVudHMucHJvdG90eXBlLmxvYWQuY2FsbCh0aGlzLCB1c2VyKTtcblx0ICAgICAgICB0aGlzLl91c2VyTG9hZGVkLnJhaXNlKHVzZXIpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlckV2ZW50cy5wcm90b3R5cGUudW5sb2FkID0gZnVuY3Rpb24gdW5sb2FkKCkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlVzZXJNYW5hZ2VyRXZlbnRzLnVubG9hZFwiKTtcblx0ICAgICAgICBfQWNjZXNzVG9rZW5FdmVudHMucHJvdG90eXBlLnVubG9hZC5jYWxsKHRoaXMpO1xuXHQgICAgICAgIHRoaXMuX3VzZXJVbmxvYWRlZC5yYWlzZSgpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlckV2ZW50cy5wcm90b3R5cGUuYWRkVXNlckxvYWRlZCA9IGZ1bmN0aW9uIGFkZFVzZXJMb2FkZWQoY2IpIHtcblx0ICAgICAgICB0aGlzLl91c2VyTG9hZGVkLmFkZEhhbmRsZXIoY2IpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlckV2ZW50cy5wcm90b3R5cGUucmVtb3ZlVXNlckxvYWRlZCA9IGZ1bmN0aW9uIHJlbW92ZVVzZXJMb2FkZWQoY2IpIHtcblx0ICAgICAgICB0aGlzLl91c2VyTG9hZGVkLnJlbW92ZUhhbmRsZXIoY2IpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlckV2ZW50cy5wcm90b3R5cGUuYWRkVXNlclVubG9hZGVkID0gZnVuY3Rpb24gYWRkVXNlclVubG9hZGVkKGNiKSB7XG5cdCAgICAgICAgdGhpcy5fdXNlclVubG9hZGVkLmFkZEhhbmRsZXIoY2IpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlckV2ZW50cy5wcm90b3R5cGUucmVtb3ZlVXNlclVubG9hZGVkID0gZnVuY3Rpb24gcmVtb3ZlVXNlclVubG9hZGVkKGNiKSB7XG5cdCAgICAgICAgdGhpcy5fdXNlclVubG9hZGVkLnJlbW92ZUhhbmRsZXIoY2IpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlckV2ZW50cy5wcm90b3R5cGUuYWRkU2lsZW50UmVuZXdFcnJvciA9IGZ1bmN0aW9uIGFkZFNpbGVudFJlbmV3RXJyb3IoY2IpIHtcblx0ICAgICAgICB0aGlzLl9zaWxlbnRSZW5ld0Vycm9yLmFkZEhhbmRsZXIoY2IpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlckV2ZW50cy5wcm90b3R5cGUucmVtb3ZlU2lsZW50UmVuZXdFcnJvciA9IGZ1bmN0aW9uIHJlbW92ZVNpbGVudFJlbmV3RXJyb3IoY2IpIHtcblx0ICAgICAgICB0aGlzLl9zaWxlbnRSZW5ld0Vycm9yLnJlbW92ZUhhbmRsZXIoY2IpO1xuXHQgICAgfTtcblx0XG5cdCAgICBVc2VyTWFuYWdlckV2ZW50cy5wcm90b3R5cGUuX3JhaXNlU2lsZW50UmVuZXdFcnJvciA9IGZ1bmN0aW9uIF9yYWlzZVNpbGVudFJlbmV3RXJyb3IoZSkge1xuXHQgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVNpbGVudFJlbmV3RXJyb3JcIiwgZS5tZXNzYWdlKTtcblx0ICAgICAgICB0aGlzLl9zaWxlbnRSZW5ld0Vycm9yLnJhaXNlKGUpO1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gVXNlck1hbmFnZXJFdmVudHM7XG5cdH0oX0FjY2Vzc1Rva2VuRXZlbnRzMy5kZWZhdWx0KTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFVzZXJNYW5hZ2VyRXZlbnRzO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDM2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9Mb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9Mb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9nKTtcblx0XG5cdHZhciBfVGltZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcblx0XG5cdHZhciBfVGltZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGltZXIpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9IC8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Ly8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblx0XG5cdHZhciBEZWZhdWx0QWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUgPSA2MDtcblx0XG5cdHZhciBBY2Nlc3NUb2tlbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEFjY2Vzc1Rva2VuRXZlbnRzKCkge1xuXHQgICAgICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG5cdFxuXHQgICAgICAgIHZhciBfcmVmJGFjY2Vzc1Rva2VuRXhwaXIgPSBfcmVmLmFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lO1xuXHQgICAgICAgIHZhciBhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IF9yZWYkYWNjZXNzVG9rZW5FeHBpciA9PT0gdW5kZWZpbmVkID8gRGVmYXVsdEFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lIDogX3JlZiRhY2Nlc3NUb2tlbkV4cGlyO1xuXHQgICAgICAgIHZhciBfcmVmJGFjY2Vzc1Rva2VuRXhwaXIyID0gX3JlZi5hY2Nlc3NUb2tlbkV4cGlyaW5nVGltZXI7XG5cdCAgICAgICAgdmFyIGFjY2Vzc1Rva2VuRXhwaXJpbmdUaW1lciA9IF9yZWYkYWNjZXNzVG9rZW5FeHBpcjIgPT09IHVuZGVmaW5lZCA/IG5ldyBfVGltZXIyLmRlZmF1bHQoXCJBY2Nlc3MgdG9rZW4gZXhwaXJpbmdcIikgOiBfcmVmJGFjY2Vzc1Rva2VuRXhwaXIyO1xuXHQgICAgICAgIHZhciBfcmVmJGFjY2Vzc1Rva2VuRXhwaXIzID0gX3JlZi5hY2Nlc3NUb2tlbkV4cGlyZWRUaW1lcjtcblx0ICAgICAgICB2YXIgYWNjZXNzVG9rZW5FeHBpcmVkVGltZXIgPSBfcmVmJGFjY2Vzc1Rva2VuRXhwaXIzID09PSB1bmRlZmluZWQgPyBuZXcgX1RpbWVyMi5kZWZhdWx0KFwiQWNjZXNzIHRva2VuIGV4cGlyZWRcIikgOiBfcmVmJGFjY2Vzc1Rva2VuRXhwaXIzO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWNjZXNzVG9rZW5FdmVudHMpO1xuXHRcblx0ICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lO1xuXHRcblx0ICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nID0gYWNjZXNzVG9rZW5FeHBpcmluZ1RpbWVyO1xuXHQgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZCA9IGFjY2Vzc1Rva2VuRXhwaXJlZFRpbWVyO1xuXHQgICAgfVxuXHRcblx0ICAgIEFjY2Vzc1Rva2VuRXZlbnRzLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gbG9hZChjb250YWluZXIpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJBY2Nlc3NUb2tlbkV2ZW50cy5sb2FkXCIpO1xuXHRcblx0ICAgICAgICB0aGlzLl9jYW5jZWxUaW1lcnMoKTtcblx0XG5cdCAgICAgICAgLy8gb25seSByZWdpc3RlciBldmVudHMgaWYgdGhlcmUncyBhbiBhY2Nlc3MgdG9rZW4gd2hlcmUgd2UgY2FyZSBhYm91dCBleHBpcmF0aW9uXG5cdCAgICAgICAgaWYgKGNvbnRhaW5lci5hY2Nlc3NfdG9rZW4pIHtcblx0ICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gY29udGFpbmVyLmV4cGlyZXNfaW47XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcImFjY2VzcyB0b2tlbiBwcmVzZW50LCByZW1haW5pbmcgZHVyYXRpb246XCIsIGR1cmF0aW9uKTtcblx0XG5cdCAgICAgICAgICAgIGlmIChkdXJhdGlvbiA+IDApIHtcblx0ICAgICAgICAgICAgICAgIC8vIG9ubHkgcmVnaXN0ZXIgZXhwaXJpbmcgaWYgd2Ugc3RpbGwgaGF2ZSB0aW1lXG5cdCAgICAgICAgICAgICAgICB2YXIgZXhwaXJpbmcgPSBkdXJhdGlvbiAtIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lO1xuXHQgICAgICAgICAgICAgICAgaWYgKGV4cGlyaW5nIDw9IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICBleHBpcmluZyA9IDE7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJyZWdpc3RlcmluZyBleHBpcmluZyB0aW1lciBpbjpcIiwgZXhwaXJpbmcpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5pbml0KGV4cGlyaW5nKTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgLy8gYWx3YXlzIHJlZ2lzdGVyIGV4cGlyZWQuIGlmIGl0J3MgbmVnYXRpdmUsIGl0IHdpbGwgc3RpbGwgZmlyZVxuXHQgICAgICAgICAgICB2YXIgZXhwaXJlZCA9IGR1cmF0aW9uICsgMTtcblx0ICAgICAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwicmVnaXN0ZXJpbmcgZXhwaXJlZCB0aW1lciBpbjpcIiwgZXhwaXJlZCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5pbml0KGV4cGlyZWQpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgQWNjZXNzVG9rZW5FdmVudHMucHJvdG90eXBlLnVubG9hZCA9IGZ1bmN0aW9uIHVubG9hZCgpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJBY2Nlc3NUb2tlbkV2ZW50cy51bmxvYWRcIik7XG5cdCAgICAgICAgdGhpcy5fY2FuY2VsVGltZXJzKCk7XG5cdCAgICB9O1xuXHRcblx0ICAgIEFjY2Vzc1Rva2VuRXZlbnRzLnByb3RvdHlwZS5fY2FuY2VsVGltZXJzID0gZnVuY3Rpb24gX2NhbmNlbFRpbWVycygpIHtcblx0ICAgICAgICBfTG9nMi5kZWZhdWx0LmluZm8oXCJjYW5jZWxpbmcgZXhpc3RpbmcgYWNjZXNzIHRva2VuIHRpbWVyc1wiKTtcblx0ICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmNhbmNlbCgpO1xuXHQgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5jYW5jZWwoKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQWNjZXNzVG9rZW5FdmVudHMucHJvdG90eXBlLmFkZEFjY2Vzc1Rva2VuRXhwaXJpbmcgPSBmdW5jdGlvbiBhZGRBY2Nlc3NUb2tlbkV4cGlyaW5nKGNiKSB7XG5cdCAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5hZGRIYW5kbGVyKGNiKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQWNjZXNzVG9rZW5FdmVudHMucHJvdG90eXBlLnJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJpbmcgPSBmdW5jdGlvbiByZW1vdmVBY2Nlc3NUb2tlbkV4cGlyaW5nKGNiKSB7XG5cdCAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5yZW1vdmVIYW5kbGVyKGNiKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQWNjZXNzVG9rZW5FdmVudHMucHJvdG90eXBlLmFkZEFjY2Vzc1Rva2VuRXhwaXJlZCA9IGZ1bmN0aW9uIGFkZEFjY2Vzc1Rva2VuRXhwaXJlZChjYikge1xuXHQgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5hZGRIYW5kbGVyKGNiKTtcblx0ICAgIH07XG5cdFxuXHQgICAgQWNjZXNzVG9rZW5FdmVudHMucHJvdG90eXBlLnJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJlZCA9IGZ1bmN0aW9uIHJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJlZChjYikge1xuXHQgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5yZW1vdmVIYW5kbGVyKGNiKTtcblx0ICAgIH07XG5cdFxuXHQgICAgcmV0dXJuIEFjY2Vzc1Rva2VuRXZlbnRzO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBBY2Nlc3NUb2tlbkV2ZW50cztcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfTG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdHZhciBfTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvZyk7XG5cdFxuXHR2YXIgX0dsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHR2YXIgX0dsb2JhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9HbG9iYWwpO1xuXHRcblx0dmFyIF9FdmVudDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcblx0XG5cdHZhciBfRXZlbnQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRXZlbnQyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0gLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXHQvLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXHRcblx0dmFyIFRpbWVyID0gZnVuY3Rpb24gKF9FdmVudCkge1xuXHQgICAgX2luaGVyaXRzKFRpbWVyLCBfRXZlbnQpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIFRpbWVyKG5hbWUpIHtcblx0ICAgICAgICB2YXIgdGltZXIgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBfR2xvYmFsMi5kZWZhdWx0LnRpbWVyIDogYXJndW1lbnRzWzFdO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZXIpO1xuXHRcblx0ICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfRXZlbnQuY2FsbCh0aGlzLCBuYW1lKSk7XG5cdFxuXHQgICAgICAgIF90aGlzLl90aW1lciA9IHRpbWVyO1xuXHQgICAgICAgIHJldHVybiBfdGhpcztcblx0ICAgIH1cblx0XG5cdCAgICBUaW1lci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQoZHVyYXRpb24pIHtcblx0ICAgICAgICB0aGlzLmNhbmNlbCgpO1xuXHRcblx0ICAgICAgICBpZiAoZHVyYXRpb24gPD0gMCkge1xuXHQgICAgICAgICAgICBkdXJhdGlvbiA9IDE7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB0aGlzLl90aW1lckhhbmRsZSA9IHRoaXMuX3RpbWVyLnNldFRpbWVvdXQodGhpcy5fY2FsbGJhY2suYmluZCh0aGlzKSwgZHVyYXRpb24gKiAxMDAwKTtcblx0ICAgIH07XG5cdFxuXHQgICAgVGltZXIucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbCgpIHtcblx0ICAgICAgICBpZiAodGhpcy5fdGltZXJIYW5kbGUpIHtcblx0ICAgICAgICAgICAgdGhpcy5fdGltZXIuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVySGFuZGxlKTtcblx0ICAgICAgICAgICAgdGhpcy5fdGltZXJIYW5kbGUgPSBudWxsO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgVGltZXIucHJvdG90eXBlLl9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjaygpIHtcblx0ICAgICAgICB0aGlzLl90aW1lckhhbmRsZSA9IG51bGw7XG5cdCAgICAgICAgX0V2ZW50LnByb3RvdHlwZS5yYWlzZS5jYWxsKHRoaXMpO1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gVGltZXI7XG5cdH0oX0V2ZW50My5kZWZhdWx0KTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFRpbWVyO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDM4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX0xvZyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX0xvZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2cpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9IC8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Ly8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblx0XG5cdHZhciBFdmVudCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEV2ZW50KG5hbWUpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnQpO1xuXHRcblx0ICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcblx0ICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSBbXTtcblx0ICAgIH1cblx0XG5cdCAgICBFdmVudC5wcm90b3R5cGUuYWRkSGFuZGxlciA9IGZ1bmN0aW9uIGFkZEhhbmRsZXIoY2IpIHtcblx0ICAgICAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYik7XG5cdCAgICB9O1xuXHRcblx0ICAgIEV2ZW50LnByb3RvdHlwZS5yZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24gcmVtb3ZlSGFuZGxlcihjYikge1xuXHQgICAgICAgIHZhciBpZHggPSB0aGlzLl9jYWxsYmFja3MuZmluZEluZGV4KGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBpdGVtID09PSBjYjtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICBpZiAoaWR4ID49IDApIHtcblx0ICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLnNwbGljZShpZHgsIDEpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgRXZlbnQucHJvdG90eXBlLnJhaXNlID0gZnVuY3Rpb24gcmFpc2UoKSB7XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiUmFpc2luZyBldmVudDogXCIgKyB0aGlzLl9uYW1lKTtcblx0ICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG5cdCAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSB0aGlzLl9jYWxsYmFja3NbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2IgPSBfc3RlcC52YWx1ZTtcblx0XG5cdCAgICAgICAgICAgICAgICBjYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcblx0ICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcblx0ICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdFxuXHQgICAgcmV0dXJuIEV2ZW50O1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBFdmVudDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9Mb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9Mb2cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9nKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfSAvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cdC8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cdFxuXHR2YXIgU2lsZW50UmVuZXdTZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gU2lsZW50UmVuZXdTZXJ2aWNlKHVzZXJNYW5hZ2VyKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbGVudFJlbmV3U2VydmljZSk7XG5cdFxuXHQgICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyID0gdXNlck1hbmFnZXI7XG5cdCAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLmFkZEFjY2Vzc1Rva2VuRXhwaXJpbmcodGhpcy5fdG9rZW5FeHBpcmluZy5iaW5kKHRoaXMpKTtcblx0ICAgIH1cblx0XG5cdCAgICBTaWxlbnRSZW5ld1NlcnZpY2UucHJvdG90eXBlLl90b2tlbkV4cGlyaW5nID0gZnVuY3Rpb24gX3Rva2VuRXhwaXJpbmcoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0XG5cdCAgICAgICAgX0xvZzIuZGVmYXVsdC5pbmZvKFwiU2lsZW50UmVuZXdTZXJ2aWNlIGF1dG9tYXRpY2FsbHkgcmVuZXdpbmcgYWNjZXNzIHRva2VuXCIpO1xuXHRcblx0ICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5zaWduaW5TaWxlbnQoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG5cdCAgICAgICAgICAgIF9Mb2cyLmRlZmF1bHQuaW5mbyhcIlNpbGVudCB0b2tlbiByZW5ld2FsIHN1Y2Nlc3NmdWxcIik7XG5cdCAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgICAgICBfTG9nMi5kZWZhdWx0LmVycm9yKFwiRXJyb3IgZnJvbSBzaWduaW5TaWxlbnQ6XCIsIGVyci5tZXNzYWdlKTtcblx0ICAgICAgICAgICAgX3RoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VTaWxlbnRSZW5ld0Vycm9yKGVycik7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiBTaWxlbnRSZW5ld1NlcnZpY2U7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFNpbGVudFJlbmV3U2VydmljZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH1cbi8qKioqKiovIF0pXG59KTtcbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZkMlZpY0dGamF5OTFibWwyWlhKellXeE5iMlIxYkdWRVpXWnBibWwwYVc5dUlpd2lkMlZpY0dGamF6b3ZMeTkzWldKd1lXTnJMMkp2YjNSemRISmhjQ0JtWlRkbFpHUTJOVGMxWlRsa01XWmpZekZqTXlJc0luZGxZbkJoWTJzNkx5OHZMaTlwYm1SbGVDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12VEc5bkxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTlQYVdSalEyeHBaVzUwTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OVBhV1JqUTJ4cFpXNTBVMlYwZEdsdVozTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDFkbFlsTjBiM0poWjJWVGRHRjBaVk4wYjNKbExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTlIYkc5aVlXd3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDFKbGMzQnZibk5sVm1Gc2FXUmhkRzl5TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OU5aWFJoWkdGMFlWTmxjblpwWTJVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMHB6YjI1VFpYSjJhV05sTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OVZjMlZ5U1c1bWIxTmxjblpwWTJVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMFZ5Y205eVVtVnpjRzl1YzJVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMHB2YzJWVmRHbHNMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2YW5OeWMyRnphV2R1TDJ4cFlpOXFjM0p6WVhOcFoyNHVhbk1pTENKM1pXSndZV05yT2k4dkx5aDNaV0p3WVdOcktTOStMMjV2WkdVdGJHbGljeTFpY205M2MyVnlMMzR2WW5WbVptVnlMMmx1WkdWNExtcHpJaXdpZDJWaWNHRmphem92THk4b2QyVmljR0ZqYXlrdmZpOXViMlJsTFd4cFluTXRZbkp2ZDNObGNpOStMMkoxWm1abGNpOStMMkpoYzJVMk5DMXFjeTlzYVdJdllqWTBMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OG9kMlZpY0dGamF5a3ZmaTl1YjJSbExXeHBZbk10WW5KdmQzTmxjaTkrTDJKMVptWmxjaTkrTDJsbFpXVTNOVFF2YVc1a1pYZ3Vhbk1pTENKM1pXSndZV05yT2k4dkx5aDNaV0p3WVdOcktTOStMMjV2WkdVdGJHbGljeTFpY205M2MyVnlMMzR2WW5WbVptVnlMMzR2YVhOaGNuSmhlUzlwYm1SbGVDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12VTJsbmJtbHVVbVZ4ZFdWemRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12VlhKc1ZYUnBiR2wwZVM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZVMmxuYm1sdVUzUmhkR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwxTjBZWFJsTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OXlZVzVrYjIwdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMU5wWjI1cGJsSmxjM0J2Ym5ObExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTlUYVdkdWIzVjBVbVZ4ZFdWemRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12VTJsbmJtOTFkRkpsYzNCdmJuTmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5SmJrMWxiVzl5ZVZkbFlsTjBiM0poWjJVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMVZ6WlhKTllXNWhaMlZ5TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OVZjMlZ5VFdGdVlXZGxjbE5sZEhScGJtZHpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5U1pXUnBjbVZqZEU1aGRtbG5ZWFJ2Y2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZVRzl3ZFhCT1lYWnBaMkYwYjNJdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMUJ2Y0hWd1YybHVaRzkzTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OUpSbkpoYldWT1lYWnBaMkYwYjNJdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMGxHY21GdFpWZHBibVJ2ZHk1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZWWE5sY2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZWWE5sY2sxaGJtRm5aWEpGZG1WdWRITXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDBGalkyVnpjMVJ2YTJWdVJYWmxiblJ6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OVVhVzFsY2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZSWFpsYm5RdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMU5wYkdWdWRGSmxibVYzVTJWeWRtbGpaUzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZETzBGQlEwUXNUenRCUTFaQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMSFZDUVVGbE8wRkJRMlk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN096dEJRVWRCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN096czdPenM3T3pzN096czdPenRCUTI1RFR5eExRVUZOTEc5Q1FVRk5MRzlDUVVGUkxFTkJRVklzUTBGQldqdEJRVU5CTEV0QlFVMHNhME5CUVdFc2IwSkJRVkVzUTBGQlVpeERRVUZ1UWp0QlFVTkJMRXRCUVUwc2MwUkJRWFZDTEc5Q1FVRlJMRU5CUVZJc1EwRkJOMEk3UVVGRFFTeExRVUZOTEd0RVFVRnhRaXh2UWtGQlVTeEZRVUZTTEVOQlFUTkNPMEZCUTBFc1MwRkJUU3h2UTBGQll5eHZRa0ZCVVN4RlFVRlNMRU5CUVhCQ08wRkJRMEVzUzBGQlRTeG5SRUZCYjBJc2IwSkJRVkVzUlVGQlVpeERRVUV4UWp0QlFVTkJMRXRCUVUwc05FTkJRV3RDTEc5Q1FVRlJMRU5CUVZJc1EwRkJlRUk3TzIxQ1FVVlJPMEZCUTFnc1lVRkVWenRCUVVWWUxESkNRVVpYTzBGQlIxZ3NLME5CU0ZjN1FVRkpXQ3d5UTBGS1Z6dEJRVXRZTERaQ1FVeFhPMEZCVFZnc2VVTkJUbGM3UVVGUFdEdEJRVkJYTEVVN096czdPenM3T3pzN096czdPenM3T3pzN1FVTlNaaXhMUVVGSkxGbEJRVms3UVVGRFdpeFRRVVJaTEd0Q1FVTk9MRU5CUVVVc1EwRkVTVHRCUVVWYUxGTkJSbGtzYTBKQlJVNHNRMEZCUlN4RFFVWkpPMEZCUjFvc1ZVRklXU3h0UWtGSFRDeERRVUZGTzBGQlNFY3NSVUZCYUVJN08wRkJUVUVzUzBGQlRTeFBRVUZQTEVOQlFXSTdRVUZEUVN4TFFVRk5MRkZCUVZFc1EwRkJaRHRCUVVOQkxFdEJRVTBzVDBGQlR5eERRVUZpTzBGQlEwRXNTMEZCVFN4UFFVRlBMRU5CUVdJN08wRkJSVUVzUzBGQlNTeGxRVUZLTzBGQlEwRXNTMEZCU1N4alFVRktPenRMUVVWeFFpeEhPenM3T3p0VFFVMVdMRXNzYjBKQlFVODdRVUZEVml4cFFrRkJVU3hKUVVGU08wRkJRMEVzYTBKQlFWTXNVMEZCVkR0QlFVTklMRTA3TzFOQk1FSk5MRWtzYlVKQlFXRTdRVUZEYUVJc1lVRkJTU3hUUVVGVExFbEJRV0lzUlVGQmEwSTdRVUZCUVN3clEwRkVVQ3hKUVVOUE8wRkJSRkFzY1VKQlEwODdRVUZCUVRzN1FVRkRaQ3h2UWtGQlR5eEpRVUZRTEVOQlFWa3NTMEZCV2l4RFFVRnJRaXhOUVVGc1FpeEZRVUV3UWl4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGWUxFTkJRVEZDTzBGQlEwZzdRVUZEU2l4Tk96dFRRVU5OTEVrc2JVSkJRV0U3UVVGRGFFSXNZVUZCU1N4VFFVRlRMRWxCUVdJc1JVRkJhMEk3UVVGQlFTeG5SRUZFVUN4SlFVTlBPMEZCUkZBc2NVSkJRMDg3UVVGQlFUczdRVUZEWkN4dlFrRkJUeXhKUVVGUUxFTkJRVmtzUzBGQldpeERRVUZyUWl4TlFVRnNRaXhGUVVFd1FpeE5RVUZOTEVsQlFVNHNRMEZCVnl4SlFVRllMRU5CUVRGQ08wRkJRMGc3UVVGRFNpeE5PenRUUVVOTkxFc3NiMEpCUVdNN1FVRkRha0lzWVVGQlNTeFRRVUZUTEV0QlFXSXNSVUZCYlVJN1FVRkJRU3huUkVGRVVDeEpRVU5QTzBGQlJGQXNjVUpCUTA4N1FVRkJRVHM3UVVGRFppeHZRa0ZCVHl4TFFVRlFMRU5CUVdFc1MwRkJZaXhEUVVGdFFpeE5RVUZ1UWl4RlFVRXlRaXhOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZZTEVOQlFUTkNPMEZCUTBnN1FVRkRTaXhOT3pzN096WkNRV2hFYVVJN1FVRkJReXh2UWtGQlR5eEpRVUZRTzBGQlFWazdPenMyUWtGRFdqdEJRVUZETEc5Q1FVRlBMRXRCUVZBN1FVRkJZVHM3T3paQ1FVTm1PMEZCUVVNc2IwSkJRVThzU1VGQlVEdEJRVUZaT3pzN05rSkJRMkk3UVVGQlF5eHZRa0ZCVHl4SlFVRlFPMEZCUVZrN096czJRa0ZQWWp0QlFVTmtMRzlDUVVGUExFdEJRVkE3UVVGRFNDeFZPekpDUVVOblFpeExMRVZCUVUwN1FVRkRia0lzYVVKQlFVa3NVVUZCVVN4TFFVRlNMRWxCUVdsQ0xGTkJRVk1zU1VGQk9VSXNSVUZCYlVNN1FVRkRMMElzZVVKQlFWRXNTMEZCVWp0QlFVTklMR05CUmtRc1RVRkhTenRCUVVORUxIVkNRVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMRzFDUVVGV0xFTkJRVTQ3UVVGRFNEdEJRVU5LT3pzN05rSkJSV3RDTzBGQlEyWXNiMEpCUVU4c1RVRkJVRHRCUVVOSUxGVTdNa0pCUTJsQ0xFc3NSVUZCVFR0QlFVTndRaXhwUWtGQlNTeE5RVUZOTEVsQlFVNHNTVUZCWXl4TlFVRk5MRWxCUVhCQ0xFbEJRVFJDTEUxQlFVMHNTMEZCZEVNc1JVRkJORU03UVVGRGVFTXNNRUpCUVZNc1MwRkJWRHRCUVVOSUxHTkJSa1FzVFVGSFN6dEJRVU5FTEhWQ1FVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxHZENRVUZXTEVOQlFVNDdRVUZEU0R0QlFVTktPenM3T3pzN2JVSkJha05uUWl4SE96czdRVUZ2UkhKQ0xFdEJRVWtzUzBGQlNqczdPenM3T3pzN096czdPenM3T3p0QlEyeEZRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN096czdPMHRCUlhGQ0xGVTdRVUZEYWtJc01rSkJRVEpDTzBGQlFVRXNZVUZCWml4UlFVRmxMSGxFUVVGS0xFVkJRVWs3TzBGQlFVRTdPMEZCUTNaQ0xHRkJRVWtzWjBSQlFVb3NSVUZCTkVNN1FVRkRlRU1zYTBKQlFVc3NVMEZCVEN4SFFVRnBRaXhSUVVGcVFqdEJRVU5JTEZWQlJrUXNUVUZIU3p0QlFVTkVMR3RDUVVGTExGTkJRVXdzUjBGQmFVSXNhVU5CUVhWQ0xGRkJRWFpDTEVOQlFXcENPMEZCUTBnN1FVRkRTanM3TUVKQmJVSkVMRzFDTEd0RFFVbEZPMEZCUVVFN08wRkJRVUVzTUVWQlJtbEdMRVZCUldwR096dEJRVUZCTEdGQlNFVXNZVUZIUml4UlFVaEZMR0ZCUjBZN1FVRkJRU3hoUVVocFFpeExRVWRxUWl4UlFVaHBRaXhMUVVkcVFqdEJRVUZCTEdGQlNIZENMRmxCUjNoQ0xGRkJTSGRDTEZsQlIzaENPMEZCUVVFc1lVRkljME1zU1VGSGRFTXNVVUZJYzBNc1NVRkhkRU03UVVGQlFTeGhRVVpGTEUxQlJVWXNVVUZHUlN4TlFVVkdPMEZCUVVFc1lVRkdWU3hQUVVWV0xGRkJSbFVzVDBGRlZqdEJRVUZCTEdGQlJtMUNMRTlCUlc1Q0xGRkJSbTFDTEU5QlJXNUNPMEZCUVVFc1lVRkdORUlzVlVGRk5VSXNVVUZHTkVJc1ZVRkZOVUk3UVVGQlFTeGhRVVozUXl4aFFVVjRReXhSUVVaM1F5eGhRVVY0UXp0QlFVRkJMR0ZCUm5WRUxGVkJSWFpFTEZGQlJuVkVMRlZCUlhaRU8wRkJRVUVzWVVGR2JVVXNWVUZGYmtVc1VVRkdiVVVzVlVGRmJrVTdRVUZCUVN4aFFVUkZMRlZCUTBZN08wRkJRMFVzZFVKQlFVa3NTVUZCU2l4RFFVRlRMR2REUVVGVU96dEJRVVZCTEdGQlFVa3NXVUZCV1N4TFFVRkxMRk5CUVV3c1EwRkJaU3hUUVVFdlFqdEJRVU5CTEhsQ1FVRm5RaXhwUWtGQmFVSXNTMEZCU3l4VFFVRk1MRU5CUVdVc1lVRkJhRVE3UVVGRFFTeHBRa0ZCVVN4VFFVRlRMRXRCUVVzc1UwRkJUQ3hEUVVGbExFdEJRV2hETzBGQlEwRXNkMEpCUVdVc1owSkJRV2RDTEV0QlFVc3NVMEZCVEN4RFFVRmxMRmxCUVRsRE96czdRVUZIUVN4clFrRkJVeXhWUVVGVkxFdEJRVXNzVTBGQlRDeERRVUZsTEUxQlFXeERPMEZCUTBFc2JVSkJRVlVzVjBGQlZ5eExRVUZMTEZOQlFVd3NRMEZCWlN4UFFVRndRenRCUVVOQkxHMUNRVUZWTEZkQlFWY3NTMEZCU3l4VFFVRk1MRU5CUVdVc1QwRkJjRU03UVVGRFFTeHpRa0ZCWVN4alFVRmpMRXRCUVVzc1UwRkJUQ3hEUVVGbExGVkJRVEZETzBGQlEwRXNjMEpCUVdFc1kwRkJZeXhMUVVGTExGTkJRVXdzUTBGQlpTeFZRVUV4UXpzN1FVRkZRU3hoUVVGSkxGbEJRVmtzUzBGQlN5eFRRVUZNTEVOQlFXVXNVMEZCTDBJN08wRkJSVUVzWjBKQlFVOHNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeDNRa0ZCZEVJc1IwRkJhVVFzU1VGQmFrUXNRMEZCYzBRc1pVRkJUenRCUVVOb1JTd3lRa0ZCU1N4SlFVRktMRU5CUVZNc2FVTkJRVlFzUlVGQk5FTXNSMEZCTlVNN08wRkJSVUVzYVVKQlFVa3NWVUZCVlN3MFFrRkJhMEk3UVVGRE5VSXNlVUpCUkRSQ08wRkJSVFZDTEhGRFFVWTBRanRCUVVjMVFpd3lRMEZJTkVJN1FVRkpOVUlzTmtOQlNqUkNPMEZCU3pWQ0xEWkNRVXcwUWp0QlFVMDFRaXd5UWtGT05FSTdRVUZQTlVJc2NVTkJVRFJDTzBGQlVUVkNMQ3RDUVZJMFFpeEZRVkZ3UWl4blFrRlNiMElzUlVGUldDeG5Ra0ZTVnl4RlFWRkdMSE5DUVZKRkxFVkJVVlVzTkVKQlVsWXNSVUZSZVVJc2MwSkJVbnBDTEVWQlVYRkRPMEZCVW5KRExHTkJRV3hDTEVOQlFXUTdPMEZCVjBFc2FVSkJRVWtzVVVGQlVTeFJRVUZSTEV0QlFYQkNPMEZCUTBFc01FSkJRV0VzWTBGQll5eE5RVUZMTEZkQlFXaERPenRCUVVWQkxHOUNRVUZQTEZkQlFWY3NSMEZCV0N4RFFVRmxMRTFCUVUwc1JVRkJja0lzUlVGQmVVSXNUVUZCVFN4bFFVRk9MRVZCUVhwQ0xFVkJRV3RFTEVsQlFXeEVMRU5CUVhWRUxGbEJRVTA3UVVGRGFFVXNkMEpCUVU4c1QwRkJVRHRCUVVOSUxHTkJSazBzUTBGQlVEdEJRVWRJTEZWQmNFSk5MRU5CUVZBN1FVRnhRa2dzVFRzN01FSkJSVVFzY1VJc2EwTkJRWE5DTEVjc1JVRkJTeXhWTEVWQlFWazdRVUZCUVRzN1FVRkRia01zZFVKQlFVa3NTVUZCU2l4RFFVRlRMR3REUVVGVU96dEJRVVZCTEdGQlFVa3NWMEZCVnl3MlFrRkJiVUlzUjBGQmJrSXNRMEZCWmpzN1FVRkZRU3hoUVVGSkxFTkJRVU1zVTBGQlV5eExRVUZrTEVWQlFYRkNPMEZCUTJwQ0xESkNRVUZKTEV0QlFVb3NRMEZCVlN4elFrRkJWanRCUVVOQkxHOUNRVUZQTEZGQlFWRXNUVUZCVWl4RFFVRmxMRWxCUVVrc1MwRkJTaXhEUVVGVkxITkNRVUZXTEVOQlFXWXNRMEZCVUR0QlFVTklPenRCUVVWRUxITkNRVUZoTEdOQlFXTXNTMEZCU3l4WFFVRm9RenM3UVVGRlFTeG5Ra0ZCVHl4WFFVRlhMRTFCUVZnc1EwRkJhMElzVTBGQlV5eExRVUV6UWl4RlFVRnJReXhKUVVGc1F5eERRVUYxUXl3MlFrRkJjVUk3UVVGREwwUXNhVUpCUVVrc1EwRkJReXhwUWtGQlRDeEZRVUYzUWp0QlFVTndRaXdyUWtGQlNTeExRVUZLTEVOQlFWVXNiME5CUVZZN1FVRkRRU3gxUWtGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN4dlEwRkJWaXhEUVVGT08wRkJRMGc3TzBGQlJVUXNhVUpCUVVrc1VVRkJVU3h6UWtGQldTeHBRa0ZCV2l4RFFVRTRRaXhwUWtGQk9VSXNRMEZCV2pzN1FVRkZRU3d5UWtGQlNTeEpRVUZLTEVOQlFWTXNhMFJCUVZRN1FVRkRRU3h2UWtGQlR5eFBRVUZMTEZWQlFVd3NRMEZCWjBJc2MwSkJRV2hDTEVOQlFYVkRMRXRCUVhaRExFVkJRVGhETEZGQlFUbERMRU5CUVZBN1FVRkRTQ3hWUVZaTkxFTkJRVkE3UVVGWFNDeE5PenN3UWtGRlJDeHZRaXh0UTBGRlJUdEJRVUZCT3p0QlFVRkJMREpGUVVaeFJTeEZRVVZ5UlRzN1FVRkJRU3hoUVVadlFpeGhRVVZ3UWl4VFFVWnZRaXhoUVVWd1FqdEJRVUZCTEdGQlJtMURMRWxCUlc1RExGTkJSbTFETEVsQlJXNURPMEZCUVVFc1lVRkdlVU1zZDBKQlJYcERMRk5CUm5sRExIZENRVVY2UXp0QlFVRkJMR0ZCUkVVc1ZVRkRSanM3UVVGRFJTeDFRa0ZCU1N4SlFVRktMRU5CUVZNc2FVTkJRVlE3TzBGQlJVRXNiME5CUVRKQ0xEUkNRVUUwUWl4TFFVRkxMRk5CUVV3c1EwRkJaU3gzUWtGQmRFVTdPMEZCUlVFc1owSkJRVThzUzBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXh4UWtGQmRFSXNSMEZCT0VNc1NVRkJPVU1zUTBGQmJVUXNaVUZCVHp0QlFVTTNSQ3d5UWtGQlNTeEpRVUZLTEVOQlFWTXNLMEpCUVZRc1JVRkJNRU1zUjBGQk1VTTdPMEZCUlVFc2FVSkJRVWtzVlVGQlZTdzJRa0ZCYlVJN1FVRkROMElzZVVKQlJEWkNPMEZCUlRkQ0xEWkRRVVkyUWp0QlFVYzNRaXh0UlVGSU5rSTdRVUZKTjBJN1FVRktOa0lzWTBGQmJrSXNRMEZCWkRzN1FVRlBRU3hwUWtGQlNTeFJRVUZSTEZGQlFWRXNTMEZCY0VJN1FVRkRRU3hwUWtGQlNTeExRVUZLTEVWQlFWYzdRVUZEVUN3clFrRkJTU3hKUVVGS0xFTkJRVk1zYzBOQlFWUTdPMEZCUlVFc09FSkJRV0VzWTBGQll5eFBRVUZMTEZkQlFXaERPMEZCUTBFc05FSkJRVmNzUjBGQldDeERRVUZsTEUxQlFVMHNSVUZCY2tJc1JVRkJlVUlzVFVGQlRTeGxRVUZPTEVWQlFYcENPMEZCUTBnN08wRkJSVVFzYjBKQlFVOHNUMEZCVUR0QlFVTklMRlZCYmtKTkxFTkJRVkE3UVVGdlFrZ3NUVHM3TUVKQlJVUXNjMElzYlVOQlFYVkNMRWNzUlVGQlN5eFZMRVZCUVZrN1FVRkJRVHM3UVVGRGNFTXNkVUpCUVVrc1NVRkJTaXhEUVVGVExHMURRVUZVT3p0QlFVVkJMR0ZCUVVrc1YwRkJWeXc0UWtGQmIwSXNSMEZCY0VJc1EwRkJaanRCUVVOQkxHRkJRVWtzUTBGQlF5eFRRVUZUTEV0QlFXUXNSVUZCY1VJN1FVRkRha0lzTWtKQlFVa3NTVUZCU2l4RFFVRlRMSE5DUVVGVU96dEJRVVZCTEdsQ1FVRkpMRk5CUVZNc1MwRkJZaXhGUVVGdlFqdEJRVU5vUWl3clFrRkJTU3hKUVVGS0xFTkJRVk1zYjBKQlFWUXNSVUZCSzBJc1UwRkJVeXhMUVVGNFF6dEJRVU5CTEhkQ1FVRlBMRkZCUVZFc1RVRkJVaXhEUVVGbExEUkNRVUZyUWl4UlFVRnNRaXhEUVVGbUxFTkJRVkE3UVVGRFNEczdRVUZGUkN4dlFrRkJUeXhSUVVGUkxFOUJRVklzUTBGQlowSXNVVUZCYUVJc1EwRkJVRHRCUVVOSU96dEJRVVZFTEdGQlFVa3NWMEZCVnl4VFFVRlRMRXRCUVhoQ096dEJRVVZCTEhOQ1FVRmhMR05CUVdNc1MwRkJTeXhYUVVGb1F6czdRVUZGUVN4blFrRkJUeXhYUVVGWExFMUJRVmdzUTBGQmEwSXNVVUZCYkVJc1JVRkJORUlzU1VGQk5VSXNRMEZCYVVNc05rSkJRWEZDTzBGQlEzcEVMR2xDUVVGSkxFTkJRVU1zYVVKQlFVd3NSVUZCZDBJN1FVRkRjRUlzSzBKQlFVa3NTMEZCU2l4RFFVRlZMRzlEUVVGV08wRkJRMEVzZFVKQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc2IwTkJRVllzUTBGQlRqdEJRVU5JT3p0QlFVVkVMR2xDUVVGSkxGRkJRVkVzWjBKQlFVMHNhVUpCUVU0c1EwRkJkMElzYVVKQlFYaENMRU5CUVZvN08wRkJSVUVzTWtKQlFVa3NTVUZCU2l4RFFVRlRMR3RFUVVGVU8wRkJRMEVzYjBKQlFVOHNUMEZCU3l4VlFVRk1MRU5CUVdkQ0xIVkNRVUZvUWl4RFFVRjNReXhMUVVGNFF5eEZRVUVyUXl4UlFVRXZReXhEUVVGUU8wRkJRMGdzVlVGV1RTeERRVUZRTzBGQlYwZ3NUVHM3TUVKQlJVUXNaU3cwUWtGQlowSXNWU3hGUVVGWk8wRkJRM2hDTEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXcwUWtGQlZEczdRVUZGUVN4elFrRkJZU3hqUVVGakxFdEJRVXNzVjBGQmFFTTdPMEZCUlVFc1owSkJRVThzWjBKQlFVMHNaVUZCVGl4RFFVRnpRaXhWUVVGMFFpeEZRVUZyUXl4TFFVRkxMRkZCUVV3c1EwRkJZeXhoUVVGb1JDeERRVUZRTzBGQlEwZ3NUVHM3T3pzMlFrRjZTbWxDTzBGQlEyUXNiMEpCUVU4c1MwRkJTeXhSUVVGTUxFTkJRV01zVlVGQmNrSTdRVUZEU0RzN096WkNRVU5uUWp0QlFVTmlMRzlDUVVGUExFdEJRVXNzVVVGQlRDeERRVUZqTEZOQlFYSkNPMEZCUTBnN096czJRa0ZEYzBJN1FVRkRia0lzYjBKQlFVOHNTMEZCU3l4UlFVRk1MRU5CUVdNc1pVRkJja0k3UVVGRFNEczdPelpDUVVWak8wRkJRMWdzYjBKQlFVOHNTMEZCU3l4VFFVRmFPMEZCUTBnN096czJRa0ZEY1VJN1FVRkRiRUlzYjBKQlFVOHNTMEZCU3l4blFrRkJXanRCUVVOSU96czdPenM3YlVKQmVrSm5RaXhWT3pzN096czdPenM3T3pzN096czdPMEZEVm5KQ096czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN096czdPenRCUVVWQkxFdEJRVTBzYzBKQlFYTkNMR3REUVVFMVFqczdRVUZGUVN4TFFVRk5MSE5DUVVGelFpeFZRVUUxUWp0QlFVTkJMRXRCUVUwc1pVRkJaU3hSUVVGeVFqdEJRVU5CTEV0QlFVMHNkVUpCUVhWQ0xFVkJRVGRDTEVNN1FVRkRRU3hMUVVGTkxEUkNRVUUwUWl4TFFVRkxMRU5CUVhaRE96dExRVVZ4UWl4clFqdEJRVU5xUWl4dFEwRmxVVHRCUVVGQkxEQkZRVUZLTEVWQlFVazdPMEZCUVVFN08wRkJZa29zYTBKQllVa3NVVUZpU2l4VFFXRkpPMEZCUVVFc1lVRmlUeXhYUVdGUUxGRkJZazhzVjBGaFVEdEJRVUZCTEdGQlltOUNMRkZCWVhCQ0xGRkJZbTlDTEZGQllYQkNPMEZCUVVFc1lVRmlPRUlzVjBGaE9VSXNVVUZpT0VJc1YwRmhPVUk3UVVGQlFUczdRVUZZU2l4clFrRlhTU3hSUVZoS0xGTkJWMGs3UVVGQlFTeDFRMEZZVHl4aFFWZFFPMEZCUVVFc1lVRllUeXhoUVZkUUxITkRRVmgxUWl4dFFrRlhka0k3UVVGQlFTd3JRa0ZZTkVNc1MwRlhOVU03UVVGQlFTeGhRVmcwUXl4TFFWYzFReXc0UWtGWWIwUXNXVUZYY0VRN1FVRkJRU3hoUVZaS0xGbEJWVWtzVVVGV1NpeFpRVlZKTzBGQlFVRXNZVUZXVlN4M1FrRlZWaXhSUVZaVkxIZENRVlZXTzBGQlFVRTdPMEZCVWtvc1pVRlJTU3hSUVZKS0xFMUJVVWs3UVVGQlFTeGhRVkpKTEU5QlVVb3NVVUZTU1N4UFFWRktPMEZCUVVFc1lVRlNZU3hQUVZGaUxGRkJVbUVzVDBGUllqdEJRVUZCTEdGQlVuTkNMRlZCVVhSQ0xGRkJVbk5DTEZWQlVYUkNPMEZCUVVFc1lVRlNhME1zVlVGUmJFTXNVVUZTYTBNc1ZVRlJiRU03UVVGQlFTd3dRMEZPU2l4dlFrRk5TVHRCUVVGQk96dEJRVTVLTERaQ1FVMUpMSGxEUVU1dFFpeEpRVTF1UWp0QlFVRkJMSE5EUVU1NVFpeFpRVTE2UWp0QlFVRkJMR0ZCVG5sQ0xGbEJUWHBDTEhGRFFVNTNReXhKUVUxNFF6dEJRVUZCTEhWRFFVeEtMR0ZCUzBrN1FVRkJRU3hoUVV4S0xHRkJTMGtzYzBOQlRGa3NiMEpCUzFvN1FVRkJRU3h0UTBGTWEwTXNVMEZMYkVNN1FVRkJRU3hoUVV4clF5eFRRVXRzUXl4clEwRk1PRU1zZVVKQlN6bERPMEZCUVVFc2IwTkJTRW9zVlVGSFNUdEJRVUZCT3p0QlFVaEtMRzFDUVVkSkxHMURRVWhUTEc5RFFVZFVPMEZCUVVFc01FTkJSa29zY1VKQlJVazdRVUZCUVN4aFFVWktMSEZDUVVWSk8wRkJRVUVzTUVOQlJFb3NiVUpCUTBrN1FVRkJRU3hoUVVSS0xHMUNRVU5KT3p0QlFVRkJPenRCUVVWS0xHTkJRVXNzVlVGQlRDeEhRVUZyUWl4VFFVRnNRanRCUVVOQkxHTkJRVXNzV1VGQlRDeEhRVUZ2UWl4WFFVRndRanRCUVVOQkxHTkJRVXNzVTBGQlRDeEhRVUZwUWl4UlFVRnFRanRCUVVOQkxHTkJRVXNzV1VGQlRDeEhRVUZ2UWl4WFFVRndRanM3UVVGRlFTeGpRVUZMTEZWQlFVd3NSMEZCYTBJc1UwRkJiRUk3UVVGRFFTeGpRVUZMTEdOQlFVd3NSMEZCYzBJc1lVRkJkRUk3UVVGRFFTeGpRVUZMTEUxQlFVd3NSMEZCWXl4TFFVRmtPMEZCUTBFc1kwRkJTeXhoUVVGTUxFZEJRWEZDTEZsQlFYSkNPMEZCUTBFc1kwRkJTeXg1UWtGQlRDeEhRVUZwUXl4M1FrRkJha003TzBGQlJVRXNZMEZCU3l4UFFVRk1MRWRCUVdVc1RVRkJaanRCUVVOQkxHTkJRVXNzVVVGQlRDeEhRVUZuUWl4UFFVRm9RanRCUVVOQkxHTkJRVXNzVVVGQlRDeEhRVUZuUWl4UFFVRm9RanRCUVVOQkxHTkJRVXNzVjBGQlRDeEhRVUZ0UWl4VlFVRnVRanRCUVVOQkxHTkJRVXNzVjBGQlRDeEhRVUZ0UWl4VlFVRnVRanM3UVVGRlFTeGpRVUZMTEhGQ1FVRk1MRWRCUVRaQ0xFTkJRVU1zUTBGQlF5eHZRa0ZCTDBJN1FVRkRRU3hqUVVGTExHRkJRVXdzUjBGQmNVSXNRMEZCUXl4RFFVRkRMRmxCUVhaQ08wRkJRMEVzWTBGQlN5eGpRVUZNTEVkQlFYTkNMR0ZCUVhSQ08wRkJRMEVzWTBGQlN5eFZRVUZNTEVkQlFXdENMRk5CUVd4Q096dEJRVVZCTEdOQlFVc3NWMEZCVEN4SFFVRnRRaXhWUVVGdVFqdEJRVU5CTEdOQlFVc3NWVUZCVEN4SFFVRnJRaXhKUVVGSkxIRkNRVUZLTEVOQlFUQkNMRWxCUVRGQ0xFTkJRV3hDTzBGQlEwRXNZMEZCU3l4blFrRkJUQ3hIUVVGM1FpeEpRVUZKTEcxQ1FVRktMRU5CUVhkQ0xFbEJRWGhDTEVOQlFYaENPMEZCUTBnN096czdPenM3TmtKQlIyVTdRVUZEV2l4dlFrRkJUeXhMUVVGTExGVkJRVm83UVVGRFNDeFZPekpDUVVOaExFc3NSVUZCVHp0QlFVTnFRaXhwUWtGQlNTeERRVUZETEV0QlFVc3NWVUZCVml4RlFVRnpRanM3UVVGRmJFSXNjMEpCUVVzc1ZVRkJUQ3hIUVVGclFpeExRVUZzUWp0QlFVTklMR05CU0VRc1RVRkpTenRCUVVORUxDdENRVUZKTEV0QlFVb3NRMEZCVlN4elEwRkJWanRCUVVOQkxIVkNRVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMSE5EUVVGV0xFTkJRVTQ3UVVGRFNEdEJRVU5LT3pzN05rSkJRMjFDTzBGQlEyaENMRzlDUVVGUExFdEJRVXNzWTBGQldqdEJRVU5JT3pzN05rSkJRMWM3UVVGRFVpeHZRa0ZCVHl4TFFVRkxMRTFCUVZvN1FVRkRTRHM3T3paQ1FVTnJRanRCUVVObUxHOUNRVUZQTEV0QlFVc3NZVUZCV2p0QlFVTklPenM3TmtKQlF6aENPMEZCUXpOQ0xHOUNRVUZQTEV0QlFVc3NlVUpCUVZvN1FVRkRTRHM3T3pzN096WkNRVWxaTzBGQlExUXNiMEpCUVU4c1MwRkJTeXhQUVVGYU8wRkJRMGc3T3pzMlFrRkRZVHRCUVVOV0xHOUNRVUZQTEV0QlFVc3NVVUZCV2p0QlFVTklPenM3TmtKQlEyRTdRVUZEVml4dlFrRkJUeXhMUVVGTExGRkJRVm83UVVGRFNEczdPelpDUVVOblFqdEJRVU5pTEc5Q1FVRlBMRXRCUVVzc1YwRkJXanRCUVVOSU96czdOa0pCUTJkQ08wRkJRMklzYjBKQlFVOHNTMEZCU3l4WFFVRmFPMEZCUTBnN096czdPenMyUWtGSlpUdEJRVU5hTEc5Q1FVRlBMRXRCUVVzc1ZVRkJXanRCUVVOSUxGVTdNa0pCUTJFc1N5eEZRVUZQTzBGQlEycENMR2xDUVVGSkxFTkJRVU1zUzBGQlN5eFZRVUZXTEVWQlFYTkNPenRCUVVWc1FpeHpRa0ZCU3l4VlFVRk1MRWRCUVd0Q0xFdEJRV3hDTzBGQlEwZ3NZMEZJUkN4TlFVbExPMEZCUTBRc0swSkJRVWtzUzBGQlNpeERRVUZWTEhORFFVRldPMEZCUTBFc2RVSkJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNjME5CUVZZc1EwRkJUanRCUVVOSU8wRkJRMG83T3pzMlFrRkRhVUk3UVVGRFpDeHBRa0ZCU1N4RFFVRkRMRXRCUVVzc1dVRkJWaXhGUVVGM1FqdEJRVU53UWl4elFrRkJTeXhaUVVGTUxFZEJRVzlDTEV0QlFVc3NVMEZCZWtJN08wRkJSVUVzY1VKQlFVa3NTMEZCU3l4WlFVRk1MRWxCUVhGQ0xFdEJRVXNzV1VGQlRDeERRVUZyUWl4UFFVRnNRaXhEUVVFd1FpeHRRa0ZCTVVJc1NVRkJhVVFzUTBGQk1VVXNSVUZCTmtVN1FVRkRla1VzZVVKQlFVa3NTMEZCU3l4WlFVRk1MRU5CUVd0Q0xFdEJRVXNzV1VGQlRDeERRVUZyUWl4TlFVRnNRaXhIUVVFeVFpeERRVUUzUXl4TlFVRnZSQ3hIUVVGNFJDeEZRVUUyUkR0QlFVTjZSQ3c0UWtGQlN5eFpRVUZNTEVsQlFYRkNMRWRCUVhKQ08wRkJRMGc3UVVGRFJDd3dRa0ZCU3l4WlFVRk1MRWxCUVhGQ0xHMUNRVUZ5UWp0QlFVTklPMEZCUTBvN08wRkJSVVFzYjBKQlFVOHNTMEZCU3l4WlFVRmFPMEZCUTBnN096czdPenMyUWtGSFl6dEJRVU5ZTEc5Q1FVRlBMRXRCUVVzc1UwRkJXanRCUVVOSUxGVTdNa0pCUTFrc1N5eEZRVUZQTzBGQlEyaENMR3RDUVVGTExGTkJRVXdzUjBGQmFVSXNTMEZCYWtJN1FVRkRTRHM3T3paQ1FVVnBRanRCUVVOa0xHOUNRVUZQTEV0QlFVc3NXVUZCV2p0QlFVTklMRlU3TWtKQlEyVXNTeXhGUVVGUE8wRkJRMjVDTEd0Q1FVRkxMRmxCUVV3c1IwRkJiMElzUzBGQmNFSTdRVUZEU0RzN096czdPelpDUVVjd1FqdEJRVU4yUWl4dlFrRkJUeXhMUVVGTExIRkNRVUZhTzBGQlEwZzdPenMyUWtGRGEwSTdRVUZEWml4dlFrRkJUeXhMUVVGTExHRkJRVm83UVVGRFNEczdPelpDUVVOdFFqdEJRVU5vUWl4dlFrRkJUeXhMUVVGTExHTkJRVm83UVVGRFNEczdPelpDUVVObE8wRkJRMW9zYjBKQlFVOHNTMEZCU3l4VlFVRmFPMEZCUTBnN096czJRa0ZGWjBJN1FVRkRZaXh2UWtGQlR5eExRVUZMTEZkQlFWbzdRVUZEU0RzN096WkNRVU5sTzBGQlExb3NiMEpCUVU4c1MwRkJTeXhWUVVGYU8wRkJRMGc3T3pzMlFrRkRjVUk3UVVGRGJFSXNiMEpCUVU4c1MwRkJTeXhuUWtGQldqdEJRVU5JT3pzN096czdiVUpCTjBwblFpeHJRanM3T3pzN096czdPenM3T3p0QlExcHlRanM3T3p0QlFVTkJPenM3T3pzN096czdTMEZGY1VJc2IwSTdRVUZEYWtJc2NVTkJRV3RGTzBGQlFVRXNNRVZCUVVvc1JVRkJTVHM3UVVGQlFTeG5RMEZCY2tRc1RVRkJjVVE3UVVGQlFTeGhRVUZ5UkN4TlFVRnhSQ3dyUWtGQk5VTXNUMEZCTkVNN1FVRkJRU3dyUWtGQmJrTXNTMEZCYlVNN1FVRkJRU3hoUVVGdVF5eExRVUZ0UXl3NFFrRkJNMElzYVVKQlFVOHNXVUZCYjBJN08wRkJRVUU3TzBGQlF6bEVMR05CUVVzc1RVRkJUQ3hIUVVGakxFdEJRV1E3UVVGRFFTeGpRVUZMTEU5QlFVd3NSMEZCWlN4TlFVRm1PMEZCUTBnN08yOURRVVZFTEVjc1owSkJRVWtzUnl4RlFVRkxMRXNzUlVGQlR6dEJRVU5hTEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXd3UWtGQlZDeEZRVUZ4UXl4SFFVRnlRenM3UVVGRlFTeGxRVUZOTEV0QlFVc3NUMEZCVEN4SFFVRmxMRWRCUVhKQ096dEJRVVZCTEdOQlFVc3NUVUZCVEN4RFFVRlpMRTlCUVZvc1EwRkJiMElzUjBGQmNFSXNSVUZCZVVJc1MwRkJla0k3TzBGQlJVRXNaMEpCUVU4c1VVRkJVU3hQUVVGU0xFVkJRVkE3UVVGRFNDeE5PenR2UTBGRlJDeEhMR2RDUVVGSkxFY3NSVUZCU3p0QlFVTk1MSFZDUVVGSkxFbEJRVW9zUTBGQlV5d3dRa0ZCVkN4RlFVRnhReXhIUVVGeVF6czdRVUZGUVN4bFFVRk5MRXRCUVVzc1QwRkJUQ3hIUVVGbExFZEJRWEpDT3p0QlFVVkJMR0ZCUVVrc1QwRkJUeXhMUVVGTExFMUJRVXdzUTBGQldTeFBRVUZhTEVOQlFXOUNMRWRCUVhCQ0xFTkJRVmc3TzBGQlJVRXNaMEpCUVU4c1VVRkJVU3hQUVVGU0xFTkJRV2RDTEVsQlFXaENMRU5CUVZBN1FVRkRTQ3hOT3p0dlEwRkZSQ3hOTEcxQ1FVRlBMRWNzUlVGQlN6dEJRVU5TTEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXcyUWtGQlZDeEZRVUYzUXl4SFFVRjRRenM3UVVGRlFTeGxRVUZOTEV0QlFVc3NUMEZCVEN4SFFVRmxMRWRCUVhKQ096dEJRVVZCTEdGQlFVa3NUMEZCVHl4TFFVRkxMRTFCUVV3c1EwRkJXU3hQUVVGYUxFTkJRVzlDTEVkQlFYQkNMRU5CUVZnN1FVRkRRU3hqUVVGTExFMUJRVXdzUTBGQldTeFZRVUZhTEVOQlFYVkNMRWRCUVhaQ096dEJRVVZCTEdkQ1FVRlBMRkZCUVZFc1QwRkJVaXhEUVVGblFpeEpRVUZvUWl4RFFVRlFPMEZCUTBnc1RUczdiME5CUlVRc1ZTeDVRa0ZCWVR0QlFVTlVMSFZDUVVGSkxFbEJRVW9zUTBGQlV5eHBRMEZCVkRzN1FVRkZRU3hoUVVGSkxFOUJRVThzUlVGQldEczdRVUZGUVN4alFVRkxMRWxCUVVrc1VVRkJVU3hEUVVGcVFpeEZRVUZ2UWl4UlFVRlJMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFMUJRWGhETEVWQlFXZEVMRTlCUVdoRUxFVkJRWGxFTzBGQlEzSkVMR2xDUVVGSkxFMUJRVTBzUzBGQlN5eE5RVUZNTEVOQlFWa3NSMEZCV2l4RFFVRm5RaXhMUVVGb1FpeERRVUZXT3p0QlFVVkJMR2xDUVVGSkxFbEJRVWtzVDBGQlNpeERRVUZaTEV0QlFVc3NUMEZCYWtJc1RVRkJPRUlzUTBGQmJFTXNSVUZCY1VNN1FVRkRha01zYzBKQlFVc3NTVUZCVEN4RFFVRlZMRWxCUVVrc1RVRkJTaXhEUVVGWExFdEJRVXNzVDBGQlRDeERRVUZoTEUxQlFYaENMRU5CUVZZN1FVRkRTRHRCUVVOS096dEJRVVZFTEdkQ1FVRlBMRkZCUVZFc1QwRkJVaXhEUVVGblFpeEpRVUZvUWl4RFFVRlFPMEZCUTBnc1RUczdPenM3YlVKQmJrUm5RaXh2UWpzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTklja0lzUzBGQlRTeFJRVUZSTzBGQlExWTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFc1QwRkJXU3hWUVVGVkxFVkJRVllzUlVGQll5eFJRVUZrTEVWQlFYZENPMEZCUTJoRExHZENRVUZQTEZkQlFWY3NSVUZCV0N4RlFVRmxMRkZCUVdZc1EwRkJVRHRCUVVOSUxFMUJSa1FzUTBGRVZUdEJRVWxXTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJMRTlCUVdNc1ZVRkJWU3hOUVVGV0xFVkJRV3RDTzBGQlF6VkNMR2RDUVVGUExHRkJRV0VzVFVGQllpeERRVUZRTzBGQlEwZ3NUVUZHUkR0QlFVcFZMRVZCUVdRN08wRkJVMEVzUzBGQlNTeFZRVUZWTEV0QlFXUTdPMHRCUlhGQ0xFMDdPenM3TzFsQlJWWXNVU3gxUWtGQlZ6dEJRVU5rTEcxQ1FVRlZMRWxCUVZZN1FVRkRTQ3hOT3pzN096WkNRVVZ4UWp0QlFVTnNRaXhwUWtGQlNTeERRVUZETEU5QlFVd3NSVUZCWXp0QlFVTldMSGRDUVVGUExGRkJRVkE3UVVGRFNEdEJRVU5LT3pzN05rSkJRM2xDTzBGQlEzUkNMR2xDUVVGSkxFTkJRVU1zVDBGQlRDeEZRVUZqTzBGQlExWXNkMEpCUVU4c1dVRkJVRHRCUVVOSU8wRkJRMG83T3pzMlFrRkRNa0k3UVVGRGVFSXNhVUpCUVVrc1EwRkJReXhQUVVGTUxFVkJRV003UVVGRFZpeDNRa0ZCVHl4alFVRlFPMEZCUTBnN1FVRkRTanM3T3paQ1FVTXlRanRCUVVONFFpeHBRa0ZCU1N4RFFVRkRMRTlCUVV3c1JVRkJZenRCUVVOV0xIZENRVUZQTEdOQlFWQTdRVUZEU0R0QlFVTktPenM3TmtKQlEydENPMEZCUTJZc2FVSkJRVWtzUTBGQlF5eFBRVUZNTEVWQlFXTTdRVUZEVml4M1FrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqczdPenM3TzIxQ1FUbENaMElzVFR0QlFTdENjRUk3T3pzN096czdPenM3T3pzN1FVTXhRMFE3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenM3T3pzN08wRkJSVUVzUzBGQlRTeHBRa0ZCYVVJc1EwRkJReXhQUVVGRUxFVkJRVlVzVTBGQlZpeEZRVUZ4UWl4TFFVRnlRaXhGUVVFMFFpeExRVUUxUWl4RlFVRnRReXhMUVVGdVF5eEZRVUV3UXl4TFFVRXhReXhGUVVGcFJDeExRVUZxUkN4RlFVRjNSQ3hSUVVGNFJDeERRVUYyUWpzN1MwRkZjVUlzYVVJN1FVRkZha0lzWjBOQlFWa3NVVUZCV2l4RlFVRjVTRHRCUVVGQkxHRkJRVzVITEcxQ1FVRnRSenRCUVVGQkxHRkJRVFZFTEcxQ1FVRTBSRHRCUVVGQkxHRkJRWEpDTEZGQlFYRkNPenRCUVVGQk96dEJRVU55U0N4aFFVRkpMRU5CUVVNc1VVRkJUQ3hGUVVGbE8wRkJRMWdzTWtKQlFVa3NTMEZCU2l4RFFVRlZMSGxEUVVGV08wRkJRMEVzYlVKQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc1ZVRkJWaXhEUVVGT08wRkJRMGc3TzBGQlJVUXNZMEZCU3l4VFFVRk1MRWRCUVdsQ0xGRkJRV3BDTzBGQlEwRXNZMEZCU3l4blFrRkJUQ3hIUVVGM1FpeEpRVUZKTEcxQ1FVRktMRU5CUVhkQ0xFdEJRVXNzVTBGQk4wSXNRMEZCZUVJN1FVRkRRU3hqUVVGTExHZENRVUZNTEVkQlFYZENMRWxCUVVrc2JVSkJRVW9zUTBGQmQwSXNTMEZCU3l4VFFVRTNRaXhEUVVGNFFqdEJRVU5CTEdOQlFVc3NVMEZCVEN4SFFVRnBRaXhSUVVGcVFqdEJRVU5JT3p0cFEwRkZSQ3h6UWl4dFEwRkJkVUlzU3l4RlFVRlBMRkVzUlVGQlZUdEJRVUZCT3p0QlFVTndReXgxUWtGQlNTeEpRVUZLTEVOQlFWTXNNRU5CUVZRN08wRkJSVUVzWjBKQlFVOHNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeExRVUV4UWl4RlFVRnBReXhSUVVGcVF5eEZRVUV5UXl4SlFVRXpReXhEUVVGblJDeHZRa0ZCV1R0QlFVTXZSQ3d5UWtGQlNTeEpRVUZLTEVOQlFWTXNhVUpCUVZRN1FVRkRRU3h2UWtGQlR5eE5RVUZMTEdWQlFVd3NRMEZCY1VJc1MwRkJja0lzUlVGQk5FSXNVVUZCTlVJc1JVRkJjME1zU1VGQmRFTXNRMEZCTWtNc2IwSkJRVms3UVVGRE1VUXNLMEpCUVVrc1NVRkJTaXhEUVVGVExHdENRVUZVTzBGQlEwRXNkMEpCUVU4c1RVRkJTeXhqUVVGTUxFTkJRVzlDTEZGQlFYQkNMRVZCUVRoQ0xFbEJRVGxDTEVOQlFXMURMRzlDUVVGWk8wRkJRMnhFTEcxRFFVRkpMRWxCUVVvc1EwRkJVeXhyUWtGQlZEdEJRVU5CTERSQ1FVRlBMRkZCUVZBN1FVRkRTQ3hyUWtGSVRTeERRVUZRTzBGQlNVZ3NZMEZPVFN4RFFVRlFPMEZCVDBnc1ZVRlVUU3hEUVVGUU8wRkJWVWdzVFRzN2FVTkJSVVFzZFVJc2IwTkJRWGRDTEVzc1JVRkJUeXhSTEVWQlFWVTdRVUZEY2tNc2RVSkJRVWtzU1VGQlNpeERRVUZUTERKRFFVRlVPenRCUVVWQkxHRkJRVWtzVFVGQlRTeEZRVUZPTEV0QlFXRXNVMEZCVXl4TFFVRXhRaXhGUVVGcFF6dEJRVU0zUWl3eVFrRkJTU3hMUVVGS0xFTkJRVlVzYzBKQlFWWTdRVUZEUVN4dlFrRkJUeXhSUVVGUkxFMUJRVklzUTBGQlpTeEpRVUZKTEV0QlFVb3NRMEZCVlN4elFrRkJWaXhEUVVGbUxFTkJRVkE3UVVGRFNEczdPenM3UVVGTFJDeDFRa0ZCU1N4SlFVRktMRU5CUVZNc2FVSkJRVlE3UVVGRFFTeHJRa0ZCVXl4TFFVRlVMRWRCUVdsQ0xFMUJRVTBzU1VGQmRrSTdPMEZCUlVFc1lVRkJTU3hUUVVGVExFdEJRV0lzUlVGQmIwSTdRVUZEYUVJc01rSkJRVWtzU1VGQlNpeERRVUZUTEc5Q1FVRlVMRVZCUVN0Q0xGTkJRVk1zUzBGQmVFTTdRVUZEUVN4dlFrRkJUeXhSUVVGUkxFMUJRVklzUTBGQlpTdzBRa0ZCYTBJc1VVRkJiRUlzUTBGQlppeERRVUZRTzBGQlEwZzdPMEZCUlVRc1owSkJRVThzVVVGQlVTeFBRVUZTTEVOQlFXZENMRkZCUVdoQ0xFTkJRVkE3UVVGRFNDeE5PenRwUTBGRlJDeHZRaXhwUTBGQmNVSXNTeXhGUVVGUExGRXNSVUZCVlR0QlFVTnNReXgxUWtGQlNTeEpRVUZLTEVOQlFWTXNkME5CUVZRN08wRkJSVUVzWVVGQlNTeE5RVUZOTEVWQlFVNHNTMEZCWVN4VFFVRlRMRXRCUVRGQ0xFVkJRV2xETzBGQlF6ZENMREpDUVVGSkxFdEJRVW9zUTBGQlZTeHpRa0ZCVmp0QlFVTkJMRzlDUVVGUExGRkJRVkVzVFVGQlVpeERRVUZsTEVsQlFVa3NTMEZCU2l4RFFVRlZMSE5DUVVGV0xFTkJRV1lzUTBGQlVEdEJRVU5JT3p0QlFVVkVMR0ZCUVVrc1EwRkJReXhOUVVGTkxGTkJRVmdzUlVGQmMwSTdRVUZEYkVJc01rSkJRVWtzUzBGQlNpeERRVUZWTEhWQ1FVRldPMEZCUTBFc2IwSkJRVThzVVVGQlVTeE5RVUZTTEVOQlFXVXNTVUZCU1N4TFFVRktMRU5CUVZVc2RVSkJRVllzUTBGQlppeERRVUZRTzBGQlEwZzdPMEZCUlVRc1lVRkJTU3hEUVVGRExFMUJRVTBzVTBGQldDeEZRVUZ6UWp0QlFVTnNRaXd5UWtGQlNTeExRVUZLTEVOQlFWVXNkVUpCUVZZN1FVRkRRU3h2UWtGQlR5eFJRVUZSTEUxQlFWSXNRMEZCWlN4SlFVRkpMRXRCUVVvc1EwRkJWU3gxUWtGQlZpeERRVUZtTEVOQlFWQTdRVUZEU0RzN08wRkJSMFFzWVVGQlNTeERRVUZETEV0QlFVc3NVMEZCVEN4RFFVRmxMRk5CUVhCQ0xFVkJRU3RDTzBGQlF6TkNMR3RDUVVGTExGTkJRVXdzUTBGQlpTeFRRVUZtTEVkQlFUSkNMRTFCUVUwc1UwRkJha003UVVGRFNEczdRVUZHUkN4alFVbExMRWxCUVVrc1MwRkJTeXhUUVVGTUxFTkJRV1VzVTBGQlppeEpRVUUwUWl4TFFVRkxMRk5CUVV3c1EwRkJaU3hUUVVGbUxFdEJRVFpDTEUxQlFVMHNVMEZCYmtVc1JVRkJPRVU3UVVGREwwVXNLMEpCUVVrc1MwRkJTaXhEUVVGVkxHbEVRVUZXTzBGQlEwRXNkMEpCUVU4c1VVRkJVU3hOUVVGU0xFTkJRV1VzU1VGQlNTeExRVUZLTEVOQlFWVXNhVVJCUVZZc1EwRkJaaXhEUVVGUU8wRkJRMGc3TzBGQlJVUXNZVUZCU1N4RFFVRkRMRXRCUVVzc1UwRkJUQ3hEUVVGbExGTkJRWEJDTEVWQlFTdENPMEZCUXpOQ0xHdENRVUZMTEZOQlFVd3NRMEZCWlN4VFFVRm1MRWRCUVRKQ0xFMUJRVTBzVTBGQmFrTTdRVUZEU0RzN1FVRkdSQ3hqUVVsTExFbEJRVWtzUzBGQlN5eFRRVUZNTEVOQlFXVXNVMEZCWml4SlFVRTBRaXhMUVVGTExGTkJRVXdzUTBGQlpTeFRRVUZtTEV0QlFUWkNMRTFCUVUwc1UwRkJia1VzUlVGQk9FVTdRVUZETDBVc0swSkJRVWtzUzBGQlNpeERRVUZWTEdsRVFVRldPMEZCUTBFc2QwSkJRVThzVVVGQlVTeE5RVUZTTEVOQlFXVXNTVUZCU1N4TFFVRktMRU5CUVZVc2FVUkJRVllzUTBGQlppeERRVUZRTzBGQlEwZzdPenM3TzBGQlMwUXNkVUpCUVVrc1NVRkJTaXhEUVVGVExHbENRVUZVTzBGQlEwRXNhMEpCUVZNc1MwRkJWQ3hIUVVGcFFpeE5RVUZOTEVsQlFYWkNPenRCUVVWQkxHRkJRVWtzVTBGQlV5eExRVUZpTEVWQlFXOUNPMEZCUTJoQ0xESkNRVUZKTEVsQlFVb3NRMEZCVXl4dlFrRkJWQ3hGUVVFclFpeFRRVUZUTEV0QlFYaERPMEZCUTBFc2IwSkJRVThzVVVGQlVTeE5RVUZTTEVOQlFXVXNORUpCUVd0Q0xGRkJRV3hDTEVOQlFXWXNRMEZCVUR0QlFVTklPenRCUVVWRUxHRkJRVWtzVFVGQlRTeExRVUZPTEVsQlFXVXNRMEZCUXl4VFFVRlRMRkZCUVRkQ0xFVkJRWFZETzBGQlEyNURMREpDUVVGSkxFdEJRVW9zUTBGQlZTeG5RMEZCVmp0QlFVTkJMRzlDUVVGUExGRkJRVkVzVFVGQlVpeERRVUZsTEVsQlFVa3NTMEZCU2l4RFFVRlZMSGxDUVVGV0xFTkJRV1lzUTBGQlVEdEJRVU5JT3p0QlFVVkVMR0ZCUVVrc1EwRkJReXhOUVVGTkxFdEJRVkFzU1VGQlowSXNVMEZCVXl4UlFVRTNRaXhGUVVGMVF6dEJRVU51UXl3eVFrRkJTU3hMUVVGS0xFTkJRVlVzYjBOQlFWWTdRVUZEUVN4dlFrRkJUeXhSUVVGUkxFMUJRVklzUTBGQlpTeEpRVUZKTEV0QlFVb3NRMEZCVlN4cFEwRkJWaXhEUVVGbUxFTkJRVkE3UVVGRFNEczdRVUZGUkN4blFrRkJUeXhSUVVGUkxFOUJRVklzUTBGQlowSXNVVUZCYUVJc1EwRkJVRHRCUVVOSUxFMDdPMmxEUVVWRUxHTXNNa0pCUVdVc1VTeEZRVUZWTzBGQlFVRTdPMEZCUTNKQ0xIVkNRVUZKTEVsQlFVb3NRMEZCVXl4clEwRkJWRHM3UVVGRlFTeGhRVUZKTEZOQlFWTXNaVUZCWWl4RlFVRTRRanRCUVVNeFFpd3lRa0ZCU1N4SlFVRktMRU5CUVZNc2NVTkJRVlE3TzBGQlJVRXNjMEpCUVZNc1QwRkJWQ3hIUVVGdFFpeExRVUZMTEhGQ1FVRk1MRU5CUVRKQ0xGTkJRVk1zVDBGQmNFTXNRMEZCYmtJN08wRkJSVUVzYVVKQlFVa3NTMEZCU3l4VFFVRk1MRU5CUVdVc1dVRkJaaXhKUVVFclFpeFRRVUZUTEZsQlFUVkRMRVZCUVRCRU8wRkJRM1JFTEN0Q1FVRkpMRWxCUVVvc1EwRkJVeXh0UWtGQlZEczdRVUZGUVN4M1FrRkJUeXhMUVVGTExHZENRVUZNTEVOQlFYTkNMRk5CUVhSQ0xFTkJRV2RETEZOQlFWTXNXVUZCZWtNc1JVRkJkVVFzU1VGQmRrUXNRMEZCTkVRc2EwSkJRVlU3TzBGQlJYcEZMRGhDUVVGVExFOUJRVlFzUjBGQmJVSXNUMEZCU3l4WlFVRk1MRU5CUVd0Q0xGTkJRVk1zVDBGQk0wSXNSVUZCYjBNc1RVRkJjRU1zUTBGQmJrSTdRVUZEUVN4dFEwRkJTU3hKUVVGS0xFTkJRVk1zTmtOQlFWUXNSVUZCZDBRc1UwRkJVeXhQUVVGcVJUczdRVUZGUVN3MFFrRkJUeXhSUVVGUU8wRkJRMGdzYTBKQlRrMHNRMEZCVUR0QlFVOUlMR05CVmtRc1RVRlhTenRCUVVORUxDdENRVUZKTEVsQlFVb3NRMEZCVXl4MVFrRkJWRHRCUVVOSU8wRkJRMG9zVlVGdVFrUXNUVUZ2UWtzN1FVRkRSQ3d5UWtGQlNTeEpRVUZLTEVOQlFWTXNOa05CUVZRN1FVRkRTRHM3UVVGRlJDeG5Ra0ZCVHl4UlFVRlJMRTlCUVZJc1EwRkJaMElzVVVGQmFFSXNRMEZCVUR0QlFVTklMRTA3TzJsRFFVVkVMRmtzZVVKQlFXRXNUeXhGUVVGVExFOHNSVUZCVXp0QlFVTXpRaXhoUVVGSkxGTkJRVk1zVDBGQlR5eE5RVUZRTEVOQlFXTXNSVUZCWkN4RlFVRnJRaXhQUVVGc1FpeERRVUZpT3p0QlFVVkJMR05CUVVzc1NVRkJTU3hKUVVGVUxFbEJRV2xDTEU5QlFXcENMRVZCUVRCQ08wRkJRM1JDTEdsQ1FVRkpMRk5CUVZNc1VVRkJVU3hKUVVGU0xFTkJRV0k3UVVGRFFTeHBRa0ZCU1N4RFFVRkRMRTFCUVUwc1QwRkJUaXhEUVVGakxFMUJRV1FzUTBGQlRDeEZRVUUwUWp0QlFVTjRRaXd3UWtGQlV5eERRVUZETEUxQlFVUXNRMEZCVkR0QlFVTklPenRCUVVweFFqdEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRk5kRUlzYzBOQlFXdENMRTFCUVd4Q0xEaElRVUV3UWp0QlFVRkJMSGxDUVVGcVFpeExRVUZwUWpzN1FVRkRkRUlzZVVKQlFVa3NRMEZCUXl4UFFVRlBMRWxCUVZBc1EwRkJUQ3hGUVVGdFFqdEJRVU5tTEdkRFFVRlBMRWxCUVZBc1NVRkJaU3hMUVVGbU8wRkJRMGdzYzBKQlJrUXNUVUZIU3l4SlFVRkpMRTFCUVUwc1QwRkJUaXhEUVVGakxFOUJRVThzU1VGQlVDeERRVUZrTEVOQlFVb3NSVUZCYVVNN1FVRkRiRU1zTmtKQlFVa3NUMEZCVHl4SlFVRlFMRVZCUVdFc1QwRkJZaXhEUVVGeFFpeExRVUZ5UWl4SlFVRTRRaXhEUVVGc1F5eEZRVUZ4UXp0QlFVTnFReXh2UTBGQlR5eEpRVUZRTEVWQlFXRXNTVUZCWWl4RFFVRnJRaXhMUVVGc1FqdEJRVU5JTzBGQlEwb3NjMEpCU2trc1RVRkxRU3hKUVVGSkxFOUJRVThzU1VGQlVDeE5RVUZwUWl4TFFVRnlRaXhGUVVFMFFqdEJRVU0zUWl4blEwRkJUeXhKUVVGUUxFbEJRV1VzUTBGQlF5eFBRVUZQTEVsQlFWQXNRMEZCUkN4RlFVRmxMRXRCUVdZc1EwRkJaanRCUVVOSU8wRkJRMG83UVVGc1FuRkNPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGdFFucENPenRCUVVWRUxHZENRVUZQTEUxQlFWQTdRVUZEU0N4Tk96dHBRMEZGUkN4eFFpeHJRMEZCYzBJc1RTeEZRVUZSTzBGQlF6RkNMSFZDUVVGSkxFbEJRVW9zUTBGQlV5d3lSRUZCVkN4RlFVRnpSU3hOUVVGMFJUczdRVUZGUVN4aFFVRkpMRk5CUVZNc1QwRkJUeXhOUVVGUUxFTkJRV01zUlVGQlpDeEZRVUZyUWl4TlFVRnNRaXhEUVVGaU96dEJRVVZCTEdGQlFVa3NTMEZCU3l4VFFVRk1MRU5CUVdVc2NVSkJRVzVDTEVWQlFUQkRPMEZCUTNSRExEUkNRVUZsTEU5QlFXWXNRMEZCZFVJc1owSkJRVkU3UVVGRE0wSXNkMEpCUVU4c1QwRkJUeXhKUVVGUUxFTkJRVkE3UVVGRFNDeGpRVVpFT3p0QlFVbEJMREpDUVVGSkxFbEJRVW9zUTBGQlV5d3dRa0ZCVkN4RlFVRnhReXhOUVVGeVF6dEJRVU5JTEZWQlRrUXNUVUZQU3p0QlFVTkVMREpDUVVGSkxFbEJRVW9zUTBGQlV5dzRRa0ZCVkR0QlFVTklPenRCUVVWRUxHZENRVUZQTEUxQlFWQTdRVUZEU0N4Tk96dHBRMEZGUkN4bExEUkNRVUZuUWl4TExFVkJRVThzVVN4RlFVRlZPMEZCUXpkQ0xIVkNRVUZKTEVsQlFVb3NRMEZCVXl4dFEwRkJWRHM3UVVGRlFTeGhRVUZKTEZOQlFWTXNVVUZCWWl4RlFVRjFRanM3UVVGRmJrSXNhVUpCUVVrc1UwRkJVeXhaUVVGaUxFVkJRVEpDTzBGQlEzWkNMQ3RDUVVGSkxFbEJRVW9zUTBGQlV5eHpRMEZCVkR0QlFVTkJMSGRDUVVGUExFdEJRVXNzT0VKQlFVd3NRMEZCYjBNc1MwRkJjRU1zUlVGQk1rTXNVVUZCTTBNc1EwRkJVRHRCUVVOSU96dEJRVVZFTERKQ1FVRkpMRWxCUVVvc1EwRkJVeXh4UWtGQlZEdEJRVU5CTEc5Q1FVRlBMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNTMEZCZEVJc1JVRkJOa0lzVVVGQk4wSXNRMEZCVUR0QlFVTklPenRCUVVWRUxIVkNRVUZKTEVsQlFVb3NRMEZCVXl4NVFrRkJWRHRCUVVOQkxHZENRVUZQTEZGQlFWRXNUMEZCVWl4RFFVRm5RaXhSUVVGb1FpeERRVUZRTzBGQlEwZ3NUVHM3YVVOQlJVUXNPRUlzTWtOQlFTdENMRXNzUlVGQlR5eFJMRVZCUVZVN1FVRkJRVHM3UVVGRE5VTXNkVUpCUVVrc1NVRkJTaXhEUVVGVExHdEVRVUZVT3p0QlFVVkJMR2RDUVVGUExFdEJRVXNzWjBKQlFVd3NRMEZCYzBJc1MwRkJkRUlzUlVGQk5rSXNVVUZCTjBJc1JVRkJkVU1zU1VGQmRrTXNRMEZCTkVNc2IwSkJRVms3UVVGRE0wUXNiMEpCUVU4c1QwRkJTeXh2UWtGQlRDeERRVUV3UWl4UlFVRXhRaXhEUVVGUU8wRkJRMGdzVlVGR1RTeERRVUZRTzBGQlIwZ3NUVHM3YVVOQlJVUXNaMElzTmtKQlFXbENMRXNzUlVGQlR5eFJMRVZCUVZVN1FVRkJRVHM3UVVGRE9VSXNkVUpCUVVrc1NVRkJTaXhEUVVGVExHOURRVUZVT3p0QlFVVkJMR0ZCUVVrc1EwRkJReXhOUVVGTkxFdEJRVmdzUlVGQmEwSTdRVUZEWkN3eVFrRkJTU3hMUVVGS0xFTkJRVlVzYlVKQlFWWTdRVUZEUVN4dlFrRkJUeXhSUVVGUkxFMUJRVklzUTBGQlpTeEpRVUZKTEV0QlFVb3NRMEZCVlN4dFFrRkJWaXhEUVVGbUxFTkJRVkE3UVVGRFNEczdRVUZGUkN4aFFVRkpMRTFCUVUwc1MwRkJTeXhUUVVGTUxFTkJRV1VzVVVGQlppeERRVUYzUWl4VFFVRlRMRkZCUVdwRExFTkJRVlk3UVVGRFFTeGhRVUZKTEVOQlFVTXNSMEZCUkN4SlFVRlJMRU5CUVVNc1NVRkJTU3hOUVVGaUxFbEJRWFZDTEVOQlFVTXNTVUZCU1N4UFFVRm9ReXhGUVVGNVF6dEJRVU55UXl3eVFrRkJTU3hMUVVGS0xFTkJRVlVzTUVKQlFWWXNSVUZCYzBNc1IwRkJkRU03UVVGRFFTeHZRa0ZCVHl4UlFVRlJMRTFCUVZJc1EwRkJaU3hKUVVGSkxFdEJRVW9zUTBGQlZTd3dRa0ZCVml4RFFVRm1MRU5CUVZBN1FVRkRTRHM3UVVGRlJDeGhRVUZKTEUxQlFVMHNTMEZCVGl4TFFVRm5RaXhKUVVGSkxFOUJRVW9zUTBGQldTeExRVUZvUXl4RlFVRjFRenRCUVVOdVF5d3lRa0ZCU1N4TFFVRktMRU5CUVZVc01rSkJRVlk3UVVGRFFTeHZRa0ZCVHl4UlFVRlJMRTFCUVZJc1EwRkJaU3hKUVVGSkxFdEJRVW9zUTBGQlZTd3lRa0ZCVml4RFFVRm1MRU5CUVZBN1FVRkRTRHM3UVVGRlJDeGhRVUZKTEUxQlFVMHNTVUZCU1N4TlFVRktMRU5CUVZjc1IwRkJja0k3UVVGRFFTeGhRVUZKTEVOQlFVTXNSMEZCVEN4RlFVRlZPMEZCUTA0c01rSkJRVWtzUzBGQlNpeERRVUZWTERCQ1FVRldPMEZCUTBFc2IwSkJRVThzVVVGQlVTeE5RVUZTTEVOQlFXVXNTVUZCU1N4TFFVRktMRU5CUVZVc01FSkJRVllzUTBGQlppeERRVUZRTzBGQlEwZzdPMEZCUlVRc1owSkJRVThzUzBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhUUVVGMFFpeEhRVUZyUXl4SlFVRnNReXhEUVVGMVF5eHJRa0ZCVlR0QlFVTndSQ3d5UWtGQlNTeEpRVUZLTEVOQlFWTXNhVUpCUVZRN08wRkJSVUVzYjBKQlFVOHNUMEZCU3l4blFrRkJUQ3hEUVVGelFpeGpRVUYwUWl4SFFVRjFReXhKUVVGMlF5eERRVUUwUXl4blFrRkJVVHRCUVVOMlJDeHhRa0ZCU1N4RFFVRkRMRWxCUVV3c1JVRkJWenRCUVVOUUxHMURRVUZKTEV0QlFVb3NRMEZCVlN3clFrRkJWanRCUVVOQkxEUkNRVUZQTEZGQlFWRXNUVUZCVWl4RFFVRmxMRWxCUVVrc1MwRkJTaXhEUVVGVkxDdENRVUZXTEVOQlFXWXNRMEZCVUR0QlFVTklPenRCUVVWRUxDdENRVUZKTEVsQlFVb3NRMEZCVXl4MVFrRkJWRHM3UVVGRlFTeHhRa0ZCU1N4TlFVRk5MRXRCUVVzc1RVRkJUQ3hEUVVGWkxHVkJRVTg3UVVGRGVrSXNORUpCUVU4c1NVRkJTU3hIUVVGS0xFdEJRVmtzUjBGQmJrSTdRVUZEU0N4clFrRkdVeXhGUVVWUUxFTkJSazhzUTBGQlZqczdRVUZKUVN4eFFrRkJTU3hEUVVGRExFZEJRVXdzUlVGQlZUdEJRVU5PTEcxRFFVRkpMRXRCUVVvc1EwRkJWU3d5UTBGQlZqdEJRVU5CTERSQ1FVRlBMRkZCUVZFc1RVRkJVaXhEUVVGbExFbEJRVWtzUzBGQlNpeERRVUZWTERKRFFVRldMRU5CUVdZc1EwRkJVRHRCUVVOSU96dEJRVVZFTEhGQ1FVRkpMRmRCUVZjc1RVRkJUU3hUUVVGeVFqczdRVUZGUVN4eFFrRkJTU3h4UWtGQmNVSXNUMEZCU3l4VFFVRk1MRU5CUVdVc1UwRkJlRU03UVVGRFFTd3JRa0ZCU1N4SlFVRktMRU5CUVZNc2JVUkJRVlFzUlVGQk9FUXNhMEpCUVRsRU96dEJRVVZCTEhkQ1FVRlBMRTlCUVVzc1UwRkJUQ3hEUVVGbExGZEJRV1lzUTBGQk1rSXNVMEZCVXl4UlFVRndReXhGUVVFNFF5eEhRVUU1UXl4RlFVRnRSQ3hOUVVGdVJDeEZRVUV5UkN4UlFVRXpSQ3hGUVVGeFJTeHJRa0ZCY2tVc1JVRkJlVVlzU1VGQmVrWXNRMEZCT0VZc1dVRkJTVHRCUVVOeVJ5eHRRMEZCU1N4SlFVRktMRU5CUVZNc01rSkJRVlE3TzBGQlJVRXNPRUpCUVZNc1QwRkJWQ3hIUVVGdFFpeEpRVUZKTEU5QlFYWkNPenRCUVVWQkxEUkNRVUZQTEZGQlFWQTdRVUZEU0N4clFrRk9UU3hEUVVGUU8wRkJUMGdzWTBFM1FrMHNRMEZCVUR0QlFUaENTQ3hWUVdwRFRTeERRVUZRTzBGQmEwTklMRTA3TzJsRFFVVkVMRzlDTEdsRFFVRnhRaXhSTEVWQlFWVTdRVUZETTBJc2RVSkJRVWtzU1VGQlNpeERRVUZUTEhkRFFVRlVPenRCUVVWQkxHRkJRVWtzUTBGQlF5eFRRVUZUTEU5QlFXUXNSVUZCZFVJN1FVRkRia0lzTWtKQlFVa3NTMEZCU2l4RFFVRlZMR2xEUVVGV08wRkJRMEVzYjBKQlFVOHNVVUZCVVN4TlFVRlNMRU5CUVdVc1NVRkJTU3hMUVVGS0xFTkJRVlVzYVVOQlFWWXNRMEZCWml4RFFVRlFPMEZCUTBnN08wRkJSVVFzWVVGQlNTeERRVUZETEZOQlFWTXNUMEZCVkN4RFFVRnBRaXhQUVVGMFFpeEZRVUVyUWp0QlFVTXpRaXd5UWtGQlNTeExRVUZLTEVOQlFWVXNkMEpCUVZZN1FVRkRRU3h2UWtGQlR5eFJRVUZSTEUxQlFWSXNRMEZCWlN4SlFVRkpMRXRCUVVvc1EwRkJWU3gzUWtGQlZpeERRVUZtTEVOQlFWQTdRVUZEU0RzN1FVRkZSQ3hoUVVGSkxFTkJRVU1zVTBGQlV5eFJRVUZrTEVWQlFYZENPMEZCUTNCQ0xESkNRVUZKTEV0QlFVb3NRMEZCVlN4aFFVRldPMEZCUTBFc2IwSkJRVThzVVVGQlVTeE5RVUZTTEVOQlFXVXNTVUZCU1N4TFFVRktMRU5CUVZVc1lVRkJWaXhEUVVGbUxFTkJRVkE3UVVGRFNEczdRVUZGUkN4aFFVRkpMRTFCUVUwc1MwRkJTeXhUUVVGTUxFTkJRV1VzVVVGQlppeERRVUYzUWl4VFFVRlRMRkZCUVdwRExFTkJRVlk3UVVGRFFTeGhRVUZKTEVOQlFVTXNSMEZCUkN4SlFVRlJMRU5CUVVNc1NVRkJTU3hOUVVGcVFpeEZRVUY1UWp0QlFVTnlRaXd5UWtGQlNTeExRVUZLTEVOQlFWVXNNRUpCUVZZc1JVRkJjME1zUjBGQmRFTTdRVUZEUVN4dlFrRkJUeXhSUVVGUkxFMUJRVklzUTBGQlpTeEpRVUZKTEV0QlFVb3NRMEZCVlN3d1FrRkJWaXhEUVVGbUxFTkJRVkE3UVVGRFNEczdRVUZGUkN4aFFVRkpMRlZCUVZVc1NVRkJTU3hOUVVGS0xFTkJRVmNzUjBGQmVrSTdRVUZEUVN4aFFVRkpMRU5CUVVNc1QwRkJSQ3hKUVVGWkxGRkJRVkVzVFVGQlVpeExRVUZ0UWl4RFFVRnVReXhGUVVGelF6dEJRVU5zUXl3eVFrRkJTU3hMUVVGS0xFTkJRVlVzYTBKQlFWWXNSVUZCT0VJc1QwRkJPVUk3UVVGRFFTeHZRa0ZCVHl4UlFVRlJMRTFCUVZJc1EwRkJaU3hKUVVGSkxFdEJRVW9zUTBGQlZTeHpRa0ZCYzBJc1QwRkJhRU1zUTBGQlppeERRVUZRTzBGQlEwZzdPMEZCUlVRc1lVRkJTU3hYUVVGWExGRkJRVkVzVFVGQlVpeERRVUZsTEVOQlFXWXNSVUZCYTBJc1EwRkJiRUlzUTBGQlpqdEJRVU5CTEdGQlFVa3NRMEZCUXl4UlFVRk1MRVZCUVdVN1FVRkRXQ3d5UWtGQlNTeExRVUZLTEVOQlFWVXNhMEpCUVZZc1JVRkJPRUlzVDBGQk9VSXNSVUZCZFVNc1VVRkJka003UVVGRFFTeHZRa0ZCVHl4UlFVRlJMRTFCUVZJc1EwRkJaU3hKUVVGSkxFdEJRVW9zUTBGQlZTeHpRa0ZCYzBJc1QwRkJhRU1zUTBGQlppeERRVUZRTzBGQlEwZzdPMEZCUlVRc2IwSkJRVmNzVTBGQlV5eFJRVUZVTEVOQlFWZzdRVUZEUVN4aFFVRkpMR0ZCUVdFc1IwRkJZaXhKUVVGdlFpeGhRVUZoTEVkQlFXcERMRWxCUVhkRExHRkJRV0VzUjBGQmVrUXNSVUZCT0VRN1FVRkRNVVFzTWtKQlFVa3NTMEZCU2l4RFFVRlZMR3RDUVVGV0xFVkJRVGhDTEU5QlFUbENMRVZCUVhWRExGRkJRWFpETzBGQlEwRXNiMEpCUVU4c1VVRkJVU3hOUVVGU0xFTkJRV1VzU1VGQlNTeExRVUZLTEVOQlFWVXNjMEpCUVhOQ0xFOUJRV2hETEVOQlFXWXNRMEZCVUR0QlFVTklPenRCUVVWRUxHRkJRVWtzVFVGQlRTeFJRVUZSTEZGQlFXeENPMEZCUTBFc1lVRkJTU3hQUVVGUExFdEJRVXNzVTBGQlRDeERRVUZsTEZWQlFXWXNRMEZCTUVJc1UwRkJVeXhaUVVGdVF5eEZRVUZwUkN4SFFVRnFSQ3hEUVVGWU8wRkJRMEVzWVVGQlNTeERRVUZETEVsQlFVd3NSVUZCVnp0QlFVTlFMREpDUVVGSkxFdEJRVW9zUTBGQlZTd3lRa0ZCVml4RlFVRjFReXhIUVVGMlF6dEJRVU5CTEc5Q1FVRlBMRkZCUVZFc1RVRkJVaXhEUVVGbExFbEJRVWtzUzBGQlNpeERRVUZWTERSQ1FVRldMRU5CUVdZc1EwRkJVRHRCUVVOSU96dEJRVVZFTEdGQlFVa3NUMEZCVHl4TFFVRkxMRTFCUVV3c1EwRkJXU3hEUVVGYUxFVkJRV1VzUzBGQlN5eE5RVUZNTEVkQlFXTXNRMEZCTjBJc1EwRkJXRHRCUVVOQkxHRkJRVWtzV1VGQldTeExRVUZMTEZOQlFVd3NRMEZCWlN4alFVRm1MRU5CUVRoQ0xFbEJRVGxDTEVOQlFXaENPMEZCUTBFc1lVRkJTU3hqUVVGakxGTkJRVk1zVDBGQlZDeERRVUZwUWl4UFFVRnVReXhGUVVFMFF6dEJRVU40UXl3eVFrRkJTU3hMUVVGS0xFTkJRVlVzTkVKQlFWWXNSVUZCZDBNc1UwRkJlRU1zUlVGQmJVUXNVMEZCVXl4UFFVRlVMRU5CUVdsQ0xFOUJRWEJGTzBGQlEwRXNiMEpCUVU4c1VVRkJVU3hOUVVGU0xFTkJRV1VzU1VGQlNTeExRVUZLTEVOQlFWVXNORUpCUVZZc1EwRkJaaXhEUVVGUU8wRkJRMGc3TzBGQlJVUXNaMEpCUVU4c1VVRkJVU3hQUVVGU0xFTkJRV2RDTEZGQlFXaENMRU5CUVZBN1FVRkRTQ3hOT3pzN096dHRRa0UxVldkQ0xHbENPenM3T3pzN096czdPenM3TzBGRFVuSkNPenM3TzBGQlEwRTdPenM3T3pzN096dExRVVZ4UWl4bE8wRkJRMnBDTERoQ1FVRlpMRkZCUVZvc1JVRkJjVVE3UVVGQlFTeGhRVUV2UWl4bFFVRXJRanM3UVVGQlFUczdRVUZEYWtRc1lVRkJTU3hEUVVGRExGRkJRVXdzUlVGQlpUdEJRVU5ZTERKQ1FVRkpMRXRCUVVvc1EwRkJWU3gxUTBGQlZqdEJRVU5CTEcxQ1FVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxGVkJRVllzUTBGQlRqdEJRVU5JT3p0QlFVVkVMR05CUVVzc1UwRkJUQ3hIUVVGcFFpeFJRVUZxUWp0QlFVTkJMR05CUVVzc1dVRkJUQ3hIUVVGdlFpeEpRVUZKTEdWQlFVb3NSVUZCY0VJN1FVRkRTRHM3SzBKQlJVUXNWeXd3UWtGQll6dEJRVUZCT3p0QlFVTldMSFZDUVVGSkxFbEJRVW9zUTBGQlV5dzJRa0ZCVkRzN1FVRkZRU3hoUVVGSkxFdEJRVXNzVTBGQlRDeERRVUZsTEZGQlFXNUNMRVZCUVRaQ08wRkJRM3BDTERKQ1FVRkpMRWxCUVVvc1EwRkJVeXhyUTBGQlZEdEJRVU5CTEc5Q1FVRlBMRkZCUVZFc1QwRkJVaXhEUVVGblFpeExRVUZMTEZOQlFVd3NRMEZCWlN4UlFVRXZRaXhEUVVGUU8wRkJRMGc3TzBGQlJVUXNZVUZCU1N4RFFVRkRMRXRCUVVzc1UwRkJUQ3hEUVVGbExGZEJRWEJDTEVWQlFXbERPMEZCUXpkQ0xESkNRVUZKTEV0QlFVb3NRMEZCVlN4MVEwRkJWanRCUVVOQkxHOUNRVUZQTEZGQlFWRXNUVUZCVWl4RFFVRmxMRWxCUVVrc1MwRkJTaXhEUVVGVkxIVkRRVUZXTEVOQlFXWXNRMEZCVUR0QlFVTklPenRCUVVWRUxIVkNRVUZKTEVsQlFVb3NRMEZCVXl4MVFrRkJWQ3hGUVVGclF5eExRVUZMTEZOQlFVd3NRMEZCWlN4WFFVRnFSRHM3UVVGRlFTeG5Ra0ZCVHl4TFFVRkxMRmxCUVV3c1EwRkJhMElzVDBGQmJFSXNRMEZCTUVJc1MwRkJTeXhUUVVGTUxFTkJRV1VzVjBGQmVrTXNSVUZEUml4SlFVUkZMRU5CUTBjc2IwSkJRVms3UVVGRFpDd3lRa0ZCU1N4SlFVRktMRU5CUVZNc1pVRkJWRHRCUVVOQkxHMUNRVUZMTEZOQlFVd3NRMEZCWlN4UlFVRm1MRWRCUVRCQ0xGRkJRVEZDTzBGQlEwRXNiMEpCUVU4c1VVRkJVRHRCUVVOSUxGVkJURVVzUTBGQlVEdEJRVTFJTEUwN095dENRVVZFTEZNc2QwSkJRVms3UVVGRFVpeDFRa0ZCU1N4SlFVRktMRU5CUVZNc01rSkJRVlE3UVVGRFFTeG5Ra0ZCVHl4TFFVRkxMRzlDUVVGTUxFTkJRVEJDTEZGQlFURkNMRU5CUVZBN1FVRkRTQ3hOT3pzclFrRkZSQ3gzUWl4MVEwRkJNa0k3UVVGRGRrSXNkVUpCUVVrc1NVRkJTaXhEUVVGVExEQkRRVUZVTzBGQlEwRXNaMEpCUVU4c1MwRkJTeXh2UWtGQlRDeERRVUV3UWl4M1FrRkJNVUlzUTBGQlVEdEJRVU5JTEUwN095dENRVVZFTEcxQ0xHdERRVUZ6UWp0QlFVTnNRaXgxUWtGQlNTeEpRVUZLTEVOQlFWTXNjVU5CUVZRN1FVRkRRU3huUWtGQlR5eExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xHMUNRVUV4UWl4RFFVRlFPMEZCUTBnc1RUczdLMEpCUlVRc2NVSXNiME5CUVhkQ08wRkJRM0JDTEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXgxUTBGQlZEdEJRVU5CTEdkQ1FVRlBMRXRCUVVzc2IwSkJRVXdzUTBGQk1FSXNjMEpCUVRGQ0xFTkJRVkE3UVVGRFNDeE5PenNyUWtGRlJDeHhRaXh2UTBGQmQwSTdRVUZEY0VJc2RVSkJRVWtzU1VGQlNpeERRVUZUTEhWRFFVRlVPMEZCUTBFc1owSkJRVThzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXh6UWtGQk1VSXNRMEZCVUR0QlFVTklMRTA3T3l0Q1FVVkVMRzlDTEdsRFFVRnhRaXhKTEVWQlFVMDdRVUZEZGtJc2RVSkJRVWtzU1VGQlNpeERRVUZUTEhORFFVRlVMRVZCUVdsRUxFbEJRV3BFT3p0QlFVVkJMR2RDUVVGUExFdEJRVXNzVjBGQlRDeEhRVUZ0UWl4SlFVRnVRaXhEUVVGM1FpeHZRa0ZCV1R0QlFVTjJReXd5UWtGQlNTeEpRVUZLTEVOQlFWTXNiVUpCUVZRN08wRkJSVUVzYVVKQlFVa3NVMEZCVXl4SlFVRlVMRTFCUVcxQ0xGTkJRWFpDTEVWQlFXdERPMEZCUXpsQ0xDdENRVUZKTEV0QlFVb3NRMEZCVlN4M1EwRkJkME1zU1VGQmJFUTdRVUZEUVN4MVFrRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeDNRMEZCZDBNc1NVRkJiRVFzUTBGQlRqdEJRVU5JT3p0QlFVVkVMRzlDUVVGUExGTkJRVk1zU1VGQlZDeERRVUZRTzBGQlEwZ3NWVUZVVFN4RFFVRlFPMEZCVlVnc1RUczdLMEpCUlVRc1l5dzJRa0ZCYVVJN1FVRkJRVHM3UVVGRFlpeDFRa0ZCU1N4SlFVRktMRU5CUVZNc1owTkJRVlE3TzBGQlJVRXNZVUZCU1N4TFFVRkxMRk5CUVV3c1EwRkJaU3hYUVVGdVFpeEZRVUZuUXp0QlFVTTFRaXd5UWtGQlNTeEpRVUZLTEVOQlFWTXNjVU5CUVZRN1FVRkRRU3h2UWtGQlR5eFJRVUZSTEU5QlFWSXNRMEZCWjBJc1MwRkJTeXhUUVVGTUxFTkJRV1VzVjBGQkwwSXNRMEZCVUR0QlFVTklPenRCUVVWRUxHZENRVUZQTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzVlVGQk1VSXNSVUZCYzBNc1NVRkJkRU1zUTBGQk1rTXNiMEpCUVZrN1FVRkRNVVFzTWtKQlFVa3NTVUZCU2l4RFFVRlRMRzFDUVVGVUxFVkJRVGhDTEZGQlFUbENPenRCUVVWQkxHOUNRVUZQTEU5QlFVc3NXVUZCVEN4RFFVRnJRaXhQUVVGc1FpeERRVUV3UWl4UlFVRXhRaXhGUVVGdlF5eEpRVUZ3UXl4RFFVRjVReXhyUWtGQlZUdEJRVU4wUkN3clFrRkJTU3hKUVVGS0xFTkJRVk1zYTBKQlFWUXNSVUZCTmtJc1RVRkJOMEk3TzBGQlJVRXNjVUpCUVVrc1EwRkJReXhQUVVGUExFbEJRVm9zUlVGQmEwSTdRVUZEWkN4dFEwRkJTU3hMUVVGS0xFTkJRVlVzZDBKQlFWWTdRVUZEUVN3eVFrRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeDNRa0ZCVml4RFFVRk9PMEZCUTBnN08wRkJSVVFzY1VKQlFVa3NaVUZCWlN4UFFVRkxMR3RDUVVGTUxFTkJRWGRDTEU5QlFVOHNTVUZCTDBJc1EwRkJia0k3UVVGRFFTd3JRa0ZCU1N4SlFVRktMRU5CUVZNc1pVRkJWQ3hGUVVFd1FpeFpRVUV4UWpzN1FVRkZRU3gzUWtGQlN5eFRRVUZNTEVOQlFXVXNWMEZCWml4SFFVRTJRaXhaUVVFM1FqdEJRVU5CTEhkQ1FVRlBMRTlCUVVzc1UwRkJUQ3hEUVVGbExGZEJRWFJDTzBGQlEwZ3NZMEZpVFN4RFFVRlFPMEZCWTBnc1ZVRnFRazBzUTBGQlVEdEJRV3RDU0N4Tk96c3JRa0ZGUkN4clFpd3JRa0ZCYlVJc1NTeEZRVUZOTzBGQlEzSkNMSFZDUVVGSkxFbEJRVW9zUTBGQlV5eHZRMEZCVkN4RlFVRXJReXhKUVVFdlF6czdRVUZGUVN4blFrRkJUeXhMUVVGTExFMUJRVXdzUTBGQldTeG5Ra0ZCVVR0QlFVTjJRaXh2UWtGQlR5eExRVUZMTEVkQlFVd3NTMEZCWVN4TFFVRndRanRCUVVOSUxGVkJSazBzUTBGQlVEdEJRVWRJTEUwN096czdPMjFDUVRWSFowSXNaVHM3T3pzN096czdPenM3T3p0QlEwaHlRanM3T3p0QlFVTkJPenM3T3pzN096czdTMEZGY1VJc1Z6dEJRVU5xUWl3MFFrRkJkMFE3UVVGQlFTeGhRVUUxUXl4clFrRkJORU1zZVVSQlFYWkNMR2xDUVVGUExHTkJRV2RDT3p0QlFVRkJPenRCUVVOd1JDeGpRVUZMTEdWQlFVd3NSMEZCZFVJc2EwSkJRWFpDTzBGQlEwZzdPekpDUVVWRUxFOHNiMEpCUVZFc1J5eEZRVUZMTEVzc1JVRkJUenRCUVVGQk96dEJRVU5vUWl4MVFrRkJTU3hKUVVGS0xFTkJRVk1zY1VKQlFWUXNSVUZCWjBNc1IwRkJhRU03TzBGQlJVRXNZVUZCU1N4RFFVRkRMRWRCUVV3c1JVRkJVenRCUVVOTUxESkNRVUZKTEV0QlFVb3NRMEZCVlN4bFFVRldPMEZCUTBFc2JVSkJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNTMEZCVml4RFFVRk9PMEZCUTBnN08wRkJSVVFzWjBKQlFVOHNTVUZCU1N4UFFVRktMRU5CUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZjRU1zYVVKQlFVa3NUVUZCVFN4SlFVRkpMRTFCUVVzc1pVRkJWQ3hGUVVGV08wRkJRMEVzYVVKQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVZRc1JVRkJaMElzUjBGQmFFSTdPMEZCUlVFc2FVSkJRVWtzVFVGQlNpeEhRVUZoTEZsQlFWYzdRVUZEY0VJc0swSkJRVWtzU1VGQlNpeERRVUZUTEdkRFFVRlVMRVZCUVRKRExFbEJRVWtzVFVGQkwwTTdPMEZCUlVFc2NVSkJRVWtzU1VGQlNTeE5RVUZLTEV0QlFXVXNSMEZCYmtJc1JVRkJkMEk3UVVGRGNFSXNOa0pCUVZFc1MwRkJTeXhMUVVGTUxFTkJRVmNzU1VGQlNTeFpRVUZtTEVOQlFWSTdRVUZEU0N4clFrRkdSQ3hOUVVkTE8wRkJRMFFzTkVKQlFVOHNUVUZCVFN4SlFVRkpMRlZCUVVvc1IwRkJhVUlzU1VGQmFrSXNSMEZCZDBJc1NVRkJTU3hOUVVFMVFpeEhRVUZ4UXl4SFFVRXpReXhEUVVGUU8wRkJRMGc3UVVGRFNpeGpRVlJFT3p0QlFWZEJMR2xDUVVGSkxFOUJRVW9zUjBGQll5eFpRVUZYTzBGQlEzSkNMQ3RDUVVGSkxFdEJRVW9zUTBGQlZTeGxRVUZXTzBGQlEwRXNkMEpCUVU4c1RVRkJUU3hsUVVGT0xFTkJRVkE3UVVGRFNDeGpRVWhFT3p0QlFVdEJMR2xDUVVGSkxFdEJRVW9zUlVGQlZ6dEJRVU5RTEN0Q1FVRkpMRWxCUVVvc1EwRkJVeXcwUTBGQlZEdEJRVU5CTEhGQ1FVRkpMR2RDUVVGS0xFTkJRWEZDTEdWQlFYSkNMRVZCUVhORExGbEJRVmtzUzBGQmJFUTdRVUZEU0RzN1FVRkZSQ3hwUWtGQlNTeEpRVUZLTzBGQlEwZ3NWVUV6UWswc1EwRkJVRHRCUVRSQ1NDeE5PenM3T3p0dFFrRjZRMmRDTEZjN096czdPenM3T3pzN096czdRVU5JY2tJN096czdRVUZEUVRzN096dEJRVU5CT3pzN096czdPenM3UzBGRmNVSXNaVHRCUVVOcVFpdzRRa0ZCV1N4UlFVRmFMRVZCUVRSR08wRkJRVUVzWVVGQmRFVXNaVUZCYzBVN1FVRkJRU3hoUVVGMlF5eHRRa0ZCZFVNN08wRkJRVUU3TzBGQlEzaEdMR0ZCUVVrc1EwRkJReXhSUVVGTUxFVkJRV1U3UVVGRFdDd3lRa0ZCU1N4TFFVRktMRU5CUVZVc2RVTkJRVlk3UVVGRFFTeHRRa0ZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3hWUVVGV0xFTkJRVTQ3UVVGRFNEczdRVUZGUkN4alFVRkxMRk5CUVV3c1IwRkJhVUlzVVVGQmFrSTdRVUZEUVN4alFVRkxMRmxCUVV3c1IwRkJiMElzU1VGQlNTeGxRVUZLTEVWQlFYQkNPMEZCUTBFc1kwRkJTeXhuUWtGQlRDeEhRVUYzUWl4SlFVRkpMRzFDUVVGS0xFTkJRWGRDTEV0QlFVc3NVMEZCTjBJc1EwRkJlRUk3UVVGRFNEczdLMEpCUlVRc1V5eHpRa0ZCVlN4TExFVkJRVTg3UVVGQlFUczdRVUZEWWl4MVFrRkJTU3hKUVVGS0xFTkJRVk1zTWtKQlFWUTdPMEZCUlVFc1lVRkJTU3hEUVVGRExFdEJRVXdzUlVGQldUdEJRVU5TTERKQ1FVRkpMRXRCUVVvc1EwRkJWU3hwUWtGQlZqdEJRVU5CTEc5Q1FVRlBMRkZCUVZFc1RVRkJVaXhEUVVGbExFbEJRVWtzUzBGQlNpeERRVUZWTEhGQ1FVRldMRU5CUVdZc1EwRkJVRHRCUVVOSU96dEJRVVZFTEdkQ1FVRlBMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNiVUpCUVhSQ0xFZEJRVFJETEVsQlFUVkRMRU5CUVdsRUxHVkJRVTg3UVVGRE0wUXNNa0pCUVVrc1NVRkJTaXhEUVVGVExIVkNRVUZVTEVWQlFXdERMRWRCUVd4RE96dEJRVVZCTEc5Q1FVRlBMRTFCUVVzc1dVRkJUQ3hEUVVGclFpeFBRVUZzUWl4RFFVRXdRaXhIUVVFeFFpeEZRVUVyUWl4TFFVRXZRaXhGUVVGelF5eEpRVUYwUXl4RFFVRXlReXhyUWtGQlZUdEJRVU40UkN3clFrRkJTU3hKUVVGS0xFTkJRVk1zYVVKQlFWUXNSVUZCTkVJc1RVRkJOVUk3UVVGRFFTeDNRa0ZCVHl4TlFVRlFPMEZCUTBnc1kwRklUU3hEUVVGUU8wRkJTVWdzVlVGUVRTeERRVUZRTzBGQlVVZ3NUVHM3T3pzN2JVSkJOVUpuUWl4bE96czdPenM3T3pzN096czdPMEZEU25KQ096czdPenM3T3pzN096czdPMHRCUlhGQ0xHRTdPenRCUVVOcVFpdzRRa0ZEUlR0QlFVRkJMREJGUVVSMVJDeEZRVU4yUkRzN1FVRkJRU3hoUVVSWExFdEJRMWdzVVVGRVZ5eExRVU5ZTzBGQlFVRXNZVUZFYTBJc2FVSkJRMnhDTEZGQlJHdENMR2xDUVVOc1FqdEJRVUZCTEdGQlJIRkRMRk5CUTNKRExGRkJSSEZETEZOQlEzSkRPMEZCUVVFc1lVRkVaMFFzUzBGRGFFUXNVVUZFWjBRc1MwRkRhRVE3TzBGQlFVRTdPMEZCUTBjc1lVRkJTU3hEUVVGRExFdEJRVXdzUlVGQlZ6dEJRVU5TTERKQ1FVRkpMRXRCUVVvc1EwRkJWU3hyUTBGQlZqdEJRVU5CTEcxQ1FVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxFOUJRVllzUTBGQlRqdEJRVU5JT3p0QlFVcElMSE5FUVUxRkxHdENRVUZOTEhGQ1FVRnhRaXhMUVVFelFpeERRVTVHT3p0QlFWRkZMR1ZCUVVzc1NVRkJUQ3hIUVVGWkxHVkJRVm83TzBGQlJVRXNaVUZCU3l4TFFVRk1MRWRCUVdFc1MwRkJZanRCUVVOQkxHVkJRVXNzYVVKQlFVd3NSMEZCZVVJc2FVSkJRWHBDTzBGQlEwRXNaVUZCU3l4VFFVRk1MRWRCUVdsQ0xGTkJRV3BDT3p0QlFVVkJMR1ZCUVVzc1MwRkJUQ3hIUVVGaExFdEJRV0k3UVVGa1JqdEJRV1ZFT3pzN1IwRnFRbk5ETEVzN08yMUNRVUYwUWl4aE96czdPenM3T3pzN096czdPMEZEUm5KQ096dEJRVU5CT3pzN096czdPenM3UVVGRlFTeExRVUZOTEhGQ1FVRnhRaXhEUVVGRExFOUJRVVFzUlVGQlZTeFBRVUZXTEVWQlFXMUNMRTlCUVc1Q0xFVkJRVFJDTEU5QlFUVkNMRVZCUVhGRExFOUJRWEpETEVWQlFUaERMRTlCUVRsRExFVkJRWFZFTEU5QlFYWkVMRVZCUVdkRkxFOUJRV2hGTEVWQlFYbEZMRTlCUVhwRkxFTkJRVE5DT3p0TFFVVnhRaXhST3pzN096dGpRVVZXTEZFc2NVSkJRVk1zUnl4RlFVRkxPMEZCUTJwQ0xIVkNRVUZKTEVsQlFVb3NRMEZCVXl4dFFrRkJWRHRCUVVOQkxHRkJRVWs3UVVGRFFTeHBRa0ZCU1N4UlFVRlJMR1ZCUVVrc1IwRkJTaXhEUVVGUkxFdEJRVklzUTBGQll5eEhRVUZrTEVOQlFWbzdRVUZEUVN4dlFrRkJUenRCUVVOSUxIbENRVUZSTEUxQlFVMHNVMEZFV0R0QlFVVklMREJDUVVGVExFMUJRVTA3UVVGR1dpeGpRVUZRTzBGQlNVZ3NWVUZPUkN4RFFVOUJMRTlCUVU4c1EwRkJVQ3hGUVVGVk8wRkJRMDRzTWtKQlFVa3NTMEZCU2l4RFFVRlZMRU5CUVZZN1FVRkRTRHRCUVVOS0xFMDdPMk5CUlUwc1Z5eDNRa0ZCV1N4SExFVkJRVXNzUnl4RlFVRkxMRTBzUlVGQlVTeFJMRVZCUVZVc1V5eEZRVUZYTEVjc1JVRkJTenRCUVVNelJDeDFRa0ZCU1N4SlFVRktMRU5CUVZNc2MwSkJRVlE3TzBGQlJVRXNZVUZCU1R0QlFVTkJMR2xDUVVGSkxFbEJRVWtzUjBGQlNpeExRVUZaTEV0QlFXaENMRVZCUVhWQ08wRkJRMjVDTEhGQ1FVRkpMRWxCUVVrc1EwRkJTaXhKUVVGVExFbEJRVWtzUTBGQmFrSXNSVUZCYjBJN1FVRkRhRUlzTWtKQlFVMHNiVUpCUVZFc1RVRkJVaXhEUVVGbExFZEJRV1lzUTBGQlRqdEJRVU5JTEd0Q1FVWkVMRTFCUjBzc1NVRkJTU3hKUVVGSkxFZEJRVW9zU1VGQlZ5eEpRVUZKTEVkQlFVb3NRMEZCVVN4TlFVRjJRaXhGUVVFclFqdEJRVU5vUXl3eVFrRkJUU3h0UWtGQlVTeE5RVUZTTEVOQlFXVXNaMEpCUVVzc2RVSkJRVXdzUTBGQk5rSXNTVUZCU1N4SFFVRktMRU5CUVZFc1EwRkJVaXhEUVVFM1FpeERRVUZtTEVOQlFVNDdRVUZEU0N4clFrRkdTU3hOUVVkQk8wRkJRMFFzYlVOQlFVa3NTMEZCU2l4RFFVRlZMRGhDUVVGV0xFVkJRVEJETEVkQlFURkRPMEZCUTBFc05FSkJRVThzVVVGQlVTeE5RVUZTTEVOQlFXVXNTVUZCU1N4TFFVRktMRU5CUVZVc09FSkJRVllzUTBGQlppeERRVUZRTzBGQlEwZzdRVUZEU2l4alFWaEVMRTFCV1Vzc1NVRkJTU3hKUVVGSkxFZEJRVW9zUzBGQldTeEpRVUZvUWl4RlFVRnpRanRCUVVOMlFpeHhRa0ZCU1N4SlFVRkpMRWRCUVVvc1NVRkJWeXhKUVVGSkxFTkJRV1lzU1VGQmIwSXNTVUZCU1N4RFFVRTFRaXhGUVVFclFqdEJRVU16UWl3eVFrRkJUU3h0UWtGQlVTeE5RVUZTTEVOQlFXVXNSMEZCWml4RFFVRk9PMEZCUTBnc2EwSkJSa1FzVFVGSFN6dEJRVU5FTEcxRFFVRkpMRXRCUVVvc1EwRkJWU3cyUWtGQlZpeEZRVUY1UXl4SFFVRjZRenRCUVVOQkxEUkNRVUZQTEZGQlFWRXNUVUZCVWl4RFFVRmxMRWxCUVVrc1MwRkJTaXhEUVVGVkxEWkNRVUZXTEVOQlFXWXNRMEZCVUR0QlFVTklPMEZCUTBvc1kwRlNTU3hOUVZOQk8wRkJRMFFzSzBKQlFVa3NTMEZCU2l4RFFVRlZMSE5DUVVGV0xFVkJRV3RETEU5QlFVOHNTVUZCU1N4SFFVRTNRenRCUVVOQkxIZENRVUZQTEZGQlFWRXNUVUZCVWl4RFFVRmxMRWxCUVVrc1MwRkJTaXhEUVVGVkxESkNRVUV5UWl4SFFVRXpRaXhKUVVGclF5eEpRVUZKTEVkQlFXaEVMRU5CUVdZc1EwRkJVRHRCUVVOSU96dEJRVVZFTEc5Q1FVRlBMRk5CUVZNc1dVRkJWQ3hEUVVGelFpeEhRVUYwUWl4RlFVRXlRaXhIUVVFelFpeEZRVUZuUXl4TlFVRm9ReXhGUVVGM1F5eFJRVUY0UXl4RlFVRnJSQ3hUUVVGc1JDeEZRVUUyUkN4SFFVRTNSQ3hEUVVGUU8wRkJRMGdzVlVFMVFrUXNRMEUyUWtFc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFRpd3lRa0ZCU1N4TFFVRktMRU5CUVZVc1MwRkJTeXhGUVVGRkxFOUJRVkFzU1VGQmEwSXNRMEZCTlVJN1FVRkRRU3h2UWtGQlR5eFJRVUZSTEUxQlFWSXNRMEZCWlN4MVFrRkJaaXhEUVVGUU8wRkJRMGc3UVVGRFNpeE5PenRqUVVWTkxGa3NlVUpCUVdFc1J5eEZRVUZMTEVjc1JVRkJTeXhOTEVWQlFWRXNVU3hGUVVGVkxGTXNSVUZCVnl4SExFVkJRVXM3UVVGRE5VUXNkVUpCUVVrc1NVRkJTaXhEUVVGVExIVkNRVUZVT3p0QlFVVkJMR0ZCUVVrc1EwRkJReXhUUVVGTUxFVkJRV2RDTzBGQlExb3NlVUpCUVZrc1EwRkJXanRCUVVOSU96dEJRVVZFTEdGQlFVa3NRMEZCUXl4SFFVRk1MRVZCUVZVN1FVRkRUaXh0UWtGQlRTeFRRVUZUTEV0QlFVc3NSMEZCVEN4TFFVRmhMRWxCUVhSQ0xFTkJRVTQ3UVVGRFNEczdRVUZGUkN4aFFVRkpMRlZCUVZVc1UwRkJVeXhSUVVGVUxFTkJRV3RDTEVkQlFXeENMRVZCUVhWQ0xFOUJRWEpET3p0QlFVVkJMR0ZCUVVrc1VVRkJVU3hIUVVGU0xFdEJRV2RDTEUxQlFYQkNMRVZCUVRSQ08wRkJRM2hDTERKQ1FVRkpMRXRCUVVvc1EwRkJWU3g1UWtGQlZpeEZRVUZ4UXl4UlFVRlJMRWRCUVRkRE8wRkJRMEVzYjBKQlFVOHNVVUZCVVN4TlFVRlNMRU5CUVdVc1NVRkJTU3hMUVVGS0xFTkJRVlVzT0VKQlFUaENMRkZCUVZFc1IwRkJhRVFzUTBGQlppeERRVUZRTzBGQlEwZzdPMEZCUlVRc1lVRkJTU3hSUVVGUkxFZEJRVklzUzBGQlowSXNVVUZCY0VJc1JVRkJPRUk3UVVGRE1VSXNNa0pCUVVrc1MwRkJTaXhEUVVGVkxESkNRVUZXTEVWQlFYVkRMRkZCUVZFc1IwRkJMME03UVVGRFFTeHZRa0ZCVHl4UlFVRlJMRTFCUVZJc1EwRkJaU3hKUVVGSkxFdEJRVW9zUTBGQlZTeG5RMEZCWjBNc1VVRkJVU3hIUVVGc1JDeERRVUZtTEVOQlFWQTdRVUZEU0RzN1FVRkZSQ3hoUVVGSkxGZEJRVmNzVFVGQlRTeFRRVUZ5UWp0QlFVTkJMR0ZCUVVrc1YwRkJWeXhOUVVGTkxGTkJRWEpDT3p0QlFVVkJMR0ZCUVVrc1YwRkJWeXhSUVVGUkxFZEJRWFpDTEVWQlFUUkNPMEZCUTNoQ0xESkNRVUZKTEV0QlFVb3NRMEZCVlN4elFrRkJWaXhGUVVGclF5eFJRVUZSTEVkQlFURkRPMEZCUTBFc2IwSkJRVThzVVVGQlVTeE5RVUZTTEVOQlFXVXNTVUZCU1N4TFFVRktMRU5CUVZVc01rSkJRVEpDTEZGQlFWRXNSMEZCTjBNc1EwRkJaaXhEUVVGUU8wRkJRMGc3TzBGQlJVUXNZVUZCU1N4WFFVRlhMRkZCUVZFc1IwRkJka0lzUlVGQk5FSTdRVUZEZUVJc01rSkJRVWtzUzBGQlNpeERRVUZWTEhOQ1FVRldMRVZCUVd0RExGRkJRVkVzUjBGQk1VTTdRVUZEUVN4dlFrRkJUeXhSUVVGUkxFMUJRVklzUTBGQlpTeEpRVUZKTEV0QlFVb3NRMEZCVlN3eVFrRkJNa0lzVVVGQlVTeEhRVUUzUXl4RFFVRm1MRU5CUVZBN1FVRkRTRHM3UVVGRlJDeGhRVUZKTEZGQlFWRXNSMEZCVWl4SFFVRmpMRkZCUVd4Q0xFVkJRVFJDTzBGQlEzaENMREpDUVVGSkxFdEJRVW9zUTBGQlZTeHZRa0ZCVml4RlFVRm5ReXhSUVVGUkxFZEJRWGhETzBGQlEwRXNiMEpCUVU4c1VVRkJVU3hOUVVGU0xFTkJRV1VzU1VGQlNTeExRVUZLTEVOQlFWVXNkMEpCUVhkQ0xGRkJRVkVzUjBGQk1VTXNRMEZCWml4RFFVRlFPMEZCUTBnN08wRkJSVVFzWVVGQlNUdEJRVU5CTEdsQ1FVRkpMRU5CUVVNc1pVRkJTU3hIUVVGS0xFTkJRVkVzVFVGQlVpeERRVUZsTEVkQlFXWXNSVUZCYjBJc1IwRkJjRUlzUlVGQmVVSXNhMEpCUVhwQ0xFTkJRVXdzUlVGQmJVUTdRVUZETDBNc0swSkJRVWtzUzBGQlNpeERRVUZWTERaQ1FVRldPMEZCUTBFc2QwSkJRVThzVVVGQlVTeE5RVUZTTEVOQlFXVXNTVUZCU1N4TFFVRktMRU5CUVZVc05rSkJRVllzUTBGQlppeERRVUZRTzBGQlEwZzdRVUZEU2l4VlFVeEVMRU5CVFVFc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFRpd3lRa0ZCU1N4TFFVRktMRU5CUVZVc1MwRkJTeXhGUVVGRkxFOUJRVkFzU1VGQmEwSXNRMEZCTlVJN1FVRkRRU3h2UWtGQlR5eFJRVUZSTEUxQlFWSXNRMEZCWlN4SlFVRkpMRXRCUVVvc1EwRkJWU3cyUWtGQlZpeERRVUZtTEVOQlFWQTdRVUZEU0RzN1FVRkZSQ3huUWtGQlR5eFJRVUZSTEU5QlFWSXNSVUZCVUR0QlFVTklMRTA3TzJOQlJVMHNWU3gxUWtGQlZ5eExMRVZCUVU4c1J5eEZRVUZMTzBGQlF6RkNMSFZDUVVGSkxFbEJRVW9zUTBGQlV5eHhRa0ZCVkN4RlFVRm5ReXhMUVVGb1F5eEZRVUYxUXl4SFFVRjJRenRCUVVOQkxHRkJRVWs3UVVGRFFTeHZRa0ZCVHl4clFrRkJUeXhKUVVGUUxFTkJRVmtzVlVGQldpeERRVUYxUWl4TFFVRjJRaXhGUVVFNFFpeEhRVUU1UWl4RFFVRlFPMEZCUTBnc1ZVRkdSQ3hEUVVkQkxFOUJRVThzUTBGQlVDeEZRVUZWTzBGQlEwNHNNa0pCUVVrc1MwRkJTaXhEUVVGVkxFTkJRVlk3UVVGRFNEdEJRVU5LTEUwN08yTkJSVTBzWXl3eVFrRkJaU3hMTEVWQlFVODdRVUZEZWtJc2RVSkJRVWtzU1VGQlNpeERRVUZUTEhsQ1FVRlVMRVZCUVc5RExFdEJRWEJETzBGQlEwRXNZVUZCU1R0QlFVTkJMRzlDUVVGUExEQkNRVUZWTEV0QlFWWXNRMEZCVUR0QlFVTklMRlZCUmtRc1EwRkhRU3hQUVVGUExFTkJRVkFzUlVGQlZUdEJRVU5PTERKQ1FVRkpMRXRCUVVvc1EwRkJWU3hEUVVGV08wRkJRMGc3UVVGRFNpeE5PenM3T3p0dFFrRXZTR2RDTEZFN096czdPenM3TzBGRFVISkNPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4MVEwRkJjME1zWTBGQll5d3lRa0ZCTWtJc05rSkJRVFpDTEZGQlFWRXNWMEZCVnl4UFFVRlBMSFZDUVVGMVFpeFJRVUZSTERCQ1FVRXdRaXhYUVVGWExFOUJRVThzYjBKQlFXOUNMRmxCUVZrc1YwRkJWeXd3UWtGQk1FSXNNRUpCUVRCQ0xHRkJRV0VzY1VKQlFYRkNMRXRCUVVzc1owSkJRV2RDTEN0Q1FVRXJRaXhyUTBGQmEwTXNWVUZCVlN4TlFVRk5MSGRDUVVGM1FpeFBRVUZQTEZsQlFWa3NWVUZCVlN4elFrRkJjMElzVTBGQlV5eFpRVUZaTEZWQlFWVXNiVUpCUVcxQ0xHbENRVUZwUWl4alFVRmpMRkZCUVZFc1YwRkJWeXhQUVVGUExGTkJRVk1zVFVGQlRTeFpRVUZaTEZkQlFWY3NTMEZCU3l3MFJFRkJORVFzYzBKQlFYTkNMSGxDUVVGNVFpeHBRMEZCYVVNc2IwTkJRVzlETERoQ1FVRTRRaXhyUWtGQmEwSXNVVUZCVVN3MlEwRkJOa01zZFVKQlFYVkNMRWxCUVVrc1owSkJRV2RDTEhOS1FVRnpTaXdyUlVGQkswVXNiVVJCUVcxRUxFMUJRVTBzSzBKQlFTdENMR2RDUVVGblFpeExRVUZMTERKQ1FVRXlRaXhyUWtGQmEwSXNTMEZCU3l4MVFrRkJkVUlzWjBKQlFXZENMSE5DUVVGelFpeFpRVUZaTEcxRFFVRnRReXhaUVVGWkxHbENRVUZwUWl4M1FrRkJkMElzYVVKQlFXbENMSGxDUVVGNVFpeFpRVUZaTERSQ1FVRTBRaXhSUVVGUkxIbENRVUY1UWl3NFFrRkJPRUlzV1VGQldTdzRRa0ZCT0VJc1MwRkJTeXgxUkVGQmRVUXNUVUZCVFN4bFFVRmxMRzlDUVVGdlFpeHBRa0ZCYVVJc01rSkJRVEpDTEVkQlFVY3NXVUZCV1N4clFrRkJhMElzZFVKQlFYVkNMRzFDUVVGdFFpdzBRa0ZCTkVJc1IwRkJSeXhaUVVGWkxIRkNRVUZ4UWl3NFFrRkJPRUlzV1VGQldTeHJRa0ZCYTBJc1MwRkJTeXhuUTBGQlowTXNUVUZCVFN4alFVRmpMR05CUVdNc2FVTkJRV2xETEZsQlFWa3NaMEpCUVdkQ0xDdENRVUVyUWl4WlFVRlpMR2xDUVVGcFFpeDNRa0ZCZDBJc1MwRkJTeXhOUVVGTkxHZENRVUZuUWl4TFFVRkxMSEZDUVVGeFFpeE5RVUZOTEZsQlFWa3NZMEZCWXl4TFFVRkxMRFpDUVVFMlFpeE5RVUZOTEZWQlFWVXNNa0pCUVRKQ0xGbEJRVmtzYzBKQlFYTkNMRmRCUVZjc2FVTkJRV2xETEZsQlFWa3NNa05CUVRKRExITkRRVUZ6UXl3eVJFRkJNa1FzVFVGQlRTeFJRVUZSTEZkQlFWY3NTMEZCU3l4WlFVRlpMRkZCUVZFc1VVRkJVU3hOUVVGTkxHTkJRV01zU1VGQlNTd3dRa0ZCTUVJc1dVRkJXU3g1UjBGQmVVY3NWVUZCVlN4WFFVRlhMRmRCUVZjc1lVRkJZU3hoUVVGaExHRkJRV0VzWVVGQllTeEZRVUZGTERaQ1FVRTJRaXh2UWtGQmIwSXNaME5CUVdkRExIVkNRVUYxUWl3MlFrRkJOa0lzZDBKQlFYZENMSGRFUVVGM1JDeHZRa0ZCYjBJc2FVSkJRV2xDTEhOQ1FVRnpRaXg1UTBGQmVVTXNjMEpCUVhOQ0xEQkVRVUV3UkN4elFrRkJjMElzTkVKQlFUUkNMSGxDUVVGNVFpd3JRa0ZCSzBJc05FTkJRVFJETEZWQlFWVXNVVUZCVVN4WFFVRlhMRTlCUVU4c1QwRkJUeXhQUVVGUExEWkNRVUUyUWl4VlFVRlZMR0ZCUVdFc2QwSkJRWGRDTERKRFFVRXlReXhoUVVGaExFZEJRVWNzZDBKQlFYZENMRmRCUVZjc2RVWkJRWFZHTEd0Q1FVRnJRaXhIUVVGSExIZENRVUYzUWl4dlFrRkJiMElzTUVKQlFUQkNMSGxDUVVGNVFpd3lRMEZCTWtNc01rSkJRVEpDTEUxQlFVMHNXVUZCV1N3d1FrRkJNRUlzYzBKQlFYTkNMRGhDUVVFNFFpdzJRa0ZCTmtJc1YwRkJWeXgzUkVGQmQwUXNNa0pCUVRKQ0xHZENRVUZuUWl4UlFVRlJMRmRCUVZjc1QwRkJUeXhyUWtGQmEwSXNTMEZCU3l4WlFVRlpMR2xDUVVGcFFpeFpRVUZaTEcxQ1FVRnRRaXhWUVVGVkxEUkNRVUUwUWl4WFFVRlhMSGxFUVVGNVJDeHJRMEZCYTBNc1VVRkJVU3h0UWtGQmJVSXNUMEZCVHl4elFrRkJjMElzT0VKQlFUaENMRlZCUVZVc2IwSkJRVzlDTEdsQ1FVRnBRaXhKUVVGSkxGTkJRVk1zU1VGQlNTeHJRa0ZCYTBJc2JVSkJRVzFDTEdGQlFXRXNTMEZCU3l4NVJFRkJlVVFzVlVGQlZTeExRVUZMTEc5Q1FVRnZRaXhaUVVGWkxITkNRVUZ6UWl4cFFrRkJhVUlzV1VGQldTeHRRa0ZCYlVJc1NVRkJTU3hQUVVGUExIRkNRVUZ4UWl4clEwRkJhME1zUzBGQlN5eGpRVUZqTEZkQlFWY3NaVUZCWlN4VFFVRlRMR0ZCUVdFc1MwRkJTeXhUUVVGVExFZEJRVWNzV1VGQldTd3dRa0ZCTUVJc1dVRkJXU3h4UWtGQmNVSXNhME5CUVd0RExFdEJRVXNzWTBGQll5eFpRVUZaTEdWQlFXVXNVMEZCVXl4VFFVRlRMRWxCUVVrc2JVSkJRVzFDTERoQ1FVRTRRaXh4UkVGQmNVUXNUVUZCVFN4TlFVRk5MRTFCUVUwc1JVRkJSU3h4UWtGQmNVSXNVVUZCVVN4UFFVRlBMR2xDUVVGcFFpeFZRVUZWTEU5QlFVOHNjVUpCUVhGQ0xFbEJRVWtzVDBGQlR5eGxRVUZsTEZOQlFWTXNiVUpCUVcxQ0xHOUNRVUZ2UWl4UFFVRlBMRTFCUVUwc1dVRkJXU3hyUWtGQmEwSXNhVUpCUVdsQ0xEUkNRVUUwUWl4TFFVRkxMRkZCUVZFc1pVRkJaU3hUUVVGVExHdENRVUZyUWl4bFFVRmxMR2RDUVVGblFpdzBRa0ZCTkVJc1MwRkJTeXhQUVVGUExFdEJRVXNzYlVOQlFXMURMSEZDUVVGeFFpeG5Ra0ZCWjBJc2MwTkJRWE5ETEdOQlFXTXNVVUZCVVN4cFFrRkJhVUlzUzBGQlN5eFBRVUZQTEhORFFVRnpReXhUUVVGVExGRkJRVkVzVlVGQlZTeHJRa0ZCYTBJc1NVRkJTU3h0UTBGQmJVTXNVMEZCVXp0QlFVTndNMHdzUjBGQlJTeHJRa0ZCYTBJc1VVRkJVU3d3UWtGQk1FSXNVVUZCVVN4SlFVRkpMRTlCUVU4c09FSkJRVGhDTEZWQlFWVXNNa0pCUVRKQ0xFOUJRVThzVVVGQlVTeG5Ra0ZCWjBJc2EwSkJRV3RDTEZGQlFWRXNUMEZCVHl4NVEwRkJlVU1zY1VOQlFYRkRMRTlCUVU4c1lVRkJZU3hyUWtGQmEwSXNkVU5CUVhWRExFOUJRVThzTmtKQlFUWkNMR3RDUVVGclFpeHJRa0ZCYTBJc1MwRkJTeXh4UWtGQmNVSXNjVUpCUVhGQ0xIVkZRVUYxUlN4clJFRkJhMFFzYVVSQlFXbEVMR1ZCUVdVc2FVVkJRV2xGTERCQ1FVRXdRaXhyUWtGQmEwSXNlVUpCUVhsQ0xEWkNRVUUyUWl4MVFrRkJkVUlzU1VGQlNTdzRRa0ZCT0VJc05rSkJRVFpDT3p0QlFVVm9OVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIVkRRVUZ6UXl4VFFVRlRMR1ZCUVdVc2VVSkJRWGxDTEdOQlFXTXNUMEZCVHl4dFFrRkJiVUlzYVVKQlFXbENMR05CUVdNc1RVRkJUU3hYUVVGWExEaENRVUU0UWl4clFrRkJhMElzY1VOQlFYRkRMRzFDUVVGdFFpeGpRVUZqTEZOQlFWTXNiVUpCUVcxQ0xHOUNRVUZ2UWl3d1FrRkJNRUlzVTBGQlV5eHJRa0ZCYTBJc2JVSkJRVzFDTEdkQ1FVRm5RaXgzUWtGQmQwSXNZMEZCWXl4cFEwRkJhVU1zTUVKQlFUQkNMR3RDUVVGclFpd3dRMEZCTUVNc1NVRkJTU3cwUWtGQk5FSXNiVUpCUVcxQ0xHMUNRVUZ0UWl4VFFVRlRMR2RDUVVGblFpeExRVUZMTERCQ1FVRXdRaXh6UWtGQmMwSXNOa0pCUVRaQ0xHOUNRVUZ2UWl4cFFrRkJhVUlzWTBGQll5eHZRa0ZCYjBJc2FVSkJRV2xDTEdGQlFXRXNVVUZCVVN4WlFVRlpMRWxCUVVrc1MwRkJTeXh2UTBGQmIwTXNiVU5CUVcxRExFdEJRVXNzV1VGQldTeEpRVUZKTEUxQlFVMHNkVUpCUVhWQ0xHbENRVUZwUWl4WlFVRlpMR3RDUVVGclFpeHBRa0ZCYVVJc2IwSkJRVzlDTEcxRFFVRnRReXh4UWtGQmNVSXNhMEpCUVd0Q0xIbENRVUY1UWl3MFFrRkJORUlzVTBGQlV5eHZRa0ZCYjBJc1UwRkJVeXhaUVVGWkxFbEJRVWtzVFVGQlRTeHJRMEZCYTBNc2QwSkJRWGRDTEVWQlFVVXNaVUZCWlN4aFFVRmhMSE5DUVVGelFpeGpRVUZqTEdsQ1FVRnBRaXhUUVVGVExGbEJRVmtzU1VGQlNTeExRVUZMTEc5RFFVRnZReXcyUWtGQk5rSXNORUpCUVRSQ0xHdENRVUZyUWl4dFFrRkJiVUlzWlVGQlpTeFRRVUZUTEZsQlFWa3NTVUZCU1N4TlFVRk5MRzFFUVVGdFJDd3lRa0ZCTWtJc1owSkJRV2RDTEhOQ1FVRnpRaXhqUVVGakxHbENRVUZwUWl4VFFVRlRMRmxCUVZrc1NVRkJTU3hMUVVGTExHOURRVUZ2UXl3clFrRkJLMElzYTBKQlFXdENMRzFDUVVGdFFpeGxRVUZsTEZOQlFWTXNXVUZCV1N4SlFVRkpMRXRCUVVzc09FTkJRVGhETEhsQ1FVRjVRaXhqUVVGakxITkNRVUZ6UWl4SlFVRkpMR3RFUVVGclJDeFRRVUZUTEhsRFFVRjVReXh0UWtGQmJVSXNhMFJCUVd0RUxIbERRVUY1UXl4cFFrRkJhVUlzZDBKQlFYZENMRzFDUVVGdFFpeHhRa0ZCY1VJc2RVSkJRWFZDTEdGQlFXRXNjVUpCUVhGQ0xEWkNRVUUyUWl4elFrRkJjMElzYVVKQlFXbENMR05CUVdNc2FVSkJRV2xDTEhGQ1FVRnhRaXhWUVVGVkxGVkJRVlVzVFVGQlRTeFpRVUZaTEV0QlFVc3NjVU5CUVhGRExGVkJRVlVzYlVKQlFXMUNMRTFCUVUwc1dVRkJXU3hKUVVGSkxFMUJRVTBzTUVKQlFUQkNMRzlDUVVGdlFpeGpRVUZqTEhWQ1FVRjFRaXhyUWtGQmEwSXNlVUpCUVhsQ0xESkNRVUV5UWl4VFFVRlRMR3RDUVVGclFpeEZRVUZGTEhsQ1FVRjVRaXhuUTBGQlowTXNORUpCUVRSQ0xHRkJRV0VzYTBKQlFXdENMRzFDUVVGdFFpeG5Ra0ZCWjBJc2IwSkJRVzlDTEdkQ1FVRm5RaXhuUWtGQlowSXNXVUZCV1N4elFrRkJjMElzVFVGQlRTeG5Ra0ZCWjBJc2VVSkJRWGxDTEZOQlFWTXNORU5CUVRSRExIRkNRVUZ4UWl4clEwRkJhME1zSzBKQlFTdENMSEZDUVVGeFFpd3dRMEZCTUVNc1JVRkJSU3huUWtGQlowSXNVMEZCVXp0QlFVTjZlVWM3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1kwRkJZU3g1UkVGQmVVUXNhVUpCUVdsQ0xHMUNRVUZ0UWl4WlFVRlpMRmxCUVZrc1JVRkJSU3h6UWtGQmMwSXNiVUpCUVcxQ0xHMUNRVUZ0UWl4blEwRkJaME1zYTBKQlFXdENMSGxEUVVGNVF5eEpRVUZKTEV0QlFVc3NWMEZCVnl4bFFVRmxMR05CUVdNc2FVTkJRV2xETEd0Q1FVRnJRaXd3UlVGQk1FVXNTVUZCU1N4elFrRkJjMElzVlVGQlZTeEZRVUZGT3p0QlFVVXZaVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4clEwRkJhVU1zTmtoQlFUWklMRFpEUVVFMlF5dzJRMEZCTmtNc0swSkJRU3RDTERaRFFVRTJReXh6UWtGQmMwSXNORUpCUVRSQ0xHdENRVUZyUWl4WlFVRlpMR0ZCUVdFc2EwSkJRV3RDTEcxQ1FVRnRRaXhuUWtGQlowSXNjVUpCUVhGQ08wRkJRek5sTEhkQ1FVRjFRaXh6UWtGQmMwSXNiVUpCUVcxQ0xEQkNRVUV3UWl4clJrRkJhMFlzVDBGQlR5eDNRa0ZCZDBJc1owUkJRV2RFTEhsQ1FVRjVRaXh0UkVGQmJVUXNSVUZCUlN4NVFrRkJlVUlzZFVKQlFYVkNMSGxDUVVGNVFpeGhRVUZoTEVWQlFVVXNaVUZCWlN4dFFrRkJiVUlzWlVGQlpTd3JRa0ZCSzBJN1FVRkRhbVlzUjBGQlJTeEpRVUZKTEdsQ1FVRnBRaXhuUTBGQlowTXNPRUpCUVRoQ0xHdERRVUZyUXl3clFrRkJLMElzYTBOQlFXdERMRzlDUVVGdlFpeGxRVUZsTEZsQlFWa3NXVUZCV1N4elFrRkJjMElzTWtKQlFUSkNMR2xEUVVGcFF5eHRRa0ZCYlVJc2IwSkJRVzlDTEdkRFFVRm5ReXhGUVVGRkxITkNRVUZ6UWl3eVFrRkJNa0lzYTBSQlFXdEVPMEZCUTJwbUxFbEJRVWNzYlVKQlFXMUNMRzFDUVVGdFFpeEZRVUZGTEZWQlFWVXNWMEZCVnl4VFFVRlRMR3RDUVVGclFpdzJSRUZCTmtRc1NVRkJTU3hsUVVGbExHZENRVUZuUWl4WlFVRlpMRzFDUVVGdFFpdzBRMEZCTkVNc2QwSkJRWGRDTEd0Q1FVRnJRaXhwUWtGQmFVSXNiVUpCUVcxQ0xHMUNRVUZ0UWl3clFrRkJLMElzYVVWQlFXbEZPMEZCUTNaakxITkRRVUZ4UXl3clFrRkJLMElzTmtKQlFUWkNMSGRDUVVGM1FpeDFRa0ZCZFVJc01FTkJRVEJETEdsRFFVRnBReXgzUWtGQmQwSXNiME5CUVc5RExGTkJRVk1zWVVGQllTeEZRVUZGTEN0Q1FVRXJRaXhwUWtGQmFVSXNZMEZCWXl4elFrRkJjMElzTWtOQlFUSkRMR2RDUVVGblFpeFhRVUZYTEhOQ1FVRnpRaXh0UWtGQmJVSTdRVUZEYkdZc0swVkJRVGhGTEcxQ1FVRnRRaXhoUVVGaExHTkJRV01zZFVOQlFYVkRMRFpDUVVFMlFpeGpRVUZqTEdWQlFXVXNhVUpCUVdsQ0xHOUNRVUZ2UWl4SFFVRkhMR3REUVVGclF5eGpRVUZqTEZOQlFWTXNORUpCUVRSQ0xIRkNRVUZ4UWl3MlFrRkJOa0lzWjBKQlFXZENMRkZCUVZFc2FVSkJRV2xDTzBGQlEzSmlMREJEUVVGNVF5eEZRVUZGTERKQ1FVRXlRaXh4UWtGQmNVSXNNRUpCUVRCQ0xIRkVRVUZ4UkN4elFrRkJjMElzTkVOQlFUUkRMR0ZCUVdFc1YwRkJWeXd3UWtGQk1FSXNiVUpCUVcxQ0xGbEJRVmtzV1VGQldTeGxRVUZsTEdsRFFVRnBReXhsUVVGbExHbENRVUZwUWl4clFrRkJhMElzUjBGQlJ5eHRRMEZCYlVNc2EwSkJRV3RDTEUxQlFVMDdRVUZEZW1Vc1VVRkJUeXh4UWtGQmNVSXNjME5CUVhORExGVkJRVlVzYlVOQlFXMURMRmRCUVZjc1UwRkJVeXd5UWtGQk1rSXNjVUpCUVhGQ0xEQkNRVUV3UWl3MlEwRkJOa01zVlVGQlZTeDVRMEZCZVVNc1JVRkJSVHM3UVVGRkwxTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWVVGQldTd3lSMEZCTWtjc1RVRkJUU3cyUWtGQk5rSXNiMEpCUVc5Q0xFMUJRVTBzUzBGQlN5dzJRMEZCTmtNc1QwRkJUeXhQUVVGUExDdERRVUVyUXl4cFFrRkJhVUlzYTBKQlFXdENMR2xDUVVGcFFpeFBRVUZQTEhORFFVRnpReXhwUWtGQmFVSXNhMEpCUVd0Q0xHbENRVUZwUWl4UFFVRlBMSE5EUVVGelF6dEJRVU55WlN4MVEwRkJjME1zYjBKQlFXOUNMRzlIUVVGdlJ5eEpRVUZKTEhGQ1FVRnhRaXhMUVVGTExHRkJRV0VzZVV0QlFYbExMR05CUVdNc01FSkJRVEJDTEZGQlFWRXNTVUZCU1R0QlFVTjBZU3h4UWtGQmIwSXNORUpCUVRSQ0xHOUVRVUZ2UkN3MFFrRkJORUlzWVVGQllTeGpRVUZqTEZOQlFWTXNkVVJCUVhWRUxGTkJRVk1zWTBGQll5eFRRVUZUTEhsRFFVRjVReXh6UmtGQmMwWXNTVUZCU1R0QlFVTTVXQ3g1U0VGQmQwZ3NiMFZCUVc5RkxHOUZRVUZ2UlN4dlJVRkJiMFVzYjBWQlFXOUZMRTlCUVU4c1UwRkJVeXhUUVVGVExGTkJRVk1zVjBGQlZ5eEZRVUZGTEhsQ1FVRjVRanM3UVVGRmFHUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWVVGQldTeG5Ra0ZCWjBJc2QwTkJRWGRETEdkQ1FVRm5RaXh0UWtGQmJVSXNaMEpCUVdkQ0xIZERRVUYzUXl4blFrRkJaMElzYlVKQlFXMUNPMEZCUTJ4TkxEaEhRVUUyUnp0QlFVTTNSenRCUVVOQkxIbExRVUYzU3l4RlFVRkZPMEZCUXpGTE8wRkJRMEVzYzFOQlFYRlRMRVZCUVVVN1FVRkRkbE03UVVGRFFTdzJVRUZCTkZBc1JVRkJSVHRCUVVNNVVEdEJRVU5CTEhGUVFVRnZVQ3hGUVVGRk8wRkJRM1JRTzBGQlEwRXNiVXhCUVd0TUxFVkJRVVU3UVVGRGNFd3NObVZCUVRSbExFVkJRVVU3UVVGRE9XVTdRVUZEUVN4blRVRkJLMHdzUlVGQlJUdEJRVU5xVFR0QlFVTkJMRFJIUVVFeVJ5eDVSa0ZCZVVZc2IwSkJRVzlDTEcxRFFVRnRReXhMUVVGTExFdEJRVXNzWVVGQllTd3dRa0ZCTUVJc2JVSkJRVzFDTEZGQlFWRXNTMEZCU3l4TFFVRkxMRFpDUVVFMlFpeExRVUZMTEc5R1FVRnZSaXgxUWtGQmRVSXNVVUZCVVN4SlFVRkpPMEZCUXpGbExGZEJRVlVzZFVKQlFYVkNMSE5DUVVGelFpeFJRVUZSTEV0QlFVc3NhVUpCUVdsQ0xEUkNRVUUwUWl4elEwRkJjME1zTkVKQlFUUkNMSGxEUVVGNVF5d3JRa0ZCSzBJc2EwSkJRV3RDTEc5Q1FVRnZRaXg1UWtGQmVVSXNjMEpCUVhOQ0xIbENRVUY1UWl4M1FrRkJkMElzTUVKQlFUQkNMRmxCUVZrc1MwRkJTeXhMUVVGTExIRkVRVUZ4UkN4SlFVRkpPMEZCUXpGbExHdENRVUZwUWl4bFFVRmxMR2xDUVVGcFFpeGxRVUZsTERCQ1FVRXdRaXhsUVVGbExEQkNRVUV3UWl4M1FrRkJkMElzZVVKQlFYbENMSE5DUVVGelFpeDVRa0ZCZVVJc2EwSkJRV3RDTEc5Q1FVRnZRaXhuUTBGQlowTXNSVUZCUlN4NVFrRkJlVUlzZDBKQlFYZENMRzlDUVVGdlFpeHpRa0ZCYzBJc2NVUkJRWEZFTEhGRVFVRnhSRHRCUVVOb1ppd3lRMEZCTUVNc05FSkJRVFJDTERaQ1FVRTJRaXcyUWtGQk5rSXNOa0pCUVRaQ0xEUkNRVUUwUWl3MlFrRkJOa0lzTmtKQlFUWkNMRFpDUVVFMlFpeG5RMEZCWjBNc1JVRkJSU3dyUWtGQkswSTdPMEZCUldwV08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR0ZCUVZrc2FVTkJRV2xETEdOQlFXTXNjMEpCUVhOQ0xIVkRRVUYxUXl4VlFVRlZMRXRCUVVzc1dVRkJXU3hKUVVGSkxIZElRVUYzU0N4blFrRkJaMElzY1VOQlFYRkRMSFZDUVVGMVFpeFhRVUZYTEZkQlFWY3NhMEpCUVd0Q0xHMUNRVUZ0UWl3d1EwRkJNRU1zYVVOQlFXbERMSEZDUVVGeFFqdEJRVU4wWml4SFFVRkZMRmxCUVZrc05rVkJRVFpGTERSQ1FVRTBRaXhKUVVGSkxIRkNRVUZ4UWl3eVJVRkJNa1U3TzBGQlJUTk9PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdOQlFXRXNNRUpCUVRCQ0xHMUNRVUZ0UWl4M1FrRkJkMElzTUVKQlFUQkNMRzFDUVVGdFFpeDNRa0ZCZDBJc01FSkJRVEJDTEdkQ1FVRm5RaXgzUWtGQmQwSXNNRUpCUVRCQ0xHMUNRVUZ0UWl4M1FrRkJkMElzYzBWQlFYTkZMRXRCUVVzc2QwTkJRWGRETEd0Q1FVRnJRaXh2UWtGQmIwSXNiMFZCUVc5Rk8wRkJRek5tTEN0Q1FVRTRRaXhaUVVGWkxFdEJRVXNzUzBGQlN5eHBRa0ZCYVVJc2NVUkJRWEZFTzBGQlF6RklPMEZCUTBFN1FVRkRRU3hyVlVGQmFWVXNZMEZCWXl4alFVRmpMR05CUVdNc1kwRkJZeXgzUWtGQmQwSXNLMFJCUVN0RUxIVkNRVUYxUWp0QlFVTjJaU3hoUVVGWkxHOUZRVUZ2UlN4dlJVRkJiMFVzTUVKQlFUQkNMR2RDUVVGblFpeGhRVUZoTEZWQlFWVXNVVUZCVVN4SlFVRkpMR2RGUVVGblJTeFRRVUZUTEd0Q1FVRnJRaXg1UWtGQmVVSXNNa0pCUVRKQ0xGVkJRVlVzUlVGQlJTeDVRa0ZCZVVJc2FVTkJRV2xET3p0QlFVVjBZanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4aFFVRlpMRFpGUVVFMlJTeHZRa0ZCYjBJc0swVkJRU3RGTEN0Q1FVRXJRaXhyUlVGQmEwVXNTMEZCU3l4TFFVRkxMSE5DUVVGelFpeExRVUZMTEc5RFFVRnZReXhwUWtGQmFVSXNkVUpCUVhWQ08wRkJRemxaTEdWQlFXTXNTVUZCU1N4SlFVRkpMR05CUVdNc1NVRkJTU3hKUVVGSkxHTkJRV01zWTBGQll5eGpRVUZqTEdOQlFXTXNZMEZCWXl4M1FrRkJkMElzSzBSQlFTdEVMSFZDUVVGMVFpdzJRMEZCTmtNc2MwSkJRWE5DTEhOQ1FVRnpRaXhuUWtGQlowSXNhMEpCUVd0Q0xHdENRVUZyUWl4NVFrRkJlVUlzTWtKQlFUSkNMRlZCUVZVc1JVRkJSU3d3UWtGQk1FSXNhME5CUVd0RE96dEJRVVY2WlR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeGpRVUZoTEhGR1FVRnhSaXc0UWtGQk9FSXNVMEZCVXl4TFFVRkxMRVZCUVVVc1RVRkJUU3hIUVVGSExFbEJRVWtzZDBKQlFYZENMRXRCUVVzc1pVRkJaU3hMUVVGTExGRkJRVkVzUzBGQlN5d3dSRUZCTUVRc1NVRkJTU3c0UWtGQk9FSXNiMEpCUVc5Q0xHdERRVUZyUXl3clFrRkJLMElzZFVaQlFYVkdMRXRCUVVzc1MwRkJTenRCUVVNM1pTeFZRVUZUTEV0QlFVc3NkVUpCUVhWQ0xHZEhRVUZuUnl4elJVRkJjMFVzT0VSQlFUaEVMRWxCUVVrc1NVRkJTU3hKUVVGSkxGRkJRVkVzU1VGQlNTeEpRVUZKTEVsQlFVa3NVVUZCVVN4alFVRmpMR05CUVdNc1kwRkJZeXhqUVVGakxHTkJRV01zWTBGQll5eGpRVUZqTEdOQlFXTXNkMEpCUVhkQ08wRkJRM3BpTEhkQ1FVRjFRaXd3UTBGQk1FTXNjMEpCUVhOQ0xITkNRVUZ6UWl4blFrRkJaMElzYTBKQlFXdENMR3RDUVVGclFpeDVRa0ZCZVVJc01rSkJRVEpDTEZWQlFWVXNSVUZCUlN3MFFrRkJORUlzYjBOQlFXOURPenRCUVVWcVV6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hoUVVGWkxEQkZRVUV3UlN4dlFrRkJiMElzSzBkQlFTdEhMSGRDUVVGM1Fpd3JRa0ZCSzBJc1kwRkJZeXhWUVVGVkxFVkJRVVVzTkVKQlFUUkNMRzlEUVVGdlF6czdRVUZGTVZjN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNZVUZCV1N4aFFVRmhMRzFEUVVGdFF6dEJRVU0xUkR0QlFVTkJPMEZCUTBFN1FVRkRRU3hwUjBGQlowY3NTMEZCU3l4aFFVRmhMSEZDUVVGeFFpeHZRa0ZCYjBJc2MxTkJRWE5UTEN0Q1FVRXJRanRCUVVOb1pTd3lVVUZCTUZFc1MwRkJTeXhMUVVGTExGZEJRVmNzY1VSQlFYRkVMRXRCUVVzN1FVRkRlbFlzZVUxQlFYZE5MRk5CUVZNc1VVRkJVVHRCUVVONlRpeHRVRUZCYTFBc1dVRkJXU3cyUWtGQk5rSXNXVUZCV1N3MlFrRkJOa0lzV1VGQldTdzJRa0ZCTmtJc1dVRkJXU3cyUWtGQk5rSXNXVUZCV1N3MlFrRkJOa0lzV1VGQldTdzRRa0ZCT0VJN1FVRkRlbVVzSzBKQlFUaENMRmxCUVZrc09FSkJRVGhDTEhkQ1FVRjNRaXdyUkVGQkswUXNkVUpCUVhWQ0xDdERRVUVyUXl4M1FrRkJkMElzYzBKQlFYTkNMR2RDUVVGblFpd3dRa0ZCTUVJc2EwSkJRV3RDTEhsQ1FVRjVRaXd5UWtGQk1rSXNVMEZCVXl4alFVRmpMRVZCUVVVc05FSkJRVFJDTEc5RFFVRnZRenM3UVVGRk5XUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWVVGQldTeDFSa0ZCZFVZc2IwSkJRVzlDTEhOVFFVRnpVeXgzUWtGQmQwSXNLMEpCUVN0Q0xHVkJRV1VzVlVGQlZTeEZRVUZGTzBGQlF5OWxMRzlDUVVGdFFpeHZRMEZCYjBNN08wRkJSWFpFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRXNhMlJCUVdsa0xDdENRVUVyUWp0QlFVTm9aanRCUVVOQkxHRkJRVms3UVVGRFdqdEJRVU5CTEhkRFFVRjFReXh2UWtGQmIwSXNOa1ZCUVRaRkxDdENRVUVyUWl4WlFVRlpMRXRCUVVzc1MwRkJTeXhwUWtGQmFVSXNjVVJCUVhGRUxIVkhRVUYxUnl4VFFVRlRMRk5CUVZNc1UwRkJVeXhUUVVGVExGTkJRVk1zWTBGQll5eExRVUZMTzBGQlF6RmhMRFpWUVVFMFZTeGhRVUZoTEdkQ1FVRm5RaXhuUWtGQlowSXNaMEpCUVdkQ0xHZENRVUZuUWl4UFFVRlBMSGRDUVVGM1FqdEJRVU40WWl4M1FrRkJkVUlzYjBWQlFXOUZMREJDUVVFd1FpeG5Ra0ZCWjBJc1lVRkJZU3hWUVVGVkxGRkJRVkVzU1VGQlNTeG5SVUZCWjBVc1UwRkJVeXhyUWtGQmEwSXNlVUpCUVhsQ0xESkNRVUV5UWl4VlFVRlZMRVZCUVVVc0swSkJRU3RDTEhWRFFVRjFRenM3UVVGRmVsazdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWVVGQldTdzBRa0ZCTkVJc0swSkJRU3RDTEcxQ1FVRnRRaXd3UWtGQk1FSXNiVU5CUVcxRExIZENRVUYzUWl4blEwRkJaME1zVlVGQlZTdzRSVUZCT0VVc1NVRkJTU3h4UTBGQmNVTXNkMEpCUVhkQ0xHRkJRV0VzYTBKQlFXdENMRzFDUVVGdFFpeFZRVUZWTEhGQ1FVRnhRaXh2UWtGQmIwSXNkVUpCUVhWQ0xGbEJRVmtzYzBKQlFYTkNPMEZCUTNSblFpeGpRVUZoTEdkQ1FVRm5RaXhWUVVGVkxHbEVRVUZwUkN4RlFVRkZPenRCUVVVeFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hoUVVGWkxIRkdRVUZ4Uml4alFVRmpMSEZEUVVGeFF5eHRRa0ZCYlVJc05FSkJRVFJDTEhWQ1FVRjFRaXh6U0VGQmMwZ3NWMEZCVnl4RlFVRkZMRGhDUVVFNFFpeFZRVUZWTEhGRFFVRnhReXhKUVVGSkxFdEJRVXNzWjBKQlFXZENMRlZCUVZVc2MwSkJRWE5DTEVsQlFVa3NaVUZCWlR0QlFVTjBaaXhSUVVGUExHVkJRV1VzVlVGQlZTeEZRVUZGTEhsQ1FVRjVRaXhwUTBGQmFVTTdPMEZCUlRWR08wRkJRMEU3UVVGRFFTd3JSVUZCT0VVc1pVRkJaU3h2UWtGQmIwSXNUVUZCVFN4TlFVRk5MRk5CUVZNc1VVRkJVU3hqUVVGakxFMUJRVTBzYTBOQlFXdERMREpEUVVFeVF5eHJRa0ZCYTBJc2EwTkJRV3RETEhWQ1FVRjFRaXhMUVVGTExHdENRVUZyUWl4clEwRkJhME1zWjBSQlFXZEVMRmRCUVZjc2MwSkJRWE5DTEZkQlFWY3NVMEZCVXl4eFFrRkJjVUlzVTBGQlV5eE5RVUZOTEZGQlFWRXNUVUZCVFN4TlFVRk5MRkZCUVZFc1YwRkJWeXhMUVVGTExIZENRVUYzUWl4TlFVRk5MRGhDUVVFNFFpeFJRVUZSTEZOQlFWTXNVMEZCVXl4clFrRkJhMElzVFVGQlRTeEpRVUZKTEV0QlFVc3NVMEZCVXl3eVFrRkJNa0lzVDBGQlR5eEpRVUZKTEV0QlFVc3NVMEZCVXl4bFFVRmxMR3RDUVVGclFpeE5RVUZOTEVsQlFVa3NTMEZCU3l3eVFrRkJNa0lzYTBKQlFXdENMRTlCUVU4c1UwRkJVeXhyUWtGQmEwSXNVMEZCVXl4dlFrRkJiMElzYTBKQlFXdENMRTFCUVUwc2EwSkJRV3RDTEZGQlFWRXNZVUZCWVN4TFFVRkxMSGxEUVVGNVF6dEJRVU55SzBJN1FVRkRRVHRCUVVOQkxGZEJRVlVzTWtKQlFUSkNMSFZEUVVGMVF5d3lRa0ZCTWtJc1dVRkJXU3gxUWtGQmRVSXNkVUpCUVhWQ0xFdEJRVXNzWjBOQlFXZERMSFZDUVVGMVFpeExRVUZMTEhkQ1FVRjNRaXhsUVVGbExEUkNRVUUwUWl3d1FrRkJNRUlzWTBGQll5eDVRa0ZCZVVJc2VVSkJRWGxDTEd0Q1FVRnJRaXhUUVVGVExEQkNRVUV3UWl4elFrRkJjMElzWTBGQll5eHZRa0ZCYjBJc2IwSkJRVzlDTEdOQlFXTXNNRU5CUVRCRExHbERRVUZwUXl4dlFrRkJiMElzVTBGQlV5d3dRa0ZCTUVJc2MwSkJRWE5DTEdOQlFXTXNiMEpCUVc5Q0xHOUNRVUZ2UWl4alFVRmpMRFpDUVVFMlFpeHpRa0ZCYzBJc2JVSkJRVzFDTEZOQlFWTXNOa1JCUVRaRUxEUkNRVUUwUWl4VFFVRlRMRXRCUVVzc01FTkJRVEJETERSQ1FVRTBRaXhUUVVGVExFdEJRVXNzTkVKQlFUUkNMRlZCUVZVc09FSkJRVGhDTEhWRFFVRjFReXh0UTBGQmJVTXNZVUZCWVN3d1EwRkJNRU1zYjBOQlFXOURMSE5EUVVGelF5eHBSRUZCYVVRc2MwSkJRWE5DTEZWQlFWVXNjVUpCUVhGQ0xGTkJRVk1zVFVGQlRTeE5RVUZOTEdWQlFXVXNjVUpCUVhGQ0xGVkJRVlVzVFVGQlRTeE5RVUZOTEdWQlFXVXNjVUpCUVhGQ0xGVkJRVlVzVFVGQlRTeE5RVUZOTEdWQlFXVXNjVUpCUVhGQ0xIVkNRVUYxUWl4dlFrRkJiMElzTmtKQlFUWkNMSEZDUVVGeFFpeHpRa0ZCYzBJc2JVSkJRVzFDTEV0QlFVc3NTMEZCU3l4aFFVRmhMRmRCUVZjc1YwRkJWeXgxUWtGQmRVSXNVMEZCVXl4clFrRkJhMElzVVVGQlVTeFZRVUZWTEV0QlFVc3NVMEZCVXl4clFrRkJhMElzUzBGQlN5eFhRVUZYTEdkQ1FVRm5RaXhaUVVGWkxHRkJRV0VzVTBGQlV5dzBRa0ZCTkVJc1RVRkJUU3hWUVVGVkxFbEJRVWtzUzBGQlN5eFRRVUZUTEVsQlFVa3NTMEZCU3l4WFFVRlhMRWxCUVVrc1MwRkJTeXhUUVVGVExFbEJRVWtzUzBGQlN5eFZRVUZWTEVsQlFVa3NTMEZCU3l4VFFVRlRMRWxCUVVrc1MwRkJTeXh2UWtGQmIwSXNXVUZCV1N4VFFVRlRMRk5CUVZNc01rSkJRVEpDTEdOQlFXTXNhVU5CUVdsRExGRkJRVkVzY1VKQlFYRkNMRTlCUVU4c1UwRkJVeXhSUVVGUkxGTkJRVk1zYVVKQlFXbENMRXRCUVVzc1owSkJRV2RDTERSRFFVRTBReXhuUTBGQlowTXNTMEZCU3l4elFrRkJjMElzUzBGQlN5eGxRVUZsTEZsQlFWa3NkMEpCUVhkQ0xGVkJRVlVzVVVGQlVTeDVRMEZCZVVNc1lVRkJZU3hOUVVGTkxHdERRVUZyUXl4dlFrRkJiMElzY1VKQlFYRkNMRzFEUVVGdFF5eFZRVUZWTEhWQ1FVRjFRaXhoUVVGaExHOURRVUZ2UXl4TlFVRk5MRlZCUVZVc1NVRkJTU3hMUVVGTExGTkJRVk1zU1VGQlNTeExRVUZMTEZOQlFWTXNTVUZCU1N4TFFVRkxMRlZCUVZVc1NVRkJTU3hMUVVGTExGTkJRVk1zU1VGQlNTeExRVUZMTERKQ1FVRXlRaXgxUTBGQmRVTXNORUpCUVRSQ0xGVkJRVlVzWjBOQlFXZERMRTlCUVU4c1kwRkJZeXhaUVVGWkxGRkJRVkVzT0VKQlFUaENMRFpDUVVFMlFpeExRVUZMTEhOQ1FVRnpRaXhUUVVGVExGZEJRVmNzUzBGQlN5eFJRVUZSTEU5QlFVOHNUVUZCVFN4cFFrRkJhVUlzWlVGQlpTeHZRa0ZCYjBJc1dVRkJXU3c0UWtGQk9FSXNVMEZCVXl4cFFrRkJhVUlzYjBOQlFXOURMSGRDUVVGM1FpeHBRa0ZCYVVJc1UwRkJVeXhUUVVGVExHRkJRV0VzVVVGQlVTeFRRVUZUTEhOQ1FVRnpRaXhqUVVGakxIZENRVUYzUWl4VlFVRlZMRk5CUVZNc2EwSkJRV3RDTEZWQlFWVXNhMEpCUVd0Q0xFbEJRVWtzVFVGQlRTeG5Ra0ZCWjBJc1NVRkJTU3hMUVVGTExHZENRVUZuUWl4SlFVRkpMRXRCUVVzc1owSkJRV2RDTEVsQlFVa3NTMEZCU3l4blFrRkJaMElzU1VGQlNTeExRVUZMTEZOQlFWTXNkVUpCUVhWQ0xHTkJRV01zVTBGQlV5eHBSVUZCYVVVc01rSkJRVEpDTEUxQlFVMHNaVUZCWlN4TFFVRkxMRXRCUVVzc1pVRkJaU3hWUVVGVkxFdEJRVXNzUzBGQlN5eFBRVUZQTEdGQlFXRXNWMEZCVnl3eVFrRkJNa0lzV1VGQldTeFRRVUZUTEV0QlFVc3NaVUZCWlN4NVFrRkJlVUlzVjBGQlZ5d3dRa0ZCTUVJc1owSkJRV2RDTEdkQ1FVRm5RaXhsUVVGbExHOUVRVUZ2UkN4bFFVRmxMRXRCUVVzc1MwRkJTeXgzUWtGQmQwSXNhVUpCUVdsQ0xGVkJRVlVzUzBGQlN5eExRVUZMTEU5QlFVOHNUMEZCVHl4bFFVRmxMRmRCUVZjc1ZVRkJWU3d3UWtGQk1FSXNWMEZCVnl3MFFrRkJORUlzWTBGQll5eE5RVUZOTEU5QlFVOHNaMEpCUVdkQ0xHZENRVUZuUWl4bFFVRmxMR2RDUVVGblFpeGpRVUZqTEZOQlFWTXNTMEZCU3l4NVFrRkJlVUlzYTBKQlFXdENMRkZCUVZFc05rSkJRVFpDTEdGQlFXRXNWVUZCVlN4MVFrRkJkVUlzYlVOQlFXMURMRmRCUVZjc1owSkJRV2RDTEdsQ1FVRnBRaXhaUVVGWkxHVkJRV1VzVDBGQlR5eG5Ra0ZCWjBJc1YwRkJWeXhwUWtGQmFVSXNXVUZCV1N4VlFVRlZMRXRCUVVzc1ZVRkJWU3hoUVVGaExGRkJRVkVzYVVKQlFXbENMRmxCUVZrc1QwRkJUeXhsUVVGbExGTkJRVk1zYVVKQlFXbENMRXRCUVVzc1VVRkJVU3hWUVVGVkxFMUJRVTBzVlVGQlZTdzBRa0ZCTkVJc01rSkJRVEpDTEZWQlFWVXNWVUZCVlN4alFVRmpMRTlCUVU4c1VVRkJVU3hOUVVGTkxFdEJRVXNzWjBOQlFXZERMRTFCUVUwc1ZVRkJWU3huUWtGQlowSXNORUpCUVRSQ0xIZENRVUYzUWl4cFFrRkJhVUlzWjBKQlFXZENMR05CUVdNc1QwRkJUeXhSUVVGUkxGRkJRVkVzUzBGQlN5dzJRa0ZCTmtJc2VVUkJRWGxFTEdWQlFXVXNZMEZCWXl4VlFVRlZMR2xEUVVGcFF5eE5RVUZOTEZWQlFWVXNORUpCUVRSQ0xHTkJRV01zVjBGQlZ5eFBRVUZQTEdsQ1FVRnBRaXhaUVVGWkxGbEJRVmtzWVVGQllTeFpRVUZaTEdWQlFXVXNUMEZCVHl4WlFVRlpMRkZCUVZFc01rSkJRVEpDTERoQ1FVRTRRaXhSUVVGUkxHZENRVUZuUWl4blFrRkJaMElzUzBGQlN5eFpRVUZaTEZsQlFWa3NWVUZCVlN4aFFVRmhMRk5CUVZNc1QwRkJUeXdyUTBGQkswTXNPRU5CUVRoRExHOURRVUZ2UXl4cFFrRkJhVUlzYzBKQlFYTkNMRmRCUVZjc1lVRkJZU3c0UWtGQk9FSXNZVUZCWVN4aFFVRmhMRmRCUVZjc1kwRkJZeXd3UkVGQk1FUXNaME5CUVdkRExHbENRVUZwUWl4aFFVRmhMR2RDUVVGblFpeGxRVUZsTEZsQlFWa3NhVUpCUVdsQ0xGTkJRVk1zTkVKQlFUUkNMRTFCUVUwc1ZVRkJWU3hSUVVGUkxHZENRVUZuUWl4UlFVRlJMRFJDUVVFMFFpeHJRa0ZCYTBJc1dVRkJXU3c0UWtGQk9FSXNOa05CUVRaRExHRkJRV0VzVTBGQlV5eHZRa0ZCYjBJc1UwRkJVeXh4UWtGQmNVSXNhME5CUVd0RExIRkNRVUZ4UWl4TFFVRkxMRlZCUVZVc2IwSkJRVzlDTEZOQlFWTXNiMEpCUVc5Q0xEQkNRVUV3UWl4MVFrRkJkVUlzYTBKQlFXdENMR1ZCUVdVc2NVSkJRWEZDTEdOQlFXTXNaVUZCWlN4dFEwRkJiVU1zYVVOQlFXbERMR2xEUVVGcFF5d3JRa0ZCSzBJc0swSkJRU3RDTEhWQ1FVRjFRaXhoUVVGaExGTkJRVk1zWTBGQll5eGhRVUZoTEZOQlFWTXNWVUZCVlN4elFrRkJjMElzZDBKQlFYZENMSE5EUVVGelF5dzRRa0ZCT0VJc2VVSkJRWGxDTEhWQ1FVRjFRaXhUUVVGVExIRkNRVUZ4UWl4MVFrRkJkVUlzY1VKQlFYRkNMSGxDUVVGNVFpeGxRVUZsTEhkQ1FVRjNRaXhaUVVGWkxEaENRVUU0UWl3d1FrRkJNRUlzTUVOQlFUQkRMR3RDUVVGclFpeFRRVUZUTEhWQ1FVRjFRaXhaUVVGWkxGbEJRVmtzWlVGQlpTeFRRVUZUTEhWQ1FVRjFRaXh4UWtGQmNVSXNWMEZCVnl4WlFVRlpMRmRCUVZjc1MwRkJTeXhwUWtGQmFVSXNlVVZCUVhsRkxHRkJRV0VzYjBOQlFXOURMR3RDUVVGclFpeFhRVUZYTEZWQlFWVXNWVUZCVlN4M1FrRkJkMElzTWtKQlFUSkNMRzFDUVVGdFFpeDNRa0ZCZDBJc1kwRkJZeXhsUVVGbExEQkNRVUV3UWl4clFrRkJhMElzWlVGQlpTeDVRMEZCZVVNc2RVTkJRWFZETEhWRFFVRjFReXh4UTBGQmNVTXNjVU5CUVhGRExIRkNRVUZ4UWl4NVEwRkJlVU1zY1VKQlFYRkNMSE5DUVVGelFpeHpRa0ZCYzBJc2JVUkJRVzFFTEZsQlFWa3NZMEZCWXl4aFFVRmhMR2xDUVVGcFFpeGxRVUZsTEV0QlFVc3NVVUZCVVN4SlFVRkpMRXRCUVVzc2JVSkJRVzFDTERCQ1FVRXdRaXhOUVVGTkxITkNRVUZ6UWl4cFFrRkJhVUlzUzBGQlN5eHZRa0ZCYjBJc2NVSkJRWEZDTEhORFFVRnpReXgzUTBGQmQwTXNPRU5CUVRoRExHOURRVUZ2UXl3MFEwRkJORU1zTkVOQlFUUkRMREJEUVVFd1F5d3dRMEZCTUVNc2IwTkJRVzlETERoRFFVRTRReXd3UTBGQk1FTXNNRU5CUVRCRExEQkRRVUV3UXl4elEwRkJjME1zWjBOQlFXZERMSGxEUVVGNVF5eHhRMEZCY1VNc0swSkJRU3RDTERKRFFVRXlReXd5UTBGQk1rTXNLMEpCUVN0Q0xESkRRVUV5UXl4MVFrRkJkVUk3UVVGRGJIQlRPMEZCUTBFN1FVRkRRU3h2UWtGQmJVSXNXVUZCV1N4bFFVRmxMRk5CUVZNc2MwSkJRWE5DTEdGQlFXRXNZMEZCWXl4MVFrRkJkVUlzUzBGQlN5eGpRVUZqTEZsQlFWa3NTMEZCU3l4alFVRmpMR1ZCUVdVc1MwRkJTeXhqUVVGakxGZEJRVmNzZVVSQlFYbEVMSFZDUVVGMVFpd3lRMEZCTWtNc2QwSkJRWGRDTERKRFFVRXlReXg1UWtGQmVVSXNaMFJCUVdkRUxHOUNRVUZ2UWl4aFFVRmhMRlZCUVZVc1MwRkJTeXgxUTBGQmRVTXNVMEZCVXl4TFFVRkxMRmRCUVZjc2RVSkJRWFZDTEZsQlFWa3NTMEZCU3l4blEwRkJaME1zVlVGQlZTeDNRa0ZCZDBJc2IwSkJRVzlDTEd0RFFVRnJReXh4UWtGQmNVSXNiMEpCUVc5Q0xESkRRVUV5UXl4clFrRkJhMElzYTBOQlFXdERMREpDUVVFeVFpeG5Ra0ZCWjBJc1dVRkJXU3hMUVVGTExIZENRVUYzUWl4dlEwRkJiME1zV1VGQldTeFhRVUZYTEV0QlFVc3NhVUpCUVdsQ0xGRkJRVkVzZFVOQlFYVkRMRTlCUVU4c1UwRkJVeXhSUVVGUkxGZEJRVmNzYTBKQlFXdENMSEZDUVVGeFFpeEpRVUZKTEV0QlFVc3NVVUZCVVN3NFFrRkJPRUlzY1VKQlFYRkNMRTFCUVUwc2EwTkJRV3RETERoQ1FVRTRRaXgxUWtGQmRVSXNVVUZCVVN4blFrRkJaMElzUzBGQlN5eHhRa0ZCY1VJc2RVSkJRWFZDTEhsRVFVRjVSQ3hyUWtGQmEwSXNjVUpCUVhGQ0xHZERRVUZuUXl4eFFrRkJjVUlzZFVKQlFYVkNMR3RFUVVGclJDeExRVUZMTEhkQ1FVRjNRaXhyUWtGQmEwSXNaVUZCWlN4UlFVRlJMR2xDUVVGcFFpeExRVUZMTEU5QlFVOHNkMEpCUVhkQ0xIbENRVUY1UWl3eVFrRkJNa0lzV1VGQldTeHJRMEZCYTBNc1ZVRkJWU3h0UkVGQmJVUXNLMEpCUVN0Q0xGbEJRVmtzVVVGQlVTdzRRa0ZCT0VJc05rSkJRVFpDTEV0QlFVc3NkMEpCUVhkQ0xGTkJRVk1zVjBGQlZ5eExRVUZMTEdWQlFXVXNVVUZCVVN4blEwRkJaME1zU1VGQlNTeHRRa0ZCYlVJc1YwRkJWeXhUUVVGVExIRkNRVUZ4UWl3MlFrRkJOa0lzYTBKQlFXdENMRzFEUVVGdFF5eHJRa0ZCYTBJc2JVTkJRVzFETERaQ1FVRTJRaXdyUWtGQkswSXNVVUZCVVN4SlFVRkpMRXRCUVVzc2NVSkJRWEZDTEdWQlFXVXNZMEZCWXl4UlFVRlJMRk5CUVZNc1MwRkJTeXhyUWtGQmEwSXNWMEZCVnl4TFFVRkxMR2xDUVVGcFFpeFJRVUZSTEUxQlFVMHNTMEZCU3l4bFFVRmxMRkZCUVZFc2EwSkJRV3RDTEZWQlFWVXNjVUpCUVhGQ0xGZEJRVmNzYTBKQlFXdENMRmxCUVZrc01rSkJRVEpDTEZOQlFWTXNiMEpCUVc5Q0xGZEJRVmNzYVVKQlFXbENMRmxCUVZrc01FSkJRVEJDTEZOQlFWTXNjVUpCUVhGQ0xGZEJRVmNzYTBKQlFXdENMRmxCUVZrc01rSkJRVEpDTEZOQlFWTXNkMEpCUVhkQ0xGbEJRVmtzY1VKQlFYRkNMRmxCUVZrc09FSkJRVGhDTEZOQlFWTXNhVUpCUVdsQ0xGbEJRVmtzV1VGQldTeFRRVUZUTEV0QlFVc3NjMEpCUVhOQ0xGZEJRVmNzV1VGQldTeFRRVUZUTEhkQ1FVRjNRaXhaUVVGWkxGRkJRVkVzYjBKQlFXOUNMRXRCUVVzc2JVSkJRVzFDTEZOQlFWTXNlVUpCUVhsQ0xGbEJRVmtzVVVGQlVTeHZRa0ZCYjBJc1MwRkJTeXh0UWtGQmJVSXNVMEZCVXl4cFFrRkJhVUlzVTBGQlV5eFZRVUZWTEZGQlFWRXNhVUpCUVdsQ0xFOUJRVThzVFVGQlRTeGxRVUZsTEUxQlFVMHNTMEZCU3l4alFVRmpMRTFCUVUwc1MwRkJTeXhoUVVGaExFMUJRVTBzUzBGQlN5eGhRVUZoTEVsQlFVa3NVMEZCVXl3MlFrRkJOa0lzV1VGQldTeFRRVUZUTEV0QlFVc3NaVUZCWlN4blEwRkJaME1zWVVGQllTeHpRa0ZCYzBJc1ZVRkJWU3hwUWtGQmFVSXNVVUZCVVN4WlFVRlpMRTlCUVU4c1NVRkJTU3hUUVVGVExITkNRVUZ6UWl4NVFrRkJlVUlzV1VGQldTeFRRVUZUTEV0QlFVc3NiVUpCUVcxQ0xGTkJRVk1zYzBKQlFYTkNMRFJDUVVFMFFpeGpRVUZqTEd0Q1FVRnJRaXh6UTBGQmMwTXNNa0pCUVRKQ0xHdERRVUZyUXl4elFrRkJjMElzVTBGQlV5eHhRa0ZCY1VJc0swSkJRU3RDTEhWQ1FVRjFRaXh0UTBGQmJVTXNjMEpCUVhOQ0xHZERRVUZuUXl4MVFrRkJkVUlzYlVOQlFXMURMRmRCUVZjc1owSkJRV2RDTEdsQ1FVRnBRaXhaUVVGWkxHVkJRV1VzVDBGQlR5eG5Ra0ZCWjBJc1YwRkJWeXhwUWtGQmFVSXNXVUZCV1N4VlFVRlZMRXRCUVVzc1ZVRkJWU3hoUVVGaExGRkJRVkVzYVVKQlFXbENMRmxCUVZrc1QwRkJUeXhsUVVGbExGRkJRVkVzVTBGQlV5eExRVUZMTEZOQlFWTXNhMEpCUVd0Q0xFMUJRVTBzVlVGQlZTeHJRa0ZCYTBJc1dVRkJXU3huUWtGQlowSXNVMEZCVXl4MVFrRkJkVUlzV1VGQldTeG5Ra0ZCWjBJc1UwRkJVeXgxUWtGQmRVSXNXVUZCV1N4eFFrRkJjVUlzVTBGQlV5eHZRa0ZCYjBJc1dVRkJXU3hwUWtGQmFVSXNVMEZCVXl4eFFrRkJjVUlzV1VGQldTeDNRa0ZCZDBJc1UwRkJVeXgzUWtGQmQwSXNXVUZCV1N4M1FrRkJkMElzVTBGQlV5eHBRMEZCYVVNc2IwSkJRVzlDTEhGQ1FVRnhRaXh6UWtGQmMwSXNlVUpCUVhsQ0xEUkRRVUUwUXl4VFFVRlRMR0ZCUVdFc05FSkJRVFJDTEZOQlFWTXNUMEZCVHl4cFFrRkJhVUlzYVVKQlFXbENMRmRCUVZjc2QwSkJRWGRDTEdsQ1FVRnBRaXhuUWtGQlowSXNhVUpCUVdsQ0xGZEJRVmNzYjBKQlFXOUNMR2xDUVVGcFFpeFRRVUZUTEhWQ1FVRjFRaXhyUWtGQmEwSXNjVUpCUVhGQ0xHTkJRV01zSzBKQlFTdENMRGhDUVVFNFFpd3JRa0ZCSzBJc0swSkJRU3RDTEd0Q1FVRnJRaXhwUTBGQmFVTXNiVU5CUVcxRExEWkNRVUUyUWl4TlFVRk5MRTFCUVUwc1YwRkJWeXhUUVVGVExFMUJRVTBzYVVKQlFXbENMRWxCUVVrc1MwRkJTeXg1UTBGQmVVTXNjMEpCUVhOQ0xFbEJRVWtzUzBGQlN5d3dRa0ZCTUVJc1ZVRkJWU3h0UTBGQmJVTXNTVUZCU1N4MVFrRkJkVUlzVFVGQlRTeGpRVUZqTEU5QlFVOHNNa0pCUVRKQ0xFMUJRVTBzUzBGQlN5eHBSRUZCYVVRc1ZVRkJWU3hwUWtGQmFVSXNiMEpCUVc5Q0xHTkJRV01zWTBGQll5eDNRMEZCZDBNc01FSkJRVEJDTEZOQlFWTXNNa0pCUVRKQ0xEQkNRVUV3UWl4eFFrRkJjVUlzUzBGQlN5d3dRa0ZCTUVJc1UwRkJVeXhMUVVGTExGbEJRVmtzV1VGQldTeGxRVUZsTEZkQlFWY3NNRUpCUVRCQ0xGTkJRVk1zTUVKQlFUQkNMR2REUVVGblF5eHRRa0ZCYlVJc1pVRkJaU3hWUVVGVkxHOUVRVUZ2UkN4dFJFRkJiVVFzT0VKQlFUaENMREpDUVVFeVFpeHRRa0ZCYlVJc09FSkJRVGhDTEcxQ1FVRnRRaXd5UWtGQk1rSXNZMEZCWXl4bFFVRmxMRFpDUVVFMlFpeHJRa0ZCYTBJc1pVRkJaU3g1UTBGQmVVTXNkVU5CUVhWRExIVkRRVUYxUXl4eFEwRkJjVU1zY1VOQlFYRkRMSFZDUVVGMVFpeHBRMEZCYVVNc1UwRkJVeXhUUVVGVExFdEJRVXNzVTBGQlV5eEpRVUZKTEV0QlFVc3NVMEZCVXl4SlFVRkpMRXRCUVVzc1ZVRkJWU3hKUVVGSkxFdEJRVXNzVlVGQlZTeEpRVUZKTEV0QlFVc3NVVUZCVVN4UlFVRlJMR2xDUVVGcFFpeExRVUZMTEdWQlFXVXNhVUpCUVdsQ0xFdEJRVXNzY1VKQlFYRkNMSFZEUVVGMVF5eHhRa0ZCY1VJc1VVRkJVU3haUVVGWkxHZENRVUZuUWl4WlFVRlpMRmRCUVZjc2RVSkJRWFZDTEUxQlFVMHNLMEpCUVN0Q0xHZENRVUZuUWl4WlFVRlpMRk5CUVZNc2EwSkJRV3RDTEV0QlFVc3NLMEpCUVN0Q0xGRkJRVkVzTUVKQlFUQkNMRWxCUVVrc1owSkJRV2RDTEUxQlFVMHNTVUZCU1N4aFFVRmhMRmRCUVZjc1NVRkJTU3hOUVVGTkxHVkJRV1VzVVVGQlVTeExRVUZMTEZkQlFWY3NZVUZCWVN4aFFVRmhMRXRCUVVzc1VVRkJVU3hoUVVGaExFdEJRVXNzU1VGQlNTeEpRVUZKTEVsQlFVa3NhMEpCUVd0Q0xEaENRVUU0UWl4aFFVRmhMRWxCUVVrc1NVRkJTU3hKUVVGSkxGVkJRVlVzV1VGQldTeE5RVUZOTEcxQ1FVRnRRaXhyUWtGQmEwSXNORU5CUVRSRExHMURRVUZ0UXl4eFFrRkJjVUlzVVVGQlVTeEpRVUZKTEVsQlFVa3NaMFJCUVdkRUxGRkJRVkVzVTBGQlV5eFJRVUZSTEVsQlFVa3NVVUZCVVN4blFrRkJaMElzWjBKQlFXZENMRzlDUVVGdlFpdzRRa0ZCT0VJc1owSkJRV2RDTERoQ1FVRTRRaXhuUWtGQlowSXNjMEpCUVhOQ0xHRkJRV0VzWjBKQlFXZENMRXRCUVVzc1lVRkJZU3hwUWtGQmFVSXNVVUZCVVN4blFrRkJaMElzVTBGQlV5eHpRa0ZCYzBJc1UwRkJVeXhUUVVGVExHMURRVUZ0UXl4aFFVRmhMRk5CUVZNc1dVRkJXU3hMUVVGTExHMUNRVUZ0UWl4TFFVRkxMRXRCUVVzc2IwSkJRVzlDTEZOQlFWTXNlVUpCUVhsQ0xHbENRVUZwUWl4elEwRkJjME1zZFVKQlFYVkNMQ3RDUVVFclFpeDNRMEZCZDBNc2NVSkJRWEZDTEd0Q1FVRnJRaXhuUWtGQlowSXNUVUZCVFN3MlFrRkJOa0lzWjBKQlFXZENMR0ZCUVdFc1owSkJRV2RDTEV0QlFVc3NaMEpCUVdkQ0xHTkJRV01zWjBKQlFXZENMR3RDUVVGclFpeG5Ra0ZCWjBJc1RVRkJUU3cyUWtGQk5rSXNaMEpCUVdkQ0xHRkJRV0VzWjBKQlFXZENMRXRCUVVzc1owSkJRV2RDTEdOQlFXTXNaMEpCUVdkQ0xITkNRVUZ6UWl4aFFVRmhMRTFCUVUwc1lVRkJZU3hoUVVGaExFdEJRVXNzWVVGQllTeE5RVUZOTEdGQlFXRXNZMEZCWXl4dFEwRkJiVU1zZFVKQlFYVkNMSE5DUVVGelFpeHhRa0ZCY1VJc2FVSkJRV2xDTEdGQlFXRXNTMEZCU3l4VFFVRlRMR2xDUVVGcFFpeG5Ra0ZCWjBJc1MwRkJTeXhWUVVGVkxHMXdRa0ZCYlhCQ0xHZEVRVUZuUkN3NFFrRkJPRUlzYlVKQlFXMUNMR2RFUVVGblJDeFJRVUZSTEcxQ1FVRnRRaXhMUVVGTExIVkNRVUYxUWl4aFFVRmhMR0ZCUVdFc1pVRkJaU3hoUVVGaExFbEJRVWtzTUVKQlFUQkNMSGxDUVVGNVFpeHRRMEZCYlVNc2EwSkJRV3RDTEdOQlFXTXNWMEZCVnl4M1FrRkJkMElzWlVGQlpTeDNRa0ZCZDBJc01rSkJRVEpDTEc5RFFVRnZReXd3UWtGQk1FSXNVMEZCVXl4aFFVRmhMSE5DUVVGelFpeFhRVUZYTEhWQ1FVRjFRaXh0UWtGQmJVSXNXVUZCV1N4WlFVRlpMRWxCUVVrc1MwRkJTeXhwUlVGQmFVVXNkVUpCUVhWQ0xITkVRVUZ6UkN4UlFVRlJMR2REUVVGblF5eHpRa0ZCYzBJc2JVTkJRVzFETEdOQlFXTXNjMEpCUVhOQ0xHVkJRV1VzV1VGQldTdzBRMEZCTkVNc2QwTkJRWGRETERSRFFVRTBReXc0UTBGQk9FTXNORU5CUVRSRExEUkRRVUUwUXl4dlEwRkJiME1zTkVOQlFUUkRMRGhEUVVFNFF5eDNSRUZCZDBRc2QwUkJRWGRFTEhORFFVRnpReXhuUkVGQlowUXNiVU5CUVcxRExIbERRVUY1UXl3eVEwRkJNa01zTmtOQlFUWkRMSEZEUVVGeFF5d3JRMEZCSzBNc2NVTkJRWEZETEN0Q1FVRXJRaXdyUWtGQkswSXNLMEpCUVN0Q0xEWkNRVUUyUWl3clFrRkJLMElzY1VOQlFYRkRMQ3RDUVVFclFpd3lRMEZCTWtNc05rTkJRVFpETEhWRVFVRjFSQ3g1UTBGQmVVTXNkVU5CUVhWRExIRkRRVUZ4UXl4NVEwRkJlVU1zZFVOQlFYVkRMQ3RDUVVFclFpeDVRMEZCZVVNc2VVTkJRWGxETEhGRFFVRnhReXd5UTBGQk1rTXNOa1JCUVRaRUxIRkRRVUZ4UXl3MlEwRkJOa01zSzBKQlFTdENMQ3RDUVVFclFpeDFSRUZCZFVRN1FVRkRjbWRhTzBGQlEwRTdRVUZEUVN4dlFrRkJiVUlzVTBGQlV5eFRRVUZUTEcxQ1FVRnRRaXh4UWtGQmNVSXNWVUZCVlN4UlFVRlJMRTFCUVUwc1MwRkJTeXhaUVVGWkxFbEJRVWtzVVVGQlVTeE5RVUZOTEV0QlFVc3NhME5CUVd0RExGbEJRVmtzYjBKQlFXOUNMRmxCUVZrc1UwRkJVeXhUUVVGVExHOUNRVUZ2UWl4TlFVRk5MSE5DUVVGelFpeHRRMEZCYlVNc2FVSkJRV2xDTERoQ1FVRTRRaXhwUWtGQmFVSXNjME5CUVhORExHZERRVUZuUXl4blEwRkJaME1zZVVKQlFYbENMSEZDUVVGeFFqdEJRVU53YUVJN1FVRkRRVHRCUVVOQkxHVkJRV01zWVVGQllTeGhRVUZoTEhsQ1FVRjVRaXcwUWtGQk5FSXNhVU5CUVdsRExHdERRVUZyUXl4clEwRkJhME1zZDBKQlFYZENMSEZDUVVGeFFpeDVRa0ZCZVVJc2JVTkJRVzFETEcxQ1FVRnRRaXh4UWtGQmNVSXNWMEZCVnl4TlFVRk5MR2xFUVVGcFJDd3dRa0ZCTUVJc2EwTkJRV3RETEZGQlFWRXNTMEZCU3l4TFFVRkxMRFJDUVVFMFFpd3lSVUZCTWtVc0swSkJRU3RDTEZGQlFWRXNWMEZCVnl4TFFVRkxMREJEUVVFd1F5d3dRa0ZCTUVJc2EwTkJRV3RETERKQ1FVRXlRaXd5UWtGQk1rSXNWMEZCVnl4blFrRkJaMElzZDBKQlFYZENMRzlDUVVGdlFpeG5Ra0ZCWjBJc01FSkJRVEJDTEhsQ1FVRjVRaXhsUVVGbExIbENRVUY1UWl4WlFVRlpMSEZDUVVGeFFpeFhRVUZYTEhkQ1FVRjNRaXd3UWtGQk1FSXNUVUZCVFN4UlFVRlJMRmRCUVZjc1MwRkJTeXh4UWtGQmNVSXNlVUpCUVhsQ08wRkJRM3B1UXp0QlFVTkJPMEZCUTBFc01rSkJRVEJDTERKQ1FVRXlRaXh6UWtGQmMwSXNVMEZCVXl4UlFVRlJMRzlDUVVGdlFpd3lRa0ZCTWtJc1MwRkJTeXhwUTBGQmFVTXNjVUpCUVhGQ0xGTkJRVk1zZVVKQlFYbENMRXRCUVVzc2RVSkJRWFZDTEhkQ1FVRjNRaXhyUWtGQmEwSXNhME5CUVd0RExGbEJRVmtzYTBKQlFXdENMR2xDUVVGcFFpeHBRa0ZCYVVJc2QwSkJRWGRDTEZWQlFWVXNVMEZCVXl4TFFVRkxMSE5DUVVGelFpeHJRa0ZCYTBJc2EwSkJRV3RDTEV0QlFVc3NhMEpCUVd0Q0xIVkNRVUYxUWl4eFFrRkJjVUlzVTBGQlV5eDVRa0ZCZVVJc2EwSkJRV3RDTEZkQlFWY3NUMEZCVHl4bFFVRmxMR1ZCUVdVc1dVRkJXU3hUUVVGVExGTkJRVk1zZVVKQlFYbENMRGhDUVVFNFFpeGhRVUZoTEd0Q1FVRnJRaXd5UjBGQk1rY3NTMEZCU3l4VFFVRlRMR2xDUVVGcFFpeDVRa0ZCZVVJc05rSkJRVFpDTEdkRFFVRm5ReXhYUVVGWExGRkJRVkVzTWtKQlFUSkNMRTFCUVUwc1ZVRkJWU3dyUWtGQkswSXNNa0pCUVRKQ0xHZERRVUZuUXl3MlEwRkJOa01zVTBGQlV5eFJRVUZSTEZkQlFWY3NUVUZCVFN4eFEwRkJjVU1zTUVOQlFUQkRMRlZCUVZVc1VVRkJVU3hYUVVGWExFMUJRVTBzTkVKQlFUUkNMRzFEUVVGdFF5eHJRa0ZCYTBJc1dVRkJXU3hUUVVGVExGbEJRVmtzV1VGQldTeFpRVUZaTEdWQlFXVXNaVUZCWlN4blFrRkJaMElzTWtKQlFUSkNMRzFDUVVGdFFpeDNRa0ZCZDBJc1UwRkJVeXhUUVVGVExFdEJRVXNzTmtOQlFUWkRMSGxDUVVGNVFpeHpRa0ZCYzBJc1MwRkJTeXhyUTBGQmEwTXNkMEpCUVhkQ0xHdERRVUZyUXl4MVFrRkJkVUlzTmtOQlFUWkRMRmxCUVZrc1dVRkJXU3gxUWtGQmRVSXNXVUZCV1N4WlFVRlpMSEZDUVVGeFFpeHZRa0ZCYjBJc1UwRkJVeXhMUVVGTExHRkJRV0VzTmtKQlFUWkNMRGhEUVVFNFF5eFpRVUZaTEZsQlFWa3NkVUpCUVhWQ0xGbEJRVmtzV1VGQldTeHhRa0ZCY1VJc2IwSkJRVzlDTEZOQlFWTXNTMEZCU3l4aFFVRmhMSE5EUVVGelF5eDNRMEZCZDBNc2IwTkJRVzlETERSRFFVRTBRenRCUVVOdU1rVTdRVUZEUVR0QlFVTkJMREpDUVVFd1FpeHpRa0ZCYzBJc1VVRkJVU3d5UWtGQk1rSXNTVUZCU1N3MlFrRkJOa0lzV1VGQldTeEpRVUZKTEdWQlFXVXNhMEpCUVd0Q0xHRkJRV0VzVTBGQlV5eHZRa0ZCYjBJc1pVRkJaU3hWUVVGVkxEQkNRVUV3UWl4TFFVRkxMSEZDUVVGeFFpeG5SRUZCWjBRc1NVRkJTU3hMUVVGTExHdEZRVUZyUlN4UFFVRlBMRk5CUVZNc09FSkJRVGhDTEdGQlFXRXNhMEpCUVd0Q0xHMUhRVUZ0Unl4TFFVRkxMRk5CUVZNc2FVSkJRV2xDTERKQ1FVRXlRaXhyUWtGQmEwSXNUVUZCVFN4UlFVRlJMRmRCUVZjc1RVRkJUU3hWUVVGVkxHdENRVUZyUWl4aFFVRmhMSE5EUVVGelF5d3lRa0ZCTWtJc2QwSkJRWGRDTERSQ1FVRTBRaXcwUWtGQk5FSXNPRU5CUVRoRExGZEJRVmNzVVVGQlVTeFhRVUZYTEUxQlFVMHNjVU5CUVhGRExITkdRVUZ6Uml4VFFVRlRMRkZCUVZFc1YwRkJWeXhOUVVGTkxIRkRRVUZ4UXl4elEwRkJjME1zTUVOQlFUQkRMSEZDUVVGeFFpeHpRa0ZCYzBJc2QwSkJRWGRDTEcxRVFVRnRSQ3hYUVVGWExITkNRVUZ6UWl4eFFrRkJjVUlzT0VKQlFUaENMRzlDUVVGdlFpeDNRa0ZCZDBJc1UwRkJVeXhUUVVGVExGTkJRVk1zUzBGQlN5dzJRMEZCTmtNc2VVSkJRWGxDTEhOQ1FVRnpRaXg1UWtGQmVVSXNTMEZCU3l4dFEwRkJiVU1zTUVOQlFUQkRMRzlDUVVGdlFpeFpRVUZaTEdsRFFVRnBReXhaUVVGWkxHbERRVUZwUXl4blFrRkJaMElzY1VOQlFYRkRMR2RDUVVGblFpeHhRMEZCY1VNc05rTkJRVFpETEhsQ1FVRjVRaXh6UWtGQmMwSXNlVUpCUVhsQ0xIbENRVUY1UWl4NVFrRkJlVUlzTkVKQlFUUkNMRFJDUVVFMFFpdzJRa0ZCTmtJc1MwRkJTeXh4UkVGQmNVUXNNRUpCUVRCQ0xIbENRVUY1UWl4WFFVRlhMSE5DUVVGelFpd3lRa0ZCTWtJc1RVRkJUU3hGUVVGRkxFMUJRVTBzUlVGQlJTd3JRa0ZCSzBJc2IwZEJRVzlITEU5QlFVOHNUVUZCVFN4RlFVRkZMRFpDUVVFMlFpeHZSMEZCYjBjc1QwRkJUeXhuUTBGQlowTXNZVUZCWVN4alFVRmpMRk5CUVZNc2MwTkJRWE5ETEhORFFVRnpReXh2UWtGQmIwSXNNRU5CUVRCRExDdENRVUVyUWl4MVFrRkJkVUlzZDBKQlFYZENMSGRDUVVGM1FpeHhRMEZCY1VNc1VVRkJVU3g1UWtGQmVVSXNLMEpCUVN0Q0xDdENRVUVyUWl3MlEwRkJOa01zTmtOQlFUWkRMSGRDUVVGM1FpeG5Ra0ZCWjBJc09FVkJRVGhGTEhWQ1FVRjFRaXgzUWtGQmQwSXNkMEpCUVhkQ0xGbEJRVmtzV1VGQldTeG5SRUZCWjBRc05rSkJRVFpDTEhkQ1FVRjNRaXgzUWtGQmQwSXNXVUZCV1N4WlFVRlpMR2xFUVVGcFJDeDNRMEZCZDBNc01FTkJRVEJETERoRFFVRTRReXh6UTBGQmMwTXNiME5CUVc5RE8wRkJRek56U0R0QlFVTkJPMEZCUTBFc1owTkJRU3RDTEZOQlFWTXNVMEZCVXl4MVFrRkJkVUlzV1VGQldTeFpRVUZaTEN0RFFVRXJReXcwUWtGQk5FSXNZMEZCWXl4elFrRkJjMElzWjBWQlFXZEZMRzlDUVVGdlFpdzJSVUZCTmtVc2VVSkJRWGxDTEd0R1FVRnJSaXg1UWtGQmVVSXNhMFpCUVd0R0xITkNRVUZ6UWl4blJVRkJaMFVzZFVKQlFYVkNMSEZIUVVGeFJ5dzJRMEZCTmtNc2VVUkJRWGxFTERaRFFVRTJReXgxUTBGQmRVTXNhVVJCUVdsRUxHbEVRVUZwUkN3MlEwRkJOa01zTmtOQlFUWkRMRFJDUVVFMFFpeGhRVUZoTEZOQlFWTXNVMEZCVXl4WlFVRlpMSE5DUVVGelFpeExRVUZMTEZOQlFWTXNaVUZCWlN4MVFrRkJkVUlzYjBKQlFXOUNMREJEUVVFd1F5dzRSa0ZCT0VZc2RVSkJRWFZDTEc5Q1FVRnZRaXd3UTBGQk1FTXNPRVpCUVRoR0xEQkNRVUV3UWl4WlFVRlpMRmxCUVZrc2MwSkJRWE5DTEhOQ1FVRnpRaXh0UWtGQmJVSXNlVUpCUVhsQ0xGRkJRVkVzYzBkQlFYTkhMQ3RDUVVFclFpeGhRVUZoTEhOSFFVRnpSeXhwUTBGQmFVTXNOa0pCUVRaQ0xHMURRVUZ0UXl4WlFVRlpMSE5HUVVGelJpeDVRa0ZCZVVJc0swUkJRU3RFTEhWQ1FVRjFRaXh6UWtGQmMwSXNVMEZCVXl4dFFrRkJiVUlzV1VGQldTd3dSMEZCTUVjc01FZEJRVEJITERoQ1FVRTRRaXc0UWtGQk9FSXNiMEpCUVc5Q0xHZERRVUZuUXl3d1FrRkJNRUlzTkVKQlFUUkNMRFJDUVVFMFFpeDVRa0ZCZVVJc2VVSkJRWGxDTEdsQ1FVRnBRaXh2UWtGQmIwSXNiMEpCUVc5Q0xHdERRVUZyUXl4NVJrRkJlVVlzYlVsQlFXMUpMSGxFUVVGNVJDdzJSa0ZCTmtZc2QwSkJRWGRDTEhOQ1FVRnpRaXhaUVVGWkxITkRRVUZ6UXl4blEwRkJaME1zTUVKQlFUQkNMRFJDUVVFMFFpdzBRa0ZCTkVJc2VVSkJRWGxDTEhORFFVRnpReXhyUTBGQmEwTXNOa0pCUVRaQ0xDdENRVUVyUWl4eFEwRkJjVU1zYzBKQlFYTkNMR2xIUVVGcFJ5eHhTVUZCY1Vrc05FUkJRVFJFTERaR1FVRTJSaXcwUWtGQk5FSXNjMEpCUVhOQ0xGbEJRVmtzYTBKQlFXdENMR2REUVVGblF5eFJRVUZSTEhORFFVRnpReXh2UWtGQmIwSXNWMEZCVnl4TlFVRk5MSE5DUVVGelFpeEpRVUZKTEV0QlFVc3NXVUZCV1N4dFFrRkJiVUlzYlVKQlFXMUNMRk5CUVZNc2JVSkJRVzFDTEZOQlFWTXNiVU5CUVcxRExFMUJRVTBzWjBOQlFXZERMR3RDUVVGclFpeExRVUZMTEd0Q1FVRnJRaXdyUWtGQkswSXNhMEpCUVd0Q0xGbEJRVmtzV1VGQldTeHBRa0ZCYVVJc2FVSkJRV2xDTEZkQlFWY3NTMEZCU3l4bFFVRmxMRXRCUVVzc2FVSkJRV2xDTEZsQlFWa3NTVUZCU1N4VFFVRlRMSEZEUVVGeFF5eHhRMEZCY1VNc2VVTkJRWGxETEdsRVFVRnBSQ3g1UTBGQmVVTXNiVU5CUVcxRExIVkRRVUYxUXl3MlEwRkJOa01zYlVSQlFXMUVMREJDUVVFd1FpeFRRVUZUTERoQ1FVRTRRaXc0UWtGQk9FSXNORU5CUVRSRExIVkNRVUYxUWl4alFVRmpMSFZDUVVGMVFpeGpRVUZqTEhWQ1FVRjFRaXhqUVVGakxEQkNRVUV3UWl4WlFVRlpMRmxCUVZrc2JVVkJRVzFGTERoQ1FVRTRRaXh4UWtGQmNVSXNhME5CUVd0RExITkRRVUZ6UXl4clEwRkJhME1zYlVOQlFXMURMRFJDUVVFMFFpd3dRa0ZCTUVJc01FTkJRVEJETEc5Q1FVRnZRaXh6UWtGQmMwSXNLMGRCUVN0SExIRkNRVUZ4UWl4eFEwRkJjVU1zY1VOQlFYRkRMSEZEUVVGeFF5eDVRMEZCZVVNc2JVUkJRVzFFTEhsRVFVRjVSRHRCUVVOc2EwMDdRVUZEUVR0QlFVTkJMSEZFUVVGdlJDd3dSRUZCTUVRc01rTkJRVEpETEc5Q1FVRnZRaXc0UWtGQk9FSXNaVUZCWlN4elFrRkJjMElzUzBGQlN5eHJRa0ZCYTBJc1kwRkJZeXhWUVVGVkxHbERRVUZwUXl4cFEwRkJhVU1zWTBGQll5eE5RVUZOTEdWQlFXVXNZVUZCWVN4TFFVRkxMR05CUVdNc1MwRkJTeXhoUVVGaExHOUNRVUZ2UWl4VlFVRlZMRzFEUVVGdFF5eFhRVUZYTEdsQ1FVRnBRaXgxUWtGQmRVSXNlVUpCUVhsQ0xHRkJRV0VzWVVGQllTeDNRa0ZCZDBJc2QwSkJRWGRDTEdsRlFVRnBSU3h6UTBGQmMwTXNiMEpCUVc5Q0xHbENRVUZwUWl4elFrRkJjMElzTUVKQlFUQkNMREpDUVVFeVFpd3lRa0ZCTWtJc2FVVkJRV2xGTEhORFFVRnpReXh6UWtGQmMwSXNVMEZCVXl4dFFrRkJiVUlzV1VGQldTeDFRa0ZCZFVJc2RVSkJRWFZDTEc5Q1FVRnZRaXhuUTBGQlowTXNNa0pCUVRKQ0xESkNRVUV5UWl4clFrRkJhMElzWjBSQlFXZEVMSE5FUVVGelJDeHpRMEZCYzBNc2RVTkJRWFZETEhOQ1FVRnpRaXhaUVVGWkxITkRRVUZ6UXl4blEwRkJaME1zZFVSQlFYVkVMSFZFUVVGMVJDd3JSVUZCSzBVc09FTkJRVGhETEhORVFVRnpSQ3h6UTBGQmMwTXNNa05CUVRKRExITkNRVUZ6UWl4WlFVRlpMR3RDUVVGclFpeG5RMEZCWjBNc1VVRkJVU3h6UTBGQmMwTXNiMEpCUVc5Q0xGZEJRVmNzVFVGQlRTeHpRa0ZCYzBJc1NVRkJTU3hMUVVGTExGbEJRVmtzYlVKQlFXMUNMRzFDUVVGdFFpeFRRVUZUTEhGQ1FVRnhRaXhWUVVGVkxIbERRVUY1UXl4cFEwRkJhVU1zYVVOQlFXbERMSFZEUVVGMVF5eDFRMEZCZFVNc2QwSkJRWGRDTERKQ1FVRXlRaXhwUlVGQmFVVXNiMEpCUVc5Q0xIZERRVUYzUXl3clJrRkJLMFlzZDBOQlFYZERMSGRDUVVGM1FpeHpRa0ZCYzBJc2VVTkJRWGxETEdsRFFVRnBReXhwUTBGQmFVTXNOa1ZCUVRaRkxEaERRVUU0UXl3MlJVRkJOa1VzT0VOQlFUaERMSE5DUVVGelFpdzRRMEZCT0VNc2EwTkJRV3RETEhkRVFVRjNSRHRCUVVONGNFYzdRVUZEUVR0QlFVTkJMREpDUVVFd1FpeDNSVUZCZDBVc2VVVkJRWGxGTEVWQlFVVXNTVUZCU1N4eFFrRkJjVUlzZVVOQlFYbERMRWRCUVVjc01rSkJRVEpDTEc5RFFVRnZReXhGUVVGRkxGTkJRVk1zVDBGQlR5dzRSRUZCT0VRc2EwSkJRV3RDTEd0RVFVRnJSQ3h4UWtGQmNVSXNWMEZCVnl4UFFVRlBMRVZCUVVVc2IwSkJRVzlDTERSQ1FVRTBRaXh4UWtGQmNVSXNhVUpCUVdsQ0xFMUJRVTBzVjBGQlZ5eFpRVUZaTEV0QlFVc3NUMEZCVHl4TFFVRkxMRXRCUVVzc1dVRkJXU3hMUVVGTExFdEJRVXNzUzBGQlN5eFJRVUZSTEUxQlFVMHNWVUZCVlN4NVFrRkJlVUlzU1VGQlNTeExRVUZMTEU5QlFVOHNUVUZCVFN4M1FrRkJkMElzWlVGQlpTeHZRa0ZCYjBJc1UwRkJVeXhOUVVGTkxHOURRVUZ2UXl4elFrRkJjMElzYVVKQlFXbENMRTlCUVU4c1QwRkJUeXgxUWtGQmRVSXNWMEZCVnl4TFFVRkxMRTlCUVU4c1QwRkJUeXhQUVVGUExGTkJRVk1zVFVGQlRTeGxRVUZsTERaQ1FVRTJRaXhUUVVGVExFMUJRVTBzYTBKQlFXdENMRTFCUVUwc1owSkJRV2RDTEhGQ1FVRnhRaXhUUVVGVExFMUJRVTBzWjBKQlFXZENMRzlDUVVGdlFpeFRRVUZUTEUxQlFVMHNaMEpCUVdkQ0xHOUNRVUZ2UWl4VFFVRlRMRTFCUVUwc1owSkJRV2RDTERKQ1FVRXlRaXhGUVVGRkxGTkJRVk1zVFVGQlRTeHRRa0ZCYlVJc1QwRkJUeXhOUVVGTkxHbENRVUZwUWl4clFrRkJhMElzVDBGQlR5eExRVUZMTEdGQlFXRXNiVUpCUVcxQ0xFMUJRVTBzYjBKQlFXOUNMRmRCUVZjc01rSkJRVEpDTEZkQlFWY3NaMEpCUVdkQ0xIVkNRVUYxUWl4aFFVRmhMR1ZCUVdVc1QwRkJUeXhMUVVGTExFOUJRVThzUzBGQlN5eFpRVUZaTEUxQlFVMHNiVUpCUVcxQ0xFOUJRVThzUlVGQlJTeHBRa0ZCYVVJc2MwSkJRWE5DTEV0QlFVc3NTMEZCU3l4TFFVRkxMRlZCUVZVN1FVRkRibTVFTzBGQlEwRTdRVUZEUVN4eFEwRkJiME1zVVVGQlVTdzRRMEZCT0VNc1lVRkJZU3hyUTBGQmEwTXNhME5CUVd0RExIRkNRVUZ4UWl4dlFrRkJiMElzVVVGQlVTeFZRVUZWTEN0RFFVRXJReXh4UWtGQmNVSXNkVUpCUVhWQ0xHdENRVUZyUWl4UlFVRlJMRXRCUVVzc2RVSkJRWFZDTEZkQlFWY3NTMEZCU3l4clFrRkJhMElzWlVGQlpTeFhRVUZYTEV0QlFVc3NTMEZCU3l4MVFrRkJkVUlzVFVGQlRTeFRRVUZUTEZsQlFWa3NTVUZCU1N4TFFVRkxMRTlCUVU4c01rSkJRVEpDTEcxRFFVRnRReXhyUTBGQmEwTXNWVUZCVlN4MVEwRkJkVU1zWjBKQlFXZENMR2REUVVGblF5eDFRMEZCZFVNc2IwSkJRVzlDTEVkQlFVY3NZMEZCWXl4M1FrRkJkMElzYlVWQlFXMUZMREpDUVVFeVFpeG5Ra0ZCWjBJc2NVSkJRWEZDTEdkQ1FVRm5RaXgxUTBGQmRVTXNWMEZCVnl4dlNVRkJiMGtzZVVKQlFYbENMR05CUVdNc09FSkJRVGhDTEdGQlFXRXNPRUpCUVRoQ0xHZENRVUZuUWl4blEwRkJaME1zWjBKQlFXZENMR3REUVVGclF5eGpRVUZqTERKQ1FVRXlRaXhoUVVGaExIVkRRVUYxUXl4alFVRmpMR2xEUVVGcFF5eHBRa0ZCYVVJc2FVTkJRV2xETEdkQ1FVRm5RaXh2UTBGQmIwTXNaMEpCUVdkQ0xITkRRVUZ6UXl4blFrRkJaMElzYjBOQlFXOURMR2RDUVVGblFpeG5RMEZCWjBNc2FVSkJRV2xDTERoQ1FVRTRRaXhwUWtGQmFVSXNjME5CUVhORExHRkJRV0VzVjBGQlZ5eFRRVUZUTEZsQlFWa3NWMEZCVnl4TFFVRkxMR2xEUVVGcFF5eFZRVUZWTERCQ1FVRXdRaXhSUVVGUkxFVkJRVVVzWVVGQllTeFhRVUZYTEZOQlFWTXNXVUZCV1N4WFFVRlhMRXRCUVVzc2FVTkJRV2xETEZWQlFWVXNjVUpCUVhGQ0xGRkJRVkVzUlVGQlJTeGhRVUZoTEZkQlFWY3NjMFZCUVhORkxHbERRVUZwUXl3NFFrRkJPRUlzTmtKQlFUWkNMRVZCUVVVc1MwRkJTeXhUUVVGVExESkNRVUV5UWl4elFrRkJjMElzYzBKQlFYTkNMRmxCUVZrc2MwSkJRWE5DTEhsRFFVRjVReXhyUTBGQmEwTXNiVU5CUVcxRExDdENRVUVyUWl4M1FrRkJkMElzTWtKQlFUSkNMREpEUVVFeVF5eFRRVUZUTEdsRFFVRnBReXgxUWtGQmRVSXNWMEZCVnl4alFVRmpMRk5CUVZNc1dVRkJXU3hYUVVGWExFMUJRVTBzYVVOQlFXbERMREpEUVVFeVF5eHJRa0ZCYTBJc2RVSkJRWFZDTERCQ1FVRXdRaXgxUWtGQmRVSXNUVUZCVFN4VlFVRlZMREpEUVVFeVF5eHJRa0ZCYTBJc2NVSkJRWEZDTEdkQ1FVRm5RaXhSUVVGUkxGVkJRVlVzYTBKQlFXdENMRk5CUVZNc01rSkJRVEpDTEc5Q1FVRnZRaXh0UWtGQmJVSXNVMEZCVXl4SlFVRkpMRk5CUVZNc1dVRkJXU3hKUVVGSkxFdEJRVXNzVDBGQlR5eE5RVUZOTEZsQlFWa3NZVUZCWVN4TlFVRk5MRzlDUVVGdlFpeHJRa0ZCYTBJc1VVRkJVU3h2UWtGQmIwSXNWVUZCVlN3d1FrRkJNRUlzWjBOQlFXZERMRk5CUVZNc2JVSkJRVzFDTEhWRFFVRjFReXhSUVVGUkxHTkJRV01zV1VGQldTeFhRVUZYTEV0QlFVc3NWMEZCVnl4VlFVRlZMR2REUVVGblF5eFhRVUZYTEZkQlFWY3NWMEZCVnl4WFFVRlhMRk5CUVZNc2MwTkJRWE5ETEN0RFFVRXJReXh4UTBGQmNVTXNkMEpCUVhkQ0xHZEZRVUZuUlN4MVFrRkJkVUlzY1VKQlFYRkNMR3RDUVVGclFpeFJRVUZSTEZWQlFWVXNVMEZCVXl4TFFVRkxMR2xDUVVGcFFpeFRRVUZUTEhGRlFVRnhSU3haUVVGWkxEQkNRVUV3UWl3NFFrRkJPRUlzY1VOQlFYRkRMR2REUVVGblF5eHhRMEZCY1VNc2EwTkJRV3RETEhOQ1FVRnpRaXhyUWtGQmEwSXNORUpCUVRSQ0xIRkNRVUZ4UWl4blFrRkJaMElzYVVOQlFXbERMRmRCUVZjc2QwTkJRWGRETERoRVFVRTRSQ3hYUVVGWExGZEJRVmNzTUVKQlFUQkNMR1ZCUVdVc01rSkJRVEpDTEdWQlFXVXNjVUpCUVhGQ0xGTkJRVk1zZDBKQlFYZENMRGhDUVVFNFFpeGxRVUZsTEhGQ1FVRnhRaXhaUVVGWkxGZEJRVmNzYVVOQlFXbERMR2RDUVVGblFpd3dRa0ZCTUVJc2RVSkJRWFZDTEd0Q1FVRnJRaXhMUVVGTExEaENRVUU0UWl4elFrRkJjMElzUzBGQlN5dzRRa0ZCT0VJc09FSkJRVGhDTEc5RlFVRnZSU3h6UTBGQmMwTXNORVJCUVRSRUxGZEJRVmNzVjBGQlZ5eG5RMEZCWjBNc09FTkJRVGhETEc5Q1FVRnZRaXhWUVVGVkxHZERRVUZuUXl4MVFrRkJkVUlzTmtKQlFUWkNMRGhDUVVFNFFpeGhRVUZoTEdkQ1FVRm5RaXhyUTBGQmEwTXNLMEpCUVN0Q0xHZERRVUZuUXl4clEwRkJhME1zYTBOQlFXdERMR3RDUVVGclFpeGhRVUZoTERCQ1FVRXdRaXhUUVVGVExIRkNRVUZ4UWl4M1FrRkJkMElzVjBGQlZ5eGpRVUZqTEN0Q1FVRXJRaXhuUWtGQlowSXNVMEZCVXl3MFEwRkJORU1zTUVKQlFUQkNMR1ZCUVdVc01rSkJRVEpDTEdWQlFXVXNjVUpCUVhGQ0xGTkJRVk1zYlVKQlFXMUNMREJEUVVFd1F5d3dRMEZCTUVNc2JVSkJRVzFDTEdsRFFVRnBReXhwUWtGQmFVSXNhMFZCUVd0RkxEUkRRVUUwUXl3NFJFRkJPRVFzVjBGQlZ5eHpRMEZCYzBNc1pVRkJaU3h4UWtGQmNVSXNhMEpCUVd0Q0xHdERRVUZyUXl4bFFVRmxMSEZDUVVGeFFpeDNRa0ZCZDBJc01rSkJRVEpDTERCQ1FVRXdRaXhuUTBGQlowTXNNRUpCUVRCQ0xIZEZRVUYzUlN4blEwRkJaME1zZFVSQlFYVkVMR0ZCUVdFc2IwSkJRVzlDTERaRVFVRTJSQ3hwUTBGQmFVTXNkVVJCUVhWRUxHRkJRV0VzYVVOQlFXbERMR1ZCUVdVc2NVSkJRWEZDTERaRVFVRTJSQ3c0UWtGQk9FSXNiVU5CUVcxRExIbENRVUY1UWl3MlFrRkJOa0lzVjBGQlZ5eHBRMEZCYVVNc1owSkJRV2RDTERCQ1FVRXdRaXhwUTBGQmFVTXNLMEpCUVN0Q0xFdEJRVXNzYVVOQlFXbERMRFJDUVVFMFFpeExRVUZMTEhWQ1FVRjFRaXh4UWtGQmNVSXNTMEZCU3l3NFFrRkJPRUlzT0VKQlFUaENMRFpFUVVFMlJDeHRRMEZCYlVNc2VVUkJRWGxFTEdGQlFXRXNaMFJCUVdkRUxHVkJRV1VzY1VKQlFYRkNMRmRCUVZjc05FTkJRVFJETEdGQlFXRXNaMFJCUVdkRUxGbEJRVmtzWlVGQlpTeHhRa0ZCY1VJc1lVRkJZU3h0UTBGQmJVTXNjMEpCUVhOQ0xHMUNRVUZ0UWl4VFFVRlRMRWxCUVVrc1dVRkJXU3hMUVVGTExFdEJRVXNzVDBGQlR5eFRRVUZUTEZsQlFWa3NZVUZCWVN4TlFVRk5MRzlDUVVGdlFpeHBRMEZCYVVNc1owSkJRV2RDTEZGQlFWRXNTMEZCU3l4bFFVRmxMSEZDUVVGeFFpeHBRa0ZCYVVJc2JVTkJRVzFETEZOQlFWTXNXVUZCV1N4WFFVRlhMRXRCUVVzc1pVRkJaU3hQUVVGUExFdEJRVXNzVVVGQlVTd3lRa0ZCTWtJc0swSkJRU3RDTEcxQ1FVRnRRaXhaUVVGWkxFbEJRVWtzUzBGQlN5eFhRVUZYTEZWQlFWVXNhVU5CUVdsRExHZENRVUZuUWl3d1FrRkJNRUlzTmtSQlFUWkVMSFZEUVVGMVF5eExRVUZMTERoQ1FVRTRRaXd5UTBGQk1rTXNTMEZCU3l3NFFrRkJPRUlzT0VKQlFUaENMRXRCUVVzc1owTkJRV2RETEhORFFVRnpReXdyUkVGQkswUXNjVU5CUVhGRExEWkVRVUUyUkN4alFVRmpMSGRGUVVGM1JTdzJRa0ZCTmtJc2IwUkJRVzlFTEdGQlFXRXNhMEpCUVd0Q0xEQkVRVUV3UkN3d1EwRkJNRU1zYTBKQlFXdENMSEZDUVVGeFFpeG5Ra0ZCWjBJc1VVRkJVU3hWUVVGVkxHdENRVUZyUWl4VFFVRlRMREpDUVVFeVFpeHZRa0ZCYjBJc2JVSkJRVzFDTEZOQlFWTXNTVUZCU1N4VFFVRlRMRmxCUVZrc1NVRkJTU3hMUVVGTExFOUJRVThzVFVGQlRTeFpRVUZaTEdGQlFXRXNUVUZCVFN4dlFrRkJiMElzYTBKQlFXdENMRkZCUVZFc2IwSkJRVzlDTEZWQlFWVXNaMFZCUVdkRkxHRkJRV0VzTmtKQlFUWkNMR1ZCUVdVc2NVSkJRWEZDTEZsQlFWa3NWMEZCVnl4dFEwRkJiVU1zTUVKQlFUQkNMR2REUVVGblF5eFRRVUZUTEcxQ1FVRnRRaXgxUTBGQmRVTXNVVUZCVVN4alFVRmpMRmxCUVZrc1YwRkJWeXhMUVVGTExGZEJRVmNzWlVGQlpTeHhRa0ZCY1VJc1dVRkJXU3hYUVVGWExEaENRVUU0UWl3eVJFRkJNa1FzZVVOQlFYbERMREJDUVVFd1FpeExRVUZMTEcxRVFVRnRSQ3hwUTBGQmFVTXNaMEpCUVdkQ0xEQkNRVUV3UWl4dFJFRkJiVVFzTUVKQlFUQkNMRXRCUVVzc2JVUkJRVzFFTERKRVFVRXlSQ3hMUVVGTExEaENRVUU0UWl3NFFrRkJPRUlzUzBGQlN5dzRRa0ZCT0VJc2QwSkJRWGRDTEV0QlFVc3NLMEpCUVN0Q0xHbERRVUZwUXl4elJVRkJjMFVzYjBOQlFXOURMREJFUVVFd1JDeGhRVUZoTEdsRFFVRnBReXhsUVVGbExIRkNRVUZ4UWl3MlJFRkJOa1FzT0VKQlFUaENMRzFEUVVGdFF5eDVRa0ZCZVVJc05rSkJRVFpDTEZkQlFWY3NhVU5CUVdsRExHZENRVUZuUWl3d1FrRkJNRUlzYVVOQlFXbERMRFJDUVVFMFFpeExRVUZMTEhWQ1FVRjFRaXh4UWtGQmNVSXNTMEZCU3l3NFFrRkJPRUlzTmtKQlFUWkNMR2RGUVVGblJTeHZRMEZCYjBNc05FUkJRVFJFTEdOQlFXTXNkVVZCUVhWRkxIVkRRVUYxUXl3clJFRkJLMFFzWTBGQll5d3dSVUZCTUVVc2VVTkJRWGxETEdsRlFVRnBSU3hqUVVGakxEUkZRVUUwUlN4MVEwRkJkVU1zSzBSQlFTdEVMR05CUVdNc01FVkJRVEJGTEcxRFFVRnRReXd5UkVGQk1rUXNZMEZCWXl4elJVRkJjMFVzYVVOQlFXbERMSGxFUVVGNVJDeGhRVUZoTERKQ1FVRXlRaXhsUVVGbExIRkNRVUZ4UWl4WlFVRlpMSGREUVVGM1F5eDNRa0ZCZDBJc2FVTkJRV2xETERoRVFVRTRSQ3h4UWtGQmNVSXNkME5CUVhkRExIVkNRVUYxUWl4blFrRkJaMElzYTBKQlFXdENMSE5DUVVGelFpeHpRa0ZCYzBJc1MwRkJTeXgxUTBGQmRVTXNSMEZCUnl4TlFVRk5MR3RDUVVGclFpeExRVUZMTEhOQ1FVRnpRaXg1UWtGQmVVSXNTMEZCU3l4MVFrRkJkVUlzTmtKQlFUWkNMR3RGUVVGclJTeDVRMEZCZVVNc2FVVkJRV2xGTEdGQlFXRXNjMEpCUVhOQ0xESkNRVUV5UWl4bFFVRmxMSEZDUVVGeFFpeFpRVUZaTEhkRVFVRjNSQ3gzUWtGQmQwSXNhVU5CUVdsRExEaERRVUU0UXl4eFFrRkJjVUlzZDBSQlFYZEVMSFZDUVVGMVFpeG5Ra0ZCWjBJc2EwSkJRV3RDTEhOQ1FVRnpRaXh6UWtGQmMwSXNTMEZCU3l4MVEwRkJkVU1zUjBGQlJ5eE5RVUZOTEd0Q1FVRnJRaXhMUVVGTExITkNRVUZ6UWl4NVFrRkJlVUlzUzBGQlN5eDFRa0ZCZFVJc01FSkJRVEJDTEc5Q1FVRnZRaXgzUWtGQmQwSXNNRVZCUVRCRkxHdERRVUZyUXl3d1JFRkJNRVFzWVVGQllTeHBRMEZCYVVNc1UwRkJVeXhaUVVGWkxIZENRVUYzUWl4TFFVRkxMSGRDUVVGM1FpeHhRa0ZCY1VJc1ZVRkJWU3hwUWtGQmFVSXNlVVZCUVhsRkxEWkNRVUUyUWl4eFJFRkJjVVFzWVVGQllTeHRRa0ZCYlVJc2FVTkJRV2xETEd0Q1FVRnJRaXhaUVVGWkxIZENRVUYzUWl4TFFVRkxMSGRDUVVGM1Fpd3dRa0ZCTUVJc2QwSkJRWGRDTEZOQlFWTXNiVUpCUVcxQ0xHZENRVUZuUWl3d1FrRkJNRUlzYzBSQlFYTkVMSFZDUVVGMVFpeHZSVUZCYjBVc2MwTkJRWE5ETERSRVFVRTBSQ3hoUVVGaExGZEJRVmNzY1VKQlFYRkNMSEZDUVVGeFFpeHRRMEZCYlVNc1ZVRkJWU3hyUWtGQmEwSXNhMEpCUVd0Q0xHOUNRVUZ2UWl4M1EwRkJkME1zWlVGQlpTeHhRa0ZCY1VJc1MwRkJTeXhoUVVGaExEUkNRVUUwUWl4eFEwRkJjVU1zZDBKQlFYZENMR2xEUVVGcFF5eG5Ra0ZCWjBJc01FSkJRVEJDTERoQ1FVRTRRaXhqUVVGakxHMURRVUZ0UXl3eVFrRkJNa0lzT0VKQlFUaENMSE5DUVVGelFpd3JSRUZCSzBRN1FVRkROM1ZsTzBGQlEwRTdRVUZEUVN3MFFrRkJNa0lzTUVOQlFUQkRMRGhDUVVFNFFpeFRRVUZUTEhGRFFVRnhReXhUUVVGVExGVkJRVlVzWTBGQll5eFhRVUZYTEZkQlFWY3NiVU5CUVcxRExIVkRRVUYxUXl4UlFVRlJMRk5CUVZNc2FVTkJRV2xETEcxRFFVRnRReXhuUTBGQlowTXNWVUZCVlN4VlFVRlZMRTFCUVUwc2FVTkJRV2xETEhWQ1FVRjFRaXhMUVVGTExHOURRVUZ2UXl4eFFrRkJjVUlzZDBOQlFYZERMSFZEUVVGMVF5eFJRVUZSTEZOQlFWTXNhMEpCUVd0Q0xHMURRVUZ0UXl4eFEwRkJjVU1zWjBOQlFXZERMRFpDUVVFMlFpeHhRMEZCY1VNc2IwSkJRVzlDTEdkRFFVRm5ReXhuUTBGQlowTXNZMEZCWXl3MlEwRkJOa01zY1VOQlFYRkRMR2REUVVGblF5eGpRVUZqTEN0RFFVRXJReXhyUWtGQmEwSXNjVU5CUVhGRExGVkJRVlVzWjBOQlFXZERMRkZCUVZFc1VVRkJVU3hUUVVGVExEQkRRVUV3UXl3d1FrRkJNRUlzVFVGQlRTeFhRVUZYTEUxQlFVMHNWVUZCVlN4SlFVRkpMRWxCUVVrc1ZVRkJWU3cwUTBGQk5FTXNORU5CUVRSRExHRkJRV0VzWjBSQlFXZEVMR2RDUVVGblFpeFRRVUZUTEdkQ1FVRm5RaXcwUTBGQk5FTXNhMFJCUVd0RUxHbEVRVUZwUkN3MlEwRkJOa01zYjBOQlFXOURMQ3REUVVFclF5dzJRMEZCTmtNc2JVTkJRVzFETEhGRFFVRnhReXcyUTBGQk5rTXNhMEpCUVd0Q0xHbERRVUZwUXl4clFrRkJhMElzY1VKQlFYRkNMREJFUVVFd1JDeHJRMEZCYTBNc1owTkJRV2RETEc5Q1FVRnZRaXhuUWtGQlowSXNVMEZCVXl3MFEwRkJORU1zVTBGQlV5eHZRa0ZCYjBJc2NVSkJRWEZDTEd0RFFVRnJReXh6UWtGQmMwSXNhMEpCUVd0Q0xGTkJRVk1zV1VGQldTeGhRVUZoTEV0QlFVc3NjVU5CUVhGRExGTkJRVk1zVTBGQlV5eFpRVUZaTEZkQlFWY3NTMEZCU3l4aFFVRmhMR2REUVVGblF5eExRVUZMTEdkRFFVRm5ReXhyUTBGQmEwTXNUVUZCVFN4clFrRkJhMElzWlVGQlpTeHZRa0ZCYjBJc1ZVRkJWU3dyUWtGQkswSXNiMEpCUVc5Q0xHdENRVUZyUWl4VFFVRlRMRXRCUVVzc05rVkJRVFpGTEZkQlFWY3NhMEpCUVd0Q0xFZEJRVWNzY1VKQlFYRkNMR3RDUVVGclFpeEpRVUZKTEd0Q1FVRnJRaXhMUVVGTExIbENRVUY1UWl4M1FrRkJkMElzYlVOQlFXMURMRmxCUVZrc01rSkJRVEpDTEV0QlFVc3NNa0pCUVRKQ0xIZENRVUYzUWl4dFEwRkJiVU1zWjBOQlFXZERMSGRDUVVGM1FpeHRRMEZCYlVNc2EwTkJRV3RETEhkQ1FVRjNRaXh0UTBGQmJVTXNlVUpCUVhsQ0xITkRRVUZ6UXl3clFrRkJLMElzVTBGQlV5eExRVUZMTEhGRFFVRnhReXgzUWtGQmQwSXNhMEpCUVd0Q0xIZENRVUYzUWl4dFEwRkJiVU1zZDBOQlFYZERMSEZEUVVGeFF5d3lRa0ZCTWtJc1ZVRkJWU3cwUTBGQk5FTXNTMEZCU3l4MVEwRkJkVU1zZDBKQlFYZENMSE5GUVVGelJTeDNRa0ZCZDBJc01rVkJRVEpGTEhkQ1FVRjNRaXg1UlVGQmVVVXNkMEpCUVhkQ0xIRkZRVUZ4UlN4M1FrRkJkMElzYVVWQlFXbEZMSGRDUVVGM1FpeDVSVUZCZVVVc2QwSkJRWGRDTERCQ1FVRXdRaXh4UWtGQmNVSXNTVUZCU1N4eFFrRkJjVUlzSzBOQlFTdERMRkZCUVZFc2QwWkJRWGRHTEhORFFVRnpReXgzUTBGQmQwTXNjVU5CUVhGRExHOURRVUZ2UXl4blFrRkJaMElzU1VGQlNTeFpRVUZaTEZkQlFWY3NTMEZCU3l4clEwRkJhME1zVTBGQlV5eDNRa0ZCZDBJc1owSkJRV2RDTEN0RFFVRXJReXhaUVVGWkxGZEJRVmNzUzBGQlN5eHJRMEZCYTBNc1UwRkJVeXhwUTBGQmFVTXNaVUZCWlN4WFFVRlhMR05CUVdNc2IwSkJRVzlDTEN0RFFVRXJReXhaUVVGWkxGZEJRVmNzUzBGQlN5eHJRMEZCYTBNc1UwRkJVeXhMUVVGTExHMURRVUZ0UXl3NFFrRkJPRUlzWlVGQlpTd3lRMEZCTWtNc1pVRkJaU3d3UWtGQk1FSXNWVUZCVlN3d1JVRkJNRVVzT0VKQlFUaENMR3RDUVVGclFpeGhRVUZoTEcxRFFVRnRReXh2UWtGQmIwSXNiVU5CUVcxRExHbERRVUZwUXl4WFFVRlhMRmxCUVZrN1FVRkRlbWxNTzBGQlEwRTdRVUZEUVN4eFEwRkJiME1zVVVGQlVTdzRRMEZCT0VNc1lVRkJZU3gzUkVGQmQwUXNhMEpCUVd0Q0xIVkRRVUYxUXl3MlJFRkJOa1FzVjBGQlZ5eFhRVUZYTEZkQlFWY3NWMEZCVnl4WFFVRlhMRmRCUVZjc05FTkJRVFJETEhkRFFVRjNReXh0UWtGQmJVSXNjVU5CUVhGRExHVkJRV1VzY1VKQlFYRkNMSGRFUVVGM1JDd3JRa0ZCSzBJc2EwSkJRV3RDTEVWQlFVVXNjMEpCUVhOQ0xHZEVRVUZuUkN4MVFrRkJkVUlzZVVOQlFYbERMSEZDUVVGeFFpeEZRVUZGTEdsRFFVRnBReXcwUkVGQk5FUXNSVUZCUlN3MFFrRkJORUlzZFVKQlFYVkNMR2xEUVVGcFF5eDNSRUZCZDBRc1kwRkJZeXg1UTBGQmVVTXNjVUpCUVhGQ0xFVkJRVVVzYVVOQlFXbERMRFJFUVVFMFJDeEZRVUZGTERSQ1FVRTBRaXgxUWtGQmRVSXNPRUpCUVRoQ0xEUkRRVUUwUXl4cFFrRkJhVUlzZFVKQlFYVkNMRFpDUVVFMlFpd3lRa0ZCTWtJc1owTkJRV2RETEhWRFFVRjFReXh2UWtGQmIwSXNSMEZCUnl4alFVRmpMQ3RGUVVFclJTd3dRa0ZCTUVJc2NVTkJRWEZETERoQ1FVRTRRaXh2UTBGQmIwTXNkMEpCUVhkQ0xFdEJRVXNzYjBOQlFXOURMSGRDUVVGM1FpeExRVUZMTEhsRlFVRjVSU3cwUkVGQk5FUXNiVVZCUVcxRkxEQkRRVUV3UXl4blJVRkJaMFVzTkVKQlFUUkNMREpDUVVFeVFpeG5SRUZCWjBRc09FSkJRVGhDTEZGQlFWRXNSVUZCUlN4RlFVRkZMREpDUVVFeVFpd3lRa0ZCTWtJc2NVSkJRWEZDTEhkQ1FVRjNRaXgxUWtGQmRVSXNjMEpCUVhOQ0xIVkNRVUYxUWl4clEwRkJhME1zZDBOQlFYZERMRzFFUVVGdFJDeDNRMEZCZDBNc2FVVkJRV2xGTEd0RFFVRnJReXhuUkVGQlowUXNjVU5CUVhGRExDdERRVUVyUXl4dlEwRkJiME1zT0VOQlFUaERMRzFEUVVGdFF5eHBSRUZCYVVRc05FTkJRVFJETERoRVFVRTRSQ3cyUTBGQk5rTXNkMEpCUVhkQ0xEaEVRVUU0UkN4cFEwRkJhVU1zT0VKQlFUaENMSGxEUVVGNVF5eDNRMEZCZDBNc05rTkJRVFpETEhkQ1FVRjNRaXhMUVVGTExHZERRVUZuUXl4eFEwRkJjVU1zZDBKQlFYZENMRXRCUVVzc05rTkJRVFpETEd0RVFVRnJSQ3gzUWtGQmQwSXNTMEZCU3l4dFEwRkJiVU1zZDBOQlFYZERMSGRDUVVGM1FpeExRVUZMTERoRFFVRTRReXh0UkVGQmJVUXNkMEpCUVhkQ0xFdEJRVXNzTkVOQlFUUkRMRGhDUVVFNFFpeHpSRUZCYzBRc2VVTkJRWGxETEdsRFFVRnBReXcyUTBGQk5rTXNSVUZCUlN3eVFrRkJNa0lzYzBOQlFYTkRMREpEUVVFeVF5d3lRMEZCTWtNc2NVTkJRWEZETEhWQ1FVRjFRaXh6UTBGQmMwTXNkVU5CUVhWRExHdERRVUZyUXl4cFEwRkJhVU1zTWtKQlFUSkNMRVZCUVVVc2NVTkJRWEZETERaQ1FVRTJRaXhGUVVGRkxIVkNRVUYxUWl4cFEwRkJhVU1zY1VKQlFYRkNMRVZCUVVVc05FSkJRVFJDTEhOQ1FVRnpRaXhyUWtGQmEwSXNiMEpCUVc5Q0xITkZRVUZ6UlN4eFEwRkJjVU1zTWtSQlFUSkVMRmRCUVZjc09FSkJRVGhDTEhsRFFVRjVReXhoUVVGaExFVkJRVVVzYjBOQlFXOURMREpDUVVFeVFpeEZRVUZGTEd0Q1FVRnJRaXhWUVVGVkxHdENRVUZyUWl4dFEwRkJiVU1zVlVGQlZTeHBRMEZCYVVNc1VVRkJVU3hGUVVGRkxEQkNRVUV3UWl4dlFrRkJiMElzTUVKQlFUQkNMRzFEUVVGdFF5dzBRa0ZCTkVJc2FVVkJRV2xGTEc5RFFVRnZReXcwUkVGQk5FUXNaME5CUVdkRExESkRRVUV5UXl4eFFrRkJjVUlzTUVKQlFUQkNMRGhDUVVFNFFpeHZSRUZCYjBRc2IwVkJRVzlGTERSRFFVRTBReXh2UlVGQmIwVXNXVUZCV1N4VFFVRlRMR2REUVVGblF5eHJRa0ZCYTBJc1dVRkJXU3h0UTBGQmJVTXNiMEpCUVc5Q0xHbERRVUZwUXl4dFFrRkJiVUlzUjBGQlJ5eHBRMEZCYVVNc1VVRkJVU3hGUVVGRkxIRkNRVUZ4UWl3eVEwRkJNa01zY1VKQlFYRkNMR05CUVdNc1owSkJRV2RDTERCQ1FVRXdRaXcyUWtGQk5rSXNZVUZCWVN4clEwRkJhME1zTUVKQlFUQkNMRFJGUVVFMFJTeHBSRUZCYVVRc2VVVkJRWGxGTEdkRFFVRm5ReXd5UTBGQk1rTXNPRUpCUVRoQ0xEaERRVUU0UXl4UlFVRlJMRWRCUVVjc05rSkJRVFpDTEhkRFFVRjNReXhOUVVGTkxFZEJRVWNzYTBSQlFXdEVMRFJEUVVFMFF5eFJRVUZSTEVWQlFVVXNkMEpCUVhkQ0xIRkNRVUZ4UWl3d1FrRkJNRUlzWjBOQlFXZERMREpDUVVFeVFpeExRVUZMTERoQ1FVRTRRaXcwUWtGQk5FSXNhVVpCUVdsR0xIVkRRVUYxUXl3clJFRkJLMFFzYVVOQlFXbERMQ3REUVVFclF5eFpRVUZaTEZkQlFWY3NTMEZCU3l3NFEwRkJPRU1zZVVOQlFYbERMR2REUVVGblF5d3lRMEZCTWtNc2NVSkJRWEZDTERCQ1FVRXdRaXhuUTBGQlowTXNhVU5CUVdsRExIVkZRVUYxUlN4clJFRkJhMFFzTUVWQlFUQkZMR3RDUVVGclFpeDVRa0ZCZVVJc2NVSkJRWEZDTEdkRFFVRm5ReXhyUWtGQmEwSXNhVUpCUVdsQ0xITkRRVUZ6UXl4NVEwRkJlVU1zUjBGQlJ5eDNRa0ZCZDBJc2MwTkJRWE5ETEdkRVFVRm5SQ3hIUVVGSExHOUNRVUZ2UWl4elEwRkJjME1zTkVOQlFUUkRMRWRCUVVjc2FVTkJRV2xETEZGQlFWRXNSVUZCUlN4eFFrRkJjVUlzTWtOQlFUSkRMQ3RDUVVFclFpdzRRMEZCT0VNc2MwTkJRWE5ETEc5RVFVRnZSQ3hyUTBGQmEwTXNOa05CUVRaRExIRkNRVUZ4UWl3d1FrRkJNRUlzT0VKQlFUaENMREJDUVVFd1FpeHBRMEZCYVVNc2IwTkJRVzlETERaQ1FVRTJRaXdyUWtGQkswSXNhMFpCUVd0R0xDdENRVUVyUWl4eFJFRkJjVVFzVjBGQlZ5eFhRVUZYTEZkQlFWY3NWMEZCVnl4WFFVRlhMRFJEUVVFMFF5eDNRMEZCZDBNc2JVSkJRVzFDTEhGRFFVRnhReXhyUWtGQmEwSXNjVUpCUVhGQ0xEUkVRVUUwUkN3clFrRkJLMElzZDBOQlFYZERMRVZCUVVVc05rSkJRVFpDTEc5RVFVRnZSQ3gxUWtGQmRVSXNlVU5CUVhsRExIRkNRVUZ4UWl4RlFVRkZMR2xEUVVGcFF5eG5SVUZCWjBVc1JVRkJSU3cwUWtGQk5FSXNkVUpCUVhWQ0xEaENRVUU0UWl3MFEwRkJORU1zYVVKQlFXbENMSFZDUVVGMVFpdzJRa0ZCTmtJc01rSkJRVEpDTEdkRFFVRm5ReXgxUTBGQmRVTXNiMEpCUVc5Q0xFZEJRVWNzWTBGQll5eDVSVUZCZVVVc01FSkJRVEJDTEdsRFFVRnBReXc0UWtGQk9FSXNiME5CUVc5RExESkNRVUV5UWl4NVJVRkJlVVVzTUVSQlFUQkVMREpFUVVFeVJDeDFRMEZCZFVNc05rUkJRVFpFTEZkQlFWY3NkME5CUVhkRExHbEZRVUZwUlN4clEwRkJhME1zWjBSQlFXZEVMSE5EUVVGelF5eG5SRUZCWjBRc2MwTkJRWE5ETEdkRVFVRm5SQ3hyUTBGQmEwTXNVMEZCVXl3d1FrRkJNRUlzVDBGQlR5d3dRa0ZCTUVJc1UwRkJVeXh4UTBGQmNVTXNNa0pCUVRKQ0xEaENRVUU0UWl3eVFrRkJNa0lzTWtKQlFUSkNMSE5EUVVGelF5d3lRMEZCTWtNc2NVTkJRWEZETEhsRFFVRjVReXc0UWtGQk9FSXNlVU5CUVhsRExDdENRVUVyUWl4cFEwRkJhVU1zZDBKQlFYZENMRVZCUVVVc2RVSkJRWFZDTEdsRFFVRnBReXh4UWtGQmNVSXNSVUZCUlN3MFFrRkJORUlzYzBKQlFYTkNMR3RDUVVGclFpdzBRa0ZCTkVJc2MwSkJRWE5DTERKQ1FVRXlRaXh4UWtGQmNVSXNlVUpCUVhsQ0xIbENRVUY1UWl3clFrRkJLMElzYjBKQlFXOUNMRzFGUVVGdFJTeHZRMEZCYjBNc01FUkJRVEJFTEZkQlFWY3NWMEZCVnl3clFrRkJLMElzY1VOQlFYRkRMRzFEUVVGdFF5eHpRMEZCYzBNc09FSkJRVGhDTEdsRFFVRnBReXd3UWtGQk1FSXNSVUZCUlN3eVFrRkJNa0lzYVVKQlFXbENMREJDUVVFd1Fpd3JRa0ZCSzBJc0swSkJRU3RDTERaQ1FVRTJRaXcwUWtGQk5FSXNaMFZCUVdkRkxHOURRVUZ2UXl3d1JFRkJNRVFzTWtKQlFUSkNMRFpDUVVFMlFpeHRRa0ZCYlVJc1ZVRkJWU3haUVVGWkxGZEJRVmNzUzBGQlN5dzBRMEZCTkVNc1UwRkJVeXhMUVVGTExEWkNRVUUyUWl4blFrRkJaMElzZDBKQlFYZENMRGhDUVVFNFFpeGxRVUZsTEVWQlFVVXNORVJCUVRSRUxEaENRVUU0UWl3clFrRkJLMElzYVVKQlFXbENMR2xEUVVGcFF5eHhRa0ZCY1VJc1JVRkJSU3cwUWtGQk5FSXNhMEpCUVd0Q0xEQkNRVUV3UWl3NFFrRkJPRUlzZDBKQlFYZENMRXRCUVVzc2QwSkJRWGRDTEhGQ1FVRnhRaXh4UTBGQmNVTXNhVUpCUVdsQ0xHdERRVUZyUXl3eVFrRkJNa0lzYzBOQlFYTkRMR2xDUVVGcFFpeHRRMEZCYlVNc0swSkJRU3RDTEdkRlFVRm5SU3dyUWtGQkswSXNjVVJCUVhGRUxESkNRVUV5UWl3MlFrRkJOa0lzT0VSQlFUaEVMRTFCUVUwc1NVRkJTU3c0UWtGQk9FSXNORUpCUVRSQ0xIRkNRVUZ4UWl4RlFVRkZMREpDUVVFeVFpeHBRa0ZCYVVJc01FSkJRVEJDTERoQ1FVRTRRaXd5UWtGQk1rSXNNa1JCUVRKRUxHbEVRVUZwUkN4MVJVRkJkVVVzVjBGQlZ5eFhRVUZYTEdGQlFXRXNOa0pCUVRaQ0xEaENRVUU0UWl4dFJFRkJiVVFzUzBGQlN5d3lRMEZCTWtNc05FTkJRVFJETERaRFFVRTJReXhSUVVGUkxGZEJRVmNzVVVGQlVTeHhRMEZCY1VNc0swSkJRU3RDTEdOQlFXTXNiME5CUVc5RExFMUJRVTBzUlVGQlJTeGhRVUZoTEhsRFFVRjVReXhOUVVGTkxFVkJRVVVzWVVGQllTeDFRMEZCZFVNc1RVRkJUU3hGUVVGRkxHRkJRV0VzYlVOQlFXMURMRTFCUVUwc1JVRkJSU3dyUkVGQkswUXNPRUpCUVRoQ0xHbERRVUZwUXl4dFEwRkJiVU1zUlVGQlJTd3lRa0ZCTWtJc2FVSkJRV2xDTERCQ1FVRXdRaXc0UWtGQk9FSXNNa0pCUVRKQ0xEWkZRVUUyUlN4blJFRkJaMFFzYzBWQlFYTkZMRmRCUVZjc1YwRkJWeXhYUVVGWExESkNRVUV5UWl4MVEwRkJkVU1zZFVOQlFYVkRMR05CUVdNc1owTkJRV2RETEZkQlFWY3NSVUZCUlN4blEwRkJaME1zVlVGQlZTeEZRVUZGTEdsRFFVRnBReXhaUVVGWkxFVkJRVVVzZDBKQlFYZENMSFZFUVVGMVJDeHhRa0ZCY1VJc1JVRkJSU3c0UTBGQk9FTXNWMEZCVnl4SFFVRkhMREpDUVVFeVFpd3dRMEZCTUVNc1VVRkJVU3h0UTBGQmJVTXNjME5CUVhORExESkNRVUV5UWl4dFEwRkJiVU1zYjBOQlFXOURMRzFFUVVGdFJDeFhRVUZYTEd0Q1FVRnJRaXh0UkVGQmJVUXNiVUpCUVcxQ0xIVkNRVUYxUWl4clFrRkJhMElzUzBGQlN5d3lRa0ZCTWtJc09FSkJRVGhDTEd0RVFVRnJSQ3gxUTBGQmRVTXNhVU5CUVdsRExIbERRVUY1UXl4RlFVRkZMRlZCUVZVc09FSkJRVGhDTERKQ1FVRXlRaXcwUWtGQk5FSXNhMEpCUVd0Q0xEUkNRVUUwUWl4dlEwRkJiME1zVFVGQlRTeFBRVUZQTEZsQlFWa3NSVUZCUlN4UFFVRlBMRmRCUVZjc1JVRkJSU3hGUVVGRkxIZENRVUYzUWl4MVJFRkJkVVFzY1VKQlFYRkNMRVZCUVVVc09FTkJRVGhETEZkQlFWY3NSMEZCUnl4M1FrRkJkMElzZVVOQlFYbERMR2xDUVVGcFFpeEZRVUZGTEhWRVFVRjFSQ3huUTBGQlowTXNSVUZCUlN3NFEwRkJPRU1zY1VKQlFYRkNMRWRCUVVjc2VVSkJRWGxDTEhkRFFVRjNReXhOUVVGTkxFOUJRVThzV1VGQldTeEZRVUZGTEU5QlFVOHNXVUZCV1N4RlFVRkZMRTlCUVU4c1dVRkJXU3hGUVVGRkxFVkJRVVVzZFVSQlFYVkVMSGRDUVVGM1FpeEZRVUZGTEdkRFFVRm5ReXhYUVVGWExFVkJRVVVzT0VOQlFUaERMREpDUVVFeVFpeEhRVUZITERCQ1FVRXdRaXh2UkVGQmIwUXNiVUpCUVcxQ0xFdEJRVXNzTUVWQlFUQkZMR1ZCUVdVc1MwRkJTeXh6UlVGQmMwVXNaMEpCUVdkQ0xFdEJRVXNzYVVOQlFXbERMSGxDUVVGNVFpeExRVUZMTEdsRFFVRnBReXhuUTBGQlowTXNORVZCUVRSRkxHZERRVUZuUXl4elJFRkJjMFFzVjBGQlZ5eFhRVUZYTEN0Q1FVRXJRaXh0UWtGQmJVSXNPRUpCUVRoQ0xGZEJRVmNzTUVKQlFUQkNMSEZDUVVGeFFpdzBRMEZCTkVNc1MwRkJTeXh4UkVGQmNVUXNTMEZCU3l4eFFrRkJjVUlzTmtKQlFUWkNMRXRCUVVzc2MwTkJRWE5ETERKQ1FVRXlRaXhwUWtGQmFVSXNaMEpCUVdkQ0xEQkNRVUV3UWl3clFrRkJLMElzYVVKQlFXbENMRXRCUVVzc09FSkJRVGhDTEhWQ1FVRjFRaXhIUVVGSExFMUJRVTBzWjBKQlFXZENMSFZDUVVGMVFpeEhRVUZITEUxQlFVMHNhMEpCUVd0Q0xHOUNRVUZ2UWl3MFJFRkJORVFzSzBOQlFTdERMSEZGUVVGeFJTeFhRVUZYTEZkQlFWY3NWMEZCVnl4WlFVRlpMRGhDUVVFNFFpd3lRMEZCTWtNc0swSkJRU3RDTERKRFFVRXlReXgxUkVGQmRVUXNjVUpCUVhGQ0xIRkNRVUZ4UWl4M1FrRkJkMElzYVVOQlFXbERMRkZCUVZFc1JVRkJSU3cwUWtGQk5FSXNhMEpCUVd0Q0xEQkNRVUV3UWl3clFrRkJLMElzYjBKQlFXOUNMSEZEUVVGeFF5dzJRa0ZCTmtJc2NVTkJRWEZETERoQ1FVRTRRaXd3UWtGQk1FSXNNRU5CUVRCRExESkZRVUV5UlN4MVEwRkJkVU1zTmtSQlFUWkVMRmRCUVZjc1YwRkJWeXhQUVVGUExIVkRRVUYxUXl4dlFrRkJiMElzTkVKQlFUUkNMRmRCUVZjc1YwRkJWeXd3UWtGQk1FSXNUMEZCVHl4cFEwRkJhVU1zYlVKQlFXMUNMRGhDUVVFNFFpeHBRa0ZCYVVJc1JVRkJSU3c0UWtGQk9FSXNaMEpCUVdkQ0xEaENRVUU0UWl4cFFrRkJhVUlzUlVGQlJTdzRRa0ZCT0VJc1owSkJRV2RDTERoQ1FVRTRRaXhwUWtGQmFVSXNSVUZCUlN4eFEwRkJjVU1zWlVGQlpTeHRRa0ZCYlVJc2JVSkJRVzFDTEZkQlFWY3NPRUpCUVRoQ0xFdEJRVXNzYVVOQlFXbERMRzFDUVVGdFFpeFpRVUZaTEdsRFFVRnBReXhwUWtGQmFVSXNVVUZCVVN4MVFrRkJkVUlzTmtKQlFUWkNMRk5CUVZNc2JVTkJRVzFETEdWQlFXVXNiVUpCUVcxQ0xHbENRVUZwUWl4WFFVRlhMRGhDUVVFNFFpeExRVUZMTEdsRFFVRnBReXh0UWtGQmJVSXNXVUZCV1N3clFrRkJLMElzYVVKQlFXbENMRkZCUVZFc2QwSkJRWGRDTERaQ1FVRTJRaXhUUVVGVExHOUNRVUZ2UWl4eFEwRkJjVU1zTkVOQlFUUkRMRGhEUVVFNFF5eEhRVUZITERoQ1FVRTRRaXh4UTBGQmNVTXNNRUpCUVRCQ0xIRkNRVUZ4UWl4dFJVRkJiVVVzZDBOQlFYZERMRGhFUVVFNFJDeFhRVUZYTEdsRFFVRnBReXhaUVVGWkxGZEJRVmNzUzBGQlN5d3lRMEZCTWtNc2VVSkJRWGxDTERoQ1FVRTRRaXhwUTBGQmFVTXNjVUpCUVhGQ0xFVkJRVVVzTUVKQlFUQkNMREpDUVVFeVFpd3dRa0ZCTUVJc01FSkJRVEJDTEc5RlFVRnZSU3hwUkVGQmFVUXNkVVZCUVhWRkxGZEJRVmNzVjBGQlZ5eFhRVUZYTEZkQlFWY3NPRUpCUVRoQ0xITkNRVUZ6UWl4clJFRkJhMFFzTkVOQlFUUkRMREpEUVVFeVF5eEZRVUZGTEhWRFFVRjFReXhyUWtGQmEwSXNNRUpCUVRCQ0xESkVRVUV5UkN4cFFrRkJhVUlzWTBGQll5eGhRVUZoTEV0QlFVc3NORVJCUVRSRUxEWkZRVUUyUlN3MlEwRkJOa01zYlVWQlFXMUZMRmRCUVZjc09FSkJRVGhDTEd0RFFVRnJReXh6UWtGQmMwSXNjVU5CUVhGRExIVkRRVUYxUXl4RlFVRkZMSE5DUVVGelFpdzBRa0ZCTkVJc2EwSkJRV3RDTERCQ1FVRXdRaXhuUTBGQlowTXNkVUpCUVhWQ0xIbEZRVUY1UlN4dFEwRkJiVU1zYjBKQlFXOUNMREJKUVVFd1NTeHRRa0ZCYlVJc2EyaEZRVUZyYUVVc2FVSkJRV2xDTERCQ1FVRXdRaXg1UTBGQmVVTXNkMEpCUVhkQ0xEWkRRVUUyUXl4blJFRkJaMFFzTWtKQlFUSkNMSGxEUVVGNVF5eE5RVUZOTEVWQlFVVXNiVUpCUVcxQ0xGVkJRVlVzTWtKQlFUSkNMSGxEUVVGNVF5eDNRa0ZCZDBJc09FTkJRVGhETEhkRFFVRjNReXcwUWtGQk5FSXNlVU5CUVhsRExFMUJRVTBzUlVGQlJTeHRRa0ZCYlVJc1YwRkJWeXgzUTBGQmQwTXNjME5CUVhORExHZENRVUZuUWl4WlFVRlpMRlZCUVZVc1ZVRkJWU3gzUTBGQmQwTXNjME5CUVhORExIRkNRVUZ4UWl4VFFVRlRMR0ZCUVdFc2RVTkJRWFZETERaRFFVRTJReXhYUVVGWExEUkVRVUUwUkN3clEwRkJLME1zWjBOQlFXZERMRTFCUVUwc1JVRkJSU3huUTBGQlowTXNUVUZCVFN4RlFVRkZMR2xEUVVGcFF5eFpRVUZaTEVWQlFVVXNkMEpCUVhkQ0xEaERRVUU0UXl4eFFrRkJjVUlzUlVGQlJTeHJRMEZCYTBNc1YwRkJWeXhGUVVGRkxHbERRVUZwUXl4WlFVRlpMRVZCUVVVc2QwSkJRWGRDTERaRVFVRTJSQ3hYUVVGWExDdERRVUVyUXl4eFFrRkJjVUlzTmtKQlFUWkNMSGxDUVVGNVFpeHRRMEZCYlVNc1MwRkJTeXhuUTBGQlowTXNiVU5CUVcxRExHMURRVUZ0UXl4TFFVRkxMSGxEUVVGNVF5eDVRa0ZCZVVJc05rSkJRVFpDTEV0QlFVc3NPRUpCUVRoQ0xEUkNRVUUwUWl4dFEwRkJiVU1zUzBGQlN5dzBRa0ZCTkVJc01rSkJRVEpDTEdsRFFVRnBReXhMUVVGTExESkNRVUV5UWl3d1FrRkJNRUlzSzBKQlFTdENMRXRCUVVzc0swSkJRU3RDTERSQ1FVRTBRaXd5UTBGQk1rTXNTMEZCU3l4eFEwRkJjVU1zWjBSQlFXZEVMRmxCUVZrc1pVRkJaU3hMUVVGTExIRkNRVUZ4UWl3MlEwRkJOa01zT0VOQlFUaERMSGxEUVVGNVF5eFhRVUZYTEZkQlFWY3NXVUZCV1N4eFEwRkJjVU1zY1VKQlFYRkNMSGxDUVVGNVFpeEZRVUZGTEZOQlFWTXNZVUZCWVN4eFFrRkJjVUlzWVVGQllTeEZRVUZGTERSQ1FVRTBRanRCUVVOc2FUSkNPMEZCUTBFN1FVRkRRU3h4UTBGQmIwTXNVVUZCVVN3NFEwRkJPRU1zWVVGQllTeHpSRUZCYzBRc2FVSkJRV2xDTEc5RFFVRnZReXd3UkVGQk1FUXNVMEZCVXl3NFFrRkJPRUlzVlVGQlZTeHhRMEZCY1VNc2NVSkJRWEZDTEVWQlFVVXNkMEpCUVhkQ0xIRkNRVUZ4UWl4RlFVRkZMRWxCUVVrc2EwSkJRV3RDTEZOQlFWTXNjMFJCUVhORUxEWkNRVUUyUWl4WlFVRlpMRVZCUVVVc1NVRkJTU3cwUWtGQk5FSXNVMEZCVXl4dFJFRkJiVVFzYlVKQlFXMUNMR2RGUVVGblJTeHpRMEZCYzBNc05FUkJRVFJFTEhkRFFVRjNReXhYUVVGWExEQkNRVUV3UWl3eVEwRkJNa01zY1VKQlFYRkNMSEZGUVVGeFJTeDNRMEZCZDBNc09FUkJRVGhFTEhkRFFVRjNReXd3UWtGQk1FSXNNRVpCUVRCR0xHZERRVUZuUXl4blFrRkJaMElzYjBOQlFXOURMRzlEUVVGdlF5eE5RVUZOTEVWQlFVVXNhMEpCUVd0Q0xHMUNRVUZ0UWl4TFFVRkxMSE5EUVVGelF5eHJRa0ZCYTBJc2MwSkJRWE5DTEhWRlFVRjFSU3h6UTBGQmMwTXNORVJCUVRSRUxIZERRVUYzUXl3d1FrRkJNRUlzYVVOQlFXbERMRWxCUVVrc2EwSkJRV3RDTEZOQlFWTXNOa05CUVRaRExIRkNRVUZ4UWl4eFJVRkJjVVVzTmtOQlFUWkRMRzFGUVVGdFJTdzRRMEZCT0VNc1owSkJRV2RDTEc5Q1FVRnZRaXhyUWtGQmEwSXNNRUpCUVRCQ0xGTkJRVk1zV1VGQldTeFhRVUZYTEV0QlFVc3NhME5CUVd0RExDdENRVUVyUWl3MFFrRkJORUlzVFVGQlRTeEZRVUZGTEd0Q1FVRnJRaXh0UTBGQmJVTXNWVUZCVlN4RlFVRkZMR3RDUVVGclFpeDVRa0ZCZVVJc1dVRkJXU3hGUVVGRkxHdENRVUZyUWl4VlFVRlZMSGxDUVVGNVFpeFJRVUZSTEVWQlFVVXNhMEpCUVd0Q0xHOUNRVUZ2UWl3d1FrRkJNRUlzTmtKQlFUWkNMREJDUVVFd1FpdzBSVUZCTkVVc0swTkJRU3RETEhGRlFVRnhSU3c0UTBGQk9FTXNaMEpCUVdkQ0xIRkNRVUZ4UWl4dlFrRkJiMElzYTBKQlFXdENMRFJDUVVFMFFpeFRRVUZUTEZsQlFWa3NWMEZCVnl4TFFVRkxMR3REUVVGclF5eFRRVUZUTEdkQ1FVRm5RaXhyUTBGQmEwTXNUMEZCVHl4SFFVRkhMREJDUVVFd1FpdzBRa0ZCTkVJc1RVRkJUU3hGUVVGRkxHdENRVUZyUWl4VlFVRlZMRzFEUVVGdFF5eFZRVUZWTEVWQlFVVXNhMEpCUVd0Q0xGVkJRVlVzZVVKQlFYbENMRkZCUVZFc1JVRkJSU3hyUWtGQmEwSXNWVUZCVlN4NVFrRkJlVUlzVVVGQlVTeEZRVUZGTEd0Q1FVRnJRaXh2UWtGQmIwSXNNRUpCUVRCQ0xEWkNRVUUyUWl4bFFVRmxMQ3RDUVVFclFpeFpRVUZaTERSQ1FVRTBRaXc0UlVGQk9FVXNaMFJCUVdkRUxITkZRVUZ6UlN4WFFVRlhMRmRCUVZjc1owSkJRV2RDTEdGQlFXRXNPRUpCUVRoQ0xDdENRVUVyUWl4cFFrRkJhVUlzVVVGQlVTeDFRa0ZCZFVJc09FSkJRVGhDTEc5Q1FVRnZRaXcyUWtGQk5rSXNLMEpCUVN0Q0xFMUJRVTBzUjBGQlJ5dzRRa0ZCT0VJc2FVTkJRV2xETEd0RFFVRnJReXhGUVVGRkxEUkNRVUUwUWl4clFrRkJhMElzTUVKQlFUQkNMSEZFUVVGeFJDeHhRa0ZCY1VJc2RVSkJRWFZDTEdkRVFVRm5SQ3h6UWtGQmMwSXNTMEZCU3l4dFJFRkJiVVFzTmtOQlFUWkRMSE5DUVVGelFpeExRVUZMTEdsRVFVRnBSQ3cwUWtGQk5FSXNOa0pCUVRaQ0xEUkZRVUUwUlN4M1EwRkJkME1zT0VSQlFUaEVMSE5DUVVGelFpeHRRa0ZCYlVJc2NVSkJRWEZDTEhsRFFVRjVReXh2UWtGQmIwSXNkVUpCUVhWQ0xIbENRVUY1UWl4elFrRkJjMElzYzBKQlFYTkNMR1ZCUVdVc1kwRkJZeXc0UWtGQk9FSXNLMEpCUVN0Q0xHbENRVUZwUWl3MFFrRkJORUlzZFVOQlFYVkRMRVZCUVVVc05FSkJRVFJDTEd0Q1FVRnJRaXd3UWtGQk1FSXNjMFJCUVhORUxIVkNRVUYxUWl4dlJVRkJiMFVzY1VOQlFYRkRMREpFUVVFeVJDeG5Ra0ZCWjBJc2IwSkJRVzlDTEhGQ1FVRnhRaXh0UTBGQmJVTXNVVUZCVVN4RlFVRkZMRFJDUVVFMFFpd3lRa0ZCTWtJc2QwTkJRWGRETEd0Q1FVRnJRaXhsUVVGbExEQkRRVUV3UXl4eFEwRkJjVU1zYlVkQlFXMUhMRkZCUVZFc2IwUkJRVzlFTEU5QlFVOHNTVUZCU1N4elEwRkJjME1zTUVKQlFUQkNMRGhFUVVFNFJDeDVRMEZCZVVNc01rSkJRVEpDTEVkQlFVY3NNa05CUVRKRExHdERRVUZyUXl4SFFVRkhMRFpGUVVFMlJTd3JSRUZCSzBRc01rTkJRVEpETEN0Q1FVRXJRaXhwUkVGQmFVUXNaVUZCWlN4TFFVRkxMSGRDUVVGM1FpeDNRMEZCZDBNc1QwRkJUeXhGUVVGRkxIZERRVUYzUXl4M1FrRkJkMElzYVVOQlFXbERMRTFCUVUwc1JVRkJSU3hWUVVGVkxHVkJRV1VzWlVGQlpTeG5RMEZCWjBNc1RVRkJUU3hIUVVGSExEWkNRVUUyUWl4bFFVRmxMRGhDUVVFNFFpdzBRa0ZCTkVJc09FSkJRVGhDTERSR1FVRTBSaXh6UTBGQmMwTXNOa0pCUVRaQ0xEaERRVUU0UXl4RlFVRkZMRmRCUVZjc2JVTkJRVzFETEhsQ1FVRjVRaXhuUkVGQlowUXNSVUZCUlN4blIwRkJaMGNzV1VGQldTeFZRVUZWTEhsQ1FVRjVRaXhSUVVGUkxFVkJRVVVzTkVKQlFUUkNMRzFDUVVGdFFpeHBSVUZCYVVVc2EwUkJRV3RFTEhkRlFVRjNSU3huUWtGQlowSXNiMEpCUVc5Q0xIRkNRVUZ4UWl3NFEwRkJPRU1zV1VGQldTeEZRVUZGTEc5Q1FVRnZRaXh6UWtGQmMwSXNNa0pCUVRKQ0xHZERRVUZuUXl4cFEwRkJhVU1zT0VOQlFUaERMRTFCUVUwc1JVRkJSU3hMUVVGTExEaERRVUU0UXl4UFFVRlBMRWxCUVVrc2FVTkJRV2xETERCQ1FVRXdRaXd5UWtGQk1rSXNORUpCUVRSQ0xFdEJRVXNzTWtKQlFUSkNMREpEUVVFeVF5eHZRMEZCYjBNc2VVSkJRWGxDTEc5RFFVRnZReXh2UTBGQmIwTXNPRUpCUVRoQ0xESkRRVUV5UXl4cFEwRkJhVU1zTkVKQlFUUkNMREJDUVVFd1FpeEZRVUZGTEhORFFVRnpReXcyUWtGQk5rSXNSVUZCUlN3eVFrRkJNa0lzY1VKQlFYRkNMSFZDUVVGMVFpeDVRa0ZCZVVJc1VVRkJVU3hGUVVGRkxEUkNRVUUwUWl4dFFrRkJiVUlzT0VWQlFUaEZMSE5EUVVGelF5dzBSRUZCTkVRc1owSkJRV2RDTEc5Q1FVRnZRaXh4UWtGQmNVSXNkVUpCUVhWQ0xHMUNRVUZ0UWl4blEwRkJaME1zZFVKQlFYVkNMSE5EUVVGelF5dzRRa0ZCT0VJc05rSkJRVFpDTEhsRFFVRjVReXhGUVVGRkxIbENRVUY1UWl3MFFrRkJORUlzUlVGQlJTdzBRa0ZCTkVJc2EwSkJRV3RDTERCQ1FVRXdRaXhYUVVGWExEUkNRVUUwUWl4NVEwRkJlVU1zZFVKQlFYVkNMR3RGUVVGclJTeHhRMEZCY1VNc01rUkJRVEpFTEdkQ1FVRm5RaXh2UWtGQmIwSXNjVUpCUVhGQ0xHMURRVUZ0UXl4UlFVRlJMRVZCUVVVc2MwSkJRWE5DTERCQ1FVRXdRaXgxUkVGQmRVUXNhVUpCUVdsQ0xIZENRVUYzUWl4blFrRkJaMElzZVVOQlFYbERMSE5EUVVGelF5d3JRa0ZCSzBJc2VVSkJRWGxDTEZOQlFWTXNPRUpCUVRoQ0xEaENRVUU0UWl3clFrRkJLMElzYVVKQlFXbENMREpDUVVFeVFpeFRRVUZUTEZsQlFWa3NaME5CUVdkRExFdEJRVXNzWjBOQlFXZERMR2xEUVVGcFF5eFBRVUZQTEVWQlFVVXNWVUZCVlN3clFrRkJLMElzVVVGQlVTeEZRVUZGTEdsRlFVRnBSU3h6UWtGQmMwSXNhME5CUVd0RExHOUNRVUZ2UWl3eVFrRkJNa0lzUlVGQlJTeHRRMEZCYlVNc09FSkJRVGhDTEVkQlFVY3NjMEpCUVhOQ0xHOUNRVUZ2UWl4dlFrRkJiMElzTUVKQlFUQkNMRVZCUVVVc1ZVRkJWU3g1UWtGQmVVSXNVVUZCVVN4RlFVRkZMRFJDUVVFMFFpeHJRa0ZCYTBJc0swSkJRU3RDTEhGQ1FVRnhRaXg1UWtGQmVVSXNORUpCUVRSQ0xFVkJRVVVzVlVGQlZTeDVRMEZCZVVNc05FSkJRVFJDTEhkQ1FVRjNRaXhWUVVGVkxIVkNRVUYxUWl4elEwRkJjME1zT0VOQlFUaERMRmRCUVZjc2FVVkJRV2xGTEhWRFFVRjFReXhuUkVGQlowUXNiMEpCUVc5Q0xITkNRVUZ6UWl4NVFrRkJlVUlzSzBOQlFTdERMRFpDUVVFMlFpeFpRVUZaTEdsQ1FVRnBRaXhMUVVGTExHOURRVUZ2UXl4dlFrRkJiMElzV1VGQldTeDFRa0ZCZFVJc1MwRkJTeXgxUWtGQmRVSXNlVUpCUVhsQ0xHOURRVUZ2UXl4M1FrRkJkMElzY1VSQlFYRkVMRVZCUVVVc2VVSkJRWGxDTEhkQ1FVRjNRaXcwUWtGQk5FSXNNa0pCUVRKQ0xITkNRVUZ6UWl4dFEwRkJiVU1zYTBOQlFXdERMSE5DUVVGelFpeHhRMEZCY1VNc2IwTkJRVzlETEhOQ1FVRnpRaXd3UTBGQk1FTXNlVU5CUVhsRExIVkNRVUYxUWl4blEwRkJaME1zZVVKQlFYbENPMEZCUTI0eVdEdEJRVU5CTzBGQlEwRXNjVU5CUVc5RExGRkJRVkVzT0VOQlFUaERMR0ZCUVdFc2MwUkJRWE5FTEdsQ1FVRnBRaXh0UTBGQmJVTXNlVVJCUVhsRUxHZENRVUZuUWl4clFrRkJhMElzYVVKQlFXbENMR2xDUVVGcFFpdzRRa0ZCT0VJc1YwRkJWeXhYUVVGWExGZEJRVmNzVTBGQlV5eDFRa0ZCZFVJc2IwSkJRVzlDTEcxQ1FVRnRRaXhGUVVGRkxGVkJRVlVzYzBKQlFYTkNMSGRDUVVGM1FpeHJRa0ZCYTBJc1JVRkJSU3g1UWtGQmVVSXNPRUpCUVRoQ0xFVkJRVVVzVlVGQlZTeHpRa0ZCYzBJc2QwSkJRWGRDTEd0Q1FVRnJRaXhGUVVGRkxIbENRVUY1UWl3NFFrRkJPRUlzUlVGQlJTeFZRVUZWTEhsQ1FVRjVRaXhSUVVGUkxFVkJRVVVzTkVKQlFUUkNMR3RDUVVGclFpd3dRa0ZCTUVJc0swSkJRU3RDTEhWQ1FVRjFRaXc0UWtGQk9FSXNjVUpCUVhGQ0xEaENRVUU0UWl4M1FrRkJkMElzSzBSQlFTdEVMSGxEUVVGNVF5d3JSRUZCSzBRc1owSkJRV2RDTEhGQ1FVRnhRaXh0UWtGQmJVSXNjVUpCUVhGQ0xEaENRVUU0UWl3clFrRkJLMElzYVVKQlFXbENMSGxDUVVGNVFpeHpRMEZCYzBNc1JVRkJSU3d3UWtGQk1FSXNNRUpCUVRCQ0xDdENRVUVyUWl4NVEwRkJlVU1zWlVGQlpTeEZRVUZGTEdsRFFVRnBReXh6UTBGQmMwTXNaMEpCUVdkQ0xFdEJRVXNzY1VWQlFYRkZMSFZEUVVGMVF5dzJSRUZCTmtRc1owSkJRV2RDTEc5Q1FVRnZRaXhuUTBGQlowTXNVVUZCVVN4RlFVRkZMREJDUVVFd1FpeHJRa0ZCYTBJc2FVSkJRV2xDTEd0Q1FVRnJRaXh0UTBGQmJVTXNPRU5CUVRoRExIVkNRVUYxUWl4UFFVRlBMSFZDUVVGMVFpd3JRMEZCSzBNc09FSkJRVGhDTEN0Q1FVRXJRaXg1UTBGQmVVTXNNa05CUVRKRExIVkNRVUYxUWl4eFFrRkJjVUlzYzBKQlFYTkNMRzlDUVVGdlFpeHBRa0ZCYVVJc01rSkJRVEpDTEhsQ1FVRjVRaXhSUVVGUkxFVkJRVVVzTkVKQlFUUkNMR3RDUVVGclFpd3dRa0ZCTUVJc01FSkJRVEJDTERaQ1FVRTJRaXc0UWtGQk9FSXNhVVJCUVdsRUxEWkNRVUUyUWl4elEwRkJjME1zWjBOQlFXZERMREJDUVVFd1FpeHRSVUZCYlVVc2EwTkJRV3RETEhkRVFVRjNSQ3huUWtGQlowSXNjVUpCUVhGQ0xHOUNRVUZ2UWl4blEwRkJaME1zVVVGQlVTeEZRVUZGTEd0Q1FVRnJRaXd3UWtGQk1FSXNkMEpCUVhkQ0xHMUNRVUZ0UWl4dlFrRkJiMElzYjBKQlFXOUNMR2xDUVVGcFFpeGxRVUZsTERoQ1FVRTRRaXh6UWtGQmMwSXNkVUpCUVhWQ0xHdERRVUZyUXl4eFFrRkJjVUlzSzBKQlFTdENMREJEUVVFd1F5dzJRa0ZCTmtJc05rSkJRVFpDTEhkRFFVRjNReXd5UWtGQk1rSXNkMEpCUVhkQ0xHMURRVUZ0UXl4elFrRkJjMElzZVVKQlFYbENMSFZDUVVGMVFpeDVRa0ZCZVVJc2RVSkJRWFZDTEhOQ1FVRnpRaXh2UWtGQmIwSXNiMEpCUVc5Q0xHdENRVUZyUWl4NVFrRkJlVUlzVVVGQlVTeEZRVUZGTERSQ1FVRTBRaXhyUWtGQmEwSXNNRUpCUVRCQ0xEaENRVUU0UWl4cFEwRkJhVU1zTUVOQlFUQkRMSGREUVVGM1F5eGhRVUZoTEVWQlFVVXNlVU5CUVhsRExEUkVRVUUwUkN4MVEwRkJkVU1zYjBSQlFXOUVMR3REUVVGclF5eHJSRUZCYTBRc2EwTkJRV3RETERCRFFVRXdReXh4UkVGQmNVUXNhME5CUVd0RExHZERRVUZuUXl4elEwRkJjME1zT0VKQlFUaENMRzFEUVVGdFF5dzRSRUZCT0VRc2QwTkJRWGRETERoRVFVRTRSQ3huUWtGQlowSXNiMEpCUVc5Q0xHdENRVUZyUWl4bFFVRmxMRGhDUVVFNFFpeDFRa0ZCZFVJc2FVTkJRV2xETEhGQ1FVRnhRaXh2UWtGQmIwSXNhMEpCUVd0Q0xIbENRVUY1UWl4UlFVRlJMRVZCUVVVc05FSkJRVFJDTEd0Q1FVRnJRaXd3UWtGQk1FSXNPRUpCUVRoQ0xESkRRVUV5UXl4eFJVRkJjVVVzYjBOQlFXOURMRzlGUVVGdlJTeDNRMEZCZDBNc09FUkJRVGhFTEdkQ1FVRm5RaXh2UWtGQmIwSXNhMEpCUVd0Q0xIZENRVUYzUWl4MVFrRkJkVUlzT0VKQlFUaENMSFZDUVVGMVFpeHBRMEZCYVVNc2NVSkJRWEZDTERaQ1FVRTJRaXd5UWtGQk1rSXNORUpCUVRSQ0xEQkNRVUV3UWl4NVFrRkJlVUlzVVVGQlVTeEZRVUZGTERSQ1FVRTBRaXhyUWtGQmEwSXNNRUpCUVRCQ0xEaENRVUU0UWl4MVEwRkJkVU1zSzBKQlFTdENMSE5EUVVGelF5eG5Ra0ZCWjBJc1JVRkJSU3huUTBGQlowTXNjMFJCUVhORUxHOUZRVUZ2UlN4dlEwRkJiME1zTUVSQlFUQkVMR2RDUVVGblFpeHZRa0ZCYjBJc1YwRkJWeXc0UWtGQk9FSXNkVU5CUVhWRExHdENRVUZyUWl3d1FrRkJNRUlzSzBKQlFTdENMRFJDUVVFMFFpeHJRMEZCYTBNc0swSkJRU3RDTEN0Q1FVRXJRaXhuUWtGQlowSXNSVUZCUlN4TFFVRkxMRzlEUVVGdlF5eG5SVUZCWjBVc2JVTkJRVzFETEdkSFFVRm5SeXh6UTBGQmMwTXNORVJCUVRSRUxHZENRVUZuUWl4cFFrRkJhVUlzT0VKQlFUaENMRk5CUVZNc1dVRkJXU3gxUWtGQmRVSXNTMEZCU3l3MFFrRkJORUlzY1VKQlFYRkNMRWRCUVVjc2VVSkJRWGxDTEZGQlFWRXNSVUZCUlN3MFFrRkJORUlzYTBKQlFXdENMREJDUVVFd1FpdzJRa0ZCTmtJc2VVSkJRWGxDTEd0RlFVRnJSU3g1UTBGQmVVTXNLMFJCUVN0RUxHZENRVUZuUWl4dlFrRkJiMElzWjBKQlFXZENMRGhDUVVFNFFpeHhRa0ZCY1VJc1owTkJRV2RETEhsRFFVRjVReXd5UWtGQk1rSXNkVUpCUVhWQ0xEUkNRVUUwUWl4clFrRkJhMElzTUVKQlFUQkNMRFJDUVVFMFFpeHBRMEZCYVVNc2EwTkJRV3RETEN0Q1FVRXJRaXh4UWtGQmNVSXNTMEZCU3l3NFFrRkJPRUlzZDBKQlFYZENMSEZGUVVGeFJTeDNRMEZCZDBNc09FbEJRVGhKTERaRFFVRTJReXcyUWtGQk5rSXNOa0pCUVRaQ0xESkRRVUV5UXl4cFJVRkJhVVVzYVVKQlFXbENMR05CUVdNc05rSkJRVFpDTEc5RFFVRnZReXh2UTBGQmIwTXNkVUpCUVhWQ0xHdERRVUZyUXl4eFFrRkJjVUlzTWtOQlFUSkRMREpDUVVFeVFpeFRRVUZUTERKRVFVRXlSQ3h4UTBGQmNVTXNNRUpCUVRCQ0xHZENRVUZuUWl4dFJrRkJiVVlzTUVOQlFUQkRMR2RGUVVGblJTeHBRa0ZCYVVJc05rSkJRVFpDTEc5RFFVRnZReXh2UTBGQmIwTXNkVUpCUVhWQ0xESkVRVUV5UkN4eFEwRkJjVU1zTUVKQlFUQkNMR2RDUVVGblFpeHJSa0ZCYTBZc2RVTkJRWFZETEc5RVFVRnZSQ3h2UWtGQmIwSXNiMEpCUVc5Q0xIbENRVUY1UWl3clFrRkJLMElzZDBKQlFYZENMSEZEUVVGeFF5eE5RVUZOTEVWQlFVVXNPRU5CUVRoRExEWkNRVUUyUWl4WlFVRlpMR2xDUVVGcFFpeExRVUZMTEc5RFFVRnZReXd3UWtGQk1FSXNiME5CUVc5RExIZENRVUYzUWl4eFJFRkJjVVFzUlVGQlJTeG5RMEZCWjBNc2NVSkJRWEZDTEVWQlFVVXNjMEpCUVhOQ0xHZERRVUZuUXl4VlFVRlZMRzlFUVVGdlJDeFRRVUZUTEdkQ1FVRm5RaXdyUTBGQkswTXNaVUZCWlN3clEwRkJLME1zZDBOQlFYZERMR3RFUVVGclJDeFpRVUZaTEZkQlFWY3NTMEZCU3l4WFFVRlhMRzlDUVVGdlFpeFpRVUZaTEcxRFFVRnRReXhuUTBGQlowTXNXVUZCV1N4eFEwRkJjVU1zV1VGQldTeG5Ra0ZCWjBJc1ZVRkJWU3h6UkVGQmMwUXNVMEZCVXl4M1FrRkJkMElzWjBSQlFXZEVMQ3REUVVFclF5eHZSRUZCYjBRc2JVTkJRVzFETERaQ1FVRTJRaXh4UTBGQmNVTXNWVUZCVlN4clEwRkJhME1zVVVGQlVTeHJSRUZCYTBRc1dVRkJXU3g1UTBGQmVVTTdRVUZEYUhsV08wRkJRMEU3UVVGRFFTeHhRMEZCYjBNc1VVRkJVU3c0UTBGQk9FTXNZVUZCWVN3d1JFRkJNRVFzYlVKQlFXMUNMSE5FUVVGelJDdzBSVUZCTkVVc09FTkJRVGhETEdkQ1FVRm5RaXh6UWtGQmMwSXNNRUpCUVRCQ0xHOUVRVUZ2UkN4cFEwRkJhVU1zVlVGQlZTeEZRVUZGTEhsRFFVRjVReXg1UWtGQmVVSXNXVUZCV1N4RlFVRkZMSE5DUVVGelFpeHhSa0ZCY1VZc2FVUkJRV2xFTEhWRlFVRjFSU3huUWtGQlowSXNjVUpCUVhGQ0xHVkJRV1VzWjBKQlFXZENMRGhDUVVFNFFpeDVRa0ZCZVVJc05rSkJRVFpDTEVWQlFVVXNORUpCUVRSQ0xHdENRVUZyUWl3d1FrRkJNRUlzYjBSQlFXOUVMSEZEUVVGeFF5eFhRVUZYTEVWQlFVVXNhVU5CUVdsRExGZEJRVmNzUzBGQlN5dzJSVUZCTmtVc0swTkJRU3RETEhGRlFVRnhSU3c0UTBGQk9FTXNhVUpCUVdsQ0xHZENRVUZuUWl3d1FrRkJNRUlzT0VKQlFUaENMREpFUVVFeVJDeExRVUZMTERKRFFVRXlReXhMUVVGTExIRkVRVUZ4UkN3NFFrRkJPRUlzTUVSQlFUQkVMSGxDUVVGNVFpeHJRa0ZCYTBJc2JVSkJRVzFDTEd0Q1FVRnJRaXh0UWtGQmJVSXNTMEZCU3l3eVEwRkJNa01zUzBGQlN5eDNSRUZCZDBRc09FVkJRVGhGTEc5RVFVRnZSQ3d3UlVGQk1FVXNPRU5CUVRoRExHZENRVUZuUWl4elFrRkJjMElzTkVKQlFUUkNMR3RDUVVGclFpeFpRVUZaTEZkQlFWY3NTMEZCU3l3NFFrRkJPRUlzZVVKQlFYbENMREJDUVVFd1FpeHJSRUZCYTBRc2MwSkJRWE5DTEcxR1FVRnRSaXgzUTBGQmQwTXNPRVJCUVRoRUxHZENRVUZuUWl4dlFrRkJiMElzYzBKQlFYTkNMREJDUVVFd1FpeDVRa0ZCZVVJc2QwSkJRWGRDTERoQ1FVRTRRaXgxUTBGQmRVTXNlVUpCUVhsQ0xHOUVRVUZ2UkN3NFFrRkJPRUlzYjBKQlFXOUNMR2xDUVVGcFFpdzRRa0ZCT0VJc05rSkJRVFpDTERSQ1FVRTBRaXcyUWtGQk5rSXNNa0pCUVRKQ0xIbENRVUY1UWl4UlFVRlJMRVZCUVVVc05FSkJRVFJDTEd0Q1FVRnJRaXd3UWtGQk1FSXNjVVJCUVhGRUxIRkNRVUZ4UWl4MVFrRkJkVUlzYjBKQlFXOUNMREpDUVVFeVFpdzBRa0ZCTkVJc09FSkJRVGhDTEc5RlFVRnZSU3h6UTBGQmMwTXNORVJCUVRSRUxHZENRVUZuUWl4elFrRkJjMElzYTBKQlFXdENMSEZDUVVGeFFpdzRRa0ZCT0VJc2FVTkJRV2xETEhORFFVRnpReXgxUWtGQmRVSXNNa05CUVRKRExEUkRRVUUwUXl4dlFrRkJiMElzUjBGQlJ5dzRRa0ZCT0VJc01FSkJRVEJDTEhsQ1FVRjVRaXgzUTBGQmQwTXNNRUpCUVRCQ0xIVkNRVUYxUWl4cFEwRkJhVU1zY1VKQlFYRkNMRXRCUVVzc09FSkJRVGhDTEhORFFVRnpReXhOUVVGTkxFVkJRVVVzUzBGQlN5dzJRMEZCTmtNc1MwRkJTeXgxUWtGQmRVSXNORUpCUVRSQ0xESkNRVUV5UWl4bFFVRmxMREJDUVVFd1FpeExRVUZMTEcxRVFVRnRSQ3hyUlVGQmEwVXNNa05CUVRKRExIRkVRVUZ4UkN4MVJVRkJkVVVzWjBKQlFXZENMRzlDUVVGdlFpeG5RMEZCWjBNc1UwRkJVeXd5UlVGQk1rVXNhVU5CUVdsRExHOUVRVUZ2UkN3clEwRkJLME1zWlVGQlpTeHJSRUZCYTBRc1owSkJRV2RDTEhsRFFVRjVReXhuUWtGQlowSXNjME5CUVhORExHZENRVUZuUWl3NFEwRkJPRU1zWVVGQllTeFpRVUZaTEZGQlFWRXNaMEpCUVdkQ0xIZENRVUYzUWl4MVEwRkJkVU1zV1VGQldTeDNRa0ZCZDBJc2MwTkJRWE5ETEZsQlFWa3NVVUZCVVN4M1FrRkJkMElzT0VKQlFUaENMQ3REUVVFclF5eFpRVUZaTEZkQlFWY3NTMEZCU3l4WFFVRlhMR2RFUVVGblJDeFZRVUZWTEZkQlFWY3NlVUpCUVhsQ0xIRkNRVUZ4UWl4cFFrRkJhVUlzYjBKQlFXOUNMSEZDUVVGeFFpeGpRVUZqTEc5Q1FVRnZRaXh4UWtGQmNVSXNjMEpCUVhOQ0xEQkNRVUV3UWl4eFFrRkJjVUlzWlVGQlpTeGxRVUZsTEhkQ1FVRjNRaXhaUVVGWkxHTkJRV01zUzBGQlN5eDFRMEZCZFVNc1ZVRkJWU3d5UlVGQk1rVXNaMEpCUVdkQ0xHOUNRVUZ2UWl4VFFVRlRMQ3REUVVFclF5eG5Ra0ZCWjBJc1owUkJRV2RFTEdkQ1FVRm5RaXg1UTBGQmVVTXNaMEpCUVdkQ0xHOURRVUZ2UXl4blFrRkJaMElzZDBOQlFYZERMR2RDUVVGblFpeDNRMEZCZDBNc1owSkJRV2RDTEhkRFFVRjNReXhuUWtGQlowSXNjVU5CUVhGRExITkRRVUZ6UXl4WFFVRlhMSGxDUVVGNVFpeHhRa0ZCY1VJc2FVSkJRV2xDTEc5Q1FVRnZRaXh4UWtGQmNVSXNXVUZCV1N3d1FrRkJNRUlzY1VKQlFYRkNMR2RDUVVGblFpeDVRa0ZCZVVJc2NVSkJRWEZDTEdkQ1FVRm5RaXh4UWtGQmNVSXNjVUpCUVhGQ0xHZENRVUZuUWl4blFrRkJaMElzY1VKQlFYRkNMR0ZCUVdFc1lVRkJZU3d5UTBGQk1rTTdRVUZEZGpST08wRkJRMEU3UVVGRFFTeDFSRUZCYzBRc2FVSkJRV2xDTEN0RFFVRXJReXh4UlVGQmNVVXNWMEZCVnl4WFFVRlhMRmRCUVZjc1YwRkJWeXhYUVVGWExIZENRVUYzUWl4elFrRkJjMElzWTBGQll5dzRSRUZCT0VRc1QwRkJUeXhGUVVGRkxDdENRVUVyUWl4TlFVRk5MRVZCUVVVc01FSkJRVEJDTEdkRVFVRm5SQ3gxUWtGQmRVSXNlVU5CUVhsRExIRkNRVUZ4UWl4RlFVRkZMR2xEUVVGcFF5dzBSRUZCTkVRc1JVRkJSU3cwUWtGQk5FSXNkVUpCUVhWQ0xEWkNRVUUyUWl4NVJrRkJlVVlzVlVGQlZTdzRRa0ZCT0VJc05FTkJRVFJETEdsQ1FVRnBRaXgxUWtGQmRVSXNNRUpCUVRCQ0xHdERRVUZyUXl3NFFrRkJPRUlzTWtWQlFUSkZMRzFFUVVGdFJDeDVSVUZCZVVVc05FSkJRVFJDTERKQ1FVRXlRaXd5UTBGQk1rTXNVVUZCVVN4RlFVRkZMSE5DUVVGelFpeDFRa0ZCZFVJc2EwTkJRV3RETEcxRFFVRnRReXhwUkVGQmFVUXNOa05CUVRaRExIZENRVUYzUWl3NFJFRkJPRVFzT0VKQlFUaENMREpDUVVFeVFpeHpRMEZCYzBNc2MwTkJRWE5ETEhWRFFVRjFReXhwUTBGQmFVTXNNa0pCUVRKQ0xFVkJRVVVzY1VOQlFYRkRMRGhDUVVFNFFpeEZRVUZGTEhWQ1FVRjFRaXhwUTBGQmFVTXNjVUpCUVhGQ0xFVkJRVVVzTkVKQlFUUkNMSE5DUVVGelFpeHJRa0ZCYTBJc2IwSkJRVzlDTEN0RlFVRXJSU3gxUTBGQmRVTXNORU5CUVRSRExHOUNRVUZ2UWl3d1FrRkJNRUlzYlVOQlFXMURMRFJDUVVFMFFpeHhRMEZCY1VNc2VVSkJRWGxDTEd0RFFVRnJReXcwUWtGQk5FSXNjVU5CUVhGRExIVkRRVUYxUXl3clFrRkJLMElzTWtOQlFUSkRMR3REUVVGclF5eFZRVUZWTEVWQlFVVXNhME5CUVd0RExHMUNRVUZ0UWl4MVFrRkJkVUk3UVVGRGNuVkdPMEZCUTBFN1FVRkRRU3h4UWtGQmIwSXNhMEpCUVd0Q0xHdENRVUZyUWl4WlFVRlpMRmRCUVZjc1MwRkJTeXh4UWtGQmNVSXNVMEZCVXl4clFrRkJhMElzVTBGQlV5eFpRVUZaTEZkQlFWY3NTMEZCU3l3NFFrRkJPRUlzVTBGQlV5eHZRa0ZCYjBJc1UwRkJVeXhaUVVGWkxGZEJRVmNzUzBGQlN5eDNRa0ZCZDBJc1owSkJRV2RDTEZGQlFWRXNUVUZCVFN4VFFVRlRMRzFDUVVGdFFpeDVRa0ZCZVVJc2JVSkJRVzFDTERCQ1FVRXdRaXh2UWtGQmIwSXNjVU5CUVhGRExHOUNRVUZ2UWl4dlEwRkJiME1zYzBKQlFYTkNMSE5DUVVGelFpeDFRa0ZCZFVJc2RVSkJRWFZDTEZOQlFWTXNjMEpCUVhOQ0xHdENRVUZyUWl4VFFVRlRMRXRCUVVzc2EwSkJRV3RDTEZOQlFWTXNjMEpCUVhOQ0xITkNRVUZ6UWl4VFFVRlRMSE5DUVVGelFpeHJRa0ZCYTBJc1VVRkJVU3cyUWtGQk5rSXNjMEpCUVhOQ0xEaENRVUU0UWl3d1FrRkJNRUlzSzBKQlFTdENMSFZDUVVGMVFpd3lSRUZCTWtRc2RVSkJRWFZDTERKRVFVRXlSQ3hMUVVGTExIVkNRVUYxUWl4NVJFRkJlVVFzZFVKQlFYVkNMSE5FUVVGelJDeHpRa0ZCYzBJc2MwUkJRWE5FTEhOQ1FVRnpRaXh2UkVGQmIwUXNjMEpCUVhOQ0xEWkRRVUUyUXl4elFrRkJjMElzTUVOQlFUQkRMSE5DUVVGelFpeFRRVUZUTEZsQlFWa3NZVUZCWVN4TlFVRk5MRzFFUVVGdFJDeFRRVUZUTEhOQ1FVRnpRaXhUUVVGVExGbEJRVmtzVjBGQlZ5eExRVUZMTEdkRVFVRm5SQ3hUUVVGVExIRkNRVUZ4UWl4clFrRkJhMElzZFVKQlFYVkNMR3RDUVVGclFpeHZRa0ZCYjBJc1IwRkJSeXhqUVVGakxIZENRVUYzUWl4VFFVRlRMSFZDUVVGMVFpeDVRMEZCZVVNc2EwSkJRV3RDTEZOQlFWTXNkMEpCUVhkQ0xEQkNRVUV3UWl4M1FrRkJkMElzWjBOQlFXZERMR3REUVVGclF5dzBRa0ZCTkVJc1UwRkJVeXhaUVVGWkxGZEJRVmNzUzBGQlN5eGpRVUZqTEd0Q1FVRnJRaXhOUVVGTkxFdEJRVXNzYzBKQlFYTkNMRk5CUVZNc01rSkJRVEpDTERKQ1FVRXlRaXhUUVVGVExEQkNRVUV3UWl3eVFrRkJNa0lzTWtKQlFUSkNMRk5CUVZNc01rSkJRVEpDTERSQ1FVRTBRaXcwUWtGQk5FSXNkVUpCUVhWQ0xFbEJRVWtzZFVOQlFYVkRMR3RDUVVGclFpeGxRVUZsTEd0RFFVRnJReXh6UTBGQmMwTXNVMEZCVXl4WFFVRlhMRk5CUVZNc1UwRkJVeXd5UTBGQk1rTXNOa0pCUVRaQ0xHVkJRV1VzYzBKQlFYTkNMRmRCUVZjc1dVRkJXU3hKUVVGSkxFdEJRVXNzY1VOQlFYRkRMRlZCUVZVc2RVSkJRWFZDTEZOQlFWTTdRVUZEYkRaR08wRkJRMEU3UVVGRFFTeHhRMEZCYjBNc1VVRkJVU3hyUkVGQmEwUXNaVUZCWlN4blEwRkJaME1zY1VKQlFYRkNMSGxYUVVGNVZ5eHpRa0ZCYzBJc2NXcERRVUZ4YWtNc1owTkJRV2RETEdsTlFVRnBUU3h2UTBGQmIwTXNLME5CUVN0RExHOUVRVUZ2UkN4cFEwRkJhVU1zTkVOQlFUUkRMR2xEUVVGcFF5eFZRVUZWTEd0Q1FVRnJRaXh2UkVGQmIwUXNZVUZCWVN4aFFVRmhMRk5CUVZNc01FSkJRVEJDTEZsQlFWa3NTVUZCU1N4TlFVRk5MRkZCUVZFc1dVRkJXU3hWUVVGVkxEaENRVUU0UWl4eFEwRkJjVU1zVFVGQlRTeEZRVUZGTERCQ1FVRXdRaXd5UWtGQk1rSXNjVU5CUVhGRExFMUJRVTBzUlVGQlJTeDFRa0ZCZFVJc2MwSkJRWE5DTEhGRFFVRnhReXd5UWtGQk1rSXNSVUZCUlN3d1FrRkJNRUlzZDBKQlFYZENMSEZEUVVGeFF5dzJRa0ZCTmtJc1JVRkJSU3d3UWtGQk1FSXNNa0pCUVRKQ0xIRkRRVUZ4UXl3MlFrRkJOa0lzUlVGQlJTeDFRa0ZCZFVJc2QwSkJRWGRDTEhGRFFVRnhReXcyUWtGQk5rSXNSVUZCUlN3d1FrRkJNRUlzTWtKQlFUSkNMSEZEUVVGeFF5dzJRa0ZCTmtJc1JVRkJSU3gxUWtGQmRVSXNjVUpCUVhGQ0xIRkRRVUZ4UXl3d1FrRkJNRUlzUlVGQlJTd3dRa0ZCTUVJc01rSkJRVEpDTEhGRFFVRnhReXhuUTBGQlowTXNSVUZCUlN3d1FrRkJNRUlzZDBOQlFYZERMSE5EUVVGelF5eFhRVUZYTEZkQlFWY3NWMEZCVnl4eFEwRkJjVU1zTWtKQlFUSkNMSE5EUVVGelF5eHhSa0ZCY1VZc1NVRkJTU3dyUkVGQkswUXNVMEZCVXl4M1JFRkJkMFFzT0VKQlFUaENMRzFDUVVGdFFpd3lRa0ZCTWtJc1owTkJRV2RETEcxQ1FVRnRRaXgxUWtGQmRVSXNlVUpCUVhsQ0xIRkRRVUZ4UXl3NFFrRkJPRUlzY1VKQlFYRkNMSE5DUVVGelFpd3lRa0ZCTWtJc2EwSkJRV3RDTEhOQ1FVRnpRaXg1UTBGQmVVTXNTVUZCU1N3clFrRkJLMElzVTBGQlV5eDNSRUZCZDBRc09FSkJRVGhDTEcxQ1FVRnRRaXd5UWtGQk1rSXNLMEpCUVN0Q0xHMUNRVUZ0UWl4MVFrRkJkVUlzZVVKQlFYbENMRzFEUVVGdFF5dzRRa0ZCT0VJc2NVSkJRWEZDTEhOQ1FVRnpRaXd5UWtGQk1rSXNhMEpCUVd0Q0xIZENRVUYzUWl3NFFrRkJPRUlzTWtaQlFUSkdMREpDUVVFeVFpeDNSa0ZCZDBZc2RVSkJRWFZDTEd0R1FVRnJSaXc0UWtGQk9FSXNNa1pCUVRKR0xESkNRVUV5UWl4M1JrRkJkMFlzYTBKQlFXdENMSE5DUVVGelFpeHRRa0ZCYlVJc2RVSkJRWFZDTERaRVFVRTJSQ3h6UkVGQmMwUXNORUpCUVRSQ0xGZEJRVmNzVjBGQlZ5eFhRVUZYTEZkQlFWY3NWMEZCVnl4eFEwRkJjVU1zYTBKQlFXdENMRmxCUVZrc1lVRkJZU3hyUWtGQmEwSXNNRUpCUVRCQ0xHdEVRVUZyUkN4clFrRkJhMElzYzBOQlFYTkRMSEZDUVVGeFFpeHJRa0ZCYTBJc2NVWkJRWEZHTEVsQlFVa3NiMFJCUVc5RUxHZEVRVUZuUkN4VFFVRlRMRFJFUVVFMFJDdzRRa0ZCT0VJc2IwSkJRVzlDTERKQ1FVRXlRaXhuUTBGQlowTXNiMEpCUVc5Q0xIZENRVUYzUWl3d1FrRkJNRUlzY1VOQlFYRkRMQ3RDUVVFclFpeHhRa0ZCY1VJc2RVSkJRWFZDTERSQ1FVRTBRaXhyUWtGQmEwSXNlVUpCUVhsQ0xEaENRVUU0UWl4NVJVRkJlVVVzTWtKQlFUSkNMSE5GUVVGelJTeDNRa0ZCZDBJc1owVkJRV2RGTEN0Q1FVRXJRaXg1UlVGQmVVVXNORUpCUVRSQ0xITkZRVUZ6UlN3MlFrRkJOa0lzZFVKQlFYVkNMRkZCUVZFc09FTkJRVGhETEdWQlFXVXNiME5CUVc5RExFOUJRVThzZFVKQlFYVkNMSEZFUVVGeFJDeFhRVUZYTEhOQ1FVRnpRaXh6UkVGQmMwUXNkVU5CUVhWRExGRkJRVkVzZFVKQlFYVkNMRzlDUVVGdlFpeDFRa0ZCZFVJc2IwSkJRVzlDTEhOQ1FVRnpRaXhyUWtGQmEwSXNkVUpCUVhWQ0xHOUNRVUZ2UWl4WlFVRlpMSEZFUVVGeFJDeHhRMEZCY1VNc2EwSkJRV3RDTEhWQ1FVRjFRaXg1UWtGQmVVSXNjMEpCUVhOQ0xHMUNRVUZ0UWl4MVFrRkJkVUlzTmtSQlFUWkVMSE5FUVVGelJDeHJRMEZCYTBNc1YwRkJWeXhYUVVGWExGZEJRVmNzVjBGQlZ5eFhRVUZYTEZkQlFWY3NWMEZCVnl4WFFVRlhMRmRCUVZjc1YwRkJWeXhUUVVGVExGZEJRVmNzVjBGQlZ5eFhRVUZYTEZkQlFWY3NWMEZCVnl3MlFrRkJOa0lzZVVOQlFYbERMSFZEUVVGMVF5dzJRMEZCTmtNc01rTkJRVEpETEZOQlFWTXNiVUpCUVcxQ0xGbEJRVmtzU1VGQlNTeExRVUZMTEZGQlFWRXNXVUZCV1N4eFEwRkJjVU1zYjBKQlFXOUNMSGRDUVVGM1FpeHJRMEZCYTBNc2JVWkJRVzFHTEVsQlFVa3NkVU5CUVhWRExHMUNRVUZ0UWl4RlFVRkZMRk5CUVZNc2NVVkJRWEZGTEhkQ1FVRjNRaXhYUVVGWExFbEJRVWtzYTBKQlFXdENMRzlDUVVGdlFpeExRVUZMTEhWQ1FVRjFRaXhUUVVGVExITkNRVUZ6UWl4MVFrRkJkVUlzWTBGQll5eHJRa0ZCYTBJc1MwRkJTeXh6UWtGQmMwSXNZMEZCWXl4dlFrRkJiMElzUzBGQlN5d3dRa0ZCTUVJc01FSkJRVEJDTEdkRlFVRm5SU3g1UWtGQmVVSXNLMEpCUVN0Q0xFdEJRVXNzWTBGQll5eHRRa0ZCYlVJc2RVTkJRWFZETEdkRlFVRm5SU3g1UWtGQmVVSXNLMEpCUVN0Q0xFdEJRVXNzYlVOQlFXMURMR05CUVdNc1MwRkJTeXgzUWtGQmQwSXNaMEpCUVdkQ0xIRkNRVUZ4UWl3MFEwRkJORU1zYVVKQlFXbENMR2xDUVVGcFFpeHJRMEZCYTBNc2NVSkJRWEZDTERoQ1FVRTRRaXg1UWtGQmVVSXNNa0pCUVRKQ0xITkNRVUZ6UWl4eFFrRkJjVUlzSzBKQlFTdENMRFJGUVVFMFJTdzJRa0ZCTmtJc2RVSkJRWFZDTEVWQlFVVXNhMFJCUVd0RUxFdEJRVXNzYjBWQlFXOUZMRFJHUVVFMFJpeExRVUZMTERaRVFVRTJSQ3g1UlVGQmVVVXNTMEZCU3l3MlEwRkJOa01zTUVSQlFUQkVMRXRCUVVzc01rTkJRVEpETERCRVFVRXdSQ3hMUVVGTExITkZRVUZ6UlN4dFFrRkJiVUlzTkVKQlFUUkNMSEZDUVVGeFFpeHZRa0ZCYjBJc2VVSkJRWGxDTEd0Q1FVRnJRaXh2UWtGQmIwSXNkMEpCUVhkQ0xDdENRVUVyUWl3MFJVRkJORVVzTmtKQlFUWkNMSFZDUVVGMVFpeEZRVUZGTEd0RVFVRnJSQ3hMUVVGTExHOUZRVUZ2UlN3MFJrRkJORVlzUzBGQlN5dzJSRUZCTmtRc01FUkJRVEJFTEV0QlFVc3NOa05CUVRaRExEQkVRVUV3UkN4TFFVRkxMREpEUVVFeVF5d3dSRUZCTUVRc1MwRkJTeXd3UlVGQk1FVXNkMEpCUVhkQ0xEQkZRVUV3UlN4MVEwRkJkVU1zTkVaQlFUUkdMRFJEUVVFMFF5dzRSa0ZCT0VZc01FSkJRVEJDTERKRlFVRXlSU3c0UWtGQk9FSXNORVZCUVRSRkxESkNRVUV5UWl4NVJVRkJlVVVzY1VKQlFYRkNMR2xGUVVGcFJTdzBRa0ZCTkVJc05FVkJRVFJGTEhsQ1FVRjVRaXg1UlVGQmVVVXNkMEpCUVhkQ0xEQkZRVUV3UlN4clFrRkJhMElzYTBKQlFXdENMSE5DUVVGelFpeHRRa0ZCYlVJc2RVSkJRWFZDTERaRVFVRTJSQ3hMUVVGTExIRkNRVUZ4UWl4blJFRkJaMFFzYlVSQlFXMUVMRzlDUVVGdlFpdzJRa0ZCTmtJc05rSkJRVFpDTERSQ1FVRTBRaXcwUWtGQk5FSXNOa1JCUVRaRUxFdEJRVXNzU1VGQlNTeHRRa0ZCYlVJc01rTkJRVEpETEdsQ1FVRnBRaXhUUVVGVExHOUVRVUZ2UkN3clFrRkJLMElzYTBKQlFXdENPMEZCUTNoMVdqdEJRVU5CTzBGQlEwRXNjVU5CUVc5RExGRkJRVkVzYTBSQlFXdEVMR1ZCUVdVc09FSkJRVGhDTEd0Q1FVRnJRaXhYUVVGWExGZEJRVmNzVjBGQlZ5eDVRa0ZCZVVJc1YwRkJWeXhsUVVGbExHOUNRVUZ2UWl3MFEwRkJORU1zYVVKQlFXbENMRFJDUVVFMFFpeGpRVUZqTEV0QlFVc3NTMEZCU3l4alFVRmpMRzFDUVVGdFFpeHBRa0ZCYVVJc2FVSkJRV2xDTEdGQlFXRXNTMEZCU3l4alFVRmpMRXRCUVVzc2FVSkJRV2xDTEdWQlFXVXNVMEZCVXl3NFFrRkJPRUlzTkVaQlFUUkdMQ3RDUVVFclFpeHhSRUZCY1VRc2IwSkJRVzlDTEc5Q1FVRnZRaXhyUWtGQmEwSXNhME5CUVd0RExHOUNRVUZ2UWl4clFrRkJhMElzYVVOQlFXbERMRzFDUVVGdFFpeHJRa0ZCYTBJc2JVTkJRVzFETEhOQ1FVRnpRaXd5UWtGQk1rSXNhME5CUVd0RExEaENRVUU0UWl3NFFrRkJPRUlzTmtKQlFUWkNMRGhEUVVFNFF5dzRRMEZCT0VNc09FTkJRVGhETEdWQlFXVXNlVUpCUVhsQ0xIZENRVUYzUWl4UFFVRlBMSGRDUVVGM1FpeHhRMEZCY1VNc2RVTkJRWFZETERKQ1FVRXlRaXd5UWtGQk1rSXNjMEpCUVhOQ0xESkNRVUV5UWl4SFFVRkhMREpDUVVFeVFpeHpRa0ZCYzBJc2IwSkJRVzlDTEhGRFFVRnhReXgxUTBGQmRVTXNORVJCUVRSRUxHZEVRVUZuUkN4M1FrRkJkMElzVVVGQlVTeHpRa0ZCYzBJc01FTkJRVEJETEVkQlFVY3NNa0pCUVRKQ0xITkNRVUZ6UWl4dlFrRkJiMElzY1VOQlFYRkRMSFZEUVVGMVF5dzBSRUZCTkVRc0swSkJRU3RDTEhsRFFVRjVReXd5UTBGQk1rTXNLMEpCUVN0Q0xGRkJRVkVzZFVOQlFYVkRMRTFCUVUwc1RVRkJUU3hOUVVGTkxHbEVRVUZwUkN3eVFrRkJNa0lzWjBOQlFXZERMRFJDUVVFMFFpeFJRVUZSTERSQ1FVRTBRaXgxUWtGQmRVSXNUVUZCVFN4TlFVRk5MRXRCUVVzc2EwTkJRV3RETEUxQlFVMHNUVUZCVFN4TFFVRkxMRzlEUVVGdlF5eE5RVUZOTERKQ1FVRXlRaXhKUVVGSkxFdEJRVXNzTkVKQlFUUkNMRGhEUVVFNFF5eExRVUZMTEhsRlFVRjVSU3d3UTBGQk1FTXNaME5CUVdkRExHbERRVUZwUXl4elFrRkJjMElzYzBKQlFYTkNMSEZFUVVGeFJDeGhRVUZoTEhGRVFVRnhSQ3hoUVVGaExITkNRVUZ6UWl3eVFrRkJNa0lzTWtKQlFUSkNMSFZEUVVGMVF5eHhRMEZCY1VNc2IwSkJRVzlDTEdkRFFVRm5ReXcwUWtGQk5FSXNORUpCUVRSQ0xGTkJRVk1zVlVGQlZTeHBRa0ZCYVVJc1kwRkJZeXhWUVVGVkxHbENRVUZwUWl4alFVRmpMRzlDUVVGdlFpeGpRVUZqTEZWQlFWVXNNRUpCUVRCQ0xFMUJRVTBzWVVGQllTeHhSRUZCY1VRc1NVRkJTU3haUVVGWkxHMUZRVUZ0UlN3NFFrRkJPRUlzV1VGQldTeFpRVUZaTEc5RlFVRnZSU3c0UWtGQk9FSXNXVUZCV1N3d1EwRkJNRU1zTUVOQlFUQkRMRTlCUVU4c1ZVRkJWU3hwUTBGQmFVTXNhMEpCUVd0Q0xITkRRVUZ6UXl4alFVRmpMR0ZCUVdFc09FSkJRVGhDTEhOQ1FVRnpRaXcyUkVGQk5rUXNPRVJCUVRoRUxFOUJRVThzWTBGQll5eHJRa0ZCYTBJc2QwSkJRWGRDTEhkQ1FVRjNRaXdyUWtGQkswSXNhVUpCUVdsQ0xHMURRVUZ0UXl4clFrRkJhMElzYzBKQlFYTkNMRFpDUVVFMlFpeHpRa0ZCYzBJc0swSkJRU3RDTERCRFFVRXdReXc0UTBGQk9FTXNOa0pCUVRaQ0xEWkNRVUUyUWl4UFFVRlBMRlZCUVZVc2FVUkJRV2xFTEhkQ1FVRjNRaXg1UTBGQmVVTXNLME5CUVN0RExHZENRVUZuUWl3NFJFRkJPRVFzVjBGQlZ5eFhRVUZYTEhkQ1FVRjNRaXcyUkVGQk5rUXNkMEpCUVhkQ0xEWkVRVUUyUkN4dFEwRkJiVU1zYlVOQlFXMURMRTlCUVU4c1ZVRkJWU3hwUkVGQmFVUXNPRU5CUVRoRExGVkJRVlVzVlVGQlZTeHpSRUZCYzBRc1kwRkJZeXh6UkVGQmMwUXNZMEZCWXl4cFEwRkJhVU1zZDBOQlFYZERMR2xEUVVGcFF5eDNRMEZCZDBNc1dVRkJXU3hwUkVGQmFVUXNhVU5CUVdsRExIZEVRVUYzUkN3MlFrRkJOa0lzTWtKQlFUSkNMR2xFUVVGcFJDeHJSRUZCYTBRc01rSkJRVEpDTERKQ1FVRXlRaXhuUkVGQlowUXNhVVJCUVdsRUxHZERRVUZuUXl4VFFVRlRMRVZCUVVVc1owTkJRV2RETEZOQlFWTXNSVUZCUlN4cFEwRkJhVU1zV1VGQldTeEZRVUZGTzBGQlEzUnBUVHRCUVVOQk8wRkJRMEVzY1VOQlFXOURMRkZCUVZFc2EwUkJRV3RFTEdWQlFXVXNlVU5CUVhsRExGTkJRVk1zVTBGQlV5eGpRVUZqTERSQ1FVRTBRaXd5UWtGQk1rSXNVVUZCVVN3MlFrRkJOa0lzVDBGQlR5dzJRa0ZCTmtJc1dVRkJXU3gxUTBGQmRVTXNPRU5CUVRoRExGRkJRVkVzVjBGQlZ5eFhRVUZYTEZkQlFWY3NWMEZCVnl4WFFVRlhMREpDUVVFeVFpeHBRMEZCYVVNc1pVRkJaU3hwUWtGQmFVSXNaMEpCUVdkQ0xGbEJRVmtzV1VGQldTeFpRVUZaTEdOQlFXTXNaVUZCWlN4WlFVRlpMRmRCUVZjc1MwRkJTeXhoUVVGaExHdFZRVUZyVlN4elUwRkJjMU1zYjFoQlFXOVlMRFpSUVVFMlVTd3lWMEZCTWxjc01scEJRVEphTERaVlFVRTJWU3cwWlVGQk5HVXNLM0JDUVVFcmNFSTdRVUZEYm01Sk8wRkJRMEU3UVVGRFFTeHhRMEZCYjBNc1VVRkJVU3hyUkVGQmEwUXNaVUZCWlN3eVFrRkJNa0lzV1VGQldTeFpRVUZaTEZsQlFWa3NXVUZCV1N4WlFVRlpMR2RDUVVGblFpeHZRMEZCYjBNc2IwSkJRVzlDTEZOQlFWTXNVMEZCVXl4VFFVRlRMRk5CUVZNc1ZVRkJWU3hwUTBGQmFVTXNiVUpCUVcxQ0xGTkJRVk1zVTBGQlV5eFRRVUZUTEZOQlFWTXNZVUZCWVN4eFEwRkJjVU1zWVVGQllTeGhRVUZoTEdGQlFXRXNZVUZCWVN4aFFVRmhMR3REUVVGclF5d3lRa0ZCTWtJc2RVVkJRWFZGTERaQ1FVRTJRaXc0UkVGQk9FUXNkME5CUVhkRExFMUJRVTBzVDBGQlR5eFZRVUZWTEVWQlFVVXNUMEZCVHl4VlFVRlZMRVZCUVVVc1JVRkJSU3hWUVVGVkxIbERRVUY1UXl4aFFVRmhMR0ZCUVdFc1lVRkJZU3hoUVVGaExHbERRVUZwUXl4WFFVRlhMRmRCUVZjc2EwTkJRV3RETERKQ1FVRXlRaXgxUjBGQmRVY3NOa0pCUVRaQ0xITkNRVUZ6UWl3eVFrRkJNa0lzTWtKQlFUSkNMREJFUVVFd1JDd3dRa0ZCTUVJc2IwTkJRVzlETEVsQlFVa3NNRVJCUVRCRUxEQkVRVUV3UkN4WlFVRlpMRk5CUVZNc2FVTkJRV2xETEhkQ1FVRjNRaXh4UkVGQmNVUXNhME5CUVd0RExESkNRVUV5UWl4MVJVRkJkVVVzTmtKQlFUWkNMRGhFUVVFNFJDeHJRa0ZCYTBJc1QwRkJUeXhQUVVGUExGTkJRVk1zWTBGQll5eHJSRUZCYTBRc2IwTkJRVzlETEcxRFFVRnRReXhUUVVGVExGTkJRVk1zYzBKQlFYTkNMRlZCUVZVc1UwRkJVeXh6UWtGQmMwSXNVMEZCVXl4VFFVRlRMR2xIUVVGcFJ5eGhRVUZoTERaQ1FVRTJRaXcwUWtGQk5FSXNjVVJCUVhGRUxHdERRVUZyUXl3eVFrRkJNa0lzZFVkQlFYVkhMREJEUVVFd1F5eFpRVUZaTEhOQ1FVRnpRaXd5UWtGQk1rSXNNa0pCUVRKQ0xEQkVRVUV3UkN4NVFrRkJlVUlzWTBGQll5eHpRMEZCYzBNc1pVRkJaU3hsUVVGbExFMUJRVTBzUjBGQlJ5eHZRMEZCYjBNc01rUkJRVEpFTEc5Q1FVRnZRaXhQUVVGUExIRkNRVUZ4UWl4clFrRkJhMElzV1VGQldTeGhRVUZoTEUxQlFVMHNUVUZCVFN4SFFVRkhMRzFDUVVGdFFpdzJRa0ZCTmtJc05rSkJRVFpDTERKRVFVRXlSQ3hUUVVGVExHOUNRVUZ2UWl4cFEwRkJhVU1zYTBKQlFXdENMRTFCUVUwc1IwRkJSeXhQUVVGUExEQkVRVUV3UkN4eFFrRkJjVUlzYTBKQlFXdENMRTFCUVUwc1IwRkJSeXhoUVVGaExESkVRVUV5UkN4VFFVRlRMR2RDUVVGblFpeFBRVUZQTERKQ1FVRXlRaXhUUVVGVExIZENRVUYzUWl4WFFVRlhMREJFUVVFd1JDeFRRVUZUTEZsQlFWa3NZMEZCWXl4blFrRkJaMElzYzBKQlFYTkNMRTlCUVU4c2IwSkJRVzlDTEhWQ1FVRjFRaXhYUVVGWExHMUNRVUZ0UWl4blFrRkJaMElzWTBGQll5eFJRVUZSTEZsQlFWa3NNRUpCUVRCQ0xGZEJRVmNzVlVGQlZTd3dSVUZCTUVVc0swSkJRU3RDTEdOQlFXTXNVMEZCVXl4WlFVRlpMRWxCUVVrc1MwRkJTeXcwUWtGQk5FSXNVMEZCVXl4aFFVRmhMSGxDUVVGNVFpeHBRMEZCYVVNc1owSkJRV2RDTEdOQlFXTXNXVUZCV1N4VFFVRlRMRk5CUVZNc1pVRkJaU3hSUVVGUkxFMUJRVTBzVjBGQlZ5eHRRMEZCYlVNc2EwSkJRV3RDTEZGQlFWRXNZVUZCWVN4clFrRkJhMElzYTBOQlFXdERMREpDUVVFeVFqdEJRVU4wZGtrN1FVRkRRVHRCUVVOQkxEQkNRVUY1UWl4elFrRkJjMElzT0VKQlFUaENMSE5DUVVGelFpeHZRMEZCYjBNc2QwSkJRWGRDTEdkRFFVRm5ReXhuUTBGQlowTXNaME5CUVdkRExGTkJRVk1zVVVGQlVTeFBRVUZQTEdWQlFXVXNjVUpCUVhGQ0xFdEJRVXNzUlVGQlJTeHpRMEZCYzBNc2MwSkJRWE5DTERoQ1FVRTRRaXh6UWtGQmMwSXNiME5CUVc5RExIZENRVUYzUWl4blEwRkJaME1zWjBOQlFXZERMR2REUVVGblF5eFRRVUZUTEhGQ1FVRnhRaXhMUVVGTExFVkJRVVVzTWtOQlFUSkRMSFZEUVVGMVF5eFZRVUZWTEU5QlFVOHNaVUZCWlN4clEwRkJhME1zWjBKQlFXZENMR3REUVVGclF5eG5Ra0ZCWjBJc2EwTkJRV3RETEdsQ1FVRnBRaXh0UTBGQmJVTXNhMEpCUVd0Q0xIRkNRVUZ4UWl4clFrRkJhMElzZFVOQlFYVkRMRzlEUVVGdlF5eFZRVUZWTEd0Q1FVRnJRaXhUUVVGVExHZEZRVUZuUlN4dFFrRkJiVUlzYlVKQlFXMUNMR2RGUVVGblJTeHBRa0ZCYVVJc1UwRkJVeXhSUVVGUkxEaENRVUU0UWl4M1FrRkJkMElzU1VGQlNTd3dRa0ZCTUVJc2IwSkJRVzlDTEVsQlFVa3NORUpCUVRSQ0xHbENRVUZwUWl3MlFrRkJOa0lzZFVKQlFYVkNMRk5CUVZNc1ZVRkJWU3h6UWtGQmMwSXNkMEpCUVhkQ0xHZERRVUZuUXl4cFEwRkJhVU1zYlVOQlFXMURMRk5CUVZNc1YwRkJWeXhOUVVGTkxFVkJRVVVzYVVOQlFXbERMRmxCUVZrc1dVRkJXU3haUVVGWkxGbEJRVmtzWlVGQlpTeHJRMEZCYTBNc2EwSkJRV3RDTEU5QlFVOHNVMEZCVXl4elEwRkJjME1zYlVSQlFXMUVMRlZCUVZVc2QwSkJRWGRDTEcxRFFVRnRReXh2UTBGQmIwTXNiVUpCUVcxQ0xHVkJRV1VzVlVGQlZTeDNRa0ZCZDBJc2IwSkJRVzlDTEdWQlFXVXNWVUZCVlN4UFFVRlBMRFJEUVVFMFF5eFJRVUZSTERoQ1FVRTRRaXhwUTBGQmFVTXNkME5CUVhkRExITkRRVUZ6UXl3eVFrRkJNa0lzYTBKQlFXdENMRk5CUVZNc05rTkJRVFpETEZkQlFWY3NaMEpCUVdkQ0xESkNRVUV5UWl4WlFVRlpMSE5FUVVGelJDeG5Ra0ZCWjBJc2FVTkJRV2xETEd0Q1FVRnJRaXhyUTBGQmEwTXNWMEZCVnl4aFFVRmhMR1ZCUVdVc1pVRkJaU3hoUVVGaExHVkJRV1VzWlVGQlpTeHBRa0ZCYVVJc1UwRkJVeXc0UTBGQk9FTXNiVU5CUVcxRExHMUNRVUZ0UWl4eFEwRkJjVU1zVTBGQlV5eHRSRUZCYlVRc1UwRkJVeXh0UTBGQmJVTXNaMEpCUVdkQ0xEWkNRVUUyUWl3eVEwRkJNa01zYlVOQlFXMURMRzlDUVVGdlFpeFhRVUZYTEd0Q1FVRnJRaXhsUVVGbExHVkJRV1VzYVVKQlFXbENMRzlDUVVGdlFpeEhRVUZITEdOQlFXTXNORU5CUVRSRExHZERRVUZuUXl3clFrRkJLMElzVlVGQlZTeExRVUZMTERKRFFVRXlReXhUUVVGVExHZEVRVUZuUkN4blEwRkJaME1zVVVGQlVTeEZRVUZGTEdkRFFVRm5ReXhYUVVGWExFVkJRVVVzWjBOQlFXZERMRlZCUVZVc1JVRkJSU3huUTBGQlowTXNWMEZCVnl4RlFVRkZMR2REUVVGblF5eFhRVUZYTEVWQlFVVXNaME5CUVdkRExGZEJRVmNzUlVGQlJTeG5RMEZCWjBNc1kwRkJZeXhGUVVGRkxHZERRVUZuUXl4alFVRmpMRVZCUVVVc1owTkJRV2RETEdWQlFXVXNSVUZCUlN4cFEwRkJhVU1zTUVKQlFUQkNMRVZCUVVVc2QwSkJRWGRDTEhGRVFVRnhSQ3gzUTBGQmQwTXNiVU5CUVcxRExFOUJRVThzYlVOQlFXMURMRlZCUVZVc2JVSkJRVzFDTEdkQ1FVRm5RaXhYUVVGWExHMURRVUZ0UXl3NFEwRkJPRU1zUzBGQlN5eG5SRUZCWjBRc1UwRkJVeXgzUTBGQmQwTXNlVUpCUVhsQ0xHdERRVUZyUXl3d1EwRkJNRU1zZVVOQlFYbERMRk5CUVZNc2QwTkJRWGRETEN0RFFVRXJReXhuUWtGQlowSXNNRVJCUVRCRUxIZERRVUYzUXl4M1EwRkJkME1zYlVSQlFXMUVMSGREUVVGM1F5eDNRMEZCZDBNc2JVTkJRVzFETEcxQ1FVRnRRaXh4UTBGQmNVTXNVMEZCVXl4elEwRkJjME1zVTBGQlV5d3JRMEZCSzBNc1owSkJRV2RDTERKRVFVRXlSQ3cyUTBGQk5rTXNhMFJCUVd0RUxHZENRVUZuUWl3MlJFRkJOa1FzTUVSQlFUQkVMSEZEUVVGeFF5eHJSRUZCYTBRc1owSkJRV2RDTEN0RVFVRXJSQ3hyUkVGQmEwUXNaMEpCUVdkQ0xHbEZRVUZwUlN4M1JFRkJkMFFzYjBOQlFXOURMR3REUVVGclF5eHhSRUZCY1VRc2EwUkJRV3RFTEdkQ1FVRm5RaXhwUlVGQmFVVXNNRVJCUVRCRUxITkRRVUZ6UXl4clJFRkJhMFFzWlVGQlpTeHJSVUZCYTBVc05rTkJRVFpETEhORFFVRnpReXhKUVVGSkxEUkNRVUUwUWl4VFFVRlRMSFZEUVVGMVF5eFRRVUZUTEhkRFFVRjNReXd5UTBGQk1rTXNiVUpCUVcxQ0xESkNRVUV5UWl3MFFrRkJORUlzUlVGQlJTeHZRMEZCYjBNc1UwRkJVeXh4UkVGQmNVUXNiMFJCUVc5RUxIVkRRVUYxUXl3NFEwRkJPRU1zVTBGQlV5eHJSRUZCYTBRc1owTkJRV2RETEcxRVFVRnRSQ3h6UTBGQmMwTXNTMEZCU3l4RlFVRkZMRzlEUVVGdlF5eFRRVUZUTERoRFFVRTRReXh6UkVGQmMwUXNlVU5CUVhsRExGTkJRVk1zTWtOQlFUSkRMSE5FUVVGelJDdzJRMEZCTmtNc1UwRkJVeXgxUTBGQmRVTXNVMEZCVXl4blFrRkJaMElzZDBKQlFYZENMRzFFUVVGdFJDd3JRMEZCSzBNc1owSkJRV2RDTEcxRVFVRnRSQ3d5UWtGQk1rSXNOa05CUVRaRExHdEVRVUZyUkN4blFrRkJaMElzTmtOQlFUWkRMREpDUVVFeVFpdzJRMEZCTmtNc2VVTkJRWGxETERKQ1FVRXlRaXd5UTBGQk1rTXNNa0pCUVRKQ0xEWkRRVUUyUXl3NFEwRkJPRU1zVTBGQlV5dzBRMEZCTkVNc01FTkJRVEJETERaRFFVRTJReXhUUVVGVExEUkRRVUUwUXl4M1EwRkJkME1zYlVOQlFXMURMSGREUVVGM1F5eFpRVUZaTEcxQ1FVRnRRaXh0UkVGQmJVUXNVMEZCVXl4TFFVRkxMQ3RDUVVFclFpeDFRMEZCZFVNc2QwUkJRWGRFTERCRVFVRXdSQ3c0UTBGQk9FTXNOa0pCUVRaQ0xHdENRVUZyUWl4RlFVRkZMRk5CUVZNc1MwRkJTeXd5UTBGQk1rTXNlVU5CUVhsRExIbERRVUY1UXl3d1EwRkJNRU1zVTBGQlV5eHpRMEZCYzBNc2VVTkJRWGxETEhWRFFVRjFReXhUUVVGVExITkRRVUZ6UXl4clEwRkJhME1zYlVOQlFXMURMREJEUVVFd1F5eHRRa0ZCYlVJc2NVSkJRWEZDTEZOQlFWTXNTMEZCU3l3clFrRkJLMElzZDBSQlFYZEVMREJFUVVFd1JDdzRRMEZCT0VNc05rSkJRVFpDTEd0Q1FVRnJRaXhGUVVGRkxGTkJRVk1zUzBGQlN5d3dRMEZCTUVNc2NVTkJRWEZETEZOQlFWTXNkMEpCUVhkQ0xHMURRVUZ0UXl3clEwRkJLME1zWjBKQlFXZENMRzFEUVVGdFF5d3lRa0ZCTWtJc2JVTkJRVzFETEc5RFFVRnZReXd5UWtGQk1rSXNiVU5CUVcxRExHOURRVUZ2UXl4VFFVRlRMRFpEUVVFMlF5eGxRVUZsTEhkQ1FVRjNRaXd5UTBGQk1rTXNLME5CUVN0RExHZENRVUZuUWl3eVEwRkJNa01zVTBGQlV5eDNRMEZCZDBNc2QwTkJRWGRETEhkRFFVRjNReXgzUTBGQmQwTXNkME5CUVhkRExIbERRVUY1UXl4NVEwRkJlVU1zZVVOQlFYbERMRFJEUVVFMFF5eGxRVUZsTEhkQ1FVRjNRaXd5UTBGQk1rTXNLME5CUVN0RExHZENRVUZuUWl3eVEwRkJNa01zTWtKQlFUSkNMREpEUVVFeVF5eHpRMEZCYzBNc2FVTkJRV2xETEZOQlFWTXNaMEpCUVdkQ0xDdERRVUVyUXl4blFrRkJaMElzTUVSQlFUQkVMRmRCUVZjc2QwSkJRWGRDTERSRFFVRTBReXdyUTBGQkswTXNaMEpCUVdkQ0xEUkRRVUUwUXl3eVFrRkJNa0lzTkVOQlFUUkRMSGxEUVVGNVF5d3lRa0ZCTWtJc01rTkJRVEpETERKQ1FVRXlRaXcwUTBGQk5FTXNaMFJCUVdkRUxGTkJRVk1zZVVOQlFYbERMQ3REUVVFclF5eG5Ra0ZCWjBJc01FUkJRVEJFTEhkRFFVRjNReXgzUTBGQmQwTXNPRU5CUVRoRExESkNRVUV5UWl4elJFRkJjMFFzTmtOQlFUWkRMSGRDUVVGM1FpeDVRMEZCZVVNc0swTkJRU3RETEdkQ1FVRm5RaXd3UkVGQk1FUXNNa0pCUVRKQ0xEaENRVUU0UWl3eVFrRkJNa0lzT0VKQlFUaENMSE5EUVVGelF5eHpRMEZCYzBNc2JVSkJRVzFDTEdsQ1FVRnBRaXhUUVVGVExFZEJRVWM3UVVGRGFuRlpPMEZCUTBFN1FVRkRRU3gzUWtGQmRVSXNjMEpCUVhOQ0xEaENRVUU0UWl4elFrRkJjMElzYjBOQlFXOURMSE5DUVVGelFpdzRRa0ZCT0VJc2QwSkJRWGRDTEdkRFFVRm5ReXhuUTBGQlowTXNaME5CUVdkRExGTkJRVk1zVVVGQlVTeFBRVUZQTEdWQlFXVXNjVUpCUVhGQ0xFdEJRVXNzUlVGQlJTeHpRMEZCYzBNc2MwSkJRWE5DTERoQ1FVRTRRaXh6UWtGQmMwSXNiME5CUVc5RExITkNRVUZ6UWl3NFFrRkJPRUlzZDBKQlFYZENMR2REUVVGblF5eG5RMEZCWjBNc1owTkJRV2RETEhGQ1FVRnhRaXhMUVVGTExFVkJRVVVzTWtOQlFUSkRMSFZEUVVGMVF5eFZRVUZWTEU5QlFVOHNaVUZCWlN4clEwRkJhME1zWjBKQlFXZENMR3REUVVGclF5eG5Ra0ZCWjBJc2EwTkJRV3RETEdsQ1FVRnBRaXhwUTBGQmFVTXNXVUZCV1N4clEwRkJhME1zYTBKQlFXdENMSEZDUVVGeFFpeHJRa0ZCYTBJc2RVTkJRWFZETEc5RFFVRnZReXhWUVVGVkxHdENRVUZyUWl4VFFVRlRMR2RGUVVGblJTeHRRa0ZCYlVJc2JVSkJRVzFDTEdkRlFVRm5SU3hwUWtGQmFVSXNVMEZCVXl4UlFVRlJMRGhDUVVFNFFpeDNRa0ZCZDBJc1NVRkJTU3d3UWtGQk1FSXNiMEpCUVc5Q0xFbEJRVWtzTkVKQlFUUkNMR2xDUVVGcFFpdzJRa0ZCTmtJc2RVSkJRWFZDTEZOQlFWTXNWVUZCVlN4elFrRkJjMElzZDBKQlFYZENMR2REUVVGblF5eHBRMEZCYVVNc2JVTkJRVzFETEZOQlFWTXNWMEZCVnl4TlFVRk5MRVZCUVVVc2FVTkJRV2xETEZsQlFWa3NXVUZCV1N4WlFVRlpMRmxCUVZrc1pVRkJaU3hyUTBGQmEwTXNhMEpCUVd0Q0xFOUJRVThzVTBGQlV5eHpRMEZCYzBNc2JVUkJRVzFFTEZWQlFWVXNkMEpCUVhkQ0xHMURRVUZ0UXl4dlEwRkJiME1zYlVKQlFXMUNMR1ZCUVdVc1ZVRkJWU3gzUWtGQmQwSXNiMEpCUVc5Q0xHVkJRV1VzVlVGQlZTeFBRVUZQTERSRFFVRTBReXhSUVVGUkxHbERRVUZwUXl4cFEwRkJhVU1zT0VKQlFUaENMSGREUVVGM1F5eHpRMEZCYzBNc1MwRkJTeXgzUTBGQmQwTXNjME5CUVhORExESkNRVUV5UWl4clFrRkJhMElzVTBGQlV5dzJRMEZCTmtNc1YwRkJWeXhuUWtGQlowSXNNa0pCUVRKQ0xGbEJRVmtzYzBSQlFYTkVMR2RDUVVGblFpeHBRMEZCYVVNc2EwSkJRV3RDTEd0RFFVRnJReXhYUVVGWExHRkJRV0VzWlVGQlpTeGxRVUZsTEdGQlFXRXNaVUZCWlN4bFFVRmxMR2xDUVVGcFFpeFRRVUZUTERoRFFVRTRReXh0UTBGQmJVTXNiVUpCUVcxQ0xIRkRRVUZ4UXl4VFFVRlRMSFZFUVVGMVJDeFRRVUZUTEcxRFFVRnRReXhuUWtGQlowSXNOa0pCUVRaQ0xIbERRVUY1UXl4dFEwRkJiVU1zYjBKQlFXOUNMRmRCUVZjc2EwSkJRV3RDTEdWQlFXVXNaVUZCWlN4cFFrRkJhVUlzYjBKQlFXOUNMRWRCUVVjc1kwRkJZeXc0UTBGQk9FTXNaME5CUVdkRExDdENRVUVyUWl4VlFVRlZMRXRCUVVzc05rTkJRVFpETEZOQlFWTXNhMFJCUVd0RUxHZERRVUZuUXl4UlFVRlJMRVZCUVVVc1owTkJRV2RETEZkQlFWY3NSVUZCUlN4blEwRkJaME1zVlVGQlZTeEZRVUZGTEdkRFFVRm5ReXhYUVVGWExFVkJRVVVzWjBOQlFXZERMRmRCUVZjc1JVRkJSU3huUTBGQlowTXNWMEZCVnl4RlFVRkZMR2REUVVGblF5eGpRVUZqTEVWQlFVVXNaME5CUVdkRExHTkJRV01zUlVGQlJTeG5RMEZCWjBNc1pVRkJaU3hGUVVGRkxHbERRVUZwUXl3d1FrRkJNRUlzUlVGQlJTeDNRa0ZCZDBJc05rUkJRVFpFTEhkRFFVRjNReXh0UTBGQmJVTXNUMEZCVHl4dFEwRkJiVU1zVlVGQlZTeHRRa0ZCYlVJc1owSkJRV2RDTEZkQlFWY3NiVU5CUVcxRExESkRRVUV5UXl4TFFVRkxMRFpEUVVFMlF5eFRRVUZUTEhkRFFVRjNReXg1UWtGQmVVSXNhME5CUVd0RExEQkRRVUV3UXl4NVEwRkJlVU1zVTBGQlV5eDNRMEZCZDBNc0swTkJRU3RETEdkQ1FVRm5RaXd3UkVGQk1FUXNkME5CUVhkRExIZERRVUYzUXl4dFJFRkJiVVFzZDBOQlFYZERMSGREUVVGM1F5eHRRMEZCYlVNc2JVSkJRVzFDTEhGRFFVRnhReXhUUVVGVExITkRRVUZ6UXl4VFFVRlRMQ3REUVVFclF5eG5Ra0ZCWjBJc01rUkJRVEpFTERaRFFVRTJReXhyUkVGQmEwUXNaMEpCUVdkQ0xEWkVRVUUyUkN3d1JFRkJNRVFzY1VOQlFYRkRMR3RFUVVGclJDeG5Ra0ZCWjBJc0swUkJRU3RFTEd0RVFVRnJSQ3huUWtGQlowSXNhVVZCUVdsRkxIZEVRVUYzUkN4dlEwRkJiME1zYTBOQlFXdERMSEZFUVVGeFJDeHJSRUZCYTBRc1owSkJRV2RDTEdsRlFVRnBSU3d3UkVGQk1FUXNjME5CUVhORExHdEVRVUZyUkN4bFFVRmxMR3RGUVVGclJTdzJRMEZCTmtNc2MwTkJRWE5ETEVsQlFVa3NORUpCUVRSQ0xGTkJRVk1zZFVOQlFYVkRMRk5CUVZNc2QwTkJRWGRETERKRFFVRXlReXh0UWtGQmJVSXNNa0pCUVRKQ0xEUkNRVUUwUWl4RlFVRkZMRzlEUVVGdlF5eFRRVUZUTEhGRVFVRnhSQ3h2UkVGQmIwUXNkVU5CUVhWRExEUkRRVUUwUXl4VFFVRlRMR3RFUVVGclJDeG5RMEZCWjBNc2JVUkJRVzFFTEhORFFVRnpReXhMUVVGTExFVkJRVVVzYjBOQlFXOURMRk5CUVZNc09FTkJRVGhETEhORVFVRnpSQ3g1UTBGQmVVTXNVMEZCVXl3eVEwRkJNa01zYzBSQlFYTkVMRFpEUVVFMlF5eFRRVUZUTEhWRFFVRjFReXhUUVVGVExHZENRVUZuUWl4M1FrRkJkMElzYlVSQlFXMUVMQ3REUVVFclF5eG5Ra0ZCWjBJc2JVUkJRVzFFTERKQ1FVRXlRaXcyUTBGQk5rTXNhMFJCUVd0RUxHZENRVUZuUWl3MlEwRkJOa01zTWtKQlFUSkNMRFpEUVVFMlF5eDVRMEZCZVVNc01rSkJRVEpDTERKRFFVRXlReXd5UWtGQk1rSXNOa05CUVRaRExEaERRVUU0UXl4VFFVRlRMRFJEUVVFMFF5d3dRMEZCTUVNc05rTkJRVFpETEZOQlFWTXNORU5CUVRSRExIZERRVUYzUXl4dFEwRkJiVU1zZDBOQlFYZERMRmxCUVZrc2JVSkJRVzFDTEcxRVFVRnRSQ3hUUVVGVExFdEJRVXNzSzBKQlFTdENMSFZEUVVGMVF5eDNSRUZCZDBRc01FUkJRVEJFTERoRFFVRTRReXcyUWtGQk5rSXNVVUZCVVN4RlFVRkZMRFJDUVVFMFFpd3dRa0ZCTUVJc2FVSkJRV2xDTEZOQlFWTXNTMEZCU3l3clFrRkJLMElzTWtOQlFUSkRMREpEUVVFeVF5d3lRMEZCTWtNc2VVTkJRWGxETERKQ1FVRXlRaXd5UWtGQk1rSXNNa0pCUVRKQ0xESkNRVUV5UWl3MFFrRkJORUlzTWtKQlFUSkNMRk5CUVZNc1MwRkJTeXcwUTBGQk5FTXNlVU5CUVhsRExIbERRVUY1UXl3d1EwRkJNRU1zVTBGQlV5eHpRMEZCYzBNc2VVTkJRWGxETEhWRFFVRjFReXhUUVVGVExITkRRVUZ6UXl4clEwRkJhME1zYlVOQlFXMURMREJEUVVFd1F5eHRRa0ZCYlVJc2NVSkJRWEZDTEZOQlFWTXNTMEZCU3l3clFrRkJLMElzZDBSQlFYZEVMREJFUVVFd1JDdzRRMEZCT0VNc05rSkJRVFpDTEd0Q1FVRnJRaXhGUVVGRkxGTkJRVk1zUzBGQlN5d3JRa0ZCSzBJc2FVSkJRV2xDTEhWRFFVRjFReXcwUWtGQk5FSXNkVWRCUVhWSExGTkJRVk1zUzBGQlN5d3lRMEZCTWtNc2NVTkJRWEZETEZOQlFWTXNkMEpCUVhkQ0xHMURRVUZ0UXl3clEwRkJLME1zWjBKQlFXZENMRzFEUVVGdFF5d3lRa0ZCTWtJc2JVTkJRVzFETEc5RFFVRnZReXd5UWtGQk1rSXNiVU5CUVcxRExHOURRVUZ2UXl4VFFVRlRMRFpEUVVFMlF5eGxRVUZsTEhkQ1FVRjNRaXd5UTBGQk1rTXNLME5CUVN0RExHZENRVUZuUWl3eVEwRkJNa01zVTBGQlV5eDNRMEZCZDBNc2QwTkJRWGRETEhkRFFVRjNReXgzUTBGQmQwTXNkME5CUVhkRExIbERRVUY1UXl4NVEwRkJlVU1zZVVOQlFYbERMRFJEUVVFMFF5eGxRVUZsTEhWRFFVRjFReXh0UkVGQmJVUXNVVUZCVVN4WFFVRlhMR2xEUVVGcFF5eFRRVUZUTEdkQ1FVRm5RaXdyUTBGQkswTXNaMEpCUVdkQ0xEQkVRVUV3UkN4WFFVRlhMSGRDUVVGM1FpdzBRMEZCTkVNc0swTkJRU3RETEdkQ1FVRm5RaXcwUTBGQk5FTXNNa0pCUVRKQ0xEUkRRVUUwUXl4NVEwRkJlVU1zTWtKQlFUSkNMREpEUVVFeVF5eExRVUZMTERKQ1FVRXlRaXhqUVVGakxHbEVRVUZwUkN4cFJFRkJhVVFzYTBSQlFXdEVMREpDUVVFeVFpdzBRMEZCTkVNc1owUkJRV2RFTEZOQlFWTXNlVU5CUVhsRExDdERRVUVyUXl4blFrRkJaMElzTUVSQlFUQkVMSGREUVVGM1F5eDNRMEZCZDBNc09FTkJRVGhETERKQ1FVRXlRaXh6UkVGQmMwUXNOa05CUVRaRExIZENRVUYzUWl4NVEwRkJlVU1zSzBOQlFTdERMR2RDUVVGblFpd3dSRUZCTUVRc01rSkJRVEpDTERoQ1FVRTRRaXd5UWtGQk1rSXNPRUpCUVRoQ0xITkRRVUZ6UXl4elEwRkJjME1zYlVKQlFXMUNMR2xDUVVGcFFpeFRRVUZUTEVkQlFVY3NSMEZCUnl3clFrRkJLMElzYjBSQlFXOUVMRk5CUVZNc01FVkJRVEJGTEZOQlFWTXNjMFZCUVhORkxGTkJRVk1zTWtSQlFUSkVMRGhDUVVFNFFpeDFRa0ZCZFVJc1JVRkJSU3g1UTBGQmVVTXNPRUpCUVRoQ0xITkNRVUZ6UWl4RlFVRkZMSGxGUVVGNVJTeHRRa0ZCYlVJc2NVSkJRWEZDTEZOQlFWTXNiVXhCUVcxTUxHMUNRVUZ0UWl4dFJFRkJiVVFzVTBGQlV5d3dSa0ZCTUVZc2JVSkJRVzFDTERCQ1FVRXdRaXhUUVVGVExIZEdRVUYzUml3MFFrRkJORUlzTmtKQlFUWkNMRk5CUVZNc2QwWkJRWGRHTERSQ1FVRTBRaXhyUTBGQmEwTXNVMEZCVXl4eFJVRkJjVVVzYlVKQlFXMUNMREpEUVVFeVF5eFRRVUZUTERaS1FVRTJTaXh0UWtGQmJVSXNNa2xCUVRKSkxGTkJRVk1zY1VWQlFYRkZMRzFDUVVGdFFpd3lSRUZCTWtRc1UwRkJVeXgxUmtGQmRVWXNOa0pCUVRaQ0xGbEJRVmtzUlVGQlJTd3dRa0ZCTUVJc09FTkJRVGhETERoRFFVRTRReXhsUVVGbExIRkNRVUZ4UWl4VFFVRlRMSFZHUVVGMVJpdzJRa0ZCTmtJc1dVRkJXU3hGUVVGRkxEQkNRVUV3UWl3NFEwRkJPRU1zYzBKQlFYTkNMRk5CUVZNc2EwbEJRV3RKTEhWRFFVRjFReXh0UWtGQmJVSXNNa05CUVRKRExITkRRVUZ6UXl3eVEwRkJNa01zYlVKQlFXMUNMRzFDUVVGdFFpeHhRMEZCY1VNc1UwRkJVeXh0UWtGQmJVSXNiVUpCUVcxQ0xIRkRRVUZ4UXl4VFFVRlRMSGxGUVVGNVJTeHBSRUZCYVVRc2VVTkJRWGxETEhsRlFVRjVSU3c0UTBGQk9FTXNkVU5CUVhWRExIVkRRVUYxUXl4MVEwRkJkVU1zZFVOQlFYVkRMSFZEUVVGMVF5dzBRa0ZCTkVJc2RVaEJRWFZJTEZOQlFWTXNkVU5CUVhWRExHbEVRVUZwUkN4NVJVRkJlVVVzYlVSQlFXMUVMSGRGUVVGM1JTeHpRMEZCYzBNc2RVTkJRWFZETEhsRFFVRjVReXh0UkVGQmJVUXNVMEZCVXl3clEwRkJLME1zYVVOQlFXbERMRXRCUVVzc2FVUkJRV2xFTERaQ1FVRTJRaXhQUVVGUExFVkJRVVVzY1VKQlFYRkNMSE5DUVVGelFpeHBRa0ZCYVVJc1UwRkJVeXg1UlVGQmVVVXNjME5CUVhORExIVkRRVUYxUXl4MVEwRkJkVU1zZFVOQlFYVkRMSFZEUVVGMVF5eDFRMEZCZFVNc05FSkJRVFJDTEhWSVFVRjFTQ3hUUVVGVExHbEVRVUZwUkN4blJFRkJaMFFzSzBKQlFTdENMSE5EUVVGelF5eGhRVUZoTEZGQlFWRXNiVUpCUVcxQ0xITkNRVUZ6UWl4cFFrRkJhVUlzWjBKQlFXZENMRzFDUVVGdFFpeDFRa0ZCZFVJc2RVSkJRWFZDTEdsQ1FVRnBRaXhyUWtGQmEwSXNaMEpCUVdkQ0xGTkJRVk1zWTBGQll5eGpRVUZqTEZOQlFWTXNTMEZCU3l4WlFVRlpMRkZCUVZFc05rSkJRVFpDTEZGQlFWRXNSVUZCUlN3MlFrRkJOa0lzTmtKQlFUWkNMRkZCUVZFc1JVRkJSU3dyUWtGQkswSXNhVUpCUVdsQ0xHbENRVUZwUWl3MlFrRkJOa0lzVVVGQlVTeEZRVUZGTERoQ1FVRTRRaXhyUWtGQmEwSXNaMEpCUVdkQ0xGTkJRVk1zWTBGQll5eGpRVUZqTEZOQlFWTXNTMEZCU3l4blEwRkJaME1zYlVOQlFXMURMR2RDUVVGblFpeHJRa0ZCYTBJc1kwRkJZeXh2UTBGQmIwTXNUVUZCVFN4UlFVRlJMRVZCUVVVc1QwRkJUeXhaUVVGWkxFVkJRVVVzVlVGQlZTeEZRVUZGTEU5QlFVOHNXVUZCV1N4RlFVRkZMRTlCUVU4c1dVRkJXU3hGUVVGRkxFOUJRVThzV1VGQldTeEZRVUZGTEU5QlFVOHNaVUZCWlN4RlFVRkZMRTlCUVU4c1pVRkJaU3hGUVVGRkxFOUJRVThzWjBKQlFXZENMRVZCUVVVc1JVRkJSU3hUUVVGVExHTkJRV01zYjBOQlFXOURMRTFCUVUwc1VVRkJVU3hGUVVGRkxGRkJRVkVzYVVKQlFXbENMRVZCUVVVc1owSkJRV2RDTEV0QlFVc3NhMEpCUVd0Q0xFVkJRVVVzUlVGQlJTeG5Ra0ZCWjBJc1VVRkJVU3h6UWtGQmMwSXNSVUZCUlN4RlFVRkZMRVZCUVVVc1UwRkJVeXhqUVVGakxHOURRVUZ2UXl4TlFVRk5MRkZCUVZFc1JVRkJSU3hQUVVGUExGbEJRVmtzUlVGQlJTeFBRVUZQTEZsQlFWa3NSVUZCUlN4UFFVRlBMRmxCUVZrc1JVRkJSU3hQUVVGUExGbEJRVmtzUlVGQlJTeFBRVUZQTEZsQlFWa3NSVUZCUlN4RlFVRkZMRk5CUVZNc1owNUJRV2RPTEdsRVFVRnBSQ3gzUWtGQmQwSXNjMFJCUVhORUxHZElRVUZuU0N4WFFVRlhMSGRDUVVGM1Fpd3lSRUZCTWtRc01raEJRVEpJTEhsRFFVRjVReXhwUWtGQmFVSXNSVUZCUlN4M1FrRkJkMElzVjBGQlZ5eDNRa0ZCZDBJc1UwRkJVeXh4UkVGQmNVUXNjMFJCUVhORUxGTkJRVk1zYTBsQlFXdEpMRmRCUVZjc2QwSkJRWGRDTERKRVFVRXlSQ3huU0VGQlowZ3NWMEZCVnl4M1FrRkJkMElzYTBKQlFXdENMR2xDUVVGcFFpd3lSRUZCTWtRc2MwbEJRWE5KTEZkQlFWY3NkMEpCUVhkQ0xHdENRVUZyUWl4cFFrRkJhVUlzTUVSQlFUQkVMR3RKUVVGclNTeFhRVUZYTEhkQ1FVRjNRaXhyUWtGQmEwSXNhVUpCUVdsQ0xESkVRVUV5UkN4dlFrRkJiMElzWVVGQllTeDNRMEZCZDBNc1RVRkJUU3hOUVVGTkxFdEJRVXNzYlVKQlFXMUNMRVZCUVVVc1RVRkJUU3hOUVVGTkxFdEJRVXNzYjBKQlFXOUNMRVZCUVVVc1RVRkJUU3hSUVVGUkxHdENRVUZyUWl4RlFVRkZMRzFDUVVGdFFpeEZRVUZGTEVWQlFVVXNSVUZCUlN4TlFVRk5MRXRCUVVzc2NVSkJRWEZDTEVWQlFVVXNVVUZCVVN3d1FrRkJNRUlzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4UlFVRlJMR3RDUVVGclFpeEZRVUZGTEVWQlFVVXNNRUpCUVRCQ0xHOUNRVUZ2UWl4VlFVRlZMSFZEUVVGMVF5eHhRa0ZCY1VJc2RVTkJRWFZETERKQ1FVRXlRaXcwUWtGQk5FSXNSVUZCUlN4blEwRkJaME1zYzBOQlFYTkRMRXRCUVVzc1MwRkJTeXhUUVVGVExHVkJRV1VzTWtOQlFUSkRMR1ZCUVdVc2QwSkJRWGRDTEcxRVFVRnRSQ3hWUVVGVkxITkdRVUZ6Uml4WFFVRlhMSGRDUVVGM1FpeHZRMEZCYjBNc1RVRkJUU3hSUVVGUkxFVkJRVVVzVFVGQlRTeExRVUZMTEhOQ1FVRnpRaXhGUVVGRkxGbEJRVmtzUlVGQlJTeEZRVUZGTEZGQlFWRXNUMEZCVHl4RlFVRkZMRVZCUVVVc2QwSkJRWGRDTERKQ1FVRXlRaXgxUkVGQmRVUXNTMEZCU3l4aFFVRmhMR3RGUVVGclJTdzBSMEZCTkVjc2QwTkJRWGRETEUxQlFVMHNVVUZCVVN4RlFVRkZMRkZCUVZFc2FVSkJRV2xDTEVWQlFVVXNaMEpCUVdkQ0xGRkJRVkVzYzBKQlFYTkNMRVZCUVVVc1JVRkJSU3hGUVVGRkxIZENRVUYzUWl4dlEwRkJiME1zVFVGQlRTeFJRVUZSTEVWQlFVVXNUVUZCVFN4TFFVRkxMRzlDUVVGdlFpeEZRVUZGTEV0QlFVc3NhMEpCUVd0Q0xFVkJRVVVzUlVGQlJTeFJRVUZSTEU5QlFVOHNSVUZCUlN4RlFVRkZMSGRDUVVGM1Fpd3lRa0ZCTWtJc2RVUkJRWFZFTEV0QlFVc3NZVUZCWVN4clJVRkJhMFVzZDBkQlFYZEhMR2REUVVGblF5eFhRVUZYTEVWQlFVVXNkMEpCUVhkQ0xHOURRVUZ2UXl4TlFVRk5MRkZCUVZFc1JVRkJSU3hOUVVGTkxFdEJRVXNzV1VGQldTeEZRVUZGTEUxQlFVMHNUMEZCVHl4WlFVRlpMRVZCUVVVc1QwRkJUeXhaUVVGWkxFVkJRVVVzVDBGQlR5eFpRVUZaTEVWQlFVVXNSVUZCUlN4RlFVRkZMRkZCUVZFc1QwRkJUeXhGUVVGRkxFVkJRVVVzZDBKQlFYZENMREpDUVVFeVFpeDFSRUZCZFVRc1MwRkJTeXhoUVVGaExHdEZRVUZyUlN4elEwRkJjME1zY1VOQlFYRkRMSEZFUVVGeFJDeHJRMEZCYTBNc1ZVRkJWU3h4UTBGQmNVTXNOa0pCUVRaQ0xHOUVRVUZ2UkN4VlFVRlZMR2REUVVGblF5eFRRVUZUTEZGQlFWRXNkMEpCUVhkQ0xDdENRVUVyUWl3clEwRkJLME1zWlVGQlpTd3JRa0ZCSzBJc01rSkJRVEpDTEN0Q1FVRXJRaXhyUkVGQmEwUXNaVUZCWlN3clFrRkJLMElzWjBSQlFXZEVPMEZCUTNncmRrSTdRVUZEUVR0QlFVTkJMR2xEUVVGblF5eFJRVUZSTEd0RVFVRnJSQ3huUkVGQlowUXNNRUpCUVRCQ0xGTkJRVk1zYVVSQlFXbEVMR3RDUVVGclFpeDNRMEZCZDBNc05rTkJRVFpETERaRFFVRTJReXcyUTBGQk5rTXNOa05CUVRaRExEWkRRVUUyUXl3MlEwRkJOa01zTmtOQlFUWkRMRFpEUVVFMlF5d3dRa0ZCTUVJc1UwRkJVeXh6UkVGQmMwUXNPRU5CUVRoRExITkRRVUZ6UXl4elEwRkJjME1zYzBOQlFYTkRMSE5EUVVGelF5eHpRMEZCYzBNc2MwTkJRWE5ETEhORFFVRnpReXh6UTBGQmMwTXNjME5CUVhORExHdENRVUZyUWl3d1FrRkJNRUlzVTBGQlV5eHZSRUZCYjBRc2JVUkJRVzFFTERKRVFVRXlSQ3huUkVGQlowUXNOa0pCUVRaQ0xHdENRVUZyUWl4dFJFRkJiVVFzTWtSQlFUSkVMR2xHUVVGcFJqdEJRVU5zYkVRN1FVRkRRVHRCUVVOQkxHMURRVUZyUXl4NVEwRkJlVU1zZVVSQlFYbEVMR3RDUVVGclFpeDVRMEZCZVVNc1YwRkJWeXh6UkVGQmMwUXNjME5CUVhORExGTkJRVk1zYlVKQlFXMUNMRmxCUVZrc1NVRkJTU3hMUVVGTExGRkJRVkVzVjBGQlZ5eHJRMEZCYTBNc2EwSkJRV3RDTEhsRFFVRjVReXhYUVVGWExIRkRRVUZ4UXl3eVEwRkJNa01zYzBWQlFYTkZMSGRDUVVGM1FpeDNRa0ZCZDBJc2NVSkJRWEZDTEhGRVFVRnhSQ3gzUTBGQmQwTXNLME5CUVN0RExEQkRRVUV3UXl4cFJFRkJhVVFzTmtKQlFUWkNMR0ZCUVdFc2EwSkJRV3RDTEhsSVFVRjVTQ3hMUVVGTExGTkJRVk1zZFVOQlFYVkRMR3RDUVVGclFpeHpRMEZCYzBNc2MwSkJRWE5DTEd0Q1FVRnJRaXhMUVVGTExEQkRRVUV3UXl4blJFRkJaMFFzYlVKQlFXMUNMR1ZCUVdVc01rSkJRVEpDTEhGQ1FVRnhRaXhOUVVGTkxHdENRVUZyUWl4elEwRkJjME1zTUVKQlFUQkNMRWxCUVVrc1MwRkJTeXhYUVVGWExGRkJRVkVzUzBGQlN5eFRRVUZUTERaQ1FVRTJRaXhqUVVGakxIRkNRVUZ4UWl4VFFVRlRMRkZCUVZFc1pVRkJaU3huUTBGQlowTXNjME5CUVhORExITkZRVUZ6UlN4VFFVRlRMRkZCUVZFc1ZVRkJWU3hOUVVGTkxFOUJRVThzYlVSQlFXMUVMR2xEUVVGcFF5eFRRVUZUTEZGQlFWRXNWMEZCVnl4TlFVRk5MSEZEUVVGeFF5d3lRa0ZCTWtJc1UwRkJVeXhSUVVGUkxFbEJRVWtzUzBGQlN5eDNRa0ZCZDBJc1dVRkJXU3hyUjBGQmEwY3NLME5CUVN0RExHMUNRVUZ0UWl4cFFrRkJhVUlzYjBKQlFXOUNMRk5CUVZNc2FVUkJRV2xFTERSRFFVRTBReXd3UTBGQk1FTXNVMEZCVXl4NVJFRkJlVVFzT0VOQlFUaERMSGxEUVVGNVF5eGxRVUZsTEhkQ1FVRjNRaXg1UWtGQmVVSXNWVUZCVlN4VFFVRlRMRzFFUVVGdFJDdzRRMEZCT0VNc2MwUkJRWE5FTEdkQ1FVRm5RaXhoUVVGaExGZEJRVmNzVjBGQlZ5eHJRa0ZCYTBJc2VVTkJRWGxETEZkQlFWY3NZVUZCWVN4dlJFRkJiMFFzZDBKQlFYZENMRzlHUVVGdlJpeFRRVUZUTEc5RFFVRnZReXdyUWtGQkswSXNNRUpCUVRCQ0xIZENRVUYzUWl4eFEwRkJjVU1zVTBGQlV5eDFRa0ZCZFVJc01FTkJRVEJETEhORVFVRnpSQ3huUWtGQlowSXNZVUZCWVN4WFFVRlhMRmRCUVZjc2EwSkJRV3RDTEhsRFFVRjVReXhYUVVGWExHRkJRV0VzTmtOQlFUWkRMQ3RDUVVFclFpd3dRa0ZCTUVJc2QwSkJRWGRDTEhGRFFVRnhReXhUUVVGVExIVkNRVUYxUWl3d1EwRkJNRU1zYzBSQlFYTkVMR2RDUVVGblFpeGhRVUZoTEZkQlFWY3NWMEZCVnl4aFFVRmhMREpEUVVFeVF5eHJRa0ZCYTBJc2MwTkJRWE5ETEhOQ1FVRnpRaXhyUWtGQmEwSXNTMEZCU3l3NFEwRkJPRU1zYjBSQlFXOUVMREpDUVVFeVFpeHhRMEZCY1VNc1lVRkJZU3hyUWtGQmEwSXNjME5CUVhORExHMUNRVUZ0UWl4bFFVRmxMREpDUVVFeVFpeHhRa0ZCY1VJc1RVRkJUU3d3UWtGQk1FSXNTVUZCU1N4TFFVRkxMRmRCUVZjc1VVRkJVU3hMUVVGTExGTkJRVk1zTmtKQlFUWkNMR05CUVdNc2NVSkJRWEZDTEhGRFFVRnhReXhSUVVGUkxGZEJRVmNzVFVGQlRTeFZRVUZWTEd0Q1FVRnJRaXhoUVVGaExHbENRVUZwUWl3MFEwRkJORU1zYzBOQlFYTkRMSGRDUVVGM1Fpd3lRa0ZCTWtJc01rSkJRVEpDTERSQ1FVRTBRaXh2UTBGQmIwTXNhVU5CUVdsRExGTkJRVk1zVVVGQlVTeFhRVUZYTEUxQlFVMHNjVU5CUVhGRExGTkJRVk1zWTBGQll5eFJRVUZSTEVsQlFVa3NUVUZCVFN4aFFVRmhMR2xEUVVGcFF5eGhRVUZoTERaQ1FVRTJRaXgxU0VGQmRVZ3NhMFZCUVd0RkxHZEVRVUZuUkN4blJVRkJaMFVzYjBWQlFXOUZMREJEUVVFd1F5d3dSRUZCTUVRc09FUkJRVGhFTEhkRlFVRjNSU3h6UkVGQmMwUXNaMFJCUVdkRUxIZENRVUYzUWl4MVFrRkJkVUlzYzBWQlFYTkZMRzlFUVVGdlJDeHZSa0ZCYjBZc09FTkJRVGhETERaR1FVRTJSaXcwUlVGQk5FVXNNRVJCUVRCRUxHOUVRVUZ2UkR0QlFVTXhjazA3UVVGRFFUdEJRVU5CTEdsQ1FVRm5RaXc0UWtGQk9FSXNhVU5CUVdsRExHbERRVUZwUXl4alFVRmpMRzFEUVVGdFF5dzBSRUZCTkVRc01rTkJRVEpETERSRVFVRTBSQ3gzUTBGQmQwTXNjVU5CUVhGRExGVkJRVlVzTmtKQlFUWkNMRGhFUVVFNFJDeG5RMEZCWjBNc01rVkJRVEpGTERoQ1FVRTRRaXc0UkVGQk9FUXNhVU5CUVdsRExESkZRVUV5UlN3MlFrRkJOa0lzTkVSQlFUUkVMREpDUVVFeVFpeDNRa0ZCZDBJc1ZVRkJWU3cwUWtGQk5FSXNORVJCUVRSRUxESkNRVUV5UWl4M1FrRkJkMElzVlVGQlZTdzJRa0ZCTmtJc2RVSkJRWFZDTERoRFFVRTRReXh0UWtGQmJVSXNkVUpCUVhWQ0xESkNRVUV5UWl4cFEwRkJhVU1zYVVOQlFXbERMRmxCUVZrc01rTkJRVEpETEhWQ1FVRjFRaXc0UTBGQk9FTXNPRU5CUVRoRExHbERRVUZwUXl4cFEwRkJhVU1zV1VGQldTeDNRa0ZCZDBJc2RVSkJRWFZDTEhORVFVRnpSQ3h2UlVGQmIwVXNORU5CUVRSRExEUkRRVUUwUXl3d1EwRkJNRU1zT0VOQlFUaERMRzFEUVVGdFF5d3lSRUZCTWtRc05FTkJRVFJETEhkRFFVRjNReXgzUWtGQmQwSXNPRUpCUVRoQ0xHdEVRVUZyUkN4clEwRkJhME1zTUVKQlFUQkNMQ3REUVVFclF5eFpRVUZaTEZkQlFWY3NTMEZCU3l4WFFVRlhMSGxEUVVGNVF5eFhRVUZYTEZGQlFWRXNVMEZCVXl4elFrRkJjMElzWVVGQllTeHpRa0ZCYzBJc01rSkJRVEpDTERSRFFVRTBReXh4UWtGQmNVSXNWVUZCVlN4SlFVRkpMRXRCUVVzc2FVSkJRV2xDTERCQ1FVRXdRaXd3UWtGQk1FSXNVMEZCVXl4TFFVRkxMRzFDUVVGdFFpeHRSRUZCYlVRc1MwRkJTeXdyUWtGQkswSXNlVVJCUVhsRUxFdEJRVXNzYVVOQlFXbERMR3RFUVVGclJDeHpRa0ZCYzBJc01FSkJRVEJDTEV0QlFVc3NjMEpCUVhOQ0xESkRRVUV5UXl3MFFrRkJORUlzUzBGQlN5eDVRa0ZCZVVJc01FTkJRVEJETERSQ1FVRTBRaXhMUVVGTExHZERRVUZuUXl4dlJFRkJiMFFzYVVKQlFXbENMRXRCUVVzc09FSkJRVGhDTEcxRFFVRnRReXgxUWtGQmRVSXNjME5CUVhORExESkNRVUV5UWl4MVJFRkJkVVFzZVVWQlFYbEZMREJGUVVFd1JTeFZRVUZWTERaQ1FVRTJRaXhSUVVGUkxEaERRVUU0UXl3MFEwRkJORU1zTUVKQlFUQkNMRlZCUVZVc01FSkJRVEJDTERCQ1FVRXdRaXhyUWtGQmEwSXNWVUZCVlN4dFJFRkJiVVFzYjBSQlFXOUVMRlZCUVZVc1ZVRkJWU3dyUTBGQkswTXNaMEpCUVdkQ0xGVkJRVlVzVjBGQlZ5dzJRa0ZCTmtJc1ZVRkJWU3gzUTBGQmQwTXNOa0pCUVRaQ0xGVkJRVlVzV1VGQldTeDFSRUZCZFVRc2QwTkJRWGRETEN0RFFVRXJReXhsUVVGbExGVkJRVlVzTkVOQlFUUkRMR1ZCUVdVc1ZVRkJWU3haUVVGWkxFdEJRVXNzWlVGQlpTeFZRVUZWTEdOQlFXTXNhVVJCUVdsRUxHZEVRVUZuUkN3clEwRkJLME1zWjBKQlFXZENMRk5CUVZNc2MwTkJRWE5ETEhORFFVRnpReXh4UWtGQmNVSXNXVUZCV1N4TFFVRkxMRmRCUVZjc09FTkJRVGhETEhkRFFVRjNReXhWUVVGVkxHbEVRVUZwUkN4MVFrRkJkVUlzT0VOQlFUaERMRlZCUVZVc2QwSkJRWGRDTEZOQlFWTXNLME5CUVN0RExGbEJRVmtzVjBGQlZ5eExRVUZMTEhkRFFVRjNReXgzUWtGQmQwSXNWVUZCVlN4NVFrRkJlVUlzY1VSQlFYRkVMRzFFUVVGdFJDeFRRVUZUTEVsQlFVa3NjVUpCUVhGQ0xGTkJRVk1zU1VGQlNTd3lRa0ZCTWtJc05FSkJRVFJDTEdkQ1FVRm5RaXhwUWtGQmFVSXNObFZCUVRaVkxIbERRVUY1UXl3MFEwRkJORU1zYlVOQlFXMURMR2RFUVVGblJDeHRRa0ZCYlVJc2NVSkJRWEZDTEZOQlFWTXNTMEZCU3l3clFrRkJLMElzT0VOQlFUaERMRFpDUVVFMlFpeHpRa0ZCYzBJc1JVRkJSU3cwUWtGQk5FSXNVMEZCVXl4TFFVRkxMQ3RDUVVFclFpeG5SRUZCWjBRc1owUkJRV2RFTEdkRVFVRm5SQ3d3UTBGQk1FTXNZMEZCWXl3MFFrRkJORUlzYVVkQlFXbEhMRk5CUVZNc1MwRkJTeXd5UWtGQk1rSXNLME5CUVN0RExGTkJRVk1zWjBKQlFXZENMSFZDUVVGMVFpd3JRMEZCSzBNc1owSkJRV2RDTEd0RVFVRnJSQ3d5UWtGQk1rSXNhMFJCUVd0RUxHdEVRVUZyUkN4UlFVRlJMRFJDUVVFMFFpeEpRVUZKTEdsQ1FVRnBRaXhyUkVGQmEwUXNhMFJCUVd0RUxHZENRVUZuUWl4clJFRkJhMFFzYTBSQlFXdEVMR2RDUVVGblFpeHJSRUZCYTBRc2VVTkJRWGxETERKQ1FVRXlRaXd5UTBGQk1rTXNTMEZCU3l3eVFrRkJNa0lzT0VOQlFUaERMREpDUVVFeVFpeHJSRUZCYTBRc2MwTkJRWE5ETEhGQ1FVRnhRaXhWUVVGVkxEaERRVUU0UXl3clEwRkJLME1zWjBKQlFXZENMR3RFUVVGclJDd3lRa0ZCTWtJc2EwUkJRV3RFTEd0RVFVRnJSQ3hsUVVGbExHdEVRVUZyUkN4aFFVRmhMREpEUVVFeVF5d3JRMEZCSzBNc1owSkJRV2RDTEd0RVFVRnJSQ3d5UWtGQk1rSXNhMFJCUVd0RUxHdEVRVUZyUkN4bFFVRmxMR3RFUVVGclJDd3lRa0ZCTWtJc2EwUkJRV3RFTEd0RVFVRnJSQ3huUWtGQlowSXNhMFJCUVd0RUxESkNRVUV5UWl4clJFRkJhMFFzYTBSQlFXdEVMR1ZCUVdVc2JVSkJRVzFDTEZsQlFWa3NTVUZCU1N4TFFVRkxMSGxEUVVGNVF5eFZRVUZWTERCRFFVRXdReXhUUVVGVExGZEJRVmNzSzBOQlFTdERMRFpDUVVFMlFpeDNRMEZCZDBNc01rSkJRVEpDTEhkRFFVRjNReXh6UTBGQmMwTXNOa0pCUVRaQ0xHbENRVUZwUWl4blFrRkJaMElzWjBKQlFXZENMRzlDUVVGdlFpeDNRa0ZCZDBJc2QwTkJRWGRETEhsRFFVRjVReXhWUVVGVkxEQkRRVUV3UXl4MVEwRkJkVU1zVlVGQlZTeFpRVUZaTEhWRFFVRjFReXgzUTBGQmQwTXNkVU5CUVhWRExGVkJRVlVzV1VGQldTeHhRMEZCY1VNc01FTkJRVEJETEZGQlFWRXNNRUpCUVRCQ0xHbERRVUZwUXl4VlFVRlZMRlZCUVZVc2QwTkJRWGRETEZsQlFWa3NWMEZCVnl4TFFVRkxMRmRCUVZjc1lVRkJZU3hsUVVGbExGZEJRVmNzZDBOQlFYZERMSE5FUVVGelJDeGhRVUZoTEZsQlFWa3NWMEZCVnl4VFFVRlRMR2xDUVVGcFFpeFBRVUZQTEZOQlFWTXNLMEpCUVN0Q0xHMURRVUZ0UXl4eFFrRkJjVUlzVDBGQlR5eHRRa0ZCYlVJc2MwSkJRWE5DTEcxTFFVRnRTeXh0UTBGQmJVTXNPRU5CUVRoRExGVkJRVlVzVTBGQlV5d3JRa0ZCSzBJc2FVTkJRV2xETERoQ1FVRTRRaXd5UTBGQk1rTXNLMEpCUVN0Q0xITkRRVUZ6UXl4blEwRkJaME1zYTBKQlFXdENMRmxCUVZrc1YwRkJWeXhMUVVGTExIVkNRVUYxUWl3clFrRkJLMElzYjBKQlFXOUNMRFJEUVVFMFF5d3dSRUZCTUVRc1ZVRkJWU3c0UTBGQk9FTXNVMEZCVXl3NFJFRkJPRVFzWVVGQllTeFpRVUZaTEN0RFFVRXJReXhaUVVGWkxGZEJRVmNzUzBGQlN5dzBRa0ZCTkVJc2RVTkJRWFZETEZWQlFWVXNkVU5CUVhWRExHdENRVUZyUWl4dFJFRkJiVVFzWVVGQllTeFpRVUZaTEN0RFFVRXJReXhaUVVGWkxGZEJRVmNzUzBGQlN5eHpRMEZCYzBNc2QwTkJRWGRETEhGRFFVRnhReXhWUVVGVkxGVkJRVlVzYzBOQlFYTkRMR3RDUVVGclFpeHpSRUZCYzBRc0swTkJRU3RETEZsQlFWa3NWMEZCVnl4TFFVRkxMRFJDUVVFMFFpeHBSRUZCYVVRc1YwRkJWeXhWUVVGVkxHZEVRVUZuUkN4clFrRkJhMElzTmtSQlFUWkVMQ3REUVVFclF5eFpRVUZaTEZkQlFWY3NTMEZCU3l4M1EwRkJkME1zSzBOQlFTdERMRmxCUVZrc1YwRkJWeXhMUVVGTExEUkNRVUUwUWl4elEwRkJjME1zZVVKQlFYbENMRzFEUVVGdFF5eDVRa0ZCZVVJc2JVTkJRVzFETEcxQ1FVRnRRaXhqUVVGakxGVkJRVlVzSzBKQlFTdENMRk5CUVZNc1ZVRkJWU3hqUVVGakxESkVRVUV5UkN4VlFVRlZMRmxCUVZrc2QwSkJRWGRDTEdkRFFVRm5ReXdyUTBGQkswTXNXVUZCV1N4WFFVRlhMRXRCUVVzc1YwRkJWeXdyUTBGQkswTXNaMEpCUVdkQ0xDdERRVUVyUXl4WFFVRlhMRmRCUVZjc2NVUkJRWEZFTEhkQ1FVRjNRaXh6UkVGQmMwUXNjVVJCUVhGRUxIZENRVUYzUWl3eVJFRkJNa1FzVlVGQlZTd3lRMEZCTWtNc2JVUkJRVzFFTEhkRFFVRjNReXh4UTBGQmNVTXNWVUZCVlN4elEwRkJjME1zYVVSQlFXbEVMSGxDUVVGNVFpeHBRMEZCYVVNc2IwSkJRVzlDTEc5RFFVRnZRenRCUVVONmFtRTdRVUZEUVR0QlFVTkJMSEZEUVVGdlF5eFJRVUZSTERSRFFVRTBReXhaUVVGWkxIZENRVUYzUWl4dFFrRkJiVUlzTkVKQlFUUkNMRFJGUVVFMFJTeFBRVUZQTEdsRVFVRnBSQ3dyUkVGQkswUXNaMEpCUVdkQ0xHZENRVUZuUWl4blFrRkJaMElzWTBGQll5eHJRa0ZCYTBJc01FSkJRVEJDTERaQ1FVRTJRaXcwUWtGQk5FSXNiMEpCUVc5Q0xFOUJRVThzYlVKQlFXMUNMSGRDUVVGM1FpeDVRa0ZCZVVJc01FSkJRVEJDTEc5Q1FVRnZRaXh2UWtGQmIwSXNkVUpCUVhWQ0xEQkNRVUV3UWl4clJFRkJhMFFzYVVSQlFXbEVMSE5EUVVGelF5eHRRa0ZCYlVJc1ZVRkJWU3d5UTBGQk1rTXNhMFJCUVd0RUxIVkNRVUYxUWl4SlFVRkpMRzlDUVVGdlFpeDFRa0ZCZFVJc1NVRkJTU3d5UWtGQk1rSXNORU5CUVRSRExEQkNRVUV3UWl4SlFVRkpMSFZDUVVGMVFpeHZRa0ZCYjBJc2QwTkJRWGRETEZGQlFWRXNkME5CUVhkRExGRkJRVkVzYjBKQlFXOUNMR05CUVdNc2QwUkJRWGRFTEZkQlFWY3NiVU5CUVcxRExHZERRVUZuUXl4TFFVRkxMSEZDUVVGeFFpeHZRa0ZCYjBJc2IwSkJRVzlDTEdOQlFXTXNVMEZCVXl3d1FrRkJNRUlzYTBKQlFXdENMRGhEUVVFNFF5d3lRa0ZCTWtJc05rSkJRVFpDTEVWQlFVVXNhMEpCUVd0Q0xHTkJRV01zUzBGQlN5d3JRa0ZCSzBJc2FVTkJRV2xETEUxQlFVMHNSVUZCUlN4WlFVRlpMR3RDUVVGclFpeHJRa0ZCYTBJc2FVUkJRV2xFTEV0QlFVc3NZMEZCWXl4cFEwRkJhVU1zVFVGQlRTeEZRVUZGTEZsQlFWa3NhMEpCUVd0Q0xHRkJRV0VzYlVKQlFXMUNMR2RDUVVGblFpeHZRMEZCYjBNc2JVSkJRVzFDTEcxQ1FVRnRRaXhYUVVGWExGZEJRVmNzWTBGQll5eHpRa0ZCYzBJc05rTkJRVFpETEZkQlFWY3NWMEZCVnl4elFrRkJjMElzZVVOQlFYbERMRXRCUVVzc1VVRkJVU3huUWtGQlowSXNPRVZCUVRoRkxEQkNRVUV3UWl3MlFrRkJOa0lzYlVSQlFXMUVMSGRDUVVGM1FpeDVRMEZCZVVNc2NVUkJRWEZFTEc5Q1FVRnZRaXh4UWtGQmNVSXNNa0pCUVRKQ0xIVkVRVUYxUkN4WlFVRlpMSE5EUVVGelF5dzRRMEZCT0VNc1pVRkJaU3hYUVVGWExIVkRRVUYxUXl4blEwRkJaME1zUzBGQlN5eHhRa0ZCY1VJc1kwRkJZeXh4UWtGQmNVSXNTMEZCU3l3d1FrRkJNRUlzVjBGQlZ5eHJRa0ZCYTBJc2JVUkJRVzFFTERKQ1FVRXlRaXhoUVVGaExFVkJRVVVzYTBKQlFXdENMR05CUVdNc1dVRkJXU3hMUVVGTExDdENRVUVyUWl4WFFVRlhMRWxCUVVrc01FTkJRVEJETEZOQlFWTXNZVUZCWVN4cFEwRkJhVU1zVFVGQlRTeEZRVUZGTEZWQlFWVXNhMEpCUVd0Q0xHMUNRVUZ0UWl4TFFVRkxMR2xEUVVGcFF5eE5RVUZOTEVWQlFVVXNWVUZCVlN4clFrRkJhMElzZFVKQlFYVkNMQ3RDUVVFclFpeHRRa0ZCYlVJc1UwRkJVeXhWUVVGVkxEWkNRVUUyUWl3MlJFRkJOa1FzVDBGQlR5eFBRVUZQTEdkQ1FVRm5RaXhQUVVGUExESkVRVUV5UkN3MFJFRkJORVFzYVVSQlFXbEVMSFZDUVVGMVFpd3dRa0ZCTUVJc1MwRkJTeXh0UkVGQmJVUXNhMEpCUVd0Q0xITkNRVUZ6UWl4VlFVRlZMSFZEUVVGMVF5eHRRa0ZCYlVJc2JVSkJRVzFDTEZkQlFWY3NWMEZCVnl4alFVRmpMSE5DUVVGelFpd3dRMEZCTUVNc01FTkJRVEJETEhOQ1FVRnpRaXhoUVVGaExITkNRVUZ6UWl3d1EwRkJNRU1zTkVKQlFUUkNMR0ZCUVdFc0swTkJRU3RETERSQ1FVRTBRaXhqUVVGakxDdERRVUVyUXl3MFFrRkJORUlzWTBGQll5d3JRMEZCSzBNc01rSkJRVEpDTERSQ1FVRTBRaXhqUVVGakxFdEJRVXNzTWtKQlFUSkNMR3REUVVGclF5eG5Ra0ZCWjBJc1owTkJRV2RETEhsRVFVRjVSQ3hoUVVGaExDdEVRVUVyUkN4blFrRkJaMElzT0VOQlFUaERMREJDUVVFd1FpeGpRVUZqTERoRFFVRTRReXd3UWtGQk1FSXNZMEZCWXl3NFEwRkJPRU1zTUVKQlFUQkNMR05CUVdNc2VVTkJRWGxETEd0Q1FVRnJRaXhqUVVGakxHOURRVUZ2UXl4aFFVRmhMR0ZCUVdFc2VVTkJRWGxETERKQ1FVRXlRaXhoUVVGaExHRkJRV0VzZDBKQlFYZENMR0ZCUVdFc0swSkJRU3RDTEdGQlFXRXNXVUZCV1N4WFFVRlhMRXRCUVVzc1pVRkJaU3hqUVVGakxHRkJRV0VzYlVOQlFXMURMR0ZCUVdFc1lVRkJZU3gzUWtGQmQwSXNZVUZCWVN3clFrRkJLMElzWVVGQllTeFpRVUZaTEZkQlFWY3NTMEZCU3l4WlFVRlpMR0ZCUVdFc1kwRkJZeXcwUWtGQk5FSXNaMUpCUVdkU0xEaERRVUU0UXl4WFFVRlhMRWxCUVVrc1pVRkJaU3gxUWtGQmRVSXNVMEZCVXl3d1FrRkJNRUlzVTBGQlV5eE5RVUZOTEU5QlFVOHNVMEZCVXl4VFFVRlRMRmRCUVZjc05FTkJRVFJETEZkQlFWY3NTVUZCU1N4bFFVRmxMSFZDUVVGMVFpeFpRVUZaTERCQ1FVRXdRaXhaUVVGWkxGTkJRVk1zVTBGQlV5eGpRVUZqTEhsRVFVRjVSQ3cyUTBGQk5rTXNLMFJCUVN0RUxHdENRVUZyUWl3d1EwRkJNRU1zSzBOQlFTdERMQ3REUVVFclF5eFJRVUZSTEVWQlFVVXNhMEpCUVd0Q0xDdERRVUVyUXl4MVEwRkJkVU1zYjBKQlFXOUNMSGRDUVVGM1FpeHJRa0ZCYTBJc1JVRkJSU3hMUVVGTExHbENRVUZwUWl4MVJVRkJkVVVzTWtOQlFUSkRMSGRDUVVGM1FpeDNRa0ZCZDBJc2IwSkJRVzlDTEd0Q1FVRnJRaXhGUVVGRkxFdEJRVXNzYTBKQlFXdENMSGxDUVVGNVFpdzBRMEZCTkVNc2QwSkJRWGRDTEd0Q1FVRnJRaXhKUVVGSkxHMUNRVUZ0UWl3eVEwRkJNa01zYlVKQlFXMUNMRlZCUVZVc2IwSkJRVzlDTEdsRFFVRnBReXhoUVVGaExHbERRVUZwUXl4TFFVRkxMSEZDUVVGeFFpeDFRMEZCZFVNc1MwRkJTeXh2UWtGQmIwSXNNRU5CUVRCRExFdEJRVXNzYzBKQlFYTkNMRFpEUVVFMlF5eExRVUZMTEhGQ1FVRnhRaXc0UTBGQk9FTXNTMEZCU3l4clFrRkJhMElzYlVOQlFXMURMRXRCUVVzc2QwSkJRWGRDTEhsQ1FVRjVRaXdyUWtGQkswSXNjVU5CUVhGRExFMUJRVTBzYzBSQlFYTkVMR2RDUVVGblFpeHJRa0ZCYTBJc2FVSkJRV2xDTEV0QlFVc3NaMEpCUVdkQ0xHbENRVUZwUWl4VFFVRlRMRXRCUVVzc1pVRkJaU3hUUVVGVExFdEJRVXNzTWtOQlFUSkRMRXRCUVVzc09FSkJRVGhDTERSQ1FVRTBRaXd3UWtGQk1FSXNNRUpCUVRCQ0xEQkNRVUV3UWl3d1FrRkJNRUlzYzBOQlFYTkRMR3RDUVVGclFpd3JRa0ZCSzBJc2JVTkJRVzFETERCQ1FVRXdRaXhWUVVGVkxDdERRVUVyUXl4MVFrRkJkVUlzZDBKQlFYZENMREJEUVVFd1F5eDFRa0ZCZFVJc05FTkJRVFJETERKRFFVRXlReXh6UTBGQmMwTXNkVU5CUVhWRExIbERRVUY1UXl4NVEwRkJlVU03UVVGRGFIWlNPMEZCUTBFN1FVRkRRU3h4UTBGQmIwTXNVVUZCVVN3MFEwRkJORU1zV1VGQldTd3dRa0ZCTUVJc2JVSkJRVzFDTEdkQ1FVRm5RaXhwUWtGQmFVSXNiVUpCUVcxQ0xIRkNRVUZ4UWl4blFrRkJaMElzYVVKQlFXbENMRzlDUVVGdlFpdzJRa0ZCTmtJc1dVRkJXU3g1UWtGQmVVSXNZMEZCWXl4M1EwRkJkME1zYzBOQlFYTkRMRGhEUVVFNFF5d3lRMEZCTWtNc1owTkJRV2RETEhsQ1FVRjVRaXh4UTBGQmNVTXNkME5CUVhkRExEaERRVUU0UXl4dlJFRkJiMFFzZVVKQlFYbENMSEZEUVVGeFF5eDNRMEZCZDBNc2MwTkJRWE5ETERoRFFVRTRReXhwUTBGQmFVTXNhME5CUVd0RExHbEVRVUZwUkN4eFEwRkJjVU1zYjBSQlFXOUVMRzlDUVVGdlFpeFRRVUZUTEZsQlFWa3NWMEZCVnl4TFFVRkxMRmRCUVZjc2MwSkJRWE5DTEhsQ1FVRjVRaXh2UWtGQmIwSXNlVUpCUVhsQ0xFbEJRVWtzYjBOQlFXOURMRk5CUVZNc2JVTkJRVzFETEZOQlFWTXNkVU5CUVhWRExGVkJRVlVzVTBGQlV5eExRVUZMTEZWQlFWVXNNa0pCUVRKQ0xEaENRVUU0UWl4WlFVRlpMSFZEUVVGMVF5eDFRa0ZCZFVJc2QwSkJRWGRDTERoQ1FVRTRRaXgzUWtGQmQwSXNUMEZCVHl4M1JVRkJkMFVzZDBKQlFYZENMREpDUVVFeVFpeFRRVUZUTzBGQlEzWjRSRHRCUVVOQk8wRkJRMEVzTUVKQlFYbENMSE5FUVVFMFF5dzJRa0ZCTmtJc09FSkJRVEpDTERoQ1FVRnZRaXdyUTBGQkswTXNjVUpCUVhGQ0xEaENRVUZ2UWl4clEwRkJhME1zZFVKQlFYVkNMRGhDUVVGdlFpdzRRa0ZCT0VJc0swSkJRU3RDTERoQ1FVRnZRaXc0UWtGQk1rSXNjVUpCUVhGQ08wRkJRM1ppTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3pzN096czdPMEZETlZaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxEUkNRVUV5UWp0QlFVTXpRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYjBKQlFXMUNMRmxCUVZrN1FVRkRMMEk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hyUWtGQmFVSXNXVUZCV1R0QlFVTTNRanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEd0Q1FVRnBRaXhaUVVGWk8wRkJRemRDTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hyUWtGQmFVSXNXVUZCV1R0QlFVTTNRanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4cFFrRkJaMElzYjBOQlFXOURPMEZCUTNCRU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNhMEpCUVdsQ0xGbEJRVms3UVVGRE4wSTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVUZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHZENRVUZsTEdsQ1FVRnBRanRCUVVOb1F6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHTkJRV0VzYVVKQlFXbENPMEZCUXpsQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxGVkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNhVVJCUVdkRUxFVkJRVVU3UVVGRGJFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEc5Q1FVRnRRaXcyUWtGQk5rSTdRVUZEYUVRN1FVRkRRVHRCUVVOQk8wRkJRMEVzVVVGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4clFrRkJhVUlzV1VGQldUdEJRVU0zUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFbEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEUxQlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFbEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRXNWVUZCVXp0QlFVTlVPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEpRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFMUJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNjMEpCUVhGQ0xGTkJRVk03UVVGRE9VSTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMSE5DUVVGeFFpeFRRVUZUTzBGQlF6bENPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEhOQ1FVRnhRaXhUUVVGVE8wRkJRemxDTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEd0Q1FVRnBRaXhyUWtGQmEwSTdRVUZEYmtNN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCUnp0QlFVTklPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCUnp0QlFVTklPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1NVRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFTeHZRa0ZCYlVJc1kwRkJZenRCUVVOcVF6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2QwUkJRWFZFTEU5QlFVODdRVUZET1VRN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEpRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxIZEVRVUYxUkN4UFFVRlBPMEZCUXpsRU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWxCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEpRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEpRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzYlVKQlFXdENPMEZCUTJ4Q08wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2MwSkJRWEZDTEZGQlFWRTdRVUZETjBJN1FVRkRRVHRCUVVOQkxFbEJRVWM3UVVGRFNEdEJRVU5CTEdkQ1FVRmxMRk5CUVZNN1FVRkRlRUk3UVVGRFFUdEJRVU5CTEVsQlFVYzdRVUZEU0R0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVN4dFFrRkJhMEk3UVVGRGJFSTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4dlFrRkJiVUlzVTBGQlV6dEJRVU0xUWp0QlFVTkJPMEZCUTBFc1NVRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFTeHZRa0ZCYlVJc1UwRkJVenRCUVVNMVFqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVFVGQlN6dEJRVU5NTzBGQlEwRXNkME5CUVhWRExGTkJRVk03UVVGRGFFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEd0Q1FVRnBRaXhaUVVGWk8wRkJRemRDT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRlZCUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4TlFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVFVGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hOUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1RVRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1RVRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeHJRa0ZCYVVJc1owSkJRV2RDTzBGQlEycERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2EwSkJRV2xDTEdkQ1FVRm5RanRCUVVOcVF6czdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4clFrRkJhVUlzV1VGQldUdEJRVU0zUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3T3p0QlF6Tm5SRUU3TzBGQlJVRXNSVUZCUXp0QlFVTkVPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNjVUpCUVc5Q0xFOUJRVTg3UVVGRE0wSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hyUkVGQmFVUXNXVUZCV1R0QlFVTTNSRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzUlVGQlF5dzJRa0ZCY1VRN096czdPenM3UVVNelNIUkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlJMRmRCUVZjN08wRkJSVzVDTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZFc1YwRkJWenM3UVVGRmJrSTdRVUZEUVR0QlFVTkJMRWxCUVVjN1FVRkRTRHRCUVVOQkxFbEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hOUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEUxQlFVczdRVUZEVER0QlFVTkJPMEZCUTBFc1RVRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRk5CUVZFc1YwRkJWenM3UVVGRmJrSTdRVUZEUVR0QlFVTkJMRk5CUVZFc1ZVRkJWVHM3UVVGRmJFSTdRVUZEUVRzN096czdPenRCUTI1R1FTeHJRa0ZCYVVJN08wRkJSV3BDTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3pzN096czdPenM3T3p0QlEwUkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenM3T3pzN08wdEJSWEZDTEdFN1FVRkRha0lzYTBOQlMwYzdRVUZCUVRzN1FVRklReXhaUVVkRUxGRkJTRU1zUjBGSFJEdEJRVUZCTEdGQlNFMHNVMEZIVGl4UlFVaE5MRk5CUjA0N1FVRkJRU3hoUVVocFFpeFpRVWRxUWl4UlFVaHBRaXhaUVVkcVFqdEJRVUZCTEdGQlNDdENMR0ZCUnk5Q0xGRkJTQ3RDTEdGQlJ5OUNPMEZCUVVFc1lVRklPRU1zUzBGSE9VTXNVVUZJT0VNc1MwRkhPVU03UVVGQlFTeGhRVWh4UkN4VFFVZHlSQ3hSUVVoeFJDeFRRVWR5UkR0QlFVRkJPenRCUVVSRExHRkJRMFFzVVVGRVF5eEpRVU5FTzBGQlFVRXNZVUZFVHl4TlFVTlFMRkZCUkU4c1RVRkRVRHRCUVVGQkxHRkJSR1VzVDBGRFppeFJRVVJsTEU5QlEyWTdRVUZCUVN4aFFVUjNRaXhQUVVONFFpeFJRVVIzUWl4UFFVTjRRanRCUVVGQkxHRkJSR2xETEZWQlEycERMRkZCUkdsRExGVkJRMnBETzBGQlFVRXNZVUZFTmtNc1lVRkROME1zVVVGRU5rTXNZVUZETjBNN1FVRkJRU3hoUVVRMFJDeFZRVU0xUkN4UlFVUTBSQ3hWUVVNMVJEdEJRVUZCTEdGQlJIZEZMRlZCUTNoRkxGRkJSSGRGTEZWQlEzaEZPenRCUVVGQk96dEJRVU5ETEdGQlFVa3NRMEZCUXl4SFFVRk1MRVZCUVZVN1FVRkRUaXd5UWtGQlNTeExRVUZLTEVOQlFWVXNaME5CUVZZN1FVRkRRU3h0UWtGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN4TFFVRldMRU5CUVU0N1FVRkRTRHRCUVVORUxHRkJRVWtzUTBGQlF5eFRRVUZNTEVWQlFXZENPMEZCUTFvc01rSkJRVWtzUzBGQlNpeERRVUZWTEhORFFVRldPMEZCUTBFc2JVSkJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNWMEZCVml4RFFVRk9PMEZCUTBnN1FVRkRSQ3hoUVVGSkxFTkJRVU1zV1VGQlRDeEZRVUZ0UWp0QlFVTm1MREpDUVVGSkxFdEJRVW9zUTBGQlZTeDVRMEZCVmp0QlFVTkJMRzFDUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEdOQlFWWXNRMEZCVGp0QlFVTklPMEZCUTBRc1lVRkJTU3hEUVVGRExHRkJRVXdzUlVGQmIwSTdRVUZEYUVJc01rSkJRVWtzUzBGQlNpeERRVUZWTERCRFFVRldPMEZCUTBFc2JVSkJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNaVUZCVml4RFFVRk9PMEZCUTBnN1FVRkRSQ3hoUVVGSkxFTkJRVU1zUzBGQlRDeEZRVUZaTzBGQlExSXNNa0pCUVVrc1MwRkJTaXhEUVVGVkxHdERRVUZXTzBGQlEwRXNiVUpCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzVDBGQlZpeERRVUZPTzBGQlEwZzdRVUZEUkN4aFFVRkpMRU5CUVVNc1UwRkJUQ3hGUVVGblFqdEJRVU5hTERKQ1FVRkpMRXRCUVVvc1EwRkJWU3h6UTBGQlZqdEJRVU5CTEcxQ1FVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxGZEJRVllzUTBGQlRqdEJRVU5JT3p0QlFVVkVMR0ZCUVVrc1QwRkJUeXhqUVVGakxFMUJRV1FzUTBGQmNVSXNZVUZCY2tJc1EwRkJXRHRCUVVOQkxHTkJRVXNzUzBGQlRDeEhRVUZoTERCQ1FVRm5RaXhGUVVGRkxFOUJRVThzU1VGQlZDeEZRVUZsTEZWQlFXWXNSVUZCY1VJc2IwSkJRWEpDTEVWQlFXZERMRzlDUVVGb1F5eEZRVUZvUWl4RFFVRmlPenRCUVVWQkxHVkJRVTBzY1VKQlFWY3NZVUZCV0N4RFFVRjVRaXhIUVVGNlFpeEZRVUU0UWl4WFFVRTVRaXhGUVVFeVF5eFRRVUV6UXl4RFFVRk9PMEZCUTBFc1pVRkJUU3h4UWtGQlZ5eGhRVUZZTEVOQlFYbENMRWRCUVhwQ0xFVkJRVGhDTEdOQlFUbENMRVZCUVRoRExGbEJRVGxETEVOQlFVNDdRVUZEUVN4bFFVRk5MSEZDUVVGWExHRkJRVmdzUTBGQmVVSXNSMEZCZWtJc1JVRkJPRUlzWlVGQk9VSXNSVUZCSzBNc1lVRkJMME1zUTBGQlRqdEJRVU5CTEdWQlFVMHNjVUpCUVZjc1lVRkJXQ3hEUVVGNVFpeEhRVUY2UWl4RlFVRTRRaXhQUVVFNVFpeEZRVUYxUXl4TFFVRjJReXhEUVVGT096dEJRVVZCTEdWQlFVMHNjVUpCUVZjc1lVRkJXQ3hEUVVGNVFpeEhRVUY2UWl4RlFVRTRRaXhQUVVFNVFpeEZRVUYxUXl4TFFVRkxMRXRCUVV3c1EwRkJWeXhGUVVGc1JDeERRVUZPTzBGQlEwRXNZVUZCU1N4SlFVRktMRVZCUVZVN1FVRkRUaXh0UWtGQlRTeHhRa0ZCVnl4aFFVRllMRU5CUVhsQ0xFZEJRWHBDTEVWQlFUaENMRTlCUVRsQ0xFVkJRWFZETEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVd4RUxFTkJRVTQ3UVVGRFNEczdRVUZGUkN4aFFVRkpMRmRCUVZjc1JVRkJSU3hqUVVGR0xFVkJRVlVzWjBKQlFWWXNSVUZCYlVJc1owSkJRVzVDTEVWQlFUUkNMSE5DUVVFMVFpeEZRVUYzUXl3MFFrRkJlRU1zUlVGQmRVUXNjMEpCUVhaRUxFVkJRVzFGTEhOQ1FVRnVSU3hGUVVGbU8wRkJRMEVzWTBGQlNTeEpRVUZKTEVkQlFWSXNTVUZCWlN4UlFVRm1MRVZCUVhkQ08wRkJRM0JDTEdsQ1FVRkpMRk5CUVZNc1IwRkJWQ3hEUVVGS0xFVkJRVzFDTzBGQlEyWXNkVUpCUVUwc2NVSkJRVmNzWVVGQldDeERRVUY1UWl4SFFVRjZRaXhGUVVFNFFpeEhRVUU1UWl4RlFVRnRReXhUUVVGVExFZEJRVlFzUTBGQmJrTXNRMEZCVGp0QlFVTklPMEZCUTBvN08wRkJSVVFzWTBGQlN5eEhRVUZNTEVkQlFWY3NSMEZCV0R0QlFVTklPenR0UWtGRlRTeE5MRzFDUVVGUExHRXNSVUZCWlR0QlFVTjZRaXhoUVVGSkxGTkJRVk1zWTBGQll5eExRVUZrTEVOQlFXOUNMRTFCUVhCQ0xFVkJRVFJDTEUxQlFUVkNMRU5CUVcxRExGVkJRVk1zU1VGQlZDeEZRVUZsTzBGQlF6TkVMRzlDUVVGUExGTkJRVk1zVlVGQmFFSTdRVUZEU0N4VlFVWlpMRU5CUVdJN1FVRkhRU3huUWtGQlR5eERRVUZETEVOQlFVVXNUMEZCVHl4RFFVRlFMRU5CUVZZN1FVRkRTQ3hOT3p0dFFrRkZUU3hQTEc5Q1FVRlJMR0VzUlVGQlpUdEJRVU14UWl4aFFVRkpMRk5CUVZNc1kwRkJZeXhMUVVGa0xFTkJRVzlDTEUxQlFYQkNMRVZCUVRSQ0xFMUJRVFZDTEVOQlFXMURMRlZCUVZNc1NVRkJWQ3hGUVVGbE8wRkJRek5FTEc5Q1FVRlBMRk5CUVZNc1QwRkJhRUk3UVVGRFNDeFZRVVpaTEVOQlFXSTdRVUZIUVN4blFrRkJUeXhEUVVGRExFTkJRVVVzVDBGQlR5eERRVUZRTEVOQlFWWTdRVUZEU0N4Tk96czdPenR0UWtGdVJXZENMR0U3T3pzN096czdPenM3T3pzN1FVTktja0k3T3pzN1FVRkRRVHM3T3pzN096czdPMHRCUlhGQ0xGVTdPenM3TzJkQ1FVTldMR0VzTUVKQlFXTXNSeXhGUVVGTExFa3NSVUZCVFN4TExFVkJRVTg3UVVGRGJrTXNZVUZCU1N4SlFVRkpMRTlCUVVvc1EwRkJXU3hIUVVGYUxFbEJRVzFDTEVOQlFYWkNMRVZCUVRCQ08wRkJRM1JDTEc5Q1FVRlBMRWRCUVZBN1FVRkRTRHM3UVVGRlJDeGhRVUZKTEVsQlFVa3NTVUZCU1N4TlFVRktMRWRCUVdFc1EwRkJha0lzVFVGQmQwSXNSMEZCTlVJc1JVRkJhVU03UVVGRE4wSXNiMEpCUVU4c1IwRkJVRHRCUVVOSU96dEJRVVZFTEdkQ1FVRlBMRzFDUVVGdFFpeEpRVUZ1UWl4RFFVRlFPMEZCUTBFc1owSkJRVThzUjBGQlVEdEJRVU5CTEdkQ1FVRlBMRzFDUVVGdFFpeExRVUZ1UWl4RFFVRlFPenRCUVVWQkxHZENRVUZQTEVkQlFWQTdRVUZEU0N4Tk96dG5Ra0ZGVFN4blFpdzJRa0ZCYVVJc1N5eEZRVUY1UXp0QlFVRkJMR0ZCUVd4RExGTkJRV3RETEhsRVFVRjBRaXhIUVVGelFqdEJRVUZCTEdGQlFXcENMRTFCUVdsQ096dEJRVU0zUkN4MVFrRkJTU3hKUVVGS0xFTkJRVk1zTmtKQlFWUTdPMEZCUlVFc1lVRkJTU3hQUVVGUExFdEJRVkFzUzBGQmFVSXNVVUZCY2tJc1JVRkJPRUk3UVVGRE1VSXNjVUpCUVZFc1QwRkJUeXhSUVVGUUxFTkJRV2RDTEVsQlFYaENPMEZCUTBnN08wRkJSVVFzWVVGQlNTeE5RVUZOTEUxQlFVMHNWMEZCVGl4RFFVRnJRaXhUUVVGc1FpeERRVUZXTzBGQlEwRXNZVUZCU1N4UFFVRlBMRU5CUVZnc1JVRkJZenRCUVVOV0xIRkNRVUZSTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVUwc1EwRkJia0lzUTBGQlVqdEJRVU5JT3p0QlFVVkVMR0ZCUVVrc1UwRkJVeXhGUVVGaU8yRkJRMGtzVVVGQlVTeHRRa0ZFV2p0aFFVVkpMRU5CUmtvN08wRkJTVUVzWVVGQlNTeFZRVUZWTEVOQlFXUTdRVUZEUVN4blFrRkJUeXhKUVVGSkxFMUJRVTBzU1VGQlRpeERRVUZYTEV0QlFWZ3NRMEZCV0N4RlFVRTRRanRCUVVNeFFpeHZRa0ZCVHl4dFFrRkJiVUlzUlVGQlJTeERRVUZHTEVOQlFXNUNMRU5CUVZBc1NVRkJiVU1zYlVKQlFXMUNMRVZCUVVVc1EwRkJSaXhEUVVGdVFpeERRVUZ1UXp0QlFVTkJMR2xDUVVGSkxGbEJRVmtzUlVGQmFFSXNSVUZCYjBJN1FVRkRhRUlzSzBKQlFVa3NTMEZCU2l4RFFVRlZMR2xFUVVGV0xFVkJRVFpFTEV0QlFUZEVPMEZCUTBFc2QwSkJRVTg3UVVGRFNDdzBRa0ZCVHp0QlFVUktMR3RDUVVGUU8wRkJSMGc3UVVGRFNqczdRVUZGUkN4alFVRkxMRWxCUVVrc1NVRkJWQ3hKUVVGcFFpeE5RVUZxUWl4RlFVRjVRanRCUVVOeVFpeHZRa0ZCVHl4TlFVRlFPMEZCUTBnN08wRkJSVVFzWjBKQlFVOHNSVUZCVUR0QlFVTklMRTA3T3pzN08yMUNRV3BFWjBJc1ZUczdPenM3T3pzN096czdPenM3TzBGRFNISkNPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenM3T3pzN096czdPenRMUVVWeFFpeFhPenM3UVVGRGFrSXNORUpCUVdkRU8wRkJRVUVzTUVWQlFVb3NSVUZCU1RzN1FVRkJRU3hoUVVGdVF5eExRVUZ0UXl4UlFVRnVReXhMUVVGdFF6dEJRVUZCTEdGQlFUVkNMRk5CUVRSQ0xGRkJRVFZDTEZOQlFUUkNPMEZCUVVFc1lVRkJha0lzVTBGQmFVSXNVVUZCYWtJc1UwRkJhVUk3TzBGQlFVRTdPMEZCUVVFc2MwUkJRelZETEd0Q1FVRk5MRlZCUVZVc1EwRkJWaXhEUVVGT0xFTkJSRFJET3p0QlFVYzFReXhoUVVGSkxGVkJRVlVzU1VGQlpDeEZRVUZ2UWp0QlFVTm9RaXh0UWtGQlN5eE5RVUZNTEVkQlFXTXNkVUpCUVdRN1FVRkRTQ3hWUVVaRUxFMUJSMHNzU1VGQlNTeExRVUZLTEVWQlFWYzdRVUZEV2l4dFFrRkJTeXhOUVVGTUxFZEJRV01zUzBGQlpEdEJRVU5JT3p0QlFVVkVMR1ZCUVVzc1ZVRkJUQ3hIUVVGclFpeFRRVUZzUWp0QlFVTkJMR1ZCUVVzc1ZVRkJUQ3hIUVVGclFpeFRRVUZzUWp0QlFWZzBRenRCUVZrdlF6czdNa0pCV1VRc1pTdzRRa0ZCYTBJN1FVRkRaQ3gxUWtGQlNTeEpRVUZLTEVOQlFWTXNOa0pCUVZRN1FVRkRRU3huUWtGQlR5eExRVUZMTEZOQlFVd3NRMEZCWlR0QlFVTnNRaXhwUWtGQlNTeExRVUZMTEVWQlJGTTdRVUZGYkVJc2JVSkJRVTBzUzBGQlN5eEpRVVpQTzBGQlIyeENMSE5DUVVGVExFdEJRVXNzVDBGSVNUdEJRVWxzUWl4dlFrRkJUeXhMUVVGTExFdEJTazA3UVVGTGJFSXNkMEpCUVZjc1MwRkJTeXhUUVV4Rk8wRkJUV3hDTEhkQ1FVRlhMRXRCUVVzN1FVRk9SU3hWUVVGbUxFTkJRVkE3UVVGUlNDeE5PenRwUWtGRlRTeHBRaXc0UWtGQmEwSXNZU3hGUVVGbE8wRkJRM0JETEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXdyUWtGQlZEdEJRVU5CTEdGQlFVa3NUMEZCVHl4TFFVRkxMRXRCUVV3c1EwRkJWeXhoUVVGWUxFTkJRVmc3UVVGRFFTeG5Ra0ZCVHl4SlFVRkpMRmRCUVVvc1EwRkJaMElzU1VGQmFFSXNRMEZCVUR0QlFVTklMRTA3T3pzN05rSkJNVUpYTzBGQlExSXNiMEpCUVU4c1MwRkJTeXhOUVVGYU8wRkJRMGc3T3pzMlFrRkRaVHRCUVVOYUxHOUNRVUZQTEV0QlFVc3NWVUZCV2p0QlFVTklPenM3TmtKQlEyVTdRVUZEV2l4dlFrRkJUeXhMUVVGTExGVkJRVm83UVVGRFNEczdPenM3TzIxQ1FYWkNaMElzVnpzN096czdPenM3T3pzN096czdPenRCUTBweVFqczdPenRCUVVOQk96czdPenM3T3p0TFFVVnhRaXhMTzBGQlEycENMSE5DUVVGelF6dEJRVUZCTERCRlFVRktMRVZCUVVrN08wRkJRVUVzWVVGQmVrSXNSVUZCZVVJc1VVRkJla0lzUlVGQmVVSTdRVUZCUVN4aFFVRnlRaXhKUVVGeFFpeFJRVUZ5UWl4SlFVRnhRanRCUVVGQkxHRkJRV1lzVDBGQlpTeFJRVUZtTEU5QlFXVTdPMEZCUVVFN08wRkJRMnhETEdOQlFVc3NSMEZCVEN4SFFVRlhMRTFCUVUwc2RVSkJRV3BDTzBGQlEwRXNZMEZCU3l4TFFVRk1MRWRCUVdFc1NVRkJZanM3UVVGRlFTeGhRVUZKTEU5QlFVOHNUMEZCVUN4TFFVRnRRaXhSUVVGdVFpeEpRVUVyUWl4VlFVRlZMRU5CUVRkRExFVkJRV2RFTzBGQlF6VkRMR3RDUVVGTExGRkJRVXdzUjBGQlowSXNUMEZCYUVJN1FVRkRTQ3hWUVVaRUxFMUJSMHM3UVVGRFJDeHJRa0ZCU3l4UlFVRk1MRWRCUVdkQ0xGTkJRVk1zUzBGQlN5eEhRVUZNTEV0QlFXRXNTVUZCZEVJc1EwRkJhRUk3UVVGRFNEdEJRVU5LT3p0eFFrRlpSQ3hsTERoQ1FVRnJRanRCUVVOa0xIVkNRVUZKTEVsQlFVb3NRMEZCVXl4MVFrRkJWRHRCUVVOQkxHZENRVUZQTEV0QlFVc3NVMEZCVEN4RFFVRmxPMEZCUTJ4Q0xHbENRVUZKTEV0QlFVc3NSVUZFVXp0QlFVVnNRaXh0UWtGQlRTeExRVUZMTEVsQlJrODdRVUZIYkVJc2MwSkJRVk1zUzBGQlN6dEJRVWhKTEZWQlFXWXNRMEZCVUR0QlFVdElMRTA3TzFkQlJVMHNhVUlzT0VKQlFXdENMR0VzUlVGQlpUdEJRVU53UXl4MVFrRkJTU3hKUVVGS0xFTkJRVk1zZVVKQlFWUTdRVUZEUVN4blFrRkJUeXhKUVVGSkxFdEJRVW9zUTBGQlZTeExRVUZMTEV0QlFVd3NRMEZCVnl4aFFVRllMRU5CUVZZc1EwRkJVRHRCUVVOSUxFMDdPMWRCUlUwc1pTdzBRa0ZCWjBJc1R5eEZRVUZUTEVjc1JVRkJTenRCUVVOcVF5eDFRa0ZCU1N4SlFVRktMRU5CUVZNc2RVSkJRVlE3TzBGQlJVRXNZVUZCU1N4VFFVRlRMRXRCUVVzc1IwRkJUQ3hMUVVGaExFbEJRV0lzUjBGQmIwSXNSMEZCYWtNN08wRkJSVUVzWjBKQlFVOHNVVUZCVVN4VlFVRlNMRWRCUVhGQ0xFbEJRWEpDTEVOQlFUQkNMR2RDUVVGUk8wRkJRM0pETERKQ1FVRkpMRWxCUVVvc1EwRkJVeXhWUVVGVUxFVkJRWEZDTEVsQlFYSkNPenRCUVVWQkxHbENRVUZKTEZkQlFWY3NSVUZCWmp0QlFVaHhRenRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJMSGxDUVVrMVFpeEhRVW8wUWp0QlFVczNRaXg1UWtGQlNTeFJRVUZSTEVkQlFWSXNRMEZCV1N4SFFVRmFMRVZCUVdsQ0xFbEJRV3BDTEVOQlFYTkNMR2RDUVVGUk8wRkJRMnhETERaQ1FVRkpMRk5CUVZNc1MwRkJZanM3UVVGRlFTdzJRa0ZCU1N4SlFVRktMRVZCUVZVN1FVRkRUaXhwUTBGQlNUdEJRVU5CTEhGRFFVRkpMRkZCUVZFc1RVRkJUU3hwUWtGQlRpeERRVUYzUWl4SlFVRjRRaXhEUVVGYU96dEJRVVZCTEN0RFFVRkpMRWxCUVVvc1EwRkJVeXh4UWtGQlZDeEZRVUZuUXl4SFFVRm9ReXhGUVVGeFF5eE5RVUZOTEU5QlFUTkRPenRCUVVWQkxIRkRRVUZKTEUxQlFVMHNUMEZCVGl4SlFVRnBRaXhOUVVGeVFpeEZRVUUyUWp0QlFVTjZRaXc0UTBGQlV5eEpRVUZVTzBGQlEwZzdRVUZEU2l3NFFrRlNSQ3hEUVZOQkxFOUJRVThzUTBGQlVDeEZRVUZWTzBGQlEwNHNLME5CUVVrc1MwRkJTaXhEUVVGVkxEWkNRVUZXTEVWQlFYbERMRWRCUVhwRExFVkJRVGhETEVWQlFVVXNUMEZCYUVRN1FVRkRRU3d3UTBGQlV5eEpRVUZVTzBGQlEwZzdRVUZEU2l3d1FrRmtSQ3hOUVdWTE8wRkJRMFFzTWtOQlFVa3NTVUZCU2l4RFFVRlRMRGhDUVVGVUxFVkJRWGxETEVkQlFYcERPMEZCUTBFc2MwTkJRVk1zU1VGQlZEdEJRVU5JT3p0QlFVVkVMRFpDUVVGSkxFMUJRVW9zUlVGQldUdEJRVU5TTERKRFFVRkpMRWxCUVVvc1EwRkJVeXgzUWtGQlZDeEZRVUZ0UXl4SFFVRnVRenRCUVVOQkxHOURRVUZQTEZGQlFWRXNUVUZCVWl4RFFVRmxMRWRCUVdZc1EwRkJVRHRCUVVOSU8wRkJRMG9zYzBKQk0wSlBMRU5CVEhsQ096czdRVUZyUTJwRExEaENRVUZUTEVsQlFWUXNRMEZCWXl4RFFVRmtPMEZCYkVOcFF6czdRVUZKY2tNc2MwTkJRV2RDTEVsQlFXaENMRGhJUVVGelFqdEJRVUZCTEhsQ1FVTmtMRU5CUkdNN08wRkJRVUU3UVVFclFuSkNPMEZCYmtOdlF6dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVhGRGNrTXNNa0pCUVVrc1NVRkJTaXhEUVVGVExESkNRVUZVTEVWQlFYTkRMRk5CUVZNc1RVRkJMME03UVVGRFFTeHZRa0ZCVHl4UlFVRlJMRWRCUVZJc1EwRkJXU3hSUVVGYUxFTkJRVkE3UVVGRFNDeFZRWFpEVFN4RFFVRlFPMEZCZDBOSUxFMDdPenM3TmtKQmNrVlJPMEZCUTB3c2IwSkJRVThzUzBGQlN5eEhRVUZhTzBGQlEwZzdPenMyUWtGRFZUdEJRVU5RTEc5Q1FVRlBMRXRCUVVzc1MwRkJXanRCUVVOSU96czdOa0pCUTJFN1FVRkRWaXh2UWtGQlR5eExRVUZMTEZGQlFWbzdRVUZEU0RzN096czdPMjFDUVhKQ1owSXNTenM3T3pzN096czdPenM3TzIxQ1EyVkhMRTA3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRkJWQ3hWUVVGVExFMUJRVlFzUjBGQmEwSTdRVUZETjBJc1UwRkJTU3hoUVVGaExHdERRVUZxUWp0QlFVTkJMRk5CUVVrc1RVRkJUU3hyUWtGQlZqdEJRVU5CTEZOQlFVa3NTVUZCU1N4RFFVRlNPMEZCUTBFc1UwRkJTU3hsUVVGbExFVkJRVzVDTzBGQlEwRXNWVUZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEZkQlFWY3NUVUZCTDBJc1JVRkJkVU1zUjBGQmRrTXNSVUZCTkVNN1FVRkRlRU1zWVVGQlNTeFhRVUZYTEVOQlFWZ3NUVUZCYTBJc1IwRkJiRUlzU1VGQmVVSXNWMEZCVnl4RFFVRllMRTFCUVd0Q0xFZEJRUzlETEVWQlFXOUVPenRCUVVWb1JDeHBRa0ZCU1N4TFFVRkxMRTFCUVV3c1MwRkJaMElzUlVGQmFFSXNSMEZCY1VJc1EwRkJla0k3UVVGRFNEczdRVUZGUkN4aFFVRkpMRmRCUVZjc1EwRkJXQ3hOUVVGclFpeEhRVUYwUWl4RlFVRXlRanRCUVVOMlFpdzJRa0ZCWjBJc1NVRkJTU3hEUVVGS0xFTkJRV2hDTzBGQlEwZ3NWVUZHUkN4TlFVVlBMRWxCUVVrc1YwRkJWeXhEUVVGWUxFMUJRV3RDTEVkQlFYUkNMRVZCUVRKQ096dEJRVVU1UWl4clFrRkJTeXhIUVVGTUxFTTdRVUZEUVN4clFrRkJTeXhIUVVGTUxFTTdRVUZEUVN3MlFrRkJaMElzU1VGQlNTeERRVUZLTEVOQlFXaENPMEZCUTBnc1ZVRk1UU3hOUVV0Qk8wRkJRMGdzTmtKQlFXZENMRmRCUVZjc1EwRkJXQ3hEUVVGb1FqdEJRVU5JTzBGQlEwbzdRVUZEUkN4WlFVRlBMRmxCUVZBN1FVRkRTRHM3T3pzN096czdPenM3T3pzN096dEJRM3BEUkRzN096czdPenM3UVVGRlFTeExRVUZOTEZsQlFWa3NVVUZCYkVJN08wdEJSWEZDTEdNN1FVRkRha0lzTmtKQlFWa3NSMEZCV2l4RlFVRnBRanRCUVVGQk96dEJRVVZpTEdGQlFVa3NVMEZCVXl4eFFrRkJWeXhuUWtGQldDeERRVUUwUWl4SFFVRTFRaXhGUVVGcFF5eEhRVUZxUXl4RFFVRmlPenRCUVVWQkxHTkJRVXNzUzBGQlRDeEhRVUZoTEU5QlFVOHNTMEZCY0VJN1FVRkRRU3hqUVVGTExHbENRVUZNTEVkQlFYbENMRTlCUVU4c2FVSkJRV2hETzBGQlEwRXNZMEZCU3l4VFFVRk1MRWRCUVdsQ0xFOUJRVThzVTBGQmVFSTdPMEZCUlVFc1kwRkJTeXhMUVVGTUxFZEJRV0VzVDBGQlR5eExRVUZ3UWp0QlFVTkJMR05CUVVzc1VVRkJUQ3hIUVVGblFpeFBRVUZQTEZGQlFYWkNPMEZCUTBFc1kwRkJTeXhoUVVGTUxFZEJRWEZDTEU5QlFVOHNZVUZCTlVJN1FVRkRRU3hqUVVGTExGbEJRVXdzUjBGQmIwSXNUMEZCVHl4WlFVRXpRanRCUVVOQkxHTkJRVXNzVlVGQlRDeEhRVUZyUWl4UFFVRlBMRlZCUVhwQ08wRkJRMEVzWTBGQlN5eExRVUZNTEVkQlFXRXNUMEZCVHl4TFFVRndRanRCUVVOQkxHTkJRVXNzVDBGQlRDeEhRVUZsTEZOQlFXWXNRenM3UVVGRlFTeGhRVUZKTEdGQlFXRXNVMEZCVXl4UFFVRlBMRlZCUVdoQ0xFTkJRV3BDTzBGQlEwRXNZVUZCU1N4UFFVRlBMRlZCUVZBc1MwRkJjMElzVVVGQmRFSXNTVUZCYTBNc1lVRkJZU3hEUVVGdVJDeEZRVUZ6UkR0QlFVTnNSQ3hwUWtGQlNTeE5RVUZOTEZOQlFWTXNTMEZCU3l4SFFVRk1MRXRCUVdFc1NVRkJkRUlzUTBGQlZqdEJRVU5CTEd0Q1FVRkxMRlZCUVV3c1IwRkJhMElzVFVGQlRTeFZRVUY0UWp0QlFVTklPMEZCUTBvN096czdOa0pCUldkQ08wRkJRMklzYVVKQlFVa3NTMEZCU3l4VlFVRlVMRVZCUVhGQ08wRkJRMnBDTEhGQ1FVRkpMRTFCUVUwc1UwRkJVeXhMUVVGTExFZEJRVXdzUzBGQllTeEpRVUYwUWl4RFFVRldPMEZCUTBFc2QwSkJRVThzUzBGQlN5eFZRVUZNTEVkQlFXdENMRWRCUVhwQ08wRkJRMGc3UVVGRFJDeHZRa0ZCVHl4VFFVRlFPMEZCUTBnN096czJRa0ZGWVR0QlFVTldMR2xDUVVGSkxHRkJRV0VzUzBGQlN5eFZRVUYwUWp0QlFVTkJMR2xDUVVGSkxHVkJRV1VzVTBGQmJrSXNSVUZCT0VJN1FVRkRNVUlzZDBKQlFVOHNZMEZCWXl4RFFVRnlRanRCUVVOSU8wRkJRMFFzYjBKQlFVOHNVMEZCVUR0QlFVTklPenM3TmtKQlJWazdRVUZEVkN4dlFrRkJUeXhEUVVGRExFdEJRVXNzUzBGQlRDeEpRVUZqTEVWQlFXWXNSVUZCYlVJc1MwRkJia0lzUTBGQmVVSXNSMEZCZWtJc1EwRkJVRHRCUVVOSU96czdOa0pCUlc5Q08wRkJRMnBDTEc5Q1FVRlBMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFOUJRVm9zUTBGQmIwSXNVMEZCY0VJc1MwRkJhME1zUTBGQmVrTTdRVUZEU0RzN096czdPMjFDUVRsRFowSXNZenM3T3pzN096czdPenM3T3p0QlEwcHlRanM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3T3pzN096dExRVVZ4UWl4akxFZEJRMnBDTERoQ1FVRnJSVHRCUVVGQkxGTkJRWEpFTEVkQlFYRkVMRkZCUVhKRUxFZEJRWEZFTzBGQlFVRXNVMEZCYUVRc1lVRkJaMFFzVVVGQmFFUXNZVUZCWjBRN1FVRkJRU3hUUVVGcVF5eDNRa0ZCYVVNc1VVRkJha01zZDBKQlFXbERPMEZCUVVFc1UwRkJVQ3hKUVVGUExGRkJRVkFzU1VGQlR6czdRVUZCUVRzN1FVRkRPVVFzVTBGQlNTeERRVUZETEVkQlFVd3NSVUZCVlR0QlFVTk9MSFZDUVVGSkxFdEJRVW9zUTBGQlZTeHBRMEZCVmp0QlFVTkJMR1ZCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzUzBGQlZpeERRVUZPTzBGQlEwZzdPMEZCUlVRc1UwRkJTU3hoUVVGS0xFVkJRVzFDTzBGQlEyWXNaVUZCVFN4eFFrRkJWeXhoUVVGWUxFTkJRWGxDTEVkQlFYcENMRVZCUVRoQ0xHVkJRVGxDTEVWQlFTdERMR0ZCUVM5RExFTkJRVTQ3TzBGQlJVRXNZVUZCU1N4M1FrRkJTaXhGUVVFNFFqdEJRVU14UWl4dFFrRkJUU3h4UWtGQlZ5eGhRVUZZTEVOQlFYbENMRWRCUVhwQ0xFVkJRVGhDTERCQ1FVRTVRaXhGUVVFd1JDeDNRa0ZCTVVRc1EwRkJUanM3UVVGRlFTeHBRa0ZCU1N4SlFVRktMRVZCUVZVN1FVRkRUaXh6UWtGQlN5eExRVUZNTEVkQlFXRXNiMEpCUVZVc1JVRkJSU3hWUVVGR0xFVkJRVllzUTBGQllqczdRVUZGUVN4MVFrRkJUU3h4UWtGQlZ5eGhRVUZZTEVOQlFYbENMRWRCUVhwQ0xFVkJRVGhDTEU5QlFUbENMRVZCUVhWRExFdEJRVXNzUzBGQlRDeERRVUZYTEVWQlFXeEVMRU5CUVU0N1FVRkRTRHRCUVVOS08wRkJRMG83TzBGQlJVUXNWVUZCU3l4SFFVRk1MRWRCUVZjc1IwRkJXRHRCUVVOSUxFVTdPMjFDUVhSQ1owSXNZenM3T3pzN096czdPenM3T3p0QlEwcHlRanM3T3pzN096czdPMHRCUlhGQ0xHVXNSMEZEYWtJc2VVSkJRVmtzUjBGQldpeEZRVUZwUWp0QlFVRkJPenRCUVVWaUxGTkJRVWtzVTBGQlV5eHhRa0ZCVnl4blFrRkJXQ3hEUVVFMFFpeEhRVUUxUWl4RlFVRnBReXhIUVVGcVF5eERRVUZpT3p0QlFVVkJMRlZCUVVzc1MwRkJUQ3hIUVVGaExFOUJRVThzUzBGQmNFSTdRVUZEUVN4VlFVRkxMR2xDUVVGTUxFZEJRWGxDTEU5QlFVOHNhVUpCUVdoRE8wRkJRMEVzVlVGQlN5eFRRVUZNTEVkQlFXbENMRTlCUVU4c1UwRkJlRUk3TzBGQlJVRXNWVUZCU3l4TFFVRk1MRWRCUVdFc1QwRkJUeXhMUVVGd1FqdEJRVU5JTEVVN08yMUNRVlpuUWl4bE96czdPenM3T3pzN096czdPenM3TzBGRFJuSkNPenM3T3pzN096dExRVVZ4UWl4clFqdEJRVU5xUWl4dFEwRkJZVHRCUVVGQk96dEJRVU5VTEdOQlFVc3NTMEZCVEN4SFFVRmhMRVZCUVdJN1FVRkRTRHM3YTBOQlJVUXNUeXh2UWtGQlVTeEhMRVZCUVVzN1FVRkRWQ3gxUWtGQlNTeEpRVUZLTEVOQlFWTXNORUpCUVZRc1JVRkJkVU1zUjBGQmRrTTdRVUZEUVN4blFrRkJUeXhMUVVGTExFdEJRVXdzUTBGQlZ5eEhRVUZZTEVOQlFWQTdRVUZEU0N4Tk96dHJRMEZGUkN4UExHOUNRVUZSTEVjc1JVRkJTeXhMTEVWQlFVMDdRVUZEWml4MVFrRkJTU3hKUVVGS0xFTkJRVk1zTkVKQlFWUXNSVUZCZFVNc1IwRkJka003UVVGRFFTeGpRVUZMTEV0QlFVd3NRMEZCVnl4SFFVRllMRWxCUVd0Q0xFdEJRV3hDTzBGQlEwZ3NUVHM3YTBOQlJVUXNWU3gxUWtGQlZ5eEhMRVZCUVVrN1FVRkRXQ3gxUWtGQlNTeEpRVUZLTEVOQlFWTXNLMEpCUVZRc1JVRkJNRU1zUjBGQk1VTTdRVUZEUVN4blFrRkJUeXhMUVVGTExFdEJRVXdzUTBGQlZ5eEhRVUZZTEVOQlFWQTdRVUZEU0N4Tk96dHJRMEZOUkN4SExHZENRVUZKTEVzc1JVRkJUenRCUVVOUUxHZENRVUZQTEU5QlFVOHNiVUpCUVZBc1EwRkJNa0lzUzBGQlN5eExRVUZvUXl4RlFVRjFReXhMUVVGMlF5eERRVUZRTzBGQlEwZ3NUVHM3T3pzMlFrRk9XVHRCUVVOVUxHOUNRVUZQTEU5QlFVOHNiVUpCUVZBc1EwRkJNa0lzUzBGQlN5eExRVUZvUXl4RlFVRjFReXhOUVVFNVF6dEJRVU5JT3pzN096czdiVUpCZEVKblFpeHJRanM3T3pzN096czdPenM3T3pzN08wRkRSbkpDT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenM3T3pzN096czdPenRMUVVWeFFpeFhPenM3UVVGRGFrSXNORUpCUVRKQ08wRkJRVUVzWVVGQlppeFJRVUZsTEhsRVFVRktMRVZCUVVrN08wRkJRVUU3TzBGQlJYWkNMR0ZCUVVrc1JVRkJSU3hwUkVGQlJpeERRVUZLTEVWQlFXZEVPMEZCUXpWRExIZENRVUZYTEd0RFFVRjNRaXhSUVVGNFFpeERRVUZZTzBGQlEwZzdPMEZCU25OQ0xITkVRVXQyUWl4MVFrRkJUU3hSUVVGT0xFTkJUSFZDT3p0QlFVOTJRaXhsUVVGTExFOUJRVXdzUjBGQlpTeG5RMEZCYzBJc1VVRkJkRUlzUTBGQlpqczdRVUZGUVN4aFFVRkpMRTFCUVVzc1VVRkJUQ3hEUVVGakxHOUNRVUZzUWl4RlFVRjNRenRCUVVOd1F5d3lRa0ZCU1N4SlFVRktMRU5CUVZNc05rUkJRVlE3UVVGRFFTeHRRa0ZCU3l4dFFrRkJUQ3hIUVVFeVFpeDFRMEZCTTBJN1FVRkRTRHRCUVZwelFqdEJRV0V4UWpzN01rSkJiVUpFTEU4c2MwSkJRVlU3UVVGRFRpeDFRa0ZCU1N4SlFVRktMRU5CUVZNc2NVSkJRVlE3TzBGQlJVRXNaMEpCUVU4c1MwRkJTeXhUUVVGTUxFZEJRV2xDTEVsQlFXcENMRU5CUVhOQ0xHZENRVUZSTzBGQlEycERMR2xDUVVGSkxFbEJRVW9zUlVGQlZUdEJRVU5PTEN0Q1FVRkpMRWxCUVVvc1EwRkJVeXhoUVVGVU8wRkJRMEVzZDBKQlFVOHNTVUZCVUR0QlFVTklMR05CU0VRc1RVRkpTenRCUVVORUxDdENRVUZKTEVsQlFVb3NRMEZCVXl3eVFrRkJWRHRCUVVOQkxIZENRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTktMRlZCVkUwc1EwRkJVRHRCUVZWSUxFMDdPekpDUVVWRUxGVXNlVUpCUVdFN1FVRkJRVHM3UVVGRFZDeDFRa0ZCU1N4SlFVRktMRU5CUVZNc2QwSkJRVlE3TzBGQlJVRXNaMEpCUVU4c1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVsQlFXaENMRVZCUVhOQ0xFbEJRWFJDTEVOQlFUSkNMRmxCUVUwN1FVRkRjRU1zTWtKQlFVa3NTVUZCU2l4RFFVRlRMREpDUVVGVU96dEJRVVZCTEc5Q1FVRkxMRTlCUVV3c1EwRkJZU3hOUVVGaU8wRkJRMGdzVlVGS1RTeERRVUZRTzBGQlMwZ3NUVHM3TWtKQlJVUXNWeXd3UWtGQmRVSTdRVUZCUVN4aFFVRllMRWxCUVZjc2VVUkJRVW9zUlVGQlNUczdRVUZEYmtJc2RVSkJRVWtzU1VGQlNpeERRVUZUTEhsQ1FVRlVPenRCUVVWQkxHRkJRVWtzVFVGQlRTeExRVUZMTEZsQlFVd3NTVUZCY1VJc1MwRkJTeXhSUVVGTUxFTkJRV01zYTBKQlFXNURMRWxCUVhsRUxFdEJRVXNzVVVGQlRDeERRVUZqTEZsQlFXcEdPMEZCUTBFc1lVRkJTU3hEUVVGRExFZEJRVXdzUlVGQlZUdEJRVU5PTERKQ1FVRkpMRXRCUVVvc1EwRkJWU3hyUkVGQlZqdEJRVU5CTEc5Q1FVRlBMRkZCUVZFc1RVRkJVaXhEUVVGbExFbEJRVWtzUzBGQlNpeERRVUZWTEd0RVFVRldMRU5CUVdZc1EwRkJVRHRCUVVOSU96dEJRVVZFTEdOQlFVc3NXVUZCVEN4SFFVRnZRaXhIUVVGd1FqdEJRVU5CTEdOQlFVc3NUMEZCVEN4SFFVRmxMRTlCUVdZN08wRkJSVUVzWjBKQlFVOHNTMEZCU3l4UFFVRk1MRU5CUVdFc1NVRkJZaXhGUVVGdFFpeExRVUZMTEdWQlFYaENMRVZCUVhsRE8wRkJRelZETEhWQ1FVRlZMRWRCUkd0RE8wRkJSVFZETEd0RFFVRnhRaXhMUVVGTExHMUNRVUZNTEVsQlFUUkNMRXRCUVVzc1VVRkJUQ3hEUVVGakxHMUNRVVp1UWp0QlFVYzFReXhuUTBGQmJVSXNTMEZCU3l4cFFrRkJUQ3hKUVVFd1FpeExRVUZMTEZGQlFVd3NRMEZCWXp0QlFVaG1MRlZCUVhwRExFTkJRVkE3UVVGTFNDeE5PenN5UWtGRFJDeHRRaXhuUTBGQmIwSXNSeXhGUVVGTE8wRkJRM0pDTEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXhwUTBGQlZEdEJRVU5CTEdkQ1FVRlBMRXRCUVVzc1pVRkJUQ3hEUVVGeFFpeEhRVUZ5UWl4RlFVRXdRaXhMUVVGTExHVkJRUzlDTEVOQlFWQTdRVUZEU0N4Tk96c3lRa0ZGUkN4WkxESkNRVUYzUWp0QlFVRkJMR0ZCUVZnc1NVRkJWeXg1UkVGQlNpeEZRVUZKT3p0QlFVTndRaXgxUWtGQlNTeEpRVUZLTEVOQlFWTXNNRUpCUVZRN08wRkJSVUVzWVVGQlNTeE5RVUZOTEV0QlFVc3NXVUZCVEN4SlFVRnhRaXhMUVVGTExGRkJRVXdzUTBGQll5eHRRa0ZCTjBNN1FVRkRRU3hoUVVGSkxFTkJRVU1zUjBGQlRDeEZRVUZWTzBGQlEwNHNNa0pCUVVrc1MwRkJTaXhEUVVGVkxHMURRVUZXTzBGQlEwRXNiMEpCUVU4c1VVRkJVU3hOUVVGU0xFTkJRV1VzU1VGQlNTeExRVUZLTEVOQlFWVXNiVU5CUVZZc1EwRkJaaXhEUVVGUU8wRkJRMGc3TzBGQlJVUXNZMEZCU3l4WlFVRk1MRWRCUVc5Q0xFZEJRWEJDTzBGQlEwRXNZMEZCU3l4TlFVRk1MRWRCUVdNc1RVRkJaRHM3UVVGRlFTeG5Ra0ZCVHl4TFFVRkxMRTlCUVV3c1EwRkJZU3hKUVVGaUxFVkJRVzFDTEV0QlFVc3NaMEpCUVhoQ0xFTkJRVkE3UVVGRFNDeE5PenN5UWtGRFJDeHZRaXhwUTBGQmNVSXNSeXhGUVVGTE8wRkJRM1JDTEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXhyUTBGQlZEdEJRVU5CTEdkQ1FVRlBMRXRCUVVzc1pVRkJUQ3hEUVVGeFFpeEhRVUZ5UWl4RlFVRXdRaXhMUVVGTExHZENRVUV2UWl4RFFVRlFPMEZCUTBnc1RUczdNa0pCUlVRc1R5eHZRa0ZCVVN4SkxFVkJRVTBzVXl4RlFVRnBRenRCUVVGQk96dEJRVUZCTEdGQlFYUkNMR1ZCUVhOQ0xIbEVRVUZLTEVWQlFVazdPMEZCUXpORExIVkNRVUZKTEVsQlFVb3NRMEZCVXl4VFFVRlVPMEZCUTBFc1owSkJRVThzUzBGQlN5eFpRVUZNTEVOQlFXdENMRWxCUVd4Q0xFVkJRWGRDTEZOQlFYaENMRVZCUVcxRExHVkJRVzVETEVWQlFXOUVMRWxCUVhCRUxFTkJRWGxFTEhWQ1FVRmxPMEZCUXpORkxHOUNRVUZQTEU5QlFVc3NWVUZCVEN4RFFVRm5RaXhaUVVGWkxFZEJRVFZDTEVOQlFWQTdRVUZEU0N4VlFVWk5MRU5CUVZBN1FVRkhTQ3hOT3pzeVFrRkRSQ3hsTERSQ1FVRm5RaXhITEVWQlFVc3NVeXhGUVVGWE8wRkJRelZDTEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXhwUWtGQlZEdEJRVU5CTEdkQ1FVRlBMRlZCUVZVc1VVRkJWaXhEUVVGdFFpeEhRVUZ1UWl4RFFVRlFPMEZCUTBnc1RUczdNa0pCUTBRc1VTeHhRa0ZCVXl4SkxFVkJRVTBzVXl4RlFVRnBRenRCUVVGQk96dEJRVUZCTEdGQlFYUkNMR1ZCUVhOQ0xIbEVRVUZLTEVWQlFVazdPMEZCUXpWRExIVkNRVUZKTEVsQlFVb3NRMEZCVXl4VlFVRlVPMEZCUTBFc1owSkJRVThzUzBGQlN5eGhRVUZNTEVOQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEZOQlFYcENMRVZCUVc5RExHVkJRWEJETEVWQlFYRkVMRWxCUVhKRUxFTkJRVEJFTEhWQ1FVRmxPMEZCUXpWRkxHOUNRVUZQTEU5QlFVc3NWMEZCVEN4RFFVRnBRaXhaUVVGWkxFZEJRVGRDTEVOQlFWQTdRVUZEU0N4VlFVWk5MRU5CUVZBN1FVRkhTQ3hOT3pzeVFrRkRSQ3huUWl3MlFrRkJhVUlzUnl4RlFVRkxMRk1zUlVGQlZ6dEJRVU0zUWl4MVFrRkJTU3hKUVVGS0xFTkJRVk1zYTBKQlFWUTdRVUZEUVN4blFrRkJUeXhWUVVGVkxGRkJRVllzUTBGQmJVSXNSMEZCYmtJc1EwRkJVRHRCUVVOSUxFMDdPekpDUVVWRUxHTXNNa0pCUVdVc1NTeEZRVUZOTzBGQlEycENMSFZDUVVGSkxFbEJRVW9zUTBGQlV5dzBRa0ZCVkR0QlFVTkJMR2RDUVVGUExFdEJRVXNzV1VGQlRDeERRVUZyUWl4SlFVRnNRaXhGUVVGM1FpeExRVUZMTEd0Q1FVRTNRaXhEUVVGUU8wRkJRMGdzVFRzN01rSkJRMFFzYzBJc2JVTkJRWFZDTEVjc1JVRkJTenRCUVVONFFpeDFRa0ZCU1N4SlFVRktMRU5CUVZNc2IwTkJRVlE3UVVGRFFTeG5Ra0ZCVHl4TFFVRkxMRlZCUVV3c1EwRkJaMElzVDBGQlR5eExRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xFZEJRUzlETEVOQlFWQTdRVUZEU0N4Tk96c3lRa0ZEUkN4bExEUkNRVUZuUWl4SkxFVkJRVTA3UVVGRGJFSXNkVUpCUVVrc1NVRkJTaXhEUVVGVExEWkNRVUZVTzBGQlEwRXNaMEpCUVU4c1MwRkJTeXhoUVVGTUxFTkJRVzFDTEVsQlFXNUNMRVZCUVhsQ0xFdEJRVXNzYTBKQlFUbENMRU5CUVZBN1FVRkRTQ3hOT3pzeVFrRkRSQ3gxUWl4dlEwRkJkMElzUnl4RlFVRkxPMEZCUTNwQ0xIVkNRVUZKTEVsQlFVb3NRMEZCVXl4eFEwRkJWRHRCUVVOQkxHZENRVUZQTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhQUVVGUExFdEJRVXNzYTBKQlFVd3NRMEZCZDBJc1IwRkJhRVFzUTBGQlVEdEJRVU5JTEUwN096SkNRVVZFTEZrc2VVSkJRV0VzU1N4RlFVRk5MRk1zUlVGQmFVTTdRVUZCUVRzN1FVRkJRU3hoUVVGMFFpeGxRVUZ6UWl4NVJFRkJTaXhGUVVGSk96dEJRVU5vUkN4MVFrRkJTU3hKUVVGS0xFTkJRVk1zWTBGQlZEczdRVUZGUVN4blFrRkJUeXhWUVVGVkxFOUJRVllzUTBGQmEwSXNaVUZCYkVJc1JVRkJiVU1zU1VGQmJrTXNRMEZCZDBNc2EwSkJRVlU3UVVGRGNrUXNNa0pCUVVrc1NVRkJTaXhEUVVGVExEWkNRVUZVT3p0QlFVVkJMRzlDUVVGUExFOUJRVXNzYlVKQlFVd3NRMEZCZVVJc1NVRkJla0lzUlVGQkswSXNTVUZCTDBJc1EwRkJiME1zZVVKQlFXbENPMEZCUTNoRUxDdENRVUZKTEVsQlFVb3NRMEZCVXl4dlFrRkJWRHM3UVVGRlFTeHBRMEZCWjBJc1IwRkJhRUlzUjBGQmMwSXNZMEZCWXl4SFFVRndRenRCUVVOQkxIZENRVUZQTEU5QlFVOHNVVUZCVUN4RFFVRm5RaXhsUVVGb1FpeERRVUZRTzBGQlEwZ3NZMEZNVFN4RFFVRlFPMEZCVFVnc1ZVRlVUU3hEUVVGUU8wRkJWVWdzVFRzN01rSkJRMFFzVlN4MVFrRkJWeXhITEVWQlFVczdRVUZCUVRzN1FVRkRXaXgxUWtGQlNTeEpRVUZLTEVOQlFWTXNXVUZCVkRzN1FVRkZRU3huUWtGQlR5eExRVUZMTEhGQ1FVRk1MRU5CUVRKQ0xFZEJRVE5DTEVWQlFXZERMRWxCUVdoRExFTkJRWEZETERCQ1FVRnJRanRCUVVNeFJDd3lRa0ZCU1N4SlFVRktMRU5CUVZNc2NVSkJRVlE3TzBGQlJVRXNhVUpCUVVrc1QwRkJUeXh0UWtGQlV5eGpRVUZVTEVOQlFWZzdPMEZCUlVFc2IwSkJRVThzVDBGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFVkJRWE5DTEVsQlFYUkNMRU5CUVRKQ0xGbEJRVTA3UVVGRGNFTXNLMEpCUVVrc1NVRkJTaXhEUVVGVExHRkJRVlE3TzBGQlJVRXNkMEpCUVVzc1QwRkJUQ3hEUVVGaExFbEJRV0lzUTBGQmEwSXNTVUZCYkVJN08wRkJSVUVzZDBKQlFVOHNTVUZCVUR0QlFVTklMR05CVGswc1EwRkJVRHRCUVU5SUxGVkJXazBzUTBGQlVEdEJRV0ZJTEUwN096SkNRVVZFTEdFc05FSkJRVEJFTzBGQlFVRXNZVUZCTlVNc1NVRkJORU1zZVVSQlFYSkRMRVZCUVhGRE96dEJRVUZCT3p0QlFVRkJMR0ZCUVdwRExGTkJRV2xETzBGQlFVRXNZVUZCZEVJc1pVRkJjMElzZVVSQlFVb3NSVUZCU1RzN1FVRkRkRVFzZFVKQlFVa3NTVUZCU2l4RFFVRlRMR1ZCUVZRN08wRkJSVUVzWjBKQlFVOHNWVUZCVlN4UFFVRldMRU5CUVd0Q0xHVkJRV3hDTEVWQlFXMURMRWxCUVc1RExFTkJRWGRETEd0Q1FVRlZPMEZCUTNKRUxESkNRVUZKTEVsQlFVb3NRMEZCVXl3MlFrRkJWRHM3UVVGRlFTeHZRa0ZCVHl4UFFVRkxMRTlCUVV3c1IwRkJaU3hKUVVGbUxFTkJRVzlDTEdkQ1FVRlJPMEZCUXk5Q0xDdENRVUZKTEVsQlFVb3NRMEZCVXl4clEwRkJWRHM3UVVGRlFTeHhRa0ZCU1N4WFFVRlhMRXRCUVVzc1lVRkJUQ3hKUVVGelFpeFJRVUZSTEV0QlFVc3NVVUZCYkVRN1FVRkRRU3h4UWtGQlNTeFJRVUZLTEVWQlFXTTdRVUZEVml4dFEwRkJTU3hKUVVGS0xFTkJRVk1zZFVOQlFWUTdRVUZEUVN3d1FrRkJTeXhoUVVGTUxFZEJRWEZDTEZGQlFYSkNPMEZCUTBnN08wRkJSVVFzZDBKQlFVOHNUMEZCU3l4VlFVRk1MRWRCUVd0Q0xFbEJRV3hDTEVOQlFYVkNMRmxCUVUwN1FVRkRhRU1zYlVOQlFVa3NTVUZCU2l4RFFVRlRMSGREUVVGVU96dEJRVVZCTERSQ1FVRlBMRTlCUVVzc2IwSkJRVXdzUTBGQk1FSXNTVUZCTVVJc1JVRkJaME1zU1VGQmFFTXNRMEZCY1VNc01FSkJRV3RDTzBGQlF6RkVMSFZEUVVGSkxFbEJRVW9zUTBGQlV5eHhRa0ZCVkRzN1FVRkZRU3g1UTBGQlowSXNSMEZCYUVJc1IwRkJjMElzWlVGQlpTeEhRVUZ5UXp0QlFVTkJMR2REUVVGUExFOUJRVThzVVVGQlVDeERRVUZuUWl4bFFVRm9RaXhEUVVGUU8wRkJRMGdzYzBKQlRFMHNRMEZCVUR0QlFVMUlMR3RDUVZSTkxFTkJRVkE3UVVGVlNDeGpRVzVDVFN4RFFVRlFPMEZCYjBKSUxGVkJka0pOTEVOQlFWQTdRVUYzUWtnc1RUczdNa0pCUTBRc1Z5eDNRa0ZCV1N4SExFVkJRVXM3UVVGRFlpeDFRa0ZCU1N4SlFVRktMRU5CUVZNc1lVRkJWRHM3UVVGRlFTeG5Ra0ZCVHl4TFFVRkxMSE5DUVVGTUxFTkJRVFJDTEVkQlFUVkNMRVZCUVdsRExFbEJRV3BETEVOQlFYTkRMREpDUVVGdFFqdEJRVU0xUkN3eVFrRkJTU3hKUVVGS0xFTkJRVk1zYzBKQlFWUTdPMEZCUlVFc2IwSkJRVThzWlVGQlVEdEJRVU5JTEZWQlNrMHNRMEZCVUR0QlFVdElMRTA3T3pKQ1FVMUVMRk1zZDBKQlFWazdRVUZEVWl4MVFrRkJTU3hKUVVGS0xFTkJRVk1zVjBGQlZEczdRVUZGUVN4blFrRkJUeXhMUVVGTExGVkJRVXdzUTBGQlowSXNSMEZCYUVJc1EwRkJiMElzUzBGQlN5eGhRVUY2UWl4RlFVRjNReXhKUVVGNFF5eERRVUUyUXl4NVFrRkJhVUk3UVVGRGFrVXNhVUpCUVVrc1lVRkJTaXhGUVVGdFFqdEJRVU5tTEN0Q1FVRkpMRWxCUVVvc1EwRkJVeXd5UWtGQlZEdEJRVU5CTEhkQ1FVRlBMR1ZCUVVzc2FVSkJRVXdzUTBGQmRVSXNZVUZCZGtJc1EwRkJVRHRCUVVOSU96dEJRVVZFTERKQ1FVRkpMRWxCUVVvc1EwRkJVeXgxUWtGQlZEdEJRVU5CTEc5Q1FVRlBMRWxCUVZBN1FVRkRTQ3hWUVZKTkxFTkJRVkE3UVVGVFNDeE5PenN5UWtGRlJDeFZMSFZDUVVGWExFa3NSVUZCVFR0QlFVTmlMR0ZCUVVrc1NVRkJTaXhGUVVGVk8wRkJRMDRzTWtKQlFVa3NTVUZCU2l4RFFVRlRMSGxDUVVGVU96dEJRVVZCTEdsQ1FVRkpMR2RDUVVGblFpeExRVUZMTEdWQlFVd3NSVUZCY0VJN1FVRkRRU3h2UWtGQlR5eExRVUZMTEZWQlFVd3NRMEZCWjBJc1IwRkJhRUlzUTBGQmIwSXNTMEZCU3l4aFFVRjZRaXhGUVVGM1F5eGhRVUY0UXl4RFFVRlFPMEZCUTBnc1ZVRk1SQ3hOUVUxTE8wRkJRMFFzTWtKQlFVa3NTVUZCU2l4RFFVRlRMR3REUVVGVU8wRkJRMEVzYjBKQlFVOHNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFMUJRV2hDTEVOQlFYVkNMRXRCUVVzc1lVRkJOVUlzUTBGQlVEdEJRVU5JTzBGQlEwb3NUVHM3T3pzMlFrRTNUbmRDTzBGQlEzSkNMRzlDUVVGUExFdEJRVXNzVVVGQlRDeERRVUZqTEdsQ1FVRnlRanRCUVVOSU96czdOa0pCUTNGQ08wRkJRMnhDTEc5Q1FVRlBMRXRCUVVzc1VVRkJUQ3hEUVVGakxHTkJRWEpDTzBGQlEwZzdPenMyUWtGRGMwSTdRVUZEYmtJc2IwSkJRVThzUzBGQlN5eFJRVUZNTEVOQlFXTXNaVUZCY2tJN1FVRkRTRHM3T3paQ1FVTm5RanRCUVVOaUxHOUNRVUZQTEV0QlFVc3NVVUZCVEN4RFFVRmpMRk5CUVhKQ08wRkJRMGc3T3pzMlFrRkZXVHRCUVVOVUxHOUNRVUZQTEV0QlFVc3NUMEZCV2p0QlFVTklPenM3TmtKQmFVeHRRanRCUVVOb1FpdzRRa0ZCWlN4TFFVRkxMRkZCUVV3c1EwRkJZeXhUUVVFM1FpeFRRVUV3UXl4TFFVRkxMRkZCUVV3c1EwRkJZeXhUUVVGNFJEdEJRVU5JT3pzN096czdiVUpCYkU1blFpeFhPenM3T3pzN096czdPenM3T3pzN1FVTlFja0k3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdPenM3T3pzN096czdRVUZGUVN4TFFVRk5MRFpEUVVFMlF5eEZRVUZ1UkRzN1MwRkZjVUlzYlVJN096dEJRVU5xUWl4dlEwRlhVVHRCUVVGQkxEQkZRVUZLTEVWQlFVazdPMEZCUVVFc1lVRldTaXhyUWtGVlNTeFJRVlpLTEd0Q1FWVkpPMEZCUVVFc1lVRlVTaXh0UWtGVFNTeFJRVlJLTEcxQ1FWTkpPMEZCUVVFc1lVRlNTaXhwUWtGUlNTeFJRVkpLTEdsQ1FWRkpPMEZCUVVFc1lVRlFTaXh0UWtGUFNTeFJRVkJLTEcxQ1FVOUpPMEZCUVVFc01FTkJUa29zYjBKQlRVazdRVUZCUVN4aFFVNUtMRzlDUVUxSkxIbERRVTV0UWl4TFFVMXVRanRCUVVGQkxEQkRRVXhLTEcxRFFVdEpPMEZCUVVFc1lVRk1TaXh0UTBGTFNTeDVRMEZNYTBNc01FTkJTMnhETzBGQlFVRXNNRU5CU2tvc2FVSkJTVWs3UVVGQlFTeGhRVXBLTEdsQ1FVbEpMSGxEUVVwblFpeHBRMEZKYUVJN1FVRkJRU3gzUTBGSVNpeGpRVWRKTzBGQlFVRXNZVUZJU2l4alFVZEpMSFZEUVVoaExEaENRVWRpTzBGQlFVRXNlVU5CUmtvc1pVRkZTVHRCUVVGQkxHRkJSa29zWlVGRlNTeDNRMEZHWXl3clFrRkZaRHRCUVVGQkxHMURRVVJLTEZOQlEwazdRVUZCUVN4aFFVUktMRk5CUTBrc2EwTkJSRkVzYlVOQlFYbENMRVZCUVVVc1QwRkJUeXhwUWtGQlR5eGpRVUZvUWl4RlFVRjZRaXhEUVVOU096dEJRVUZCT3p0QlFVRkJMSE5FUVVOS0xDdENRVUZOTEZWQlFWVXNRMEZCVml4RFFVRk9MRU5CUkVrN08wRkJSMG9zWlVGQlN5eHRRa0ZCVEN4SFFVRXlRaXhyUWtGQk0wSTdRVUZEUVN4bFFVRkxMRzlDUVVGTUxFZEJRVFJDTEcxQ1FVRTFRanRCUVVOQkxHVkJRVXNzYTBKQlFVd3NSMEZCTUVJc2FVSkJRVEZDT3p0QlFVVkJMR1ZCUVVzc2IwSkJRVXdzUjBGQk5FSXNiVUpCUVRWQ08wRkJRMEVzWlVGQlN5eHhRa0ZCVEN4SFFVRTJRaXhEUVVGRExFTkJRVU1zYjBKQlFTOUNPMEZCUTBFc1pVRkJTeXh2UTBGQlRDeEhRVUUwUXl4dFEwRkJOVU03TzBGQlJVRXNaVUZCU3l4clFrRkJUQ3hIUVVFd1FpeHBRa0ZCTVVJN1FVRkRRU3hsUVVGTExHVkJRVXdzUjBGQmRVSXNZMEZCZGtJN1FVRkRRU3hsUVVGTExHZENRVUZNTEVkQlFYZENMR1ZCUVhoQ096dEJRVVZCTEdWQlFVc3NWVUZCVEN4SFFVRnJRaXhUUVVGc1FqdEJRV1pKTzBGQlowSlFPenM3T3paQ1FVVjNRanRCUVVOeVFpeHZRa0ZCVHl4TFFVRkxMRzFDUVVGYU8wRkJRMGc3T3pzMlFrRkRlVUk3UVVGRGRFSXNiMEpCUVU4c1MwRkJTeXh2UWtGQldqdEJRVU5JT3pzN05rSkJRM1ZDTzBGQlEzQkNMRzlDUVVGUExFdEJRVXNzYTBKQlFWbzdRVUZEU0RzN096WkNRVVY1UWp0QlFVTjBRaXh2UWtGQlR5eExRVUZMTEc5Q1FVRmFPMEZCUTBnN096czJRa0ZETUVJN1FVRkRka0lzYjBKQlFVOHNRMEZCUXl4RlFVRkZMRXRCUVVzc2JVSkJRVXdzU1VGQk5FSXNTMEZCU3l4eFFrRkJia01zUTBGQlVqdEJRVU5JT3pzN05rSkJSWGxETzBGQlEzUkRMRzlDUVVGUExFdEJRVXNzYjBOQlFWbzdRVUZEU0RzN096WkNRVVYxUWp0QlFVTndRaXh2UWtGQlR5eExRVUZMTEd0Q1FVRmFPMEZCUTBnN096czJRa0ZEYjBJN1FVRkRha0lzYjBKQlFVOHNTMEZCU3l4bFFVRmFPMEZCUTBnN096czJRa0ZEY1VJN1FVRkRiRUlzYjBKQlFVOHNTMEZCU3l4blFrRkJXanRCUVVOSU96czdOa0pCUldVN1FVRkRXaXh2UWtGQlR5eExRVUZMTEZWQlFWbzdRVUZEU0RzN096czdPMjFDUVM5RVowSXNiVUk3T3pzN096czdPenM3T3pzN096czdRVU5XY2tJN096czdPenM3TzB0QlJYRkNMR2xDT3pzN096dHBRMEZGYWtJc1R5eHpRa0ZCVlR0QlFVTk9MR2RDUVVGUExGRkJRVkVzVDBGQlVpeERRVUZuUWl4SlFVRm9RaXhEUVVGUU8wRkJRMGdzVFRzN2FVTkJSVVFzVVN4eFFrRkJVeXhOTEVWQlFWRTdRVUZEWWl4MVFrRkJTU3hKUVVGS0xFTkJRVk1zTkVKQlFWUTdPMEZCUlVFc1lVRkJTU3hEUVVGRExFMUJRVVFzU1VGQlZ5eERRVUZETEU5QlFVOHNSMEZCZGtJc1JVRkJORUk3UVVGRGVFSXNNa0pCUVVrc1MwRkJTaXhEUVVGVkxHbENRVUZXTzBGQlEwRXNiMEpCUVU4c1VVRkJVU3hOUVVGU0xFTkJRV1VzU1VGQlNTeExRVUZLTEVOQlFWVXNhVUpCUVZZc1EwRkJaaXhEUVVGUU8wRkJRMGc3TzBGQlJVUXNaMEpCUVU4c1VVRkJVQ3hIUVVGclFpeFBRVUZQTEVkQlFYcENPenRCUVVWQkxHZENRVUZQTEZGQlFWRXNUMEZCVWl4RlFVRlFPMEZCUTBnc1RUczdPenMyUWtGRlV6dEJRVU5PTERKQ1FVRkpMRWxCUVVvc1EwRkJVeXgxUWtGQlZEdEJRVU5CTEc5Q1FVRlBMRTlCUVU4c1VVRkJVQ3hEUVVGblFpeEpRVUYyUWp0QlFVTklPenM3T3pzN2JVSkJkRUpuUWl4cFFqczdPenM3T3pzN096czdPenRCUTBaeVFqczdPenRCUVVOQk96czdPenM3T3pzN1MwRkZjVUlzWXpzN096czdPRUpCUldwQ0xFOHNiMEpCUVZFc1RTeEZRVUZSTzBGQlExb3NZVUZCU1N4UlFVRlJMREJDUVVGblFpeE5RVUZvUWl4RFFVRmFPMEZCUTBFc1owSkJRVThzVVVGQlVTeFBRVUZTTEVOQlFXZENMRXRCUVdoQ0xFTkJRVkE3UVVGRFNDeE5PenM0UWtGRlJDeFJMSEZDUVVGVExFY3NSVUZCU3p0QlFVTldMSFZDUVVGSkxFbEJRVW9zUTBGQlV5eDVRa0ZCVkRzN1FVRkZRU3hoUVVGSk8wRkJRMEVzYlVOQlFWa3NXVUZCV2l4RFFVRjVRaXhIUVVGNlFqdEJRVU5CTEc5Q1FVRlBMRkZCUVZFc1QwRkJVaXhGUVVGUU8wRkJRMGdzVlVGSVJDeERRVWxCTEU5QlFVOHNRMEZCVUN4RlFVRlZPMEZCUTA0c2IwSkJRVThzVVVGQlVTeE5RVUZTTEVOQlFXVXNRMEZCWml4RFFVRlFPMEZCUTBnN1FVRkRTaXhOT3pzN096dHRRa0ZxUW1kQ0xHTTdPenM3T3pzN096czdPenM3T3pzN1FVTklja0k3T3pzN096czdPMEZCUlVFc1MwRkJUU3c0UWtGQk9FSXNSMEZCY0VNN1FVRkRRU3hMUVVGTkxIVkNRVUYxUWl3NFJFRkJOMEk3UVVGRFFTeExRVUZOTEhGQ1FVRnhRaXhSUVVFelFqczdTMEZGY1VJc1Z6dEJRVVZxUWl3d1FrRkJXU3hOUVVGYUxFVkJRVzlDTzBGQlFVRTdPMEZCUVVFN08wRkJRMmhDTEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXhyUWtGQlZEczdRVUZGUVN4alFVRkxMRkZCUVV3c1IwRkJaMElzU1VGQlNTeFBRVUZLTEVOQlFWa3NWVUZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGeFFqdEJRVU0zUXl4dFFrRkJTeXhSUVVGTUxFZEJRV2RDTEU5QlFXaENPMEZCUTBFc2JVSkJRVXNzVDBGQlRDeEhRVUZsTEUxQlFXWTdRVUZEU0N4VlFVaGxMRU5CUVdoQ096dEJRVXRCTEdOQlFVc3NhMEpCUVV3c1IwRkJNRUlzUzBGQlN5eFJRVUZNTEVOQlFXTXNTVUZCWkN4RFFVRnRRaXhKUVVGdVFpeERRVUV4UWp0QlFVTkJMR2RDUVVGUExHZENRVUZRTEVOQlFYZENMRk5CUVhoQ0xFVkJRVzFETEV0QlFVc3NhMEpCUVhoRExFVkJRVFJFTEV0QlFUVkVPenRCUVVWQkxHRkJRVWtzVjBGQlZ5eFBRVUZQTEcxQ1FVRlFMRWxCUVRoQ0xHOUNRVUUzUXp0QlFVTkJMR0ZCUVVrc1UwRkJVeXhQUVVGUExHbENRVUZRTEVsQlFUUkNMR3RDUVVGNlF6czdRVUZGUVN4alFVRkxMRTFCUVV3c1IwRkJZeXhQUVVGUExFbEJRVkFzUTBGQldTeEZRVUZhTEVWQlFXZENMRTFCUVdoQ0xFVkJRWGRDTEZGQlFYaENMRU5CUVdRN1FVRkRRU3hoUVVGSkxFdEJRVXNzVFVGQlZDeEZRVUZwUWp0QlFVTmlMREpDUVVGSkxFbEJRVW9zUTBGQlV5dzBRa0ZCVkR0QlFVTkJMR3RDUVVGTExIbENRVUZNTEVkQlFXbERMRTlCUVU4c1YwRkJVQ3hEUVVGdFFpeExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFbEJRVEZDTEVOQlFTdENMRWxCUVM5Q0xFTkJRVzVDTEVWQlFYbEVMREpDUVVGNlJDeERRVUZxUXp0QlFVTklPMEZCUTBvN096SkNRVVZFTEZFc2NVSkJRVk1zVFN4RlFVRlJPMEZCUTJJc2RVSkJRVWtzU1VGQlNpeERRVUZUTEhOQ1FVRlVPenRCUVVWQkxHRkJRVWtzUTBGQlF5eExRVUZMTEUxQlFWWXNSVUZCYTBJN1FVRkRaQ3hyUWtGQlN5eE5RVUZNTEVOQlFWa3NORUpCUVZvN1FVRkRTQ3hWUVVaRUxFMUJSMHNzU1VGQlNTeERRVUZETEUxQlFVUXNTVUZCVnl4RFFVRkRMRTlCUVU4c1IwRkJka0lzUlVGQk5FSTdRVUZETjBJc2EwSkJRVXNzVFVGQlRDeERRVUZaTEdsQ1FVRmFPMEZCUTBnc1ZVRkdTU3hOUVVkQk8wRkJRMFFzTWtKQlFVa3NTVUZCU2l4RFFVRlRMSE5DUVVGVU96dEJRVVZCTEd0Q1FVRkxMRTFCUVV3c1EwRkJXU3hMUVVGYU8wRkJRMEVzYTBKQlFVc3NUVUZCVEN4RFFVRlpMRTFCUVZvc1EwRkJiVUlzVVVGQmJrSXNSMEZCT0VJc1QwRkJUeXhIUVVGeVF6dEJRVU5JT3p0QlFVVkVMR2RDUVVGUExFdEJRVXNzVDBGQldqdEJRVU5JTEUwN096SkNRVTFFTEZFc2NVSkJRVk1zU1N4RlFVRk5PMEZCUTFnc1kwRkJTeXhSUVVGTU96dEJRVVZCTEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXgxUTBGQlZEdEJRVU5CTEdOQlFVc3NVVUZCVEN4RFFVRmpMRWxCUVdRN1FVRkRTQ3hOT3pzeVFrRkRSQ3hOTEcxQ1FVRlBMRThzUlVGQlV6dEJRVU5hTEdOQlFVc3NVVUZCVERzN1FVRkZRU3gxUWtGQlNTeExRVUZLTEVOQlFWVXNUMEZCVmp0QlFVTkJMR05CUVVzc1QwRkJUQ3hEUVVGaExFbEJRVWtzUzBGQlNpeERRVUZWTEU5QlFWWXNRMEZCWWp0QlFVTklMRTA3T3pKQ1FVVkVMRkVzZFVKQlFWYzdRVUZEVUN4MVFrRkJTU3hKUVVGS0xFTkJRVk1zYzBKQlFWUTdPMEZCUlVFc1owSkJRVThzYlVKQlFWQXNRMEZCTWtJc1UwRkJNMElzUlVGQmMwTXNTMEZCU3l4clFrRkJNME1zUlVGQkswUXNTMEZCTDBRN1FVRkRRU3huUWtGQlR5eGhRVUZRTEVOQlFYRkNMRXRCUVVzc2VVSkJRVEZDT3p0QlFVVkJMR05CUVVzc2VVSkJRVXdzUjBGQmFVTXNTVUZCYWtNN1FVRkRRU3hqUVVGTExIVkNRVUZNTEVkQlFTdENMRWxCUVM5Q096dEJRVVZCTEdGQlFVa3NTMEZCU3l4TlFVRlVMRVZCUVdkQ08wRkJRMW9zYTBKQlFVc3NUVUZCVEN4RFFVRlpMRXRCUVZvN1FVRkRTRHRCUVVORUxHTkJRVXNzVFVGQlRDeEhRVUZqTEVsQlFXUTdRVUZEU0N4Tk96c3lRa0ZGUkN4dlFpeHRRMEZCZFVJN1FVRkRia0lzZFVKQlFVa3NTVUZCU2l4RFFVRlRMR3REUVVGVU96dEJRVVZCTEdGQlFVa3NRMEZCUXl4TFFVRkxMRTFCUVU0c1NVRkJaMElzUzBGQlN5eE5RVUZNTEVOQlFWa3NUVUZCYUVNc1JVRkJkME03UVVGRGNFTXNhMEpCUVVzc1RVRkJUQ3hEUVVGWkxIRkNRVUZhTzBGQlEwZzdRVUZEU2l4Tk96c3lRa0ZGUkN4UkxIRkNRVUZUTEVNc1JVRkJSenRCUVVOU0xIVkNRVUZKTEVsQlFVb3NRMEZCVXl4elFrRkJWRHM3UVVGRlFTeGhRVUZKTEVWQlFVVXNUVUZCUml4TFFVRmhMRXRCUVVzc1QwRkJiRUlzU1VGRFFTeEZRVUZGTEUxQlFVWXNTMEZCWVN4TFFVRkxMRTFCUVV3c1EwRkJXU3hOUVVRM1FpeEZRVVZGTzBGQlEwVXNNa0pCUVVrc1NVRkJTaXhEUVVGVExHOUNRVUZVT3p0QlFVVkJMR2xDUVVGSkxFMUJRVTBzUlVGQlJTeEpRVUZHTEVsQlFWVXNSVUZCUlN4TlFVRkdMRU5CUVZNc1VVRkJWQ3hEUVVGclFpeEpRVUYwUXl4RE96dEJRVVZCTEd0Q1FVRkxMRkZCUVV3N08wRkJSVUVzYVVKQlFVa3NSMEZCU2l4RlFVRlRPMEZCUTB3c2MwSkJRVXNzVVVGQlRDeERRVUZqTEVWQlFVVXNTMEZCU3l4SFFVRlFMRVZCUVdRN1FVRkRTQ3hqUVVaRUxFMUJSMHM3UVVGRFJDeHpRa0ZCU3l4TlFVRk1MRU5CUVZrc05rSkJRVm83UVVGRFNEdEJRVU5LTzBGQlEwb3NUVHM3YVVKQlRVMHNXU3g1UWtGQllTeEhMRVZCUVVzN1FVRkRja0lzZFVKQlFVa3NTVUZCU2l4RFFVRlRMREJDUVVGVU96dEJRVVZCTEdGQlFVa3NUMEZCVHl4TlFVRllMRVZCUVcxQ08wRkJRMllzYlVKQlFVMHNUMEZCVHl4UFFVRlBMRkZCUVZBc1EwRkJaMElzU1VGQk4wSTdRVUZEUVN4cFFrRkJTU3hIUVVGS0xFVkJRVk03UVVGRFRDd3JRa0ZCU1N4SlFVRktMRU5CUVZNc0swSkJRVlE3UVVGRFFTeDNRa0ZCVHl4TlFVRlFMRU5CUVdNc1YwRkJaQ3hEUVVFd1FpeEhRVUV4UWl4RlFVRXJRaXhUUVVGVExGRkJRVlFzUjBGQmIwSXNTVUZCY0VJc1IwRkJNa0lzVTBGQlV5eEpRVUZ1UlR0QlFVTklPMEZCUTBvN1FVRkRTaXhOT3pzN096WkNRVE5GWVR0QlFVTldMRzlDUVVGUExFdEJRVXNzVVVGQldqdEJRVU5JT3pzN05rSkJNa1JoTzBGQlExWXNiMEpCUVU4c1UwRkJVeXhSUVVGVUxFZEJRVzlDTEVsQlFYQkNMRWRCUVRKQ0xGTkJRVk1zU1VGQk0wTTdRVUZEU0RzN096czdPMjFDUVhwSFowSXNWenM3T3pzN096czdPenM3T3p0QlEwNXlRanM3T3p0QlFVTkJPenM3T3pzN096czdTMEZGY1VJc1pUczdPenM3SzBKQlJXcENMRThzYzBKQlFWVTdRVUZEVGl4aFFVRkpMRkZCUVZFc05FSkJRVm83UVVGRFFTeG5Ra0ZCVHl4UlFVRlJMRTlCUVZJc1EwRkJaMElzUzBGQmFFSXNRMEZCVUR0QlFVTklMRTA3T3l0Q1FVVkVMRkVzY1VKQlFWTXNSeXhGUVVGTE8wRkJRMVlzZFVKQlFVa3NTVUZCU2l4RFFVRlRMREJDUVVGVU96dEJRVVZCTEdGQlFVazdRVUZEUVN4dlEwRkJZU3haUVVGaUxFTkJRVEJDTEVkQlFURkNPMEZCUTBFc2IwSkJRVThzVVVGQlVTeFBRVUZTTEVWQlFWQTdRVUZEU0N4VlFVaEVMRU5CU1VFc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFRpeHZRa0ZCVHl4UlFVRlJMRTFCUVZJc1EwRkJaU3hEUVVGbUxFTkJRVkE3UVVGRFNEdEJRVU5LTEUwN096czdPMjFDUVdwQ1owSXNaVHM3T3pzN096czdPenM3T3pzN096dEJRMGh5UWpzN096czdPenM3UVVGRlFTeExRVUZOTEdsQ1FVRnBRaXhKUVVGMlFqczdTMEZGY1VJc1dUdEJRVVZxUWl3MlFrRkJZenRCUVVGQk96dEJRVUZCT3p0QlFVTldMSFZDUVVGSkxFbEJRVW9zUTBGQlV5eHRRa0ZCVkRzN1FVRkZRU3hqUVVGTExGRkJRVXdzUjBGQlowSXNTVUZCU1N4UFFVRktMRU5CUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWp0QlFVTTNReXh0UWtGQlN5eFJRVUZNTEVkQlFXZENMRTlCUVdoQ08wRkJRMEVzYlVKQlFVc3NUMEZCVEN4SFFVRmxMRTFCUVdZN1FVRkRTQ3hWUVVobExFTkJRV2hDT3p0QlFVdEJMR05CUVVzc2EwSkJRVXdzUjBGQk1FSXNTMEZCU3l4UlFVRk1MRU5CUVdNc1NVRkJaQ3hEUVVGdFFpeEpRVUZ1UWl4RFFVRXhRanRCUVVOQkxHZENRVUZQTEdkQ1FVRlFMRU5CUVhkQ0xGTkJRWGhDTEVWQlFXMURMRXRCUVVzc2EwSkJRWGhETEVWQlFUUkVMRXRCUVRWRU96dEJRVVZCTEdOQlFVc3NUVUZCVEN4SFFVRmpMRTlCUVU4c1VVRkJVQ3hEUVVGblFpeGhRVUZvUWl4RFFVRTRRaXhSUVVFNVFpeERRVUZrTzBGQlEwRXNZMEZCU3l4TlFVRk1MRU5CUVZrc1MwRkJXaXhEUVVGclFpeFBRVUZzUWl4SFFVRTBRaXhOUVVFMVFqdEJRVU5CTEdkQ1FVRlBMRkZCUVZBc1EwRkJaMElzU1VGQmFFSXNRMEZCY1VJc1YwRkJja0lzUTBGQmFVTXNTMEZCU3l4TlFVRjBRenRCUVVOSU96czBRa0ZGUkN4UkxIRkNRVUZUTEUwc1JVRkJVVHRCUVVOaUxIVkNRVUZKTEVsQlFVb3NRMEZCVXl4MVFrRkJWRHM3UVVGRlFTeGhRVUZKTEVOQlFVTXNUVUZCUkN4SlFVRlhMRU5CUVVNc1QwRkJUeXhIUVVGMlFpeEZRVUUwUWp0QlFVTjRRaXhyUWtGQlN5eE5RVUZNTEVOQlFWa3NhVUpCUVZvN1FVRkRTQ3hWUVVaRUxFMUJSMHM3UVVGRFJDeHJRa0ZCU3l4TlFVRk1MRWRCUVdNc1QwRkJUeXhWUVVGUUxFTkJRV3RDTEV0QlFVc3NVVUZCVEN4RFFVRmpMRWxCUVdRc1EwRkJiVUlzU1VGQmJrSXNRMEZCYkVJc1JVRkJORU1zWTBGQk5VTXNRMEZCWkR0QlFVTkJMR3RDUVVGTExFMUJRVXdzUTBGQldTeEhRVUZhTEVkQlFXdENMRTlCUVU4c1IwRkJla0k3UVVGRFNEczdRVUZGUkN4blFrRkJUeXhMUVVGTExFOUJRVm83UVVGRFNDeE5PenMwUWtGTlJDeFJMSEZDUVVGVExFa3NSVUZCVFR0QlFVTllMR05CUVVzc1VVRkJURHM3UVVGRlFTeDFRa0ZCU1N4SlFVRktMRU5CUVZNc2RVTkJRVlE3UVVGRFFTeGpRVUZMTEZGQlFVd3NRMEZCWXl4SlFVRmtPMEZCUTBnc1RUczdORUpCUTBRc1RTeHRRa0ZCVHl4UExFVkJRVk03UVVGRFdpeGpRVUZMTEZGQlFVdzdPMEZCUlVFc2RVSkJRVWtzUzBGQlNpeERRVUZWTEU5QlFWWTdRVUZEUVN4alFVRkxMRTlCUVV3c1EwRkJZU3hKUVVGSkxFdEJRVW9zUTBGQlZTeFBRVUZXTEVOQlFXSTdRVUZEU0N4Tk96czBRa0ZGUkN4UkxIVkNRVUZYTzBGQlExQXNkVUpCUVVrc1NVRkJTaXhEUVVGVExIVkNRVUZVT3p0QlFVVkJMR2RDUVVGUExHMUNRVUZRTEVOQlFUSkNMRk5CUVROQ0xFVkJRWE5ETEV0QlFVc3NhMEpCUVRORExFVkJRU3RFTEV0QlFTOUVPMEZCUTBFc1owSkJRVThzV1VGQlVDeERRVUZ2UWl4TFFVRkxMRTFCUVhwQ08wRkJRMEVzWjBKQlFVOHNVVUZCVUN4RFFVRm5RaXhKUVVGb1FpeERRVUZ4UWl4WFFVRnlRaXhEUVVGcFF5eExRVUZMTEUxQlFYUkRPenRCUVVWQkxHTkJRVXNzVFVGQlRDeEhRVUZqTEVsQlFXUTdRVUZEUVN4alFVRkxMRTFCUVV3c1IwRkJZeXhKUVVGa08wRkJRMEVzWTBGQlN5eDFRa0ZCVEN4SFFVRXJRaXhKUVVFdlFqdEJRVU5JTEUwN096UkNRVVZFTEZFc2RVSkJRVmM3UVVGRFVDeDFRa0ZCU1N4SlFVRktMRU5CUVZNc2RVSkJRVlE3UVVGRFFTeGpRVUZMTEUxQlFVd3NRMEZCV1N4M1FrRkJXanRCUVVOSUxFMDdPelJDUVVWRUxGRXNjVUpCUVZNc1F5eEZRVUZITzBGQlExSXNkVUpCUVVrc1NVRkJTaXhEUVVGVExIVkNRVUZVT3p0QlFVVkJMR0ZCUVVrc1MwRkJTeXhOUVVGTUxFbEJRMEVzUlVGQlJTeE5RVUZHTEV0QlFXRXNTMEZCU3l4UFFVUnNRaXhKUVVWQkxFVkJRVVVzVFVGQlJpeExRVUZoTEV0QlFVc3NUVUZCVEN4RFFVRlpMR0ZCUmpkQ0xFVkJSMFU3UVVGRFJTeHBRa0ZCU1N4TlFVRk5MRVZCUVVVc1NVRkJXanRCUVVOQkxHbENRVUZKTEVkQlFVb3NSVUZCVXp0QlFVTk1MSE5DUVVGTExGRkJRVXdzUTBGQll5eEZRVUZGTEV0QlFVc3NSMEZCVUN4RlFVRmtPMEZCUTBnc1kwRkdSQ3hOUVVkTE8wRkJRMFFzYzBKQlFVc3NUVUZCVEN4RFFVRlpMRFpDUVVGYU8wRkJRMGc3UVVGRFNqdEJRVU5LTEUwN08ydENRVTFOTEZrc2VVSkJRV0VzUnl4RlFVRkxPMEZCUTNKQ0xIVkNRVUZKTEVsQlFVb3NRMEZCVXl3eVFrRkJWRHM3UVVGRlFTeGhRVUZKTEU5QlFVOHNUVUZCVUN4SlFVRnBRaXhYUVVGWExFOUJRVThzVFVGQmRrTXNSVUZCSzBNN1FVRkRNME1zYlVKQlFVMHNUMEZCVHl4UFFVRlBMRkZCUVZBc1EwRkJaMElzU1VGQk4wSTdRVUZEUVN4cFFrRkJTU3hIUVVGS0xFVkJRVk03UVVGRFRDd3JRa0ZCU1N4SlFVRktMRU5CUVZNc0swSkJRVlE3UVVGRFFTeDNRa0ZCVHl4TlFVRlFMRU5CUVdNc1YwRkJaQ3hEUVVFd1FpeEhRVUV4UWl4RlFVRXJRaXhUUVVGVExGRkJRVlFzUjBGQmIwSXNTVUZCY0VJc1IwRkJNa0lzVTBGQlV5eEpRVUZ1UlR0QlFVTklPMEZCUTBvN1FVRkRTaXhOT3pzN096WkNRV3BGWVR0QlFVTldMRzlDUVVGUExFdEJRVXNzVVVGQldqdEJRVU5JT3pzN05rSkJhVVJoTzBGQlExWXNiMEpCUVU4c1UwRkJVeXhSUVVGVUxFZEJRVzlDTEVsQlFYQkNMRWRCUVRKQ0xGTkJRVk1zU1VGQk0wTTdRVUZEU0RzN096czdPMjFDUVhKR1owSXNXVHM3T3pzN096czdPenM3T3pzN096dEJRMHB5UWpzN096czdPenM3UzBGRmNVSXNTVHRCUVVOcVFpeDVRa0ZCYjBjN1FVRkJRU3hoUVVGMlJpeFJRVUYxUml4UlFVRjJSaXhSUVVGMVJqdEJRVUZCTEdGQlFUZEZMR0ZCUVRaRkxGRkJRVGRGTEdGQlFUWkZPMEZCUVVFc1lVRkJPVVFzV1VGQk9FUXNVVUZCT1VRc1dVRkJPRVE3UVVGQlFTeGhRVUZvUkN4VlFVRm5SQ3hSUVVGb1JDeFZRVUZuUkR0QlFVRkJMR0ZCUVhCRExFdEJRVzlETEZGQlFYQkRMRXRCUVc5RE8wRkJRVUVzWVVGQk4wSXNUMEZCTmtJc1VVRkJOMElzVDBGQk5rSTdRVUZCUVN4aFFVRndRaXhWUVVGdlFpeFJRVUZ3UWl4VlFVRnZRanRCUVVGQkxHRkJRVklzUzBGQlVTeFJRVUZTTEV0QlFWRTdPMEZCUVVFN08wRkJRMmhITEdOQlFVc3NVVUZCVEN4SFFVRm5RaXhSUVVGb1FqdEJRVU5CTEdOQlFVc3NZVUZCVEN4SFFVRnhRaXhoUVVGeVFqdEJRVU5CTEdOQlFVc3NXVUZCVEN4SFFVRnZRaXhaUVVGd1FqdEJRVU5CTEdOQlFVc3NWVUZCVEN4SFFVRnJRaXhWUVVGc1FqdEJRVU5CTEdOQlFVc3NTMEZCVEN4SFFVRmhMRXRCUVdJN1FVRkRRU3hqUVVGTExFOUJRVXdzUjBGQlpTeFBRVUZtTzBGQlEwRXNZMEZCU3l4VlFVRk1MRWRCUVd0Q0xGVkJRV3hDTzBGQlEwRXNZMEZCU3l4TFFVRk1MRWRCUVdFc1MwRkJZanRCUVVOSU96dHZRa0Z6UWtRc1pTdzRRa0ZCYTBJN1FVRkRaQ3gxUWtGQlNTeEpRVUZLTEVOQlFWTXNjMEpCUVZRN1FVRkRRU3huUWtGQlR5eExRVUZMTEZOQlFVd3NRMEZCWlR0QlFVTnNRaXgxUWtGQlZTeExRVUZMTEZGQlJFYzdRVUZGYkVJc05FSkJRV1VzUzBGQlN5eGhRVVpHTzBGQlIyeENMREpDUVVGakxFdEJRVXNzV1VGSVJEdEJRVWxzUWl4NVFrRkJXU3hMUVVGTExGVkJTa003UVVGTGJFSXNiMEpCUVU4c1MwRkJTeXhMUVV4Tk8wRkJUV3hDTEhOQ1FVRlRMRXRCUVVzc1QwRk9TVHRCUVU5c1FpeDVRa0ZCV1N4TFFVRkxPMEZCVUVNc1ZVRkJaaXhEUVVGUU8wRkJVMGdzVFRzN1ZVRkZUU3hwUWl3NFFrRkJhMElzWVN4RlFVRmxPMEZCUTNCRExIVkNRVUZKTEVsQlFVb3NRMEZCVXl4M1FrRkJWRHRCUVVOQkxHZENRVUZQTEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVVzc1MwRkJUQ3hEUVVGWExHRkJRVmdzUTBGQlZDeERRVUZRTzBGQlEwZ3NUVHM3T3pzMlFrRndRMmRDTzBGQlEySXNhVUpCUVVrc1MwRkJTeXhWUVVGVUxFVkJRWEZDTzBGQlEycENMSEZDUVVGSkxFMUJRVTBzVTBGQlV5eExRVUZMTEVkQlFVd3NTMEZCWVN4SlFVRjBRaXhEUVVGV08wRkJRMEVzZDBKQlFVOHNTMEZCU3l4VlFVRk1MRWRCUVd0Q0xFZEJRWHBDTzBGQlEwZzdRVUZEUkN4dlFrRkJUeXhUUVVGUU8wRkJRMGc3T3pzMlFrRkZZVHRCUVVOV0xHbENRVUZKTEdGQlFXRXNTMEZCU3l4VlFVRjBRanRCUVVOQkxHbENRVUZKTEdWQlFXVXNVMEZCYmtJc1JVRkJPRUk3UVVGRE1VSXNkMEpCUVU4c1kwRkJZeXhEUVVGeVFqdEJRVU5JTzBGQlEwUXNiMEpCUVU4c1UwRkJVRHRCUVVOSU96czdOa0pCUlZrN1FVRkRWQ3h2UWtGQlR5eERRVUZETEV0QlFVc3NTMEZCVEN4SlFVRmpMRVZCUVdZc1JVRkJiVUlzUzBGQmJrSXNRMEZCZVVJc1IwRkJla0lzUTBGQlVEdEJRVU5JT3pzN096czdiVUpCT1VKblFpeEpPenM3T3pzN096czdPenM3TzBGRFJuSkNPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenM3T3pzN096czdPenRMUVVWeFFpeHBRanM3TzBGQlJXcENMR2REUVVGWkxGRkJRVm9zUlVGQmMwSTdRVUZCUVRzN1FVRkJRU3h6UkVGRGJFSXNPRUpCUVUwc1VVRkJUaXhEUVVSclFqczdRVUZGYkVJc1pVRkJTeXhYUVVGTUxFZEJRVzFDTEc5Q1FVRlZMR0ZCUVZZc1EwRkJia0k3UVVGRFFTeGxRVUZMTEdGQlFVd3NSMEZCY1VJc2IwSkJRVlVzWlVGQlZpeERRVUZ5UWp0QlFVTkJMR1ZCUVVzc2FVSkJRVXdzUjBGQmVVSXNiMEpCUVZVc2IwSkJRVllzUTBGQmVrSTdRVUZLYTBJN1FVRkxja0k3TzJsRFFVVkVMRWtzYVVKQlFVc3NTU3hGUVVGTk8wRkJRMUFzZFVKQlFVa3NTVUZCU2l4RFFVRlRMSGRDUVVGVU8wRkJRMEVzYzBOQlFVMHNTVUZCVGl4WlFVRlhMRWxCUVZnN1FVRkRRU3hqUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1EwRkJkVUlzU1VGQmRrSTdRVUZEU0N4Tk96dHBRMEZEUkN4TkxIRkNRVUZUTzBGQlEwd3NkVUpCUVVrc1NVRkJTaXhEUVVGVExEQkNRVUZVTzBGQlEwRXNjME5CUVUwc1RVRkJUanRCUVVOQkxHTkJRVXNzWVVGQlRDeERRVUZ0UWl4TFFVRnVRanRCUVVOSUxFMDdPMmxEUVVWRUxHRXNNRUpCUVdNc1JTeEZRVUZKTzBGQlEyUXNZMEZCU3l4WFFVRk1MRU5CUVdsQ0xGVkJRV3BDTEVOQlFUUkNMRVZCUVRWQ08wRkJRMGdzVFRzN2FVTkJRMFFzWjBJc05rSkJRV2xDTEVVc1JVRkJTVHRCUVVOcVFpeGpRVUZMTEZkQlFVd3NRMEZCYVVJc1lVRkJha0lzUTBGQkswSXNSVUZCTDBJN1FVRkRTQ3hOT3p0cFEwRkZSQ3hsTERSQ1FVRm5RaXhGTEVWQlFVazdRVUZEYUVJc1kwRkJTeXhoUVVGTUxFTkJRVzFDTEZWQlFXNUNMRU5CUVRoQ0xFVkJRVGxDTzBGQlEwZ3NUVHM3YVVOQlEwUXNhMElzSzBKQlFXMUNMRVVzUlVGQlNUdEJRVU51UWl4alFVRkxMR0ZCUVV3c1EwRkJiVUlzWVVGQmJrSXNRMEZCYVVNc1JVRkJha003UVVGRFNDeE5PenRwUTBGRlJDeHRRaXhuUTBGQmIwSXNSU3hGUVVGSk8wRkJRM0JDTEdOQlFVc3NhVUpCUVV3c1EwRkJkVUlzVlVGQmRrSXNRMEZCYTBNc1JVRkJiRU03UVVGRFNDeE5PenRwUTBGRFJDeHpRaXh0UTBGQmRVSXNSU3hGUVVGSk8wRkJRM1pDTEdOQlFVc3NhVUpCUVV3c1EwRkJkVUlzWVVGQmRrSXNRMEZCY1VNc1JVRkJja003UVVGRFNDeE5PenRwUTBGRFJDeHpRaXh0UTBGQmRVSXNReXhGUVVGSE8wRkJRM1JDTEhWQ1FVRkpMRWxCUVVvc1EwRkJVeXd3UTBGQlZDeEZRVUZ4UkN4RlFVRkZMRTlCUVhaRU8wRkJRMEVzWTBGQlN5eHBRa0ZCVEN4RFFVRjFRaXhMUVVGMlFpeERRVUUyUWl4RFFVRTNRanRCUVVOSUxFMDdPenM3TzIxQ1FUTkRaMElzYVVJN096czdPenM3T3pzN096czdRVU5LY2tJN096czdRVUZEUVRzN096czdPenM3TzBGQlJVRXNTMEZCVFN3MlEwRkJOa01zUlVGQmJrUTdPMHRCUlhGQ0xHbENPMEZCUldwQ0xHdERRVWxSTzBGQlFVRXNNRVZCUVVvc1JVRkJTVHM3UVVGQlFTd3dRMEZJU2l4dFEwRkhTVHRCUVVGQkxHRkJTRW9zYlVOQlIwa3NlVU5CU0d0RExEQkRRVWRzUXp0QlFVRkJMREpEUVVaS0xIZENRVVZKTzBGQlFVRXNZVUZHU2l4M1FrRkZTU3d3UTBGR2RVSXNiMEpCUVZVc2RVSkJRVllzUTBGRmRrSTdRVUZCUVN3eVEwRkVTaXgxUWtGRFNUdEJRVUZCTEdGQlJFb3NkVUpCUTBrc01FTkJSSE5DTEc5Q1FVRlZMSE5DUVVGV0xFTkJRM1JDT3p0QlFVRkJPenRCUVVOS0xHTkJRVXNzYjBOQlFVd3NSMEZCTkVNc2JVTkJRVFZET3p0QlFVVkJMR05CUVVzc2IwSkJRVXdzUjBGQk5FSXNkMEpCUVRWQ08wRkJRMEVzWTBGQlN5eHRRa0ZCVEN4SFFVRXlRaXgxUWtGQk0wSTdRVUZEU0RzN2FVTkJSVVFzU1N4cFFrRkJTeXhUTEVWQlFWYzdRVUZEV2l4MVFrRkJTU3hKUVVGS0xFTkJRVk1zZDBKQlFWUTdPMEZCUlVFc1kwRkJTeXhoUVVGTU96czdRVUZIUVN4aFFVRkpMRlZCUVZVc1dVRkJaQ3hGUVVFMFFqdEJRVU40UWl4cFFrRkJTU3hYUVVGWExGVkJRVlVzVlVGQmVrSTdRVUZEUVN3eVFrRkJTU3hKUVVGS0xFTkJRVk1zTWtOQlFWUXNSVUZCYzBRc1VVRkJkRVE3TzBGQlJVRXNhVUpCUVVrc1YwRkJWeXhEUVVGbUxFVkJRV3RDT3p0QlFVVmtMSEZDUVVGSkxGZEJRVmNzVjBGQlZ5eExRVUZMTEc5RFFVRXZRanRCUVVOQkxIRkNRVUZKTEZsQlFWa3NRMEZCYUVJc1JVRkJhMEk3UVVGRFpDeG5RMEZCVnl4RFFVRllPMEZCUTBnN1FVRkRSQ3dyUWtGQlNTeEpRVUZLTEVOQlFWTXNaME5CUVZRc1JVRkJNa01zVVVGQk0wTTdRVUZEUVN4elFrRkJTeXh2UWtGQlRDeERRVUV3UWl4SlFVRXhRaXhEUVVFclFpeFJRVUV2UWp0QlFVTklPenM3UVVGSFJDeHBRa0ZCU1N4VlFVRlZMRmRCUVZjc1EwRkJla0k3UVVGRFFTd3lRa0ZCU1N4SlFVRktMRU5CUVZNc0swSkJRVlFzUlVGQk1FTXNUMEZCTVVNN1FVRkRRU3hyUWtGQlN5eHRRa0ZCVEN4RFFVRjVRaXhKUVVGNlFpeERRVUU0UWl4UFFVRTVRanRCUVVOSU8wRkJRMG9zVFRzN2FVTkJSVVFzVFN4eFFrRkJVenRCUVVOTUxIVkNRVUZKTEVsQlFVb3NRMEZCVXl3d1FrRkJWRHRCUVVOQkxHTkJRVXNzWVVGQlREdEJRVU5JTEUwN08ybERRVVZFTEdFc05FSkJRV1U3UVVGRFdDeDFRa0ZCU1N4SlFVRktMRU5CUVZNc2QwTkJRVlE3UVVGRFFTeGpRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFMUJRVEZDTzBGQlEwRXNZMEZCU3l4dFFrRkJUQ3hEUVVGNVFpeE5RVUY2UWp0QlFVTklMRTA3TzJsRFFVVkVMSE5DTEcxRFFVRjFRaXhGTEVWQlFVazdRVUZEZGtJc1kwRkJTeXh2UWtGQlRDeERRVUV3UWl4VlFVRXhRaXhEUVVGeFF5eEZRVUZ5UXp0QlFVTklMRTA3TzJsRFFVTkVMSGxDTEhORFFVRXdRaXhGTEVWQlFVazdRVUZETVVJc1kwRkJTeXh2UWtGQlRDeERRVUV3UWl4aFFVRXhRaXhEUVVGM1F5eEZRVUY0UXp0QlFVTklMRTA3TzJsRFFVVkVMSEZDTEd0RFFVRnpRaXhGTEVWQlFVazdRVUZEZEVJc1kwRkJTeXh0UWtGQlRDeERRVUY1UWl4VlFVRjZRaXhEUVVGdlF5eEZRVUZ3UXp0QlFVTklMRTA3TzJsRFFVTkVMSGRDTEhGRFFVRjVRaXhGTEVWQlFVazdRVUZEZWtJc1kwRkJTeXh0UWtGQlRDeERRVUY1UWl4aFFVRjZRaXhEUVVGMVF5eEZRVUYyUXp0QlFVTklMRTA3T3pzN08yMUNRUzlFWjBJc2FVSTdPenM3T3pzN096czdPenM3UVVOTWNrSTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPenM3T3pzN096czdPMHRCUlhGQ0xFczdPenRCUVVWcVFpeHZRa0ZCV1N4SlFVRmFMRVZCUVhkRE8wRkJRVUVzWVVGQmRFSXNTMEZCYzBJc2VVUkJRV1FzYVVKQlFVOHNTMEZCVHpzN1FVRkJRVHM3UVVGQlFTeHpSRUZEY0VNc2EwSkJRVTBzU1VGQlRpeERRVVJ2UXpzN1FVRkZjRU1zWlVGQlN5eE5RVUZNTEVkQlFXTXNTMEZCWkR0QlFVWnZRenRCUVVkMlF6czdjVUpCUlVRc1NTeHBRa0ZCU3l4UkxFVkJRVlU3UVVGRFdDeGpRVUZMTEUxQlFVdzdPMEZCUlVFc1lVRkJTU3haUVVGWkxFTkJRV2hDTEVWQlFXMUNPMEZCUTJZc2QwSkJRVmNzUTBGQldEdEJRVU5JT3p0QlFVVkVMR05CUVVzc1dVRkJUQ3hIUVVGdlFpeExRVUZMTEUxQlFVd3NRMEZCV1N4VlFVRmFMRU5CUVhWQ0xFdEJRVXNzVTBGQlRDeERRVUZsTEVsQlFXWXNRMEZCYjBJc1NVRkJjRUlzUTBGQmRrSXNSVUZCYTBRc1YwRkJWeXhKUVVFM1JDeERRVUZ3UWp0QlFVTklMRTA3TzNGQ1FVVkVMRTBzY1VKQlFWTTdRVUZEVEN4aFFVRkpMRXRCUVVzc1dVRkJWQ3hGUVVGMVFqdEJRVU51UWl4clFrRkJTeXhOUVVGTUxFTkJRVmtzV1VGQldpeERRVUY1UWl4TFFVRkxMRmxCUVRsQ08wRkJRMEVzYTBKQlFVc3NXVUZCVEN4SFFVRnZRaXhKUVVGd1FqdEJRVU5JTzBGQlEwb3NUVHM3Y1VKQlJVUXNVeXgzUWtGQldUdEJRVU5TTEdOQlFVc3NXVUZCVEN4SFFVRnZRaXhKUVVGd1FqdEJRVU5CTERCQ1FVRk5MRXRCUVU0N1FVRkRTQ3hOT3pzN096dHRRa0V6UW1kQ0xFczdPenM3T3pzN096czdPenM3UVVOS2NrSTdPenM3T3pzN096dExRVVZ4UWl4TE8wRkJSV3BDTEc5Q1FVRlpMRWxCUVZvc1JVRkJhMEk3UVVGQlFUczdRVUZEWkN4alFVRkxMRXRCUVV3c1IwRkJZU3hKUVVGaU8wRkJRMEVzWTBGQlN5eFZRVUZNTEVkQlFXdENMRVZCUVd4Q08wRkJRMGc3TzNGQ1FVVkVMRlVzZFVKQlFWY3NSU3hGUVVGSk8wRkJRMWdzWTBGQlN5eFZRVUZNTEVOQlFXZENMRWxCUVdoQ0xFTkJRWEZDTEVWQlFYSkNPMEZCUTBnc1RUczdjVUpCUlVRc1lTd3dRa0ZCWXl4RkxFVkJRVWs3UVVGRFpDeGhRVUZKTEUxQlFVMHNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xGTkJRV2hDTEVOQlFUQkNPMEZCUVVFc2IwSkJRVkVzVTBGQlV5eEZRVUZxUWp0QlFVRkJMRlZCUVRGQ0xFTkJRVlk3UVVGRFFTeGhRVUZKTEU5QlFVOHNRMEZCV0N4RlFVRmpPMEZCUTFZc2EwSkJRVXNzVlVGQlRDeERRVUZuUWl4TlFVRm9RaXhEUVVGMVFpeEhRVUYyUWl4RlFVRTBRaXhEUVVFMVFqdEJRVU5JTzBGQlEwb3NUVHM3Y1VKQlJVUXNTeXh2UWtGQmFVSTdRVUZEWWl4MVFrRkJTU3hKUVVGS0xFTkJRVk1zYjBKQlFXOUNMRXRCUVVzc1MwRkJiRU03UVVGRVlUdEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRkZZaXhyUTBGQlpTeExRVUZMTEZWQlFYQkNMRGhJUVVGblF6dEJRVUZCTEhGQ1FVRjJRaXhGUVVGMVFqczdRVUZETlVJN1FVRkRTRHRCUVVwWk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZMYUVJc1RUczdPenM3YlVKQmRrSm5RaXhMT3pzN096czdPenM3T3pzN08wRkRSbkpDT3pzN096czdPenM3UzBGRmNVSXNhMEk3UVVGRmFrSXNhVU5CUVZrc1YwRkJXaXhGUVVGNVFqdEJRVUZCT3p0QlFVTnlRaXhqUVVGTExGbEJRVXdzUjBGQmIwSXNWMEZCY0VJN1FVRkRRU3hqUVVGTExGbEJRVXdzUTBGQmEwSXNUVUZCYkVJc1EwRkJlVUlzYzBKQlFYcENMRU5CUVdkRUxFdEJRVXNzWTBGQlRDeERRVUZ2UWl4SlFVRndRaXhEUVVGNVFpeEpRVUY2UWl4RFFVRm9SRHRCUVVOSU96dHJRMEZGUkN4akxEWkNRVUZwUWp0QlFVRkJPenRCUVVOaUxIVkNRVUZKTEVsQlFVb3NRMEZCVXl4M1JFRkJWRHM3UVVGRlFTeGpRVUZMTEZsQlFVd3NRMEZCYTBJc1dVRkJiRUlzUjBGQmFVTXNTVUZCYWtNc1EwRkJjME1zWjBKQlFWRTdRVUZETVVNc01rSkJRVWtzU1VGQlNpeERRVUZUTEdsRFFVRlVPMEZCUTBnc1ZVRkdSQ3hGUVVWSExHVkJRVTg3UVVGRFRpd3lRa0ZCU1N4TFFVRktMRU5CUVZVc01FSkJRVllzUlVGQmMwTXNTVUZCU1N4UFFVRXhRenRCUVVOQkxHMUNRVUZMTEZsQlFVd3NRMEZCYTBJc1RVRkJiRUlzUTBGQmVVSXNjMEpCUVhwQ0xFTkJRV2RFTEVkQlFXaEVPMEZCUTBnc1ZVRk1SRHRCUVUxSUxFMDdPenM3TzIxQ1FXaENaMElzYTBJaUxDSm1hV3hsSWpvaWIybGtZeTFqYkdsbGJuUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0Z2QyVmljR0ZqYTFWdWFYWmxjbk5oYkUxdlpIVnNaVVJsWm1sdWFYUnBiMjRvY205dmRDd2dabUZqZEc5eWVTa2dlMXh1WEhScFppaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKMjlpYW1WamRDY2dKaVlnZEhsd1pXOW1JRzF2WkhWc1pTQTlQVDBnSjI5aWFtVmpkQ2NwWEc1Y2RGeDBiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1ZV04wYjNKNUtDazdYRzVjZEdWc2MyVWdhV1lvZEhsd1pXOW1JR1JsWm1sdVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQmtaV1pwYm1VdVlXMWtLVnh1WEhSY2RHUmxabWx1WlNoYlhTd2dabUZqZEc5eWVTazdYRzVjZEdWc2MyVWdlMXh1WEhSY2RIWmhjaUJoSUQwZ1ptRmpkRzl5ZVNncE8xeHVYSFJjZEdadmNpaDJZWElnYVNCcGJpQmhLU0FvZEhsd1pXOW1JR1Y0Y0c5eWRITWdQVDA5SUNkdlltcGxZM1FuSUQ4Z1pYaHdiM0owY3lBNklISnZiM1FwVzJsZElEMGdZVnRwWFR0Y2JseDBmVnh1ZlNrb2RHaHBjeXdnWm5WdVkzUnBiMjRvS1NCN1hHNXlaWFIxY200Z1hHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVYRzRnS2lvdklpd2lJRngwTHk4Z1ZHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUlGeDBkbUZ5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE1nUFNCN2ZUdGNibHh1SUZ4MEx5OGdWR2hsSUhKbGNYVnBjbVVnWm5WdVkzUnBiMjVjYmlCY2RHWjFibU4wYVc5dUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9iVzlrZFd4bFNXUXBJSHRjYmx4dUlGeDBYSFF2THlCRGFHVmpheUJwWmlCdGIyUjFiR1VnYVhNZ2FXNGdZMkZqYUdWY2JpQmNkRngwYVdZb2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwcFhHNGdYSFJjZEZ4MGNtVjBkWEp1SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1WNGNHOXlkSE03WEc1Y2JpQmNkRngwTHk4Z1EzSmxZWFJsSUdFZ2JtVjNJRzF2WkhWc1pTQW9ZVzVrSUhCMWRDQnBkQ0JwYm5SdklIUm9aU0JqWVdOb1pTbGNiaUJjZEZ4MGRtRnlJRzF2WkhWc1pTQTlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRJRDBnZTF4dUlGeDBYSFJjZEdWNGNHOXlkSE02SUh0OUxGeHVJRngwWEhSY2RHbGtPaUJ0YjJSMWJHVkpaQ3hjYmlCY2RGeDBYSFJzYjJGa1pXUTZJR1poYkhObFhHNGdYSFJjZEgwN1hHNWNiaUJjZEZ4MEx5OGdSWGhsWTNWMFpTQjBhR1VnYlc5a2RXeGxJR1oxYm1OMGFXOXVYRzRnWEhSY2RHMXZaSFZzWlhOYmJXOWtkV3hsU1dSZExtTmhiR3dvYlc5a2RXeGxMbVY0Y0c5eWRITXNJRzF2WkhWc1pTd2diVzlrZFd4bExtVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBPMXh1WEc0Z1hIUmNkQzh2SUVac1lXY2dkR2hsSUcxdlpIVnNaU0JoY3lCc2IyRmtaV1JjYmlCY2RGeDBiVzlrZFd4bExteHZZV1JsWkNBOUlIUnlkV1U3WEc1Y2JpQmNkRngwTHk4Z1VtVjBkWEp1SUhSb1pTQmxlSEJ2Y25SeklHOW1JSFJvWlNCdGIyUjFiR1ZjYmlCY2RGeDBjbVYwZFhKdUlHMXZaSFZzWlM1bGVIQnZjblJ6TzF4dUlGeDBmVnh1WEc1Y2JpQmNkQzh2SUdWNGNHOXpaU0IwYUdVZ2JXOWtkV3hsY3lCdlltcGxZM1FnS0Y5ZmQyVmljR0ZqYTE5dGIyUjFiR1Z6WDE4cFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG0wZ1BTQnRiMlIxYkdWek8xeHVYRzRnWEhRdkx5QmxlSEJ2YzJVZ2RHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVqSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsY3p0Y2JseHVJRngwTHk4Z1gxOTNaV0p3WVdOclgzQjFZbXhwWTE5d1lYUm9YMTljYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjQ0E5SUZ3aVhDSTdYRzVjYmlCY2RDOHZJRXh2WVdRZ1pXNTBjbmtnYlc5a2RXeGxJR0Z1WkNCeVpYUjFjbTRnWlhod2IzSjBjMXh1SUZ4MGNtVjBkWEp1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b01DazdYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQjNaV0p3WVdOckwySnZiM1J6ZEhKaGNDQm1aVGRsWkdRMk5UYzFaVGxrTVdaall6RmpNMXh1SUNvcUx5SXNJaTh2SUVOdmNIbHlhV2RvZENBb1l5a2dRbkp2WTJzZ1FXeHNaVzRnSmlCRWIyMXBibWxqYXlCQ1lXbGxjaTRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpOHZJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakF1SUZObFpTQk1TVU5GVGxORklHbHVJSFJvWlNCd2NtOXFaV04wSUhKdmIzUWdabTl5SUd4cFkyVnVjMlVnYVc1bWIzSnRZWFJwYjI0dVhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCTWIyY2dQU0J5WlhGMWFYSmxLQ2N1TDNOeVl5OU1iMmNuS1R0Y2JtVjRjRzl5ZENCamIyNXpkQ0JQYVdSalEyeHBaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOXpjbU12VDJsa1kwTnNhV1Z1ZENjcE8xeHVaWGh3YjNKMElHTnZibk4wSUZkbFlsTjBiM0poWjJWVGRHRjBaVk4wYjNKbElEMGdjbVZ4ZFdseVpTZ25MaTl6Y21NdlYyVmlVM1J2Y21GblpWTjBZWFJsVTNSdmNtVW5LVHRjYm1WNGNHOXlkQ0JqYjI1emRDQkpiazFsYlc5eWVWZGxZbE4wYjNKaFoyVWdQU0J5WlhGMWFYSmxLQ2N1TDNOeVl5OUpiazFsYlc5eWVWZGxZbE4wYjNKaFoyVW5LVHRjYm1WNGNHOXlkQ0JqYjI1emRDQlZjMlZ5VFdGdVlXZGxjaUE5SUhKbGNYVnBjbVVvSnk0dmMzSmpMMVZ6WlhKTllXNWhaMlZ5SnlrN1hHNWxlSEJ2Y25RZ1kyOXVjM1FnUVdOalpYTnpWRzlyWlc1RmRtVnVkSE1nUFNCeVpYRjFhWEpsS0NjdUwzTnlZeTlCWTJObGMzTlViMnRsYmtWMlpXNTBjeWNwTzF4dVpYaHdiM0owSUdOdmJuTjBJRTFsZEdGa1lYUmhVMlZ5ZG1salpTQTlJSEpsY1hWcGNtVW9KeTR2YzNKakwwMWxkR0ZrWVhSaFUyVnlkbWxqWlNjcE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUNBZ1RHOW5MRnh1SUNBZ0lFOXBaR05EYkdsbGJuUXNYRzRnSUNBZ1YyVmlVM1J2Y21GblpWTjBZWFJsVTNSdmNtVXNYRzRnSUNBZ1NXNU5aVzF2Y25sWFpXSlRkRzl5WVdkbExGeHVJQ0FnSUZWelpYSk5ZVzVoWjJWeUxGeHVJQ0FnSUVGalkyVnpjMVJ2YTJWdVJYWmxiblJ6TEZ4dUlDQWdJRTFsZEdGa1lYUmhVMlZ5ZG1salpWeHVmVHRjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YVc1a1pYZ3Vhbk5jYmlBcUtpOGlMQ0l2THlCRGIzQjVjbWxuYUhRZ0tHTXBJRUp5YjJOcklFRnNiR1Z1SUNZZ1JHOXRhVzVwWTJzZ1FtRnBaWEl1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNHZMeUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3TGlCVFpXVWdURWxEUlU1VFJTQnBiaUIwYUdVZ2NISnZhbVZqZENCeWIyOTBJR1p2Y2lCc2FXTmxibk5sSUdsdVptOXliV0YwYVc5dUxseHVYRzVzWlhRZ2JtOXdURzluWjJWeUlEMGdlMXh1SUNBZ0lHbHVabThvS1h0OUxGeHVJQ0FnSUhkaGNtNG9LWHQ5TEZ4dUlDQWdJR1Z5Y205eUtDbDdmVnh1ZlR0Y2JseHVZMjl1YzNRZ1RrOU9SU0E5SURBN1hHNWpiMjV6ZENCRlVsSlBVaUE5SURFN1hHNWpiMjV6ZENCWFFWSk9JRDBnTWp0Y2JtTnZibk4wSUVsT1JrOGdQU0F6TzF4dVhHNXNaWFFnYkc5bloyVnlPMXh1YkdWMElHeGxkbVZzTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJNYjJjZ2UxeHVJQ0FnSUhOMFlYUnBZeUJuWlhRZ1RrOU9SU2dwSUh0eVpYUjFjbTRnVGs5T1JYMDdYRzRnSUNBZ2MzUmhkR2xqSUdkbGRDQkZVbEpQVWlncElIdHlaWFIxY200Z1JWSlNUMUo5TzF4dUlDQWdJSE4wWVhScFl5Qm5aWFFnVjBGU1RpZ3BJSHR5WlhSMWNtNGdWMEZTVG4wN1hHNGdJQ0FnYzNSaGRHbGpJR2RsZENCSlRrWlBLQ2tnZTNKbGRIVnliaUJKVGtaUGZUdGNiaUFnSUNCY2JpQWdJQ0J6ZEdGMGFXTWdjbVZ6WlhRb0tYdGNiaUFnSUNBZ0lDQWdiR1YyWld3Z1BTQkpUa1pQTzF4dUlDQWdJQ0FnSUNCc2IyZG5aWElnUFNCdWIzQk1iMmRuWlhJN1hHNGdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lITjBZWFJwWXlCblpYUWdiR1YyWld3b0tYdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHeGxkbVZzTzF4dUlDQWdJSDFjYmlBZ0lDQnpkR0YwYVdNZ2MyVjBJR3hsZG1Wc0tIWmhiSFZsS1h0Y2JpQWdJQ0FnSUNBZ2FXWWdLRTVQVGtVZ1BEMGdkbUZzZFdVZ0ppWWdkbUZzZFdVZ1BEMGdTVTVHVHlsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhabGJDQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpU1c1MllXeHBaQ0JzYjJjZ2JHVjJaV3hjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdjM1JoZEdsaklHZGxkQ0JzYjJkblpYSW9LWHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR3h2WjJkbGNqdGNiaUFnSUNCOVhHNGdJQ0FnYzNSaGRHbGpJSE5sZENCc2IyZG5aWElvZG1Gc2RXVXBlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1V1YVc1bWJ5QW1KaUIyWVd4MVpTNTNZWEp1SUNZbUlIWmhiSFZsTG1WeWNtOXlLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZaMmRsY2lBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lTVzUyWVd4cFpDQnNiMmRuWlhKY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnYzNSaGRHbGpJR2x1Wm04b0xpNHVZWEpuY3lsN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hzWlhabGJDQStQU0JKVGtaUEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4dloyZGxjaTVwYm1adkxtRndjR3g1S0d4dloyZGxjaXdnUVhKeVlYa3Vabkp2YlNoaGNtZHpLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjM1JoZEdsaklIZGhjbTRvTGk0dVlYSm5jeWw3WEc0Z0lDQWdJQ0FnSUdsbUlDaHNaWFpsYkNBK1BTQlhRVkpPS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WjJkbGNpNTNZWEp1TG1Gd2NHeDVLR3h2WjJkbGNpd2dRWEp5WVhrdVpuSnZiU2hoY21kektTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2MzUmhkR2xqSUdWeWNtOXlLQzR1TG1GeVozTXBlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JHVjJaV3dnUGowZ1JWSlNUMUlwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiRzluWjJWeUxtVnljbTl5TG1Gd2NHeDVLR3h2WjJkbGNpd2dRWEp5WVhrdVpuSnZiU2hoY21kektTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5WEc1Y2JreHZaeTV5WlhObGRDZ3BPMXh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDB4dlp5NXFjMXh1SUNvcUx5SXNJaTh2SUVOdmNIbHlhV2RvZENBb1l5a2dRbkp2WTJzZ1FXeHNaVzRnSmlCRWIyMXBibWxqYXlCQ1lXbGxjaTRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpOHZJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakF1SUZObFpTQk1TVU5GVGxORklHbHVJSFJvWlNCd2NtOXFaV04wSUhKdmIzUWdabTl5SUd4cFkyVnVjMlVnYVc1bWIzSnRZWFJwYjI0dVhHNWNibWx0Y0c5eWRDQk1iMmNnWm5KdmJTQW5MaTlNYjJjbk8xeHVhVzF3YjNKMElFOXBaR05EYkdsbGJuUlRaWFIwYVc1bmN5Qm1jbTl0SUNjdUwwOXBaR05EYkdsbGJuUlRaWFIwYVc1bmN5YzdYRzVwYlhCdmNuUWdSWEp5YjNKU1pYTndiMjV6WlNCbWNtOXRJQ2N1TDBWeWNtOXlVbVZ6Y0c5dWMyVW5PMXh1YVcxd2IzSjBJRk5wWjI1cGJsSmxjWFZsYzNRZ1puSnZiU0FuTGk5VGFXZHVhVzVTWlhGMVpYTjBKenRjYm1sdGNHOXlkQ0JUYVdkdWFXNVNaWE53YjI1elpTQm1jbTl0SUNjdUwxTnBaMjVwYmxKbGMzQnZibk5sSnp0Y2JtbHRjRzl5ZENCVGFXZHViM1YwVW1WeGRXVnpkQ0JtY205dElDY3VMMU5wWjI1dmRYUlNaWEYxWlhOMEp6dGNibWx0Y0c5eWRDQlRhV2R1YjNWMFVtVnpjRzl1YzJVZ1puSnZiU0FuTGk5VGFXZHViM1YwVW1WemNHOXVjMlVuTzF4dWFXMXdiM0owSUZOcFoyNXBibE4wWVhSbElHWnliMjBnSnk0dlUybG5ibWx1VTNSaGRHVW5PMXh1YVcxd2IzSjBJRk4wWVhSbElHWnliMjBnSnk0dlUzUmhkR1VuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJQYVdSalEyeHBaVzUwSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loelpYUjBhVzVuY3lBOUlIdDlLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaWFIwYVc1bmN5QnBibk4wWVc1alpXOW1JRTlwWkdORGJHbGxiblJUWlhSMGFXNW5jeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMyVjBkR2x1WjNNZ1BTQnpaWFIwYVc1bmN6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM05sZEhScGJtZHpJRDBnYm1WM0lFOXBaR05EYkdsbGJuUlRaWFIwYVc1bmN5aHpaWFIwYVc1bmN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQm5aWFFnWDNOMFlYUmxVM1J2Y21Vb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRIUnBibWR6TG5OMFlYUmxVM1J2Y21VN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZENCZmRtRnNhV1JoZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUjBhVzVuY3k1MllXeHBaR0YwYjNJN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZENCZmJXVjBZV1JoZEdGVFpYSjJhV05sS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhSMGFXNW5jeTV0WlhSaFpHRjBZVk5sY25acFkyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1oyVjBJSE5sZEhScGJtZHpLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjMlYwZEdsdVozTTdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGRDQnRaWFJoWkdGMFlWTmxjblpwWTJVb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dFpYUmhaR0YwWVZObGNuWnBZMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZM0psWVhSbFUybG5ibWx1VW1WeGRXVnpkQ2g3WEc0Z0lDQWdJQ0FnSUhKbGMzQnZibk5sWDNSNWNHVXNJSE5qYjNCbExDQnlaV1JwY21WamRGOTFjbWtzSUdSaGRHRXNYRzRnSUNBZ0lDQWdJSEJ5YjIxd2RDd2daR2x6Y0d4aGVTd2diV0Y0WDJGblpTd2dkV2xmYkc5allXeGxjeXdnYVdSZmRHOXJaVzVmYUdsdWRDd2diRzluYVc1ZmFHbHVkQ3dnWVdOeVgzWmhiSFZsYzMwZ1BTQjdmU3hjYmlBZ0lDQWdJQ0FnYzNSaGRHVlRkRzl5WlZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lrOXBaR05EYkdsbGJuUXVZM0psWVhSbFUybG5ibWx1VW1WeGRXVnpkRndpS1R0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnWTJ4cFpXNTBYMmxrSUQwZ2RHaHBjeTVmYzJWMGRHbHVaM011WTJ4cFpXNTBYMmxrTzF4dUlDQWdJQ0FnSUNCeVpYTndiMjV6WlY5MGVYQmxJRDBnY21WemNHOXVjMlZmZEhsd1pTQjhmQ0IwYUdsekxsOXpaWFIwYVc1bmN5NXlaWE53YjI1elpWOTBlWEJsTzF4dUlDQWdJQ0FnSUNCelkyOXdaU0E5SUhOamIzQmxJSHg4SUhSb2FYTXVYM05sZEhScGJtZHpMbk5qYjNCbE8xeHVJQ0FnSUNBZ0lDQnlaV1JwY21WamRGOTFjbWtnUFNCeVpXUnBjbVZqZEY5MWNta2dmSHdnZEdocGN5NWZjMlYwZEdsdVozTXVjbVZrYVhKbFkzUmZkWEpwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR2xrWDNSdmEyVnVYMmhwYm5Rc0lHeHZaMmx1WDJocGJuUWdZWEpsYmlkMElHRnNiRzkzWldRZ2IyNGdYM05sZEhScGJtZHpYRzRnSUNBZ0lDQWdJSEJ5YjIxd2RDQTlJSEJ5YjIxd2RDQjhmQ0IwYUdsekxsOXpaWFIwYVc1bmN5NXdjbTl0Y0hRN1hHNGdJQ0FnSUNBZ0lHUnBjM0JzWVhrZ1BTQmthWE53YkdGNUlIeDhJSFJvYVhNdVgzTmxkSFJwYm1kekxtUnBjM0JzWVhrN1hHNGdJQ0FnSUNBZ0lHMWhlRjloWjJVZ1BTQnRZWGhmWVdkbElIeDhJSFJvYVhNdVgzTmxkSFJwYm1kekxtMWhlRjloWjJVN1hHNGdJQ0FnSUNBZ0lIVnBYMnh2WTJGc1pYTWdQU0IxYVY5c2IyTmhiR1Z6SUh4OElIUm9hWE11WDNObGRIUnBibWR6TG5WcFgyeHZZMkZzWlhNN1hHNGdJQ0FnSUNBZ0lHRmpjbDkyWVd4MVpYTWdQU0JoWTNKZmRtRnNkV1Z6SUh4OElIUm9hWE11WDNObGRIUnBibWR6TG1GamNsOTJZV3gxWlhNN1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQnNaWFFnWVhWMGFHOXlhWFI1SUQwZ2RHaHBjeTVmYzJWMGRHbHVaM011WVhWMGFHOXlhWFI1TzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0WlhSaFpHRjBZVk5sY25acFkyVXVaMlYwUVhWMGFHOXlhWHBoZEdsdmJrVnVaSEJ2YVc1MEtDa3VkR2hsYmloMWNtd2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pTWldObGFYWmxaQ0JoZFhSb2IzSnBlbUYwYVc5dUlHVnVaSEJ2YVc1MFhDSXNJSFZ5YkNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlaWEYxWlhOMElEMGdibVYzSUZOcFoyNXBibEpsY1hWbGMzUW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ5YkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHbGxiblJmYVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVmthWEpsWTNSZmRYSnBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNCdmJuTmxYM1I1Y0dVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnZjR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhkWFJvYjNKcGRIa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2YlhCMExDQmthWE53YkdGNUxDQnRZWGhmWVdkbExDQjFhVjlzYjJOaGJHVnpMQ0JwWkY5MGIydGxibDlvYVc1MExDQnNiMmRwYmw5b2FXNTBMQ0JoWTNKZmRtRnNkV1Z6WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOMFlYUmxJRDBnY21WeGRXVnpkQzV6ZEdGMFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMFlYUmxVM1J2Y21VZ1BTQnpkR0YwWlZOMGIzSmxJSHg4SUhSb2FYTXVYM04wWVhSbFUzUnZjbVU3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkR0YwWlZOMGIzSmxMbk5sZENoemRHRjBaUzVwWkN3Z2MzUmhkR1V1ZEc5VGRHOXlZV2RsVTNSeWFXNW5LQ2twTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYRjFaWE4wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhCeWIyTmxjM05UYVdkdWFXNVNaWE53YjI1elpTaDFjbXdzSUhOMFlYUmxVM1J2Y21VcElIdGNiaUFnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pQYVdSalEyeHBaVzUwTG5CeWIyTmxjM05UYVdkdWFXNVNaWE53YjI1elpWd2lLVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6Y0c5dWMyVWdQU0J1WlhjZ1UybG5ibWx1VW1WemNHOXVjMlVvZFhKc0tUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYSmxjM0J2Ym5ObExuTjBZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdVpYSnliM0lvWENKT2J5QnpkR0YwWlNCcGJpQnlaWE53YjI1elpWd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvWENKT2J5QnpkR0YwWlNCcGJpQnlaWE53YjI1elpWd2lLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnpkR0YwWlZOMGIzSmxJRDBnYzNSaGRHVlRkRzl5WlNCOGZDQjBhR2x6TGw5emRHRjBaVk4wYjNKbE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkR0YwWlZOMGIzSmxMbkpsYlc5MlpTaHlaWE53YjI1elpTNXpkR0YwWlNrdWRHaGxiaWh6ZEc5eVpXUlRkR0YwWlZOMGNtbHVaeUE5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYTjBiM0psWkZOMFlYUmxVM1J5YVc1bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLRndpVG04Z2JXRjBZMmhwYm1jZ2MzUmhkR1VnWm05MWJtUWdhVzRnYzNSdmNtRm5aVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKT2J5QnRZWFJqYUdsdVp5QnpkR0YwWlNCbWIzVnVaQ0JwYmlCemRHOXlZV2RsWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2MzUmhkR1VnUFNCVGFXZHVhVzVUZEdGMFpTNW1jbTl0VTNSdmNtRm5aVk4wY21sdVp5aHpkRzl5WldSVGRHRjBaVk4wY21sdVp5azdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lVbVZqWldsMlpXUWdjM1JoZEdVZ1puSnZiU0J6ZEc5eVlXZGxPeUIyWVd4cFpHRjBhVzVuSUhKbGMzQnZibk5sWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzWmhiR2xrWVhSdmNpNTJZV3hwWkdGMFpWTnBaMjVwYmxKbGMzQnZibk5sS0hOMFlYUmxMQ0J5WlhOd2IyNXpaU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOeVpXRjBaVk5wWjI1dmRYUlNaWEYxWlhOMEtIdHBaRjkwYjJ0bGJsOW9hVzUwTENCa1lYUmhMQ0J3YjNOMFgyeHZaMjkxZEY5eVpXUnBjbVZqZEY5MWNtbDlJRDBnZTMwc1hHNGdJQ0FnSUNBZ0lITjBZWFJsVTNSdmNtVmNiaUFnSUNBcElIdGNiaUFnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pQYVdSalEyeHBaVzUwTG1OeVpXRjBaVk5wWjI1dmRYUlNaWEYxWlhOMFhDSXBPMXh1WEc0Z0lDQWdJQ0FnSUhCdmMzUmZiRzluYjNWMFgzSmxaR2x5WldOMFgzVnlhU0E5SUhCdmMzUmZiRzluYjNWMFgzSmxaR2x5WldOMFgzVnlhU0I4ZkNCMGFHbHpMbDl6WlhSMGFXNW5jeTV3YjNOMFgyeHZaMjkxZEY5eVpXUnBjbVZqZEY5MWNtazdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMWxkR0ZrWVhSaFUyVnlkbWxqWlM1blpYUkZibVJUWlhOemFXOXVSVzVrY0c5cGJuUW9LUzUwYUdWdUtIVnliQ0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWxKbFkyVnBkbVZrSUdWdVpDQnpaWE56YVc5dUlHVnVaSEJ2YVc1MFhDSXNJSFZ5YkNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlaWEYxWlhOMElEMGdibVYzSUZOcFoyNXZkWFJTWlhGMVpYTjBLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY213c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUmZkRzlyWlc1ZmFHbHVkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOMFgyeHZaMjkxZEY5eVpXUnBjbVZqZEY5MWNta3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCemRHRjBaU0E5SUhKbGNYVmxjM1F1YzNSaGRHVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM1JoZEdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbE5wWjI1dmRYUWdjbVZ4ZFdWemRDQm9ZWE1nYzNSaGRHVWdkRzhnY0dWeWMybHpkRndpS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJsVTNSdmNtVWdQU0J6ZEdGMFpWTjBiM0psSUh4OElIUm9hWE11WDNOMFlYUmxVM1J2Y21VN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1ZUZEc5eVpTNXpaWFFvYzNSaGRHVXVhV1FzSUhOMFlYUmxMblJ2VTNSdmNtRm5aVk4wY21sdVp5Z3BLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGNYVmxjM1E3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhCeWIyTmxjM05UYVdkdWIzVjBVbVZ6Y0c5dWMyVW9kWEpzTENCemRHRjBaVk4wYjNKbEtTQjdYRzRnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpVDJsa1kwTnNhV1Z1ZEM1d2NtOWpaWE56VTJsbmJtOTFkRkpsYzNCdmJuTmxYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhOd2IyNXpaU0E5SUc1bGR5QlRhV2R1YjNWMFVtVnpjRzl1YzJVb2RYSnNLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnlaWE53YjI1elpTNXpkR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKT2J5QnpkR0YwWlNCcGJpQnlaWE53YjI1elpWd2lLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sTG1WeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxuZGhjbTRvWENKU1pYTndiMjV6WlNCM1lYTWdaWEp5YjNKY0lpd2djbVZ6Y0c5dWMyVXVaWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0pTWlhOd2IyNXpaU2h5WlhOd2IyNXpaU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0hKbGMzQnZibk5sS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCemRHRjBaVXRsZVNBOUlISmxjM0J2Ym5ObExuTjBZWFJsTzF4dVhHNGdJQ0FnSUNBZ0lITjBZWFJsVTNSdmNtVWdQU0J6ZEdGMFpWTjBiM0psSUh4OElIUm9hWE11WDNOMFlYUmxVM1J2Y21VN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjBZWFJsVTNSdmNtVXVjbVZ0YjNabEtITjBZWFJsUzJWNUtTNTBhR1Z1S0hOMGIzSmxaRk4wWVhSbFUzUnlhVzVuSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjM1J2Y21Wa1UzUmhkR1ZUZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdVpYSnliM0lvWENKT2J5QnRZWFJqYUdsdVp5QnpkR0YwWlNCbWIzVnVaQ0JwYmlCemRHOXlZV2RsWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrNXZJRzFoZEdOb2FXNW5JSE4wWVhSbElHWnZkVzVrSUdsdUlITjBiM0poWjJWY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnpkR0YwWlNBOUlGTjBZWFJsTG1aeWIyMVRkRzl5WVdkbFUzUnlhVzVuS0hOMGIzSmxaRk4wWVhSbFUzUnlhVzVuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKU1pXTmxhWFpsWkNCemRHRjBaU0JtY205dElITjBiM0poWjJVN0lIWmhiR2xrWVhScGJtY2djbVZ6Y0c5dWMyVmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZG1Gc2FXUmhkRzl5TG5aaGJHbGtZWFJsVTJsbmJtOTFkRkpsYzNCdmJuTmxLSE4wWVhSbExDQnlaWE53YjI1elpTazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR05zWldGeVUzUmhiR1ZUZEdGMFpTaHpkR0YwWlZOMGIzSmxLU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVQybGtZME5zYVdWdWRDNWpiR1ZoY2xOMFlXeGxVM1JoZEdWY0lpazdYRzVjYmlBZ0lDQWdJQ0FnYzNSaGRHVlRkRzl5WlNBOUlITjBZWFJsVTNSdmNtVWdmSHdnZEdocGN5NWZjM1JoZEdWVGRHOXlaVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVTNSaGRHVXVZMnhsWVhKVGRHRnNaVk4wWVhSbEtITjBZWFJsVTNSdmNtVXNJSFJvYVhNdWMyVjBkR2x1WjNNdWMzUmhiR1ZUZEdGMFpVRm5aU2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZUMmxrWTBOc2FXVnVkQzVxYzF4dUlDb3FMeUlzSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnUW5Kdlkyc2dRV3hzWlc0Z0ppQkViMjFwYm1samF5QkNZV2xsY2k0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaTh2SUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBdUlGTmxaU0JNU1VORlRsTkZJR2x1SUhSb1pTQndjbTlxWldOMElISnZiM1FnWm05eUlHeHBZMlZ1YzJVZ2FXNW1iM0p0WVhScGIyNHVYRzVjYm1sdGNHOXlkQ0JNYjJjZ1puSnZiU0FuTGk5TWIyY25PMXh1YVcxd2IzSjBJRmRsWWxOMGIzSmhaMlZUZEdGMFpWTjBiM0psSUdaeWIyMGdKeTR2VjJWaVUzUnZjbUZuWlZOMFlYUmxVM1J2Y21Vbk8xeHVhVzF3YjNKMElGSmxjM0J2Ym5ObFZtRnNhV1JoZEc5eUlHWnliMjBnSnk0dlVtVnpjRzl1YzJWV1lXeHBaR0YwYjNJbk8xeHVhVzF3YjNKMElFMWxkR0ZrWVhSaFUyVnlkbWxqWlNCbWNtOXRJQ2N1TDAxbGRHRmtZWFJoVTJWeWRtbGpaU2M3WEc1Y2JtTnZibk4wSUU5cFpHTk5aWFJoWkdGMFlWVnliRkJoZEdnZ1BTQW5MbmRsYkd3dGEyNXZkMjR2YjNCbGJtbGtMV052Ym1acFozVnlZWFJwYjI0bk8xeHVYRzVqYjI1emRDQkVaV1poZFd4MFVtVnpjRzl1YzJWVWVYQmxJRDBnWENKcFpGOTBiMnRsYmx3aU8xeHVZMjl1YzNRZ1JHVm1ZWFZzZEZOamIzQmxJRDBnWENKdmNHVnVhV1JjSWp0Y2JtTnZibk4wSUVSbFptRjFiSFJUZEdGc1pWTjBZWFJsUVdkbElEMGdOakE3SUM4dklITmxZMjl1WkhOY2JtTnZibk4wSUVSbFptRjFiSFJEYkc5amExTnJaWGRKYmxObFkyOXVaSE1nUFNBMk1DQXFJRFU3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRTlwWkdORGJHbGxiblJUWlhSMGFXNW5jeUI3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvZTF4dUlDQWdJQ0FnSUNBdkx5QnRaWFJoWkdGMFlTQnlaV3hoZEdWa1hHNGdJQ0FnSUNBZ0lHRjFkR2h2Y21sMGVTd2diV1YwWVdSaGRHRlZjbXdzSUcxbGRHRmtZWFJoTENCemFXZHVhVzVuUzJWNWN5eGNiaUFnSUNBZ0lDQWdMeThnWTJ4cFpXNTBJSEpsYkdGMFpXUmNiaUFnSUNBZ0lDQWdZMnhwWlc1MFgybGtMQ0J5WlhOd2IyNXpaVjkwZVhCbElEMGdSR1ZtWVhWc2RGSmxjM0J2Ym5ObFZIbHdaU3dnYzJOdmNHVWdQU0JFWldaaGRXeDBVMk52Y0dVc1hHNGdJQ0FnSUNBZ0lISmxaR2x5WldOMFgzVnlhU3dnY0c5emRGOXNiMmR2ZFhSZmNtVmthWEpsWTNSZmRYSnBMRnh1SUNBZ0lDQWdJQ0F2THlCdmNIUnBiMjVoYkNCd2NtOTBiMk52YkZ4dUlDQWdJQ0FnSUNCd2NtOXRjSFFzSUdScGMzQnNZWGtzSUcxaGVGOWhaMlVzSUhWcFgyeHZZMkZzWlhNc0lHRmpjbDkyWVd4MVpYTXNYRzRnSUNBZ0lDQWdJQzh2SUdKbGFHRjJhVzl5SUdac1lXZHpYRzRnSUNBZ0lDQWdJR1pwYkhSbGNsQnliM1J2WTI5c1EyeGhhVzF6SUQwZ2RISjFaU3dnYkc5aFpGVnpaWEpKYm1adklEMGdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2MzUmhiR1ZUZEdGMFpVRm5aU0E5SUVSbFptRjFiSFJUZEdGc1pWTjBZWFJsUVdkbExDQmpiRzlqYTFOclpYY2dQU0JFWldaaGRXeDBRMnh2WTJ0VGEyVjNTVzVUWldOdmJtUnpMRnh1SUNBZ0lDQWdJQ0F2THlCdmRHaGxjaUJpWldoaGRtbHZjbHh1SUNBZ0lDQWdJQ0J6ZEdGMFpWTjBiM0psSUQwZ2JtVjNJRmRsWWxOMGIzSmhaMlZUZEdGMFpWTjBiM0psS0Nrc1hHNGdJQ0FnSUNBZ0lGSmxjM0J2Ym5ObFZtRnNhV1JoZEc5eVEzUnZjaUE5SUZKbGMzQnZibk5sVm1Gc2FXUmhkRzl5TEZ4dUlDQWdJQ0FnSUNCTlpYUmhaR0YwWVZObGNuWnBZMlZEZEc5eUlEMGdUV1YwWVdSaGRHRlRaWEoyYVdObFhHNGdJQ0FnZlNBOUlIdDlLU0I3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVhWMGFHOXlhWFI1SUQwZ1lYVjBhRzl5YVhSNU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dFpYUmhaR0YwWVZWeWJDQTlJRzFsZEdGa1lYUmhWWEpzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl0WlhSaFpHRjBZU0E5SUcxbGRHRmtZWFJoTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6YVdkdWFXNW5TMlY1Y3lBOUlITnBaMjVwYm1kTFpYbHpPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk5zYVdWdWRGOXBaQ0E5SUdOc2FXVnVkRjlwWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WemNHOXVjMlZmZEhsd1pTQTlJSEpsYzNCdmJuTmxYM1I1Y0dVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOamIzQmxJRDBnYzJOdmNHVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxaR2x5WldOMFgzVnlhU0E5SUhKbFpHbHlaV04wWDNWeWFUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNHOXpkRjlzYjJkdmRYUmZjbVZrYVhKbFkzUmZkWEpwSUQwZ2NHOXpkRjlzYjJkdmRYUmZjbVZrYVhKbFkzUmZkWEpwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCeWIyMXdkQ0E5SUhCeWIyMXdkRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaR2x6Y0d4aGVTQTlJR1JwYzNCc1lYazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMWhlRjloWjJVZ1BTQnRZWGhmWVdkbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MWFWOXNiMk5oYkdWeklEMGdkV2xmYkc5allXeGxjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV055WDNaaGJIVmxjeUE5SUdGamNsOTJZV3gxWlhNN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlptbHNkR1Z5VUhKdmRHOWpiMnhEYkdGcGJYTWdQU0FoSVdacGJIUmxjbEJ5YjNSdlkyOXNRMnhoYVcxek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyRmtWWE5sY2tsdVptOGdQU0FoSVd4dllXUlZjMlZ5U1c1bWJ6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhiR1ZUZEdGMFpVRm5aU0E5SUhOMFlXeGxVM1JoZEdWQloyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTnNiMk5yVTJ0bGR5QTlJR05zYjJOclUydGxkenRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZEdGMFpWTjBiM0psSUQwZ2MzUmhkR1ZUZEc5eVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRtRnNhV1JoZEc5eUlEMGdibVYzSUZKbGMzQnZibk5sVm1Gc2FXUmhkRzl5UTNSdmNpaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYldWMFlXUmhkR0ZUWlhKMmFXTmxJRDBnYm1WM0lFMWxkR0ZrWVhSaFUyVnlkbWxqWlVOMGIzSW9kR2hwY3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1kyeHBaVzUwSUdOdmJtWnBaMXh1SUNBZ0lHZGxkQ0JqYkdsbGJuUmZhV1FvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlqYkdsbGJuUmZhV1E3WEc0Z0lDQWdmVnh1SUNBZ0lITmxkQ0JqYkdsbGJuUmZhV1FvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5amJHbGxiblJmYVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHOXVaUzEwYVcxbElITmxkQ0J2Ym14NVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWpiR2xsYm5SZmFXUWdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NWxjbkp2Y2loY0ltTnNhV1Z1ZEY5cFpDQm9ZWE1nWVd4eVpXRmtlU0JpWldWdUlHRnpjMmxuYm1Wa0xsd2lLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVkyeHBaVzUwWDJsa0lHaGhjeUJoYkhKbFlXUjVJR0psWlc0Z1lYTnphV2R1WldRdVhDSXBYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBJSEpsYzNCdmJuTmxYM1I1Y0dVb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpYTndiMjV6WlY5MGVYQmxPMXh1SUNBZ0lIMWNiaUFnSUNCblpYUWdjMk52Y0dVb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5elkyOXdaVHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBJSEpsWkdseVpXTjBYM1Z5YVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbFpHbHlaV04wWDNWeWFUdGNiaUFnSUNCOVhHNGdJQ0FnWjJWMElIQnZjM1JmYkc5bmIzVjBYM0psWkdseVpXTjBYM1Z5YVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNCdmMzUmZiRzluYjNWMFgzSmxaR2x5WldOMFgzVnlhVHRjYmlBZ0lDQjlYRzVjYmx4dUlDQWdJQzh2SUc5d2RHbHZibUZzSUhCeWIzUnZZMjlzSUhCaGNtRnRjMXh1SUNBZ0lHZGxkQ0J3Y205dGNIUW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXdjbTl0Y0hRN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZENCa2FYTndiR0Y1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWkdsemNHeGhlVHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBJRzFoZUY5aFoyVW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRZWGhmWVdkbE8xeHVJQ0FnSUgxY2JpQWdJQ0JuWlhRZ2RXbGZiRzlqWVd4bGN5Z3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzVnBYMnh2WTJGc1pYTTdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGRDQmhZM0pmZG1Gc2RXVnpLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV055WDNaaGJIVmxjenRjYmlBZ0lDQjlYRzVjYmx4dUlDQWdJQzh2SUcxbGRHRmtZWFJoWEc0Z0lDQWdaMlYwSUdGMWRHaHZjbWwwZVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJGMWRHaHZjbWwwZVR0Y2JpQWdJQ0I5WEc0Z0lDQWdjMlYwSUdGMWRHaHZjbWwwZVNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVgyRjFkR2h2Y21sMGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiMjVsTFhScGJXVWdjMlYwSUc5dWJIbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMkYxZEdodmNtbDBlU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtGd2lZWFYwYUc5eWFYUjVJR2hoY3lCaGJISmxZV1I1SUdKbFpXNGdZWE56YVdkdVpXUXVYQ0lwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSmhkWFJvYjNKcGRIa2dhR0Z6SUdGc2NtVmhaSGtnWW1WbGJpQmhjM05wWjI1bFpDNWNJaWxjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQm5aWFFnYldWMFlXUmhkR0ZWY213b0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmYldWMFlXUmhkR0ZWY213cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjFsZEdGa1lYUmhWWEpzSUQwZ2RHaHBjeTVoZFhSb2IzSnBkSGs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDl0WlhSaFpHRjBZVlZ5YkNBbUppQjBhR2x6TGw5dFpYUmhaR0YwWVZWeWJDNXBibVJsZUU5bUtFOXBaR05OWlhSaFpHRjBZVlZ5YkZCaGRHZ3BJRHdnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXRaWFJoWkdGMFlWVnliRnQwYUdsekxsOXRaWFJoWkdGMFlWVnliQzVzWlc1bmRHZ2dMU0F4WFNBaFBUMGdKeThuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyMWxkR0ZrWVhSaFZYSnNJQ3M5SUNjdkp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJXVjBZV1JoZEdGVmNtd2dLejBnVDJsa1kwMWxkR0ZrWVhSaFZYSnNVR0YwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0WlhSaFpHRjBZVlZ5YkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCelpYUjBZV0pzWlM5allXTm9ZV0pzWlNCdFpYUmhaR0YwWVNCMllXeDFaWE5jYmlBZ0lDQm5aWFFnYldWMFlXUmhkR0VvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0WlhSaFpHRjBZVHRjYmlBZ0lDQjlYRzRnSUNBZ2MyVjBJRzFsZEdGa1lYUmhLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMWxkR0ZrWVhSaElEMGdkbUZzZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWjJWMElITnBaMjVwYm1kTFpYbHpLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjMmxuYm1sdVowdGxlWE03WEc0Z0lDQWdmVnh1SUNBZ0lITmxkQ0J6YVdkdWFXNW5TMlY1Y3loMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6YVdkdWFXNW5TMlY1Y3lBOUlIWmhiSFZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUdKbGFHRjJhVzl5SUdac1lXZHpYRzRnSUNBZ1oyVjBJR1pwYkhSbGNsQnliM1J2WTI5c1EyeGhhVzF6S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWm1sc2RHVnlVSEp2ZEc5amIyeERiR0ZwYlhNN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZENCc2IyRmtWWE5sY2tsdVptOG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXNiMkZrVlhObGNrbHVabTg3WEc0Z0lDQWdmVnh1SUNBZ0lHZGxkQ0J6ZEdGc1pWTjBZWFJsUVdkbEtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmMzUmhiR1ZUZEdGMFpVRm5aVHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBJR05zYjJOclUydGxkeWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMk5zYjJOclUydGxkenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm5aWFFnYzNSaGRHVlRkRzl5WlNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNOMFlYUmxVM1J2Y21VN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZENCMllXeHBaR0YwYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5MllXeHBaR0YwYjNJN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZENCdFpYUmhaR0YwWVZObGNuWnBZMlVvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0WlhSaFpHRjBZVk5sY25acFkyVTdYRzRnSUNBZ2ZWeHVmVnh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6Y21NdlQybGtZME5zYVdWdWRGTmxkSFJwYm1kekxtcHpYRzRnS2lvdklpd2lMeThnUTI5d2VYSnBaMmgwSUNoaktTQkNjbTlqYXlCQmJHeGxiaUFtSUVSdmJXbHVhV05ySUVKaGFXVnlMaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUx5OGdUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQzRnVTJWbElFeEpRMFZPVTBVZ2FXNGdkR2hsSUhCeWIycGxZM1FnY205dmRDQm1iM0lnYkdsalpXNXpaU0JwYm1admNtMWhkR2x2Ymk1Y2JseHVhVzF3YjNKMElFeHZaeUJtY205dElDY3VMMHh2WnljN1hHNXBiWEJ2Y25RZ1IyeHZZbUZzSUdaeWIyMGdKeTR2UjJ4dlltRnNKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdWMlZpVTNSdmNtRm5aVk4wWVhSbFUzUnZjbVVnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0h0d2NtVm1hWGdnUFNCY0ltOXBaR011WENJc0lITjBiM0psSUQwZ1IyeHZZbUZzTG14dlkyRnNVM1J2Y21GblpYMGdQU0I3ZlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHOXlaU0E5SUhOMGIzSmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdjbVZtYVhnZ1BTQndjbVZtYVhnN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzJWMEtHdGxlU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKWFpXSlRkRzl5WVdkbFUzUmhkR1ZUZEc5eVpTNXpaWFJjSWl3Z2EyVjVLVHRjYmx4dUlDQWdJQ0FnSUNCclpYa2dQU0IwYUdsekxsOXdjbVZtYVhnZ0t5QnJaWGs3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSdmNtVXVjMlYwU1hSbGJTaHJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm5aWFFvYTJWNUtTQjdYRzRnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpVjJWaVUzUnZjbUZuWlZOMFlYUmxVM1J2Y21VdVoyVjBYQ0lzSUd0bGVTazdYRzVjYmlBZ0lDQWdJQ0FnYTJWNUlEMGdkR2hwY3k1ZmNISmxabWw0SUNzZ2EyVjVPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnBkR1Z0SUQwZ2RHaHBjeTVmYzNSdmNtVXVaMlYwU1hSbGJTaHJaWGtwTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2hwZEdWdEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpXMXZkbVVvYTJWNUtTQjdYRzRnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpVjJWaVUzUnZjbUZuWlZOMFlYUmxVM1J2Y21VdWNtVnRiM1psWENJc0lHdGxlU2s3WEc1Y2JpQWdJQ0FnSUNBZ2EyVjVJRDBnZEdocGN5NWZjSEpsWm1sNElDc2dhMlY1TzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JwZEdWdElEMGdkR2hwY3k1ZmMzUnZjbVV1WjJWMFNYUmxiU2hyWlhrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHOXlaUzV5WlcxdmRtVkpkR1Z0S0d0bGVTazdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtHbDBaVzBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2RsZEVGc2JFdGxlWE1vS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lWMlZpVTNSdmNtRm5aVk4wWVhSbFUzUnZjbVV1WjJWMFFXeHNTMlY1YzF3aUtUdGNibHh1SUNBZ0lDQWdJQ0IyWVhJZ2EyVjVjeUE5SUZ0ZE8xeHVYRzRnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2x1WkdWNElEMGdNRHNnYVc1a1pYZ2dQQ0IwYUdsekxsOXpkRzl5WlM1c1pXNW5kR2c3SUdsdVpHVjRLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCclpYa2dQU0IwYUdsekxsOXpkRzl5WlM1clpYa29hVzVrWlhncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYTJWNUxtbHVaR1Y0VDJZb2RHaHBjeTVmY0hKbFptbDRLU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVhNdWNIVnphQ2hyWlhrdWMzVmljM1J5S0hSb2FYTXVYM0J5WldacGVDNXNaVzVuZEdncEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNoclpYbHpLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOeVl5OVhaV0pUZEc5eVlXZGxVM1JoZEdWVGRHOXlaUzVxYzF4dUlDb3FMeUlzSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnUW5Kdlkyc2dRV3hzWlc0Z0ppQkViMjFwYm1samF5QkNZV2xsY2k0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaTh2SUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBdUlGTmxaU0JNU1VORlRsTkZJR2x1SUhSb1pTQndjbTlxWldOMElISnZiM1FnWm05eUlHeHBZMlZ1YzJVZ2FXNW1iM0p0WVhScGIyNHVYRzVjYm1OdmJuTjBJSFJwYldWeUlEMGdlMXh1SUNBZ0lITmxkRlJwYldWdmRYUTZJR1oxYm1OMGFXOXVJQ2hqWWl3Z1pIVnlZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9ZMklzSUdSMWNtRjBhVzl1S1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJR05zWldGeVZHbHRaVzkxZERvZ1puVnVZM1JwYjI0Z0tHaGhibVJzWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeGxZWEpVYVcxbGIzVjBLR2hoYm1Sc1pTazdYRzRnSUNBZ2ZWeHVmVHRjYmx4dWJHVjBJSFJsYzNScGJtY2dQU0JtWVd4elpUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1IyeHZZbUZzSUh0Y2JseHVJQ0FnSUhOMFlYUnBZeUJmZEdWemRHbHVaeWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHVnpkR2x1WnlBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHZGxkQ0JzYjJOaGRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwWlhOMGFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JHOWpZWFJwYjI0N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnYzNSaGRHbGpJR2RsZENCc2IyTmhiRk4wYjNKaFoyVW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR1Z6ZEdsdVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUd4dlkyRnNVM1J2Y21GblpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCemRHRjBhV01nWjJWMElITmxjM05wYjI1VGRHOXlZV2RsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSbGMzUnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWE56YVc5dVUzUnZjbUZuWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J6ZEdGMGFXTWdaMlYwSUZoTlRFaDBkSEJTWlhGMVpYTjBLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJsYzNScGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCWVRVeElkSFJ3VW1WeGRXVnpkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnpkR0YwYVdNZ1oyVjBJSFJwYldWeUtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUmxjM1JwYm1jcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYVcxbGNqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjA3WEc1Y2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOeVl5OUhiRzlpWVd3dWFuTmNiaUFxS2k4aUxDSXZMeUJEYjNCNWNtbG5hSFFnS0dNcElFSnliMk5ySUVGc2JHVnVJQ1lnUkc5dGFXNXBZMnNnUW1GcFpYSXVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdMaUJUWldVZ1RFbERSVTVUUlNCcGJpQjBhR1VnY0hKdmFtVmpkQ0J5YjI5MElHWnZjaUJzYVdObGJuTmxJR2x1Wm05eWJXRjBhVzl1TGx4dVhHNXBiWEJ2Y25RZ1RHOW5JR1p5YjIwZ0p5NHZURzluSnp0Y2JtbHRjRzl5ZENCTlpYUmhaR0YwWVZObGNuWnBZMlVnWm5KdmJTQW5MaTlOWlhSaFpHRjBZVk5sY25acFkyVW5PMXh1YVcxd2IzSjBJRlZ6WlhKSmJtWnZVMlZ5ZG1salpTQm1jbTl0SUNjdUwxVnpaWEpKYm1adlUyVnlkbWxqWlNjN1hHNXBiWEJ2Y25RZ1JYSnliM0pTWlhOd2IyNXpaU0JtY205dElDY3VMMFZ5Y205eVVtVnpjRzl1YzJVbk8xeHVhVzF3YjNKMElFcHZjMlZWZEdsc0lHWnliMjBnSnk0dlNtOXpaVlYwYVd3bk8xeHVYRzVqYjI1emRDQlFjbTkwYjJOdmJFTnNZV2x0Y3lBOUlGdGNJbTV2Ym1ObFhDSXNJRndpWVhSZmFHRnphRndpTENCY0ltbGhkRndpTENCY0ltNWlabHdpTENCY0ltVjRjRndpTENCY0ltRjFaRndpTENCY0ltbHpjMXdpTENCY0ltTmZhR0Z6YUZ3aVhUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1VtVnpjRzl1YzJWV1lXeHBaR0YwYjNJZ2UxeHVYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jMlYwZEdsdVozTXNJRTFsZEdGa1lYUmhVMlZ5ZG1salpVTjBiM0lnUFNCTlpYUmhaR0YwWVZObGNuWnBZMlVzSUZWelpYSkpibVp2VTJWeWRtbGpaVU4wYjNJZ1BTQlZjMlZ5U1c1bWIxTmxjblpwWTJVc0lHcHZjMlZWZEdsc0lEMGdTbTl6WlZWMGFXd3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnpaWFIwYVc1bmN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtGd2lUbThnYzJWMGRHbHVaM01nY0dGemMyVmtJSFJ2SUZKbGMzQnZibk5sVm1Gc2FXUmhkRzl5WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpYzJWMGRHbHVaM05jSWlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpaWFIwYVc1bmN5QTlJSE5sZEhScGJtZHpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRaWFJoWkdGMFlWTmxjblpwWTJVZ1BTQnVaWGNnVFdWMFlXUmhkR0ZUWlhKMmFXTmxRM1J2Y2loMGFHbHpMbDl6WlhSMGFXNW5jeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1Z6WlhKSmJtWnZVMlZ5ZG1salpTQTlJRzVsZHlCVmMyVnlTVzVtYjFObGNuWnBZMlZEZEc5eUtIUm9hWE11WDNObGRIUnBibWR6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYW05elpWVjBhV3dnUFNCcWIzTmxWWFJwYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVd4cFpHRjBaVk5wWjI1cGJsSmxjM0J2Ym5ObEtITjBZWFJsTENCeVpYTndiMjV6WlNrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbEpsYzNCdmJuTmxWbUZzYVdSaGRHOXlMblpoYkdsa1lYUmxVMmxuYm1sdVVtVnpjRzl1YzJWY0lpazdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzQnliMk5sYzNOVGFXZHVhVzVRWVhKaGJYTW9jM1JoZEdVc0lISmxjM0J2Ym5ObEtTNTBhR1Z1S0hKbGMzQnZibk5sSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aWMzUmhkR1VnY0hKdlkyVnpjMlZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzWmhiR2xrWVhSbFZHOXJaVzV6S0hOMFlYUmxMQ0J5WlhOd2IyNXpaU2t1ZEdobGJpaHlaWE53YjI1elpTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKMGIydGxibk1nZG1Gc2FXUmhkR1ZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl3Y205alpYTnpRMnhoYVcxektISmxjM0J2Ym5ObEtTNTBhR1Z1S0hKbGMzQnZibk5sSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKamJHRnBiWE1nY0hKdlkyVnpjMlZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6Y0c5dWMyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1Gc2FXUmhkR1ZUYVdkdWIzVjBVbVZ6Y0c5dWMyVW9jM1JoZEdVc0lISmxjM0J2Ym5ObEtTQjdYRzRnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpVW1WemNHOXVjMlZXWVd4cFpHRjBiM0l1ZG1Gc2FXUmhkR1ZUYVdkdWIzVjBVbVZ6Y0c5dWMyVmNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSE4wWVhSbExtbGtJQ0U5UFNCeVpYTndiMjV6WlM1emRHRjBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLRndpVTNSaGRHVWdaRzlsY3lCdWIzUWdiV0YwWTJoY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WldwbFkzUW9ibVYzSUVWeWNtOXlLRndpVTNSaGRHVWdaRzlsY3lCdWIzUWdiV0YwWTJoY0lpa3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdibTkzSUhSb1lYUWdkMlVnYTI1dmR5QjBhR1VnYzNSaGRHVWdiV0YwWTJobGN5d2dkR0ZyWlNCMGFHVWdjM1J2Y21Wa0lHUmhkR0ZjYmlBZ0lDQWdJQ0FnTHk4Z1lXNWtJSE5sZENCcGRDQnBiblJ2SUhSb1pTQnlaWE53YjI1elpTQnpieUJqWVd4c1pYSnpJR05oYmlCblpYUWdkR2hsYVhJZ2MzUmhkR1ZjYmlBZ0lDQWdJQ0FnTHk4Z2RHaHBjeUJwY3lCcGJYQnZjblJoYm5RZ1ptOXlJR0p2ZEdnZ2MzVmpZMlZ6Y3lBbUlHVnljbTl5SUc5MWRHTnZiV1Z6WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aWMzUmhkR1VnZG1Gc2FXUmhkR1ZrWENJcE8xeHVJQ0FnSUNBZ0lDQnlaWE53YjI1elpTNXpkR0YwWlNBOUlITjBZWFJsTG1SaGRHRTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjM0J2Ym5ObExtVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdWQyRnliaWhjSWxKbGMzQnZibk5sSUhkaGN5Qmxjbkp2Y2x3aUxDQnlaWE53YjI1elpTNWxjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eVVtVnpjRzl1YzJVb2NtVnpjRzl1YzJVcEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9jbVZ6Y0c5dWMyVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGOXdjbTlqWlhOelUybG5ibWx1VUdGeVlXMXpLSE4wWVhSbExDQnlaWE53YjI1elpTa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWxKbGMzQnZibk5sVm1Gc2FXUmhkRzl5TGw5d2NtOWpaWE56VTJsbmJtbHVVR0Z5WVcxelhDSXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlM1cFpDQWhQVDBnY21WemNHOXVjMlV1YzNSaGRHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTVsY25KdmNpaGNJbE4wWVhSbElHUnZaWE1nYm05MElHMWhkR05vWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZxWldOMEtHNWxkeUJGY25KdmNpaGNJbE4wWVhSbElHUnZaWE1nYm05MElHMWhkR05vWENJcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnpkR0YwWlM1amJHbGxiblJmYVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NWxjbkp2Y2loY0lrNXZJR05zYVdWdWRGOXBaQ0J2YmlCemRHRjBaVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxhbVZqZENodVpYY2dSWEp5YjNJb1hDSk9ieUJqYkdsbGJuUmZhV1FnYjI0Z2MzUmhkR1ZjSWlrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JwWmlBb0lYTjBZWFJsTG1GMWRHaHZjbWwwZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtVnljbTl5S0Z3aVRtOGdZWFYwYUc5eWFYUjVJRzl1SUhOMFlYUmxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnFaV04wS0c1bGR5QkZjbkp2Y2loY0lrNXZJR0YxZEdodmNtbDBlU0J2YmlCemRHRjBaVndpS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQzh2SUhSb2FYTWdZV3hzYjNkeklIUm9aU0JoZFhSb2IzSnBkSGtnZEc4Z1ltVWdiRzloWkdWa0lHWnliMjBnZEdobElITnBaMjVwYmlCemRHRjBaVnh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNObGRIUnBibWR6TG1GMWRHaHZjbWwwZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjMlYwZEdsdVozTXVZWFYwYUc5eWFYUjVJRDBnYzNSaGRHVXVZWFYwYUc5eWFYUjVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklHVnVjM1Z5WlNCM1pTZHlaU0IxYzJsdVp5QjBhR1VnWTI5eWNtVmpkQ0JoZFhSb2IzSnBkSGtnYVdZZ2RHaGxJR0YxZEdodmNtbDBlU0JwY3lCdWIzUWdiRzloWkdWa0lHWnliMjBnYzJsbmJtbHVJSE4wWVhSbFhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIUm9hWE11WDNObGRIUnBibWR6TG1GMWRHaHZjbWwwZVNBbUppQjBhR2x6TGw5elpYUjBhVzVuY3k1aGRYUm9iM0pwZEhrZ0lUMDlJSE4wWVhSbExtRjFkR2h2Y21sMGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtGd2lZWFYwYUc5eWFYUjVJRzFwYzIxaGRHTm9JRzl1SUhObGRIUnBibWR6SUhaekxpQnphV2R1YVc0Z2MzUmhkR1ZjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtGd2lZWFYwYUc5eWFYUjVJRzFwYzIxaGRHTm9JRzl1SUhObGRIUnBibWR6SUhaekxpQnphV2R1YVc0Z2MzUmhkR1ZjSWlrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUhSb2FYTWdZV3hzYjNkeklIUm9aU0JqYkdsbGJuUmZhV1FnZEc4Z1ltVWdiRzloWkdWa0lHWnliMjBnZEdobElITnBaMjVwYmlCemRHRjBaVnh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNObGRIUnBibWR6TG1Oc2FXVnVkRjlwWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjMlYwZEdsdVozTXVZMnhwWlc1MFgybGtJRDBnYzNSaGRHVXVZMnhwWlc1MFgybGtPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklHVnVjM1Z5WlNCM1pTZHlaU0IxYzJsdVp5QjBhR1VnWTI5eWNtVmpkQ0JqYkdsbGJuUmZhV1FnYVdZZ2RHaGxJR05zYVdWdWRGOXBaQ0JwY3lCdWIzUWdiRzloWkdWa0lHWnliMjBnYzJsbmJtbHVJSE4wWVhSbFhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIUm9hWE11WDNObGRIUnBibWR6TG1Oc2FXVnVkRjlwWkNBbUppQjBhR2x6TGw5elpYUjBhVzVuY3k1amJHbGxiblJmYVdRZ0lUMDlJSE4wWVhSbExtTnNhV1Z1ZEY5cFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtGd2lZMnhwWlc1MFgybGtJRzFwYzIxaGRHTm9JRzl1SUhObGRIUnBibWR6SUhaekxpQnphV2R1YVc0Z2MzUmhkR1ZjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtGd2lZMnhwWlc1MFgybGtJRzFwYzIxaGRHTm9JRzl1SUhObGRIUnBibWR6SUhaekxpQnphV2R1YVc0Z2MzUmhkR1ZjSWlrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0F2THlCdWIzY2dkR2hoZENCM1pTQnJibTkzSUhSb1pTQnpkR0YwWlNCdFlYUmphR1Z6TENCMFlXdGxJSFJvWlNCemRHOXlaV1FnWkdGMFlWeHVJQ0FnSUNBZ0lDQXZMeUJoYm1RZ2MyVjBJR2wwSUdsdWRHOGdkR2hsSUhKbGMzQnZibk5sSUhOdklHTmhiR3hsY25NZ1kyRnVJR2RsZENCMGFHVnBjaUJ6ZEdGMFpWeHVJQ0FnSUNBZ0lDQXZMeUIwYUdseklHbHpJR2x0Y0c5eWRHRnVkQ0JtYjNJZ1ltOTBhQ0J6ZFdOalpYTnpJQ1lnWlhKeWIzSWdiM1YwWTI5dFpYTmNiaUFnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0p6ZEdGMFpTQjJZV3hwWkdGMFpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUhKbGMzQnZibk5sTG5OMFlYUmxJRDBnYzNSaGRHVXVaR0YwWVR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvY21WemNHOXVjMlV1WlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTUzWVhKdUtGd2lVbVZ6Y0c5dWMyVWdkMkZ6SUdWeWNtOXlYQ0lzSUhKbGMzQnZibk5sTG1WeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0pTWlhOd2IyNXpaU2h5WlhOd2IyNXpaU2twTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0hOMFlYUmxMbTV2Ym1ObElDWW1JQ0Z5WlhOd2IyNXpaUzVwWkY5MGIydGxiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLRndpUlhod1pXTjBhVzVuSUdsa1gzUnZhMlZ1SUdsdUlISmxjM0J2Ym5ObFhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WcVpXTjBLRzVsZHlCRmNuSnZjaWhjSWs1dklHbGtYM1J2YTJWdUlHbHVJSEpsYzNCdmJuTmxYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaGMzUmhkR1V1Ym05dVkyVWdKaVlnY21WemNHOXVjMlV1YVdSZmRHOXJaVzRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2Wnk1bGNuSnZjaWhjSWs1dmRDQmxlSEJsWTNScGJtY2dhV1JmZEc5clpXNGdhVzRnY21WemNHOXVjMlZjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtGd2lWVzVsZUhCbFkzUmxaQ0JwWkY5MGIydGxiaUJwYmlCeVpYTndiMjV6WlZ3aUtTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSEpsYzNCdmJuTmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZjSEp2WTJWemMwTnNZV2x0Y3loeVpYTndiMjV6WlNrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbEpsYzNCdmJuTmxWbUZzYVdSaGRHOXlMbDl3Y205alpYTnpRMnhoYVcxelhDSXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpTNXBjMDl3Wlc1SlpFTnZibTVsWTNRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aWNtVnpjRzl1YzJVZ2FYTWdUMGxFUXl3Z2NISnZZMlZ6YzJsdVp5QmpiR0ZwYlhOY0lpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM0J2Ym5ObExuQnliMlpwYkdVZ1BTQjBhR2x6TGw5bWFXeDBaWEpRY205MGIyTnZiRU5zWVdsdGN5aHlaWE53YjI1elpTNXdjbTltYVd4bEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTmxkSFJwYm1kekxteHZZV1JWYzJWeVNXNW1ieUFtSmlCeVpYTndiMjV6WlM1aFkyTmxjM05mZEc5clpXNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSW14dllXUnBibWNnZFhObGNpQnBibVp2WENJcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNWelpYSkpibVp2VTJWeWRtbGpaUzVuWlhSRGJHRnBiWE1vY21WemNHOXVjMlV1WVdOalpYTnpYM1J2YTJWdUtTNTBhR1Z1S0dOc1lXbHRjeUE5UGlCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemNHOXVjMlV1Y0hKdlptbHNaU0E5SUhSb2FYTXVYMjFsY21kbFEyeGhhVzF6S0hKbGMzQnZibk5sTG5CeWIyWnBiR1VzSUdOc1lXbHRjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lkWE5sY2lCcGJtWnZJR05zWVdsdGN5QnlaV05sYVhabFpDd2dkWEJrWVhSbFpDQndjbTltYVd4bE9sd2lMQ0J5WlhOd2IyNXpaUzV3Y205bWFXeGxLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpjRzl1YzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbTV2ZENCc2IyRmthVzVuSUhWelpYSWdhVzVtYjF3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpY21WemNHOXVjMlVnYVhNZ2JtOTBJRTlKUkVNc0lHNXZkQ0J3Y205alpYTnphVzVuSUdOc1lXbHRjMXdpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb2NtVnpjRzl1YzJVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUY5dFpYSm5aVU5zWVdsdGN5aGpiR0ZwYlhNeExDQmpiR0ZwYlhNeUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTjFiSFFnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCamJHRnBiWE14S1R0Y2JseHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnVZVzFsSUdsdUlHTnNZV2x0Y3pJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlhNZ1BTQmpiR0ZwYlhNeVcyNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkhWbGN5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpYTWdQU0JiZG1Gc2RXVnpYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2RtRnNkV1VnYjJZZ2RtRnNkV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z5WlhOMWJIUmJibUZ0WlYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBXMjVoYldWZElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvY21WemRXeDBXMjVoYldWZEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ6ZFd4MFcyNWhiV1ZkTG1sdVpHVjRUMllvZG1Gc2RXVXBJRHdnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwVzI1aGJXVmRMbkIxYzJnb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSEpsYzNWc2RGdHVZVzFsWFNBaFBUMGdkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBXMjVoYldWZElEMGdXM0psYzNWc2RGdHVZVzFsWFN3Z2RtRnNkV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMlpwYkhSbGNsQnliM1J2WTI5c1EyeGhhVzF6S0dOc1lXbHRjeWtnZTF4dUlDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lsSmxjM0J2Ym5ObFZtRnNhV1JoZEc5eUxsOW1hV3gwWlhKUWNtOTBiMk52YkVOc1lXbHRjeXdnYVc1amIyMXBibWNnWTJ4aGFXMXpPbHdpTENCamJHRnBiWE1wTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0JqYkdGcGJYTXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5elpYUjBhVzVuY3k1ZlptbHNkR1Z5VUhKdmRHOWpiMnhEYkdGcGJYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGQnliM1J2WTI5c1EyeGhhVzF6TG1admNrVmhZMmdvZEhsd1pTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSEpsYzNWc2RGdDBlWEJsWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSW5CeWIzUnZZMjlzSUdOc1lXbHRjeUJtYVd4MFpYSmxaRndpTENCeVpYTjFiSFFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0p3Y205MGIyTnZiQ0JqYkdGcGJYTWdibTkwSUdacGJIUmxjbVZrWENJcFhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUY5MllXeHBaR0YwWlZSdmEyVnVjeWh6ZEdGMFpTd2djbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKU1pYTndiMjV6WlZaaGJHbGtZWFJ2Y2k1ZmRtRnNhV1JoZEdWVWIydGxibk5jSWlrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sTG1sa1gzUnZhMlZ1S1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpTNWhZMk5sYzNOZmRHOXJaVzRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lsWmhiR2xrWVhScGJtY2dhV1JmZEc5clpXNGdZVzVrSUdGalkyVnpjMTkwYjJ0bGJsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRtRnNhV1JoZEdWSlpGUnZhMlZ1UVc1a1FXTmpaWE56Vkc5clpXNG9jM1JoZEdVc0lISmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKV1lXeHBaR0YwYVc1bklHbGtYM1J2YTJWdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM1poYkdsa1lYUmxTV1JVYjJ0bGJpaHpkR0YwWlN3Z2NtVnpjRzl1YzJVcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKT2J5QnBaRjkwYjJ0bGJpQjBieUIyWVd4cFpHRjBaVndpS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2h5WlhOd2IyNXpaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYM1poYkdsa1lYUmxTV1JVYjJ0bGJrRnVaRUZqWTJWemMxUnZhMlZ1S0hOMFlYUmxMQ0J5WlhOd2IyNXpaU2tnZTF4dUlDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lsSmxjM0J2Ym5ObFZtRnNhV1JoZEc5eUxsOTJZV3hwWkdGMFpVbGtWRzlyWlc1QmJtUkJZMk5sYzNOVWIydGxibHdpS1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZG1Gc2FXUmhkR1ZKWkZSdmEyVnVLSE4wWVhSbExDQnlaWE53YjI1elpTa3VkR2hsYmloeVpYTndiMjV6WlNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkbUZzYVdSaGRHVkJZMk5sYzNOVWIydGxiaWh5WlhOd2IyNXpaU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUY5MllXeHBaR0YwWlVsa1ZHOXJaVzRvYzNSaGRHVXNJSEpsYzNCdmJuTmxLU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVVtVnpjRzl1YzJWV1lXeHBaR0YwYjNJdVgzWmhiR2xrWVhSbFNXUlViMnRsYmx3aUtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYTjBZWFJsTG01dmJtTmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmN1WlhKeWIzSW9YQ0pPYnlCdWIyNWpaU0J2YmlCemRHRjBaVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxhbVZqZENodVpYY2dSWEp5YjNJb1hDSk9ieUJ1YjI1alpTQnZiaUJ6ZEdGMFpWd2lLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lHeGxkQ0JxZDNRZ1BTQjBhR2x6TGw5cWIzTmxWWFJwYkM1d1lYSnpaVXAzZENoeVpYTndiMjV6WlM1cFpGOTBiMnRsYmlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYW5kMElIeDhJQ0ZxZDNRdWFHVmhaR1Z5SUh4OElDRnFkM1F1Y0dGNWJHOWhaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLRndpUm1GcGJHVmtJSFJ2SUhCaGNuTmxJR2xrWDNSdmEyVnVYQ0lzSUdwM2RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WldwbFkzUW9ibVYzSUVWeWNtOXlLRndpUm1GcGJHVmtJSFJ2SUhCaGNuTmxJR2xrWDNSdmEyVnVYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoemRHRjBaUzV1YjI1alpTQWhQVDBnYW5kMExuQmhlV3h2WVdRdWJtOXVZMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2Wnk1bGNuSnZjaWhjSWtsdWRtRnNhV1FnYm05dVkyVWdhVzRnYVdSZmRHOXJaVzVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtGd2lTVzUyWVd4cFpDQnViMjVqWlNCcGJpQnBaRjkwYjJ0bGJsd2lLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjJZWElnYTJsa0lEMGdhbmQwTG1obFlXUmxjaTVyYVdRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYTJsa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VaWEp5YjNJb1hDSk9ieUJyYVdRZ1ptOTFibVFnYVc0Z2FXUmZkRzlyWlc1Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WldwbFkzUW9ibVYzSUVWeWNtOXlLRndpVG04Z2EybGtJR1p2ZFc1a0lHbHVJR2xrWDNSdmEyVnVYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dFpYUmhaR0YwWVZObGNuWnBZMlV1WjJWMFNYTnpkV1Z5S0NrdWRHaGxiaWhwYzNOMVpYSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pTWldObGFYWmxaQ0JwYzNOMVpYSmNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dFpYUmhaR0YwWVZObGNuWnBZMlV1WjJWMFUybG5ibWx1WjB0bGVYTW9LUzUwYUdWdUtHdGxlWE1nUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYTJWNWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VaWEp5YjNJb1hDSk9ieUJ6YVdkdWFXNW5JR3RsZVhNZ1puSnZiU0J0WlhSaFpHRjBZVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnFaV04wS0c1bGR5QkZjbkp2Y2loY0lrNXZJSE5wWjI1cGJtY2dhMlY1Y3lCbWNtOXRJRzFsZEdGa1lYUmhYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbEpsWTJWcGRtVmtJSE5wWjI1cGJtY2dhMlY1YzF3aUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCclpYa2dQU0JyWlhsekxtWnBiSFJsY2loclpYa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2EyVjVMbXRwWkNBOVBUMGdhMmxrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFd6QmRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnJaWGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLRndpVG04Z2EyVjVJRzFoZEdOb2FXNW5JR3RwWkNCbWIzVnVaQ0JwYmlCemFXZHVhVzVuSUd0bGVYTmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvWENKT2J5QnJaWGtnYldGMFkyaHBibWNnYTJsa0lHWnZkVzVrSUdsdUlITnBaMjVwYm1jZ2EyVjVjMXdpS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdGMVpHbGxibU5sSUQwZ2MzUmhkR1V1WTJ4cFpXNTBYMmxrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpiRzlqYTFOclpYZEpibE5sWTI5dVpITWdQU0IwYUdsekxsOXpaWFIwYVc1bmN5NWpiRzlqYTFOclpYYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pXWVd4cFpHRnBibWNnU2xkVU95QjFjMmx1WnlCamJHOWpheUJ6YTJWM0lDaHBiaUJ6WldOdmJtUnpLU0J2WmpvZ1hDSXNJR05zYjJOclUydGxkMGx1VTJWamIyNWtjeWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZhbTl6WlZWMGFXd3VkbUZzYVdSaGRHVktkM1FvY21WemNHOXVjMlV1YVdSZmRHOXJaVzRzSUd0bGVTd2dhWE56ZFdWeUxDQmhkV1JwWlc1alpTd2dZMnh2WTJ0VGEyVjNTVzVUWldOdmJtUnpLUzUwYUdWdUtDZ3BQVDU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lTbGRVSUhaaGJHbGtZWFJwYjI0Z2MzVmpZMlZ6YzJaMWJGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNCdmJuTmxMbkJ5YjJacGJHVWdQU0JxZDNRdWNHRjViRzloWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOd2IyNXpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCZmRtRnNhV1JoZEdWQlkyTmxjM05VYjJ0bGJpaHlaWE53YjI1elpTa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWxKbGMzQnZibk5sVm1Gc2FXUmhkRzl5TGw5MllXeHBaR0YwWlVGalkyVnpjMVJ2YTJWdVhDSXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hjbVZ6Y0c5dWMyVXVjSEp2Wm1sc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtGd2lUbThnY0hKdlptbHNaU0JzYjJGa1pXUWdabkp2YlNCcFpGOTBiMnRsYmx3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYW1WamRDaHVaWGNnUlhKeWIzSW9YQ0pPYnlCd2NtOW1hV3hsSUd4dllXUmxaQ0JtY205dElHbGtYM1J2YTJWdVhDSXBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doY21WemNHOXVjMlV1Y0hKdlptbHNaUzVoZEY5b1lYTm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmN1WlhKeWIzSW9YQ0pPYnlCaGRGOW9ZWE5vSUdsdUlHbGtYM1J2YTJWdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WcVpXTjBLRzVsZHlCRmNuSnZjaWhjSWs1dklHRjBYMmhoYzJnZ2FXNGdhV1JmZEc5clpXNWNJaWtwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGeVpYTndiMjV6WlM1cFpGOTBiMnRsYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtVnljbTl5S0Z3aVRtOGdhV1JmZEc5clpXNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpXcGxZM1FvYm1WM0lFVnljbTl5S0Z3aVRtOGdhV1JmZEc5clpXNWNJaWtwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdiR1YwSUdwM2RDQTlJSFJvYVhNdVgycHZjMlZWZEdsc0xuQmhjbk5sU25kMEtISmxjM0J2Ym5ObExtbGtYM1J2YTJWdUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGcWQzUWdmSHdnSVdwM2RDNW9aV0ZrWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NWxjbkp2Y2loY0lrWmhhV3hsWkNCMGJ5QndZWEp6WlNCcFpGOTBiMnRsYmx3aUxDQnFkM1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnFaV04wS0c1bGR5QkZjbkp2Y2loY0lrWmhhV3hsWkNCMGJ5QndZWEp6WlNCcFpGOTBiMnRsYmx3aUtTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdhR0Z6YUVGc1p5QTlJR3AzZEM1b1pXRmtaWEl1WVd4bk8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVdoaGMyaEJiR2NnZkh3Z2FHRnphRUZzWnk1c1pXNW5kR2dnSVQwOUlEVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTVsY25KdmNpaGNJbFZ1YzNWd2NHOXlkR1ZrSUdGc1p6cGNJaXdnYUdGemFFRnNaeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpXcGxZM1FvYm1WM0lFVnljbTl5S0Z3aVZXNXpkWEJ3YjNKMFpXUWdZV3huT2lCY0lpQXJJR2hoYzJoQmJHY3BLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJvWVhOb1FtbDBjeUE5SUdoaGMyaEJiR2N1YzNWaWMzUnlLRElzSURNcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVdoaGMyaENhWFJ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdVpYSnliM0lvWENKVmJuTjFjSEJ2Y25SbFpDQmhiR2M2WENJc0lHaGhjMmhCYkdjc0lHaGhjMmhDYVhSektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYW1WamRDaHVaWGNnUlhKeWIzSW9YQ0pWYm5OMWNIQnZjblJsWkNCaGJHYzZJRndpSUNzZ2FHRnphRUZzWnlrcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYUdGemFFSnBkSE1nUFNCd1lYSnpaVWx1ZENob1lYTm9RbWwwY3lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVhOb1FtbDBjeUFoUFQwZ01qVTJJQ1ltSUdoaGMyaENhWFJ6SUNFOVBTQXpPRFFnSmlZZ2FHRnphRUpwZEhNZ0lUMDlJRFV4TWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtVnljbTl5S0Z3aVZXNXpkWEJ3YjNKMFpXUWdZV3huT2x3aUxDQm9ZWE5vUVd4bkxDQm9ZWE5vUW1sMGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WldwbFkzUW9ibVYzSUVWeWNtOXlLRndpVlc1emRYQndiM0owWldRZ1lXeG5PaUJjSWlBcklHaGhjMmhCYkdjcEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnphR0VnUFNCY0luTm9ZVndpSUNzZ2FHRnphRUpwZEhNN1hHNGdJQ0FnSUNBZ0lIWmhjaUJvWVhOb0lEMGdkR2hwY3k1ZmFtOXpaVlYwYVd3dWFHRnphRk4wY21sdVp5aHlaWE53YjI1elpTNWhZMk5sYzNOZmRHOXJaVzRzSUhOb1lTazdYRzRnSUNBZ0lDQWdJR2xtSUNnaGFHRnphQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLRndpWVdOalpYTnpYM1J2YTJWdUlHaGhjMmdnWm1GcGJHVmtPbHdpTENCemFHRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WcVpXTjBLRzVsZHlCRmNuSnZjaWhjSWtaaGFXeGxaQ0IwYnlCMllXeHBaR0YwWlNCaGRGOW9ZWE5vWENJcEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnNaV1owSUQwZ2FHRnphQzV6ZFdKemRISW9NQ3dnYUdGemFDNXNaVzVuZEdnZ0x5QXlLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHeGxablJmWWpZMGRTQTlJSFJvYVhNdVgycHZjMlZWZEdsc0xtaGxlRlJ2UW1GelpUWTBWWEpzS0d4bFpuUXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JHVm1kRjlpTmpSMUlDRTlQU0J5WlhOd2IyNXpaUzV3Y205bWFXeGxMbUYwWDJoaGMyZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTVsY25KdmNpaGNJa1poYVd4bFpDQjBieUIyWVd4cFpHRjBaU0JoZEY5b1lYTm9YQ0lzSUd4bFpuUmZZalkwZFN3Z2NtVnpjRzl1YzJVdWNISnZabWxzWlM1aGRGOW9ZWE5vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxhbVZqZENodVpYY2dSWEp5YjNJb1hDSkdZV2xzWldRZ2RHOGdkbUZzYVdSaGRHVWdZWFJmYUdGemFGd2lLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0hKbGMzQnZibk5sS1R0Y2JpQWdJQ0I5WEc1OVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZVbVZ6Y0c5dWMyVldZV3hwWkdGMGIzSXVhbk5jYmlBcUtpOGlMQ0l2THlCRGIzQjVjbWxuYUhRZ0tHTXBJRUp5YjJOcklFRnNiR1Z1SUNZZ1JHOXRhVzVwWTJzZ1FtRnBaWEl1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNHZMeUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3TGlCVFpXVWdURWxEUlU1VFJTQnBiaUIwYUdVZ2NISnZhbVZqZENCeWIyOTBJR1p2Y2lCc2FXTmxibk5sSUdsdVptOXliV0YwYVc5dUxseHVYRzVwYlhCdmNuUWdURzluSUdaeWIyMGdKeTR2VEc5bkp6dGNibWx0Y0c5eWRDQktjMjl1VTJWeWRtbGpaU0JtY205dElDY3VMMHB6YjI1VFpYSjJhV05sSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVFdWMFlXUmhkR0ZUWlhKMmFXTmxJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh6WlhSMGFXNW5jeXdnU25OdmJsTmxjblpwWTJWRGRHOXlJRDBnU25OdmJsTmxjblpwWTJVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGelpYUjBhVzVuY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtVnljbTl5S0Z3aVRtOGdjMlYwZEdsdVozTWdjR0Z6YzJWa0lIUnZJRTFsZEdGa1lYUmhVMlZ5ZG1salpWd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0luTmxkSFJwYm1kelhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWMGRHbHVaM01nUFNCelpYUjBhVzVuY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYW5OdmJsTmxjblpwWTJVZ1BTQnVaWGNnU25OdmJsTmxjblpwWTJWRGRHOXlLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaMlYwVFdWMFlXUmhkR0VvS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lUV1YwWVdSaGRHRlRaWEoyYVdObExtZGxkRTFsZEdGa1lYUmhYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXpaWFIwYVc1bmN5NXRaWFJoWkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSlNaWFIxY201cGJtY2diV1YwWVdSaGRHRWdabkp2YlNCelpYUjBhVzVuYzF3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9kR2hwY3k1ZmMyVjBkR2x1WjNNdWJXVjBZV1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5elpYUjBhVzVuY3k1dFpYUmhaR0YwWVZWeWJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtGd2lUbThnYldWMFlXUmhkR0ZWY213Z1kyOXVabWxuZFhKbFpDQnZiaUJ6WlhSMGFXNW5jMXdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxhbVZqZENodVpYY2dSWEp5YjNJb1hDSk9ieUJ0WlhSaFpHRjBZVlZ5YkNCamIyNW1hV2QxY21Wa0lHOXVJSE5sZEhScGJtZHpYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpWjJWMGRHbHVaeUJ0WlhSaFpHRjBZU0JtY205dFhDSXNJSFJvYVhNdVgzTmxkSFJwYm1kekxtMWxkR0ZrWVhSaFZYSnNLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZhbk52YmxObGNuWnBZMlV1WjJWMFNuTnZiaWgwYUdsekxsOXpaWFIwYVc1bmN5NXRaWFJoWkdGMFlWVnliQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDNTBhR1Z1S0cxbGRHRmtZWFJoSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbXB6YjI0Z2NtVmpaV2wyWldSY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMyVjBkR2x1WjNNdWJXVjBZV1JoZEdFZ1BTQnRaWFJoWkdGMFlUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXVjBZV1JoZEdFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1oyVjBTWE56ZFdWeUtDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWsxbGRHRmtZWFJoVTJWeWRtbGpaUzVuWlhSSmMzTjFaWEpjSWlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDluWlhSTlpYUmhaR0YwWVZCeWIzQmxjblI1S0Z3aWFYTnpkV1Z5WENJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRFRjFkR2h2Y21sNllYUnBiMjVGYm1Sd2IybHVkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSk5aWFJoWkdGMFlWTmxjblpwWTJVdVoyVjBRWFYwYUc5eWFYcGhkR2x2YmtWdVpIQnZhVzUwWENJcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWjJWMFRXVjBZV1JoZEdGUWNtOXdaWEowZVNoY0ltRjFkR2h2Y21sNllYUnBiMjVmWlc1a2NHOXBiblJjSWlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWjJWMFZYTmxja2x1Wm05RmJtUndiMmx1ZENncElIdGNiaUFnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pOWlhSaFpHRjBZVk5sY25acFkyVXVaMlYwVlhObGNrbHVabTlGYm1Sd2IybHVkRndpS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmRsZEUxbGRHRmtZWFJoVUhKdmNHVnlkSGtvWENKMWMyVnlhVzVtYjE5bGJtUndiMmx1ZEZ3aUtUdGNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdaMlYwUTJobFkydFRaWE56YVc5dVNXWnlZVzFsS0NrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJazFsZEdGa1lYUmhVMlZ5ZG1salpTNW5aWFJEYUdWamExTmxjM05wYjI1SlpuSmhiV1ZjSWlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDluWlhSTlpYUmhaR0YwWVZCeWIzQmxjblI1S0Z3aVkyaGxZMnRmYzJWemMybHZibDlwWm5KaGJXVmNJaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaMlYwUlc1a1UyVnpjMmx2YmtWdVpIQnZhVzUwS0NrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJazFsZEdGa1lYUmhVMlZ5ZG1salpTNW5aWFJGYm1SVFpYTnphVzl1Ulc1a2NHOXBiblJjSWlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDluWlhSTlpYUmhaR0YwWVZCeWIzQmxjblI1S0Z3aVpXNWtYM05sYzNOcGIyNWZaVzVrY0c5cGJuUmNJaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMmRsZEUxbGRHRmtZWFJoVUhKdmNHVnlkSGtvYm1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWsxbGRHRmtZWFJoVTJWeWRtbGpaUzVmWjJWMFRXVjBZV1JoZEdGUWNtOXdaWEowZVZ3aUxDQnVZVzFsS1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhSTlpYUmhaR0YwWVNncExuUm9aVzRvYldWMFlXUmhkR0VnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKdFpYUmhaR0YwWVNCeVpXTnBaWFpsWkZ3aUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFsZEdGa1lYUmhXMjVoYldWZElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VaWEp5YjNJb1hDSk5aWFJoWkdGMFlTQmtiMlZ6SUc1dmRDQmpiMjUwWVdsdUlIQnliM0JsY25SNUlGd2lJQ3NnYm1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lUV1YwWVdSaGRHRWdaRzlsY3lCdWIzUWdZMjl1ZEdGcGJpQndjbTl3WlhKMGVTQmNJaUFySUc1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYldWMFlXUmhkR0ZiYm1GdFpWMDdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2RsZEZOcFoyNXBibWRMWlhsektDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWsxbGRHRmtZWFJoVTJWeWRtbGpaUzVuWlhSVGFXZHVhVzVuUzJWNWMxd2lLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmMyVjBkR2x1WjNNdWMybG5ibWx1WjB0bGVYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lVbVYwZFhKdWFXNW5JSE5wWjI1cGJtZExaWGx6SUdaeWIyMGdjMlYwZEdsdVozTmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0hSb2FYTXVYM05sZEhScGJtZHpMbk5wWjI1cGJtZExaWGx6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5blpYUk5aWFJoWkdGMFlWQnliM0JsY25SNUtGd2lhbmRyYzE5MWNtbGNJaWt1ZEdobGJpaHFkMnR6WDNWeWFTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbXAzYTNOZmRYSnBJSEpsWTJWcGRtVmtYQ0lzSUdwM2EzTmZkWEpwS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgycHpiMjVUWlhKMmFXTmxMbWRsZEVwemIyNG9hbmRyYzE5MWNta3BMblJvWlc0b2EyVjVVMlYwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbXRsZVNCelpYUWdjbVZqWldsMlpXUmNJaXdnYTJWNVUyVjBLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhMlY1VTJWMExtdGxlWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLRndpVFdsemMybHVaeUJyWlhseklHOXVJR3RsZVhObGRGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVRXbHpjMmx1WnlCclpYbHpJRzl1SUd0bGVYTmxkRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWm1sc2RHVnlaV1JMWlhseklEMGdkR2hwY3k1ZlptbHNkR1Z5VTJsbmJtbHVaMHRsZVhNb2EyVjVVMlYwTG10bGVYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpWm1sc2RHVnlaV1FnYTJWNWMxd2lMQ0JtYVd4MFpYSmxaRXRsZVhNcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMyVjBkR2x1WjNNdWMybG5ibWx1WjB0bGVYTWdQU0JtYVd4MFpYSmxaRXRsZVhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM05sZEhScGJtZHpMbk5wWjI1cGJtZExaWGx6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUY5bWFXeDBaWEpUYVdkdWFXNW5TMlY1Y3loclpYbHpLU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVRXVjBZV1JoZEdGVFpYSjJhV05sTGw5bWFXeDBaWEpUYVdkdWFXNW5TMlY1YzF3aUxDQnJaWGx6S1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2EyVjVjeTVtYVd4MFpYSW9hWFJsYlNBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVhSbGJTNTFjMlVnUFQwOUlGd2ljMmxuWENJN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibjFjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwwMWxkR0ZrWVhSaFUyVnlkbWxqWlM1cWMxeHVJQ29xTHlJc0lpOHZJRU52Y0hseWFXZG9kQ0FvWXlrZ1FuSnZZMnNnUVd4c1pXNGdKaUJFYjIxcGJtbGpheUJDWVdsbGNpNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmk4dklFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQXVJRk5sWlNCTVNVTkZUbE5GSUdsdUlIUm9aU0J3Y205cVpXTjBJSEp2YjNRZ1ptOXlJR3hwWTJWdWMyVWdhVzVtYjNKdFlYUnBiMjR1WEc1Y2JtbHRjRzl5ZENCTWIyY2dabkp2YlNBbkxpOU1iMmNuTzF4dWFXMXdiM0owSUVkc2IySmhiQ0JtY205dElDY3VMMGRzYjJKaGJDYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFcHpiMjVUWlhKMmFXTmxJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhZVFV4SWRIUndVbVZ4ZFdWemRFTjBiM0lnUFNCSGJHOWlZV3d1V0UxTVNIUjBjRkpsY1hWbGMzUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZXRTFNU0hSMGNGSmxjWFZsYzNRZ1BTQllUVXhJZEhSd1VtVnhkV1Z6ZEVOMGIzSTdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJR2RsZEVwemIyNG9kWEpzTENCMGIydGxiaWtnZTF4dUlDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lrcHpiMjVUWlhKMmFXTmxMbWRsZEVwemIyNWNJaXdnZFhKc0tUdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRYSnNLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTVsY25KdmNpaGNJazV2SUhWeWJDQndZWE56WldSY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKMWNteGNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWEVnUFNCdVpYY2dkR2hwY3k1ZldFMU1TSFIwY0ZKbGNYVmxjM1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY1M1dmNHVnVLQ2RIUlZRbkxDQjFjbXdwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhFdWIyNXNiMkZrSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pJVkZSUUlISmxjM0J2Ym5ObElISmxZMlZwZG1Wa0xDQnpkR0YwZFhOY0lpd2djbVZ4TG5OMFlYUjFjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjUzV6ZEdGMGRYTWdQVDA5SURJd01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0VwVFQwNHVjR0Z5YzJVb2NtVnhMbkpsYzNCdmJuTmxWR1Y0ZENrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtFVnljbTl5S0hKbGNTNXpkR0YwZFhOVVpYaDBJQ3NnWENJZ0tGd2lJQ3NnY21WeExuTjBZWFIxY3lBcklGd2lLVndpS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeExtOXVaWEp5YjNJZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdVpYSnliM0lvWENKdVpYUjNiM0pySUdWeWNtOXlYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hGY25KdmNpaGNJazVsZEhkdmNtc2dSWEp5YjNKY0lpa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSdmEyVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKMGIydGxiaUJ3WVhOelpXUXNJSE5sZEhScGJtY2dRWFYwYUc5eWFYcGhkR2x2YmlCb1pXRmtaWEpjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnhMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9YQ0pCZFhSb2IzSnBlbUYwYVc5dVhDSXNJRndpUW1WaGNtVnlJRndpSUNzZ2RHOXJaVzRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWEV1YzJWdVpDZ3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1OVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZTbk52YmxObGNuWnBZMlV1YW5OY2JpQXFLaThpTENJdkx5QkRiM0I1Y21sbmFIUWdLR01wSUVKeWIyTnJJRUZzYkdWdUlDWWdSRzl0YVc1cFkyc2dRbUZwWlhJdUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzR2THlCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0xpQlRaV1VnVEVsRFJVNVRSU0JwYmlCMGFHVWdjSEp2YW1WamRDQnliMjkwSUdadmNpQnNhV05sYm5ObElHbHVabTl5YldGMGFXOXVMbHh1WEc1cGJYQnZjblFnU25OdmJsTmxjblpwWTJVZ1puSnZiU0FuTGk5S2MyOXVVMlZ5ZG1salpTYzdYRzVwYlhCdmNuUWdUV1YwWVdSaGRHRlRaWEoyYVdObElHWnliMjBnSnk0dlRXVjBZV1JoZEdGVFpYSjJhV05sSnp0Y2JtbHRjRzl5ZENCTWIyY2dabkp2YlNBbkxpOU1iMmNuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJWYzJWeVNXNW1iMU5sY25acFkyVWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLSE5sZEhScGJtZHpMQ0JLYzI5dVUyVnlkbWxqWlVOMGIzSWdQU0JLYzI5dVUyVnlkbWxqWlN3Z1RXVjBZV1JoZEdGVFpYSjJhV05sUTNSdmNpQTlJRTFsZEdGa1lYUmhVMlZ5ZG1salpTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYTmxkSFJwYm1kektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VaWEp5YjNJb1hDSk9ieUJ6WlhSMGFXNW5jeUJ3WVhOelpXUWdkRzhnVlhObGNrbHVabTlUWlhKMmFXTmxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2ljMlYwZEdsdVozTmNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5elpYUjBhVzVuY3lBOUlITmxkSFJwYm1kek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cWMyOXVVMlZ5ZG1salpTQTlJRzVsZHlCS2MyOXVVMlZ5ZG1salpVTjBiM0lvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYldWMFlXUmhkR0ZUWlhKMmFXTmxJRDBnYm1WM0lFMWxkR0ZrWVhSaFUyVnlkbWxqWlVOMGIzSW9kR2hwY3k1ZmMyVjBkR2x1WjNNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRFTnNZV2x0Y3loMGIydGxiaWtnZTF4dUlDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lsVnpaWEpKYm1adlUyVnlkbWxqWlM1blpYUkRiR0ZwYlhOY0lpazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBiMnRsYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtVnljbTl5S0Z3aVRtOGdkRzlyWlc0Z2NHRnpjMlZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZxWldOMEtHNWxkeUJGY25KdmNpaGNJa0VnZEc5clpXNGdhWE1nY21WeGRXbHlaV1JjSWlrcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMWxkR0ZrWVhSaFUyVnlkbWxqWlM1blpYUlZjMlZ5U1c1bWIwVnVaSEJ2YVc1MEtDa3VkR2hsYmloMWNtd2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0p5WldObGFYWmxaQ0IxYzJWeWFXNW1ieUIxY214Y0lpd2dkWEpzS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgycHpiMjVUWlhKMmFXTmxMbWRsZEVwemIyNG9kWEpzTENCMGIydGxiaWt1ZEdobGJpaGpiR0ZwYlhNZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpWTJ4aGFXMXpJSEpsWTJWcGRtVmtYQ0lzSUdOc1lXbHRjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05zWVdsdGN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOeVl5OVZjMlZ5U1c1bWIxTmxjblpwWTJVdWFuTmNiaUFxS2k4aUxDSXZMeUJEYjNCNWNtbG5hSFFnS0dNcElFSnliMk5ySUVGc2JHVnVJQ1lnUkc5dGFXNXBZMnNnUW1GcFpYSXVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdMaUJUWldVZ1RFbERSVTVUUlNCcGJpQjBhR1VnY0hKdmFtVmpkQ0J5YjI5MElHWnZjaUJzYVdObGJuTmxJR2x1Wm05eWJXRjBhVzl1TGx4dVhHNXBiWEJ2Y25RZ1RHOW5JR1p5YjIwZ0p5NHZURzluSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUlhKeWIzSlNaWE53YjI1elpTQmxlSFJsYm1SeklFVnljbTl5SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loN1pYSnliM0lzSUdWeWNtOXlYMlJsYzJOeWFYQjBhVzl1TENCbGNuSnZjbDkxY21rc0lITjBZWFJsZlQxN2ZWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdhV1lnS0NGbGNuSnZjaWw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmN1WlhKeWIzSW9YQ0pPYnlCbGNuSnZjaUJ3WVhOelpXUWdkRzhnUlhKeWIzSlNaWE53YjI1elpWd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltVnljbTl5WENJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0J6ZFhCbGNpaGxjbkp2Y2w5a1pYTmpjbWx3ZEdsdmJpQjhmQ0JsY25KdmNpazdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1VnUFNCY0lrVnljbTl5VW1WemNHOXVjMlZjSWpzZ1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlJRDBnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0pmWkdWelkzSnBjSFJwYjI0Z1BTQmxjbkp2Y2w5a1pYTmpjbWx3ZEdsdmJqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjbDkxY21rZ1BTQmxjbkp2Y2w5MWNtazdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsSUQwZ2MzUmhkR1U3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZSWEp5YjNKU1pYTndiMjV6WlM1cWMxeHVJQ29xTHlJc0lpOHZJRU52Y0hseWFXZG9kQ0FvWXlrZ1FuSnZZMnNnUVd4c1pXNGdKaUJFYjIxcGJtbGpheUJDWVdsbGNpNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmk4dklFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQXVJRk5sWlNCTVNVTkZUbE5GSUdsdUlIUm9aU0J3Y205cVpXTjBJSEp2YjNRZ1ptOXlJR3hwWTJWdWMyVWdhVzVtYjNKdFlYUnBiMjR1WEc1Y2JtbHRjRzl5ZENCN0lHcDNjeXdnUzBWWlZWUkpUQ0JoY3lCTFpYbFZkR2xzTENCWU5UQTVMQ0JqY25sd2RHOHNJR2hsZUhSdllqWTBkU0I5SUdaeWIyMGdKMnB6Y25OaGMybG5iaWM3WEc1cGJYQnZjblFnVEc5bklHWnliMjBnSnk0dlRHOW5KenRjYmx4dVkyOXVjM1FnUVd4c2IzZGxaRk5wWjI1cGJtZEJiR2R6SUQwZ1d5ZFNVekkxTmljc0lDZFNVek00TkNjc0lDZFNVelV4TWljc0lDZFFVekkxTmljc0lDZFFVek00TkNjc0lDZFFVelV4TWljc0lDZEZVekkxTmljc0lDZEZVek00TkNjc0lDZEZVelV4TWlkZE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCS2IzTmxWWFJwYkNCN1hHNWNiaUFnSUNCemRHRjBhV01nY0dGeWMyVktkM1FvYW5kMEtTQjdYRzRnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpU205elpWVjBhV3d1Y0dGeWMyVktkM1JjSWlrN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZEc5clpXNGdQU0JxZDNNdVNsZFRMbkJoY25ObEtHcDNkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGxZV1JsY2pvZ2RHOXJaVzR1YUdWaFpHVnlUMkpxTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGVXeHZZV1E2SUhSdmEyVnVMbkJoZVd4dllXUlBZbXBjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLR1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJSFpoYkdsa1lYUmxTbmQwS0dwM2RDd2dhMlY1TENCcGMzTjFaWElzSUdGMVpHbGxibU5sTENCamJHOWphMU5yWlhjc0lHNXZkeWtnZTF4dUlDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lrcHZjMlZWZEdsc0xuWmhiR2xrWVhSbFNuZDBYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYTJWNUxtdDBlU0E5UFQwZ1hDSlNVMEZjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hyWlhrdVpTQW1KaUJyWlhrdWJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYa2dQU0JMWlhsVmRHbHNMbWRsZEV0bGVTaHJaWGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoclpYa3VlRFZqSUNZbUlHdGxlUzU0TldNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVNBOUlFdGxlVlYwYVd3dVoyVjBTMlY1S0ZnMU1Ea3VaMlYwVUhWaWJHbGpTMlY1Um5KdmJVTmxjblJRUlUwb2EyVjVMbmcxWTFzd1hTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtVnljbTl5S0Z3aVVsTkJJR3RsZVNCdGFYTnphVzVuSUd0bGVTQnRZWFJsY21saGJGd2lMQ0JyWlhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtGd2lVbE5CSUd0bGVTQnRhWE56YVc1bklHdGxlU0J0WVhSbGNtbGhiRndpS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9hMlY1TG10MGVTQTlQVDBnWENKRlExd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHdGxlUzVqY25ZZ0ppWWdhMlY1TG5nZ0ppWWdhMlY1TG5rcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNUlEMGdTMlY1VlhScGJDNW5aWFJMWlhrb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dlp5NWxjbkp2Y2loY0lrVkRJR3RsZVNCdGFYTnphVzVuSUd0bGVTQnRZWFJsY21saGJGd2lMQ0JyWlhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtGd2lSVU1nYTJWNUlHMXBjM05wYm1jZ2EyVjVJRzFoZEdWeWFXRnNYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VaWEp5YjNJb1hDSlZibk4xY0hCdmNuUmxaQ0JyWlhrZ2RIbHdaVndpTENCclpYa2dKaVlnYTJWNUxtdDBlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZxWldOMEtHNWxkeUJGY25KdmNpaGNJbFZ1YzNWd2NHOXlkR1ZrSUd0bGVTQjBlWEJsT2lCY0lpQXJJR3RsZVNBbUppQnJaWGt1YTNSNUtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJLYjNObFZYUnBiQzVmZG1Gc2FXUmhkR1ZLZDNRb2FuZDBMQ0JyWlhrc0lHbHpjM1ZsY2l3Z1lYVmthV1Z1WTJVc0lHTnNiMk5yVTJ0bGR5d2dibTkzS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtHVWdKaVlnWlM1dFpYTnpZV2RsSUh4OElHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WcVpXTjBLRndpU2xkVUlIWmhiR2xrWVhScGIyNGdabUZwYkdWa1hDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklGOTJZV3hwWkdGMFpVcDNkQ2hxZDNRc0lHdGxlU3dnYVhOemRXVnlMQ0JoZFdScFpXNWpaU3dnWTJ4dlkydFRhMlYzTENCdWIzY3BJSHRjYmlBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKS2IzTmxWWFJwYkM1ZmRtRnNhV1JoZEdWS2QzUmNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZqYkc5amExTnJaWGNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zYjJOclUydGxkeUE5SURBN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lXNXZkeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdibTkzSUQwZ2NHRnljMlZKYm5Rb1JHRjBaUzV1YjNjb0tTQXZJREV3TURBcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlIQmhlV3h2WVdRZ1BTQktiM05sVlhScGJDNXdZWEp6WlVwM2RDaHFkM1FwTG5CaGVXeHZZV1E3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJoZVd4dllXUXVhWE56SUNFOVBTQnBjM04xWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NWxjbkp2Y2loY0lrbHVkbUZzYVdRZ2FYTnpkV1Z5SUdsdUlIUnZhMlZ1WENJc0lIQmhlV3h2WVdRdWFYTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvWENKSmJuWmhiR2xrSUdsemMzVmxjaUJwYmlCMGIydGxiam9nWENJZ0t5QndZWGxzYjJGa0xtbHpjeWtwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0hCaGVXeHZZV1F1WVhWa0lDRTlQU0JoZFdScFpXNWpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLRndpU1c1MllXeHBaQ0JoZFdScFpXNWpaU0JwYmlCMGIydGxibHdpTENCd1lYbHNiMkZrTG1GMVpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WldwbFkzUW9ibVYzSUVWeWNtOXlLRndpU1c1MllXeHBaQ0JoZFdScFpXNWpaU0JwYmlCMGIydGxiam9nWENJZ0t5QndZWGxzYjJGa0xtRjFaQ2twTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUd4dmQyVnlUbTkzSUQwZ2JtOTNJQ3NnWTJ4dlkydFRhMlYzTzF4dUlDQWdJQ0FnSUNCMllYSWdkWEJ3WlhKT2IzY2dQU0J1YjNjZ0xTQmpiRzlqYTFOclpYYzdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHeHZkMlZ5VG05M0lEd2djR0Y1Ykc5aFpDNXBZWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2Wnk1bGNuSnZjaWhjSW1saGRDQnBjeUJwYmlCMGFHVWdablYwZFhKbFhDSXNJSEJoZVd4dllXUXVhV0YwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxhbVZqZENodVpYY2dSWEp5YjNJb1hDSnBZWFFnYVhNZ2FXNGdkR2hsSUdaMWRIVnlaVG9nWENJZ0t5QndZWGxzYjJGa0xtbGhkQ2twTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0d4dmQyVnlUbTkzSUR3Z2NHRjViRzloWkM1dVltWXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTVsY25KdmNpaGNJbTVpWmlCcGN5QnBiaUIwYUdVZ1puVjBkWEpsWENJc0lIQmhlV3h2WVdRdWJtSm1LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2h1WlhjZ1JYSnliM0lvWENKdVltWWdhWE1nYVc0Z2RHaGxJR1oxZEhWeVpUb2dYQ0lnS3lCd1lYbHNiMkZrTG01aVppa3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJoZVd4dllXUXVaWGh3SUR3Z2RYQndaWEpPYjNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NWxjbkp2Y2loY0ltVjRjQ0JwY3lCcGJpQjBhR1VnY0dGemRGd2lMQ0J3WVhsc2IyRmtMbVY0Y0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb2JtVjNJRVZ5Y205eUtGd2laWGh3SUdseklHbHVJSFJvWlNCd1lYTjBPbHdpSUNzZ2NHRjViRzloWkM1bGVIQXBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdwM2N5NUtWMU11ZG1WeWFXWjVLR3AzZEN3Z2EyVjVMQ0JCYkd4dmQyVmtVMmxuYm1sdVowRnNaM01wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtGd2ljMmxuYm1GMGRYSmxJSFpoYkdsa1lYUnBiMjRnWm1GcGJHVmtYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYW1WamRDaHVaWGNnUlhKeWIzSW9YQ0p6YVdkdVlYUjFjbVVnZG1Gc2FXUmhkR2x2YmlCbVlXbHNaV1JjSWlrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VaWEp5YjNJb1pTQW1KaUJsTG0xbGMzTmhaMlVnZkh3Z1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WldwbFkzUW9ibVYzSUVWeWNtOXlLRndpYzJsbmJtRjBkWEpsSUhaaGJHbGtZWFJwYjI0Z1ptRnBiR1ZrWENJcEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkR0YwYVdNZ2FHRnphRk4wY21sdVp5aDJZV3gxWlN3Z1lXeG5LU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVNtOXpaVlYwYVd3dWFHRnphRk4wY21sdVoxd2lMQ0IyWVd4MVpTd2dZV3huS1R0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamNubHdkRzh1VlhScGJDNW9ZWE5vVTNSeWFXNW5LSFpoYkhWbExDQmhiR2NwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VaWEp5YjNJb1pTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkR0YwYVdNZ2FHVjRWRzlDWVhObE5qUlZjbXdvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKS2IzTmxWWFJwYkM1b1pYaFViMEpoYzJVMk5GVnliRndpTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYUdWNGRHOWlOalIxS0haaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtVnljbTl5S0dVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVnh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6Y21NdlNtOXpaVlYwYVd3dWFuTmNiaUFxS2k4aUxDSmNiblpoY2lCdVlYWnBaMkYwYjNJZ1BTQjdmVHRjYm01aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RZ1BTQm1ZV3h6WlR0Y2JseHVkbUZ5SUhkcGJtUnZkeUE5SUh0OU8xeHVMeXBjYmlBcUlHcHpjbk5oYzJsbmJpQTFMakF1TVRJZ0tHTXBJREl3TVRBdE1qQXhOaUJMWlc1cWFTQlZjblZ6YUdsdFlTQjhJR3RxZFhJdVoybDBhSFZpTG1OdmJTOXFjM0p6WVhOcFoyNHZiR2xqWlc1elpWeHVJQ292WEc1Y2JpOHFYRzU1WVdodmJ5MXRhVzR1YW5OY2JrTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE1Td2dXV0ZvYjI4aElFbHVZeTRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JrTnZaR1VnYkdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVKVFJDQk1hV05sYm5ObE9seHVhSFIwY0RvdkwyUmxkbVZzYjNCbGNpNTVZV2h2Ynk1amIyMHZlWFZwTDJ4cFkyVnVjMlV1YUhSdGJGeHVkbVZ5YzJsdmJqb2dNaTQ1TGpCY2Jpb3ZYRzVwWmloMGVYQmxiMllnV1VGSVQwODlQVndpZFc1a1pXWnBibVZrWENKOGZDRlpRVWhQVHlsN2RtRnlJRmxCU0U5UFBYdDlPMzFaUVVoUFR5NXVZVzFsYzNCaFkyVTlablZ1WTNScGIyNG9LWHQyWVhJZ1lqMWhjbWQxYldWdWRITXNaejF1ZFd4c0xHVXNZeXhtTzJadmNpaGxQVEE3WlR4aUxteGxibWQwYUR0bFBXVXJNU2w3Wmowb1hDSmNJaXRpVzJWZEtTNXpjR3hwZENoY0lpNWNJaWs3WnoxWlFVaFBUenRtYjNJb1l6MG9abHN3WFQwOVhDSlpRVWhQVDF3aUtUOHhPakE3WXp4bUxteGxibWQwYUR0alBXTXJNU2w3WjF0bVcyTmRYVDFuVzJaYlkxMWRmSHg3ZlR0blBXZGJabHRqWFYwN2ZYMXlaWFIxY200Z1p6dDlPMWxCU0U5UExteHZaejFtZFc1amRHbHZiaWhrTEdFc1l5bDdkbUZ5SUdJOVdVRklUMDh1ZDJsa1oyVjBMa3h2WjJkbGNqdHBaaWhpSmlaaUxteHZaeWw3Y21WMGRYSnVJR0l1Ykc5bktHUXNZU3hqS1R0OVpXeHpaWHR5WlhSMWNtNGdabUZzYzJVN2ZYMDdXVUZJVDA4dWNtVm5hWE4wWlhJOVpuVnVZM1JwYjI0b1lTeG1MR1VwZTNaaGNpQnJQVmxCU0U5UExtVnVkaTV0YjJSMWJHVnpMR01zYWl4b0xHY3NaRHRwWmlnaGExdGhYU2w3YTF0aFhUMTdkbVZ5YzJsdmJuTTZXMTBzWW5WcGJHUnpPbHRkZlR0OVl6MXJXMkZkTzJvOVpTNTJaWEp6YVc5dU8yZzlaUzVpZFdsc1pEdG5QVmxCU0U5UExtVnVkaTVzYVhOMFpXNWxjbk03WXk1dVlXMWxQV0U3WXk1MlpYSnphVzl1UFdvN1l5NWlkV2xzWkQxb08yTXVkbVZ5YzJsdmJuTXVjSFZ6YUNocUtUdGpMbUoxYVd4a2N5NXdkWE5vS0dncE8yTXViV0ZwYmtOc1lYTnpQV1k3Wm05eUtHUTlNRHRrUEdjdWJHVnVaM1JvTzJROVpDc3hLWHRuVzJSZEtHTXBPMzFwWmlobUtYdG1MbFpGVWxOSlQwNDlhanRtTGtKVlNVeEVQV2c3ZldWc2MyVjdXVUZJVDA4dWJHOW5LRndpYldGcGJrTnNZWE56SUdseklIVnVaR1ZtYVc1bFpDQm1iM0lnYlc5a2RXeGxJRndpSzJFc1hDSjNZWEp1WENJcE8zMTlPMWxCU0U5UExtVnVkajFaUVVoUFR5NWxiblo4Zkh0dGIyUjFiR1Z6T2x0ZExHeHBjM1JsYm1WeWN6cGJYWDA3V1VGSVQwOHVaVzUyTG1kbGRGWmxjbk5wYjI0OVpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlGbEJTRTlQTG1WdWRpNXRiMlIxYkdWelcyRmRmSHh1ZFd4c08zMDdXVUZJVDA4dVpXNTJMbkJoY25ObFZVRTlablZ1WTNScGIyNG9aQ2w3ZG1GeUlHVTlablZ1WTNScGIyNG9hU2w3ZG1GeUlHbzlNRHR5WlhSMWNtNGdjR0Z5YzJWR2JHOWhkQ2hwTG5KbGNHeGhZMlVvTDF4Y0xpOW5MR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVLR29yS3owOU1Tay9YQ0pjSWpwY0lpNWNJanQ5S1NrN2ZTeG9QVzVoZG1sbllYUnZjaXhuUFh0cFpUb3dMRzl3WlhKaE9qQXNaMlZqYTI4Nk1DeDNaV0pyYVhRNk1DeGphSEp2YldVNk1DeHRiMkpwYkdVNmJuVnNiQ3hoYVhJNk1DeHBjR0ZrT2pBc2FYQm9iMjVsT2pBc2FYQnZaRG93TEdsdmN6cHVkV3hzTEdGdVpISnZhV1E2TUN4M1pXSnZjem93TEdOaGFtRTZhQ1ltYUM1allXcGhWbVZ5YzJsdmJpeHpaV04xY21VNlptRnNjMlVzYjNNNmJuVnNiSDBzWXoxa2ZId29ibUYyYVdkaGRHOXlKaVp1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwS1N4bVBYZHBibVJ2ZHlZbWQybHVaRzkzTG14dlkyRjBhVzl1TEdJOVppWW1aaTVvY21WbUxHRTdaeTV6WldOMWNtVTlZaVltS0dJdWRHOU1iM2RsY2tOaGMyVW9LUzVwYm1SbGVFOW1LRndpYUhSMGNITmNJaWs5UFQwd0tUdHBaaWhqS1h0cFppZ29MM2RwYm1SdmQzTjhkMmx1TXpJdmFTa3VkR1Z6ZENoaktTbDdaeTV2Y3oxY0luZHBibVJ2ZDNOY0lqdDlaV3h6Wlh0cFppZ29MMjFoWTJsdWRHOXphQzlwS1M1MFpYTjBLR01wS1h0bkxtOXpQVndpYldGamFXNTBiM05vWENJN2ZXVnNjMlY3YVdZb0tDOXlhR2x1Ynk5cEtTNTBaWE4wS0dNcEtYdG5MbTl6UFZ3aWNtaHBibTljSWp0OWZYMXBaaWdvTDB0SVZFMU1MeWt1ZEdWemRDaGpLU2w3Wnk1M1pXSnJhWFE5TVR0OVlUMWpMbTFoZEdOb0tDOUJjSEJzWlZkbFlrdHBkRnhjTHloYlhseGNjMTBxS1M4cE8ybG1LR0VtSm1GYk1WMHBlMmN1ZDJWaWEybDBQV1VvWVZzeFhTazdhV1lvTHlCTmIySnBiR1ZjWEM4dkxuUmxjM1FvWXlrcGUyY3ViVzlpYVd4bFBWd2lRWEJ3YkdWY0lqdGhQV011YldGMFkyZ29MMDlUSUNoYlhseGNjMTBxS1M4cE8ybG1LR0VtSm1GYk1WMHBlMkU5WlNoaFd6RmRMbkpsY0d4aFkyVW9YQ0pmWENJc1hDSXVYQ0lwS1R0OVp5NXBiM005WVR0bkxtbHdZV1E5Wnk1cGNHOWtQV2N1YVhCb2IyNWxQVEE3WVQxakxtMWhkR05vS0M5cFVHRmtmR2xRYjJSOGFWQm9iMjVsTHlrN2FXWW9ZU1ltWVZzd1hTbDdaMXRoV3pCZExuUnZURzkzWlhKRFlYTmxLQ2xkUFdjdWFXOXpPMzE5Wld4elpYdGhQV011YldGMFkyZ29MMDV2YTJsaFRsdGVYRnd2WFNwOFFXNWtjbTlwWkNCY1hHUmNYQzVjWEdSOGQyVmlUMU5jWEM5Y1hHUmNYQzVjWEdRdktUdHBaaWhoS1h0bkxtMXZZbWxzWlQxaFd6QmRPMzFwWmlndmQyVmlUMU12TG5SbGMzUW9ZeWtwZTJjdWJXOWlhV3hsUFZ3aVYyVmlUMU5jSWp0aFBXTXViV0YwWTJnb0wzZGxZazlUWEZ3dktGdGVYRnh6WFNvcE95OHBPMmxtS0dFbUptRmJNVjBwZTJjdWQyVmliM005WlNoaFd6RmRLVHQ5ZldsbUtDOGdRVzVrY205cFpDOHVkR1Z6ZENoaktTbDdaeTV0YjJKcGJHVTlYQ0pCYm1SeWIybGtYQ0k3WVQxakxtMWhkR05vS0M5QmJtUnliMmxrSUNoYlhseGNjMTBxS1RzdktUdHBaaWhoSmlaaFd6RmRLWHRuTG1GdVpISnZhV1E5WlNoaFd6RmRLVHQ5ZlgxaFBXTXViV0YwWTJnb0wwTm9jbTl0WlZ4Y0x5aGJYbHhjYzEwcUtTOHBPMmxtS0dFbUptRmJNVjBwZTJjdVkyaHliMjFsUFdVb1lWc3hYU2s3ZldWc2MyVjdZVDFqTG0xaGRHTm9LQzlCWkc5aVpVRkpVbHhjTHloYlhseGNjMTBxS1M4cE8ybG1LR0VwZTJjdVlXbHlQV0ZiTUYwN2ZYMTlhV1lvSVdjdWQyVmlhMmwwS1h0aFBXTXViV0YwWTJnb0wwOXdaWEpoVzF4Y2MxeGNMMTBvVzE1Y1hITmRLaWt2S1R0cFppaGhKaVpoV3pGZEtYdG5MbTl3WlhKaFBXVW9ZVnN4WFNrN1lUMWpMbTFoZEdOb0tDOVdaWEp6YVc5dVhGd3ZLRnRlWEZ4elhTb3BMeWs3YVdZb1lTWW1ZVnN4WFNsN1p5NXZjR1Z5WVQxbEtHRmJNVjBwTzMxaFBXTXViV0YwWTJnb0wwOXdaWEpoSUUxcGJtbGJYanRkS2k4cE8ybG1LR0VwZTJjdWJXOWlhV3hsUFdGYk1GMDdmWDFsYkhObGUyRTlZeTV0WVhSamFDZ3ZUVk5KUlZ4Y2N5aGJYanRkS2lrdktUdHBaaWhoSmlaaFd6RmRLWHRuTG1sbFBXVW9ZVnN4WFNrN2ZXVnNjMlY3WVQxakxtMWhkR05vS0M5SFpXTnJiMXhjTHloYlhseGNjMTBxS1M4cE8ybG1LR0VwZTJjdVoyVmphMjg5TVR0aFBXTXViV0YwWTJnb0wzSjJPaWhiWGx4Y2MxeGNLVjBxS1M4cE8ybG1LR0VtSm1GYk1WMHBlMmN1WjJWamEyODlaU2hoV3pGZEtUdDlmWDE5ZlgxeVpYUjFjbTRnWnp0OU8xbEJTRTlQTG1WdWRpNTFZVDFaUVVoUFR5NWxibll1Y0dGeWMyVlZRU2dwT3lobWRXNWpkR2x2YmlncGUxbEJTRTlQTG01aGJXVnpjR0ZqWlNoY0luVjBhV3hjSWl4Y0luZHBaR2RsZEZ3aUxGd2laWGhoYlhCc1pWd2lLVHRwWmloY0luVnVaR1ZtYVc1bFpGd2lJVDA5ZEhsd1pXOW1JRmxCU0U5UFgyTnZibVpwWnlsN2RtRnlJR0k5V1VGSVQwOWZZMjl1Wm1sbkxteHBjM1JsYm1WeUxHRTlXVUZJVDA4dVpXNTJMbXhwYzNSbGJtVnljeXhrUFhSeWRXVXNZenRwWmloaUtYdG1iM0lvWXowd08yTThZUzVzWlc1bmRHZzdZeXNyS1h0cFppaGhXMk5kUFQxaUtYdGtQV1poYkhObE8ySnlaV0ZyTzMxOWFXWW9aQ2w3WVM1d2RYTm9LR0lwTzMxOWZYMHBLQ2s3V1VGSVQwOHViR0Z1WnoxWlFVaFBUeTVzWVc1bmZIeDdmVHNvWm5WdVkzUnBiMjRvS1h0MllYSWdaajFaUVVoUFR5NXNZVzVuTEdFOVQySnFaV04wTG5CeWIzUnZkSGx3WlN4alBWd2lXMjlpYW1WamRDQkJjbkpoZVYxY0lpeG9QVndpVzI5aWFtVmpkQ0JHZFc1amRHbHZibDFjSWl4cFBWd2lXMjlpYW1WamRDQlBZbXBsWTNSZFhDSXNZajFiWFN4blBYdGNJaVpjSWpwY0lpWmhiWEE3WENJc1hDSThYQ0k2WENJbWJIUTdYQ0lzWENJK1hDSTZYQ0ltWjNRN1hDSXNKMXdpSnpwY0lpWnhkVzkwTzF3aUxGd2lKMXdpT2x3aUppTjRNamM3WENJc1hDSXZYQ0k2WENJbUkzZ3lSanRjSWl4Y0ltQmNJanBjSWlZamVEWXdPMXdpZlN4a1BWdGNJblJ2VTNSeWFXNW5YQ0lzWENKMllXeDFaVTltWENKZExHVTllMmx6UVhKeVlYazZablZ1WTNScGIyNG9haWw3Y21WMGRYSnVJR0V1ZEc5VGRISnBibWN1WVhCd2JIa29haWs5UFQxak8zMHNhWE5DYjI5c1pXRnVPbVoxYm1OMGFXOXVLR29wZTNKbGRIVnliaUIwZVhCbGIyWWdhajA5UFZ3aVltOXZiR1ZoYmx3aU8zMHNhWE5HZFc1amRHbHZianBtZFc1amRHbHZiaWhxS1h0eVpYUjFjbTRvZEhsd1pXOW1JR285UFQxY0ltWjFibU4wYVc5dVhDSXBmSHhoTG5SdlUzUnlhVzVuTG1Gd2NHeDVLR29wUFQwOWFEdDlMR2x6VG5Wc2JEcG1kVzVqZEdsdmJpaHFLWHR5WlhSMWNtNGdhajA5UFc1MWJHdzdmU3hwYzA1MWJXSmxjanBtZFc1amRHbHZiaWhxS1h0eVpYUjFjbTRnZEhsd1pXOW1JR285UFQxY0ltNTFiV0psY2x3aUppWnBjMFpwYm1sMFpTaHFLVHQ5TEdselQySnFaV04wT21aMWJtTjBhVzl1S0dvcGUzSmxkSFZ5YmlocUppWW9kSGx3Wlc5bUlHbzlQVDFjSW05aWFtVmpkRndpZkh4bUxtbHpSblZ1WTNScGIyNG9haWtwS1h4OFptRnNjMlU3ZlN4cGMxTjBjbWx1WnpwbWRXNWpkR2x2YmlocUtYdHlaWFIxY200Z2RIbHdaVzltSUdvOVBUMWNJbk4wY21sdVoxd2lPMzBzYVhOVmJtUmxabWx1WldRNlpuVnVZM1JwYjI0b2FpbDdjbVYwZFhKdUlIUjVjR1Z2WmlCcVBUMDlYQ0oxYm1SbFptbHVaV1JjSWp0OUxGOUpSVVZ1ZFcxR2FYZzZLRmxCU0U5UExtVnVkaTUxWVM1cFpTay9ablZ1WTNScGIyNG9iQ3hyS1h0MllYSWdhaXh1TEcwN1ptOXlLR285TUR0cVBHUXViR1Z1WjNSb08ybzlhaXN4S1h0dVBXUmJhbDA3YlQxclcyNWRPMmxtS0dZdWFYTkdkVzVqZEdsdmJpaHRLU1ltYlNFOVlWdHVYU2w3YkZ0dVhUMXRPMzE5ZlRwbWRXNWpkR2x2YmlncGUzMHNaWE5qWVhCbFNGUk5URHBtZFc1amRHbHZiaWhxS1h0eVpYUjFjbTRnYWk1eVpYQnNZV05sS0M5YkpqdytYQ0luWEZ3dllGMHZaeXhtZFc1amRHbHZiaWhyS1h0eVpYUjFjbTRnWjF0clhUdDlLVHQ5TEdWNGRHVnVaRHBtZFc1amRHbHZiaWh0TEc0c2JDbDdhV1lvSVc1OGZDRnRLWHQwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0psZUhSbGJtUWdabUZwYkdWa0xDQndiR1ZoYzJVZ1kyaGxZMnNnZEdoaGRDQmNJaXRjSW1Gc2JDQmtaWEJsYm1SbGJtTnBaWE1nWVhKbElHbHVZMngxWkdWa0xsd2lLVHQ5ZG1GeUlHczlablZ1WTNScGIyNG9LWHQ5TEdvN2F5NXdjbTkwYjNSNWNHVTliaTV3Y205MGIzUjVjR1U3YlM1d2NtOTBiM1I1Y0dVOWJtVjNJR3NvS1R0dExuQnliM1J2ZEhsd1pTNWpiMjV6ZEhKMVkzUnZjajF0TzIwdWMzVndaWEpqYkdGemN6MXVMbkJ5YjNSdmRIbHdaVHRwWmlodUxuQnliM1J2ZEhsd1pTNWpiMjV6ZEhKMVkzUnZjajA5WVM1amIyNXpkSEoxWTNSdmNpbDdiaTV3Y205MGIzUjVjR1V1WTI5dWMzUnlkV04wYjNJOWJqdDlhV1lvYkNsN1ptOXlLR29nYVc0Z2JDbDdhV1lvWmk1b1lYTlBkMjVRY205d1pYSjBlU2hzTEdvcEtYdHRMbkJ5YjNSdmRIbHdaVnRxWFQxc1cycGRPMzE5Wmk1ZlNVVkZiblZ0Um1sNEtHMHVjSEp2ZEc5MGVYQmxMR3dwTzMxOUxHRjFaMjFsYm5SUFltcGxZM1E2Wm5WdVkzUnBiMjRvYml4dEtYdHBaaWdoYlh4OElXNHBlM1JvY205M0lHNWxkeUJGY25KdmNpaGNJa0ZpYzI5eVlpQm1ZV2xzWldRc0lIWmxjbWxtZVNCa1pYQmxibVJsYm1OcFpYTXVYQ0lwTzMxMllYSWdhajFoY21kMWJXVnVkSE1zYkN4dkxHczlhbHN5WFR0cFppaHJKaVpySVQwOWRISjFaU2w3Wm05eUtHdzlNanRzUEdvdWJHVnVaM1JvTzJ3OWJDc3hLWHR1VzJwYmJGMWRQVzFiYWx0c1hWMDdmWDFsYkhObGUyWnZjaWh2SUdsdUlHMHBlMmxtS0d0OGZDRW9ieUJwYmlCdUtTbDdibHR2WFQxdFcyOWRPMzE5Wmk1ZlNVVkZiblZ0Um1sNEtHNHNiU2s3ZlhKbGRIVnliaUJ1TzMwc1lYVm5iV1Z1ZEZCeWIzUnZPbVoxYm1OMGFXOXVLRzBzYkNsN2FXWW9JV3g4ZkNGdEtYdDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkJkV2R0Wlc1MElHWmhhV3hsWkN3Z2RtVnlhV1o1SUdSbGNHVnVaR1Z1WTJsbGN5NWNJaWs3ZlhaaGNpQnFQVnR0TG5CeWIzUnZkSGx3WlN4c0xuQnliM1J2ZEhsd1pWMHNhenRtYjNJb2F6MHlPMnM4WVhKbmRXMWxiblJ6TG14bGJtZDBhRHRyUFdzck1TbDdhaTV3ZFhOb0tHRnlaM1Z0Wlc1MGMxdHJYU2s3ZldZdVlYVm5iV1Z1ZEU5aWFtVmpkQzVoY0hCc2VTaDBhR2x6TEdvcE8zSmxkSFZ5YmlCdE8zMHNaSFZ0Y0RwbWRXNWpkR2x2YmlocUxIQXBlM1poY2lCc0xHNHNjajFiWFN4MFBWd2lleTR1TG4xY0lpeHJQVndpWmlncGV5NHVMbjFjSWl4eFBWd2lMQ0JjSWl4dFBWd2lJRDArSUZ3aU8ybG1LQ0ZtTG1selQySnFaV04wS0dvcEtYdHlaWFIxY200Z2FpdGNJbHdpTzMxbGJITmxlMmxtS0dvZ2FXNXpkR0Z1WTJWdlppQkVZWFJsZkh3b1hDSnViMlJsVkhsd1pWd2lJR2x1SUdvbUpsd2lkR0ZuVG1GdFpWd2lJR2x1SUdvcEtYdHlaWFIxY200Z2FqdDlaV3h6Wlh0cFppaG1MbWx6Um5WdVkzUnBiMjRvYWlrcGUzSmxkSFZ5YmlCck8zMTlmWEE5S0dZdWFYTk9kVzFpWlhJb2NDa3BQM0E2TXp0cFppaG1MbWx6UVhKeVlYa29haWtwZTNJdWNIVnphQ2hjSWx0Y0lpazdabTl5S0d3OU1DeHVQV291YkdWdVozUm9PMnc4Ymp0c1BXd3JNU2w3YVdZb1ppNXBjMDlpYW1WamRDaHFXMnhkS1NsN2NpNXdkWE5vS0Nod1BqQXBQMll1WkhWdGNDaHFXMnhkTEhBdE1TazZkQ2s3ZldWc2MyVjdjaTV3ZFhOb0tHcGJiRjBwTzMxeUxuQjFjMmdvY1NrN2ZXbG1LSEl1YkdWdVozUm9QakVwZTNJdWNHOXdLQ2s3ZlhJdWNIVnphQ2hjSWwxY0lpazdmV1ZzYzJWN2NpNXdkWE5vS0Z3aWUxd2lLVHRtYjNJb2JDQnBiaUJxS1h0cFppaG1MbWhoYzA5M2JsQnliM0JsY25SNUtHb3NiQ2twZTNJdWNIVnphQ2hzSzIwcE8ybG1LR1l1YVhOUFltcGxZM1FvYWx0c1hTa3BlM0l1Y0hWemFDZ29jRDR3S1Q5bUxtUjFiWEFvYWx0c1hTeHdMVEVwT25RcE8zMWxiSE5sZTNJdWNIVnphQ2hxVzJ4ZEtUdDljaTV3ZFhOb0tIRXBPMzE5YVdZb2NpNXNaVzVuZEdnK01TbDdjaTV3YjNBb0tUdDljaTV3ZFhOb0tGd2lmVndpS1R0OWNtVjBkWEp1SUhJdWFtOXBiaWhjSWx3aUtUdDlMSE4xWW5OMGFYUjFkR1U2Wm5WdVkzUnBiMjRvZUN4NUxFVXNiQ2w3ZG1GeUlFUXNReXhDTEVjc2RDeDFMRVk5VzEwc2NDeDZQWGd1YkdWdVozUm9MRUU5WENKa2RXMXdYQ0lzY2oxY0lpQmNJaXh4UFZ3aWUxd2lMRzA5WENKOVhDSXNiaXgzTzJadmNpZzdPeWw3UkQxNExteGhjM1JKYm1SbGVFOW1LSEVzZWlrN2FXWW9SRHd3S1h0aWNtVmhhenQ5UXoxNExtbHVaR1Y0VDJZb2JTeEVLVHRwWmloRUt6RStReWw3WW5KbFlXczdmWEE5ZUM1emRXSnpkSEpwYm1jb1JDc3hMRU1wTzBjOWNEdDFQVzUxYkd3N1FqMUhMbWx1WkdWNFQyWW9jaWs3YVdZb1FqNHRNU2w3ZFQxSExuTjFZbk4wY21sdVp5aENLekVwTzBjOVJ5NXpkV0p6ZEhKcGJtY29NQ3hDS1R0OWREMTVXMGRkTzJsbUtFVXBlM1E5UlNoSExIUXNkU2s3ZldsbUtHWXVhWE5QWW1wbFkzUW9kQ2twZTJsbUtHWXVhWE5CY25KaGVTaDBLU2w3ZEQxbUxtUjFiWEFvZEN4d1lYSnpaVWx1ZENoMUxERXdLU2s3ZldWc2MyVjdkVDExZkh4Y0lsd2lPMjQ5ZFM1cGJtUmxlRTltS0VFcE8ybG1LRzQrTFRFcGUzVTlkUzV6ZFdKemRISnBibWNvTkNrN2ZYYzlkQzUwYjFOMGNtbHVaeWdwTzJsbUtIYzlQVDFwZkh4dVBpMHhLWHQwUFdZdVpIVnRjQ2gwTEhCaGNuTmxTVzUwS0hVc01UQXBLVHQ5Wld4elpYdDBQWGM3ZlgxOVpXeHpaWHRwWmlnaFppNXBjMU4wY21sdVp5aDBLU1ltSVdZdWFYTk9kVzFpWlhJb2RDa3BlM1E5WENKK0xWd2lLMFl1YkdWdVozUm9LMXdpTFg1Y0lqdEdXMFl1YkdWdVozUm9YVDF3TzMxOWVEMTRMbk4xWW5OMGNtbHVaeWd3TEVRcEszUXJlQzV6ZFdKemRISnBibWNvUXlzeEtUdHBaaWhzUFQwOVptRnNjMlVwZTNvOVJDMHhPMzE5Wm05eUtFUTlSaTVzWlc1bmRHZ3RNVHRFUGowd08wUTlSQzB4S1h0NFBYZ3VjbVZ3YkdGalpTaHVaWGNnVW1WblJYaHdLRndpZmkxY0lpdEVLMXdpTFg1Y0lpa3NYQ0o3WENJclJsdEVYU3RjSW4xY0lpeGNJbWRjSWlrN2ZYSmxkSFZ5YmlCNE8zMHNkSEpwYlRwbWRXNWpkR2x2YmlocUtYdDBjbmw3Y21WMGRYSnVJR291Y21Wd2JHRmpaU2d2WGx4Y2N5dDhYRnh6S3lRdlp5eGNJbHdpS1R0OVkyRjBZMmdvYXlsN2NtVjBkWEp1SUdvN1hHNTlmU3h0WlhKblpUcG1kVzVqZEdsdmJpZ3BlM1poY2lCdVBYdDlMR3M5WVhKbmRXMWxiblJ6TEdvOWF5NXNaVzVuZEdnc2JUdG1iM0lvYlQwd08yMDhhanR0UFcwck1TbDdaaTVoZFdkdFpXNTBUMkpxWldOMEtHNHNhMXR0WFN4MGNuVmxLVHQ5Y21WMGRYSnVJRzQ3ZlN4c1lYUmxjanBtZFc1amRHbHZiaWgwTEdzc2RTeHVMSEFwZTNROWRIeDhNRHRyUFd0OGZIdDlPM1poY2lCc1BYVXNjejF1TEhFc2FqdHBaaWhtTG1selUzUnlhVzVuS0hVcEtYdHNQV3RiZFYwN2ZXbG1LQ0ZzS1h0MGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2liV1YwYUc5a0lIVnVaR1ZtYVc1bFpGd2lLVHQ5YVdZb0lXWXVhWE5WYm1SbFptbHVaV1FvYmlrbUppRm1MbWx6UVhKeVlYa29jeWtwZTNNOVcyNWRPMzF4UFdaMWJtTjBhVzl1S0NsN2JDNWhjSEJzZVNockxITjhmR0lwTzMwN2FqMG9jQ2svYzJWMFNXNTBaWEoyWVd3b2NTeDBLVHB6WlhSVWFXMWxiM1YwS0hFc2RDazdjbVYwZFhKdWUybHVkR1Z5ZG1Gc09uQXNZMkZ1WTJWc09tWjFibU4wYVc5dUtDbDdhV1lvZEdocGN5NXBiblJsY25aaGJDbDdZMnhsWVhKSmJuUmxjblpoYkNocUtUdDlaV3h6Wlh0amJHVmhjbFJwYldWdmRYUW9haWs3ZlgxOU8zMHNhWE5XWVd4MVpUcG1kVzVqZEdsdmJpaHFLWHR5WlhSMWNtNG9aaTVwYzA5aWFtVmpkQ2hxS1h4OFppNXBjMU4wY21sdVp5aHFLWHg4Wmk1cGMwNTFiV0psY2locUtYeDhaaTVwYzBKdmIyeGxZVzRvYWlrcE8zMTlPMll1YUdGelQzZHVVSEp2Y0dWeWRIazlLR0V1YUdGelQzZHVVSEp2Y0dWeWRIa3BQMloxYm1OMGFXOXVLR29zYXlsN2NtVjBkWEp1SUdvbUptb3VhR0Z6VDNkdVVISnZjR1Z5ZEhrbUptb3VhR0Z6VDNkdVVISnZjR1Z5ZEhrb2F5azdmVHBtZFc1amRHbHZiaWhxTEdzcGUzSmxkSFZ5YmlBaFppNXBjMVZ1WkdWbWFXNWxaQ2hxVzJ0ZEtTWW1haTVqYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dWYmExMGhQVDFxVzJ0ZE8zMDdaUzVoZFdkdFpXNTBUMkpxWldOMEtHWXNaU3gwY25WbEtUdFpRVWhQVHk1MWRHbHNMa3hoYm1jOVpqdG1MbUYxWjIxbGJuUTlaaTVoZFdkdFpXNTBVSEp2ZEc4N1dVRklUMDh1WVhWbmJXVnVkRDFtTG1GMVoyMWxiblJRY205MGJ6dFpRVWhQVHk1bGVIUmxibVE5Wmk1bGVIUmxibVE3ZlNrb0tUdFpRVWhQVHk1eVpXZHBjM1JsY2loY0lubGhhRzl2WENJc1dVRklUMDhzZTNabGNuTnBiMjQ2WENJeUxqa3VNRndpTEdKMWFXeGtPbHdpTWpnd01Gd2lmU2s3WEc1Y2JpOHFJU0JEY25sd2RHOUtVeUIyTXk0eExqSWdZMjl5WlMxbWFYZ3Vhbk5jYmlBcUlHTnZaR1V1WjI5dloyeGxMbU52YlM5d0wyTnllWEIwYnkxcWMxeHVJQ29nS0dNcElESXdNRGt0TWpBeE15QmllU0JLWldabUlFMXZkSFF1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNGdLaUJqYjJSbExtZHZiMmRzWlM1amIyMHZjQzlqY25sd2RHOHRhbk12ZDJscmFTOU1hV05sYm5ObFhHNGdLaUJVU0VsVElFbFRJRVpKV0NCdlppQW5ZMjl5WlM1cWN5Y2dkRzhnWm1sNElFaHRZV01nYVhOemRXVXVYRzRnS2lCb2RIUndjem92TDJOdlpHVXVaMjl2WjJ4bExtTnZiUzl3TDJOeWVYQjBieTFxY3k5cGMzTjFaWE12WkdWMFlXbHNQMmxrUFRnMFhHNGdLaUJvZEhSd2N6b3ZMMk55ZVhCMGJ5MXFjeTVuYjI5bmJHVmpiMlJsTG1OdmJTOXpkbTR0YUdsemRHOXllUzl5TmpZM0wySnlZVzVqYUdWekx6TXVlQzl6Y21NdlkyOXlaUzVxYzF4dUlDb3ZYRzUyWVhJZ1EzSjVjSFJ2U2xNOVEzSjVjSFJ2U2xOOGZDaG1kVzVqZEdsdmJpaGxMR2NwZTNaaGNpQmhQWHQ5TzNaaGNpQmlQV0V1YkdsaVBYdDlPM1poY2lCcVBXSXVRbUZ6WlQwb1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQnVLQ2w3ZlhKbGRIVnlibnRsZUhSbGJtUTZablZ1WTNScGIyNG9jQ2w3Ymk1d2NtOTBiM1I1Y0dVOWRHaHBjenQyWVhJZ2J6MXVaWGNnYmlncE8ybG1LSEFwZTI4dWJXbDRTVzRvY0NsOWFXWW9JVzh1YUdGelQzZHVVSEp2Y0dWeWRIa29YQ0pwYm1sMFhDSXBLWHR2TG1sdWFYUTlablZ1WTNScGIyNG9LWHR2TGlSemRYQmxjaTVwYm1sMExtRndjR3g1S0hSb2FYTXNZWEpuZFcxbGJuUnpLWDE5Ynk1cGJtbDBMbkJ5YjNSdmRIbHdaVDF2TzI4dUpITjFjR1Z5UFhSb2FYTTdjbVYwZFhKdUlHOTlMR055WldGMFpUcG1kVzVqZEdsdmJpZ3BlM1poY2lCdlBYUm9hWE11WlhoMFpXNWtLQ2s3Ynk1cGJtbDBMbUZ3Y0d4NUtHOHNZWEpuZFcxbGJuUnpLVHR5WlhSMWNtNGdiMzBzYVc1cGREcG1kVzVqZEdsdmJpZ3BlMzBzYldsNFNXNDZablZ1WTNScGIyNG9jQ2w3Wm05eUtIWmhjaUJ2SUdsdUlIQXBlMmxtS0hBdWFHRnpUM2R1VUhKdmNHVnlkSGtvYnlrcGUzUm9hWE5iYjEwOWNGdHZYWDE5YVdZb2NDNW9ZWE5QZDI1UWNtOXdaWEowZVNoY0luUnZVM1J5YVc1blhDSXBLWHQwYUdsekxuUnZVM1J5YVc1blBYQXVkRzlUZEhKcGJtZDlmU3hqYkc5dVpUcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1sdWFYUXVjSEp2ZEc5MGVYQmxMbVY0ZEdWdVpDaDBhR2x6S1gxOWZTZ3BLVHQyWVhJZ2JEMWlMbGR2Y21SQmNuSmhlVDFxTG1WNGRHVnVaQ2g3YVc1cGREcG1kVzVqZEdsdmJpaHZMRzRwZTI4OWRHaHBjeTUzYjNKa2N6MXZmSHhiWFR0cFppaHVJVDFuS1h0MGFHbHpMbk5wWjBKNWRHVnpQVzU5Wld4elpYdDBhR2x6TG5OcFowSjVkR1Z6UFc4dWJHVnVaM1JvS2pSOWZTeDBiMU4wY21sdVp6cG1kVzVqZEdsdmJpaHVLWHR5WlhSMWNtNG9ibng4YUNrdWMzUnlhVzVuYVdaNUtIUm9hWE1wZlN4amIyNWpZWFE2Wm5WdVkzUnBiMjRvZENsN2RtRnlJSEU5ZEdocGN5NTNiM0prY3p0MllYSWdjRDEwTG5kdmNtUnpPM1poY2lCdVBYUm9hWE11YzJsblFubDBaWE03ZG1GeUlITTlkQzV6YVdkQ2VYUmxjenQwYUdsekxtTnNZVzF3S0NrN2FXWW9iaVUwS1h0bWIzSW9kbUZ5SUhJOU1EdHlQSE03Y2lzcktYdDJZWElnYnowb2NGdHlQajQrTWwwK1BqNG9NalF0S0hJbE5Da3FPQ2twSmpJMU5UdHhXeWh1SzNJcFBqNCtNbDE4UFc4OFBDZ3lOQzBvS0c0cmNpa2xOQ2txT0NsOWZXVnNjMlY3Wm05eUtIWmhjaUJ5UFRBN2NqeHpPM0lyUFRRcGUzRmJLRzRyY2lrK1BqNHlYVDF3VzNJK1BqNHlYWDE5ZEdocGN5NXphV2RDZVhSbGN5czljenR5WlhSMWNtNGdkR2hwYzMwc1kyeGhiWEE2Wm5WdVkzUnBiMjRvS1h0MllYSWdiejEwYUdsekxuZHZjbVJ6TzNaaGNpQnVQWFJvYVhNdWMybG5RbmwwWlhNN2IxdHVQajQrTWwwbVBUUXlPVFE1TmpjeU9UVThQQ2d6TWkwb2JpVTBLU280S1R0dkxteGxibWQwYUQxbExtTmxhV3dvYmk4MEtYMHNZMnh2Ym1VNlpuVnVZM1JwYjI0b0tYdDJZWElnYmoxcUxtTnNiMjVsTG1OaGJHd29kR2hwY3lrN2JpNTNiM0prY3oxMGFHbHpMbmR2Y21SekxuTnNhV05sS0RBcE8zSmxkSFZ5YmlCdWZTeHlZVzVrYjIwNlpuVnVZM1JwYjI0b2NDbDdkbUZ5SUc4OVcxMDdabTl5S0haaGNpQnVQVEE3Ymp4d08yNHJQVFFwZTI4dWNIVnphQ2dvWlM1eVlXNWtiMjBvS1NvME1qazBPVFkzTWprMktYd3dLWDF5WlhSMWNtNGdibVYzSUd3dWFXNXBkQ2h2TEhBcGZYMHBPM1poY2lCdFBXRXVaVzVqUFh0OU8zWmhjaUJvUFcwdVNHVjRQWHR6ZEhKcGJtZHBabms2Wm5WdVkzUnBiMjRvY0NsN2RtRnlJSEk5Y0M1M2IzSmtjenQyWVhJZ2J6MXdMbk5wWjBKNWRHVnpPM1poY2lCeFBWdGRPMlp2Y2loMllYSWdiajB3TzI0OGJ6dHVLeXNwZTNaaGNpQnpQU2h5VzI0K1BqNHlYVDQrUGlneU5DMG9iaVUwS1NvNEtTa21NalUxTzNFdWNIVnphQ2dvY3o0K1BqUXBMblJ2VTNSeWFXNW5LREUyS1NrN2NTNXdkWE5vS0NoekpqRTFLUzUwYjFOMGNtbHVaeWd4TmlrcGZYSmxkSFZ5YmlCeExtcHZhVzRvWENKY0lpbDlMSEJoY25ObE9tWjFibU4wYVc5dUtIQXBlM1poY2lCdVBYQXViR1Z1WjNSb08zWmhjaUJ4UFZ0ZE8yWnZjaWgyWVhJZ2J6MHdPMjg4Ymp0dkt6MHlLWHR4VzI4K1BqNHpYWHc5Y0dGeWMyVkpiblFvY0M1emRXSnpkSElvYnl3eUtTd3hOaWs4UENneU5DMG9ieVU0S1NvMEtYMXlaWFIxY200Z2JtVjNJR3d1YVc1cGRDaHhMRzR2TWlsOWZUdDJZWElnWkQxdExreGhkR2x1TVQxN2MzUnlhVzVuYVdaNU9tWjFibU4wYVc5dUtIRXBlM1poY2lCeVBYRXVkMjl5WkhNN2RtRnlJSEE5Y1M1emFXZENlWFJsY3p0MllYSWdiajFiWFR0bWIzSW9kbUZ5SUc4OU1EdHZQSEE3YnlzcktYdDJZWElnY3owb2NsdHZQajQrTWwwK1BqNG9NalF0S0c4bE5Da3FPQ2twSmpJMU5UdHVMbkIxYzJnb1UzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTaHpLU2w5Y21WMGRYSnVJRzR1YW05cGJpaGNJbHdpS1gwc2NHRnljMlU2Wm5WdVkzUnBiMjRvY0NsN2RtRnlJRzQ5Y0M1c1pXNW5kR2c3ZG1GeUlIRTlXMTA3Wm05eUtIWmhjaUJ2UFRBN2J6eHVPMjhyS3lsN2NWdHZQajQrTWwxOFBTaHdMbU5vWVhKRGIyUmxRWFFvYnlrbU1qVTFLVHc4S0RJMExTaHZKVFFwS2pncGZYSmxkSFZ5YmlCdVpYY2diQzVwYm1sMEtIRXNiaWw5ZlR0MllYSWdZejF0TGxWMFpqZzllM04wY21sdVoybG1lVHBtZFc1amRHbHZiaWh1S1h0MGNubDdjbVYwZFhKdUlHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaGxjMk5oY0dVb1pDNXpkSEpwYm1kcFpua29iaWtwS1gxallYUmphQ2h2S1h0MGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKTllXeG1iM0p0WldRZ1ZWUkdMVGdnWkdGMFlWd2lLWDE5TEhCaGNuTmxPbVoxYm1OMGFXOXVLRzRwZTNKbGRIVnliaUJrTG5CaGNuTmxLSFZ1WlhOallYQmxLR1Z1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2h1S1NrcGZYMDdkbUZ5SUdrOVlpNUNkV1ptWlhKbFpFSnNiMk5yUVd4bmIzSnBkR2h0UFdvdVpYaDBaVzVrS0h0eVpYTmxkRHBtZFc1amRHbHZiaWdwZTNSb2FYTXVYMlJoZEdFOWJtVjNJR3d1YVc1cGRDZ3BPM1JvYVhNdVgyNUVZWFJoUW5sMFpYTTlNSDBzWDJGd2NHVnVaRHBtZFc1amRHbHZiaWh1S1h0cFppaDBlWEJsYjJZZ2JqMDlYQ0p6ZEhKcGJtZGNJaWw3YmoxakxuQmhjbk5sS0c0cGZYUm9hWE11WDJSaGRHRXVZMjl1WTJGMEtHNHBPM1JvYVhNdVgyNUVZWFJoUW5sMFpYTXJQVzR1YzJsblFubDBaWE45TEY5d2NtOWpaWE56T21aMWJtTjBhVzl1S0hjcGUzWmhjaUJ4UFhSb2FYTXVYMlJoZEdFN2RtRnlJSGc5Y1M1M2IzSmtjenQyWVhJZ2JqMXhMbk5wWjBKNWRHVnpPM1poY2lCMFBYUm9hWE11WW14dlkydFRhWHBsTzNaaGNpQjJQWFFxTkR0MllYSWdkVDF1TDNZN2FXWW9keWw3ZFQxbExtTmxhV3dvZFNsOVpXeHpaWHQxUFdVdWJXRjRLQ2gxZkRBcExYUm9hWE11WDIxcGJrSjFabVpsY2xOcGVtVXNNQ2w5ZG1GeUlITTlkU3AwTzNaaGNpQnlQV1V1YldsdUtITXFOQ3h1S1R0cFppaHpLWHRtYjNJb2RtRnlJSEE5TUR0d1BITTdjQ3M5ZENsN2RHaHBjeTVmWkc5UWNtOWpaWE56UW14dlkyc29lQ3h3S1gxMllYSWdiejE0TG5Od2JHbGpaU2d3TEhNcE8zRXVjMmxuUW5sMFpYTXRQWEo5Y21WMGRYSnVJRzVsZHlCc0xtbHVhWFFvYnl4eUtYMHNZMnh2Ym1VNlpuVnVZM1JwYjI0b0tYdDJZWElnYmoxcUxtTnNiMjVsTG1OaGJHd29kR2hwY3lrN2JpNWZaR0YwWVQxMGFHbHpMbDlrWVhSaExtTnNiMjVsS0NrN2NtVjBkWEp1SUc1OUxGOXRhVzVDZFdabVpYSlRhWHBsT2pCOUtUdDJZWElnWmoxaUxraGhjMmhsY2oxcExtVjRkR1Z1WkNoN1kyWm5PbW91WlhoMFpXNWtLQ2tzYVc1cGREcG1kVzVqZEdsdmJpaHVLWHQwYUdsekxtTm1aejEwYUdsekxtTm1aeTVsZUhSbGJtUW9iaWs3ZEdocGN5NXlaWE5sZENncGZTeHlaWE5sZERwbWRXNWpkR2x2YmlncGUya3VjbVZ6WlhRdVkyRnNiQ2gwYUdsektUdDBhR2x6TGw5a2IxSmxjMlYwS0NsOUxIVndaR0YwWlRwbWRXNWpkR2x2YmlodUtYdDBhR2x6TGw5aGNIQmxibVFvYmlrN2RHaHBjeTVmY0hKdlkyVnpjeWdwTzNKbGRIVnliaUIwYUdsemZTeG1hVzVoYkdsNlpUcG1kVzVqZEdsdmJpaHVLWHRwWmlodUtYdDBhR2x6TGw5aGNIQmxibVFvYmlsOWRtRnlJRzg5ZEdocGN5NWZaRzlHYVc1aGJHbDZaU2dwTzNKbGRIVnliaUJ2ZlN4aWJHOWphMU5wZW1VNk5URXlMek15TEY5amNtVmhkR1ZJWld4d1pYSTZablZ1WTNScGIyNG9iaWw3Y21WMGRYSnVJR1oxYm1OMGFXOXVLSEFzYnlsN2NtVjBkWEp1SUc1bGR5QnVMbWx1YVhRb2J5a3VabWx1WVd4cGVtVW9jQ2w5ZlN4ZlkzSmxZWFJsU0cxaFkwaGxiSEJsY2pwbWRXNWpkR2x2YmlodUtYdHlaWFIxY200Z1puVnVZM1JwYjI0b2NDeHZLWHR5WlhSMWNtNGdibVYzSUdzdVNFMUJReTVwYm1sMEtHNHNieWt1Wm1sdVlXeHBlbVVvY0NsOWZYMHBPM1poY2lCclBXRXVZV3huYnoxN2ZUdHlaWFIxY200Z1lYMG9UV0YwYUNrcE8xeHVMeXBjYmtOeWVYQjBiMHBUSUhZekxqRXVNaUI0TmpRdFkyOXlaUzF0YVc0dWFuTmNibU52WkdVdVoyOXZaMnhsTG1OdmJTOXdMMk55ZVhCMGJ5MXFjMXh1S0dNcElESXdNRGt0TWpBeE15QmllU0JLWldabUlFMXZkSFF1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNWpiMlJsTG1kdmIyZHNaUzVqYjIwdmNDOWpjbmx3ZEc4dGFuTXZkMmxyYVM5TWFXTmxibk5sWEc0cUwxeHVLR1oxYm1OMGFXOXVLR2NwZTNaaGNpQmhQVU55ZVhCMGIwcFRMR1k5WVM1c2FXSXNaVDFtTGtKaGMyVXNhRDFtTGxkdmNtUkJjbkpoZVN4aFBXRXVlRFkwUFh0OU8yRXVWMjl5WkQxbExtVjRkR1Z1WkNoN2FXNXBkRHBtZFc1amRHbHZiaWhpTEdNcGUzUm9hWE11YUdsbmFEMWlPM1JvYVhNdWJHOTNQV045ZlNrN1lTNVhiM0prUVhKeVlYazlaUzVsZUhSbGJtUW9lMmx1YVhRNlpuVnVZM1JwYjI0b1lpeGpLWHRpUFhSb2FYTXVkMjl5WkhNOVlueDhXMTA3ZEdocGN5NXphV2RDZVhSbGN6MWpJVDFuUDJNNk9DcGlMbXhsYm1kMGFIMHNkRzlZTXpJNlpuVnVZM1JwYjI0b0tYdG1iM0lvZG1GeUlHSTlkR2hwY3k1M2IzSmtjeXhqUFdJdWJHVnVaM1JvTEdFOVcxMHNaRDB3TzJROFl6dGtLeXNwZTNaaGNpQmxQV0piWkYwN1lTNXdkWE5vS0dVdWFHbG5hQ2s3WVM1d2RYTm9LR1V1Ykc5M0tYMXlaWFIxY200Z2FDNWpjbVZoZEdVb1lTeDBhR2x6TG5OcFowSjVkR1Z6S1gwc1kyeHZibVU2Wm5WdVkzUnBiMjRvS1h0bWIzSW9kbUZ5SUdJOVpTNWpiRzl1WlM1allXeHNLSFJvYVhNcExHTTlZaTUzYjNKa2N6MTBhR2x6TG5kdmNtUnpMbk5zYVdObEtEQXBMR0U5WXk1c1pXNW5kR2dzWkQwd08yUThZVHRrS3lzcFkxdGtYVDFqVzJSZExtTnNiMjVsS0NrN2NtVjBkWEp1SUdKOWZTbDlLU2dwTzF4dVhHNHZLbHh1UTNKNWNIUnZTbE1nZGpNdU1TNHlJR05wY0dobGNpMWpiM0psTFcxcGJpNXFjMXh1WTI5a1pTNW5iMjluYkdVdVkyOXRMM0F2WTNKNWNIUnZMV3B6WEc0b1l5a2dNakF3T1MweU1ERXpJR0o1SUVwbFptWWdUVzkwZEM0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNibU52WkdVdVoyOXZaMnhsTG1OdmJTOXdMMk55ZVhCMGJ5MXFjeTkzYVd0cEwweHBZMlZ1YzJWY2Jpb3ZYRzVEY25sd2RHOUtVeTVzYVdJdVEybHdhR1Z5Zkh4bWRXNWpkR2x2YmloMUtYdDJZWElnWnoxRGNubHdkRzlLVXl4bVBXY3ViR2xpTEdzOVppNUNZWE5sTEd3OVppNVhiM0prUVhKeVlYa3NjVDFtTGtKMVptWmxjbVZrUW14dlkydEJiR2R2Y21sMGFHMHNjajFuTG1WdVl5NUNZWE5sTmpRc2RqMW5MbUZzWjI4dVJYWndTMFJHTEc0OVppNURhWEJvWlhJOWNTNWxlSFJsYm1Rb2UyTm1aenByTG1WNGRHVnVaQ2dwTEdOeVpXRjBaVVZ1WTNKNWNIUnZjanBtZFc1amRHbHZiaWhoTEdJcGUzSmxkSFZ5YmlCMGFHbHpMbU55WldGMFpTaDBhR2x6TGw5RlRrTmZXRVpQVWsxZlRVOUVSU3hoTEdJcGZTeGpjbVZoZEdWRVpXTnllWEIwYjNJNlpuVnVZM1JwYjI0b1lTeGlLWHR5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1VvZEdocGN5NWZSRVZEWDFoR1QxSk5YMDFQUkVVc1lTeGlLWDBzYVc1cGREcG1kVzVqZEdsdmJpaGhMR0lzWXlsN2RHaHBjeTVqWm1jOWRHaHBjeTVqWm1jdVpYaDBaVzVrS0dNcE8zUm9hWE11WDNobWIzSnRUVzlrWlQxaE8zUm9hWE11WDJ0bGVUMWlPM1JvYVhNdWNtVnpaWFFvS1gwc2NtVnpaWFE2Wm5WdVkzUnBiMjRvS1h0eExuSmxjMlYwTG1OaGJHd29kR2hwY3lrN2RHaHBjeTVmWkc5U1pYTmxkQ2dwZlN4d2NtOWpaWE56T21aMWJtTjBhVzl1S0dFcGUzUm9hWE11WDJGd2NHVnVaQ2hoS1R0Y2JuSmxkSFZ5YmlCMGFHbHpMbDl3Y205alpYTnpLQ2w5TEdacGJtRnNhWHBsT21aMWJtTjBhVzl1S0dFcGUyRW1KblJvYVhNdVgyRndjR1Z1WkNoaEtUdHlaWFIxY200Z2RHaHBjeTVmWkc5R2FXNWhiR2w2WlNncGZTeHJaWGxUYVhwbE9qUXNhWFpUYVhwbE9qUXNYMFZPUTE5WVJrOVNUVjlOVDBSRk9qRXNYMFJGUTE5WVJrOVNUVjlOVDBSRk9qSXNYMk55WldGMFpVaGxiSEJsY2pwbWRXNWpkR2x2YmloaEtYdHlaWFIxY201N1pXNWpjbmx3ZERwbWRXNWpkR2x2YmloaUxHTXNaQ2w3Y21WMGRYSnVLRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJqUDNNNmFpa3VaVzVqY25sd2RDaGhMR0lzWXl4a0tYMHNaR1ZqY25sd2REcG1kVzVqZEdsdmJpaGlMR01zWkNsN2NtVjBkWEp1S0Z3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCalAzTTZhaWt1WkdWamNubHdkQ2hoTEdJc1l5eGtLWDE5ZlgwcE8yWXVVM1J5WldGdFEybHdhR1Z5UFc0dVpYaDBaVzVrS0h0ZlpHOUdhVzVoYkdsNlpUcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TGw5d2NtOWpaWE56S0NFd0tYMHNZbXh2WTJ0VGFYcGxPakY5S1R0MllYSWdiVDFuTG0xdlpHVTllMzBzZEQxbWRXNWpkR2x2YmloaExHSXNZeWw3ZG1GeUlHUTlkR2hwY3k1ZmFYWTdaRDkwYUdsekxsOXBkajExT21ROWRHaHBjeTVmY0hKbGRrSnNiMk5yTzJadmNpaDJZWElnWlQxY2JqQTdaVHhqTzJVckt5bGhXMklyWlYxZVBXUmJaVjE5TEdnOUtHWXVRbXh2WTJ0RGFYQm9aWEpOYjJSbFBXc3VaWGgwWlc1a0tIdGpjbVZoZEdWRmJtTnllWEIwYjNJNlpuVnVZM1JwYjI0b1lTeGlLWHR5WlhSMWNtNGdkR2hwY3k1RmJtTnllWEIwYjNJdVkzSmxZWFJsS0dFc1lpbDlMR055WldGMFpVUmxZM0o1Y0hSdmNqcG1kVzVqZEdsdmJpaGhMR0lwZTNKbGRIVnliaUIwYUdsekxrUmxZM0o1Y0hSdmNpNWpjbVZoZEdVb1lTeGlLWDBzYVc1cGREcG1kVzVqZEdsdmJpaGhMR0lwZTNSb2FYTXVYMk5wY0dobGNqMWhPM1JvYVhNdVgybDJQV0o5ZlNrcExtVjRkR1Z1WkNncE8yZ3VSVzVqY25sd2RHOXlQV2d1WlhoMFpXNWtLSHR3Y205alpYTnpRbXh2WTJzNlpuVnVZM1JwYjI0b1lTeGlLWHQyWVhJZ1l6MTBhR2x6TGw5amFYQm9aWElzWkQxakxtSnNiMk5yVTJsNlpUdDBMbU5oYkd3b2RHaHBjeXhoTEdJc1pDazdZeTVsYm1OeWVYQjBRbXh2WTJzb1lTeGlLVHQwYUdsekxsOXdjbVYyUW14dlkyczlZUzV6YkdsalpTaGlMR0lyWkNsOWZTazdhQzVFWldOeWVYQjBiM0k5YUM1bGVIUmxibVFvZTNCeWIyTmxjM05DYkc5amF6cG1kVzVqZEdsdmJpaGhMR0lwZTNaaGNpQmpQWFJvYVhNdVgyTnBjR2hsY2l4a1BXTXVZbXh2WTJ0VGFYcGxMR1U5WVM1emJHbGpaU2hpTEdJclpDazdZeTVrWldOeWVYQjBRbXh2WTJzb1lTeGNibUlwTzNRdVkyRnNiQ2gwYUdsekxHRXNZaXhrS1R0MGFHbHpMbDl3Y21WMlFteHZZMnM5WlgxOUtUdHRQVzB1UTBKRFBXZzdhRDBvWnk1d1lXUTllMzBwTGxCclkzTTNQWHR3WVdRNlpuVnVZM1JwYjI0b1lTeGlLWHRtYjNJb2RtRnlJR005TkNwaUxHTTlZeTFoTG5OcFowSjVkR1Z6SldNc1pEMWpQRHd5Tkh4alBEd3hObnhqUER3NGZHTXNaVDFiWFN4bVBUQTdaanhqTzJZclBUUXBaUzV3ZFhOb0tHUXBPMk05YkM1amNtVmhkR1VvWlN4aktUdGhMbU52Ym1OaGRDaGpLWDBzZFc1d1lXUTZablZ1WTNScGIyNG9ZU2w3WVM1emFXZENlWFJsY3kwOVlTNTNiM0prYzF0aExuTnBaMEo1ZEdWekxURStQajR5WFNZeU5UVjlmVHRtTGtKc2IyTnJRMmx3YUdWeVBXNHVaWGgwWlc1a0tIdGpabWM2Ymk1alptY3VaWGgwWlc1a0tIdHRiMlJsT20wc2NHRmtaR2x1Wnpwb2ZTa3NjbVZ6WlhRNlpuVnVZM1JwYjI0b0tYdHVMbkpsYzJWMExtTmhiR3dvZEdocGN5azdkbUZ5SUdFOWRHaHBjeTVqWm1jc1lqMWhMbWwyTEdFOVlTNXRiMlJsTzJsbUtIUm9hWE11WDNobWIzSnRUVzlrWlQwOWRHaHBjeTVmUlU1RFgxaEdUMUpOWDAxUFJFVXBkbUZ5SUdNOVlTNWpjbVZoZEdWRmJtTnllWEIwYjNJN1pXeHpaU0JqUFdFdVkzSmxZWFJsUkdWamNubHdkRzl5TEhSb2FYTXVYMjFwYmtKMVptWmxjbE5wZW1VOU1UdGNiblJvYVhNdVgyMXZaR1U5WXk1allXeHNLR0VzZEdocGN5eGlKaVppTG5kdmNtUnpLWDBzWDJSdlVISnZZMlZ6YzBKc2IyTnJPbVoxYm1OMGFXOXVLR0VzWWlsN2RHaHBjeTVmYlc5a1pTNXdjbTlqWlhOelFteHZZMnNvWVN4aUtYMHNYMlJ2Um1sdVlXeHBlbVU2Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDEwYUdsekxtTm1aeTV3WVdSa2FXNW5PMmxtS0hSb2FYTXVYM2htYjNKdFRXOWtaVDA5ZEdocGN5NWZSVTVEWDFoR1QxSk5YMDFQUkVVcGUyRXVjR0ZrS0hSb2FYTXVYMlJoZEdFc2RHaHBjeTVpYkc5amExTnBlbVVwTzNaaGNpQmlQWFJvYVhNdVgzQnliMk5sYzNNb0lUQXBmV1ZzYzJVZ1lqMTBhR2x6TGw5d2NtOWpaWE56S0NFd0tTeGhMblZ1Y0dGa0tHSXBPM0psZEhWeWJpQmlmU3hpYkc5amExTnBlbVU2TkgwcE8zWmhjaUJ3UFdZdVEybHdhR1Z5VUdGeVlXMXpQV3N1WlhoMFpXNWtLSHRwYm1sME9tWjFibU4wYVc5dUtHRXBlM1JvYVhNdWJXbDRTVzRvWVNsOUxIUnZVM1J5YVc1bk9tWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpaGhmSHgwYUdsekxtWnZjbTFoZEhSbGNpa3VjM1J5YVc1bmFXWjVLSFJvYVhNcGZYMHBMRzA5S0djdVptOXliV0YwUFh0OUtTNVBjR1Z1VTFOTVBYdHpkSEpwYm1kcFpuazZablZ1WTNScGIyNG9ZU2w3ZG1GeUlHSTlZUzVqYVhCb1pYSjBaWGgwTzJFOVlTNXpZV3gwTzF4dWNtVjBkWEp1S0dFL2JDNWpjbVZoZEdVb1d6RXpPVGc0T1RNMk9EUXNNVGN3TVRBM05qZ3pNVjBwTG1OdmJtTmhkQ2hoS1M1amIyNWpZWFFvWWlrNllpa3VkRzlUZEhKcGJtY29jaWw5TEhCaGNuTmxPbVoxYm1OMGFXOXVLR0VwZTJFOWNpNXdZWEp6WlNoaEtUdDJZWElnWWoxaExuZHZjbVJ6TzJsbUtERXpPVGc0T1RNMk9EUTlQV0piTUYwbUpqRTNNREV3TnpZNE16RTlQV0piTVYwcGUzWmhjaUJqUFd3dVkzSmxZWFJsS0dJdWMyeHBZMlVvTWl3MEtTazdZaTV6Y0d4cFkyVW9NQ3cwS1R0aExuTnBaMEo1ZEdWekxUMHhObjF5WlhSMWNtNGdjQzVqY21WaGRHVW9lMk5wY0dobGNuUmxlSFE2WVN4ellXeDBPbU45S1gxOUxHbzlaaTVUWlhKcFlXeHBlbUZpYkdWRGFYQm9aWEk5YXk1bGVIUmxibVFvZTJObVp6cHJMbVY0ZEdWdVpDaDdabTl5YldGME9tMTlLU3hsYm1OeWVYQjBPbVoxYm1OMGFXOXVLR0VzWWl4akxHUXBlMlE5ZEdocGN5NWpabWN1WlhoMFpXNWtLR1FwTzNaaGNpQmxQV0V1WTNKbFlYUmxSVzVqY25sd2RHOXlLR01zWkNrN1lqMWxMbVpwYm1Gc2FYcGxLR0lwTzJVOVpTNWpabWM3Y21WMGRYSnVJSEF1WTNKbFlYUmxLSHRqYVhCb1pYSjBaWGgwT21Jc2EyVjVPbU1zYVhZNlpTNXBkaXhoYkdkdmNtbDBhRzA2WVN4dGIyUmxPbVV1Ylc5a1pTeHdZV1JrYVc1bk9tVXVjR0ZrWkdsdVp5eGNibUpzYjJOclUybDZaVHBoTG1Kc2IyTnJVMmw2WlN4bWIzSnRZWFIwWlhJNlpDNW1iM0p0WVhSOUtYMHNaR1ZqY25sd2REcG1kVzVqZEdsdmJpaGhMR0lzWXl4a0tYdGtQWFJvYVhNdVkyWm5MbVY0ZEdWdVpDaGtLVHRpUFhSb2FYTXVYM0JoY25ObEtHSXNaQzVtYjNKdFlYUXBPM0psZEhWeWJpQmhMbU55WldGMFpVUmxZM0o1Y0hSdmNpaGpMR1FwTG1acGJtRnNhWHBsS0dJdVkybHdhR1Z5ZEdWNGRDbDlMRjl3WVhKelpUcG1kVzVqZEdsdmJpaGhMR0lwZTNKbGRIVnlibHdpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJoUDJJdWNHRnljMlVvWVN4MGFHbHpLVHBoZlgwcExHYzlLR2N1YTJSbVBYdDlLUzVQY0dWdVUxTk1QWHRsZUdWamRYUmxPbVoxYm1OMGFXOXVLR0VzWWl4akxHUXBlMlI4ZkNoa1BXd3VjbUZ1Wkc5dEtEZ3BLVHRoUFhZdVkzSmxZWFJsS0h0clpYbFRhWHBsT21JclkzMHBMbU52YlhCMWRHVW9ZU3hrS1R0alBXd3VZM0psWVhSbEtHRXVkMjl5WkhNdWMyeHBZMlVvWWlrc05DcGpLVHRoTG5OcFowSjVkR1Z6UFRRcVlqdHlaWFIxY200Z2NDNWpjbVZoZEdVb2UydGxlVHBoTEdsMk9tTXNjMkZzZERwa2ZTbDlmU3h6UFdZdVVHRnpjM2R2Y21SQ1lYTmxaRU5wY0dobGNqMXFMbVY0ZEdWdVpDaDdZMlpuT21vdVkyWm5MbVY0ZEdWdVpDaDdhMlJtT21kOUtTeGxibU55ZVhCME9tWjFibU4wYVc5dUtHRXNYRzVpTEdNc1pDbDdaRDEwYUdsekxtTm1aeTVsZUhSbGJtUW9aQ2s3WXoxa0xtdGtaaTVsZUdWamRYUmxLR01zWVM1clpYbFRhWHBsTEdFdWFYWlRhWHBsS1R0a0xtbDJQV011YVhZN1lUMXFMbVZ1WTNKNWNIUXVZMkZzYkNoMGFHbHpMR0VzWWl4akxtdGxlU3hrS1R0aExtMXBlRWx1S0dNcE8zSmxkSFZ5YmlCaGZTeGtaV055ZVhCME9tWjFibU4wYVc5dUtHRXNZaXhqTEdRcGUyUTlkR2hwY3k1alptY3VaWGgwWlc1a0tHUXBPMkk5ZEdocGN5NWZjR0Z5YzJVb1lpeGtMbVp2Y20xaGRDazdZejFrTG10a1ppNWxlR1ZqZFhSbEtHTXNZUzVyWlhsVGFYcGxMR0V1YVhaVGFYcGxMR0l1YzJGc2RDazdaQzVwZGoxakxtbDJPM0psZEhWeWJpQnFMbVJsWTNKNWNIUXVZMkZzYkNoMGFHbHpMR0VzWWl4akxtdGxlU3hrS1gxOUtYMG9LVHRjYmx4dUx5cGNia055ZVhCMGIwcFRJSFl6TGpFdU1pQmhaWE10YldsdUxtcHpYRzVqYjJSbExtZHZiMmRzWlM1amIyMHZjQzlqY25sd2RHOHRhbk5jYmloaktTQXlNREE1TFRJd01UTWdZbmtnU21WbVppQk5iM1IwTGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVZMjlrWlM1bmIyOW5iR1V1WTI5dEwzQXZZM0o1Y0hSdkxXcHpMM2RwYTJrdlRHbGpaVzV6WlZ4dUtpOWNiaWhtZFc1amRHbHZiaWdwZTJadmNpaDJZWElnY1QxRGNubHdkRzlLVXl4NFBYRXViR2xpTGtKc2IyTnJRMmx3YUdWeUxISTljUzVoYkdkdkxHbzlXMTBzZVQxYlhTeDZQVnRkTEVFOVcxMHNRajFiWFN4RFBWdGRMSE05VzEwc2RUMWJYU3gyUFZ0ZExIYzlXMTBzWnoxYlhTeHJQVEE3TWpVMlBtczdheXNyS1dkYmExMDlNVEk0UG1zL2F6dzhNVHByUER3eFhqSTRNenRtYjNJb2RtRnlJRzQ5TUN4c1BUQXNhejB3T3pJMU5qNXJPMnNyS3lsN2RtRnlJR1k5YkY1c1BEd3hYbXc4UERKZWJEdzhNMTVzUER3MExHWTlaajQrUGpoZVppWXlOVFZlT1RrN2FsdHVYVDFtTzNsYlpsMDlianQyWVhJZ2REMW5XMjVkTEVROVoxdDBYU3hGUFdkYlJGMHNZajB5TlRjcVoxdG1YVjR4TmpnME16QXdPQ3BtTzNwYmJsMDlZanc4TWpSOFlqNCtQamc3UVZ0dVhUMWlQRHd4Tm54aVBqNCtNVFk3UWx0dVhUMWlQRHc0ZkdJK1BqNHlORHREVzI1ZFBXSTdZajB4TmpnME16QXdPU3BGWGpZMU5UTTNLa1JlTWpVM0tuUmVNVFk0TkRNd01EZ3FianR6VzJaZFBXSThQREkwZkdJK1BqNDRPM1ZiWmwwOVlqdzhNVFo4WWo0K1BqRTJPM1piWmwwOVlqdzhPSHhpUGo0K01qUTdkMXRtWFQxaU8yNC9LRzQ5ZEY1blcyZGJaMXRGWG5SZFhWMHNiRjQ5WjF0blcyeGRYU2s2Ymoxc1BURjlkbUZ5SUVZOVd6QXNNU3d5TERRc09DeGNiakUyTERNeUxEWTBMREV5T0N3eU55dzFORjBzY2oxeUxrRkZVejE0TG1WNGRHVnVaQ2g3WDJSdlVtVnpaWFE2Wm5WdVkzUnBiMjRvS1h0bWIzSW9kbUZ5SUdNOWRHaHBjeTVmYTJWNUxHVTlZeTUzYjNKa2N5eGhQV011YzJsblFubDBaWE12TkN4alBUUXFLQ2gwYUdsekxsOXVVbTkxYm1SelBXRXJOaWtyTVNrc1lqMTBhR2x6TGw5clpYbFRZMmhsWkhWc1pUMWJYU3hvUFRBN2FEeGpPMmdyS3lscFppaG9QR0VwWWx0b1hUMWxXMmhkTzJWc2MyVjdkbUZ5SUdROVlsdG9MVEZkTzJnbFlUODJQR0VtSmpROVBXZ2xZU1ltS0dROWFsdGtQajQrTWpSZFBEd3lOSHhxVzJRK1BqNHhOaVl5TlRWZFBEd3hObnhxVzJRK1BqNDRKakkxTlYwOFBEaDhhbHRrSmpJMU5WMHBPaWhrUFdROFBEaDhaRDQrUGpJMExHUTlhbHRrUGo0K01qUmRQRHd5Tkh4cVcyUStQajR4TmlZeU5UVmRQRHd4Tm54cVcyUStQajQ0SmpJMU5WMDhQRGg4YWx0a0pqSTFOVjBzWkY0OVJsdG9MMkY4TUYwOFBESTBLVHRpVzJoZFBXSmJhQzFoWFY1a2ZXVTlkR2hwY3k1ZmFXNTJTMlY1VTJOb1pXUjFiR1U5VzEwN1ptOXlLR0U5TUR0aFBHTTdZU3NyS1dnOVl5MWhMR1E5WVNVMFAySmJhRjA2WWx0b0xUUmRMR1ZiWVYwOU5ENWhmSHcwUGoxb1AyUTZjMXRxVzJRK1BqNHlORjFkWG5WYmFsdGtQajQrTVRZbU1qVTFYVjFlZGx0cVcyUStQajVjYmpnbU1qVTFYVjFlZDF0cVcyUW1NalUxWFYxOUxHVnVZM0o1Y0hSQ2JHOWphenBtZFc1amRHbHZiaWhqTEdVcGUzUm9hWE11WDJSdlEzSjVjSFJDYkc5amF5aGpMR1VzZEdocGN5NWZhMlY1VTJOb1pXUjFiR1VzZWl4QkxFSXNReXhxS1gwc1pHVmpjbmx3ZEVKc2IyTnJPbVoxYm1OMGFXOXVLR01zWlNsN2RtRnlJR0U5WTF0bEt6RmRPMk5iWlNzeFhUMWpXMlVyTTEwN1kxdGxLek5kUFdFN2RHaHBjeTVmWkc5RGNubHdkRUpzYjJOcktHTXNaU3gwYUdsekxsOXBiblpMWlhsVFkyaGxaSFZzWlN4ekxIVXNkaXgzTEhrcE8yRTlZMXRsS3pGZE8yTmJaU3N4WFQxalcyVXJNMTA3WTF0bEt6TmRQV0Y5TEY5a2IwTnllWEIwUW14dlkyczZablZ1WTNScGIyNG9ZeXhsTEdFc1lpeG9MR1FzYWl4dEtYdG1iM0lvZG1GeUlHNDlkR2hwY3k1ZmJsSnZkVzVrY3l4bVBXTmJaVjFlWVZzd1hTeG5QV05iWlNzeFhWNWhXekZkTEdzOVkxdGxLekpkWG1GYk1sMHNjRDFqVzJVck0xMWVZVnN6WFN4c1BUUXNkRDB4TzNROGJqdDBLeXNwZG1GeUlIRTlZbHRtUGo0K01qUmRYbWhiWno0K1BqRTJKakkxTlYxZVpGdHJQajQrT0NZeU5UVmRYbXBiY0NZeU5UVmRYbUZiYkNzclhTeHlQV0piWno0K1BqSTBYVjVvVzJzK1BqNHhOaVl5TlRWZFhtUmJjRDQrUGpnbU1qVTFYVjVxVzJZbU1qVTFYVjVoVzJ3cksxMHNjejFjYm1KYmF6NCtQakkwWFY1b1czQStQajR4TmlZeU5UVmRYbVJiWmo0K1BqZ21NalUxWFY1cVcyY21NalUxWFY1aFcyd3JLMTBzY0QxaVczQStQajR5TkYxZWFGdG1QajQrTVRZbU1qVTFYVjVrVzJjK1BqNDRKakkxTlYxZWFsdHJKakkxTlYxZVlWdHNLeXRkTEdZOWNTeG5QWElzYXoxek8zRTlLRzFiWmo0K1BqSTBYVHc4TWpSOGJWdG5QajQrTVRZbU1qVTFYVHc4TVRaOGJWdHJQajQrT0NZeU5UVmRQRHc0ZkcxYmNDWXlOVFZkS1Y1aFcyd3JLMTA3Y2owb2JWdG5QajQrTWpSZFBEd3lOSHh0VzJzK1BqNHhOaVl5TlRWZFBEd3hObnh0VzNBK1BqNDRKakkxTlYwOFBEaDhiVnRtSmpJMU5WMHBYbUZiYkNzclhUdHpQU2h0VzJzK1BqNHlORjA4UERJMGZHMWJjRDQrUGpFMkpqSTFOVjA4UERFMmZHMWJaajQrUGpnbU1qVTFYVHc4T0h4dFcyY21NalUxWFNsZVlWdHNLeXRkTzNBOUtHMWJjRDQrUGpJMFhUdzhNalI4YlZ0bVBqNCtNVFltTWpVMVhUdzhNVFo4YlZ0blBqNCtPQ1l5TlRWZFBEdzRmRzFiYXlZeU5UVmRLVjVoVzJ3cksxMDdZMXRsWFQxeE8yTmJaU3N4WFQxeU8yTmJaU3N5WFQxek8yTmJaU3N6WFQxd2ZTeHJaWGxUYVhwbE9qaDlLVHR4TGtGRlV6MTRMbDlqY21WaGRHVklaV3h3WlhJb2NpbDlLU2dwTzF4dVhHNHZLbHh1UTNKNWNIUnZTbE1nZGpNdU1TNHlJSFJ5YVhCc1pXUmxjeTF0YVc0dWFuTmNibU52WkdVdVoyOXZaMnhsTG1OdmJTOXdMMk55ZVhCMGJ5MXFjMXh1S0dNcElESXdNRGt0TWpBeE15QmllU0JLWldabUlFMXZkSFF1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNWpiMlJsTG1kdmIyZHNaUzVqYjIwdmNDOWpjbmx3ZEc4dGFuTXZkMmxyYVM5TWFXTmxibk5sWEc0cUwxeHVLR1oxYm1OMGFXOXVLQ2w3Wm5WdVkzUnBiMjRnYWloaUxHTXBlM1poY2lCaFBTaDBhR2x6TGw5c1FteHZZMnMrUGo1aVhuUm9hWE11WDNKQ2JHOWpheWttWXp0MGFHbHpMbDl5UW14dlkydGVQV0U3ZEdocGN5NWZiRUpzYjJOclhqMWhQRHhpZldaMWJtTjBhVzl1SUd3b1lpeGpLWHQyWVhJZ1lUMG9kR2hwY3k1ZmNrSnNiMk5yUGo0K1lsNTBhR2x6TGw5c1FteHZZMnNwSm1NN2RHaHBjeTVmYkVKc2IyTnJYajFoTzNSb2FYTXVYM0pDYkc5amExNDlZVHc4WW4xMllYSWdhRDFEY25sd2RHOUtVeXhsUFdndWJHbGlMRzQ5WlM1WGIzSmtRWEp5WVhrc1pUMWxMa0pzYjJOclEybHdhR1Z5TEdjOWFDNWhiR2R2TEhFOVd6VTNMRFE1TERReExETXpMREkxTERFM0xEa3NNU3cxT0N3MU1DdzBNaXd6TkN3eU5pd3hPQ3d4TUN3eUxEVTVMRFV4TERRekxETTFMREkzTERFNUxERXhMRE1zTmpBc05USXNORFFzTXpZc05qTXNOVFVzTkRjc016a3NNekVzTWpNc01UVXNOeXcyTWl3MU5DdzBOaXd6T0N3ek1Dd3lNaXd4TkN3MkxEWXhMRFV6TERRMUxETTNMREk1TERJeExERXpMRFVzTWpnc01qQXNNVElzTkYwc2NEMWJNVFFzTVRjc01URXNNalFzTVN3MUxETXNNamdzTVRVc05pd3lNU3d4TUN3eU15d3hPU3d4TWl3MExESTJMRGdzTVRZc055d3lOeXd5TUN3eE15d3lMRFF4TERVeUxETXhMRE0zTERRM0xGeHVOVFVzTXpBc05EQXNOVEVzTkRVc016TXNORGdzTkRRc05Ea3NNemtzTlRZc016UXNOVE1zTkRZc05ESXNOVEFzTXpZc01qa3NNekpkTEhJOVd6RXNNaXcwTERZc09Dd3hNQ3d4TWl3eE5Dd3hOU3d4Tnl3eE9Td3lNU3d5TXl3eU5Td3lOeXd5T0Ywc2N6MWJlMXdpTUZ3aU9qZzBNakU0T0Rnc01qWTRORE0xTkRVMk9qTXlOelk0TERVek5qZzNNRGt4TWpvNE5ESXhNemM0TERnd05UTXdOak0yT0RveUxERXdOek0zTkRFNE1qUTZOVEV5TERFek5ESXhOemN5T0RBNk9EUXlNVGc1TUN3eE5qRXdOakV5TnpNMk9qZ3pPRGt4TWpJc01UZzNPVEEwT0RFNU1qbzRNemc0TmpBNExESXhORGMwT0RNMk5EZzZOVEUwTERJME1UVTVNVGt4TURRNk9ETTRPVEV5TUN3eU5qZzBNelUwTlRZd09qTXpNamd3TERJNU5USTNPVEF3TVRZNk9EUXlNVE0zTml3ek1qSXhNakkxTkRjeU9qTXlOemN3TERNME9EazJOakE1TWpnNk9ETTRPRFl4TUN3ek56VTRNRGsyTXpnME9qQXNOREF5TmpVek1UZzBNRG96TXpJNE1pd3hNelF5TVRjM01qZzZNQ3cwTURJMk5UTXhPRFE2T0RReU1UZzVNQ3cyTnpFd09EZzJOREE2TXpNeU9ESXNPVE01TlRJME1EazJPak15TnpZNExERXlNRGM1TlRrMU5USTZPRFF5TVRnNE9Dd3hORGMyTXprMU1EQTRPalV4TWl3eE56UTBPRE13TkRZME9qZzBNakV6Tnpnc01qQXhNekkyTlRreU1Eb3lMRnh1TWpJNE1UY3dNVE0zTmpvNE16ZzVNVEl3TERJMU5UQXhNelk0TXpJNk16TXlPREFzTWpneE9EVTNNakk0T0RvNE5ESXhNemMyTERNd09EY3dNRGMzTkRRNk9ETTRPVEV5TWl3ek16VTFORFF6TWpBd09qZ3pPRGcyTVRBc016WXlNemczT0RZMU5qb3pNamMzTUN3ek9Ea3lNekUwTVRFeU9qVXhOQ3cwTVRZd056UTVOVFk0T2pnek9EZzJNRGdzTVRvek1qYzJPQ3d5TmpnME16VTBOVGM2TWl3MU16WTROekE1TVRNNk9EUXlNVGc0T0N3NE1EVXpNRFl6TmprNk9ETTRPRFl3T0N3eE1EY3pOelF4T0RJMU9qZzBNakV6Tnpnc01UTTBNakUzTnpJNE1Ub3pNekk0TUN3eE5qRXdOakV5TnpNM09qVXhNaXd4T0RjNU1EUTRNVGt6T2pnek9Ea3hNaklzTWpFME56UTRNelkwT1RvNE5ESXhPRGt3TERJME1UVTVNVGt4TURVNk9EUXlNVE0zTml3eU5qZzBNelUwTlRZeE9qZ3pPRGcyTVRBc01qazFNamM1TURBeE56b3pNekk0TWl3ek1qSXhNakkxTkRjek9qVXhOQ3d6TkRnNU5qWXdPVEk1T2pnek9Ea3hNakFzTXpjMU9EQTVOak00TlRvek1qYzNNQ3cwTURJMk5UTXhPRFF4T2pBc01UTTBNakUzTnpJNU9qZzBNakU0T1RBc05EQXlOalV6TVRnMU9qZzBNakV6TnpZc05qY3hNRGc0TmpReE9qZ3pPRGcyTURnc09UTTVOVEkwTURrM09qVXhNaXd4TWpBM09UVTVOVFV6T2pNeU56WTRMREUwTnpZek9UVXdNRGs2T0RNNE9EWXhNQ3hjYmpFM05EUTRNekEwTmpVNk1pd3lNREV6TWpZMU9USXhPak16TWpneUxESXlPREUzTURFek56YzZNekkzTnpBc01qVTFNREV6Tmpnek16bzRNemc1TVRJeUxESTRNVGcxTnpJeU9EazZOVEUwTERNd09EY3dNRGMzTkRVNk9EUXlNVGc0T0N3ek16VTFORFF6TWpBeE9qZ3pPRGt4TWpBc016WXlNemczT0RZMU56b3dMRE00T1RJek1UUXhNVE02TXpNeU9EQXNOREUyTURjME9UVTJPVG80TkRJeE16YzRmU3g3WENJd1hDSTZNVEEzTkRJNE1qVXhNaXd4TmpjM056SXhOam94TmpNNE5Dd3pNelUxTkRRek1qbzFNalF5T0Rnc05UQXpNekUyTkRnNk1UQTNOREkyTmpFeU9DdzJOekV3T0RnMk5Eb3hNRGN6TnpReE9EUXdMRGd6T0RnMk1EZ3dPakV3TnpReU9ESTBPVFlzTVRBd05qWXpNamsyT2pFd056TTNOVGd5TURnc01URTNORFF3TlRFeU9qRTJMREV6TkRJeE56Y3lPRG8xTkRBMk56SXNNVFV3T1RrME9UUTBPakV3TnpNM05UZ3lNalFzTVRZM056Y3lNVFl3T2pFd056TTNOREU0TWpRc01UZzBOVFE1TXpjMk9qVTBNRFk0T0N3eU1ERXpNalkxT1RJNk5USTBNekEwTERJeE9ERXdNemd3T0Rvd0xESXpORGc0TVRBeU5Eb3hOalF3TUN3eU5URTJOVGd5TkRBNk1UQTNOREkyTmpFeE1pdzRNemc0TmpBNE9qRXdOek0zTlRneU1EZ3NNalV4TmpVNE1qUTZOVFF3TmpnNExEUXhPVFF6TURRd09qRTJMRFU0TnpJd01qVTJPakV3TnpNM05UZ3lNalFzWEc0M05UUTVOelEzTWpveE1EYzBNamd5TlRFeUxEa3lNamMwTmpnNE9qRXdOek0zTkRFNE1qUXNNVEE1TURVeE9UQTBPalV5TkRJNE9Dd3hNalU0TWpreE1qQTZNVEEzTkRJMk5qRXlPQ3d4TkRJMk1EWXpNelk2TlRJME16QTBMREUxT1RNNE16VTFNam93TERFM05qRTJNRGMyT0RveE5qTTROQ3d4T1RJNU16YzVPRFE2TVRBM05ESTJOakV4TWl3eU1EazNNVFV5TURBNk1UQTNNemMwTVRnME1Dd3lNalkwT1RJME1UWTZOVFF3TmpjeUxESTBNekkyT1RZek1qb3hNRGMwTWpneU5EazJMREkyTURBME5qZzBPRG94TmpRd01Dd3lOamcwTXpVME5UWTZNQ3d5T0RVeU1USTJOekk2TVRBM05ESTJOakV5T0N3ek1ERTVPRGs0T0RnNk1UQTNNemMxT0RJeU5Dd3pNVGczTmpjeE1EUTZNVEEzTkRJNE1qUTVOaXd6TXpVMU5EUXpNakE2TVRBM05ESTJOakV4TWl3ek5USXpNakUxTXpZNk1UWXNNelk1TURrNE56VXlPalUwTURZNE9Dd3pPRFU0TnpVNU5qZzZNVFl6T0RRc05EQXlOalV6TVRnME9qRTJOREF3TERReE9UUXpNRFF3TURvMU1qUXlPRGdzTkRNMk1qQTNOakUyT2pVeU5ETXdOQ3cwTlRJNU9EUTRNekk2TVRBM016YzBNVGcwTUN3ME5qazNOakl3TkRnNk5UUXdOamN5TERRNE5qVXpPVEkyTkRveE1EY3pOelU0TWpBNExEVXdNek14TmpRNE1Eb3hNRGN6TnpReE9ESTBMRFV5TURBNU16WTVOam94TURjME1qZ3lOVEV5TEZ4dU1qYzJPREkwTURZME9qVTBNRFk0T0N3eU9UTTJNREV5T0RBNk5USTBNamc0TERNeE1ETTNPRFE1TmpveE1EYzBNalkyTVRFeUxETXlOekUxTlRjeE1qb3hOak00TkN3ek5ETTVNekk1TWpnNk1UQTNNemMxT0RJd09Dd3pOakEzTVRBeE5EUTZNVEEzTkRJNE1qVXhNaXd6TnpjME9EY3pOakE2TVRZc016azBNalkwTlRjMk9qRXdOek0zTkRFNE1qUXNOREV4TURReE56a3lPakV3TnpReU9ESTBPVFlzTkRJM09ERTVNREE0T2pFd056TTNOREU0TkRBc05EUTBOVGsyTWpJME9qRXdOek0zTlRneU1qUXNORFl4TXpjek5EUXdPalV5TkRNd05DdzBOemd4TlRBMk5UWTZNQ3cwT1RRNU1qYzROekk2TVRZME1EQXNOVEV4TnpBMU1EZzRPakV3TnpReU5qWXhNamdzTlRJNE5EZ3lNekEwT2pVME1EWTNNbjBzZTF3aU1Gd2lPakkyTUN3eE1EUTROVGMyT2pBc01qQTVOekUxTWpvMk56RXdPVEV5TUN3ek1UUTFOekk0T2pZMU56azJMRFF4T1RRek1EUTZOalUxTkRBc05USTBNamc0TURvMk56RXdPRGcyT0N3Mk1qa3hORFUyT2pZM01UYzBOall3TERjek5EQXdNekk2TmpjeE56UTBNREFzT0RNNE9EWXdPRG8yTnpFd09EZzJOQ3c1TkRNM01UZzBPalkzTVRjME5qVTJMREV3TkRnMU56WXdPalkxTnpreUxERXhOVE0wTXpNMk9qWTNNVGMwTkRBMExERXlOVGd5T1RFeU9qWTNNVEE1TVRJMExERXpOak14TkRnNE9qWTFOVE0yTEZ4dU1UUTJPREF3TmpRNk5Dd3hOVGN5T0RZME1Eb3lOVFlzTlRJME1qZzRPalkzTVRjME5qVTJMREUxTnpJNE5qUTZOamN4TnpRME1EUXNNall5TVRRME1Eb3dMRE0yTnpBd01UWTZOamN4TURreE1qQXNORGN4T0RVNU1qbzJOekV3T0RnMk9DdzFOelkzTVRZNE9qWTFOVE0yTERZNE1UVTNORFE2TmpVMU5EQXNOemcyTkRNeU1Eb3lOakFzT0RreE1qZzVOam8wTERrNU5qRTBOekk2TWpVMkxERXhNREV3TURRNE9qWTNNVGMwTkRBd0xERXlNRFU0TmpJME9qWTFOemsyTERFek1UQTNNakF3T2pZMU56a3lMREUwTVRVMU56YzJPalkzTVRBNU1USTBMREUxTWpBME16VXlPalkzTVRjME5qWXdMREUyTWpVeU9USTRPalkzTVRBNE9EWTBMREUyTnpjM01qRTJPalkzTVRjME5qVTJMREUzT0RJMU56a3lPalkxTlRRd0xERTRPRGMwTXpZNE9qWTFOVE0yTERFNU9USXlPVFEwT2pZM01UQTVNVEl3TERJd09UY3hOVEl3T2pJMU5pd3lNakF5TURBNU5qbzJOekUzTkRZMk1Dd3lNekEyT0RZM01qbzJOekV3T0RnMk9Dd3lOREV4TnpJME9Eb3dMREkxTVRZMU9ESTBPalkzTVRBNU1USTBMREkyTWpFME5EQXdPalkzTVRBNE9EWTBMREkzTWpZeU9UYzJPalFzTWpnek1URTFOVEk2TmpVM09USXNNamt6TmpBeE1qZzZOamN4TnpRME1EQXNNekEwTURnM01EUTZNall3TERNeE5EVTNNamd3T2pZMU56azJMRE15TlRBMU9EVTJPalkzTVRjME5EQTBMRnh1TVRjek1ERTFNRFE2TmpjeE1EZzROalFzTVRnek5UQXdPREE2TWpZd0xERTVNems0TmpVMk9qWTNNVGMwTmpVMkxESXdORFEzTWpNeU9qQXNNakUwT1RVNE1EZzZOalUxTkRBc01qSTFORFF6T0RRNk5qY3hNRGt4TWpBc01qTTFPVEk1TmpBNk1qVTJMREkwTmpReE5UTTJPalkzTVRjME5EQTBMREkxTmprd01URXlPalkxTlRNMkxESTJOek00TmpnNE9qWTNNVGMwTmpZd0xESTNOemczTWpZME9qWTFOemsyTERJNE9ETTFPRFF3T2pZM01UQTRPRFk0TERJNU9EZzBOREUyT2pZM01UQTVNVEkwTERNd09UTXlPVGt5T2pZM01UYzBOREF3TERNeE9UZ3hOVFk0T2pRc016TXdNekF4TkRRNk5qVTNPVEo5TEh0Y0lqQmNJam95TVRVeE5qZ3lNRFE0TERZMU5UTTJPakl4TkRjME9EYzRNRGdzTVRNeE1EY3lPalF4T1RnME5qUXNNVGsyTmpBNE9qSXhOVEUyTnpjNU5USXNNall5TVRRME9qQXNNekkzTmpnd09qUXhPVGcwTURBc016a3pNakUyT2pJeE5EYzBPRE0zTVRJc05EVTROelV5T2pReE9UUXpOamdzTlRJME1qZzRPakl4TkRjME9ETTJORGdzTlRnNU9ESTBPalF4T1RRek1EUXNOalUxTXpZd09qWTBMRGN5TURnNU5qb3lNVFEzTkRnM056UTBMRGM0TmpRek1qb3lNVFV4TmpjNE1ERTJMRGcxTVRrMk9EbzBNVFl3TERreE56VXdORG8wTURrMkxEazRNekEwTURveU1UVXhOamd5TVRFeUxETXlOelk0T2pJeE5EYzBPRGM0TURnc1hHNDVPRE13TkRvMk5Dd3hOak00TkRBNk1qRTFNVFkzT0RBeE5pd3lNamt6TnpZNk1qRTBOelE0TnpjME5Dd3lPVFE1TVRJNk5ERTVPRFF3TUN3ek5qQTBORGc2TWpFMU1UWTRNakV4TWl3ME1qVTVPRFE2TUN3ME9URTFNakE2TWpFMU1UWTNOemsxTWl3MU5UY3dOVFk2TkRBNU5pdzJNakkxT1RJNk1qRTFNVFk0TWpBME9DdzJPRGd4TWpnNk5ERTVORE13TkN3M05UTTJOalE2TkRFMk1DdzRNVGt5TURBNk1qRTBOelE0TXpZME9DdzRPRFEzTXpZNk5ERTVORE0yT0N3NU5UQXlOekk2TkRFNU9EUTJOQ3d4TURFMU9EQTRPakl4TkRjME9ETTNNVElzTVRBME9EVTNOam8wTVRrME16WTRMREV4TVRReE1USTZOREU1T0RRd01Dd3hNVGM1TmpRNE9qSXhORGMwT0RNM01USXNNVEkwTlRFNE5Eb3dMREV6TVRBM01qQTZOREUyTUN3eE16YzJNalUyT2pJeE5URTJOemd3TVRZc01UUTBNVGM1TWpveU1UVXhOamd5TURRNExERTFNRGN6TWpnNk1qRTBOelE0Tnpnd09Dd3hOVGN5T0RZME9qSXhOVEUyT0RJeE1USXNNVFl6T0RRd01Eb3lNVFEzTkRnek5qUTRMREUzTURNNU16WTZNakUxTVRZM056azFNaXd4TnpZNU5EY3lPalF4T1RnME5qUXNNVGd6TlRBd09Eb3lNVFEzTkRnM056UTBMREU1TURBMU5EUTZOREU1TkRNd05Dd3hPVFkyTURnd09qWTBMREl3TXpFMk1UWTZOREE1Tml3eE1EZ3hNelEwT2pJeE5URTJOemM1TlRJc1hHNHhNVFEyT0Rnd09qSXhOVEUyT0RJeE1USXNNVEl4TWpReE5qb3dMREV5TnpjNU5USTZOREU1T0RRd01Dd3hNelF6TkRnNE9qUXhPVFF6Tmpnc01UUXdPVEF5TkRveU1UUTNORGd6TmpRNExERTBOelExTmpBNk1qRTBOelE0Tnpnd09Dd3hOVFF3TURrMk9qWTBMREUyTURVMk16STZNakUwTnpRNE16Y3hNaXd4TmpjeE1UWTRPalF3T1RZc01UY3pOamN3TkRveU1UUTNORGczTnpRMExERTRNREl5TkRBNk1qRTFNVFkzT0RBeE5pd3hPRFkzTnpjMk9qUXhOakFzTVRrek16TXhNam95TVRVeE5qZ3lNRFE0TERFNU9UZzRORGc2TkRFNU5ETXdOQ3d5TURZME16ZzBPalF4T1RnME5qUjlMSHRjSWpCY0lqb3hNamdzTkRBNU5qb3hOekF6T1RNMk1DdzRNVGt5T2pJMk1qRTBOQ3d4TWpJNE9EbzFNelk0TnpBNU1USXNNVFl6T0RRNk5UTTNNVE16TVRnMExESXdORGd3T2pFMk56YzNNelEwTERJME5UYzJPalUxTXpZME9ESTFOaXd5T0RZM01qb3lOakl5TnpJc016STNOamc2TVRZM056Y3lNVFlzTXpZNE5qUTZOVE0zTVRNek1EVTJMRFF3T1RZd09qVXpOamczTVRBME1DdzBOVEExTmpvMU5UTTVNVEEwTURBc05Ea3hOVEk2TlRVek9URXdNamN5TERVek1qUTRPakFzTlRjek5EUTZNVGN3TXprME9EZ3NOakUwTkRBNk5UVXpOalE0TVRJNExESXdORGc2TVRjd016azBPRGdzTmpFME5EbzFOVE0yTkRneU5UWXNYRzR4TURJME1Eb3hNamdzTVRRek16WTZNVGN3TXprek5qQXNNVGcwTXpJNk1qWXlNVFEwTERJeU5USTRPalV6TnpFek16RTROQ3d5TmpZeU5EbzFOVE01TVRBeU56SXNNekEzTWpBNk5UTTJPRGN3T1RFeUxETTBPREUyT2pVek56RXpNekExTml3ek9Ea3hNam93TERRek1EQTRPalUxTXpreE1EUXdNQ3cwTnpFd05Eb3hOamMzTnpNME5DdzFNVEl3TURvMU16WTROekV3TkRBc05UVXlPVFk2TlRVek5qUTRNVEk0TERVNU16a3lPakUyTnpjM01qRTJMRFl6TkRnNE9qSTJNakkzTWl3Mk5UVXpOam95TmpJeE5EUXNOamsyTXpJNk1USTRMRGN6TnpJNE9qVXpOamczTURreE1pdzNOemd5TkRvMU5UTTJORGd5TlRZc09ERTVNakE2TVRZM056Y3pORFFzT0RZd01UWTZOVFV6T1RFd01qY3lMRGt3TVRFeU9qVXpOekV6TXpFNE5DdzVOREl3T0RveE5qYzNOekl4Tml3NU9ETXdORG8xTlRNNU1UQTBNREFzTVRBeU5EQXdPalUxTXpZME9ERXlPQ3d4TURZME9UWTZNVGN3TXprek5qQXNNVEV3TlRreU9qVXpOekV6TXpBMU5pd3hNVFEyT0RnNk1qWXlNamN5TERFeE9EYzRORG8xTXpZNE56RXdOREFzTVRJeU9EZ3dPakFzTVRJMk9UYzJPakUzTURNNU5EZzRMRFkzTlRnME9qVTFNelkwT0RJMU5pdzNNVFk0TURveE5qYzNOekl4Tml3M05UYzNOam94TnpBek9UTTJNQ3czT1RnM01qbzFNemN4TXpNeE9EUXNYRzQ0TXprMk9EbzFNelk0TnpBNU1USXNPRGd3TmpRNk1UY3dNemswT0Rnc09USXhOakE2TVRJNExEazJNalUyT2pVMU16a3hNREkzTWl3eE1EQXpOVEk2TWpZeU1qY3lMREV3TkRRME9EbzFOVE01TVRBME1EQXNNVEE0TlRRME9qQXNNVEV5TmpRd09qVTFNelkwT0RFeU9Dd3hNVFkzTXpZNk1UWTNOemN6TkRRc01USXdPRE15T2pJMk1qRTBOQ3d4TWpRNU1qZzZOVE0zTVRNek1EVTJMREV5T1RBeU5EbzFNelk0TnpFd05EQjlMSHRjSWpCY0lqb3lOamcwTXpVME5qUXNNalUyT2pneE9USXNOVEV5T2pJM01EVXpNall3T0N3M05qZzZNamN3TlRRd09EQTRMREV3TWpRNk1qWTRORFF6TmpRNExERXlPREE2TWpBNU56RTFNaXd4TlRNMk9qSXdPVGN4TmpBc01UYzVNam95TmpnME16VTBOVFlzTWpBME9Eb3dMREl6TURRNk1qWTRORFF6TmpVMkxESTFOakE2TWpFd05UTTBOQ3d5T0RFMk9qZ3NNekEzTWpveU56QTFNekkyTVRZc016TXlPRG95TVRBMU16VXlMRE0xT0RRNk9ESXdNQ3d6T0RRd09qSTNNRFUwTURnd01Dd3hNamc2TWpjd05UTXlOakE0TERNNE5Eb3lOekExTkRBNE1EZ3NOalF3T2pnc09EazJPakl3T1RjeE5USXNNVEUxTWpveU1UQTFNelV5TERFME1EZzZNalk0TkRNMU5EWTBMREUyTmpRNk1qWTRORFF6TmpRNExERTVNakE2T0RJd01Dd3lNVGMyT2pJd09UY3hOakFzTWpRek1qbzRNVGt5TEZ4dU1qWTRPRG95TmpnME5ETTJOVFlzTWprME5Eb3lOekExTXpJMk1UWXNNekl3TURvd0xETTBOVFk2TWpjd05UUXdPREF3TERNM01USTZNakV3TlRNME5Dd3pPVFk0T2pJMk9EUXpOVFExTml3ME1EazJPakkyT0RRME16WTBPQ3cwTXpVeU9qSTNNRFV6TWpZeE5pdzBOakE0T2pJM01EVTBNRGd3T0N3ME9EWTBPamd5TURBc05URXlNRG95TURrM01UVXlMRFV6TnpZNk1qWTRORE0xTkRVMkxEVTJNekk2TWpZNE5ETTFORFkwTERVNE9EZzZNakV3TlRNME5DdzJNVFEwT2pJeE1EVXpOVElzTmpRd01Eb3dMRFkyTlRZNk9DdzJPVEV5T2pJM01EVXpNall3T0N3M01UWTRPamd4T1RJc056UXlORG95TmpnME5ETTJOVFlzTnpZNE1Eb3lOekExTkRBNE1EQXNOemt6TmpveU1EazNNVFl3TERReU1qUTZPQ3cwTkRnd09qSXhNRFV6TkRRc05EY3pOam95TURrM01UVXlMRFE1T1RJNk1qWTRORE0xTkRZMExEVXlORGc2TWpZNE5EUXpOalE0TERVMU1EUTZPREl3TUN3MU56WXdPakkzTURVME1EZ3dPQ3cyTURFMk9qSTNNRFV6TWpZd09DdzJNamN5T2pJM01EVTBNRGd3TUN3Mk5USTRPakkzTURVek1qWXhOaXcyTnpnME9qZ3hPVElzTnpBME1Eb3lNVEExTXpVeUxEY3lPVFk2TWpBNU56RTJNQ3czTlRVeU9qQXNOemd3T0RveU5qZzBNelUwTlRZc09EQTJORG95TmpnME5ETTJOVFo5TEh0Y0lqQmNJam94TURRNE5UYzJMRnh1TVRZNk16TTFOVFUwTlRjc016STZNVEF5TkN3ME9Eb3hNRFE1TmpBeExEWTBPak0wTmpBME1ETXpMRGd3T2pBc09UWTZNU3d4TVRJNk16UTJNRE13TURrc01USTRPak16TlRVMU5EVTJMREUwTkRveE1EUTROVGMzTERFMk1Eb3pNelUxTkRRek15d3hOelk2TXpRMk1EUXdNeklzTVRreU9qTTBOakF6TURBNExESXdPRG94TURJMUxESXlORG94TURRNU5qQXdMREkwTURvek16VTFORFF6TWl3NE9qTTBOakF6TURBNUxESTBPakFzTkRBNk16TTFOVFUwTlRjc05UWTZNelEyTURRd016SXNOekk2TVRBME9EVTNOaXc0T0Rvek16VTFORFF6TXl3eE1EUTZNek0xTlRRME16SXNNVEl3T2pFd01qVXNNVE0yT2pFd05EazJNREVzTVRVeU9qTXpOVFUxTkRVMkxERTJPRG96TkRZd016QXdPQ3d4T0RRNk1UQTBPRFUzTnl3eU1EQTZNVEF5TkN3eU1UWTZNelEyTURRd016TXNNak15T2pFc01qUTRPakV3TkRrMk1EQXNNalUyT2pNek5UVTBORE15TERJM01qb3hNRFE0TlRjMkxESTRPRG96TXpVMU5UUTFOeXd6TURRNk16UTJNRE13TURrc016SXdPakV3TkRnMU56Y3NNek0yT2pNek5UVTFORFUyTERNMU1qb3pORFl3TkRBek1pd3pOamc2TVRBME9UWXdNU3d6T0RRNk1UQXlOU3cwTURBNk16UTJNRFF3TXpNc05ERTJPakV3TkRrMk1EQXNORE15T2pFc05EUTRPakFzTkRZME9qTTBOakF6TURBNExEUTRNRG96TXpVMU5EUXpNeXhjYmpRNU5qb3hNREkwTERJMk5Eb3hNRFE1TmpBd0xESTRNRG96TXpVMU5UUTFOeXd5T1RZNk16UTJNRE13TURrc016RXlPakVzTXpJNE9qTXpOVFUwTkRNeUxETTBORG94TURRNE5UYzJMRE0yTURveE1ESTFMRE0zTmpvek5EWXdOREF6TWl3ek9USTZNek0xTlRRME16TXNOREE0T2pNME5qQXpNREE0TERReU5Eb3dMRFEwTURvek5EWXdOREF6TXl3ME5UWTZNVEEwT1RZd01TdzBOekk2TVRBeU5DdzBPRGc2TXpNMU5UVTBOVFlzTlRBME9qRXdORGcxTnpkOUxIdGNJakJjSWpveE16UXlNVGs0TURnc01Ub3hNekV3TnpJc01qb3hNelF5TVRjM01qZ3NNem96TWl3ME9qRXpNVEV3TkN3MU9qRXpORE0xTURnNE1DdzJPakV6TkRNMU1EZzBPQ3czT2pJd05EZ3NPRG94TXpRek5EZzRNREFzT1RveE16UXlNVGszTnpZc01UQTZNVE16TVRJd0xERXhPakV6TkRNME9EZ3pNaXd4TWpveU1EZ3dMREV6T2pBc01UUTZNVE0wTWpFM056WXdMREUxT2pFek16RTFNaXd5TVRRM05EZ3pOalE0T2pJd05EZ3NNakUwTnpRNE16WTBPVG94TXpRek5UQTRPREFzTWpFME56UTRNelkxTURveE16UXlNVGs0TURnc01qRTBOelE0TXpZMU1Ub3hNelF5TVRjM01qZ3NNakUwTnpRNE16WTFNam94TXpRek5EZzRNREFzTWpFME56UTRNelkxTXpveE16TXhNakFzTWpFME56UTRNelkxTkRveE16TXhOVElzTWpFME56UTRNelkxTlRvek1peGNiakl4TkRjME9ETTJOVFk2TVRNME1qRTNOell3TERJeE5EYzBPRE0yTlRjNk1qQTRNQ3d5TVRRM05EZ3pOalU0T2pFek1URXdOQ3d5TVRRM05EZ3pOalU1T2pFek5ETTFNRGcwT0N3eU1UUTNORGd6TmpZd09qQXNNakUwTnpRNE16WTJNVG94TXpRek5EZzRNeklzTWpFME56UTRNelkyTWpveE16UXlNVGszTnpZc01qRTBOelE0TXpZMk16b3hNekV3TnpJc01UWTZNVE16TVRVeUxERTNPakV6TkRNMU1EZzBPQ3d4T0Rvek1pd3hPVG95TURRNExESXdPakV6TkRJeE9UYzNOaXd5TVRveE16UXlNVGMzTmpBc01qSTZNVE0wTXpRNE9ETXlMREl6T2pFek1UQTNNaXd5TkRvd0xESTFPakV6TVRFd05Dd3lOam94TXpRek5EZzRNREFzTWpjNk1UTTBNakU1T0RBNExESTRPakV6TkRNMU1EZzRNQ3d5T1RveE16TXhNakFzTXpBNk1qQTRNQ3d6TVRveE16UXlNVGMzTWpnc01qRTBOelE0TXpZMk5Eb3hNekV3TnpJc01qRTBOelE0TXpZMk5Ub3lNRFE0TERJeE5EYzBPRE0yTmpZNk1UTTBNelE0T0RNeUxESXhORGMwT0RNMk5qYzZNVE16TVRVeUxESXhORGMwT0RNMk5qZzZNeklzTWpFME56UTRNelkyT1RveE16UXpORGc0TURBc01qRTBOelE0TXpZM01Eb3hNelF5TVRjM01qZ3NNakUwTnpRNE16WTNNVG94TXpReU1UazRNRGdzTWpFME56UTRNelkzTWpveE16UXpOVEE0T0RBc01qRTBOelE0TXpZM016b3hNelF5TVRjM05qQXNYRzR5TVRRM05EZ3pOamMwT2pFek5ESXhPVGMzTml3eU1UUTNORGd6TmpjMU9qQXNNakUwTnpRNE16WTNOam94TXpNeE1qQXNNakUwTnpRNE16WTNOem95TURnd0xESXhORGMwT0RNMk56ZzZNVE14TVRBMExESXhORGMwT0RNMk56azZNVE0wTXpVd09EUTRmVjBzZEQxYk5ERTJNRGMwT1RVMk9TdzFNamcwT0RJek1EUXNNek13TXpBeE5EUXNNakEyTkRNNE5Dd3hNamt3TWpRc09EQTJOQ3cxTURRc01qRTBOelE0TXpZM09WMHNiVDFuTGtSRlV6MWxMbVY0ZEdWdVpDaDdYMlJ2VW1WelpYUTZablZ1WTNScGIyNG9LWHRtYjNJb2RtRnlJR0k5ZEdocGN5NWZhMlY1TG5kdmNtUnpMR005VzEwc1lUMHdPelUyUG1FN1lTc3JLWHQyWVhJZ1pqMXhXMkZkTFRFN1kxdGhYVDFpVzJZK1BqNDFYVDQrUGpNeExXWWxNekltTVgxaVBYUm9hWE11WDNOMVlrdGxlWE05VzEwN1ptOXlLR1k5TURzeE5qNW1PMllyS3lsN1ptOXlLSFpoY2lCa1BXSmJabDA5VzEwc1pUMXlXMlpkTEdFOU1Ec3lORDVoTzJFckt5bGtXMkV2Tm53d1hYdzlZMXNvY0Z0aFhTMHhLMlVwSlRJNFhUdzhNekV0WVNVMkxHUmJOQ3NvWVM4MmZEQXBYWHc5WTFzeU9Dc29jRnRoS3pJMFhTMHhLMlVwSlRJNFhUdzhNekV0WVNVMk8yUmJNRjA5WkZzd1hUdzhNWHhrV3pCZFBqNCtNekU3Wm05eUtHRTlNVHMzUG1FN1lTc3JLV1JiWVYwK1BqNDlYRzQwS2loaExURXBLek03WkZzM1hUMWtXemRkUER3MWZHUmJOMTArUGo0eU4zMWpQWFJvYVhNdVgybHVkbE4xWWt0bGVYTTlXMTA3Wm05eUtHRTlNRHN4Tmo1aE8yRXJLeWxqVzJGZFBXSmJNVFV0WVYxOUxHVnVZM0o1Y0hSQ2JHOWphenBtZFc1amRHbHZiaWhpTEdNcGUzUm9hWE11WDJSdlEzSjVjSFJDYkc5amF5aGlMR01zZEdocGN5NWZjM1ZpUzJWNWN5bDlMR1JsWTNKNWNIUkNiRzlqYXpwbWRXNWpkR2x2YmloaUxHTXBlM1JvYVhNdVgyUnZRM0o1Y0hSQ2JHOWpheWhpTEdNc2RHaHBjeTVmYVc1MlUzVmlTMlY1Y3lsOUxGOWtiME55ZVhCMFFteHZZMnM2Wm5WdVkzUnBiMjRvWWl4akxHRXBlM1JvYVhNdVgyeENiRzlqYXoxaVcyTmRPM1JvYVhNdVgzSkNiRzlqYXoxaVcyTXJNVjA3YWk1allXeHNLSFJvYVhNc05Dd3lOVEkyTkRVeE16VXBPMm91WTJGc2JDaDBhR2x6TERFMkxEWTFOVE0xS1R0c0xtTmhiR3dvZEdocGN5d3lMRGcxT0RrNU16UTFPU2s3YkM1allXeHNLSFJvYVhNc09Dd3hOamN4TVRrek5TazdhaTVqWVd4c0tIUm9hWE1zTVN3eE5ETXhOalUxTnpZMUtUdG1iM0lvZG1GeUlHWTlNRHN4Tmo1bU8yWXJLeWw3Wm05eUtIWmhjaUJrUFdGYlpsMHNaVDEwYUdsekxsOXNRbXh2WTJzc2FEMTBhR2x6TGw5eVFteHZZMnNzWnowd0xHczlNRHM0UG1zN2F5c3JLV2Q4UFhOYmExMWJLQ2hvWGx4dVpGdHJYU2ttZEZ0clhTaytQajR3WFR0MGFHbHpMbDlzUW14dlkyczlhRHQwYUdsekxsOXlRbXh2WTJzOVpWNW5mV0U5ZEdocGN5NWZiRUpzYjJOck8zUm9hWE11WDJ4Q2JHOWphejEwYUdsekxsOXlRbXh2WTJzN2RHaHBjeTVmY2tKc2IyTnJQV0U3YWk1allXeHNLSFJvYVhNc01Td3hORE14TmpVMU56WTFLVHRzTG1OaGJHd29kR2hwY3l3NExERTJOekV4T1RNMUtUdHNMbU5oYkd3b2RHaHBjeXd5TERnMU9EazVNelExT1NrN2FpNWpZV3hzS0hSb2FYTXNNVFlzTmpVMU16VXBPMm91WTJGc2JDaDBhR2x6TERRc01qVXlOalExTVRNMUtUdGlXMk5kUFhSb2FYTXVYMnhDYkc5amF6dGlXMk1yTVYwOWRHaHBjeTVmY2tKc2IyTnJmU3hyWlhsVGFYcGxPaklzYVhaVGFYcGxPaklzWW14dlkydFRhWHBsT2pKOUtUdG9Ma1JGVXoxbExsOWpjbVZoZEdWSVpXeHdaWElvYlNrN1p6MW5MbFJ5YVhCc1pVUkZVejFsTG1WNGRHVnVaQ2g3WDJSdlVtVnpaWFE2Wm5WdVkzUnBiMjRvS1h0MllYSWdZajEwYUdsekxsOXJaWGt1ZDI5eVpITTdkR2hwY3k1ZlpHVnpNVDF0TG1OeVpXRjBaVVZ1WTNKNWNIUnZjaWh1TG1OeVpXRjBaU2hpTG5Oc2FXTmxLREFzTWlrcEtUdDBhR2x6TGw5a1pYTXlQVzB1WTNKbFlYUmxSVzVqY25sd2RHOXlLRzR1WTNKbFlYUmxLR0l1YzJ4cFkyVW9NaXcwS1NrcE8zUm9hWE11WDJSbGN6TTlYRzV0TG1OeVpXRjBaVVZ1WTNKNWNIUnZjaWh1TG1OeVpXRjBaU2hpTG5Oc2FXTmxLRFFzTmlrcEtYMHNaVzVqY25sd2RFSnNiMk5yT21aMWJtTjBhVzl1S0dJc1l5bDdkR2hwY3k1ZlpHVnpNUzVsYm1OeWVYQjBRbXh2WTJzb1lpeGpLVHQwYUdsekxsOWtaWE15TG1SbFkzSjVjSFJDYkc5amF5aGlMR01wTzNSb2FYTXVYMlJsY3pNdVpXNWpjbmx3ZEVKc2IyTnJLR0lzWXlsOUxHUmxZM0o1Y0hSQ2JHOWphenBtZFc1amRHbHZiaWhpTEdNcGUzUm9hWE11WDJSbGN6TXVaR1ZqY25sd2RFSnNiMk5yS0dJc1l5azdkR2hwY3k1ZlpHVnpNaTVsYm1OeWVYQjBRbXh2WTJzb1lpeGpLVHQwYUdsekxsOWtaWE14TG1SbFkzSjVjSFJDYkc5amF5aGlMR01wZlN4clpYbFRhWHBsT2pZc2FYWlRhWHBsT2pJc1lteHZZMnRUYVhwbE9qSjlLVHRvTGxSeWFYQnNaVVJGVXoxbExsOWpjbVZoZEdWSVpXeHdaWElvWnlsOUtTZ3BPMXh1WEc0dktseHVRM0o1Y0hSdlNsTWdkak11TVM0eUlHVnVZeTFpWVhObE5qUXRiV2x1TG1welhHNWpiMlJsTG1kdmIyZHNaUzVqYjIwdmNDOWpjbmx3ZEc4dGFuTmNiaWhqS1NBeU1EQTVMVEl3TVRNZ1lua2dTbVZtWmlCTmIzUjBMaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dVkyOWtaUzVuYjI5bmJHVXVZMjl0TDNBdlkzSjVjSFJ2TFdwekwzZHBhMmt2VEdsalpXNXpaVnh1S2k5Y2JpaG1kVzVqZEdsdmJpZ3BlM1poY2lCb1BVTnllWEIwYjBwVExHbzlhQzVzYVdJdVYyOXlaRUZ5Y21GNU8yZ3VaVzVqTGtKaGMyVTJORDE3YzNSeWFXNW5hV1o1T21aMWJtTjBhVzl1S0dJcGUzWmhjaUJsUFdJdWQyOXlaSE1zWmoxaUxuTnBaMEo1ZEdWekxHTTlkR2hwY3k1ZmJXRndPMkl1WTJ4aGJYQW9LVHRpUFZ0ZE8yWnZjaWgyWVhJZ1lUMHdPMkU4Wmp0aEt6MHpLV1p2Y2loMllYSWdaRDBvWlZ0aFBqNCtNbDArUGo0eU5DMDRLaWhoSlRRcEpqSTFOU2s4UERFMmZDaGxXMkVyTVQ0K1BqSmRQajQrTWpRdE9Db29LR0VyTVNrbE5Da21NalUxS1R3OE9IeGxXMkVyTWo0K1BqSmRQajQrTWpRdE9Db29LR0VyTWlrbE5Da21NalUxTEdjOU1EczBQbWNtSm1Fck1DNDNOU3BuUEdZN1p5c3JLV0l1Y0hWemFDaGpMbU5vWVhKQmRDaGtQajQrTmlvb015MW5LU1kyTXlrcE8ybG1LR1U5WXk1amFHRnlRWFFvTmpRcEtXWnZjaWc3WWk1c1pXNW5kR2dsTkRzcFlpNXdkWE5vS0dVcE8zSmxkSFZ5YmlCaUxtcHZhVzRvWENKY0lpbDlMSEJoY25ObE9tWjFibU4wYVc5dUtHSXBlM1poY2lCbFBXSXViR1Z1WjNSb0xHWTlkR2hwY3k1ZmJXRndMR005Wmk1amFHRnlRWFFvTmpRcE8yTW1KaWhqUFdJdWFXNWtaWGhQWmloaktTd3RNU0U5WXlZbUtHVTlZeWtwTzJadmNpaDJZWElnWXoxYlhTeGhQVEFzWkQwd08yUThYRzVsTzJRckt5bHBaaWhrSlRRcGUzWmhjaUJuUFdZdWFXNWtaWGhQWmloaUxtTm9ZWEpCZENoa0xURXBLVHc4TWlvb1pDVTBLU3hvUFdZdWFXNWtaWGhQWmloaUxtTm9ZWEpCZENoa0tTaytQajQyTFRJcUtHUWxOQ2s3WTF0aFBqNCtNbDE4UFNobmZHZ3BQRHd5TkMwNEtpaGhKVFFwTzJFckszMXlaWFIxY200Z2FpNWpjbVZoZEdVb1l5eGhLWDBzWDIxaGNEcGNJa0ZDUTBSRlJrZElTVXBMVEUxT1QxQlJVbE5VVlZaWFdGbGFZV0pqWkdWbVoyaHBhbXRzYlc1dmNIRnljM1IxZG5kNGVYb3dNVEl6TkRVMk56ZzVLeTg5WENKOWZTa29LVHRjYmx4dUx5cGNia055ZVhCMGIwcFRJSFl6TGpFdU1pQnRaRFV0YldsdUxtcHpYRzVqYjJSbExtZHZiMmRzWlM1amIyMHZjQzlqY25sd2RHOHRhbk5jYmloaktTQXlNREE1TFRJd01UTWdZbmtnU21WbVppQk5iM1IwTGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVZMjlrWlM1bmIyOW5iR1V1WTI5dEwzQXZZM0o1Y0hSdkxXcHpMM2RwYTJrdlRHbGpaVzV6WlZ4dUtpOWNiaWhtZFc1amRHbHZiaWhGS1h0bWRXNWpkR2x2YmlCb0tHRXNaaXhuTEdvc2NDeG9MR3NwZTJFOVlTc29aaVpuZkg1bUptb3BLM0FyYXp0eVpYUjFjbTRvWVR3OGFIeGhQajQrTXpJdGFDa3JabjFtZFc1amRHbHZiaUJyS0dFc1ppeG5MR29zY0N4b0xHc3BlMkU5WVNzb1ppWnFmR2NtZm1vcEszQXJhenR5WlhSMWNtNG9ZVHc4YUh4aFBqNCtNekl0YUNrclpuMW1kVzVqZEdsdmJpQnNLR0VzWml4bkxHb3NhQ3hyTEd3cGUyRTlZU3NvWmw1blhtb3BLMmdyYkR0eVpYUjFjbTRvWVR3OGEzeGhQajQrTXpJdGF5a3JabjFtZFc1amRHbHZiaUJ1S0dFc1ppeG5MR29zYUN4ckxHd3BlMkU5WVNzb1oxNG9abngrYWlrcEsyZ3JiRHR5WlhSMWNtNG9ZVHc4YTN4aFBqNCtNekl0YXlrclpuMW1iM0lvZG1GeUlISTlRM0o1Y0hSdlNsTXNjVDF5TG14cFlpeEdQWEV1VjI5eVpFRnljbUY1TEhNOWNTNUlZWE5vWlhJc2NUMXlMbUZzWjI4c1lUMWJYU3gwUFRBN05qUStkRHQwS3lzcFlWdDBYVDAwTWprME9UWTNNamsyS2tVdVlXSnpLRVV1YzJsdUtIUXJNU2twZkRBN2NUMXhMazFFTlQxekxtVjRkR1Z1WkNoN1gyUnZVbVZ6WlhRNlpuVnVZM1JwYjI0b0tYdDBhR2x6TGw5b1lYTm9QVzVsZHlCR0xtbHVhWFFvV3pFM016STFPRFF4T1RNc05EQXlNekl6TXpReE55d3lOVFl5TXpnek1UQXlMREkzTVRjek16ZzNPRjBwZlN4Y2JsOWtiMUJ5YjJObGMzTkNiRzlqYXpwbWRXNWpkR2x2YmlodExHWXBlMlp2Y2loMllYSWdaejB3T3pFMlBtYzdaeXNyS1h0MllYSWdhajFtSzJjc2NEMXRXMnBkTzIxYmFsMDlLSEE4UERoOGNENCtQakkwS1NZeE5qY3hNVGt6Tlh3b2NEdzhNalI4Y0Q0K1BqZ3BKalF5TnpneU5UVXpOakI5ZG1GeUlHYzlkR2hwY3k1ZmFHRnphQzUzYjNKa2N5eHFQVzFiWmlzd1hTeHdQVzFiWmlzeFhTeHhQVzFiWmlzeVhTeHlQVzFiWmlzelhTeHpQVzFiWmlzMFhTeDBQVzFiWmlzMVhTeDFQVzFiWmlzMlhTeDJQVzFiWmlzM1hTeDNQVzFiWmlzNFhTeDRQVzFiWmlzNVhTeDVQVzFiWmlzeE1GMHNlajF0VzJZck1URmRMRUU5YlZ0bUt6RXlYU3hDUFcxYlppc3hNMTBzUXoxdFcyWXJNVFJkTEVROWJWdG1LekUxWFN4aVBXZGJNRjBzWXoxbld6RmRMR1E5WjFzeVhTeGxQV2RiTTEwc1lqMW9LR0lzWXl4a0xHVXNhaXczTEdGYk1GMHBMR1U5YUNobExHSXNZeXhrTEhBc01USXNZVnN4WFNrc1pEMW9LR1FzWlN4aUxHTXNjU3d4Tnl4aFd6SmRLU3hqUFdnb1l5eGtMR1VzWWl4eUxESXlMR0ZiTTEwcExHSTlhQ2hpTEdNc1pDeGxMSE1zTnl4aFd6UmRLU3hsUFdnb1pTeGlMR01zWkN4MExERXlMR0ZiTlYwcExHUTlhQ2hrTEdVc1lpeGpMSFVzTVRjc1lWczJYU2tzWXoxb0tHTXNaQ3hsTEdJc2Rpd3lNaXhoV3pkZEtTeGNibUk5YUNoaUxHTXNaQ3hsTEhjc055eGhXemhkS1N4bFBXZ29aU3hpTEdNc1pDeDRMREV5TEdGYk9WMHBMR1E5YUNoa0xHVXNZaXhqTEhrc01UY3NZVnN4TUYwcExHTTlhQ2hqTEdRc1pTeGlMSG9zTWpJc1lWc3hNVjBwTEdJOWFDaGlMR01zWkN4bExFRXNOeXhoV3pFeVhTa3NaVDFvS0dVc1lpeGpMR1FzUWl3eE1peGhXekV6WFNrc1pEMW9LR1FzWlN4aUxHTXNReXd4Tnl4aFd6RTBYU2tzWXoxb0tHTXNaQ3hsTEdJc1JDd3lNaXhoV3pFMVhTa3NZajFyS0dJc1l5eGtMR1VzY0N3MUxHRmJNVFpkS1N4bFBXc29aU3hpTEdNc1pDeDFMRGtzWVZzeE4xMHBMR1E5YXloa0xHVXNZaXhqTEhvc01UUXNZVnN4T0YwcExHTTlheWhqTEdRc1pTeGlMR29zTWpBc1lWc3hPVjBwTEdJOWF5aGlMR01zWkN4bExIUXNOU3hoV3pJd1hTa3NaVDFyS0dVc1lpeGpMR1FzZVN3NUxHRmJNakZkS1N4a1BXc29aQ3hsTEdJc1l5eEVMREUwTEdGYk1qSmRLU3hqUFdzb1l5eGtMR1VzWWl4ekxESXdMR0ZiTWpOZEtTeGlQV3NvWWl4akxHUXNaU3g0TERVc1lWc3lORjBwTEdVOWF5aGxMR0lzWXl4a0xFTXNPU3hoV3pJMVhTa3NaRDFyS0dRc1pTeGlMR01zY2l3eE5DeGhXekkyWFNrc1l6MXJLR01zWkN4bExHSXNkeXd5TUN4aFd6STNYU2tzWWoxcktHSXNZeXhrTEdVc1FpdzFMR0ZiTWpoZEtTeGxQV3NvWlN4aUxGeHVZeXhrTEhFc09TeGhXekk1WFNrc1pEMXJLR1FzWlN4aUxHTXNkaXd4TkN4aFd6TXdYU2tzWXoxcktHTXNaQ3hsTEdJc1FTd3lNQ3hoV3pNeFhTa3NZajFzS0dJc1l5eGtMR1VzZEN3MExHRmJNekpkS1N4bFBXd29aU3hpTEdNc1pDeDNMREV4TEdGYk16TmRLU3hrUFd3b1pDeGxMR0lzWXl4NkxERTJMR0ZiTXpSZEtTeGpQV3dvWXl4a0xHVXNZaXhETERJekxHRmJNelZkS1N4aVBXd29ZaXhqTEdRc1pTeHdMRFFzWVZzek5sMHBMR1U5YkNobExHSXNZeXhrTEhNc01URXNZVnN6TjEwcExHUTliQ2hrTEdVc1lpeGpMSFlzTVRZc1lWc3pPRjBwTEdNOWJDaGpMR1FzWlN4aUxIa3NNak1zWVZzek9WMHBMR0k5YkNoaUxHTXNaQ3hsTEVJc05DeGhXelF3WFNrc1pUMXNLR1VzWWl4akxHUXNhaXd4TVN4aFd6UXhYU2tzWkQxc0tHUXNaU3hpTEdNc2Npd3hOaXhoV3pReVhTa3NZejFzS0dNc1pDeGxMR0lzZFN3eU15eGhXelF6WFNrc1lqMXNLR0lzWXl4a0xHVXNlQ3cwTEdGYk5EUmRLU3hsUFd3b1pTeGlMR01zWkN4QkxERXhMR0ZiTkRWZEtTeGtQV3dvWkN4bExHSXNZeXhFTERFMkxHRmJORFpkS1N4alBXd29ZeXhrTEdVc1lpeHhMREl6TEdGYk5EZGRLU3hpUFc0b1lpeGpMR1FzWlN4cUxEWXNZVnMwT0YwcExHVTliaWhsTEdJc1l5eGtMSFlzTVRBc1lWczBPVjBwTEdROWJpaGtMR1VzWWl4akxGeHVReXd4TlN4aFd6VXdYU2tzWXoxdUtHTXNaQ3hsTEdJc2RDd3lNU3hoV3pVeFhTa3NZajF1S0dJc1l5eGtMR1VzUVN3MkxHRmJOVEpkS1N4bFBXNG9aU3hpTEdNc1pDeHlMREV3TEdGYk5UTmRLU3hrUFc0b1pDeGxMR0lzWXl4NUxERTFMR0ZiTlRSZEtTeGpQVzRvWXl4a0xHVXNZaXh3TERJeExHRmJOVFZkS1N4aVBXNG9ZaXhqTEdRc1pTeDNMRFlzWVZzMU5sMHBMR1U5YmlobExHSXNZeXhrTEVRc01UQXNZVnMxTjEwcExHUTliaWhrTEdVc1lpeGpMSFVzTVRVc1lWczFPRjBwTEdNOWJpaGpMR1FzWlN4aUxFSXNNakVzWVZzMU9WMHBMR0k5YmloaUxHTXNaQ3hsTEhNc05peGhXell3WFNrc1pUMXVLR1VzWWl4akxHUXNlaXd4TUN4aFd6WXhYU2tzWkQxdUtHUXNaU3hpTEdNc2NTd3hOU3hoV3pZeVhTa3NZejF1S0dNc1pDeGxMR0lzZUN3eU1TeGhXell6WFNrN1oxc3dYVDFuV3pCZEsySjhNRHRuV3pGZFBXZGJNVjByWTN3d08yZGJNbDA5WjFzeVhTdGtmREE3WjFzelhUMW5Xek5kSzJWOE1IMHNYMlJ2Um1sdVlXeHBlbVU2Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDEwYUdsekxsOWtZWFJoTEdZOVlTNTNiM0prY3l4blBUZ3FkR2hwY3k1ZmJrUmhkR0ZDZVhSbGN5eHFQVGdxWVM1emFXZENlWFJsY3p0bVcybytQajQxWFh3OU1USTRQRHd5TkMxcUpUTXlPM1poY2lCb1BVVXVabXh2YjNJb1p5OWNialF5T1RRNU5qY3lPVFlwTzJaYktHb3JOalErUGo0NVBEdzBLU3N4TlYwOUtHZzhQRGg4YUQ0K1BqSTBLU1l4TmpjeE1Ua3pOWHdvYUR3OE1qUjhhRDQrUGpncEpqUXlOemd5TlRVek5qQTdabHNvYWlzMk5ENCtQams4UERRcEt6RTBYVDBvWnp3OE9IeG5QajQrTWpRcEpqRTJOekV4T1RNMWZDaG5QRHd5Tkh4blBqNCtPQ2ttTkRJM09ESTFOVE0yTUR0aExuTnBaMEo1ZEdWelBUUXFLR1l1YkdWdVozUm9LekVwTzNSb2FYTXVYM0J5YjJObGMzTW9LVHRoUFhSb2FYTXVYMmhoYzJnN1pqMWhMbmR2Y21Sek8yWnZjaWhuUFRBN05ENW5PMmNyS3lscVBXWmJaMTBzWmx0blhUMG9hanc4T0h4cVBqNCtNalFwSmpFMk56RXhPVE0xZkNocVBEd3lOSHhxUGo0K09Da21OREkzT0RJMU5UTTJNRHR5WlhSMWNtNGdZWDBzWTJ4dmJtVTZablZ1WTNScGIyNG9LWHQyWVhJZ1lUMXpMbU5zYjI1bExtTmhiR3dvZEdocGN5azdZUzVmYUdGemFEMTBhR2x6TGw5b1lYTm9MbU5zYjI1bEtDazdjbVYwZFhKdUlHRjlmU2s3Y2k1TlJEVTljeTVmWTNKbFlYUmxTR1ZzY0dWeUtIRXBPM0l1U0cxaFkwMUVOVDF6TGw5amNtVmhkR1ZJYldGalNHVnNjR1Z5S0hFcGZTa29UV0YwYUNrN1hHNWNiaThxWEc1RGNubHdkRzlLVXlCMk15NHhMaklnYzJoaE1TMXRhVzR1YW5OY2JtTnZaR1V1WjI5dloyeGxMbU52YlM5d0wyTnllWEIwYnkxcWMxeHVLR01wSURJd01Ea3RNakF4TXlCaWVTQktaV1ptSUUxdmRIUXVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc1amIyUmxMbWR2YjJkc1pTNWpiMjB2Y0M5amNubHdkRzh0YW5NdmQybHJhUzlNYVdObGJuTmxYRzRxTDF4dUtHWjFibU4wYVc5dUtDbDdkbUZ5SUdzOVEzSjVjSFJ2U2xNc1lqMXJMbXhwWWl4dFBXSXVWMjl5WkVGeWNtRjVMR3c5WWk1SVlYTm9aWElzWkQxYlhTeGlQV3N1WVd4bmJ5NVRTRUV4UFd3dVpYaDBaVzVrS0h0ZlpHOVNaWE5sZERwbWRXNWpkR2x2YmlncGUzUm9hWE11WDJoaGMyZzlibVYzSUcwdWFXNXBkQ2hiTVRjek1qVTROREU1TXl3ME1ESXpNak16TkRFM0xESTFOakl6T0RNeE1ESXNNamN4TnpNek9EYzRMRE15T0RVek56YzFNakJkS1gwc1gyUnZVSEp2WTJWemMwSnNiMk5yT21aMWJtTjBhVzl1S0c0c2NDbDdabTl5S0haaGNpQmhQWFJvYVhNdVgyaGhjMmd1ZDI5eVpITXNaVDFoV3pCZExHWTlZVnN4WFN4b1BXRmJNbDBzYWoxaFd6TmRMR0k5WVZzMFhTeGpQVEE3T0RBK1l6dGpLeXNwZTJsbUtERTJQbU1wWkZ0alhUMXVXM0FyWTExOE1EdGxiSE5sZTNaaGNpQm5QV1JiWXkwelhWNWtXMk10T0YxZVpGdGpMVEUwWFY1a1cyTXRNVFpkTzJSYlkxMDlaenc4TVh4blBqNCtNekY5Wnowb1pUdzhOWHhsUGo0K01qY3BLMklyWkZ0alhUdG5QVEl3UG1NL1p5c29LR1ltYUh4K1ppWnFLU3N4TlRFNE5UQXdNalE1S1RvME1ENWpQMmNyS0NobVhtaGVhaWtyTVRnMU9UYzNOVE01TXlrNk5qQStZejluS3lnb1ppWm9mR1ltYW54b0ptb3BMVEU0T1RRd01EYzFPRGdwT21jcktDaG1YbWhlWEc1cUtTMDRPVGswT1RjMU1UUXBPMkk5YWp0cVBXZzdhRDFtUER3ek1IeG1QajQrTWp0bVBXVTdaVDFuZldGYk1GMDlZVnN3WFN0bGZEQTdZVnN4WFQxaFd6RmRLMlo4TUR0aFd6SmRQV0ZiTWwwcmFId3dPMkZiTTEwOVlWc3pYU3RxZkRBN1lWczBYVDFoV3pSZEsySjhNSDBzWDJSdlJtbHVZV3hwZW1VNlpuVnVZM1JwYjI0b0tYdDJZWElnWWoxMGFHbHpMbDlrWVhSaExHUTlZaTUzYjNKa2N5eGhQVGdxZEdocGN5NWZia1JoZEdGQ2VYUmxjeXhsUFRncVlpNXphV2RDZVhSbGN6dGtXMlUrUGo0MVhYdzlNVEk0UER3eU5DMWxKVE15TzJSYktHVXJOalErUGo0NVBEdzBLU3N4TkYwOVRXRjBhQzVtYkc5dmNpaGhMelF5T1RRNU5qY3lPVFlwTzJSYktHVXJOalErUGo0NVBEdzBLU3N4TlYwOVlUdGlMbk5wWjBKNWRHVnpQVFFxWkM1c1pXNW5kR2c3ZEdocGN5NWZjSEp2WTJWemN5Z3BPM0psZEhWeWJpQjBhR2x6TGw5b1lYTm9mU3hqYkc5dVpUcG1kVzVqZEdsdmJpZ3BlM1poY2lCaVBXd3VZMnh2Ym1VdVkyRnNiQ2gwYUdsektUdGlMbDlvWVhOb1BYUm9hWE11WDJoaGMyZ3VZMnh2Ym1Vb0tUdHlaWFIxY200Z1luMTlLVHRyTGxOSVFURTliQzVmWTNKbFlYUmxTR1ZzY0dWeUtHSXBPMnN1U0cxaFkxTklRVEU5YkM1ZlkzSmxZWFJsU0cxaFkwaGxiSEJsY2loaUtYMHBLQ2s3WEc1Y2JpOHFYRzVEY25sd2RHOUtVeUIyTXk0eExqSWdjMmhoTWpVMkxXMXBiaTVxYzF4dVkyOWtaUzVuYjI5bmJHVXVZMjl0TDNBdlkzSjVjSFJ2TFdwelhHNG9ZeWtnTWpBd09TMHlNREV6SUdKNUlFcGxabVlnVFc5MGRDNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYm1OdlpHVXVaMjl2WjJ4bExtTnZiUzl3TDJOeWVYQjBieTFxY3k5M2FXdHBMMHhwWTJWdWMyVmNiaW92WEc0b1puVnVZM1JwYjI0b2F5bDdabTl5S0haaGNpQm5QVU55ZVhCMGIwcFRMR2c5Wnk1c2FXSXNkajFvTGxkdmNtUkJjbkpoZVN4cVBXZ3VTR0Z6YUdWeUxHZzlaeTVoYkdkdkxITTlXMTBzZEQxYlhTeDFQV1oxYm1OMGFXOXVLSEVwZTNKbGRIVnliaUEwTWprME9UWTNNamsyS2loeExTaHhmREFwS1h3d2ZTeHNQVElzWWowd096WTBQbUk3S1h0MllYSWdaRHRoT250a1BXdzdabTl5S0haaGNpQjNQV3N1YzNGeWRDaGtLU3h5UFRJN2NqdzlkenR5S3lzcGFXWW9JU2hrSlhJcEtYdGtQU0V4TzJKeVpXRnJJR0Y5WkQwaE1IMWtKaVlvT0Q1aUppWW9jMXRpWFQxMUtHc3VjRzkzS0d3c01DNDFLU2twTEhSYllsMDlkU2hyTG5CdmR5aHNMREV2TXlrcExHSXJLeWs3YkNzcmZYWmhjaUJ1UFZ0ZExHZzlhQzVUU0VFeU5UWTlhaTVsZUhSbGJtUW9lMTlrYjFKbGMyVjBPbVoxYm1OMGFXOXVLQ2w3ZEdocGN5NWZhR0Z6YUQxdVpYY2dkaTVwYm1sMEtITXVjMnhwWTJVb01Da3BmU3hmWkc5UWNtOWpaWE56UW14dlkyczZablZ1WTNScGIyNG9jU3hvS1h0bWIzSW9kbUZ5SUdFOWRHaHBjeTVmYUdGemFDNTNiM0prY3l4alBXRmJNRjBzWkQxaFd6RmRMR0k5WVZzeVhTeHJQV0ZiTTEwc1pqMWhXelJkTEdjOVlWczFYU3hxUFdGYk5sMHNiRDFoV3pkZExHVTlNRHMyTkQ1bE8yVXJLeWw3YVdZb01UWStaU2x1VzJWZFBWeHVjVnRvSzJWZGZEQTdaV3h6Wlh0MllYSWdiVDF1VzJVdE1UVmRMSEE5Ymx0bExUSmRPMjViWlYwOUtDaHRQRHd5Tlh4dFBqNCtOeWxlS0cwOFBERTBmRzArUGo0eE9DbGViVDQrUGpNcEsyNWJaUzAzWFNzb0tIQThQREUxZkhBK1BqNHhOeWxlS0hBOFBERXpmSEErUGo0eE9TbGVjRDQrUGpFd0tTdHVXMlV0TVRaZGZXMDliQ3NvS0dZOFBESTJmR1krUGo0MktWNG9aanc4TWpGOFpqNCtQakV4S1Y0b1pqdzhOM3htUGo0K01qVXBLU3NvWmlablhuNW1KbW9wSzNSYlpWMHJibHRsWFR0d1BTZ29Zenc4TXpCOFl6NCtQaklwWGloalBEd3hPWHhqUGo0K01UTXBYaWhqUER3eE1IeGpQajQrTWpJcEtTc29ZeVprWG1NbVlsNWtKbUlwTzJ3OWFqdHFQV2M3WnoxbU8yWTlheXR0ZkRBN2F6MWlPMkk5WkR0a1BXTTdZejF0SzNCOE1IMWhXekJkUFdGYk1GMHJZM3d3TzJGYk1WMDlZVnN4WFN0a2ZEQTdZVnN5WFQxaFd6SmRLMko4TUR0aFd6TmRQV0ZiTTEwcmEzd3dPMkZiTkYwOVlWczBYU3RtZkRBN1lWczFYVDFoV3pWZEsyZDhNRHRoV3paZFBXRmJObDByYW53d08yRmJOMTA5WVZzM1hTdHNmREI5TEY5a2IwWnBibUZzYVhwbE9tWjFibU4wYVc5dUtDbDdkbUZ5SUdROWRHaHBjeTVmWkdGMFlTeGlQV1F1ZDI5eVpITXNZVDA0S25Sb2FYTXVYMjVFWVhSaFFubDBaWE1zWXowNEttUXVjMmxuUW5sMFpYTTdYRzVpVzJNK1BqNDFYWHc5TVRJNFBEd3lOQzFqSlRNeU8ySmJLR01yTmpRK1BqNDVQRHcwS1NzeE5GMDlheTVtYkc5dmNpaGhMelF5T1RRNU5qY3lPVFlwTzJKYktHTXJOalErUGo0NVBEdzBLU3N4TlYwOVlUdGtMbk5wWjBKNWRHVnpQVFFxWWk1c1pXNW5kR2c3ZEdocGN5NWZjSEp2WTJWemN5Z3BPM0psZEhWeWJpQjBhR2x6TGw5b1lYTm9mU3hqYkc5dVpUcG1kVzVqZEdsdmJpZ3BlM1poY2lCaVBXb3VZMnh2Ym1VdVkyRnNiQ2gwYUdsektUdGlMbDlvWVhOb1BYUm9hWE11WDJoaGMyZ3VZMnh2Ym1Vb0tUdHlaWFIxY200Z1luMTlLVHRuTGxOSVFUSTFOajFxTGw5amNtVmhkR1ZJWld4d1pYSW9hQ2s3Wnk1SWJXRmpVMGhCTWpVMlBXb3VYMk55WldGMFpVaHRZV05JWld4d1pYSW9hQ2w5S1NoTllYUm9LVHRjYmx4dUx5cGNia055ZVhCMGIwcFRJSFl6TGpFdU1pQnphR0V5TWpRdGJXbHVMbXB6WEc1amIyUmxMbWR2YjJkc1pTNWpiMjB2Y0M5amNubHdkRzh0YW5OY2JpaGpLU0F5TURBNUxUSXdNVE1nWW5rZ1NtVm1aaUJOYjNSMExpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1WTI5a1pTNW5iMjluYkdVdVkyOXRMM0F2WTNKNWNIUnZMV3B6TDNkcGEya3ZUR2xqWlc1elpWeHVLaTljYmlobWRXNWpkR2x2YmlncGUzWmhjaUJpUFVOeWVYQjBiMHBUTEdROVlpNXNhV0l1VjI5eVpFRnljbUY1TEdFOVlpNWhiR2R2TEdNOVlTNVRTRUV5TlRZc1lUMWhMbE5JUVRJeU5EMWpMbVY0ZEdWdVpDaDdYMlJ2VW1WelpYUTZablZ1WTNScGIyNG9LWHQwYUdsekxsOW9ZWE5vUFc1bGR5QmtMbWx1YVhRb1d6TXlNemd6TnpFd016SXNPVEUwTVRVd05qWXpMRGd4TWpjd01qazVPU3cwTVRRME9URXlOamszTERReU9UQTNOelU0TlRjc01UYzFNRFl3TXpBeU5Td3hOamswTURjMk9ETTVMRE15TURRd056VTBNamhkS1gwc1gyUnZSbWx1WVd4cGVtVTZablZ1WTNScGIyNG9LWHQyWVhJZ1lUMWpMbDlrYjBacGJtRnNhWHBsTG1OaGJHd29kR2hwY3lrN1lTNXphV2RDZVhSbGN5MDlORHR5WlhSMWNtNGdZWDE5S1R0aUxsTklRVEl5TkQxakxsOWpjbVZoZEdWSVpXeHdaWElvWVNrN1lpNUliV0ZqVTBoQk1qSTBQV011WDJOeVpXRjBaVWh0WVdOSVpXeHdaWElvWVNsOUtTZ3BPMXh1WEc0dktseHVRM0o1Y0hSdlNsTWdkak11TVM0eUlITm9ZVFV4TWkxdGFXNHVhbk5jYm1OdlpHVXVaMjl2WjJ4bExtTnZiUzl3TDJOeWVYQjBieTFxYzF4dUtHTXBJREl3TURrdE1qQXhNeUJpZVNCS1pXWm1JRTF2ZEhRdUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzVqYjJSbExtZHZiMmRzWlM1amIyMHZjQzlqY25sd2RHOHRhbk12ZDJscmFTOU1hV05sYm5ObFhHNHFMMXh1S0daMWJtTjBhVzl1S0NsN1puVnVZM1JwYjI0Z1lTZ3BlM0psZEhWeWJpQmtMbU55WldGMFpTNWhjSEJzZVNoa0xHRnlaM1Z0Wlc1MGN5bDlabTl5S0haaGNpQnVQVU55ZVhCMGIwcFRMSEk5Ymk1c2FXSXVTR0Z6YUdWeUxHVTliaTU0TmpRc1pEMWxMbGR2Y21Rc1ZEMWxMbGR2Y21SQmNuSmhlU3hsUFc0dVlXeG5ieXhsWVQxYllTZ3hNVEUyTXpVeU5EQTRMRE0yTURrM05qYzBOVGdwTEdFb01UZzVPVFEwTnpRME1TdzJNREk0T1RFM01qVXBMR0VvTXpBME9UTXlNelEzTVN3ek9UWTBORGcwTXprNUtTeGhLRE01TWpFd01EazFOek1zTWpFM016STVOVFUwT0Nrc1lTZzVOakU1T0RjeE5qTXNOREE0TVRZeU9EUTNNaWtzWVNneE5UQTRPVGN3T1RrekxETXdOVE00TXpReU5qVXBMR0VvTWpRMU16WXpOVGMwT0N3eU9UTTNOamN4TlRjNUtTeGhLREk0TnpBM05qTXlNakVzTXpZMk5EWXdPVFUyTUNrc1lTZ3pOakkwTXpneE1EZ3dMREkzTXpRNE9ETXpPVFFwTEdFb016RXdOVGs0TkRBeExERXhOalE1T1RZMU5ESXBMR0VvTmpBM01qSTFNamM0TERFek1qTTJNVEEzTmpRcExHRW9NVFF5TmpnNE1UazROeXd6TlRrd016QTBPVGswS1N4aEtERTVNalV3Tnpnek9EZ3NOREEyT0RFNE1qTTRNeWtzWVNneU1UWXlNRGM0TWpBMkxEazVNVE16TmpFeE15a3NZU2d5TmpFME9EZzRNVEF6TERZek16Z3dNek14Tnlrc1hHNWhLRE15TkRneU1qSTFPREFzTXpRM09UYzNORGcyT0Nrc1lTZ3pPRE0xTXprd05EQXhMREkyTmpZMk1UTTBOVGdwTEdFb05EQXlNakl5TkRjM05DdzVORFEzTVRFeE16a3BMR0VvTWpZME16UTNNRGM0TERJek5ERXlOakkzTnpNcExHRW9OakEwT0RBM05qSTRMREl3TURjNE1EQTVNek1wTEdFb056Y3dNalUxT1RnekxERTBPVFU1T1RBNU1ERXBMR0VvTVRJME9URTFNREV5TWl3eE9EVTJORE14TWpNMUtTeGhLREUxTlRVd09ERTJPVElzTXpFM05USXhPREV6TWlrc1lTZ3hPVGsyTURZME9UZzJMREl4T1RnNU5UQTRNemNwTEdFb01qVTFOREl5TURnNE1pd3pPVGs1TnpFNU16TTVLU3hoS0RJNE1qRTRNelF6TkRrc056WTJOemcwTURFMktTeGhLREk1TlRJNU9UWTRNRGdzTWpVMk5qVTVORGczT1Nrc1lTZ3pNakV3TXpFek5qY3hMRE15TURNek16YzVOVFlwTEdFb016TXpOalUzTVRnNU1Td3hNRE0wTkRVM01ESTJLU3hoS0RNMU9EUTFNamczTVRFc01qUTJOamswT0Rrd01Ta3NZU2d4TVRNNU1qWTVPVE1zTXpjMU9ETXlOak00TXlrc1lTZ3pNemd5TkRFNE9UVXNNVFk0TnpFM09UTTJLU3hoS0RZMk5qTXdOekl3TlN3eE1UZzRNVGM1T1RZMEtTeGhLRGMzTXpVeU9Ua3hNaXd4TlRRMk1EUTFOek0wS1N4aEtERXlPVFEzTlRjek56SXNNVFV5TWpnd05UUTROU2tzWVNneE16azJNVGd5TWpreExGeHVNalkwTXpnek16Z3lNeWtzWVNneE5qazFNVGd6TnpBd0xESXpORE0xTWpjek9UQXBMR0VvTVRrNE5qWTJNVEExTVN3eE1ERTBORGMzTkRnd0tTeGhLREl4Tnpjd01qWXpOVEFzTVRJd05qYzFPVEUwTWlrc1lTZ3lORFUyT1RVMk1ETTNMRE0wTkRBM056WXlOeWtzWVNneU56TXdORGcxT1RJeExERXlPVEE0TmpNME5qQXBMR0VvTWpneU1ETXdNalF4TVN3ek1UVTRORFUwTWpjektTeGhLRE15TlRrM016QTRNREFzTXpVd05UazFNalkxTnlrc1lTZ3pNelExTnpZME56Y3hMREV3TmpJeE56QXdPQ2tzWVNnek5URTJNRFkxT0RFM0xETTJNRFl3TURnek5EUXBMR0VvTXpZd01ETTFNamd3TkN3eE5ETXlOekkxTnpjMktTeGhLRFF3T1RRMU56RTVNRGtzTVRRMk56QXpNVFU1TkNrc1lTZ3lOelUwTWpNek5EUXNPRFV4TVRZNU56SXdLU3hoS0RRek1ESXlOemN6TkN3ek1UQXdPREl6TnpVeUtTeGhLRFV3TmprME9EWXhOaXd4TXpZek1qVTRNVGsxS1N4aEtEWTFPVEEyTURVMU5pd3pOelV3TmpnMU5Ua3pLU3hoS0RnNE16azVOemczTnl3ek56ZzFNRFV3TWpnd0tTeGhLRGsxT0RFek9UVTNNU3d6TXpFNE16QTNOREkzS1N4aEtERXpNakk0TWpJeU1UZ3NNemd4TWpjeU16UXdNeWtzWVNneE5UTTNNREF5TURZekxESXdNRE13TXpRNU9UVXBMR0VvTVRjME56ZzNNemMzT1N3ek5qQXlNRE0yT0RrNUtTeGNibUVvTVRrMU5UVTJNakl5TWl3eE5UYzFPVGt3TURFeUtTeGhLREl3TWpReE1EUTRNVFVzTVRFeU5UVTVNamt5T0Nrc1lTZ3lNakkzTnpNd05EVXlMREkzTVRZNU1EUXpNRFlwTEdFb01qTTJNVGcxTWpReU5DdzBOREkzTnpZd05EUXBMR0VvTWpReU9EUXpOalEzTkN3MU9UTTJPVGd6TkRRcExHRW9NamMxTmpjek5ERTROeXd6TnpNek1URXdNalE1S1N4aEtETXlNRFF3TXpFME56a3NNams1T1RNMU1UVTNNeWtzWVNnek16STVNekkxTWprNExETTRNVFU1TWpBME1qY3BMR0VvTXpNNU1UVTJPVFl4TkN3ek9USTRNemd6T1RBd0tTeGhLRE0xTVRVeU5qY3lOekVzTlRZMk1qZ3dOekV4S1N4aEtETTVOREF4T0RjMk1EWXNNelExTkRBMk9UVXpOQ2tzWVNnME1URTROak13TWpjeExEUXdNREF5TXprNU9USXBMR0VvTVRFMk5ERTRORGMwTERFNU1UUXhNemcxTlRRcExHRW9NVGMwTWpreU5ESXhMREkzTXpFd05UVXlOekFwTEdFb01qZzVNemd3TXpVMkxETXlNRE01T1RNd01EWXBMR0VvTkRZd016a3pNalk1TERNeU1EWXlNRE14TlNrc1lTZzJPRFUwTnpFM016TXNOVGczTkRrMk9ETTJLU3hoS0RnMU1qRTBNamszTVN3eE1EZzJOemt5T0RVeEtTeGhLREV3TVRjd016WXlPVGdzTXpZMU5UUXpNVEF3S1N4aEtERXhNall3TURBMU9EQXNNall4T0RJNU56WTNOaWtzWVNneE1qZzRNRE16TkRjd0xGeHVNelF3T1RnMU5URTFPQ2tzWVNneE5UQXhOVEExT1RRNExEUXlNelExTURrNE5qWXBMR0VvTVRZd056RTJOemt4TlN3NU9EY3hOamMwTmpncExHRW9NVGd4TmpRd01qTXhOaXd4TWpRMk1UZzVOVGt4S1Ywc2RqMWJYU3gzUFRBN09EQStkenQzS3lzcGRsdDNYVDFoS0NrN1pUMWxMbE5JUVRVeE1qMXlMbVY0ZEdWdVpDaDdYMlJ2VW1WelpYUTZablZ1WTNScGIyNG9LWHQwYUdsekxsOW9ZWE5vUFc1bGR5QlVMbWx1YVhRb1cyNWxkeUJrTG1sdWFYUW9NVGMzT1RBek16Y3dNeXcwTURnNU1qTTFOekl3S1N4dVpYY2daQzVwYm1sMEtETXhORFF4TXpReU56Y3NNakl5TnpnM016VTVOU2tzYm1WM0lHUXVhVzVwZENneE1ERXpPVEEwTWpReUxEUXlOekV4TnpVM01qTXBMRzVsZHlCa0xtbHVhWFFvTWpjM016UTRNRGMyTWl3eE5UazFOelV3TVRJNUtTeHVaWGNnWkM1cGJtbDBLREV6TlRrNE9UTXhNVGtzTWpreE56VTJOVEV6Tnlrc2JtVjNJR1F1YVc1cGRDZ3lOakF3T0RJeU9USTBMRGN5TlRVeE1URTVPU2tzYm1WM0lHUXVhVzVwZENnMU1qZzNNelEyTXpVc05ESXhOVE00T1RVME55a3NibVYzSUdRdWFXNXBkQ2d4TlRReE5EVTVNakkxTERNeU56QXpNekl3T1NsZEtYMHNYMlJ2VUhKdlkyVnpjMEpzYjJOck9tWjFibU4wYVc5dUtHRXNaQ2w3Wm05eUtIWmhjaUJtUFhSb2FYTXVYMmhoYzJndWQyOXlaSE1zWEc1R1BXWmJNRjBzWlQxbVd6RmRMRzQ5WmxzeVhTeHlQV1piTTEwc1J6MW1XelJkTEVnOVpsczFYU3hKUFdaYk5sMHNaajFtV3pkZExIYzlSaTVvYVdkb0xFbzlSaTVzYjNjc1dEMWxMbWhwWjJnc1N6MWxMbXh2ZHl4WlBXNHVhR2xuYUN4TVBXNHViRzkzTEZvOWNpNW9hV2RvTEUwOWNpNXNiM2NzSkQxSExtaHBaMmdzVGoxSExteHZkeXhoWVQxSUxtaHBaMmdzVHoxSUxteHZkeXhpWVQxSkxtaHBaMmdzVUQxSkxteHZkeXhqWVQxbUxtaHBaMmdzVVQxbUxteHZkeXhyUFhjc1p6MUtMSG85V0N4NFBVc3NRVDFaTEhrOVRDeFZQVm9zUWoxTkxHdzlKQ3hvUFU0c1VqMWhZU3hEUFU4c1V6MWlZU3hFUFZBc1ZqMWpZU3hGUFZFc2JUMHdPemd3UG0wN2JTc3JLWHQyWVhJZ2N6MTJXMjFkTzJsbUtERTJQbTBwZG1GeUlHbzljeTVvYVdkb1BXRmJaQ3N5S20xZGZEQXNZajF6TG14dmR6MWhXMlFyTWlwdEt6RmRmREE3Wld4elpYdDJZWElnYWoxMlcyMHRNVFZkTEdJOWFpNW9hV2RvTEhBOWFpNXNiM2NzYWowb1lqNCtQakY4Y0R3OE16RXBYaWhpUGo0K09IeHdQRHd5TkNsZVlqNCtQamNzY0Qwb2NENCtQakY4WWp3OE16RXBYaWh3UGo0K09IeGlQRHd5TkNsZUtIQStQajQzZkdJOFBESTFLU3gxUFhaYmJTMHlYU3hpUFhVdWFHbG5hQ3hqUFhVdWJHOTNMSFU5S0dJK1BqNHhPWHhqUER3eE15bGVLR0k4UEZ4dU0zeGpQajQrTWprcFhtSStQajQyTEdNOUtHTStQajR4T1h4aVBEd3hNeWxlS0dNOFBETjhZajQrUGpJNUtWNG9ZejQrUGpaOFlqdzhNallwTEdJOWRsdHRMVGRkTEZjOVlpNW9hV2RvTEhROWRsdHRMVEUyWFN4eFBYUXVhR2xuYUN4MFBYUXViRzkzTEdJOWNDdGlMbXh2ZHl4cVBXb3JWeXNvWWo0K1BqQThjRDQrUGpBL01Ub3dLU3hpUFdJcll5eHFQV29yZFNzb1lqNCtQakE4WXo0K1BqQS9NVG93S1N4aVBXSXJkQ3hxUFdvcmNTc29ZajQrUGpBOGRENCtQakEvTVRvd0tUdHpMbWhwWjJnOWFqdHpMbXh2ZHoxaWZYWmhjaUJYUFd3bVVsNStiQ1pUTEhROWFDWkRYbjVvSmtRc2N6MXJKbnBlYXlaQlhub21RU3hVUFdjbWVGNW5KbmxlZUNaNUxIQTlLR3MrUGo0eU9IeG5QRHcwS1Y0b2F6dzhNekI4Wno0K1BqSXBYaWhyUER3eU5YeG5QajQrTnlrc2RUMG9aejQrUGpJNGZHczhQRFFwWGloblBEd3pNSHhyUGo0K01pbGVLR2M4UERJMWZHcytQajQzS1N4alBXVmhXMjFkTEdaaFBXTXVhR2xuYUN4a1lUMWpMbXh2ZHl4alBVVXJLQ2hvUGo0K01UUjhiRHc4TVRncFhpaG9QajQrTVRoOGJEdzhNVFFwWGlob1BEd3lNM3hzUGo0K09Ta3BMSEU5Vmlzb0tHdytQajR4Tkh4b1BEd3hPQ2xlS0d3K1BqNHhPSHhvUER3eE5DbGVLR3c4UERJemZHZytQajQ1S1NrcktHTStQajR3UEVVK1BqNHdQekU2WEc0d0tTeGpQV01yZEN4eFBYRXJWeXNvWXo0K1BqQThkRDQrUGpBL01Ub3dLU3hqUFdNclpHRXNjVDF4SzJaaEt5aGpQajQrTUR4a1lUNCtQakEvTVRvd0tTeGpQV01yWWl4eFBYRXJhaXNvWXo0K1BqQThZajQrUGpBL01Ub3dLU3hpUFhVclZDeHpQWEFyY3lzb1lqNCtQakE4ZFQ0K1BqQS9NVG93S1N4V1BWTXNSVDFFTEZNOVVpeEVQVU1zVWoxc0xFTTlhQ3hvUFVJclkzd3dMR3c5VlN0eEt5aG9QajQrTUR4Q1BqNCtNRDh4T2pBcGZEQXNWVDFCTEVJOWVTeEJQWG9zZVQxNExIbzlheXg0UFdjc1p6MWpLMko4TUN4clBYRXJjeXNvWno0K1BqQThZejQrUGpBL01Ub3dLWHd3ZlVvOVJpNXNiM2M5U2l0bk8wWXVhR2xuYUQxM0syc3JLRW8rUGo0d1BHYytQajR3UHpFNk1DazdTejFsTG14dmR6MUxLM2c3WlM1b2FXZG9QVmdyZWlzb1N6NCtQakE4ZUQ0K1BqQS9NVG93S1R0TVBXNHViRzkzUFV3cmVUdHVMbWhwWjJnOVdTdEJLeWhNUGo0K01EeDVQajQrTUQ4eE9qQXBPMDA5Y2k1c2IzYzlUU3RDTzNJdWFHbG5hRDFhSzFVcktFMCtQajR3UEVJK1BqNHdQekU2TUNrN1RqMUhMbXh2ZHoxT0syZzdSeTVvYVdkb1BTUXJiQ3NvVGo0K1BqQThhRDQrUGpBL01Ub3dLVHRQUFVndWJHOTNQVThyUXp0SUxtaHBaMmc5WVdFclVpc29UejQrUGpBOFF6NCtQakEvTVRvd0tUdFFQVWt1Ykc5M1BWQXJSRHRjYmtrdWFHbG5hRDFpWVN0VEt5aFFQajQrTUR4RVBqNCtNRDh4T2pBcE8xRTlaaTVzYjNjOVVTdEZPMll1YUdsbmFEMWpZU3RXS3loUlBqNCtNRHhGUGo0K01EOHhPakFwZlN4ZlpHOUdhVzVoYkdsNlpUcG1kVzVqZEdsdmJpZ3BlM1poY2lCaFBYUm9hWE11WDJSaGRHRXNaRDFoTG5kdmNtUnpMR1k5T0NwMGFHbHpMbDl1UkdGMFlVSjVkR1Z6TEdVOU9DcGhMbk5wWjBKNWRHVnpPMlJiWlQ0K1BqVmRmRDB4TWpnOFBESTBMV1VsTXpJN1pGc29aU3N4TWpnK1BqNHhNRHc4TlNrck16QmRQVTFoZEdndVpteHZiM0lvWmk4ME1qazBPVFkzTWprMktUdGtXeWhsS3pFeU9ENCtQakV3UER3MUtTc3pNVjA5Wmp0aExuTnBaMEo1ZEdWelBUUXFaQzVzWlc1bmRHZzdkR2hwY3k1ZmNISnZZMlZ6Y3lncE8zSmxkSFZ5YmlCMGFHbHpMbDlvWVhOb0xuUnZXRE15S0NsOUxHTnNiMjVsT21aMWJtTjBhVzl1S0NsN2RtRnlJR0U5Y2k1amJHOXVaUzVqWVd4c0tIUm9hWE1wTzJFdVgyaGhjMmc5ZEdocGN5NWZhR0Z6YUM1amJHOXVaU2dwTzNKbGRIVnliaUJoZlN4aWJHOWphMU5wZW1VNk16SjlLVHR1TGxOSVFUVXhNajF5TGw5amNtVmhkR1ZJWld4d1pYSW9aU2s3Ymk1SWJXRmpVMGhCTlRFeVBYSXVYMk55WldGMFpVaHRZV05JWld4d1pYSW9aU2w5S1NncE8xeHVYRzR2S2x4dVEzSjVjSFJ2U2xNZ2RqTXVNUzR5SUhOb1lUTTROQzF0YVc0dWFuTmNibU52WkdVdVoyOXZaMnhsTG1OdmJTOXdMMk55ZVhCMGJ5MXFjMXh1S0dNcElESXdNRGt0TWpBeE15QmllU0JLWldabUlFMXZkSFF1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNWpiMlJsTG1kdmIyZHNaUzVqYjIwdmNDOWpjbmx3ZEc4dGFuTXZkMmxyYVM5TWFXTmxibk5sWEc0cUwxeHVLR1oxYm1OMGFXOXVLQ2w3ZG1GeUlHTTlRM0o1Y0hSdlNsTXNZVDFqTG5nMk5DeGlQV0V1VjI5eVpDeGxQV0V1VjI5eVpFRnljbUY1TEdFOVl5NWhiR2R2TEdROVlTNVRTRUUxTVRJc1lUMWhMbE5JUVRNNE5EMWtMbVY0ZEdWdVpDaDdYMlJ2VW1WelpYUTZablZ1WTNScGIyNG9LWHQwYUdsekxsOW9ZWE5vUFc1bGR5QmxMbWx1YVhRb1cyNWxkeUJpTG1sdWFYUW9NelF4T0RBM01ETTJOU3d6TWpNNE16Y3hNRE15S1N4dVpYY2dZaTVwYm1sMEtERTJOVFF5TnpBeU5UQXNPVEUwTVRVd05qWXpLU3h1WlhjZ1lpNXBibWwwS0RJME16ZzFNamt6TnpBc09ERXlOekF5T1RrNUtTeHVaWGNnWWk1cGJtbDBLRE0xTlRRMk1qTTJNQ3cwTVRRME9URXlOamszS1N4dVpYY2dZaTVwYm1sMEtERTNNekUwTURVME1UVXNOREk1TURjM05UZzFOeWtzYm1WM0lHSXVhVzVwZENneU16azBNVGd3TWpNeExERTNOVEEyTURNd01qVXBMRzVsZHlCaUxtbHVhWFFvTXpZM05UQXdPRFV5TlN3eE5qazBNRGMyT0RNNUtTeHVaWGNnWWk1cGJtbDBLREV5TURNd05qSTRNVE1zTXpJd05EQTNOVFF5T0NsZEtYMHNYMlJ2Um1sdVlXeHBlbVU2Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDFrTGw5a2IwWnBibUZzYVhwbExtTmhiR3dvZEdocGN5azdZUzV6YVdkQ2VYUmxjeTA5TVRZN2NtVjBkWEp1SUdGOWZTazdZeTVUU0VFek9EUTlYRzVrTGw5amNtVmhkR1ZJWld4d1pYSW9ZU2s3WXk1SWJXRmpVMGhCTXpnMFBXUXVYMk55WldGMFpVaHRZV05JWld4d1pYSW9ZU2w5S1NncE8xeHVYRzR2S2x4dVEzSjVjSFJ2U2xNZ2RqTXVNUzR5SUhKcGNHVnRaREUyTUMxdGFXNHVhbk5jYm1OdlpHVXVaMjl2WjJ4bExtTnZiUzl3TDJOeWVYQjBieTFxYzF4dUtHTXBJREl3TURrdE1qQXhNeUJpZVNCS1pXWm1JRTF2ZEhRdUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzVqYjJSbExtZHZiMmRzWlM1amIyMHZjQzlqY25sd2RHOHRhbk12ZDJscmFTOU1hV05sYm5ObFhHNHFMMXh1THlwY2JseHVLR01wSURJd01USWdZbmtnUTJWa2NtbGpJRTFsYzI1cGJDNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmx4dVVtVmthWE4wY21saWRYUnBiMjRnWVc1a0lIVnpaU0JwYmlCemIzVnlZMlVnWVc1a0lHSnBibUZ5ZVNCbWIzSnRjeXdnZDJsMGFDQnZjaUIzYVhSb2IzVjBJRzF2WkdsbWFXTmhkR2x2Yml3Z1lYSmxJSEJsY20xcGRIUmxaQ0J3Y205MmFXUmxaQ0IwYUdGMElIUm9aU0JtYjJ4c2IzZHBibWNnWTI5dVpHbDBhVzl1Y3lCaGNtVWdiV1YwT2x4dVhHNGdJQ0FnTFNCU1pXUnBjM1J5YVdKMWRHbHZibk1nYjJZZ2MyOTFjbU5sSUdOdlpHVWdiWFZ6ZENCeVpYUmhhVzRnZEdobElHRmliM1psSUdOdmNIbHlhV2RvZENCdWIzUnBZMlVzSUhSb2FYTWdiR2x6ZENCdlppQmpiMjVrYVhScGIyNXpJR0Z1WkNCMGFHVWdabTlzYkc5M2FXNW5JR1JwYzJOc1lXbHRaWEl1WEc0Z0lDQWdMU0JTWldScGMzUnlhV0oxZEdsdmJuTWdhVzRnWW1sdVlYSjVJR1p2Y20wZ2JYVnpkQ0J5WlhCeWIyUjFZMlVnZEdobElHRmliM1psSUdOdmNIbHlhV2RvZENCdWIzUnBZMlVzSUhSb2FYTWdiR2x6ZENCdlppQmpiMjVrYVhScGIyNXpJR0Z1WkNCMGFHVWdabTlzYkc5M2FXNW5JR1JwYzJOc1lXbHRaWElnYVc0Z2RHaGxJR1J2WTNWdFpXNTBZWFJwYjI0Z1lXNWtMMjl5SUc5MGFHVnlJRzFoZEdWeWFXRnNjeUJ3Y205MmFXUmxaQ0IzYVhSb0lIUm9aU0JrYVhOMGNtbGlkWFJwYjI0dVhHNWNibFJJU1ZNZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdRbGtnVkVoRklFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFRk9SQ0JEVDA1VVVrbENWVlJQVWxNZ1hDSkJVeUJKVTF3aUlFRk9SQ0JCVGxrZ1JWaFFVa1ZUVXlCUFVpQkpUVkJNU1VWRUlGZEJVbEpCVGxSSlJWTXNJRWxPUTB4VlJFbE9SeXdnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQTENCVVNFVWdTVTFRVEVsRlJDQlhRVkpTUVU1VVNVVlRJRTlHSUUxRlVrTklRVTVVUVVKSlRFbFVXU0JCVGtRZ1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVZKRklFUkpVME5NUVVsTlJVUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlNCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTSUU5U0lFTlBUbFJTU1VKVlZFOVNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JFU1ZKRlExUXNJRWxPUkVsU1JVTlVMQ0JKVGtOSlJFVk9WRUZNTENCVFVFVkRTVUZNTENCRldFVk5VRXhCVWxrc0lFOVNJRU5QVGxORlVWVkZUbFJKUVV3Z1JFRk5RVWRGVXlBb1NVNURURlZFU1U1SExDQkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOHNJRkJTVDBOVlVrVk5SVTVVSUU5R0lGTlZRbE5VU1ZSVlZFVWdSMDlQUkZNZ1QxSWdVMFZTVmtsRFJWTTdJRXhQVTFNZ1QwWWdWVk5GTENCRVFWUkJMQ0JQVWlCUVVrOUdTVlJUT3lCUFVpQkNWVk5KVGtWVFV5QkpUbFJGVWxKVlVGUkpUMDRwSUVoUFYwVldSVklnUTBGVlUwVkVJRUZPUkNCUFRpQkJUbGtnVkVoRlQxSlpJRTlHSUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkRUMDVVVWtGRFZDd2dVMVJTU1VOVUlFeEpRVUpKVEVsVVdTd2dUMUlnVkU5U1ZDQW9TVTVEVEZWRVNVNUhJRTVGUjB4SlIwVk9RMFVnVDFJZ1QxUklSVkpYU1ZORktTQkJVa2xUU1U1SElFbE9JRUZPV1NCWFFWa2dUMVZVSUU5R0lGUklSU0JWVTBVZ1QwWWdWRWhKVXlCVFQwWlVWMEZTUlN3Z1JWWkZUaUJKUmlCQlJGWkpVMFZFSUU5R0lGUklSU0JRVDFOVFNVSkpURWxVV1NCUFJpQlRWVU5JSUVSQlRVRkhSUzVjYmlvdlhHNG9ablZ1WTNScGIyNG9LWHQyWVhJZ2NUMURjbmx3ZEc5S1V5eGtQWEV1YkdsaUxHNDlaQzVYYjNKa1FYSnlZWGtzY0Qxa0xraGhjMmhsY2l4a1BYRXVZV3huYnl4NFBXNHVZM0psWVhSbEtGc3dMREVzTWl3ekxEUXNOU3cyTERjc09DdzVMREV3TERFeExERXlMREV6TERFMExERTFMRGNzTkN3eE15d3hMREV3TERZc01UVXNNeXd4TWl3d0xEa3NOU3d5TERFMExERXhMRGdzTXl3eE1Dd3hOQ3cwTERrc01UVXNPQ3d4TERJc055d3dMRFlzTVRNc01URXNOU3d4TWl3eExEa3NNVEVzTVRBc01DdzRMREV5TERRc01UTXNNeXczTERFMUxERTBMRFVzTml3eUxEUXNNQ3cxTERrc055d3hNaXd5TERFd0xERTBMREVzTXl3NExERXhMRFlzTVRVc01UTmRLU3g1UFc0dVkzSmxZWFJsS0ZzMUxERTBMRGNzTUN3NUxESXNNVEVzTkN3eE15dzJMREUxTERnc01Td3hNQ3d6TERFeUxEWXNNVEVzTXl3M0xEQXNNVE1zTlN3eE1Dd3hOQ3d4TlN3NExERXlMRFFzT1N3eExESXNNVFVzTlN3eExETXNOeXd4TkN3MkxEa3NNVEVzT0N3eE1pd3lMREV3TERBc05Dd3hNeXc0TERZc05Dd3hMRE1zTVRFc01UVXNNQ3cxTERFeUxESXNNVE1zT1N3M0xERXdMREUwTERFeUxERTFMREV3TERRc01TdzFMRGdzTnl3MkxESXNNVE1zTVRRc01Dd3pMRGtzTVRGZEtTeDZQVzR1WTNKbFlYUmxLRnN4TVN3eE5Dd3hOU3d4TWl4Y2JqVXNPQ3czTERrc01URXNNVE1zTVRRc01UVXNOaXczTERrc09DdzNMRFlzT0N3eE15d3hNU3c1TERjc01UVXNOeXd4TWl3eE5TdzVMREV4TERjc01UTXNNVElzTVRFc01UTXNOaXczTERFMExEa3NNVE1zTVRVc01UUXNPQ3d4TXl3MkxEVXNNVElzTnl3MUxERXhMREV5TERFMExERTFMREUwTERFMUxEa3NPQ3c1TERFMExEVXNOaXc0TERZc05Td3hNaXc1TERFMUxEVXNNVEVzTml3NExERXpMREV5TERVc01USXNNVE1zTVRRc01URXNPQ3cxTERaZEtTeEJQVzR1WTNKbFlYUmxLRnM0TERrc09Td3hNU3d4TXl3eE5Td3hOU3cxTERjc055dzRMREV4TERFMExERTBMREV5TERZc09Td3hNeXd4TlN3M0xERXlMRGdzT1N3eE1TdzNMRGNzTVRJc055dzJMREUxTERFekxERXhMRGtzTnl3eE5Td3hNU3c0TERZc05pd3hOQ3d4TWl3eE15dzFMREUwTERFekxERXpMRGNzTlN3eE5TdzFMRGdzTVRFc01UUXNNVFFzTml3eE5DdzJMRGtzTVRJc09Td3hNaXcxTERFMUxEZ3NPQ3cxTERFeUxEa3NNVElzTlN3eE5DdzJMRGdzTVRNc05pdzFMREUxTERFekxERXhMREV4WFNrc1FqMXVMbU55WldGMFpTaGJNQ3d4TlRFNE5UQXdNalE1TERFNE5UazNOelV6T1RNc01qUXdNRGsxT1Rjd09Dd3lPRFF3T0RVek9ETTRYU2tzUXoxdUxtTnlaV0YwWlNoYk1UTTFNamd5T1RreU5pd3hOVFE0TmpBek5qZzBMREU0TXpZd056STJPVEVzWEc0eU1EVXpPVGswTWpFM0xEQmRLU3hrUFdRdVVrbFFSVTFFTVRZd1BYQXVaWGgwWlc1a0tIdGZaRzlTWlhObGREcG1kVzVqZEdsdmJpZ3BlM1JvYVhNdVgyaGhjMmc5Ymk1amNtVmhkR1VvV3pFM016STFPRFF4T1RNc05EQXlNekl6TXpReE55d3lOVFl5TXpnek1UQXlMREkzTVRjek16ZzNPQ3d6TWpnMU16YzNOVEl3WFNsOUxGOWtiMUJ5YjJObGMzTkNiRzlqYXpwbWRXNWpkR2x2YmlobExIWXBlMlp2Y2loMllYSWdZajB3T3pFMlBtSTdZaXNyS1h0MllYSWdZejEySzJJc1pqMWxXMk5kTzJWYlkxMDlLR1k4UERoOFpqNCtQakkwS1NZeE5qY3hNVGt6Tlh3b1pqdzhNalI4Wmo0K1BqZ3BKalF5TnpneU5UVXpOakI5ZG1GeUlHTTlkR2hwY3k1ZmFHRnphQzUzYjNKa2N5eG1QVUl1ZDI5eVpITXNaRDFETG5kdmNtUnpMRzQ5ZUM1M2IzSmtjeXh4UFhrdWQyOXlaSE1zY0QxNkxuZHZjbVJ6TEhjOVFTNTNiM0prY3l4MExHY3NhQ3hxTEhJc2RTeHJMR3dzYlN4ek8zVTlkRDFqV3pCZE8yczlaejFqV3pGZE8ydzlhRDFqV3pKZE8yMDlhajFqV3pOZE8zTTljajFqV3pSZE8yWnZjaWgyWVhJZ1lTeGlQVEE3T0RBK1lqdGlLejB4S1dFOWRDdGxXM1lyYmx0aVhWMThNQ3hoUFRFMlBtSS9ZU3NvS0dkZWFGNXFLU3RtV3pCZEtUb3pNajVpUDJFcktDaG5KbWg4Zm1jbWFpa3JabHN4WFNrNk5EZytZajljYm1FcktDZ29aM3grYUNsZWFpa3JabHN5WFNrNk5qUStZajloS3lnb1p5WnFmR2dtZm1vcEsyWmJNMTBwT21FcktDaG5YaWhvZkg1cUtTa3JabHMwWFNrc1lYdzlNQ3hoUFdFOFBIQmJZbDE4WVQ0K1BqTXlMWEJiWWwwc1lUMWhLM0o4TUN4MFBYSXNjajFxTEdvOWFEdzhNVEI4YUQ0K1BqSXlMR2c5Wnl4blBXRXNZVDExSzJWYmRpdHhXMkpkWFh3d0xHRTlNVFkrWWo5aEt5Z29hMTRvYkh4K2JTa3BLMlJiTUYwcE9qTXlQbUkvWVNzb0tHc21iWHhzSm41dEtTdGtXekZkS1RvME9ENWlQMkVyS0Nnb2EzeCtiQ2xlYlNrclpGc3lYU2s2TmpRK1lqOWhLeWdvYXlac2ZINXJKbTBwSzJSYk0xMHBPbUVyS0NoclhteGViU2tyWkZzMFhTa3NZWHc5TUN4aFBXRThQSGRiWWwxOFlUNCtQak15TFhkYllsMHNZVDFoSzNOOE1DeDFQWE1zY3oxdExHMDliRHc4TVRCOGJENCtQakl5TEd3OWF5eHJQV0U3WVQxald6RmRLMmdyYlh3d08yTmJNVjA5WTFzeVhTdHFLM044TUR0ald6SmRQV05iTTEwcmNpdDFmREE3WTFzelhUMWpXelJkSzNRcmEzd3dPMk5iTkYwOVkxc3dYU3RuSzJ4OE1EdGpXekJkUFdGOUxGOWtiMFpwYm1Gc2FYcGxPbVoxYm1OMGFXOXVLQ2w3ZG1GeUlHVTlkR2hwY3k1ZlpHRjBZU3hrUFdVdWQyOXlaSE1zWWowNEtuUm9hWE11WDI1RVlYUmhRbmwwWlhNc1l6MDRLbVV1YzJsblFubDBaWE03WEc1a1cyTStQajQxWFh3OU1USTRQRHd5TkMxakpUTXlPMlJiS0dNck5qUStQajQ1UER3MEtTc3hORjA5S0dJOFBEaDhZajQrUGpJMEtTWXhOamN4TVRrek5Yd29Zanc4TWpSOFlqNCtQamdwSmpReU56Z3lOVFV6TmpBN1pTNXphV2RDZVhSbGN6MDBLaWhrTG14bGJtZDBhQ3N4S1R0MGFHbHpMbDl3Y205alpYTnpLQ2s3WlQxMGFHbHpMbDlvWVhOb08yUTlaUzUzYjNKa2N6dG1iM0lvWWowd096VStZanRpS3lzcFl6MWtXMkpkTEdSYllsMDlLR004UERoOFl6NCtQakkwS1NZeE5qY3hNVGt6Tlh3b1l6dzhNalI4WXo0K1BqZ3BKalF5TnpneU5UVXpOakE3Y21WMGRYSnVJR1Y5TEdOc2IyNWxPbVoxYm1OMGFXOXVLQ2w3ZG1GeUlHUTljQzVqYkc5dVpTNWpZV3hzS0hSb2FYTXBPMlF1WDJoaGMyZzlkR2hwY3k1ZmFHRnphQzVqYkc5dVpTZ3BPM0psZEhWeWJpQmtmWDBwTzNFdVVrbFFSVTFFTVRZd1BYQXVYMk55WldGMFpVaGxiSEJsY2loa0tUdHhMa2h0WVdOU1NWQkZUVVF4TmpBOWNDNWZZM0psWVhSbFNHMWhZMGhsYkhCbGNpaGtLWDBwS0UxaGRHZ3BPMXh1WEc0dktseHVRM0o1Y0hSdlNsTWdkak11TVM0eUlHaHRZV010YldsdUxtcHpYRzVqYjJSbExtZHZiMmRzWlM1amIyMHZjQzlqY25sd2RHOHRhbk5jYmloaktTQXlNREE1TFRJd01UTWdZbmtnU21WbVppQk5iM1IwTGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVZMjlrWlM1bmIyOW5iR1V1WTI5dEwzQXZZM0o1Y0hSdkxXcHpMM2RwYTJrdlRHbGpaVzV6WlZ4dUtpOWNiaWhtZFc1amRHbHZiaWdwZTNaaGNpQmpQVU55ZVhCMGIwcFRMR3M5WXk1bGJtTXVWWFJtT0R0akxtRnNaMjh1U0UxQlF6MWpMbXhwWWk1Q1lYTmxMbVY0ZEdWdVpDaDdhVzVwZERwbWRXNWpkR2x2YmloaExHSXBlMkU5ZEdocGN5NWZhR0Z6YUdWeVBXNWxkeUJoTG1sdWFYUTdYQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JR0ltSmloaVBXc3VjR0Z5YzJVb1lpa3BPM1poY2lCalBXRXVZbXh2WTJ0VGFYcGxMR1U5TkNwak8ySXVjMmxuUW5sMFpYTStaU1ltS0dJOVlTNW1hVzVoYkdsNlpTaGlLU2s3WWk1amJHRnRjQ2dwTzJadmNpaDJZWElnWmoxMGFHbHpMbDl2UzJWNVBXSXVZMnh2Ym1Vb0tTeG5QWFJvYVhNdVgybExaWGs5WWk1amJHOXVaU2dwTEdnOVppNTNiM0prY3l4cVBXY3VkMjl5WkhNc1pEMHdPMlE4WXp0a0t5c3BhRnRrWFY0OU1UVTBPVFUxTmpneU9DeHFXMlJkWGowNU1EazFNakkwT0RZN1ppNXphV2RDZVhSbGN6MW5Mbk5wWjBKNWRHVnpQV1U3ZEdocGN5NXlaWE5sZENncGZTeHlaWE5sZERwbWRXNWpkR2x2YmlncGUzWmhjaUJoUFhSb2FYTXVYMmhoYzJobGNqdGhMbkpsYzJWMEtDazdZUzUxY0dSaGRHVW9kR2hwY3k1ZmFVdGxlU2w5TEhWd1pHRjBaVHBtZFc1amRHbHZiaWhoS1h0MGFHbHpMbDlvWVhOb1pYSXVkWEJrWVhSbEtHRXBPM0psZEhWeWJpQjBhR2x6ZlN4bWFXNWhiR2w2WlRwbWRXNWpkR2x2YmloaEtYdDJZWElnWWoxY2JuUm9hWE11WDJoaGMyaGxjanRoUFdJdVptbHVZV3hwZW1Vb1lTazdZaTV5WlhObGRDZ3BPM0psZEhWeWJpQmlMbVpwYm1Gc2FYcGxLSFJvYVhNdVgyOUxaWGt1WTJ4dmJtVW9LUzVqYjI1allYUW9ZU2twZlgwcGZTa29LVHRjYmx4dUx5cGNia055ZVhCMGIwcFRJSFl6TGpFdU1pQndZbXRrWmpJdGJXbHVMbXB6WEc1amIyUmxMbWR2YjJkc1pTNWpiMjB2Y0M5amNubHdkRzh0YW5OY2JpaGpLU0F5TURBNUxUSXdNVE1nWW5rZ1NtVm1aaUJOYjNSMExpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1WTI5a1pTNW5iMjluYkdVdVkyOXRMM0F2WTNKNWNIUnZMV3B6TDNkcGEya3ZUR2xqWlc1elpWeHVLaTljYmlobWRXNWpkR2x2YmlncGUzWmhjaUJpUFVOeWVYQjBiMHBUTEdFOVlpNXNhV0lzWkQxaExrSmhjMlVzYlQxaExsZHZjbVJCY25KaGVTeGhQV0l1WVd4bmJ5eHhQV0V1U0UxQlF5eHNQV0V1VUVKTFJFWXlQV1F1WlhoMFpXNWtLSHRqWm1jNlpDNWxlSFJsYm1Rb2UydGxlVk5wZW1VNk5DeG9ZWE5vWlhJNllTNVRTRUV4TEdsMFpYSmhkR2x2Ym5NNk1YMHBMR2x1YVhRNlpuVnVZM1JwYjI0b1lTbDdkR2hwY3k1alptYzlkR2hwY3k1alptY3VaWGgwWlc1a0tHRXBmU3hqYjIxd2RYUmxPbVoxYm1OMGFXOXVLR0VzWWlsN1ptOXlLSFpoY2lCalBYUm9hWE11WTJabkxHWTljUzVqY21WaGRHVW9ZeTVvWVhOb1pYSXNZU2tzWnoxdExtTnlaV0YwWlNncExHUTliUzVqY21WaGRHVW9XekZkS1N4c1BXY3VkMjl5WkhNc2NqMWtMbmR2Y21SekxHNDlZeTVyWlhsVGFYcGxMR005WXk1cGRHVnlZWFJwYjI1ek8yd3ViR1Z1WjNSb1BHNDdLWHQyWVhJZ2FEMW1MblZ3WkdGMFpTaGlLUzVtYVc1aGJHbDZaU2hrS1R0bUxuSmxjMlYwS0NrN1ptOXlLSFpoY2lCcVBXZ3VkMjl5WkhNc2N6MXFMbXhsYm1kMGFDeHJQV2dzY0QweE8zQThZenR3S3lzcGUyczlaaTVtYVc1aGJHbDZaU2hyS1R0bUxuSmxjMlYwS0NrN1ptOXlLSFpoY2lCMFBXc3VkMjl5WkhNc1pUMHdPMlU4Y3p0bEt5c3BhbHRsWFY0OWRGdGxYWDFuTG1OdmJtTmhkQ2hvS1R0Y2JuSmJNRjBySzMxbkxuTnBaMEo1ZEdWelBUUXFianR5WlhSMWNtNGdaMzE5S1R0aUxsQkNTMFJHTWoxbWRXNWpkR2x2YmloaExHSXNZeWw3Y21WMGRYSnVJR3d1WTNKbFlYUmxLR01wTG1OdmJYQjFkR1VvWVN4aUtYMTlLU2dwTzF4dVhHNHZLaUVnS0dNcElGUnZiU0JYZFNCOElHaDBkSEE2THk5M2QzY3RZM010YzNSMVpHVnVkSE11YzNSaGJtWnZjbVF1WldSMUwzNTBhbmN2YW5OaWJpOWNiaUFxTDF4dWRtRnlJR0kyTkcxaGNEMWNJa0ZDUTBSRlJrZElTVXBMVEUxT1QxQlJVbE5VVlZaWFdGbGFZV0pqWkdWbVoyaHBhbXRzYlc1dmNIRnljM1IxZG5kNGVYb3dNVEl6TkRVMk56ZzVLeTljSWp0MllYSWdZalkwY0dGa1BWd2lQVndpTzJaMWJtTjBhVzl1SUdobGVESmlOalFvWkNsN2RtRnlJR0k3ZG1GeUlHVTdkbUZ5SUdFOVhDSmNJanRtYjNJb1lqMHdPMklyTXp3OVpDNXNaVzVuZEdnN1lpczlNeWw3WlQxd1lYSnpaVWx1ZENoa0xuTjFZbk4wY21sdVp5aGlMR0lyTXlrc01UWXBPMkVyUFdJMk5HMWhjQzVqYUdGeVFYUW9aVDQrTmlrcllqWTBiV0Z3TG1Ob1lYSkJkQ2hsSmpZektYMXBaaWhpS3pFOVBXUXViR1Z1WjNSb0tYdGxQWEJoY25ObFNXNTBLR1F1YzNWaWMzUnlhVzVuS0dJc1lpc3hLU3d4TmlrN1lTczlZalkwYldGd0xtTm9ZWEpCZENobFBEd3lLWDFsYkhObGUybG1LR0lyTWowOVpDNXNaVzVuZEdncGUyVTljR0Z5YzJWSmJuUW9aQzV6ZFdKemRISnBibWNvWWl4aUt6SXBMREUyS1R0aEt6MWlOalJ0WVhBdVkyaGhja0YwS0dVK1BqSXBLMkkyTkcxaGNDNWphR0Z5UVhRb0tHVW1NeWs4UERRcGZYMXBaaWhpTmpSd1lXUXBlM2RvYVd4bEtDaGhMbXhsYm1kMGFDWXpLVDR3S1h0aEt6MWlOalJ3WVdSOWZYSmxkSFZ5YmlCaGZXWjFibU4wYVc5dUlHSTJOSFJ2YUdWNEtHWXBlM1poY2lCa1BWd2lYQ0k3ZG1GeUlHVTdkbUZ5SUdJOU1EdDJZWElnWXp0MllYSWdZVHRtYjNJb1pUMHdPMlU4Wmk1c1pXNW5kR2c3S3l0bEtYdHBaaWhtTG1Ob1lYSkJkQ2hsS1QwOVlqWTBjR0ZrS1h0aWNtVmhhMzFoUFdJMk5HMWhjQzVwYm1SbGVFOW1LR1l1WTJoaGNrRjBLR1VwS1R0cFppaGhQREFwZTJOdmJuUnBiblZsZldsbUtHSTlQVEFwZTJRclBXbHVkREpqYUdGeUtHRStQaklwTzJNOVlTWXpPMkk5TVgxbGJITmxlMmxtS0dJOVBURXBlMlFyUFdsdWRESmphR0Z5S0NoalBEd3lLWHdvWVQ0K05Da3BPMk05WVNZeE5UdGlQVEo5Wld4elpYdHBaaWhpUFQweUtYdGtLejFwYm5ReVkyaGhjaWhqS1R0a0t6MXBiblF5WTJoaGNpaGhQajR5S1R0alBXRW1NenRpUFROOVpXeHpaWHRrS3oxcGJuUXlZMmhoY2lnb1l6dzhNaWw4S0dFK1BqUXBLVHRrS3oxcGJuUXlZMmhoY2loaEpqRTFLVHRpUFRCOWZYMTlhV1lvWWowOU1TbDdaQ3M5YVc1ME1tTm9ZWElvWXp3OE1pbDljbVYwZFhKdUlHUjlablZ1WTNScGIyNGdZalkwZEc5Q1FTaGxLWHQyWVhJZ1pEMWlOalIwYjJobGVDaGxLVHQyWVhJZ1l6dDJZWElnWWoxdVpYY2dRWEp5WVhrb0tUdG1iM0lvWXowd096SXFZenhrTG14bGJtZDBhRHNySzJNcGUySmJZMTA5Y0dGeWMyVkpiblFvWkM1emRXSnpkSEpwYm1jb01pcGpMRElxWXlzeUtTd3hOaWw5Y21WMGRYSnVJR0o5TzF4dUx5b2hJQ2hqS1NCVWIyMGdWM1VnZkNCb2RIUndPaTh2ZDNkM0xXTnpMWE4wZFdSbGJuUnpMbk4wWVc1bWIzSmtMbVZrZFM5K2RHcDNMMnB6WW00dlhHNGdLaTljYm5aaGNpQmtZbWwwY3p0MllYSWdZMkZ1WVhKNVBUSTBORGd6TnpneE5EQTVORFU1TUR0MllYSWdhbDlzYlQwb0tHTmhibUZ5ZVNZeE5qYzNOekl4TlNrOVBURTFOekUxTURjd0tUdG1kVzVqZEdsdmJpQkNhV2RKYm5SbFoyVnlLR1VzWkN4bUtYdHBaaWhsSVQxdWRXeHNLWHRwWmloY0ltNTFiV0psY2x3aVBUMTBlWEJsYjJZZ1pTbDdkR2hwY3k1bWNtOXRUblZ0WW1WeUtHVXNaQ3htS1gxbGJITmxlMmxtS0dROVBXNTFiR3dtSmx3aWMzUnlhVzVuWENJaFBYUjVjR1Z2WmlCbEtYdDBhR2x6TG1aeWIyMVRkSEpwYm1jb1pTd3lOVFlwZldWc2MyVjdkR2hwY3k1bWNtOXRVM1J5YVc1bktHVXNaQ2w5ZlgxOVpuVnVZM1JwYjI0Z2JtSnBLQ2w3Y21WMGRYSnVJRzVsZHlCQ2FXZEpiblJsWjJWeUtHNTFiR3dwZldaMWJtTjBhVzl1SUdGdE1TaG1MR0VzWWl4bExHZ3NaeWw3ZDJocGJHVW9MUzFuUGowd0tYdDJZWElnWkQxaEtuUm9hWE5iWmlzclhTdGlXMlZkSzJnN2FEMU5ZWFJvTG1ac2IyOXlLR1F2TmpjeE1EZzROalFwTzJKYlpTc3JYVDFrSmpZM01UQTRPRFl6ZlhKbGRIVnliaUJvZldaMWJtTjBhVzl1SUdGdE1paG1MSEVzY2l4bExHOHNZU2w3ZG1GeUlHczljU1l6TWpjMk55eHdQWEUrUGpFMU8zZG9hV3hsS0MwdFlUNDlNQ2w3ZG1GeUlHUTlkR2hwYzF0bVhTWXpNamMyTnp0MllYSWdaejEwYUdselcyWXJLMTArUGpFMU8zWmhjaUJpUFhBcVpDdG5LbXM3WkQxckttUXJLQ2hpSmpNeU56WTNLVHc4TVRVcEszSmJaVjByS0c4bU1UQTNNemMwTVRneU15azdiejBvWkQ0K1BqTXdLU3NvWWo0K1BqRTFLU3R3S21jcktHOCtQajR6TUNrN2NsdGxLeXRkUFdRbU1UQTNNemMwTVRneU0zMXlaWFIxY200Z2IzMW1kVzVqZEdsdmJpQmhiVE1vWml4eExISXNaU3h2TEdFcGUzWmhjaUJyUFhFbU1UWXpPRE1zY0QxeFBqNHhORHQzYUdsc1pTZ3RMV0UrUFRBcGUzWmhjaUJrUFhSb2FYTmJabDBtTVRZek9ETTdkbUZ5SUdjOWRHaHBjMXRtS3l0ZFBqNHhORHQyWVhJZ1lqMXdLbVFyWnlwck8yUTlheXBrS3lnb1lpWXhOak00TXlrOFBERTBLU3R5VzJWZEsyODdiejBvWkQ0K01qZ3BLeWhpUGo0eE5Da3JjQ3BuTzNKYlpTc3JYVDFrSmpJMk9EUXpOVFExTlgxeVpYUjFjbTRnYjMxcFppaHFYMnh0SmlZb2JtRjJhV2RoZEc5eUxtRndjRTVoYldVOVBWd2lUV2xqY205emIyWjBJRWx1ZEdWeWJtVjBJRVY0Y0d4dmNtVnlYQ0lwS1h0Q2FXZEpiblJsWjJWeUxuQnliM1J2ZEhsd1pTNWhiVDFoYlRJN1pHSnBkSE05TXpCOVpXeHpaWHRwWmlocVgyeHRKaVlvYm1GMmFXZGhkRzl5TG1Gd2NFNWhiV1VoUFZ3aVRtVjBjMk5oY0dWY0lpa3BlMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG1GdFBXRnRNVHRrWW1sMGN6MHlObjFsYkhObGUwSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMbUZ0UFdGdE16dGtZbWwwY3oweU9IMTlRbWxuU1c1MFpXZGxjaTV3Y205MGIzUjVjR1V1UkVJOVpHSnBkSE03UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdVJFMDlLQ2d4UER4a1ltbDBjeWt0TVNrN1FtbG5TVzUwWldkbGNpNXdjbTkwYjNSNWNHVXVSRlk5S0RFOFBHUmlhWFJ6S1R0MllYSWdRa2xmUmxBOU5USTdRbWxuU1c1MFpXZGxjaTV3Y205MGIzUjVjR1V1UmxZOVRXRjBhQzV3YjNjb01peENTVjlHVUNrN1FtbG5TVzUwWldkbGNpNXdjbTkwYjNSNWNHVXVSakU5UWtsZlJsQXRaR0pwZEhNN1FtbG5TVzUwWldkbGNpNXdjbTkwYjNSNWNHVXVSakk5TWlwa1ltbDBjeTFDU1Y5R1VEdDJZWElnUWtsZlVrMDlYQ0l3TVRJek5EVTJOemc1WVdKalpHVm1aMmhwYW10c2JXNXZjSEZ5YzNSMWRuZDRlWHBjSWp0MllYSWdRa2xmVWtNOWJtVjNJRUZ5Y21GNUtDazdkbUZ5SUhKeUxIWjJPM0p5UFZ3aU1Gd2lMbU5vWVhKRGIyUmxRWFFvTUNrN1ptOXlLSFoyUFRBN2RuWThQVGs3S3l0MmRpbDdRa2xmVWtOYmNuSXJLMTA5ZG5aOWNuSTlYQ0poWENJdVkyaGhja052WkdWQmRDZ3dLVHRtYjNJb2RuWTlNVEE3ZG5ZOE16WTdLeXQyZGlsN1FrbGZVa05iY25JcksxMDlkblo5Y25JOVhDSkJYQ0l1WTJoaGNrTnZaR1ZCZENnd0tUdG1iM0lvZG5ZOU1UQTdkblk4TXpZN0t5dDJkaWw3UWtsZlVrTmJjbklySzEwOWRuWjlablZ1WTNScGIyNGdhVzUwTW1Ob1lYSW9ZU2w3Y21WMGRYSnVJRUpKWDFKTkxtTm9ZWEpCZENoaEtYMW1kVzVqZEdsdmJpQnBiblJCZENoaUxHRXBlM1poY2lCa1BVSkpYMUpEVzJJdVkyaGhja052WkdWQmRDaGhLVjA3Y21WMGRYSnVLR1E5UFc1MWJHd3BQeTB4T21SOVpuVnVZM1JwYjI0Z1ltNXdRMjl3ZVZSdktHSXBlMlp2Y2loMllYSWdZVDEwYUdsekxuUXRNVHRoUGowd095MHRZU2w3WWx0aFhUMTBhR2x6VzJGZGZXSXVkRDEwYUdsekxuUTdZaTV6UFhSb2FYTXVjMzFtZFc1amRHbHZiaUJpYm5CR2NtOXRTVzUwS0dFcGUzUm9hWE11ZEQweE8zUm9hWE11Y3owb1lUd3dLVDh0TVRvd08ybG1LR0UrTUNsN2RHaHBjMXN3WFQxaGZXVnNjMlY3YVdZb1lUd3RNU2w3ZEdocGMxc3dYVDFoSzNSb2FYTXVSRlo5Wld4elpYdDBhR2x6TG5ROU1IMTlmV1oxYm1OMGFXOXVJRzVpZGloaEtYdDJZWElnWWoxdVlta29LVHRpTG1aeWIyMUpiblFvWVNrN2NtVjBkWEp1SUdKOVpuVnVZM1JwYjI0Z1ltNXdSbkp2YlZOMGNtbHVaeWhvTEdNcGUzWmhjaUJsTzJsbUtHTTlQVEUyS1h0bFBUUjlaV3h6Wlh0cFppaGpQVDA0S1h0bFBUTjlaV3h6Wlh0cFppaGpQVDB5TlRZcGUyVTlPSDFsYkhObGUybG1LR005UFRJcGUyVTlNWDFsYkhObGUybG1LR005UFRNeUtYdGxQVFY5Wld4elpYdHBaaWhqUFQwMEtYdGxQVEo5Wld4elpYdDBhR2x6TG1aeWIyMVNZV1JwZUNob0xHTXBPM0psZEhWeWJuMTlmWDE5ZlhSb2FYTXVkRDB3TzNSb2FYTXVjejB3TzNaaGNpQm5QV2d1YkdWdVozUm9MR1E5Wm1Gc2MyVXNaajB3TzNkb2FXeGxLQzB0Wno0OU1DbDdkbUZ5SUdFOUtHVTlQVGdwUDJoYloxMG1NalUxT21sdWRFRjBLR2dzWnlrN2FXWW9ZVHd3S1h0cFppaG9MbU5vWVhKQmRDaG5LVDA5WENJdFhDSXBlMlE5ZEhKMVpYMWpiMjUwYVc1MVpYMWtQV1poYkhObE8ybG1LR1k5UFRBcGUzUm9hWE5iZEdocGN5NTBLeXRkUFdGOVpXeHpaWHRwWmlobUsyVStkR2hwY3k1RVFpbDdkR2hwYzF0MGFHbHpMblF0TVYxOFBTaGhKaWdvTVR3OEtIUm9hWE11UkVJdFppa3BMVEVwS1R3OFpqdDBhR2x6VzNSb2FYTXVkQ3NyWFQwb1lUNCtLSFJvYVhNdVJFSXRaaWtwZldWc2MyVjdkR2hwYzF0MGFHbHpMblF0TVYxOFBXRThQR1o5ZldZclBXVTdhV1lvWmo0OWRHaHBjeTVFUWlsN1ppMDlkR2hwY3k1RVFuMTlhV1lvWlQwOU9DWW1LR2hiTUYwbU1USTRLU0U5TUNsN2RHaHBjeTV6UFMweE8ybG1LR1krTUNsN2RHaHBjMXQwYUdsekxuUXRNVjE4UFNnb01UdzhLSFJvYVhNdVJFSXRaaWtwTFRFcFBEeG1mWDEwYUdsekxtTnNZVzF3S0NrN2FXWW9aQ2w3UW1sblNXNTBaV2RsY2k1YVJWSlBMbk4xWWxSdktIUm9hWE1zZEdocGN5bDlmV1oxYm1OMGFXOXVJR0p1Y0VOc1lXMXdLQ2w3ZG1GeUlHRTlkR2hwY3k1ekpuUm9hWE11UkUwN2QyaHBiR1VvZEdocGN5NTBQakFtSm5Sb2FYTmJkR2hwY3k1MExURmRQVDFoS1hzdExYUm9hWE11ZEgxOVpuVnVZM1JwYjI0Z1ltNVViMU4wY21sdVp5aGpLWHRwWmloMGFHbHpMbk04TUNsN2NtVjBkWEp1WENJdFhDSXJkR2hwY3k1dVpXZGhkR1VvS1M1MGIxTjBjbWx1WnloaktYMTJZWElnWlR0cFppaGpQVDB4TmlsN1pUMDBmV1ZzYzJWN2FXWW9ZejA5T0NsN1pUMHpmV1ZzYzJWN2FXWW9ZejA5TWlsN1pUMHhmV1ZzYzJWN2FXWW9ZejA5TXpJcGUyVTlOWDFsYkhObGUybG1LR005UFRRcGUyVTlNbjFsYkhObGUzSmxkSFZ5YmlCMGFHbHpMblJ2VW1Ga2FYZ29ZeWw5ZlgxOWZYWmhjaUJuUFNneFBEeGxLUzB4TEd3c1lUMW1ZV3h6WlN4b1BWd2lYQ0lzWmoxMGFHbHpMblE3ZG1GeUlHbzlkR2hwY3k1RVFpMG9aaXAwYUdsekxrUkNLU1ZsTzJsbUtHWXRMVDR3S1h0cFppaHFQSFJvYVhNdVJFSW1KaWhzUFhSb2FYTmJabDArUG1vcFBqQXBlMkU5ZEhKMVpUdG9QV2x1ZERKamFHRnlLR3dwZlhkb2FXeGxLR1krUFRBcGUybG1LR284WlNsN2JEMG9kR2hwYzF0bVhTWW9LREU4UEdvcExURXBLVHc4S0dVdGFpazdiSHc5ZEdocGMxc3RMV1pkUGo0b2FpczlkR2hwY3k1RVFpMWxLWDFsYkhObGUydzlLSFJvYVhOYlpsMCtQaWhxTFQxbEtTa21aenRwWmlocVBEMHdLWHRxS3oxMGFHbHpMa1JDT3kwdFpuMTlhV1lvYkQ0d0tYdGhQWFJ5ZFdWOWFXWW9ZU2w3YUNzOWFXNTBNbU5vWVhJb2JDbDlmWDF5WlhSMWNtNGdZVDlvT2x3aU1Gd2lmV1oxYm1OMGFXOXVJR0p1VG1WbllYUmxLQ2w3ZG1GeUlHRTlibUpwS0NrN1FtbG5TVzUwWldkbGNpNWFSVkpQTG5OMVlsUnZLSFJvYVhNc1lTazdjbVYwZFhKdUlHRjlablZ1WTNScGIyNGdZbTVCWW5Nb0tYdHlaWFIxY200b2RHaHBjeTV6UERBcFAzUm9hWE11Ym1WbllYUmxLQ2s2ZEdocGMzMW1kVzVqZEdsdmJpQmlia052YlhCaGNtVlVieWhpS1h0MllYSWdaRDEwYUdsekxuTXRZaTV6TzJsbUtHUWhQVEFwZTNKbGRIVnliaUJrZlhaaGNpQmpQWFJvYVhNdWREdGtQV010WWk1ME8ybG1LR1FoUFRBcGUzSmxkSFZ5YmloMGFHbHpMbk04TUNrL0xXUTZaSDEzYUdsc1pTZ3RMV00rUFRBcGUybG1LQ2hrUFhSb2FYTmJZMTB0WWx0alhTa2hQVEFwZTNKbGRIVnliaUJrZlgxeVpYUjFjbTRnTUgxbWRXNWpkR2x2YmlCdVltbDBjeWhoS1h0MllYSWdZejB4TEdJN2FXWW9LR0k5WVQ0K1BqRTJLU0U5TUNsN1lUMWlPMk1yUFRFMmZXbG1LQ2hpUFdFK1BqZ3BJVDB3S1h0aFBXSTdZeXM5T0gxcFppZ29ZajFoUGo0MEtTRTlNQ2w3WVQxaU8yTXJQVFI5YVdZb0tHSTlZVDQrTWlraFBUQXBlMkU5WWp0akt6MHlmV2xtS0NoaVBXRStQakVwSVQwd0tYdGhQV0k3WXlzOU1YMXlaWFIxY200Z1kzMW1kVzVqZEdsdmJpQmlia0pwZEV4bGJtZDBhQ2dwZTJsbUtIUm9hWE11ZER3OU1DbDdjbVYwZFhKdUlEQjljbVYwZFhKdUlIUm9hWE11UkVJcUtIUm9hWE11ZEMweEtTdHVZbWwwY3loMGFHbHpXM1JvYVhNdWRDMHhYVjRvZEdocGN5NXpKblJvYVhNdVJFMHBLWDFtZFc1amRHbHZiaUJpYm5CRVRGTm9hV1owVkc4b1l5eGlLWHQyWVhJZ1lUdG1iM0lvWVQxMGFHbHpMblF0TVR0aFBqMHdPeTB0WVNsN1lsdGhLMk5kUFhSb2FYTmJZVjE5Wm05eUtHRTlZeTB4TzJFK1BUQTdMUzFoS1h0aVcyRmRQVEI5WWk1MFBYUm9hWE11ZEN0ak8ySXVjejEwYUdsekxuTjlablZ1WTNScGIyNGdZbTV3UkZKVGFHbG1kRlJ2S0dNc1lpbDdabTl5S0haaGNpQmhQV003WVR4MGFHbHpMblE3S3l0aEtYdGlXMkV0WTEwOWRHaHBjMXRoWFgxaUxuUTlUV0YwYUM1dFlYZ29kR2hwY3k1MExXTXNNQ2s3WWk1elBYUm9hWE11YzMxbWRXNWpkR2x2YmlCaWJuQk1VMmhwWm5SVWJ5aHFMR1VwZTNaaGNpQmlQV29sZEdocGN5NUVRanQyWVhJZ1lUMTBhR2x6TGtSQ0xXSTdkbUZ5SUdjOUtERThQR0VwTFRFN2RtRnlJR1k5VFdGMGFDNW1iRzl2Y2locUwzUm9hWE11UkVJcExHZzlLSFJvYVhNdWN6dzhZaWttZEdocGN5NUVUU3hrTzJadmNpaGtQWFJvYVhNdWRDMHhPMlErUFRBN0xTMWtLWHRsVzJRclppc3hYVDBvZEdocGMxdGtYVDQrWVNsOGFEdG9QU2gwYUdselcyUmRKbWNwUER4aWZXWnZjaWhrUFdZdE1UdGtQajB3T3kwdFpDbDdaVnRrWFQwd2ZXVmJabDA5YUR0bExuUTlkR2hwY3k1MEsyWXJNVHRsTG5NOWRHaHBjeTV6TzJVdVkyeGhiWEFvS1gxbWRXNWpkR2x2YmlCaWJuQlNVMmhwWm5SVWJ5aG5MR1FwZTJRdWN6MTBhR2x6TG5NN2RtRnlJR1U5VFdGMGFDNW1iRzl2Y2lobkwzUm9hWE11UkVJcE8ybG1LR1UrUFhSb2FYTXVkQ2w3WkM1MFBUQTdjbVYwZFhKdWZYWmhjaUJpUFdjbGRHaHBjeTVFUWp0MllYSWdZVDEwYUdsekxrUkNMV0k3ZG1GeUlHWTlLREU4UEdJcExURTdaRnN3WFQxMGFHbHpXMlZkUGo1aU8yWnZjaWgyWVhJZ1l6MWxLekU3WXp4MGFHbHpMblE3S3l0aktYdGtXMk10WlMweFhYdzlLSFJvYVhOYlkxMG1aaWs4UEdFN1pGdGpMV1ZkUFhSb2FYTmJZMTArUG1KOWFXWW9ZajR3S1h0a1czUm9hWE11ZEMxbExURmRmRDBvZEdocGN5NXpKbVlwUER4aGZXUXVkRDEwYUdsekxuUXRaVHRrTG1Oc1lXMXdLQ2w5Wm5WdVkzUnBiMjRnWW01d1UzVmlWRzhvWkN4bUtYdDJZWElnWlQwd0xHYzlNQ3hpUFUxaGRHZ3ViV2x1S0dRdWRDeDBhR2x6TG5RcE8zZG9hV3hsS0dVOFlpbDdaeXM5ZEdocGMxdGxYUzFrVzJWZE8yWmJaU3NyWFQxbkpuUm9hWE11UkUwN1p6NCtQWFJvYVhNdVJFSjlhV1lvWkM1MFBIUm9hWE11ZENsN1p5MDlaQzV6TzNkb2FXeGxLR1U4ZEdocGN5NTBLWHRuS3oxMGFHbHpXMlZkTzJaYlpTc3JYVDFuSm5Sb2FYTXVSRTA3Wno0K1BYUm9hWE11UkVKOVp5czlkR2hwY3k1emZXVnNjMlY3WnlzOWRHaHBjeTV6TzNkb2FXeGxLR1U4WkM1MEtYdG5MVDFrVzJWZE8yWmJaU3NyWFQxbkpuUm9hWE11UkUwN1p6NCtQWFJvYVhNdVJFSjlaeTA5WkM1emZXWXVjejBvWnp3d0tUOHRNVG93TzJsbUtHYzhMVEVwZTJaYlpTc3JYVDEwYUdsekxrUldLMmQ5Wld4elpYdHBaaWhuUGpBcGUyWmJaU3NyWFQxbmZYMW1MblE5WlR0bUxtTnNZVzF3S0NsOVpuVnVZM1JwYjI0Z1ltNXdUWFZzZEdsd2JIbFVieWhqTEdVcGUzWmhjaUJpUFhSb2FYTXVZV0p6S0Nrc1pqMWpMbUZpY3lncE8zWmhjaUJrUFdJdWREdGxMblE5WkN0bUxuUTdkMmhwYkdVb0xTMWtQajB3S1h0bFcyUmRQVEI5Wm05eUtHUTlNRHRrUEdZdWREc3JLMlFwZTJWYlpDdGlMblJkUFdJdVlXMG9NQ3htVzJSZExHVXNaQ3d3TEdJdWRDbDlaUzV6UFRBN1pTNWpiR0Z0Y0NncE8ybG1LSFJvYVhNdWN5RTlZeTV6S1h0Q2FXZEpiblJsWjJWeUxscEZVazh1YzNWaVZHOG9aU3hsS1gxOVpuVnVZM1JwYjI0Z1ltNXdVM0YxWVhKbFZHOG9aQ2w3ZG1GeUlHRTlkR2hwY3k1aFluTW9LVHQyWVhJZ1lqMWtMblE5TWlwaExuUTdkMmhwYkdVb0xTMWlQajB3S1h0a1cySmRQVEI5Wm05eUtHSTlNRHRpUEdFdWRDMHhPeXNyWWlsN2RtRnlJR1U5WVM1aGJTaGlMR0ZiWWwwc1pDd3lLbUlzTUN3eEtUdHBaaWdvWkZ0aUsyRXVkRjByUFdFdVlXMG9ZaXN4TERJcVlWdGlYU3hrTERJcVlpc3hMR1VzWVM1MExXSXRNU2twUGoxaExrUldLWHRrVzJJcllTNTBYUzA5WVM1RVZqdGtXMklyWVM1MEt6RmRQVEY5ZldsbUtHUXVkRDR3S1h0a1cyUXVkQzB4WFNzOVlTNWhiU2hpTEdGYllsMHNaQ3d5S21Jc01Dd3hLWDFrTG5NOU1EdGtMbU5zWVcxd0tDbDlablZ1WTNScGIyNGdZbTV3UkdsMlVtVnRWRzhvYml4b0xHY3BlM1poY2lCM1BXNHVZV0p6S0NrN2FXWW9keTUwUEQwd0tYdHlaWFIxY201OWRtRnlJR3M5ZEdocGN5NWhZbk1vS1R0cFppaHJMblE4ZHk1MEtYdHBaaWhvSVQxdWRXeHNLWHRvTG1aeWIyMUpiblFvTUNsOWFXWW9aeUU5Ym5Wc2JDbDdkR2hwY3k1amIzQjVWRzhvWnlsOWNtVjBkWEp1ZldsbUtHYzlQVzUxYkd3cGUyYzlibUpwS0NsOWRtRnlJR1E5Ym1KcEtDa3NZVDEwYUdsekxuTXNiRDF1TG5NN2RtRnlJSFk5ZEdocGN5NUVRaTF1WW1sMGN5aDNXM2N1ZEMweFhTazdhV1lvZGo0d0tYdDNMbXhUYUdsbWRGUnZLSFlzWkNrN2F5NXNVMmhwWm5SVWJ5aDJMR2NwZldWc2MyVjdkeTVqYjNCNVZHOG9aQ2s3YXk1amIzQjVWRzhvWnlsOWRtRnlJSEE5WkM1ME8zWmhjaUJpUFdSYmNDMHhYVHRwWmloaVBUMHdLWHR5WlhSMWNtNTlkbUZ5SUc4OVlpb29NVHc4ZEdocGN5NUdNU2tyS0Nod1BqRXBQMlJiY0MweVhUNCtkR2hwY3k1R01qb3dLVHQyWVhJZ1FUMTBhR2x6TGtaV0wyOHNlajBvTVR3OGRHaHBjeTVHTVNrdmJ5eDRQVEU4UEhSb2FYTXVSakk3ZG1GeUlIVTlaeTUwTEhNOWRTMXdMR1k5S0dnOVBXNTFiR3dwUDI1aWFTZ3BPbWc3WkM1a2JGTm9hV1owVkc4b2N5eG1LVHRwWmlobkxtTnZiWEJoY21WVWJ5aG1LVDQ5TUNsN1oxdG5MblFySzEwOU1UdG5Mbk4xWWxSdktHWXNaeWw5UW1sblNXNTBaV2RsY2k1UFRrVXVaR3hUYUdsbWRGUnZLSEFzWmlrN1ppNXpkV0pVYnloa0xHUXBPM2RvYVd4bEtHUXVkRHh3S1h0a1cyUXVkQ3NyWFQwd2ZYZG9hV3hsS0MwdGN6NDlNQ2w3ZG1GeUlHTTlLR2RiTFMxMVhUMDlZaWsvZEdocGN5NUVUVHBOWVhSb0xtWnNiMjl5S0dkYmRWMHFRU3NvWjF0MUxURmRLM2dwS25vcE8ybG1LQ2huVzNWZEt6MWtMbUZ0S0RBc1l5eG5MSE1zTUN4d0tTazhZeWw3WkM1a2JGTm9hV1owVkc4b2N5eG1LVHRuTG5OMVlsUnZLR1lzWnlrN2QyaHBiR1VvWjF0MVhUd3RMV01wZTJjdWMzVmlWRzhvWml4bktYMTlmV2xtS0dnaFBXNTFiR3dwZTJjdVpISlRhR2xtZEZSdktIQXNhQ2s3YVdZb1lTRTliQ2w3UW1sblNXNTBaV2RsY2k1YVJWSlBMbk4xWWxSdktHZ3NhQ2w5ZldjdWREMXdPMmN1WTJ4aGJYQW9LVHRwWmloMlBqQXBlMmN1Y2xOb2FXWjBWRzhvZGl4bktYMXBaaWhoUERBcGUwSnBaMGx1ZEdWblpYSXVXa1ZTVHk1emRXSlVieWhuTEdjcGZYMW1kVzVqZEdsdmJpQmliazF2WkNoaUtYdDJZWElnWXoxdVlta29LVHQwYUdsekxtRmljeWdwTG1ScGRsSmxiVlJ2S0dJc2JuVnNiQ3hqS1R0cFppaDBhR2x6TG5NOE1DWW1ZeTVqYjIxd1lYSmxWRzhvUW1sblNXNTBaV2RsY2k1YVJWSlBLVDR3S1h0aUxuTjFZbFJ2S0dNc1l5bDljbVYwZFhKdUlHTjlablZ1WTNScGIyNGdRMnhoYzNOcFl5aGhLWHQwYUdsekxtMDlZWDFtZFc1amRHbHZiaUJqUTI5dWRtVnlkQ2hoS1h0cFppaGhMbk04TUh4OFlTNWpiMjF3WVhKbFZHOG9kR2hwY3k1dEtUNDlNQ2w3Y21WMGRYSnVJR0V1Ylc5a0tIUm9hWE11YlNsOVpXeHpaWHR5WlhSMWNtNGdZWDE5Wm5WdVkzUnBiMjRnWTFKbGRtVnlkQ2hoS1h0eVpYUjFjbTRnWVgxbWRXNWpkR2x2YmlCalVtVmtkV05sS0dFcGUyRXVaR2wyVW1WdFZHOG9kR2hwY3k1dExHNTFiR3dzWVNsOVpuVnVZM1JwYjI0Z1kwMTFiRlJ2S0dFc1l5eGlLWHRoTG0xMWJIUnBjR3g1Vkc4b1l5eGlLVHQwYUdsekxuSmxaSFZqWlNoaUtYMW1kVzVqZEdsdmJpQmpVM0Z5Vkc4b1lTeGlLWHRoTG5OeGRXRnlaVlJ2S0dJcE8zUm9hWE11Y21Wa2RXTmxLR0lwZlVOc1lYTnphV011Y0hKdmRHOTBlWEJsTG1OdmJuWmxjblE5WTBOdmJuWmxjblE3UTJ4aGMzTnBZeTV3Y205MGIzUjVjR1V1Y21WMlpYSjBQV05TWlhabGNuUTdRMnhoYzNOcFl5NXdjbTkwYjNSNWNHVXVjbVZrZFdObFBXTlNaV1IxWTJVN1EyeGhjM05wWXk1d2NtOTBiM1I1Y0dVdWJYVnNWRzg5WTAxMWJGUnZPME5zWVhOemFXTXVjSEp2ZEc5MGVYQmxMbk54Y2xSdlBXTlRjWEpVYnp0bWRXNWpkR2x2YmlCaWJuQkpiblpFYVdkcGRDZ3BlMmxtS0hSb2FYTXVkRHd4S1h0eVpYUjFjbTRnTUgxMllYSWdZVDEwYUdseld6QmRPMmxtS0NoaEpqRXBQVDB3S1h0eVpYUjFjbTRnTUgxMllYSWdZajFoSmpNN1lqMG9ZaW9vTWkwb1lTWXhOU2txWWlrcEpqRTFPMkk5S0dJcUtESXRLR0VtTWpVMUtTcGlLU2ttTWpVMU8ySTlLR0lxS0RJdEtDZ29ZU1kyTlRVek5Ta3FZaWttTmpVMU16VXBLU2ttTmpVMU16VTdZajBvWWlvb01pMWhLbUlsZEdocGN5NUVWaWtwSlhSb2FYTXVSRlk3Y21WMGRYSnVLR0krTUNrL2RHaHBjeTVFVmkxaU9pMWlmV1oxYm1OMGFXOXVJRTF2Ym5SbmIyMWxjbmtvWVNsN2RHaHBjeTV0UFdFN2RHaHBjeTV0Y0QxaExtbHVka1JwWjJsMEtDazdkR2hwY3k1dGNHdzlkR2hwY3k1dGNDWXpNamMyTnp0MGFHbHpMbTF3YUQxMGFHbHpMbTF3UGo0eE5UdDBhR2x6TG5WdFBTZ3hQRHdvWVM1RVFpMHhOU2twTFRFN2RHaHBjeTV0ZERJOU1pcGhMblI5Wm5WdVkzUnBiMjRnYlc5dWRFTnZiblpsY25Rb1lTbDdkbUZ5SUdJOWJtSnBLQ2s3WVM1aFluTW9LUzVrYkZOb2FXWjBWRzhvZEdocGN5NXRMblFzWWlrN1lpNWthWFpTWlcxVWJ5aDBhR2x6TG0wc2JuVnNiQ3hpS1R0cFppaGhMbk04TUNZbVlpNWpiMjF3WVhKbFZHOG9RbWxuU1c1MFpXZGxjaTVhUlZKUEtUNHdLWHQwYUdsekxtMHVjM1ZpVkc4b1lpeGlLWDF5WlhSMWNtNGdZbjFtZFc1amRHbHZiaUJ0YjI1MFVtVjJaWEowS0dFcGUzWmhjaUJpUFc1aWFTZ3BPMkV1WTI5d2VWUnZLR0lwTzNSb2FYTXVjbVZrZFdObEtHSXBPM0psZEhWeWJpQmlmV1oxYm1OMGFXOXVJRzF2Ym5SU1pXUjFZMlVvWVNsN2QyaHBiR1VvWVM1MFBEMTBhR2x6TG0xME1pbDdZVnRoTG5RcksxMDlNSDFtYjNJb2RtRnlJR005TUR0alBIUm9hWE11YlM1ME95c3JZeWw3ZG1GeUlHSTlZVnRqWFNZek1qYzJOenQyWVhJZ1pEMG9ZaXAwYUdsekxtMXdiQ3NvS0NoaUtuUm9hWE11YlhCb0t5aGhXMk5kUGo0eE5Ta3FkR2hwY3k1dGNHd3BKblJvYVhNdWRXMHBQRHd4TlNrcEptRXVSRTA3WWoxakszUm9hWE11YlM1ME8yRmJZbDByUFhSb2FYTXViUzVoYlNnd0xHUXNZU3hqTERBc2RHaHBjeTV0TG5RcE8zZG9hV3hsS0dGYllsMCtQV0V1UkZZcGUyRmJZbDB0UFdFdVJGWTdZVnNySzJKZEt5dDlmV0V1WTJ4aGJYQW9LVHRoTG1SeVUyaHBablJVYnloMGFHbHpMbTB1ZEN4aEtUdHBaaWhoTG1OdmJYQmhjbVZVYnloMGFHbHpMbTBwUGowd0tYdGhMbk4xWWxSdktIUm9hWE11YlN4aEtYMTlablZ1WTNScGIyNGdiVzl1ZEZOeGNsUnZLR0VzWWlsN1lTNXpjWFZoY21WVWJ5aGlLVHQwYUdsekxuSmxaSFZqWlNoaUtYMW1kVzVqZEdsdmJpQnRiMjUwVFhWc1ZHOG9ZU3hqTEdJcGUyRXViWFZzZEdsd2JIbFVieWhqTEdJcE8zUm9hWE11Y21Wa2RXTmxLR0lwZlUxdmJuUm5iMjFsY25rdWNISnZkRzkwZVhCbExtTnZiblpsY25ROWJXOXVkRU52Ym5abGNuUTdUVzl1ZEdkdmJXVnllUzV3Y205MGIzUjVjR1V1Y21WMlpYSjBQVzF2Ym5SU1pYWmxjblE3VFc5dWRHZHZiV1Z5ZVM1d2NtOTBiM1I1Y0dVdWNtVmtkV05sUFcxdmJuUlNaV1IxWTJVN1RXOXVkR2R2YldWeWVTNXdjbTkwYjNSNWNHVXViWFZzVkc4OWJXOXVkRTExYkZSdk8wMXZiblJuYjIxbGNua3VjSEp2ZEc5MGVYQmxMbk54Y2xSdlBXMXZiblJUY1hKVWJ6dG1kVzVqZEdsdmJpQmlibkJKYzBWMlpXNG9LWHR5WlhSMWNtNG9LSFJvYVhNdWRENHdLVDhvZEdocGMxc3dYU1l4S1RwMGFHbHpMbk1wUFQwd2ZXWjFibU4wYVc5dUlHSnVjRVY0Y0Nob0xHb3BlMmxtS0dnK05ESTVORGsyTnpJNU5YeDhhRHd4S1h0eVpYUjFjbTRnUW1sblNXNTBaV2RsY2k1UFRrVjlkbUZ5SUdZOWJtSnBLQ2tzWVQxdVlta29LU3hrUFdvdVkyOXVkbVZ5ZENoMGFHbHpLU3hqUFc1aWFYUnpLR2dwTFRFN1pDNWpiM0I1Vkc4b1ppazdkMmhwYkdVb0xTMWpQajB3S1h0cUxuTnhjbFJ2S0dZc1lTazdhV1lvS0dnbUtERThQR01wS1Q0d0tYdHFMbTExYkZSdktHRXNaQ3htS1gxbGJITmxlM1poY2lCaVBXWTdaajFoTzJFOVluMTljbVYwZFhKdUlHb3VjbVYyWlhKMEtHWXBmV1oxYm1OMGFXOXVJR0p1VFc5a1VHOTNTVzUwS0dJc1lTbDdkbUZ5SUdNN2FXWW9Zand5TlRaOGZHRXVhWE5GZG1WdUtDa3BlMk05Ym1WM0lFTnNZWE56YVdNb1lTbDlaV3h6Wlh0alBXNWxkeUJOYjI1MFoyOXRaWEo1S0dFcGZYSmxkSFZ5YmlCMGFHbHpMbVY0Y0NoaUxHTXBmVUpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG1OdmNIbFViejFpYm5CRGIzQjVWRzg3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdVpuSnZiVWx1ZEQxaWJuQkdjbTl0U1c1ME8wSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMbVp5YjIxVGRISnBibWM5WW01d1JuSnZiVk4wY21sdVp6dENhV2RKYm5SbFoyVnlMbkJ5YjNSdmRIbHdaUzVqYkdGdGNEMWlibkJEYkdGdGNEdENhV2RKYm5SbFoyVnlMbkJ5YjNSdmRIbHdaUzVrYkZOb2FXWjBWRzg5WW01d1JFeFRhR2xtZEZSdk8wSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMbVJ5VTJocFpuUlViejFpYm5CRVVsTm9hV1owVkc4N1FtbG5TVzUwWldkbGNpNXdjbTkwYjNSNWNHVXViRk5vYVdaMFZHODlZbTV3VEZOb2FXWjBWRzg3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdWNsTm9hV1owVkc4OVltNXdVbE5vYVdaMFZHODdRbWxuU1c1MFpXZGxjaTV3Y205MGIzUjVjR1V1YzNWaVZHODlZbTV3VTNWaVZHODdRbWxuU1c1MFpXZGxjaTV3Y205MGIzUjVjR1V1YlhWc2RHbHdiSGxVYnoxaWJuQk5kV3gwYVhCc2VWUnZPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG5OeGRXRnlaVlJ2UFdKdWNGTnhkV0Z5WlZSdk8wSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMbVJwZGxKbGJWUnZQV0p1Y0VScGRsSmxiVlJ2TzBKcFowbHVkR1ZuWlhJdWNISnZkRzkwZVhCbExtbHVka1JwWjJsMFBXSnVjRWx1ZGtScFoybDBPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG1selJYWmxiajFpYm5CSmMwVjJaVzQ3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdVpYaHdQV0p1Y0VWNGNEdENhV2RKYm5SbFoyVnlMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaejFpYmxSdlUzUnlhVzVuTzBKcFowbHVkR1ZuWlhJdWNISnZkRzkwZVhCbExtNWxaMkYwWlQxaWJrNWxaMkYwWlR0Q2FXZEpiblJsWjJWeUxuQnliM1J2ZEhsd1pTNWhZbk05WW01QlluTTdRbWxuU1c1MFpXZGxjaTV3Y205MGIzUjVjR1V1WTI5dGNHRnlaVlJ2UFdKdVEyOXRjR0Z5WlZSdk8wSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMbUpwZEV4bGJtZDBhRDFpYmtKcGRFeGxibWQwYUR0Q2FXZEpiblJsWjJWeUxuQnliM1J2ZEhsd1pTNXRiMlE5WW01TmIyUTdRbWxuU1c1MFpXZGxjaTV3Y205MGIzUjVjR1V1Ylc5a1VHOTNTVzUwUFdKdVRXOWtVRzkzU1c1ME8wSnBaMGx1ZEdWblpYSXVXa1ZTVHoxdVluWW9NQ2s3UW1sblNXNTBaV2RsY2k1UFRrVTlibUoyS0RFcE8xeHVMeW9oSUNoaktTQlViMjBnVjNVZ2ZDQm9kSFJ3T2k4dmQzZDNMV056TFhOMGRXUmxiblJ6TG5OMFlXNW1iM0prTG1Wa2RTOStkR3AzTDJwelltNHZYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSnVRMnh2Ym1Vb0tYdDJZWElnWVQxdVlta29LVHQwYUdsekxtTnZjSGxVYnloaEtUdHlaWFIxY200Z1lYMW1kVzVqZEdsdmJpQmlia2x1ZEZaaGJIVmxLQ2w3YVdZb2RHaHBjeTV6UERBcGUybG1LSFJvYVhNdWREMDlNU2w3Y21WMGRYSnVJSFJvYVhOYk1GMHRkR2hwY3k1RVZuMWxiSE5sZTJsbUtIUm9hWE11ZEQwOU1DbDdjbVYwZFhKdUlDMHhmWDE5Wld4elpYdHBaaWgwYUdsekxuUTlQVEVwZTNKbGRIVnliaUIwYUdseld6QmRmV1ZzYzJWN2FXWW9kR2hwY3k1MFBUMHdLWHR5WlhSMWNtNGdNSDE5ZlhKbGRIVnliaWdvZEdocGMxc3hYU1lvS0RFOFBDZ3pNaTEwYUdsekxrUkNLU2t0TVNrcFBEeDBhR2x6TGtSQ0tYeDBhR2x6V3pCZGZXWjFibU4wYVc5dUlHSnVRbmwwWlZaaGJIVmxLQ2w3Y21WMGRYSnVLSFJvYVhNdWREMDlNQ2svZEdocGN5NXpPaWgwYUdseld6QmRQRHd5TkNrK1BqSTBmV1oxYm1OMGFXOXVJR0p1VTJodmNuUldZV3gxWlNncGUzSmxkSFZ5YmloMGFHbHpMblE5UFRBcFAzUm9hWE11Y3pvb2RHaHBjMXN3WFR3OE1UWXBQajR4Tm4xbWRXNWpkR2x2YmlCaWJuQkRhSFZ1YTFOcGVtVW9ZU2w3Y21WMGRYSnVJRTFoZEdndVpteHZiM0lvVFdGMGFDNU1UaklxZEdocGN5NUVRaTlOWVhSb0xteHZaeWhoS1NsOVpuVnVZM1JwYjI0Z1ltNVRhV2RPZFcwb0tYdHBaaWgwYUdsekxuTThNQ2w3Y21WMGRYSnVJQzB4ZldWc2MyVjdhV1lvZEdocGN5NTBQRDB3Zkh3b2RHaHBjeTUwUFQweEppWjBhR2x6V3pCZFBEMHdLU2w3Y21WMGRYSnVJREI5Wld4elpYdHlaWFIxY200Z01YMTlmV1oxYm1OMGFXOXVJR0p1Y0ZSdlVtRmthWGdvWXlsN2FXWW9ZejA5Ym5Wc2JDbDdZejB4TUgxcFppaDBhR2x6TG5OcFoyNTFiU2dwUFQwd2ZIeGpQREo4ZkdNK016WXBlM0psZEhWeWJsd2lNRndpZlhaaGNpQm1QWFJvYVhNdVkyaDFibXRUYVhwbEtHTXBPM1poY2lCbFBVMWhkR2d1Y0c5M0tHTXNaaWs3ZG1GeUlHazlibUoyS0dVcExHbzlibUpwS0Nrc2FEMXVZbWtvS1N4blBWd2lYQ0k3ZEdocGN5NWthWFpTWlcxVWJ5aHBMR29zYUNrN2QyaHBiR1VvYWk1emFXZHVkVzBvS1Q0d0tYdG5QU2hsSzJndWFXNTBWbUZzZFdVb0tTa3VkRzlUZEhKcGJtY29ZeWt1YzNWaWMzUnlLREVwSzJjN2FpNWthWFpTWlcxVWJ5aHBMR29zYUNsOWNtVjBkWEp1SUdndWFXNTBWbUZzZFdVb0tTNTBiMU4wY21sdVp5aGpLU3RuZldaMWJtTjBhVzl1SUdKdWNFWnliMjFTWVdScGVDaHRMR2dwZTNSb2FYTXVabkp2YlVsdWRDZ3dLVHRwWmlob1BUMXVkV3hzS1h0b1BURXdmWFpoY2lCbVBYUm9hWE11WTJoMWJtdFRhWHBsS0dncE8zWmhjaUJuUFUxaGRHZ3VjRzkzS0dnc1ppa3NaVDFtWVd4elpTeGhQVEFzYkQwd08yWnZjaWgyWVhJZ1l6MHdPMk04YlM1c1pXNW5kR2c3S3l0aktYdDJZWElnYXoxcGJuUkJkQ2h0TEdNcE8ybG1LR3M4TUNsN2FXWW9iUzVqYUdGeVFYUW9ZeWs5UFZ3aUxWd2lKaVowYUdsekxuTnBaMjUxYlNncFBUMHdLWHRsUFhSeWRXVjlZMjl1ZEdsdWRXVjliRDFvS213cmF6dHBaaWdySzJFK1BXWXBlM1JvYVhNdVpFMTFiSFJwY0d4NUtHY3BPM1JvYVhNdVpFRmtaRTltWm5ObGRDaHNMREFwTzJFOU1EdHNQVEI5ZldsbUtHRStNQ2w3ZEdocGN5NWtUWFZzZEdsd2JIa29UV0YwYUM1d2IzY29hQ3hoS1NrN2RHaHBjeTVrUVdSa1QyWm1jMlYwS0d3c01DbDlhV1lvWlNsN1FtbG5TVzUwWldkbGNpNWFSVkpQTG5OMVlsUnZLSFJvYVhNc2RHaHBjeWw5ZldaMWJtTjBhVzl1SUdKdWNFWnliMjFPZFcxaVpYSW9aaXhsTEdncGUybG1LRndpYm5WdFltVnlYQ0k5UFhSNWNHVnZaaUJsS1h0cFppaG1QRElwZTNSb2FYTXVabkp2YlVsdWRDZ3hLWDFsYkhObGUzUm9hWE11Wm5KdmJVNTFiV0psY2lobUxHZ3BPMmxtS0NGMGFHbHpMblJsYzNSQ2FYUW9aaTB4S1NsN2RHaHBjeTVpYVhSM2FYTmxWRzhvUW1sblNXNTBaV2RsY2k1UFRrVXVjMmhwWm5STVpXWjBLR1l0TVNrc2IzQmZiM0lzZEdocGN5bDlhV1lvZEdocGN5NXBjMFYyWlc0b0tTbDdkR2hwY3k1a1FXUmtUMlptYzJWMEtERXNNQ2w5ZDJocGJHVW9JWFJvYVhNdWFYTlFjbTlpWVdKc1pWQnlhVzFsS0dVcEtYdDBhR2x6TG1SQlpHUlBabVp6WlhRb01pd3dLVHRwWmloMGFHbHpMbUpwZEV4bGJtZDBhQ2dwUG1ZcGUzUm9hWE11YzNWaVZHOG9RbWxuU1c1MFpXZGxjaTVQVGtVdWMyaHBablJNWldaMEtHWXRNU2tzZEdocGN5bDlmWDE5Wld4elpYdDJZWElnWkQxdVpYY2dRWEp5WVhrb0tTeG5QV1ltTnp0a0xteGxibWQwYUQwb1pqNCtNeWtyTVR0bExtNWxlSFJDZVhSbGN5aGtLVHRwWmloblBqQXBlMlJiTUYwbVBTZ29NVHc4WnlrdE1TbDlaV3h6Wlh0a1d6QmRQVEI5ZEdocGN5NW1jbTl0VTNSeWFXNW5LR1FzTWpVMktYMTlablZ1WTNScGIyNGdZbTVVYjBKNWRHVkJjbkpoZVNncGUzWmhjaUJpUFhSb2FYTXVkQ3hqUFc1bGR5QkJjbkpoZVNncE8yTmJNRjA5ZEdocGN5NXpPM1poY2lCbFBYUm9hWE11UkVJdEtHSXFkR2hwY3k1RVFpa2xPQ3htTEdFOU1EdHBaaWhpTFMwK01DbDdhV1lvWlR4MGFHbHpMa1JDSmlZb1pqMTBhR2x6VzJKZFBqNWxLU0U5S0hSb2FYTXVjeVowYUdsekxrUk5LVDQrWlNsN1kxdGhLeXRkUFdaOEtIUm9hWE11Y3p3OEtIUm9hWE11UkVJdFpTa3BmWGRvYVd4bEtHSStQVEFwZTJsbUtHVThPQ2w3Wmowb2RHaHBjMXRpWFNZb0tERThQR1VwTFRFcEtUdzhLRGd0WlNrN1pudzlkR2hwYzFzdExXSmRQajRvWlNzOWRHaHBjeTVFUWkwNEtYMWxiSE5sZTJZOUtIUm9hWE5iWWwwK1BpaGxMVDA0S1NrbU1qVTFPMmxtS0dVOFBUQXBlMlVyUFhSb2FYTXVSRUk3TFMxaWZYMXBaaWdvWmlZeE1qZ3BJVDB3S1h0bWZEMHRNalUyZldsbUtHRTlQVEFtSmloMGFHbHpMbk1tTVRJNEtTRTlLR1ltTVRJNEtTbDdLeXRoZldsbUtHRStNSHg4WmlFOWRHaHBjeTV6S1h0alcyRXJLMTA5Wm4xOWZYSmxkSFZ5YmlCamZXWjFibU4wYVc5dUlHSnVSWEYxWVd4ektHSXBlM0psZEhWeWJpaDBhR2x6TG1OdmJYQmhjbVZVYnloaUtUMDlNQ2w5Wm5WdVkzUnBiMjRnWW01TmFXNG9ZaWw3Y21WMGRYSnVLSFJvYVhNdVkyOXRjR0Z5WlZSdktHSXBQREFwUDNSb2FYTTZZbjFtZFc1amRHbHZiaUJpYmsxaGVDaGlLWHR5WlhSMWNtNG9kR2hwY3k1amIyMXdZWEpsVkc4b1lpaytNQ2svZEdocGN6cGlmV1oxYm1OMGFXOXVJR0p1Y0VKcGRIZHBjMlZVYnloakxHZ3NaU2w3ZG1GeUlHUXNaeXhpUFUxaGRHZ3ViV2x1S0dNdWRDeDBhR2x6TG5RcE8yWnZjaWhrUFRBN1pEeGlPeXNyWkNsN1pWdGtYVDFvS0hSb2FYTmJaRjBzWTF0a1hTbDlhV1lvWXk1MFBIUm9hWE11ZENsN1p6MWpMbk1tZEdocGN5NUVUVHRtYjNJb1pEMWlPMlE4ZEdocGN5NTBPeXNyWkNsN1pWdGtYVDFvS0hSb2FYTmJaRjBzWnlsOVpTNTBQWFJvYVhNdWRIMWxiSE5sZTJjOWRHaHBjeTV6Sm5Sb2FYTXVSRTA3Wm05eUtHUTlZanRrUEdNdWREc3JLMlFwZTJWYlpGMDlhQ2huTEdOYlpGMHBmV1V1ZEQxakxuUjlaUzV6UFdnb2RHaHBjeTV6TEdNdWN5azdaUzVqYkdGdGNDZ3BmV1oxYm1OMGFXOXVJRzl3WDJGdVpDaGhMR0lwZTNKbGRIVnliaUJoSm1KOVpuVnVZM1JwYjI0Z1ltNUJibVFvWWlsN2RtRnlJR005Ym1KcEtDazdkR2hwY3k1aWFYUjNhWE5sVkc4b1lpeHZjRjloYm1Rc1l5azdjbVYwZFhKdUlHTjlablZ1WTNScGIyNGdiM0JmYjNJb1lTeGlLWHR5WlhSMWNtNGdZWHhpZldaMWJtTjBhVzl1SUdKdVQzSW9ZaWw3ZG1GeUlHTTlibUpwS0NrN2RHaHBjeTVpYVhSM2FYTmxWRzhvWWl4dmNGOXZjaXhqS1R0eVpYUjFjbTRnWTMxbWRXNWpkR2x2YmlCdmNGOTRiM0lvWVN4aUtYdHlaWFIxY200Z1lWNWlmV1oxYm1OMGFXOXVJR0p1V0c5eUtHSXBlM1poY2lCalBXNWlhU2dwTzNSb2FYTXVZbWwwZDJselpWUnZLR0lzYjNCZmVHOXlMR01wTzNKbGRIVnliaUJqZldaMWJtTjBhVzl1SUc5d1gyRnVaRzV2ZENoaExHSXBlM0psZEhWeWJpQmhKbjVpZldaMWJtTjBhVzl1SUdKdVFXNWtUbTkwS0dJcGUzWmhjaUJqUFc1aWFTZ3BPM1JvYVhNdVltbDBkMmx6WlZSdktHSXNiM0JmWVc1a2JtOTBMR01wTzNKbGRIVnliaUJqZldaMWJtTjBhVzl1SUdKdVRtOTBLQ2w3ZG1GeUlHSTlibUpwS0NrN1ptOXlLSFpoY2lCaFBUQTdZVHgwYUdsekxuUTdLeXRoS1h0aVcyRmRQWFJvYVhNdVJFMG1mblJvYVhOYllWMTlZaTUwUFhSb2FYTXVkRHRpTG5NOWZuUm9hWE11Y3p0eVpYUjFjbTRnWW4xbWRXNWpkR2x2YmlCaWJsTm9hV1owVEdWbWRDaGlLWHQyWVhJZ1lUMXVZbWtvS1R0cFppaGlQREFwZTNSb2FYTXVjbE5vYVdaMFZHOG9MV0lzWVNsOVpXeHpaWHQwYUdsekxteFRhR2xtZEZSdktHSXNZU2w5Y21WMGRYSnVJR0Y5Wm5WdVkzUnBiMjRnWW01VGFHbG1kRkpwWjJoMEtHSXBlM1poY2lCaFBXNWlhU2dwTzJsbUtHSThNQ2w3ZEdocGN5NXNVMmhwWm5SVWJ5Z3RZaXhoS1gxbGJITmxlM1JvYVhNdWNsTm9hV1owVkc4b1lpeGhLWDF5WlhSMWNtNGdZWDFtZFc1amRHbHZiaUJzWW1sMEtHRXBlMmxtS0dFOVBUQXBlM0psZEhWeWJpQXRNWDEyWVhJZ1lqMHdPMmxtS0NoaEpqWTFOVE0xS1QwOU1DbDdZVDQrUFRFMk8ySXJQVEUyZldsbUtDaGhKakkxTlNrOVBUQXBlMkUrUGowNE8ySXJQVGg5YVdZb0tHRW1NVFVwUFQwd0tYdGhQajQ5TkR0aUt6MDBmV2xtS0NoaEpqTXBQVDB3S1h0aFBqNDlNanRpS3oweWZXbG1LQ2hoSmpFcFBUMHdLWHNySzJKOWNtVjBkWEp1SUdKOVpuVnVZM1JwYjI0Z1ltNUhaWFJNYjNkbGMzUlRaWFJDYVhRb0tYdG1iM0lvZG1GeUlHRTlNRHRoUEhSb2FYTXVkRHNySzJFcGUybG1LSFJvYVhOYllWMGhQVEFwZTNKbGRIVnliaUJoS25Sb2FYTXVSRUlyYkdKcGRDaDBhR2x6VzJGZEtYMTlhV1lvZEdocGN5NXpQREFwZTNKbGRIVnliaUIwYUdsekxuUXFkR2hwY3k1RVFuMXlaWFIxY200Z0xURjlablZ1WTNScGIyNGdZMkpwZENoaEtYdDJZWElnWWowd08zZG9hV3hsS0dFaFBUQXBlMkVtUFdFdE1Uc3JLMko5Y21WMGRYSnVJR0o5Wm5WdVkzUnBiMjRnWW01Q2FYUkRiM1Z1ZENncGUzWmhjaUJqUFRBc1lUMTBhR2x6TG5NbWRHaHBjeTVFVFR0bWIzSW9kbUZ5SUdJOU1EdGlQSFJvYVhNdWREc3JLMklwZTJNclBXTmlhWFFvZEdocGMxdGlYVjVoS1gxeVpYUjFjbTRnWTMxbWRXNWpkR2x2YmlCaWJsUmxjM1JDYVhRb1lpbDdkbUZ5SUdFOVRXRjBhQzVtYkc5dmNpaGlMM1JvYVhNdVJFSXBPMmxtS0dFK1BYUm9hWE11ZENsN2NtVjBkWEp1S0hSb2FYTXVjeUU5TUNsOWNtVjBkWEp1S0NoMGFHbHpXMkZkSmlneFBEd29ZaVYwYUdsekxrUkNLU2twSVQwd0tYMW1kVzVqZEdsdmJpQmlibkJEYUdGdVoyVkNhWFFvWXl4aUtYdDJZWElnWVQxQ2FXZEpiblJsWjJWeUxrOU9SUzV6YUdsbWRFeGxablFvWXlrN2RHaHBjeTVpYVhSM2FYTmxWRzhvWVN4aUxHRXBPM0psZEhWeWJpQmhmV1oxYm1OMGFXOXVJR0p1VTJWMFFtbDBLR0VwZTNKbGRIVnliaUIwYUdsekxtTm9ZVzVuWlVKcGRDaGhMRzl3WDI5eUtYMW1kVzVqZEdsdmJpQmlia05zWldGeVFtbDBLR0VwZTNKbGRIVnliaUIwYUdsekxtTm9ZVzVuWlVKcGRDaGhMRzl3WDJGdVpHNXZkQ2w5Wm5WdVkzUnBiMjRnWW01R2JHbHdRbWwwS0dFcGUzSmxkSFZ5YmlCMGFHbHpMbU5vWVc1blpVSnBkQ2hoTEc5d1gzaHZjaWw5Wm5WdVkzUnBiMjRnWW01d1FXUmtWRzhvWkN4bUtYdDJZWElnWlQwd0xHYzlNQ3hpUFUxaGRHZ3ViV2x1S0dRdWRDeDBhR2x6TG5RcE8zZG9hV3hsS0dVOFlpbDdaeXM5ZEdocGMxdGxYU3RrVzJWZE8yWmJaU3NyWFQxbkpuUm9hWE11UkUwN1p6NCtQWFJvYVhNdVJFSjlhV1lvWkM1MFBIUm9hWE11ZENsN1p5czlaQzV6TzNkb2FXeGxLR1U4ZEdocGN5NTBLWHRuS3oxMGFHbHpXMlZkTzJaYlpTc3JYVDFuSm5Sb2FYTXVSRTA3Wno0K1BYUm9hWE11UkVKOVp5czlkR2hwY3k1emZXVnNjMlY3WnlzOWRHaHBjeTV6TzNkb2FXeGxLR1U4WkM1MEtYdG5LejFrVzJWZE8yWmJaU3NyWFQxbkpuUm9hWE11UkUwN1p6NCtQWFJvYVhNdVJFSjlaeXM5WkM1emZXWXVjejBvWnp3d0tUOHRNVG93TzJsbUtHYytNQ2w3Wmx0bEt5dGRQV2Q5Wld4elpYdHBaaWhuUEMweEtYdG1XMlVySzEwOWRHaHBjeTVFVml0bmZYMW1MblE5WlR0bUxtTnNZVzF3S0NsOVpuVnVZM1JwYjI0Z1ltNUJaR1FvWWlsN2RtRnlJR005Ym1KcEtDazdkR2hwY3k1aFpHUlVieWhpTEdNcE8zSmxkSFZ5YmlCamZXWjFibU4wYVc5dUlHSnVVM1ZpZEhKaFkzUW9ZaWw3ZG1GeUlHTTlibUpwS0NrN2RHaHBjeTV6ZFdKVWJ5aGlMR01wTzNKbGRIVnliaUJqZldaMWJtTjBhVzl1SUdKdVRYVnNkR2x3Ykhrb1lpbDdkbUZ5SUdNOWJtSnBLQ2s3ZEdocGN5NXRkV3gwYVhCc2VWUnZLR0lzWXlrN2NtVjBkWEp1SUdOOVpuVnVZM1JwYjI0Z1ltNVRjWFZoY21Vb0tYdDJZWElnWVQxdVlta29LVHQwYUdsekxuTnhkV0Z5WlZSdktHRXBPM0psZEhWeWJpQmhmV1oxYm1OMGFXOXVJR0p1UkdsMmFXUmxLR0lwZTNaaGNpQmpQVzVpYVNncE8zUm9hWE11WkdsMlVtVnRWRzhvWWl4akxHNTFiR3dwTzNKbGRIVnliaUJqZldaMWJtTjBhVzl1SUdKdVVtVnRZV2x1WkdWeUtHSXBlM1poY2lCalBXNWlhU2dwTzNSb2FYTXVaR2wyVW1WdFZHOG9ZaXh1ZFd4c0xHTXBPM0psZEhWeWJpQmpmV1oxYm1OMGFXOXVJR0p1UkdsMmFXUmxRVzVrVW1WdFlXbHVaR1Z5S0dJcGUzWmhjaUJrUFc1aWFTZ3BMR005Ym1KcEtDazdkR2hwY3k1a2FYWlNaVzFVYnloaUxHUXNZeWs3Y21WMGRYSnVJRzVsZHlCQmNuSmhlU2hrTEdNcGZXWjFibU4wYVc5dUlHSnVjRVJOZFd4MGFYQnNlU2hoS1h0MGFHbHpXM1JvYVhNdWRGMDlkR2hwY3k1aGJTZ3dMR0V0TVN4MGFHbHpMREFzTUN4MGFHbHpMblFwT3lzcmRHaHBjeTUwTzNSb2FYTXVZMnhoYlhBb0tYMW1kVzVqZEdsdmJpQmlibkJFUVdSa1QyWm1jMlYwS0dJc1lTbDdhV1lvWWowOU1DbDdjbVYwZFhKdWZYZG9hV3hsS0hSb2FYTXVkRHc5WVNsN2RHaHBjMXQwYUdsekxuUXJLMTA5TUgxMGFHbHpXMkZkS3oxaU8zZG9hV3hsS0hSb2FYTmJZVjArUFhSb2FYTXVSRllwZTNSb2FYTmJZVjB0UFhSb2FYTXVSRlk3YVdZb0t5dGhQajEwYUdsekxuUXBlM1JvYVhOYmRHaHBjeTUwS3l0ZFBUQjlLeXQwYUdselcyRmRmWDFtZFc1amRHbHZiaUJPZFd4c1JYaHdLQ2w3ZldaMWJtTjBhVzl1SUc1T2IzQW9ZU2w3Y21WMGRYSnVJR0Y5Wm5WdVkzUnBiMjRnYmsxMWJGUnZLR0VzWXl4aUtYdGhMbTExYkhScGNHeDVWRzhvWXl4aUtYMW1kVzVqZEdsdmJpQnVVM0Z5Vkc4b1lTeGlLWHRoTG5OeGRXRnlaVlJ2S0dJcGZVNTFiR3hGZUhBdWNISnZkRzkwZVhCbExtTnZiblpsY25ROWJrNXZjRHRPZFd4c1JYaHdMbkJ5YjNSdmRIbHdaUzV5WlhabGNuUTliazV2Y0R0T2RXeHNSWGh3TG5CeWIzUnZkSGx3WlM1dGRXeFViejF1VFhWc1ZHODdUblZzYkVWNGNDNXdjbTkwYjNSNWNHVXVjM0Z5Vkc4OWJsTnhjbFJ2TzJaMWJtTjBhVzl1SUdKdVVHOTNLR0VwZTNKbGRIVnliaUIwYUdsekxtVjRjQ2hoTEc1bGR5Qk9kV3hzUlhod0tDa3BmV1oxYm1OMGFXOXVJR0p1Y0UxMWJIUnBjR3g1VEc5M1pYSlVieWhpTEdZc1pTbDdkbUZ5SUdROVRXRjBhQzV0YVc0b2RHaHBjeTUwSzJJdWRDeG1LVHRsTG5NOU1EdGxMblE5WkR0M2FHbHNaU2hrUGpBcGUyVmJMUzFrWFQwd2ZYWmhjaUJqTzJadmNpaGpQV1V1ZEMxMGFHbHpMblE3WkR4ak95c3JaQ2w3WlZ0a0szUm9hWE11ZEYwOWRHaHBjeTVoYlNnd0xHSmJaRjBzWlN4a0xEQXNkR2hwY3k1MEtYMW1iM0lvWXoxTllYUm9MbTFwYmloaUxuUXNaaWs3WkR4ak95c3JaQ2w3ZEdocGN5NWhiU2d3TEdKYlpGMHNaU3hrTERBc1ppMWtLWDFsTG1Oc1lXMXdLQ2w5Wm5WdVkzUnBiMjRnWW01d1RYVnNkR2x3YkhsVmNIQmxjbFJ2S0dJc1pTeGtLWHN0TFdVN2RtRnlJR005WkM1MFBYUm9hWE11ZEN0aUxuUXRaVHRrTG5NOU1EdDNhR2xzWlNndExXTStQVEFwZTJSYlkxMDlNSDFtYjNJb1l6MU5ZWFJvTG0xaGVDaGxMWFJvYVhNdWRDd3dLVHRqUEdJdWREc3JLMk1wZTJSYmRHaHBjeTUwSzJNdFpWMDlkR2hwY3k1aGJTaGxMV01zWWx0alhTeGtMREFzTUN4MGFHbHpMblFyWXkxbEtYMWtMbU5zWVcxd0tDazdaQzVrY2xOb2FXWjBWRzhvTVN4a0tYMW1kVzVqZEdsdmJpQkNZWEp5WlhSMEtHRXBlM1JvYVhNdWNqSTlibUpwS0NrN2RHaHBjeTV4TXoxdVlta29LVHRDYVdkSmJuUmxaMlZ5TGs5T1JTNWtiRk5vYVdaMFZHOG9NaXBoTG5Rc2RHaHBjeTV5TWlrN2RHaHBjeTV0ZFQxMGFHbHpMbkl5TG1ScGRtbGtaU2hoS1R0MGFHbHpMbTA5WVgxbWRXNWpkR2x2YmlCaVlYSnlaWFIwUTI5dWRtVnlkQ2hoS1h0cFppaGhMbk04TUh4OFlTNTBQaklxZEdocGN5NXRMblFwZTNKbGRIVnliaUJoTG0xdlpDaDBhR2x6TG0wcGZXVnNjMlY3YVdZb1lTNWpiMjF3WVhKbFZHOG9kR2hwY3k1dEtUd3dLWHR5WlhSMWNtNGdZWDFsYkhObGUzWmhjaUJpUFc1aWFTZ3BPMkV1WTI5d2VWUnZLR0lwTzNSb2FYTXVjbVZrZFdObEtHSXBPM0psZEhWeWJpQmlmWDE5Wm5WdVkzUnBiMjRnWW1GeWNtVjBkRkpsZG1WeWRDaGhLWHR5WlhSMWNtNGdZWDFtZFc1amRHbHZiaUJpWVhKeVpYUjBVbVZrZFdObEtHRXBlMkV1WkhKVGFHbG1kRlJ2S0hSb2FYTXViUzUwTFRFc2RHaHBjeTV5TWlrN2FXWW9ZUzUwUG5Sb2FYTXViUzUwS3pFcGUyRXVkRDEwYUdsekxtMHVkQ3N4TzJFdVkyeGhiWEFvS1gxMGFHbHpMbTExTG0xMWJIUnBjR3g1VlhCd1pYSlVieWgwYUdsekxuSXlMSFJvYVhNdWJTNTBLekVzZEdocGN5NXhNeWs3ZEdocGN5NXRMbTExYkhScGNHeDVURzkzWlhKVWJ5aDBhR2x6TG5FekxIUm9hWE11YlM1MEt6RXNkR2hwY3k1eU1pazdkMmhwYkdVb1lTNWpiMjF3WVhKbFZHOG9kR2hwY3k1eU1pazhNQ2w3WVM1a1FXUmtUMlptYzJWMEtERXNkR2hwY3k1dExuUXJNU2w5WVM1emRXSlVieWgwYUdsekxuSXlMR0VwTzNkb2FXeGxLR0V1WTI5dGNHRnlaVlJ2S0hSb2FYTXViU2srUFRBcGUyRXVjM1ZpVkc4b2RHaHBjeTV0TEdFcGZYMW1kVzVqZEdsdmJpQmlZWEp5WlhSMFUzRnlWRzhvWVN4aUtYdGhMbk54ZFdGeVpWUnZLR0lwTzNSb2FYTXVjbVZrZFdObEtHSXBmV1oxYm1OMGFXOXVJR0poY25KbGRIUk5kV3hVYnloaExHTXNZaWw3WVM1dGRXeDBhWEJzZVZSdktHTXNZaWs3ZEdocGN5NXlaV1IxWTJVb1lpbDlRbUZ5Y21WMGRDNXdjbTkwYjNSNWNHVXVZMjl1ZG1WeWREMWlZWEp5WlhSMFEyOXVkbVZ5ZER0Q1lYSnlaWFIwTG5CeWIzUnZkSGx3WlM1eVpYWmxjblE5WW1GeWNtVjBkRkpsZG1WeWREdENZWEp5WlhSMExuQnliM1J2ZEhsd1pTNXlaV1IxWTJVOVltRnljbVYwZEZKbFpIVmpaVHRDWVhKeVpYUjBMbkJ5YjNSdmRIbHdaUzV0ZFd4VWJ6MWlZWEp5WlhSMFRYVnNWRzg3UW1GeWNtVjBkQzV3Y205MGIzUjVjR1V1YzNGeVZHODlZbUZ5Y21WMGRGTnhjbFJ2TzJaMWJtTjBhVzl1SUdKdVRXOWtVRzkzS0hFc1ppbDdkbUZ5SUc4OWNTNWlhWFJNWlc1bmRHZ29LU3hvTEdJOWJtSjJLREVwTEhZN2FXWW9ienc5TUNsN2NtVjBkWEp1SUdKOVpXeHpaWHRwWmlodlBERTRLWHRvUFRGOVpXeHpaWHRwWmlodlBEUTRLWHRvUFROOVpXeHpaWHRwWmlodlBERTBOQ2w3YUQwMGZXVnNjMlY3YVdZb2J6dzNOamdwZTJnOU5YMWxiSE5sZTJnOU5uMTlmWDE5YVdZb2J6dzRLWHQyUFc1bGR5QkRiR0Z6YzJsaktHWXBmV1ZzYzJWN2FXWW9aaTVwYzBWMlpXNG9LU2w3ZGoxdVpYY2dRbUZ5Y21WMGRDaG1LWDFsYkhObGUzWTlibVYzSUUxdmJuUm5iMjFsY25rb1ppbDlmWFpoY2lCd1BXNWxkeUJCY25KaGVTZ3BMR1E5TXl4elBXZ3RNU3hoUFNneFBEeG9LUzB4TzNCYk1WMDlkaTVqYjI1MlpYSjBLSFJvYVhNcE8ybG1LR2crTVNsN2RtRnlJRUU5Ym1KcEtDazdkaTV6Y1hKVWJ5aHdXekZkTEVFcE8zZG9hV3hsS0dROFBXRXBlM0JiWkYwOWJtSnBLQ2s3ZGk1dGRXeFVieWhCTEhCYlpDMHlYU3h3VzJSZEtUdGtLejB5ZlgxMllYSWdiRDF4TG5RdE1TeDRMSFU5ZEhKMVpTeGpQVzVpYVNncExIazdiejF1WW1sMGN5aHhXMnhkS1MweE8zZG9hV3hsS0d3K1BUQXBlMmxtS0c4K1BYTXBlM2c5S0hGYmJGMCtQaWh2TFhNcEtTWmhmV1ZzYzJWN2VEMG9jVnRzWFNZb0tERThQQ2h2S3pFcEtTMHhLU2s4UENoekxXOHBPMmxtS0d3K01DbDdlSHc5Y1Z0c0xURmRQajRvZEdocGN5NUVRaXR2TFhNcGZYMWtQV2c3ZDJocGJHVW9LSGdtTVNrOVBUQXBlM2crUGoweE95MHRaSDFwWmlnb2J5MDlaQ2s4TUNsN2J5czlkR2hwY3k1RVFqc3RMV3g5YVdZb2RTbDdjRnQ0WFM1amIzQjVWRzhvWWlrN2RUMW1ZV3h6WlgxbGJITmxlM2RvYVd4bEtHUStNU2w3ZGk1emNYSlVieWhpTEdNcE8zWXVjM0Z5Vkc4b1l5eGlLVHRrTFQweWZXbG1LR1ErTUNsN2RpNXpjWEpVYnloaUxHTXBmV1ZzYzJWN2VUMWlPMkk5WXp0alBYbDlkaTV0ZFd4VWJ5aGpMSEJiZUYwc1lpbDlkMmhwYkdVb2JENDlNQ1ltS0hGYmJGMG1LREU4UEc4cEtUMDlNQ2w3ZGk1emNYSlVieWhpTEdNcE8zazlZanRpUFdNN1l6MTVPMmxtS0MwdGJ6d3dLWHR2UFhSb2FYTXVSRUl0TVRzdExXeDlmWDF5WlhSMWNtNGdkaTV5WlhabGNuUW9ZaWw5Wm5WdVkzUnBiMjRnWW01SFEwUW9ZeWw3ZG1GeUlHSTlLSFJvYVhNdWN6d3dLVDkwYUdsekxtNWxaMkYwWlNncE9uUm9hWE11WTJ4dmJtVW9LVHQyWVhJZ2FEMG9ZeTV6UERBcFAyTXVibVZuWVhSbEtDazZZeTVqYkc5dVpTZ3BPMmxtS0dJdVkyOXRjR0Z5WlZSdktHZ3BQREFwZTNaaGNpQmxQV0k3WWoxb08yZzlaWDEyWVhJZ1pEMWlMbWRsZEV4dmQyVnpkRk5sZEVKcGRDZ3BMR1k5YUM1blpYUk1iM2RsYzNSVFpYUkNhWFFvS1R0cFppaG1QREFwZTNKbGRIVnliaUJpZldsbUtHUThaaWw3Wmoxa2ZXbG1LR1krTUNsN1lpNXlVMmhwWm5SVWJ5aG1MR0lwTzJndWNsTm9hV1owVkc4b1ppeG9LWDEzYUdsc1pTaGlMbk5wWjI1MWJTZ3BQakFwZTJsbUtDaGtQV0l1WjJWMFRHOTNaWE4wVTJWMFFtbDBLQ2twUGpBcGUySXVjbE5vYVdaMFZHOG9aQ3hpS1gxcFppZ29aRDFvTG1kbGRFeHZkMlZ6ZEZObGRFSnBkQ2dwS1Q0d0tYdG9MbkpUYUdsbWRGUnZLR1FzYUNsOWFXWW9ZaTVqYjIxd1lYSmxWRzhvYUNrK1BUQXBlMkl1YzNWaVZHOG9hQ3hpS1R0aUxuSlRhR2xtZEZSdktERXNZaWw5Wld4elpYdG9Mbk4xWWxSdktHSXNhQ2s3YUM1eVUyaHBablJVYnlneExHZ3BmWDFwWmlobVBqQXBlMmd1YkZOb2FXWjBWRzhvWml4b0tYMXlaWFIxY200Z2FIMW1kVzVqZEdsdmJpQmlibkJOYjJSSmJuUW9aU2w3YVdZb1pUdzlNQ2w3Y21WMGRYSnVJREI5ZG1GeUlHTTlkR2hwY3k1RVZpVmxMR0k5S0hSb2FYTXVjend3S1Q5bExURTZNRHRwWmloMGFHbHpMblErTUNsN2FXWW9ZejA5TUNsN1lqMTBhR2x6V3pCZEpXVjlaV3h6Wlh0bWIzSW9kbUZ5SUdFOWRHaHBjeTUwTFRFN1lUNDlNRHN0TFdFcGUySTlLR01xWWl0MGFHbHpXMkZkS1NWbGZYMTljbVYwZFhKdUlHSjlablZ1WTNScGIyNGdZbTVOYjJSSmJuWmxjbk5sS0dZcGUzWmhjaUJxUFdZdWFYTkZkbVZ1S0NrN2FXWW9LSFJvYVhNdWFYTkZkbVZ1S0NrbUptb3BmSHhtTG5OcFoyNTFiU2dwUFQwd0tYdHlaWFIxY200Z1FtbG5TVzUwWldkbGNpNWFSVkpQZlhaaGNpQnBQV1l1WTJ4dmJtVW9LU3hvUFhSb2FYTXVZMnh2Ym1Vb0tUdDJZWElnWnoxdVluWW9NU2tzWlQxdVluWW9NQ2tzYkQxdVluWW9NQ2tzYXoxdVluWW9NU2s3ZDJocGJHVW9hUzV6YVdkdWRXMG9LU0U5TUNsN2QyaHBiR1VvYVM1cGMwVjJaVzRvS1NsN2FTNXlVMmhwWm5SVWJ5Z3hMR2twTzJsbUtHb3BlMmxtS0NGbkxtbHpSWFpsYmlncGZId2haUzVwYzBWMlpXNG9LU2w3Wnk1aFpHUlVieWgwYUdsekxHY3BPMlV1YzNWaVZHOG9aaXhsS1gxbkxuSlRhR2xtZEZSdktERXNaeWw5Wld4elpYdHBaaWdoWlM1cGMwVjJaVzRvS1NsN1pTNXpkV0pVYnlobUxHVXBmWDFsTG5KVGFHbG1kRlJ2S0RFc1pTbDlkMmhwYkdVb2FDNXBjMFYyWlc0b0tTbDdhQzV5VTJocFpuUlVieWd4TEdncE8ybG1LR29wZTJsbUtDRnNMbWx6UlhabGJpZ3BmSHdoYXk1cGMwVjJaVzRvS1NsN2JDNWhaR1JVYnloMGFHbHpMR3dwTzJzdWMzVmlWRzhvWml4cktYMXNMbkpUYUdsbWRGUnZLREVzYkNsOVpXeHpaWHRwWmlnaGF5NXBjMFYyWlc0b0tTbDdheTV6ZFdKVWJ5aG1MR3NwZlgxckxuSlRhR2xtZEZSdktERXNheWw5YVdZb2FTNWpiMjF3WVhKbFZHOG9hQ2srUFRBcGUya3VjM1ZpVkc4b2FDeHBLVHRwWmlocUtYdG5Mbk4xWWxSdktHd3NaeWw5WlM1emRXSlVieWhyTEdVcGZXVnNjMlY3YUM1emRXSlVieWhwTEdncE8ybG1LR29wZTJ3dWMzVmlWRzhvWnl4c0tYMXJMbk4xWWxSdktHVXNheWw5ZldsbUtHZ3VZMjl0Y0dGeVpWUnZLRUpwWjBsdWRHVm5aWEl1VDA1RktTRTlNQ2w3Y21WMGRYSnVJRUpwWjBsdWRHVm5aWEl1V2tWU1QzMXBaaWhyTG1OdmJYQmhjbVZVYnlobUtUNDlNQ2w3Y21WMGRYSnVJR3N1YzNWaWRISmhZM1FvWmlsOWFXWW9heTV6YVdkdWRXMG9LVHd3S1h0ckxtRmtaRlJ2S0dZc2F5bDlaV3h6Wlh0eVpYUjFjbTRnYTMxcFppaHJMbk5wWjI1MWJTZ3BQREFwZTNKbGRIVnliaUJyTG1Ga1pDaG1LWDFsYkhObGUzSmxkSFZ5YmlCcmZYMTJZWElnYkc5M2NISnBiV1Z6UFZzeUxETXNOU3czTERFeExERXpMREUzTERFNUxESXpMREk1TERNeExETTNMRFF4TERRekxEUTNMRFV6TERVNUxEWXhMRFkzTERjeExEY3pMRGM1TERnekxEZzVMRGszTERFd01Td3hNRE1zTVRBM0xERXdPU3d4TVRNc01USTNMREV6TVN3eE16Y3NNVE01TERFME9Td3hOVEVzTVRVM0xERTJNeXd4Tmpjc01UY3pMREUzT1N3eE9ERXNNVGt4TERFNU15d3hPVGNzTVRrNUxESXhNU3d5TWpNc01qSTNMREl5T1N3eU16TXNNak01TERJME1Td3lOVEVzTWpVM0xESTJNeXd5Tmprc01qY3hMREkzTnl3eU9ERXNNamd6TERJNU15d3pNRGNzTXpFeExETXhNeXd6TVRjc016TXhMRE16Tnl3ek5EY3NNelE1TERNMU15d3pOVGtzTXpZM0xETTNNeXd6Tnprc016Z3pMRE00T1N3ek9UY3NOREF4TERRd09TdzBNVGtzTkRJeExEUXpNU3cwTXpNc05ETTVMRFEwTXl3ME5Ea3NORFUzTERRMk1TdzBOak1zTkRZM0xEUTNPU3cwT0Rjc05Ea3hMRFE1T1N3MU1ETXNOVEE1TERVeU1TdzFNak1zTlRReExEVTBOeXcxTlRjc05UWXpMRFUyT1N3MU56RXNOVGMzTERVNE55dzFPVE1zTlRrNUxEWXdNU3cyTURjc05qRXpMRFl4Tnl3Mk1Ua3NOak14TERZME1TdzJORE1zTmpRM0xEWTFNeXcyTlRrc05qWXhMRFkzTXl3Mk56Y3NOamd6TERZNU1TdzNNREVzTnpBNUxEY3hPU3czTWpjc056TXpMRGN6T1N3M05ETXNOelV4TERjMU55dzNOakVzTnpZNUxEYzNNeXczT0Rjc056azNMRGd3T1N3NE1URXNPREl4TERneU15dzRNamNzT0RJNUxEZ3pPU3c0TlRNc09EVTNMRGcxT1N3NE5qTXNPRGMzTERnNE1TdzRPRE1zT0RnM0xEa3dOeXc1TVRFc09URTVMRGt5T1N3NU16Y3NPVFF4TERrME55dzVOVE1zT1RZM0xEazNNU3c1Tnpjc09UZ3pMRGs1TVN3NU9UZGRPM1poY2lCc2NHeHBiVDBvTVR3OE1qWXBMMnh2ZDNCeWFXMWxjMXRzYjNkd2NtbHRaWE11YkdWdVozUm9MVEZkTzJaMWJtTjBhVzl1SUdKdVNYTlFjbTlpWVdKc1pWQnlhVzFsS0dVcGUzWmhjaUJrTEdJOWRHaHBjeTVoWW5Nb0tUdHBaaWhpTG5ROVBURW1KbUpiTUYwOFBXeHZkM0J5YVcxbGMxdHNiM2R3Y21sdFpYTXViR1Z1WjNSb0xURmRLWHRtYjNJb1pEMHdPMlE4Ykc5M2NISnBiV1Z6TG14bGJtZDBhRHNySzJRcGUybG1LR0piTUYwOVBXeHZkM0J5YVcxbGMxdGtYU2w3Y21WMGRYSnVJSFJ5ZFdWOWZYSmxkSFZ5YmlCbVlXeHpaWDFwWmloaUxtbHpSWFpsYmlncEtYdHlaWFIxY200Z1ptRnNjMlY5WkQweE8zZG9hV3hsS0dROGJHOTNjSEpwYldWekxteGxibWQwYUNsN2RtRnlJR0U5Ykc5M2NISnBiV1Z6VzJSZExHTTlaQ3N4TzNkb2FXeGxLR004Ykc5M2NISnBiV1Z6TG14bGJtZDBhQ1ltWVR4c2NHeHBiU2w3WVNvOWJHOTNjSEpwYldWelcyTXJLMTE5WVQxaUxtMXZaRWx1ZENoaEtUdDNhR2xzWlNoa1BHTXBlMmxtS0dFbGJHOTNjSEpwYldWelcyUXJLMTA5UFRBcGUzSmxkSFZ5YmlCbVlXeHpaWDE5ZlhKbGRIVnliaUJpTG0xcGJHeGxjbEpoWW1sdUtHVXBmV1oxYm1OMGFXOXVJR0p1Y0UxcGJHeGxjbEpoWW1sdUtHWXBlM1poY2lCblBYUm9hWE11YzNWaWRISmhZM1FvUW1sblNXNTBaV2RsY2k1UFRrVXBPM1poY2lCalBXY3VaMlYwVEc5M1pYTjBVMlYwUW1sMEtDazdhV1lvWXp3OU1DbDdjbVYwZFhKdUlHWmhiSE5sZlhaaGNpQm9QV2N1YzJocFpuUlNhV2RvZENoaktUdG1QU2htS3pFcFBqNHhPMmxtS0dZK2JHOTNjSEpwYldWekxteGxibWQwYUNsN1pqMXNiM2R3Y21sdFpYTXViR1Z1WjNSb2ZYWmhjaUJpUFc1aWFTZ3BPMlp2Y2loMllYSWdaVDB3TzJVOFpqc3JLMlVwZTJJdVpuSnZiVWx1ZENoc2IzZHdjbWx0WlhOYlRXRjBhQzVtYkc5dmNpaE5ZWFJvTG5KaGJtUnZiU2dwS214dmQzQnlhVzFsY3k1c1pXNW5kR2dwWFNrN2RtRnlJR3c5WWk1dGIyUlFiM2NvYUN4MGFHbHpLVHRwWmloc0xtTnZiWEJoY21WVWJ5aENhV2RKYm5SbFoyVnlMazlPUlNraFBUQW1KbXd1WTI5dGNHRnlaVlJ2S0djcElUMHdLWHQyWVhJZ1pEMHhPM2RvYVd4bEtHUXJLenhqSmlac0xtTnZiWEJoY21WVWJ5aG5LU0U5TUNsN2JEMXNMbTF2WkZCdmQwbHVkQ2d5TEhSb2FYTXBPMmxtS0d3dVkyOXRjR0Z5WlZSdktFSnBaMGx1ZEdWblpYSXVUMDVGS1QwOU1DbDdjbVYwZFhKdUlHWmhiSE5sZlgxcFppaHNMbU52YlhCaGNtVlVieWhuS1NFOU1DbDdjbVYwZFhKdUlHWmhiSE5sZlgxOWNtVjBkWEp1SUhSeWRXVjlRbWxuU1c1MFpXZGxjaTV3Y205MGIzUjVjR1V1WTJoMWJtdFRhWHBsUFdKdWNFTm9kVzVyVTJsNlpUdENhV2RKYm5SbFoyVnlMbkJ5YjNSdmRIbHdaUzUwYjFKaFpHbDRQV0p1Y0ZSdlVtRmthWGc3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdVpuSnZiVkpoWkdsNFBXSnVjRVp5YjIxU1lXUnBlRHRDYVdkSmJuUmxaMlZ5TG5CeWIzUnZkSGx3WlM1bWNtOXRUblZ0WW1WeVBXSnVjRVp5YjIxT2RXMWlaWEk3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdVltbDBkMmx6WlZSdlBXSnVjRUpwZEhkcGMyVlVienRDYVdkSmJuUmxaMlZ5TG5CeWIzUnZkSGx3WlM1amFHRnVaMlZDYVhROVltNXdRMmhoYm1kbFFtbDBPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG1Ga1pGUnZQV0p1Y0VGa1pGUnZPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG1STmRXeDBhWEJzZVQxaWJuQkVUWFZzZEdsd2JIazdRbWxuU1c1MFpXZGxjaTV3Y205MGIzUjVjR1V1WkVGa1pFOW1abk5sZEQxaWJuQkVRV1JrVDJabWMyVjBPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG0xMWJIUnBjR3g1VEc5M1pYSlViejFpYm5CTmRXeDBhWEJzZVV4dmQyVnlWRzg3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdWJYVnNkR2x3YkhsVmNIQmxjbFJ2UFdKdWNFMTFiSFJwY0d4NVZYQndaWEpVYnp0Q2FXZEpiblJsWjJWeUxuQnliM1J2ZEhsd1pTNXRiMlJKYm5ROVltNXdUVzlrU1c1ME8wSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMbTFwYkd4bGNsSmhZbWx1UFdKdWNFMXBiR3hsY2xKaFltbHVPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG1Oc2IyNWxQV0p1UTJ4dmJtVTdRbWxuU1c1MFpXZGxjaTV3Y205MGIzUjVjR1V1YVc1MFZtRnNkV1U5WW01SmJuUldZV3gxWlR0Q2FXZEpiblJsWjJWeUxuQnliM1J2ZEhsd1pTNWllWFJsVm1Gc2RXVTlZbTVDZVhSbFZtRnNkV1U3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdWMyaHZjblJXWVd4MVpUMWlibE5vYjNKMFZtRnNkV1U3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdWMybG5iblZ0UFdKdVUybG5UblZ0TzBKcFowbHVkR1ZuWlhJdWNISnZkRzkwZVhCbExuUnZRbmwwWlVGeWNtRjVQV0p1Vkc5Q2VYUmxRWEp5WVhrN1FtbG5TVzUwWldkbGNpNXdjbTkwYjNSNWNHVXVaWEYxWVd4elBXSnVSWEYxWVd4ek8wSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMbTFwYmoxaWJrMXBianRDYVdkSmJuUmxaMlZ5TG5CeWIzUnZkSGx3WlM1dFlYZzlZbTVOWVhnN1FtbG5TVzUwWldkbGNpNXdjbTkwYjNSNWNHVXVZVzVrUFdKdVFXNWtPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG05eVBXSnVUM0k3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdWVHOXlQV0p1V0c5eU8wSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMbUZ1WkU1dmREMWlia0Z1WkU1dmREdENhV2RKYm5SbFoyVnlMbkJ5YjNSdmRIbHdaUzV1YjNROVltNU9iM1E3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdWMyaHBablJNWldaMFBXSnVVMmhwWm5STVpXWjBPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG5Ob2FXWjBVbWxuYUhROVltNVRhR2xtZEZKcFoyaDBPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG1kbGRFeHZkMlZ6ZEZObGRFSnBkRDFpYmtkbGRFeHZkMlZ6ZEZObGRFSnBkRHRDYVdkSmJuUmxaMlZ5TG5CeWIzUnZkSGx3WlM1aWFYUkRiM1Z1ZEQxaWJrSnBkRU52ZFc1ME8wSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMblJsYzNSQ2FYUTlZbTVVWlhOMFFtbDBPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG5ObGRFSnBkRDFpYmxObGRFSnBkRHRDYVdkSmJuUmxaMlZ5TG5CeWIzUnZkSGx3WlM1amJHVmhja0pwZEQxaWJrTnNaV0Z5UW1sME8wSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMbVpzYVhCQ2FYUTlZbTVHYkdsd1FtbDBPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG1Ga1pEMWlia0ZrWkR0Q2FXZEpiblJsWjJWeUxuQnliM1J2ZEhsd1pTNXpkV0owY21GamREMWlibE4xWW5SeVlXTjBPMEpwWjBsdWRHVm5aWEl1Y0hKdmRHOTBlWEJsTG0xMWJIUnBjR3g1UFdKdVRYVnNkR2x3YkhrN1FtbG5TVzUwWldkbGNpNXdjbTkwYjNSNWNHVXVaR2wyYVdSbFBXSnVSR2wyYVdSbE8wSnBaMGx1ZEdWblpYSXVjSEp2ZEc5MGVYQmxMbkpsYldGcGJtUmxjajFpYmxKbGJXRnBibVJsY2p0Q2FXZEpiblJsWjJWeUxuQnliM1J2ZEhsd1pTNWthWFpwWkdWQmJtUlNaVzFoYVc1a1pYSTlZbTVFYVhacFpHVkJibVJTWlcxaGFXNWtaWEk3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdWJXOWtVRzkzUFdKdVRXOWtVRzkzTzBKcFowbHVkR1ZuWlhJdWNISnZkRzkwZVhCbExtMXZaRWx1ZG1WeWMyVTlZbTVOYjJSSmJuWmxjbk5sTzBKcFowbHVkR1ZuWlhJdWNISnZkRzkwZVhCbExuQnZkejFpYmxCdmR6dENhV2RKYm5SbFoyVnlMbkJ5YjNSdmRIbHdaUzVuWTJROVltNUhRMFE3UW1sblNXNTBaV2RsY2k1d2NtOTBiM1I1Y0dVdWFYTlFjbTlpWVdKc1pWQnlhVzFsUFdKdVNYTlFjbTlpWVdKc1pWQnlhVzFsTzBKcFowbHVkR1ZuWlhJdWNISnZkRzkwZVhCbExuTnhkV0Z5WlQxaWJsTnhkV0Z5WlR0Y2JpOHFJU0FvWXlrZ1ZHOXRJRmQxSUh3Z2FIUjBjRG92TDNkM2R5MWpjeTF6ZEhWa1pXNTBjeTV6ZEdGdVptOXlaQzVsWkhVdmZuUnFkeTlxYzJKdUwxeHVJQ292WEc1bWRXNWpkR2x2YmlCQmNtTm1iM1Z5S0NsN2RHaHBjeTVwUFRBN2RHaHBjeTVxUFRBN2RHaHBjeTVUUFc1bGR5QkJjbkpoZVNncGZXWjFibU4wYVc5dUlFRlNRelJwYm1sMEtHUXBlM1poY2lCakxHRXNZanRtYjNJb1l6MHdPMk04TWpVMk95c3JZeWw3ZEdocGN5NVRXMk5kUFdOOVlUMHdPMlp2Y2loalBUQTdZend5TlRZN0t5dGpLWHRoUFNoaEszUm9hWE11VTF0alhTdGtXMk1sWkM1c1pXNW5kR2hkS1NZeU5UVTdZajEwYUdsekxsTmJZMTA3ZEdocGN5NVRXMk5kUFhSb2FYTXVVMXRoWFR0MGFHbHpMbE5iWVYwOVluMTBhR2x6TG1rOU1EdDBhR2x6TG1vOU1IMW1kVzVqZEdsdmJpQkJVa00wYm1WNGRDZ3BlM1poY2lCaE8zUm9hWE11YVQwb2RHaHBjeTVwS3pFcEpqSTFOVHQwYUdsekxtbzlLSFJvYVhNdWFpdDBhR2x6TGxOYmRHaHBjeTVwWFNrbU1qVTFPMkU5ZEdocGN5NVRXM1JvYVhNdWFWMDdkR2hwY3k1VFczUm9hWE11YVYwOWRHaHBjeTVUVzNSb2FYTXVhbDA3ZEdocGN5NVRXM1JvYVhNdWFsMDlZVHR5WlhSMWNtNGdkR2hwY3k1VFd5aGhLM1JvYVhNdVUxdDBhR2x6TG1sZEtTWXlOVFZkZlVGeVkyWnZkWEl1Y0hKdmRHOTBlWEJsTG1sdWFYUTlRVkpETkdsdWFYUTdRWEpqWm05MWNpNXdjbTkwYjNSNWNHVXVibVY0ZEQxQlVrTTBibVY0ZER0bWRXNWpkR2x2YmlCd2NtNW5YMjVsZDNOMFlYUmxLQ2w3Y21WMGRYSnVJRzVsZHlCQmNtTm1iM1Z5S0NsOWRtRnlJSEp1WjE5d2MybDZaVDB5TlRZN1hHNHZLaUVnS0dNcElGUnZiU0JYZFNCOElHaDBkSEE2THk5M2QzY3RZM010YzNSMVpHVnVkSE11YzNSaGJtWnZjbVF1WldSMUwzNTBhbmN2YW5OaWJpOWNiaUFxTDF4dWRtRnlJSEp1WjE5emRHRjBaVHQyWVhJZ2NtNW5YM0J2YjJ3N2RtRnlJSEp1WjE5d2NIUnlPMloxYm1OMGFXOXVJSEp1WjE5elpXVmtYMmx1ZENoaEtYdHlibWRmY0c5dmJGdHlibWRmY0hCMGNpc3JYVjQ5WVNZeU5UVTdjbTVuWDNCdmIyeGJjbTVuWDNCd2RISXJLMTFlUFNoaFBqNDRLU1l5TlRVN2NtNW5YM0J2YjJ4YmNtNW5YM0J3ZEhJcksxMWVQU2hoUGo0eE5pa21NalUxTzNKdVoxOXdiMjlzVzNKdVoxOXdjSFJ5S3l0ZFhqMG9ZVDQrTWpRcEpqSTFOVHRwWmloeWJtZGZjSEIwY2o0OWNtNW5YM0J6YVhwbEtYdHlibWRmY0hCMGNpMDljbTVuWDNCemFYcGxmWDFtZFc1amRHbHZiaUJ5Ym1kZmMyVmxaRjkwYVcxbEtDbDdjbTVuWDNObFpXUmZhVzUwS0c1bGR5QkVZWFJsS0NrdVoyVjBWR2x0WlNncEtYMXBaaWh5Ym1kZmNHOXZiRDA5Ym5Wc2JDbDdjbTVuWDNCdmIydzlibVYzSUVGeWNtRjVLQ2s3Y201blgzQndkSEk5TUR0MllYSWdkRHRwWmloM2FXNWtiM2N1WTNKNWNIUnZKaVozYVc1a2IzY3VZM0o1Y0hSdkxtZGxkRkpoYm1SdmJWWmhiSFZsY3lsN2RtRnlJSFZoUFc1bGR5QlZhVzUwT0VGeWNtRjVLRE15S1R0M2FXNWtiM2N1WTNKNWNIUnZMbWRsZEZKaGJtUnZiVlpoYkhWbGN5aDFZU2s3Wm05eUtIUTlNRHQwUERNeU95c3JkQ2w3Y201blgzQnZiMnhiY201blgzQndkSElySzEwOWRXRmJkRjE5ZldsbUtHNWhkbWxuWVhSdmNpNWhjSEJPWVcxbFBUMWNJazVsZEhOallYQmxYQ0ltSm01aGRtbG5ZWFJ2Y2k1aGNIQldaWEp6YVc5dVBGd2lOVndpSmlaM2FXNWtiM2N1WTNKNWNIUnZLWHQyWVhJZ2VqMTNhVzVrYjNjdVkzSjVjSFJ2TG5KaGJtUnZiU2d6TWlrN1ptOXlLSFE5TUR0MFBIb3ViR1Z1WjNSb095c3JkQ2w3Y201blgzQnZiMnhiY201blgzQndkSElySzEwOWVpNWphR0Z5UTI5a1pVRjBLSFFwSmpJMU5YMTlkMmhwYkdVb2NtNW5YM0J3ZEhJOGNtNW5YM0J6YVhwbEtYdDBQVTFoZEdndVpteHZiM0lvTmpVMU16WXFUV0YwYUM1eVlXNWtiMjBvS1NrN2NtNW5YM0J2YjJ4YmNtNW5YM0J3ZEhJcksxMDlkRDQrUGpnN2NtNW5YM0J2YjJ4YmNtNW5YM0J3ZEhJcksxMDlkQ1l5TlRWOWNtNW5YM0J3ZEhJOU1EdHlibWRmYzJWbFpGOTBhVzFsS0NsOVpuVnVZM1JwYjI0Z2NtNW5YMmRsZEY5aWVYUmxLQ2w3YVdZb2NtNW5YM04wWVhSbFBUMXVkV3hzS1h0eWJtZGZjMlZsWkY5MGFXMWxLQ2s3Y201blgzTjBZWFJsUFhCeWJtZGZibVYzYzNSaGRHVW9LVHR5Ym1kZmMzUmhkR1V1YVc1cGRDaHlibWRmY0c5dmJDazdabTl5S0hKdVoxOXdjSFJ5UFRBN2NtNW5YM0J3ZEhJOGNtNW5YM0J2YjJ3dWJHVnVaM1JvT3lzcmNtNW5YM0J3ZEhJcGUzSnVaMTl3YjI5c1czSnVaMTl3Y0hSeVhUMHdmWEp1WjE5d2NIUnlQVEI5Y21WMGRYSnVJSEp1WjE5emRHRjBaUzV1WlhoMEtDbDlablZ1WTNScGIyNGdjbTVuWDJkbGRGOWllWFJsY3loaUtYdDJZWElnWVR0bWIzSW9ZVDB3TzJFOFlpNXNaVzVuZEdnN0t5dGhLWHRpVzJGZFBYSnVaMTluWlhSZllubDBaU2dwZlgxbWRXNWpkR2x2YmlCVFpXTjFjbVZTWVc1a2IyMG9LWHQ5VTJWamRYSmxVbUZ1Wkc5dExuQnliM1J2ZEhsd1pTNXVaWGgwUW5sMFpYTTljbTVuWDJkbGRGOWllWFJsY3p0Y2JpOHFJU0FvWXlrZ1ZHOXRJRmQxSUh3Z2FIUjBjRG92TDNkM2R5MWpjeTF6ZEhWa1pXNTBjeTV6ZEdGdVptOXlaQzVsWkhVdmZuUnFkeTlxYzJKdUwxeHVJQ292WEc1bWRXNWpkR2x2YmlCd1lYSnpaVUpwWjBsdWRDaGlMR0VwZTNKbGRIVnliaUJ1WlhjZ1FtbG5TVzUwWldkbGNpaGlMR0VwZldaMWJtTjBhVzl1SUd4cGJtVmljbXNvWXl4a0tYdDJZWElnWVQxY0lsd2lPM1poY2lCaVBUQTdkMmhwYkdVb1lpdGtQR011YkdWdVozUm9LWHRoS3oxakxuTjFZbk4wY21sdVp5aGlMR0lyWkNrclhDSmNYRzVjSWp0aUt6MWtmWEpsZEhWeWJpQmhLMk11YzNWaWMzUnlhVzVuS0dJc1l5NXNaVzVuZEdncGZXWjFibU4wYVc5dUlHSjVkR1V5U0dWNEtHRXBlMmxtS0dFOE1UWXBlM0psZEhWeWJsd2lNRndpSzJFdWRHOVRkSEpwYm1jb01UWXBmV1ZzYzJWN2NtVjBkWEp1SUdFdWRHOVRkSEpwYm1jb01UWXBmWDFtZFc1amRHbHZiaUJ3YTJOek1YQmhaRElvWlN4b0tYdHBaaWhvUEdVdWJHVnVaM1JvS3pFeEtYdGhiR1Z5ZENoY0lrMWxjM05oWjJVZ2RHOXZJR3h2Ym1jZ1ptOXlJRkpUUVZ3aUtUdHlaWFIxY200Z2JuVnNiSDEyWVhJZ1p6MXVaWGNnUVhKeVlYa29LVHQyWVhJZ1pEMWxMbXhsYm1kMGFDMHhPM2RvYVd4bEtHUStQVEFtSm1nK01DbDdkbUZ5SUdZOVpTNWphR0Z5UTI5a1pVRjBLR1F0TFNrN2FXWW9aand4TWpncGUyZGJMUzFvWFQxbWZXVnNjMlY3YVdZb0tHWStNVEkzS1NZbUtHWThNakEwT0NrcGUyZGJMUzFvWFQwb1ppWTJNeWw4TVRJNE8yZGJMUzFvWFQwb1pqNCtOaWw4TVRreWZXVnNjMlY3WjFzdExXaGRQU2htSmpZektYd3hNamc3WjFzdExXaGRQU2dvWmo0K05pa21Oak1wZkRFeU9EdG5XeTB0YUYwOUtHWStQakV5S1h3eU1qUjlmWDFuV3kwdGFGMDlNRHQyWVhJZ1lqMXVaWGNnVTJWamRYSmxVbUZ1Wkc5dEtDazdkbUZ5SUdFOWJtVjNJRUZ5Y21GNUtDazdkMmhwYkdVb2FENHlLWHRoV3pCZFBUQTdkMmhwYkdVb1lWc3dYVDA5TUNsN1lpNXVaWGgwUW5sMFpYTW9ZU2w5WjFzdExXaGRQV0ZiTUYxOVoxc3RMV2hkUFRJN1oxc3RMV2hkUFRBN2NtVjBkWEp1SUc1bGR5QkNhV2RKYm5SbFoyVnlLR2NwZldaMWJtTjBhVzl1SUc5aFpYQmZiV2RtTVY5aGNuSW9ZeXhoTEdVcGUzWmhjaUJpUFZ3aVhDSXNaRDB3TzNkb2FXeGxLR0l1YkdWdVozUm9QR0VwZTJJclBXVW9VM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaUzVoY0hCc2VTaFRkSEpwYm1jc1l5NWpiMjVqWVhRb1d5aGtKalF5TnpneE9UQXdPREFwUGo0eU5Dd29aQ1l4TmpjeE1UWTRNQ2srUGpFMkxDaGtKalkxTWpnd0tUNCtPQ3hrSmpJMU5WMHBLU2s3WkNzOU1YMXlaWFIxY200Z1luMTJZWElnVTBoQk1WOVRTVnBGUFRJd08yWjFibU4wYVc5dUlHOWhaWEJmY0dGa0tHd3NZU3hqS1h0cFppaHNMbXhsYm1kMGFDc3lLbE5JUVRGZlUwbGFSU3N5UG1FcGUzUm9jbTkzWENKTlpYTnpZV2RsSUhSdmJ5QnNiMjVuSUdadmNpQlNVMEZjSW4xMllYSWdhRDFjSWx3aUxHUTdabTl5S0dROU1EdGtQR0V0YkM1c1pXNW5kR2d0TWlwVFNFRXhYMU5KV2tVdE1qdGtLejB4S1h0b0t6MWNJbHhjZURBd1hDSjlkbUZ5SUdVOWNuTjBjbDl6YUdFeEtGd2lYQ0lwSzJnclhDSmNYSGd3TVZ3aUsydzdkbUZ5SUdZOWJtVjNJRUZ5Y21GNUtGTklRVEZmVTBsYVJTazdibVYzSUZObFkzVnlaVkpoYm1SdmJTZ3BMbTVsZUhSQ2VYUmxjeWhtS1R0MllYSWdaejF2WVdWd1gyMW5aakZmWVhKeUtHWXNaUzVzWlc1bmRHZ3NZM3g4Y25OMGNsOXphR0V4S1R0MllYSWdhejFiWFR0bWIzSW9aRDB3TzJROFpTNXNaVzVuZEdnN1pDczlNU2w3YTF0a1hUMWxMbU5vWVhKRGIyUmxRWFFvWkNsZVp5NWphR0Z5UTI5a1pVRjBLR1FwZlhaaGNpQnFQVzloWlhCZmJXZG1NVjloY25Jb2F5eG1MbXhsYm1kMGFDeHljM1J5WDNOb1lURXBPM1poY2lCaVBWc3dYVHRtYjNJb1pEMHdPMlE4Wmk1c1pXNW5kR2c3WkNzOU1TbDdZbHRrS3pGZFBXWmJaRjFlYWk1amFHRnlRMjlrWlVGMEtHUXBmWEpsZEhWeWJpQnVaWGNnUW1sblNXNTBaV2RsY2loaUxtTnZibU5oZENocktTbDlablZ1WTNScGIyNGdVbE5CUzJWNUtDbDdkR2hwY3k1dVBXNTFiR3c3ZEdocGN5NWxQVEE3ZEdocGN5NWtQVzUxYkd3N2RHaHBjeTV3UFc1MWJHdzdkR2hwY3k1eFBXNTFiR3c3ZEdocGN5NWtiWEF4UFc1MWJHdzdkR2hwY3k1a2JYRXhQVzUxYkd3N2RHaHBjeTVqYjJWbVpqMXVkV3hzZldaMWJtTjBhVzl1SUZKVFFWTmxkRkIxWW14cFl5aGlMR0VwZTNSb2FYTXVhWE5RZFdKc2FXTTlkSEoxWlR0cFppaDBlWEJsYjJZZ1lpRTlQVndpYzNSeWFXNW5YQ0lwZTNSb2FYTXViajFpTzNSb2FYTXVaVDFoZldWc2MyVjdhV1lvWWlFOWJuVnNiQ1ltWVNFOWJuVnNiQ1ltWWk1c1pXNW5kR2crTUNZbVlTNXNaVzVuZEdnK01DbDdkR2hwY3k1dVBYQmhjbk5sUW1sblNXNTBLR0lzTVRZcE8zUm9hWE11WlQxd1lYSnpaVWx1ZENoaExERTJLWDFsYkhObGUyRnNaWEowS0Z3aVNXNTJZV3hwWkNCU1UwRWdjSFZpYkdsaklHdGxlVndpS1gxOWZXWjFibU4wYVc5dUlGSlRRVVJ2VUhWaWJHbGpLR0VwZTNKbGRIVnliaUJoTG0xdlpGQnZkMGx1ZENoMGFHbHpMbVVzZEdocGN5NXVLWDFtZFc1amRHbHZiaUJTVTBGRmJtTnllWEIwS0dRcGUzWmhjaUJoUFhCclkzTXhjR0ZrTWloa0xDaDBhR2x6TG00dVltbDBUR1Z1WjNSb0tDa3JOeWsrUGpNcE8ybG1LR0U5UFc1MWJHd3BlM0psZEhWeWJpQnVkV3hzZlhaaGNpQmxQWFJvYVhNdVpHOVFkV0pzYVdNb1lTazdhV1lvWlQwOWJuVnNiQ2w3Y21WMGRYSnVJRzUxYkd4OWRtRnlJR0k5WlM1MGIxTjBjbWx1WnlneE5pazdhV1lvS0dJdWJHVnVaM1JvSmpFcFBUMHdLWHR5WlhSMWNtNGdZbjFsYkhObGUzSmxkSFZ5Ymx3aU1Gd2lLMko5ZldaMWJtTjBhVzl1SUZKVFFVVnVZM0o1Y0hSUFFVVlFLR1VzWkNsN2RtRnlJR0U5YjJGbGNGOXdZV1FvWlN3b2RHaHBjeTV1TG1KcGRFeGxibWQwYUNncEt6Y3BQajR6TEdRcE8ybG1LR0U5UFc1MWJHd3BlM0psZEhWeWJpQnVkV3hzZlhaaGNpQm1QWFJvYVhNdVpHOVFkV0pzYVdNb1lTazdhV1lvWmowOWJuVnNiQ2w3Y21WMGRYSnVJRzUxYkd4OWRtRnlJR0k5Wmk1MGIxTjBjbWx1WnlneE5pazdhV1lvS0dJdWJHVnVaM1JvSmpFcFBUMHdLWHR5WlhSMWNtNGdZbjFsYkhObGUzSmxkSFZ5Ymx3aU1Gd2lLMko5ZlZKVFFVdGxlUzV3Y205MGIzUjVjR1V1Wkc5UWRXSnNhV005VWxOQlJHOVFkV0pzYVdNN1VsTkJTMlY1TG5CeWIzUnZkSGx3WlM1elpYUlFkV0pzYVdNOVVsTkJVMlYwVUhWaWJHbGpPMUpUUVV0bGVTNXdjbTkwYjNSNWNHVXVaVzVqY25sd2REMVNVMEZGYm1OeWVYQjBPMUpUUVV0bGVTNXdjbTkwYjNSNWNHVXVaVzVqY25sd2RFOUJSVkE5VWxOQlJXNWpjbmx3ZEU5QlJWQTdVbE5CUzJWNUxuQnliM1J2ZEhsd1pTNTBlWEJsUFZ3aVVsTkJYQ0k3WEc0dktpRWdLR01wSUZSdmJTQlhkU0I4SUdoMGRIQTZMeTkzZDNjdFkzTXRjM1IxWkdWdWRITXVjM1JoYm1admNtUXVaV1IxTDM1MGFuY3Zhbk5pYmk5Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnY0d0amN6RjFibkJoWkRJb1p5eHFLWHQyWVhJZ1lUMW5MblJ2UW5sMFpVRnljbUY1S0NrN2RtRnlJR1k5TUR0M2FHbHNaU2htUEdFdWJHVnVaM1JvSmlaaFcyWmRQVDB3S1hzcksyWjlhV1lvWVM1c1pXNW5kR2d0WmlFOWFpMHhmSHhoVzJaZElUMHlLWHR5WlhSMWNtNGdiblZzYkgwcksyWTdkMmhwYkdVb1lWdG1YU0U5TUNsN2FXWW9LeXRtUGoxaExteGxibWQwYUNsN2NtVjBkWEp1SUc1MWJHeDlmWFpoY2lCbFBWd2lYQ0k3ZDJocGJHVW9LeXRtUEdFdWJHVnVaM1JvS1h0MllYSWdhRDFoVzJaZEpqSTFOVHRwWmlob1BERXlPQ2w3WlNzOVUzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTaG9LWDFsYkhObGUybG1LQ2hvUGpFNU1Ta21KaWhvUERJeU5Da3BlMlVyUFZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb0tDaG9Kak14S1R3OE5pbDhLR0ZiWmlzeFhTWTJNeWtwT3lzclpuMWxiSE5sZTJVclBWTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9LQ2hvSmpFMUtUdzhNVElwZkNnb1lWdG1LekZkSmpZektUdzhOaWw4S0dGYlppc3lYU1kyTXlrcE8yWXJQVEo5ZlgxeVpYUjFjbTRnWlgxbWRXNWpkR2x2YmlCdllXVndYMjFuWmpGZmMzUnlLR01zWVN4bEtYdDJZWElnWWoxY0lsd2lMR1E5TUR0M2FHbHNaU2hpTG14bGJtZDBhRHhoS1h0aUt6MWxLR01yVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlM1aGNIQnNlU2hUZEhKcGJtY3NXeWhrSmpReU56Z3hPVEF3T0RBcFBqNHlOQ3dvWkNZeE5qY3hNVFk0TUNrK1BqRTJMQ2hrSmpZMU1qZ3dLVDQrT0N4a0pqSTFOVjBwS1R0a0t6MHhmWEpsZEhWeWJpQmlmWFpoY2lCVFNFRXhYMU5KV2tVOU1qQTdablZ1WTNScGIyNGdiMkZsY0Y5MWJuQmhaQ2hzTEdJc1pTbDdiRDFzTG5SdlFubDBaVUZ5Y21GNUtDazdkbUZ5SUdZN1ptOXlLR1k5TUR0bVBHd3ViR1Z1WjNSb08yWXJQVEVwZTJ4YlpsMG1QVEkxTlgxM2FHbHNaU2hzTG14bGJtZDBhRHhpS1h0c0xuVnVjMmhwWm5Rb01DbDliRDFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsTG1Gd2NHeDVLRk4wY21sdVp5eHNLVHRwWmloc0xteGxibWQwYUR3eUtsTklRVEZmVTBsYVJTc3lLWHQwYUhKdmQxd2lRMmx3YUdWeUlIUnZieUJ6YUc5eWRGd2lmWFpoY2lCalBXd3VjM1ZpYzNSeUtERXNVMGhCTVY5VFNWcEZLVHQyWVhJZ2J6MXNMbk4xWW5OMGNpaFRTRUV4WDFOSldrVXJNU2s3ZG1GeUlHMDliMkZsY0Y5dFoyWXhYM04wY2lodkxGTklRVEZmVTBsYVJTeGxmSHh5YzNSeVgzTm9ZVEVwTzNaaGNpQm9QVnRkTEdZN1ptOXlLR1k5TUR0bVBHTXViR1Z1WjNSb08yWXJQVEVwZTJoYlpsMDlZeTVqYUdGeVEyOWtaVUYwS0dZcFhtMHVZMmhoY2tOdlpHVkJkQ2htS1gxMllYSWdhajF2WVdWd1gyMW5aakZmYzNSeUtGTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVXVZWEJ3Ykhrb1UzUnlhVzVuTEdncExHd3ViR1Z1WjNSb0xWTklRVEZmVTBsYVJTeHljM1J5WDNOb1lURXBPM1poY2lCblBWdGRPMlp2Y2lobVBUQTdaanh2TG14bGJtZDBhRHRtS3oweEtYdG5XMlpkUFc4dVkyaGhja052WkdWQmRDaG1LVjVxTG1Ob1lYSkRiMlJsUVhRb1ppbDlaejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsTG1Gd2NHeDVLRk4wY21sdVp5eG5LVHRwWmlobkxuTjFZbk4wY2lnd0xGTklRVEZmVTBsYVJTa2hQVDF5YzNSeVgzTm9ZVEVvWENKY0lpa3BlM1JvY205M1hDSklZWE5vSUcxcGMyMWhkR05vWENKOVp6MW5Mbk4xWW5OMGNpaFRTRUV4WDFOSldrVXBPM1poY2lCaFBXY3VhVzVrWlhoUFppaGNJbHhjZURBeFhDSXBPM1poY2lCclBTaGhJVDB0TVNrL1p5NXpkV0p6ZEhJb01DeGhLUzVzWVhOMFNXNWtaWGhQWmloY0lseGNlREF3WENJcE9pMHhPMmxtS0dzck1TRTlZU2w3ZEdoeWIzZGNJazFoYkdadmNtMWxaQ0JrWVhSaFhDSjljbVYwZFhKdUlHY3VjM1ZpYzNSeUtHRXJNU2w5Wm5WdVkzUnBiMjRnVWxOQlUyVjBVSEpwZG1GMFpTaGpMR0VzWWlsN2RHaHBjeTVwYzFCeWFYWmhkR1U5ZEhKMVpUdHBaaWgwZVhCbGIyWWdZeUU5UFZ3aWMzUnlhVzVuWENJcGUzUm9hWE11Ymoxak8zUm9hWE11WlQxaE8zUm9hWE11WkQxaWZXVnNjMlY3YVdZb1l5RTliblZzYkNZbVlTRTliblZzYkNZbVl5NXNaVzVuZEdnK01DWW1ZUzVzWlc1bmRHZytNQ2w3ZEdocGN5NXVQWEJoY25ObFFtbG5TVzUwS0dNc01UWXBPM1JvYVhNdVpUMXdZWEp6WlVsdWRDaGhMREUyS1R0MGFHbHpMbVE5Y0dGeWMyVkNhV2RKYm5Rb1lpd3hOaWw5Wld4elpYdGhiR1Z5ZENoY0lrbHVkbUZzYVdRZ1VsTkJJSEJ5YVhaaGRHVWdhMlY1WENJcGZYMTlablZ1WTNScGIyNGdVbE5CVTJWMFVISnBkbUYwWlVWNEtHY3NaQ3hsTEdNc1lpeGhMR2dzWmlsN2RHaHBjeTVwYzFCeWFYWmhkR1U5ZEhKMVpUdHBaaWhuUFQxdWRXeHNLWHQwYUhKdmQxd2lVbE5CVTJWMFVISnBkbUYwWlVWNElFNGdQVDBnYm5Wc2JGd2lmV2xtS0dROVBXNTFiR3dwZTNSb2NtOTNYQ0pTVTBGVFpYUlFjbWwyWVhSbFJYZ2dSU0E5UFNCdWRXeHNYQ0o5YVdZb1p5NXNaVzVuZEdnOVBUQXBlM1JvY205M1hDSlNVMEZUWlhSUWNtbDJZWFJsUlhnZ1RpNXNaVzVuZEdnZ1BUMGdNRndpZldsbUtHUXViR1Z1WjNSb1BUMHdLWHQwYUhKdmQxd2lVbE5CVTJWMFVISnBkbUYwWlVWNElFVXViR1Z1WjNSb0lEMDlJREJjSW4xcFppaG5JVDF1ZFd4c0ppWmtJVDF1ZFd4c0ppWm5MbXhsYm1kMGFENHdKaVprTG14bGJtZDBhRDR3S1h0MGFHbHpMbTQ5Y0dGeWMyVkNhV2RKYm5Rb1p5d3hOaWs3ZEdocGN5NWxQWEJoY25ObFNXNTBLR1FzTVRZcE8zUm9hWE11WkQxd1lYSnpaVUpwWjBsdWRDaGxMREUyS1R0MGFHbHpMbkE5Y0dGeWMyVkNhV2RKYm5Rb1l5d3hOaWs3ZEdocGN5NXhQWEJoY25ObFFtbG5TVzUwS0dJc01UWXBPM1JvYVhNdVpHMXdNVDF3WVhKelpVSnBaMGx1ZENoaExERTJLVHQwYUdsekxtUnRjVEU5Y0dGeWMyVkNhV2RKYm5Rb2FDd3hOaWs3ZEdocGN5NWpiMlZtWmoxd1lYSnpaVUpwWjBsdWRDaG1MREUyS1gxbGJITmxlMkZzWlhKMEtGd2lTVzUyWVd4cFpDQlNVMEVnY0hKcGRtRjBaU0JyWlhrZ2FXNGdVbE5CVTJWMFVISnBkbUYwWlVWNFhDSXBmWDFtZFc1amRHbHZiaUJTVTBGSFpXNWxjbUYwWlNoaUxHa3BlM1poY2lCaFBXNWxkeUJUWldOMWNtVlNZVzVrYjIwb0tUdDJZWElnWmoxaVBqNHhPM1JvYVhNdVpUMXdZWEp6WlVsdWRDaHBMREUyS1R0MllYSWdZejF1WlhjZ1FtbG5TVzUwWldkbGNpaHBMREUyS1R0bWIzSW9PenNwZTJadmNpZzdPeWw3ZEdocGN5NXdQVzVsZHlCQ2FXZEpiblJsWjJWeUtHSXRaaXd4TEdFcE8ybG1LSFJvYVhNdWNDNXpkV0owY21GamRDaENhV2RKYm5SbFoyVnlMazlPUlNrdVoyTmtLR01wTG1OdmJYQmhjbVZVYnloQ2FXZEpiblJsWjJWeUxrOU9SU2s5UFRBbUpuUm9hWE11Y0M1cGMxQnliMkpoWW14bFVISnBiV1VvTVRBcEtYdGljbVZoYTMxOVptOXlLRHM3S1h0MGFHbHpMbkU5Ym1WM0lFSnBaMGx1ZEdWblpYSW9aaXd4TEdFcE8ybG1LSFJvYVhNdWNTNXpkV0owY21GamRDaENhV2RKYm5SbFoyVnlMazlPUlNrdVoyTmtLR01wTG1OdmJYQmhjbVZVYnloQ2FXZEpiblJsWjJWeUxrOU9SU2s5UFRBbUpuUm9hWE11Y1M1cGMxQnliMkpoWW14bFVISnBiV1VvTVRBcEtYdGljbVZoYTMxOWFXWW9kR2hwY3k1d0xtTnZiWEJoY21WVWJ5aDBhR2x6TG5FcFBEMHdLWHQyWVhJZ2FEMTBhR2x6TG5BN2RHaHBjeTV3UFhSb2FYTXVjVHQwYUdsekxuRTlhSDEyWVhJZ1p6MTBhR2x6TG5BdWMzVmlkSEpoWTNRb1FtbG5TVzUwWldkbGNpNVBUa1VwTzNaaGNpQmtQWFJvYVhNdWNTNXpkV0owY21GamRDaENhV2RKYm5SbFoyVnlMazlPUlNrN2RtRnlJR1U5Wnk1dGRXeDBhWEJzZVNoa0tUdHBaaWhsTG1kalpDaGpLUzVqYjIxd1lYSmxWRzhvUW1sblNXNTBaV2RsY2k1UFRrVXBQVDB3S1h0MGFHbHpMbTQ5ZEdocGN5NXdMbTExYkhScGNHeDVLSFJvYVhNdWNTazdkR2hwY3k1a1BXTXViVzlrU1c1MlpYSnpaU2hsS1R0MGFHbHpMbVJ0Y0RFOWRHaHBjeTVrTG0xdlpDaG5LVHQwYUdsekxtUnRjVEU5ZEdocGN5NWtMbTF2WkNoa0tUdDBhR2x6TG1OdlpXWm1QWFJvYVhNdWNTNXRiMlJKYm5abGNuTmxLSFJvYVhNdWNDazdZbkpsWVd0OWZYMW1kVzVqZEdsdmJpQlNVMEZFYjFCeWFYWmhkR1VvWVNsN2FXWW9kR2hwY3k1d1BUMXVkV3hzZkh4MGFHbHpMbkU5UFc1MWJHd3BlM0psZEhWeWJpQmhMbTF2WkZCdmR5aDBhR2x6TG1Rc2RHaHBjeTV1S1gxMllYSWdZejFoTG0xdlpDaDBhR2x6TG5BcExtMXZaRkJ2ZHloMGFHbHpMbVJ0Y0RFc2RHaHBjeTV3S1R0MllYSWdZajFoTG0xdlpDaDBhR2x6TG5FcExtMXZaRkJ2ZHloMGFHbHpMbVJ0Y1RFc2RHaHBjeTV4S1R0M2FHbHNaU2hqTG1OdmJYQmhjbVZVYnloaUtUd3dLWHRqUFdNdVlXUmtLSFJvYVhNdWNDbDljbVYwZFhKdUlHTXVjM1ZpZEhKaFkzUW9ZaWt1YlhWc2RHbHdiSGtvZEdocGN5NWpiMlZtWmlrdWJXOWtLSFJvYVhNdWNDa3ViWFZzZEdsd2JIa29kR2hwY3k1eEtTNWhaR1FvWWlsOVpuVnVZM1JwYjI0Z1VsTkJSR1ZqY25sd2RDaGlLWHQyWVhJZ1pEMXdZWEp6WlVKcFowbHVkQ2hpTERFMktUdDJZWElnWVQxMGFHbHpMbVJ2VUhKcGRtRjBaU2hrS1R0cFppaGhQVDF1ZFd4c0tYdHlaWFIxY200Z2JuVnNiSDF5WlhSMWNtNGdjR3RqY3pGMWJuQmhaRElvWVN3b2RHaHBjeTV1TG1KcGRFeGxibWQwYUNncEt6Y3BQajR6S1gxbWRXNWpkR2x2YmlCU1UwRkVaV055ZVhCMFQwRkZVQ2hrTEdJcGUzWmhjaUJsUFhCaGNuTmxRbWxuU1c1MEtHUXNNVFlwTzNaaGNpQmhQWFJvYVhNdVpHOVFjbWwyWVhSbEtHVXBPMmxtS0dFOVBXNTFiR3dwZTNKbGRIVnliaUJ1ZFd4c2ZYSmxkSFZ5YmlCdllXVndYM1Z1Y0dGa0tHRXNLSFJvYVhNdWJpNWlhWFJNWlc1bmRHZ29LU3MzS1Q0K015eGlLWDFTVTBGTFpYa3VjSEp2ZEc5MGVYQmxMbVJ2VUhKcGRtRjBaVDFTVTBGRWIxQnlhWFpoZEdVN1VsTkJTMlY1TG5CeWIzUnZkSGx3WlM1elpYUlFjbWwyWVhSbFBWSlRRVk5sZEZCeWFYWmhkR1U3VWxOQlMyVjVMbkJ5YjNSdmRIbHdaUzV6WlhSUWNtbDJZWFJsUlhnOVVsTkJVMlYwVUhKcGRtRjBaVVY0TzFKVFFVdGxlUzV3Y205MGIzUjVjR1V1WjJWdVpYSmhkR1U5VWxOQlIyVnVaWEpoZEdVN1VsTkJTMlY1TG5CeWIzUnZkSGx3WlM1a1pXTnllWEIwUFZKVFFVUmxZM0o1Y0hRN1VsTkJTMlY1TG5CeWIzUnZkSGx3WlM1a1pXTnllWEIwVDBGRlVEMVNVMEZFWldOeWVYQjBUMEZGVUR0Y2JpOHFJU0FvWXlrZ1ZHOXRJRmQxSUh3Z2FIUjBjRG92TDNkM2R5MWpjeTF6ZEhWa1pXNTBjeTV6ZEdGdVptOXlaQzVsWkhVdmZuUnFkeTlxYzJKdUwxeHVJQ292WEc1bWRXNWpkR2x2YmlCRlEwWnBaV3hrUld4bGJXVnVkRVp3S0dJc1lTbDdkR2hwY3k1NFBXRTdkR2hwY3k1eFBXSjlablZ1WTNScGIyNGdabVZHY0VWeGRXRnNjeWhoS1h0cFppaGhQVDEwYUdsektYdHlaWFIxY200Z2RISjFaWDF5WlhSMWNtNG9kR2hwY3k1eExtVnhkV0ZzY3loaExuRXBKaVowYUdsekxuZ3VaWEYxWVd4ektHRXVlQ2twZldaMWJtTjBhVzl1SUdabFJuQlViMEpwWjBsdWRHVm5aWElvS1h0eVpYUjFjbTRnZEdocGN5NTRmV1oxYm1OMGFXOXVJR1psUm5CT1pXZGhkR1VvS1h0eVpYUjFjbTRnYm1WM0lFVkRSbWxsYkdSRmJHVnRaVzUwUm5Bb2RHaHBjeTV4TEhSb2FYTXVlQzV1WldkaGRHVW9LUzV0YjJRb2RHaHBjeTV4S1NsOVpuVnVZM1JwYjI0Z1ptVkdjRUZrWkNoaEtYdHlaWFIxY200Z2JtVjNJRVZEUm1sbGJHUkZiR1Z0Wlc1MFJuQW9kR2hwY3k1eExIUm9hWE11ZUM1aFpHUW9ZUzUwYjBKcFowbHVkR1ZuWlhJb0tTa3ViVzlrS0hSb2FYTXVjU2twZldaMWJtTjBhVzl1SUdabFJuQlRkV0owY21GamRDaGhLWHR5WlhSMWNtNGdibVYzSUVWRFJtbGxiR1JGYkdWdFpXNTBSbkFvZEdocGN5NXhMSFJvYVhNdWVDNXpkV0owY21GamRDaGhMblJ2UW1sblNXNTBaV2RsY2lncEtTNXRiMlFvZEdocGN5NXhLU2w5Wm5WdVkzUnBiMjRnWm1WR2NFMTFiSFJwY0d4NUtHRXBlM0psZEhWeWJpQnVaWGNnUlVOR2FXVnNaRVZzWlcxbGJuUkdjQ2gwYUdsekxuRXNkR2hwY3k1NExtMTFiSFJwY0d4NUtHRXVkRzlDYVdkSmJuUmxaMlZ5S0NrcExtMXZaQ2gwYUdsekxuRXBLWDFtZFc1amRHbHZiaUJtWlVad1UzRjFZWEpsS0NsN2NtVjBkWEp1SUc1bGR5QkZRMFpwWld4a1JXeGxiV1Z1ZEVad0tIUm9hWE11Y1N4MGFHbHpMbmd1YzNGMVlYSmxLQ2t1Ylc5a0tIUm9hWE11Y1NrcGZXWjFibU4wYVc5dUlHWmxSbkJFYVhacFpHVW9ZU2w3Y21WMGRYSnVJRzVsZHlCRlEwWnBaV3hrUld4bGJXVnVkRVp3S0hSb2FYTXVjU3gwYUdsekxuZ3ViWFZzZEdsd2JIa29ZUzUwYjBKcFowbHVkR1ZuWlhJb0tTNXRiMlJKYm5abGNuTmxLSFJvYVhNdWNTa3BMbTF2WkNoMGFHbHpMbkVwS1gxRlEwWnBaV3hrUld4bGJXVnVkRVp3TG5CeWIzUnZkSGx3WlM1bGNYVmhiSE05Wm1WR2NFVnhkV0ZzY3p0RlEwWnBaV3hrUld4bGJXVnVkRVp3TG5CeWIzUnZkSGx3WlM1MGIwSnBaMGx1ZEdWblpYSTlabVZHY0ZSdlFtbG5TVzUwWldkbGNqdEZRMFpwWld4a1JXeGxiV1Z1ZEVad0xuQnliM1J2ZEhsd1pTNXVaV2RoZEdVOVptVkdjRTVsWjJGMFpUdEZRMFpwWld4a1JXeGxiV1Z1ZEVad0xuQnliM1J2ZEhsd1pTNWhaR1E5Wm1WR2NFRmtaRHRGUTBacFpXeGtSV3hsYldWdWRFWndMbkJ5YjNSdmRIbHdaUzV6ZFdKMGNtRmpkRDFtWlVad1UzVmlkSEpoWTNRN1JVTkdhV1ZzWkVWc1pXMWxiblJHY0M1d2NtOTBiM1I1Y0dVdWJYVnNkR2x3YkhrOVptVkdjRTExYkhScGNHeDVPMFZEUm1sbGJHUkZiR1Z0Wlc1MFJuQXVjSEp2ZEc5MGVYQmxMbk54ZFdGeVpUMW1aVVp3VTNGMVlYSmxPMFZEUm1sbGJHUkZiR1Z0Wlc1MFJuQXVjSEp2ZEc5MGVYQmxMbVJwZG1sa1pUMW1aVVp3UkdsMmFXUmxPMloxYm1OMGFXOXVJRVZEVUc5cGJuUkdjQ2hqTEdFc1pDeGlLWHQwYUdsekxtTjFjblpsUFdNN2RHaHBjeTU0UFdFN2RHaHBjeTU1UFdRN2FXWW9ZajA5Ym5Wc2JDbDdkR2hwY3k1NlBVSnBaMGx1ZEdWblpYSXVUMDVGZldWc2MyVjdkR2hwY3k1NlBXSjlkR2hwY3k1NmFXNTJQVzUxYkd4OVpuVnVZM1JwYjI0Z2NHOXBiblJHY0VkbGRGZ29LWHRwWmloMGFHbHpMbnBwYm5ZOVBXNTFiR3dwZTNSb2FYTXVlbWx1ZGoxMGFHbHpMbm91Ylc5a1NXNTJaWEp6WlNoMGFHbHpMbU4xY25abExuRXBmWEpsZEhWeWJpQjBhR2x6TG1OMWNuWmxMbVp5YjIxQ2FXZEpiblJsWjJWeUtIUm9hWE11ZUM1MGIwSnBaMGx1ZEdWblpYSW9LUzV0ZFd4MGFYQnNlU2gwYUdsekxucHBibllwTG0xdlpDaDBhR2x6TG1OMWNuWmxMbkVwS1gxbWRXNWpkR2x2YmlCd2IybHVkRVp3UjJWMFdTZ3BlMmxtS0hSb2FYTXVlbWx1ZGowOWJuVnNiQ2w3ZEdocGN5NTZhVzUyUFhSb2FYTXVlaTV0YjJSSmJuWmxjbk5sS0hSb2FYTXVZM1Z5ZG1VdWNTbDljbVYwZFhKdUlIUm9hWE11WTNWeWRtVXVabkp2YlVKcFowbHVkR1ZuWlhJb2RHaHBjeTU1TG5SdlFtbG5TVzUwWldkbGNpZ3BMbTExYkhScGNHeDVLSFJvYVhNdWVtbHVkaWt1Ylc5a0tIUm9hWE11WTNWeWRtVXVjU2twZldaMWJtTjBhVzl1SUhCdmFXNTBSbkJGY1hWaGJITW9ZU2w3YVdZb1lUMDlkR2hwY3lsN2NtVjBkWEp1SUhSeWRXVjlhV1lvZEdocGN5NXBjMGx1Wm1sdWFYUjVLQ2twZTNKbGRIVnliaUJoTG1selNXNW1hVzVwZEhrb0tYMXBaaWhoTG1selNXNW1hVzVwZEhrb0tTbDdjbVYwZFhKdUlIUm9hWE11YVhOSmJtWnBibWwwZVNncGZYWmhjaUJqTEdJN1l6MWhMbmt1ZEc5Q2FXZEpiblJsWjJWeUtDa3ViWFZzZEdsd2JIa29kR2hwY3k1NktTNXpkV0owY21GamRDaDBhR2x6TG5rdWRHOUNhV2RKYm5SbFoyVnlLQ2t1YlhWc2RHbHdiSGtvWVM1NktTa3ViVzlrS0hSb2FYTXVZM1Z5ZG1VdWNTazdhV1lvSVdNdVpYRjFZV3h6S0VKcFowbHVkR1ZuWlhJdVdrVlNUeWtwZTNKbGRIVnliaUJtWVd4elpYMWlQV0V1ZUM1MGIwSnBaMGx1ZEdWblpYSW9LUzV0ZFd4MGFYQnNlU2gwYUdsekxub3BMbk4xWW5SeVlXTjBLSFJvYVhNdWVDNTBiMEpwWjBsdWRHVm5aWElvS1M1dGRXeDBhWEJzZVNoaExub3BLUzV0YjJRb2RHaHBjeTVqZFhKMlpTNXhLVHR5WlhSMWNtNGdZaTVsY1hWaGJITW9RbWxuU1c1MFpXZGxjaTVhUlZKUEtYMW1kVzVqZEdsdmJpQndiMmx1ZEVad1NYTkpibVpwYm1sMGVTZ3BlMmxtS0NoMGFHbHpMbmc5UFc1MWJHd3BKaVlvZEdocGN5NTVQVDF1ZFd4c0tTbDdjbVYwZFhKdUlIUnlkV1Y5Y21WMGRYSnVJSFJvYVhNdWVpNWxjWFZoYkhNb1FtbG5TVzUwWldkbGNpNWFSVkpQS1NZbUlYUm9hWE11ZVM1MGIwSnBaMGx1ZEdWblpYSW9LUzVsY1hWaGJITW9RbWxuU1c1MFpXZGxjaTVhUlZKUEtYMW1kVzVqZEdsdmJpQndiMmx1ZEVad1RtVm5ZWFJsS0NsN2NtVjBkWEp1SUc1bGR5QkZRMUJ2YVc1MFJuQW9kR2hwY3k1amRYSjJaU3gwYUdsekxuZ3NkR2hwY3k1NUxtNWxaMkYwWlNncExIUm9hWE11ZWlsOVpuVnVZM1JwYjI0Z2NHOXBiblJHY0VGa1pDaHNLWHRwWmloMGFHbHpMbWx6U1c1bWFXNXBkSGtvS1NsN2NtVjBkWEp1SUd4OWFXWW9iQzVwYzBsdVptbHVhWFI1S0NrcGUzSmxkSFZ5YmlCMGFHbHpmWFpoY2lCd1BXd3VlUzUwYjBKcFowbHVkR1ZuWlhJb0tTNXRkV3gwYVhCc2VTaDBhR2x6TG5vcExuTjFZblJ5WVdOMEtIUm9hWE11ZVM1MGIwSnBaMGx1ZEdWblpYSW9LUzV0ZFd4MGFYQnNlU2hzTG5vcEtTNXRiMlFvZEdocGN5NWpkWEoyWlM1eEtUdDJZWElnYnoxc0xuZ3VkRzlDYVdkSmJuUmxaMlZ5S0NrdWJYVnNkR2x3Ykhrb2RHaHBjeTU2S1M1emRXSjBjbUZqZENoMGFHbHpMbmd1ZEc5Q2FXZEpiblJsWjJWeUtDa3ViWFZzZEdsd2JIa29iQzU2S1NrdWJXOWtLSFJvYVhNdVkzVnlkbVV1Y1NrN2FXWW9RbWxuU1c1MFpXZGxjaTVhUlZKUExtVnhkV0ZzY3lodktTbDdhV1lvUW1sblNXNTBaV2RsY2k1YVJWSlBMbVZ4ZFdGc2N5aHdLU2w3Y21WMGRYSnVJSFJvYVhNdWRIZHBZMlVvS1gxeVpYUjFjbTRnZEdocGN5NWpkWEoyWlM1blpYUkpibVpwYm1sMGVTZ3BmWFpoY2lCcVBXNWxkeUJDYVdkSmJuUmxaMlZ5S0Z3aU0xd2lLVHQyWVhJZ1pUMTBhR2x6TG5ndWRHOUNhV2RKYm5SbFoyVnlLQ2s3ZG1GeUlHNDlkR2hwY3k1NUxuUnZRbWxuU1c1MFpXZGxjaWdwTzNaaGNpQmpQV3d1ZUM1MGIwSnBaMGx1ZEdWblpYSW9LVHQyWVhJZ2F6MXNMbmt1ZEc5Q2FXZEpiblJsWjJWeUtDazdkbUZ5SUcwOWJ5NXpjWFZoY21Vb0tUdDJZWElnYVQxdExtMTFiSFJwY0d4NUtHOHBPM1poY2lCa1BXVXViWFZzZEdsd2JIa29iU2s3ZG1GeUlHYzljQzV6Y1hWaGNtVW9LUzV0ZFd4MGFYQnNlU2gwYUdsekxub3BPM1poY2lCaFBXY3VjM1ZpZEhKaFkzUW9aQzV6YUdsbWRFeGxablFvTVNrcExtMTFiSFJwY0d4NUtHd3VlaWt1YzNWaWRISmhZM1FvYVNrdWJYVnNkR2x3Ykhrb2J5a3ViVzlrS0hSb2FYTXVZM1Z5ZG1VdWNTazdkbUZ5SUdnOVpDNXRkV3gwYVhCc2VTaHFLUzV0ZFd4MGFYQnNlU2h3S1M1emRXSjBjbUZqZENodUxtMTFiSFJwY0d4NUtHa3BLUzV6ZFdKMGNtRmpkQ2huTG0xMWJIUnBjR3g1S0hBcEtTNXRkV3gwYVhCc2VTaHNMbm9wTG1Ga1pDaHdMbTExYkhScGNHeDVLR2twS1M1dGIyUW9kR2hwY3k1amRYSjJaUzV4S1R0MllYSWdaajFwTG0xMWJIUnBjR3g1S0hSb2FYTXVlaWt1YlhWc2RHbHdiSGtvYkM1NktTNXRiMlFvZEdocGN5NWpkWEoyWlM1eEtUdHlaWFIxY200Z2JtVjNJRVZEVUc5cGJuUkdjQ2gwYUdsekxtTjFjblpsTEhSb2FYTXVZM1Z5ZG1VdVpuSnZiVUpwWjBsdWRHVm5aWElvWVNrc2RHaHBjeTVqZFhKMlpTNW1jbTl0UW1sblNXNTBaV2RsY2lob0tTeG1LWDFtZFc1amRHbHZiaUJ3YjJsdWRFWndWSGRwWTJVb0tYdHBaaWgwYUdsekxtbHpTVzVtYVc1cGRIa29LU2w3Y21WMGRYSnVJSFJvYVhOOWFXWW9kR2hwY3k1NUxuUnZRbWxuU1c1MFpXZGxjaWdwTG5OcFoyNTFiU2dwUFQwd0tYdHlaWFIxY200Z2RHaHBjeTVqZFhKMlpTNW5aWFJKYm1acGJtbDBlU2dwZlhaaGNpQm5QVzVsZHlCQ2FXZEpiblJsWjJWeUtGd2lNMXdpS1R0MllYSWdZejEwYUdsekxuZ3VkRzlDYVdkSmJuUmxaMlZ5S0NrN2RtRnlJR2c5ZEdocGN5NTVMblJ2UW1sblNXNTBaV2RsY2lncE8zWmhjaUJsUFdndWJYVnNkR2x3Ykhrb2RHaHBjeTU2S1R0MllYSWdhajFsTG0xMWJIUnBjR3g1S0dncExtMXZaQ2gwYUdsekxtTjFjblpsTG5FcE8zWmhjaUJwUFhSb2FYTXVZM1Z5ZG1VdVlTNTBiMEpwWjBsdWRHVm5aWElvS1R0MllYSWdhejFqTG5OeGRXRnlaU2dwTG0xMWJIUnBjR3g1S0djcE8ybG1LQ0ZDYVdkSmJuUmxaMlZ5TGxwRlVrOHVaWEYxWVd4ektHa3BLWHRyUFdzdVlXUmtLSFJvYVhNdWVpNXpjWFZoY21Vb0tTNXRkV3gwYVhCc2VTaHBLU2w5YXoxckxtMXZaQ2gwYUdsekxtTjFjblpsTG5FcE8zWmhjaUJpUFdzdWMzRjFZWEpsS0NrdWMzVmlkSEpoWTNRb1l5NXphR2xtZEV4bFpuUW9NeWt1YlhWc2RHbHdiSGtvYWlrcExuTm9hV1owVEdWbWRDZ3hLUzV0ZFd4MGFYQnNlU2hsS1M1dGIyUW9kR2hwY3k1amRYSjJaUzV4S1R0MllYSWdaajFyTG0xMWJIUnBjR3g1S0djcExtMTFiSFJwY0d4NUtHTXBMbk4xWW5SeVlXTjBLR291YzJocFpuUk1aV1owS0RFcEtTNXphR2xtZEV4bFpuUW9NaWt1YlhWc2RHbHdiSGtvYWlrdWMzVmlkSEpoWTNRb2F5NXpjWFZoY21Vb0tTNXRkV3gwYVhCc2VTaHJLU2t1Ylc5a0tIUm9hWE11WTNWeWRtVXVjU2s3ZG1GeUlHUTlaUzV6Y1hWaGNtVW9LUzV0ZFd4MGFYQnNlU2hsS1M1emFHbG1kRXhsWm5Rb015a3ViVzlrS0hSb2FYTXVZM1Z5ZG1VdWNTazdjbVYwZFhKdUlHNWxkeUJGUTFCdmFXNTBSbkFvZEdocGN5NWpkWEoyWlN4MGFHbHpMbU4xY25abExtWnliMjFDYVdkSmJuUmxaMlZ5S0dJcExIUm9hWE11WTNWeWRtVXVabkp2YlVKcFowbHVkR1ZuWlhJb1ppa3NaQ2w5Wm5WdVkzUnBiMjRnY0c5cGJuUkdjRTExYkhScGNHeDVLR0lwZTJsbUtIUm9hWE11YVhOSmJtWnBibWwwZVNncEtYdHlaWFIxY200Z2RHaHBjMzFwWmloaUxuTnBaMjUxYlNncFBUMHdLWHR5WlhSMWNtNGdkR2hwY3k1amRYSjJaUzVuWlhSSmJtWnBibWwwZVNncGZYWmhjaUJuUFdJN2RtRnlJR1k5Wnk1dGRXeDBhWEJzZVNodVpYY2dRbWxuU1c1MFpXZGxjaWhjSWpOY0lpa3BPM1poY2lCc1BYUm9hWE11Ym1WbllYUmxLQ2s3ZG1GeUlHUTlkR2hwY3p0MllYSWdZenRtYjNJb1l6MW1MbUpwZEV4bGJtZDBhQ2dwTFRJN1l6NHdPeTB0WXlsN1pEMWtMblIzYVdObEtDazdkbUZ5SUdFOVppNTBaWE4wUW1sMEtHTXBPM1poY2lCcVBXY3VkR1Z6ZEVKcGRDaGpLVHRwWmloaElUMXFLWHRrUFdRdVlXUmtLR0UvZEdocGN6cHNLWDE5Y21WMGRYSnVJR1I5Wm5WdVkzUnBiMjRnY0c5cGJuUkdjRTExYkhScGNHeDVWSGR2S0dNc1lTeGlLWHQyWVhJZ1pEdHBaaWhqTG1KcGRFeGxibWQwYUNncFBtSXVZbWwwVEdWdVozUm9LQ2twZTJROVl5NWlhWFJNWlc1bmRHZ29LUzB4ZldWc2MyVjdaRDFpTG1KcGRFeGxibWQwYUNncExURjlkbUZ5SUdZOWRHaHBjeTVqZFhKMlpTNW5aWFJKYm1acGJtbDBlU2dwTzNaaGNpQmxQWFJvYVhNdVlXUmtLR0VwTzNkb2FXeGxLR1ErUFRBcGUyWTlaaTUwZDJsalpTZ3BPMmxtS0dNdWRHVnpkRUpwZENoa0tTbDdhV1lvWWk1MFpYTjBRbWwwS0dRcEtYdG1QV1l1WVdSa0tHVXBmV1ZzYzJWN1pqMW1MbUZrWkNoMGFHbHpLWDE5Wld4elpYdHBaaWhpTG5SbGMzUkNhWFFvWkNrcGUyWTlaaTVoWkdRb1lTbDlmUzB0WkgxeVpYUjFjbTRnWm4xRlExQnZhVzUwUm5BdWNISnZkRzkwZVhCbExtZGxkRmc5Y0c5cGJuUkdjRWRsZEZnN1JVTlFiMmx1ZEVad0xuQnliM1J2ZEhsd1pTNW5aWFJaUFhCdmFXNTBSbkJIWlhSWk8wVkRVRzlwYm5SR2NDNXdjbTkwYjNSNWNHVXVaWEYxWVd4elBYQnZhVzUwUm5CRmNYVmhiSE03UlVOUWIybHVkRVp3TG5CeWIzUnZkSGx3WlM1cGMwbHVabWx1YVhSNVBYQnZhVzUwUm5CSmMwbHVabWx1YVhSNU8wVkRVRzlwYm5SR2NDNXdjbTkwYjNSNWNHVXVibVZuWVhSbFBYQnZhVzUwUm5CT1pXZGhkR1U3UlVOUWIybHVkRVp3TG5CeWIzUnZkSGx3WlM1aFpHUTljRzlwYm5SR2NFRmtaRHRGUTFCdmFXNTBSbkF1Y0hKdmRHOTBlWEJsTG5SM2FXTmxQWEJ2YVc1MFJuQlVkMmxqWlR0RlExQnZhVzUwUm5BdWNISnZkRzkwZVhCbExtMTFiSFJwY0d4NVBYQnZhVzUwUm5CTmRXeDBhWEJzZVR0RlExQnZhVzUwUm5BdWNISnZkRzkwZVhCbExtMTFiSFJwY0d4NVZIZHZQWEJ2YVc1MFJuQk5kV3gwYVhCc2VWUjNienRtZFc1amRHbHZiaUJGUTBOMWNuWmxSbkFvWlN4a0xHTXBlM1JvYVhNdWNUMWxPM1JvYVhNdVlUMTBhR2x6TG1aeWIyMUNhV2RKYm5SbFoyVnlLR1FwTzNSb2FYTXVZajEwYUdsekxtWnliMjFDYVdkSmJuUmxaMlZ5S0dNcE8zUm9hWE11YVc1bWFXNXBkSGs5Ym1WM0lFVkRVRzlwYm5SR2NDaDBhR2x6TEc1MWJHd3NiblZzYkNsOVpuVnVZM1JwYjI0Z1kzVnlkbVZHY0VkbGRGRW9LWHR5WlhSMWNtNGdkR2hwY3k1eGZXWjFibU4wYVc5dUlHTjFjblpsUm5CSFpYUkJLQ2w3Y21WMGRYSnVJSFJvYVhNdVlYMW1kVzVqZEdsdmJpQmpkWEoyWlVad1IyVjBRaWdwZTNKbGRIVnliaUIwYUdsekxtSjlablZ1WTNScGIyNGdZM1Z5ZG1WR2NFVnhkV0ZzY3loaEtYdHBaaWhoUFQxMGFHbHpLWHR5WlhSMWNtNGdkSEoxWlgxeVpYUjFjbTRvZEdocGN5NXhMbVZ4ZFdGc2N5aGhMbkVwSmlaMGFHbHpMbUV1WlhGMVlXeHpLR0V1WVNrbUpuUm9hWE11WWk1bGNYVmhiSE1vWVM1aUtTbDlablZ1WTNScGIyNGdZM1Z5ZG1WR2NFZGxkRWx1Wm1sdWFYUjVLQ2w3Y21WMGRYSnVJSFJvYVhNdWFXNW1hVzVwZEhsOVpuVnVZM1JwYjI0Z1kzVnlkbVZHY0VaeWIyMUNhV2RKYm5SbFoyVnlLR0VwZTNKbGRIVnliaUJ1WlhjZ1JVTkdhV1ZzWkVWc1pXMWxiblJHY0NoMGFHbHpMbkVzWVNsOVpuVnVZM1JwYjI0Z1kzVnlkbVZHY0VSbFkyOWtaVkJ2YVc1MFNHVjRLR1FwZTNOM2FYUmphQ2h3WVhKelpVbHVkQ2hrTG5OMVluTjBjaWd3TERJcExERTJLU2w3WTJGelpTQXdPbkpsZEhWeWJpQjBhR2x6TG1sdVptbHVhWFI1TzJOaGMyVWdNanBqWVhObElETTZjbVYwZFhKdUlHNTFiR3c3WTJGelpTQTBPbU5oYzJVZ05qcGpZWE5sSURjNmRtRnlJR0U5S0dRdWJHVnVaM1JvTFRJcEx6STdkbUZ5SUdNOVpDNXpkV0p6ZEhJb01peGhLVHQyWVhJZ1lqMWtMbk4xWW5OMGNpaGhLeklzWVNrN2NtVjBkWEp1SUc1bGR5QkZRMUJ2YVc1MFJuQW9kR2hwY3l4MGFHbHpMbVp5YjIxQ2FXZEpiblJsWjJWeUtHNWxkeUJDYVdkSmJuUmxaMlZ5S0dNc01UWXBLU3gwYUdsekxtWnliMjFDYVdkSmJuUmxaMlZ5S0c1bGR5QkNhV2RKYm5SbFoyVnlLR0lzTVRZcEtTazdaR1ZtWVhWc2REcHlaWFIxY200Z2JuVnNiSDE5UlVORGRYSjJaVVp3TG5CeWIzUnZkSGx3WlM1blpYUlJQV04xY25abFJuQkhaWFJSTzBWRFEzVnlkbVZHY0M1d2NtOTBiM1I1Y0dVdVoyVjBRVDFqZFhKMlpVWndSMlYwUVR0RlEwTjFjblpsUm5BdWNISnZkRzkwZVhCbExtZGxkRUk5WTNWeWRtVkdjRWRsZEVJN1JVTkRkWEoyWlVad0xuQnliM1J2ZEhsd1pTNWxjWFZoYkhNOVkzVnlkbVZHY0VWeGRXRnNjenRGUTBOMWNuWmxSbkF1Y0hKdmRHOTBlWEJsTG1kbGRFbHVabWx1YVhSNVBXTjFjblpsUm5CSFpYUkpibVpwYm1sMGVUdEZRME4xY25abFJuQXVjSEp2ZEc5MGVYQmxMbVp5YjIxQ2FXZEpiblJsWjJWeVBXTjFjblpsUm5CR2NtOXRRbWxuU1c1MFpXZGxjanRGUTBOMWNuWmxSbkF1Y0hKdmRHOTBlWEJsTG1SbFkyOWtaVkJ2YVc1MFNHVjRQV04xY25abFJuQkVaV052WkdWUWIybHVkRWhsZUR0Y2JpOHFJU0FvWXlrZ1UzUmxabUZ1SUZSb2IyMWhjeUI4SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5aWFYUmpiMmx1YW5NdlltbDBZMjlwYm1wekxXeHBZbHh1SUNvdlhHNUZRMFpwWld4a1JXeGxiV1Z1ZEVad0xuQnliM1J2ZEhsd1pTNW5aWFJDZVhSbFRHVnVaM1JvUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUUxaGRHZ3VabXh2YjNJb0tIUm9hWE11ZEc5Q2FXZEpiblJsWjJWeUtDa3VZbWwwVEdWdVozUm9LQ2tyTnlrdk9DbDlPMFZEVUc5cGJuUkdjQzV3Y205MGIzUjVjR1V1WjJWMFJXNWpiMlJsWkQxbWRXNWpkR2x2YmloaktYdDJZWElnWkQxbWRXNWpkR2x2Ymlob0xHWXBlM1poY2lCblBXZ3VkRzlDZVhSbFFYSnlZWGxWYm5OcFoyNWxaQ2dwTzJsbUtHWThaeTVzWlc1bmRHZ3BlMmM5Wnk1emJHbGpaU2huTG14bGJtZDBhQzFtS1gxbGJITmxlM2RvYVd4bEtHWStaeTVzWlc1bmRHZ3BlMmN1ZFc1emFHbG1kQ2d3S1gxOWNtVjBkWEp1SUdkOU8zWmhjaUJoUFhSb2FYTXVaMlYwV0NncExuUnZRbWxuU1c1MFpXZGxjaWdwTzNaaGNpQmxQWFJvYVhNdVoyVjBXU2dwTG5SdlFtbG5TVzUwWldkbGNpZ3BPM1poY2lCaVBXUW9ZU3d6TWlrN2FXWW9ZeWw3YVdZb1pTNXBjMFYyWlc0b0tTbDdZaTUxYm5Ob2FXWjBLRElwZldWc2MyVjdZaTUxYm5Ob2FXWjBLRE1wZlgxbGJITmxlMkl1ZFc1emFHbG1kQ2cwS1R0aVBXSXVZMjl1WTJGMEtHUW9aU3d6TWlrcGZYSmxkSFZ5YmlCaWZUdEZRMUJ2YVc1MFJuQXVaR1ZqYjJSbFJuSnZiVDFtZFc1amRHbHZiaWhuTEdNcGUzWmhjaUJtUFdOYk1GMDdkbUZ5SUdVOVl5NXNaVzVuZEdndE1UdDJZWElnWkQxakxuTnNhV05sS0RFc01TdGxMeklwTzNaaGNpQmlQV011YzJ4cFkyVW9NU3RsTHpJc01TdGxLVHRrTG5WdWMyaHBablFvTUNrN1lpNTFibk5vYVdaMEtEQXBPM1poY2lCaFBXNWxkeUJDYVdkSmJuUmxaMlZ5S0dRcE8zWmhjaUJvUFc1bGR5QkNhV2RKYm5SbFoyVnlLR0lwTzNKbGRIVnliaUJ1WlhjZ1JVTlFiMmx1ZEVad0tHY3NaeTVtY205dFFtbG5TVzUwWldkbGNpaGhLU3huTG1aeWIyMUNhV2RKYm5SbFoyVnlLR2dwS1gwN1JVTlFiMmx1ZEVad0xtUmxZMjlrWlVaeWIyMUlaWGc5Wm5WdVkzUnBiMjRvWnl4aktYdDJZWElnWmoxakxuTjFZbk4wY2lnd0xESXBPM1poY2lCbFBXTXViR1Z1WjNSb0xUSTdkbUZ5SUdROVl5NXpkV0p6ZEhJb01peGxMeklwTzNaaGNpQmlQV011YzNWaWMzUnlLRElyWlM4eUxHVXZNaWs3ZG1GeUlHRTlibVYzSUVKcFowbHVkR1ZuWlhJb1pDd3hOaWs3ZG1GeUlHZzlibVYzSUVKcFowbHVkR1ZuWlhJb1lpd3hOaWs3Y21WMGRYSnVJRzVsZHlCRlExQnZhVzUwUm5Bb1p5eG5MbVp5YjIxQ2FXZEpiblJsWjJWeUtHRXBMR2N1Wm5KdmJVSnBaMGx1ZEdWblpYSW9hQ2twZlR0RlExQnZhVzUwUm5BdWNISnZkRzkwZVhCbExtRmtaREpFUFdaMWJtTjBhVzl1S0dNcGUybG1LSFJvYVhNdWFYTkpibVpwYm1sMGVTZ3BLWHR5WlhSMWNtNGdZMzFwWmloakxtbHpTVzVtYVc1cGRIa29LU2w3Y21WMGRYSnVJSFJvYVhOOWFXWW9kR2hwY3k1NExtVnhkV0ZzY3loakxuZ3BLWHRwWmloMGFHbHpMbmt1WlhGMVlXeHpLR011ZVNrcGUzSmxkSFZ5YmlCMGFHbHpMblIzYVdObEtDbDljbVYwZFhKdUlIUm9hWE11WTNWeWRtVXVaMlYwU1c1bWFXNXBkSGtvS1gxMllYSWdaejFqTG5ndWMzVmlkSEpoWTNRb2RHaHBjeTU0S1R0MllYSWdaVDFqTG5rdWMzVmlkSEpoWTNRb2RHaHBjeTU1S1R0MllYSWdZVDFsTG1ScGRtbGtaU2huS1R0MllYSWdaRDFoTG5OeGRXRnlaU2dwTG5OMVluUnlZV04wS0hSb2FYTXVlQ2t1YzNWaWRISmhZM1FvWXk1NEtUdDJZWElnWmoxaExtMTFiSFJwY0d4NUtIUm9hWE11ZUM1emRXSjBjbUZqZENoa0tTa3VjM1ZpZEhKaFkzUW9kR2hwY3k1NUtUdHlaWFIxY200Z2JtVjNJRVZEVUc5cGJuUkdjQ2gwYUdsekxtTjFjblpsTEdRc1ppbDlPMFZEVUc5cGJuUkdjQzV3Y205MGIzUjVjR1V1ZEhkcFkyVXlSRDFtZFc1amRHbHZiaWdwZTJsbUtIUm9hWE11YVhOSmJtWnBibWwwZVNncEtYdHlaWFIxY200Z2RHaHBjMzFwWmloMGFHbHpMbmt1ZEc5Q2FXZEpiblJsWjJWeUtDa3VjMmxuYm5WdEtDazlQVEFwZTNKbGRIVnliaUIwYUdsekxtTjFjblpsTG1kbGRFbHVabWx1YVhSNUtDbDlkbUZ5SUdJOWRHaHBjeTVqZFhKMlpTNW1jbTl0UW1sblNXNTBaV2RsY2loQ2FXZEpiblJsWjJWeUxuWmhiSFZsVDJZb01pa3BPM1poY2lCbFBYUm9hWE11WTNWeWRtVXVabkp2YlVKcFowbHVkR1ZuWlhJb1FtbG5TVzUwWldkbGNpNTJZV3gxWlU5bUtETXBLVHQyWVhJZ1lUMTBhR2x6TG5ndWMzRjFZWEpsS0NrdWJYVnNkR2x3Ykhrb1pTa3VZV1JrS0hSb2FYTXVZM1Z5ZG1VdVlTa3VaR2wyYVdSbEtIUm9hWE11ZVM1dGRXeDBhWEJzZVNoaUtTazdkbUZ5SUdNOVlTNXpjWFZoY21Vb0tTNXpkV0owY21GamRDaDBhR2x6TG5ndWJYVnNkR2x3Ykhrb1lpa3BPM1poY2lCa1BXRXViWFZzZEdsd2JIa29kR2hwY3k1NExuTjFZblJ5WVdOMEtHTXBLUzV6ZFdKMGNtRmpkQ2gwYUdsekxua3BPM0psZEhWeWJpQnVaWGNnUlVOUWIybHVkRVp3S0hSb2FYTXVZM1Z5ZG1Vc1l5eGtLWDA3UlVOUWIybHVkRVp3TG5CeWIzUnZkSGx3WlM1dGRXeDBhWEJzZVRKRVBXWjFibU4wYVc5dUtHSXBlMmxtS0hSb2FYTXVhWE5KYm1acGJtbDBlU2dwS1h0eVpYUjFjbTRnZEdocGMzMXBaaWhpTG5OcFoyNTFiU2dwUFQwd0tYdHlaWFIxY200Z2RHaHBjeTVqZFhKMlpTNW5aWFJKYm1acGJtbDBlU2dwZlhaaGNpQm5QV0k3ZG1GeUlHWTlaeTV0ZFd4MGFYQnNlU2h1WlhjZ1FtbG5TVzUwWldkbGNpaGNJak5jSWlrcE8zWmhjaUJzUFhSb2FYTXVibVZuWVhSbEtDazdkbUZ5SUdROWRHaHBjenQyWVhJZ1l6dG1iM0lvWXoxbUxtSnBkRXhsYm1kMGFDZ3BMVEk3WXo0d095MHRZeWw3WkQxa0xuUjNhV05sS0NrN2RtRnlJR0U5Wmk1MFpYTjBRbWwwS0dNcE8zWmhjaUJxUFdjdWRHVnpkRUpwZENoaktUdHBaaWhoSVQxcUtYdGtQV1F1WVdSa01rUW9ZVDkwYUdsek9td3BmWDF5WlhSMWNtNGdaSDA3UlVOUWIybHVkRVp3TG5CeWIzUnZkSGx3WlM1cGMwOXVRM1Z5ZG1VOVpuVnVZM1JwYjI0b0tYdDJZWElnWkQxMGFHbHpMbWRsZEZnb0tTNTBiMEpwWjBsdWRHVm5aWElvS1R0MllYSWdhVDEwYUdsekxtZGxkRmtvS1M1MGIwSnBaMGx1ZEdWblpYSW9LVHQyWVhJZ1pqMTBhR2x6TG1OMWNuWmxMbWRsZEVFb0tTNTBiMEpwWjBsdWRHVm5aWElvS1R0MllYSWdZejEwYUdsekxtTjFjblpsTG1kbGRFSW9LUzUwYjBKcFowbHVkR1ZuWlhJb0tUdDJZWElnYUQxMGFHbHpMbU4xY25abExtZGxkRkVvS1R0MllYSWdaVDFwTG0xMWJIUnBjR3g1S0drcExtMXZaQ2hvS1R0MllYSWdaejFrTG0xMWJIUnBjR3g1S0dRcExtMTFiSFJwY0d4NUtHUXBMbUZrWkNobUxtMTFiSFJwY0d4NUtHUXBLUzVoWkdRb1l5a3ViVzlrS0dncE8zSmxkSFZ5YmlCbExtVnhkV0ZzY3lobktYMDdSVU5RYjJsdWRFWndMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaejFtZFc1amRHbHZiaWdwZTNKbGRIVnlibHdpS0Z3aUszUm9hWE11WjJWMFdDZ3BMblJ2UW1sblNXNTBaV2RsY2lncExuUnZVM1J5YVc1bktDa3JYQ0lzWENJcmRHaHBjeTVuWlhSWktDa3VkRzlDYVdkSmJuUmxaMlZ5S0NrdWRHOVRkSEpwYm1jb0tTdGNJaWxjSW4wN1JVTlFiMmx1ZEVad0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpUMW1kVzVqZEdsdmJpZ3BlM1poY2lCalBYUm9hWE11WTNWeWRtVXVaMlYwVVNncE8ybG1LSFJvYVhNdWFYTkpibVpwYm1sMGVTZ3BLWHQwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pRYjJsdWRDQnBjeUJoZENCcGJtWnBibWwwZVM1Y0lpbDlkbUZ5SUdFOWRHaHBjeTVuWlhSWUtDa3VkRzlDYVdkSmJuUmxaMlZ5S0NrN2RtRnlJR0k5ZEdocGN5NW5aWFJaS0NrdWRHOUNhV2RKYm5SbFoyVnlLQ2s3YVdZb1lTNWpiMjF3WVhKbFZHOG9RbWxuU1c1MFpXZGxjaTVQVGtVcFBEQjhmR0V1WTI5dGNHRnlaVlJ2S0dNdWMzVmlkSEpoWTNRb1FtbG5TVzUwWldkbGNpNVBUa1VwS1Q0d0tYdDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSjRJR052YjNKa2FXNWhkR1VnYjNWMElHOW1JR0p2ZFc1a2Mxd2lLWDFwWmloaUxtTnZiWEJoY21WVWJ5aENhV2RKYm5SbFoyVnlMazlPUlNrOE1IeDhZaTVqYjIxd1lYSmxWRzhvWXk1emRXSjBjbUZqZENoQ2FXZEpiblJsWjJWeUxrOU9SU2twUGpBcGUzUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lua2dZMjl2Y21ScGJtRjBaU0J2ZFhRZ2IyWWdZbTkxYm1SelhDSXBmV2xtS0NGMGFHbHpMbWx6VDI1RGRYSjJaU2dwS1h0MGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKUWIybHVkQ0JwY3lCdWIzUWdiMjRnZEdobElHTjFjblpsTGx3aUtYMXBaaWgwYUdsekxtMTFiSFJwY0d4NUtHTXBMbWx6U1c1bWFXNXBkSGtvS1NsN2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVVHOXBiblFnYVhNZ2JtOTBJR0VnYzJOaGJHRnlJRzExYkhScGNHeGxJRzltSUVjdVhDSXBmWEpsZEhWeWJpQjBjblZsZlR0Y2JpOHFJU0JOYVd0bElGTmhiWFZsYkNBb1l5a2dNakF3T1NCOElHTnZaR1V1WjI5dloyeGxMbU52YlM5d0wycHpiMjR0YzJGdWN5MWxkbUZzWEc0Z0tpOWNiblpoY2lCcWMyOXVVR0Z5YzJVOUtHWjFibU4wYVc5dUtDbDdkbUZ5SUdVOVhDSW9Qem90UDF4Y1hGeGlLRDg2TUh4Yk1TMDVYVnN3TFRsZEtpa29QenBjWEZ4Y0xsc3dMVGxkS3lrL0tEODZXMlZGWFZzckxWMC9XekF0T1YwcktUOWNYRnhjWWlsY0lqdDJZWElnYWowbktEODZXMTVjWEZ4Y01DMWNYRnhjZURBNFhGeGNYSGd3WVMxY1hGeGNlREZtWENKY1hGeGNYRnhjWEYxOFhGeGNYRnhjWEZ3b1B6cGJYQ0l2WEZ4Y1hGeGNYRnhpWm01eWRGMThkVnN3TFRsQkxVWmhMV1pkZXpSOUtTa25PM1poY2lCcFBTY29QenBjSWljcmFpc25LbHdpS1NjN2RtRnlJR1E5Ym1WM0lGSmxaMFY0Y0NoY0lpZy9PbVpoYkhObGZIUnlkV1Y4Ym5Wc2JIeGJYRnhjWEh0Y1hGeGNmVnhjWEZ4YlhGeGNYRjFkZkZ3aUsyVXJYQ0o4WENJcmFTdGNJaWxjSWl4Y0ltZGNJaWs3ZG1GeUlHczlibVYzSUZKbFowVjRjQ2hjSWx4Y1hGeGNYRnhjS0Q4NktGdGVkVjBwZkhVb0xuczBmU2twWENJc1hDSm5YQ0lwTzNaaGNpQm5QWHNuWENJbk9pZGNJaWNzWENJdlhDSTZYQ0l2WENJc1hDSmNYRnhjWENJNlhDSmNYRnhjWENJc1lqcGNJbHhjWWx3aUxHWTZYQ0pjWEdaY0lpeHVPbHdpWEZ4dVhDSXNjanBjSWx4Y2Nsd2lMSFE2WENKY1hIUmNJbjA3Wm5WdVkzUnBiMjRnYUNoc0xHMHNiaWw3Y21WMGRYSnVJRzAvWjF0dFhUcFRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLSEJoY25ObFNXNTBLRzRzTVRZcEtYMTJZWElnWXoxdVpYY2dVM1J5YVc1bktGd2lYQ0lwTzNaaGNpQmhQVndpWEZ4Y1hGd2lPM1poY2lCbVBYdGNJbnRjSWpwUFltcGxZM1FzWENKYlhDSTZRWEp5WVhsOU8zWmhjaUJpUFU5aWFtVmpkQzVvWVhOUGQyNVFjbTl3WlhKMGVUdHlaWFIxY200Z1puVnVZM1JwYjI0b2RTeHhLWHQyWVhJZ2NEMTFMbTFoZEdOb0tHUXBPM1poY2lCNE8zWmhjaUIyUFhCYk1GMDdkbUZ5SUd3OVptRnNjMlU3YVdZb1hDSjdYQ0k5UFQxMktYdDRQWHQ5ZldWc2MyVjdhV1lvWENKYlhDSTlQVDEyS1h0NFBWdGRmV1ZzYzJWN2VEMWJYVHRzUFhSeWRXVjlmWFpoY2lCME8zWmhjaUJ5UFZ0NFhUdG1iM0lvZG1GeUlHODlNUzFzTEcwOWNDNXNaVzVuZEdnN2J6eHRPeXNyYnlsN2RqMXdXMjlkTzNaaGNpQjNPM04zYVhSamFDaDJMbU5vWVhKRGIyUmxRWFFvTUNrcGUyUmxabUYxYkhRNmR6MXlXekJkTzNkYmRIeDhkeTVzWlc1bmRHaGRQU3NvZGlrN2REMTJiMmxrSURBN1luSmxZV3M3WTJGelpTQXpORHAyUFhZdWMzVmljM1J5YVc1bktERXNkaTVzWlc1bmRHZ3RNU2s3YVdZb2RpNXBibVJsZUU5bUtHRXBJVDA5TFRFcGUzWTlkaTV5WlhCc1lXTmxLR3NzYUNsOWR6MXlXekJkTzJsbUtDRjBLWHRwWmloM0lHbHVjM1JoYm1ObGIyWWdRWEp5WVhrcGUzUTlkeTVzWlc1bmRHaDlaV3h6Wlh0MFBYWjhmR003WW5KbFlXdDlmWGRiZEYwOWRqdDBQWFp2YVdRZ01EdGljbVZoYXp0allYTmxJRGt4T25jOWNsc3dYVHR5TG5WdWMyaHBablFvZDF0MGZIeDNMbXhsYm1kMGFGMDlXMTBwTzNROWRtOXBaQ0F3TzJKeVpXRnJPMk5oYzJVZ09UTTZjaTV6YUdsbWRDZ3BPMkp5WldGck8yTmhjMlVnTVRBeU9uYzljbHN3WFR0M1czUjhmSGN1YkdWdVozUm9YVDFtWVd4elpUdDBQWFp2YVdRZ01EdGljbVZoYXp0allYTmxJREV4TURwM1BYSmJNRjA3ZDF0MGZIeDNMbXhsYm1kMGFGMDliblZzYkR0MFBYWnZhV1FnTUR0aWNtVmhhenRqWVhObElERXhOanAzUFhKYk1GMDdkMXQwZkh4M0xteGxibWQwYUYwOWRISjFaVHQwUFhadmFXUWdNRHRpY21WaGF6dGpZWE5sSURFeU16cDNQWEpiTUYwN2NpNTFibk5vYVdaMEtIZGJkSHg4ZHk1c1pXNW5kR2hkUFh0OUtUdDBQWFp2YVdRZ01EdGljbVZoYXp0allYTmxJREV5TlRweUxuTm9hV1owS0NrN1luSmxZV3Q5ZldsbUtHd3BlMmxtS0hJdWJHVnVaM1JvSVQwOU1TbDdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDbDllRDE0V3pCZGZXVnNjMlY3YVdZb2NpNXNaVzVuZEdncGUzUm9jbTkzSUc1bGR5QkZjbkp2Y2lncGZYMXBaaWh4S1h0MllYSWdjejFtZFc1amRHbHZiaWhETEVJcGUzWmhjaUJFUFVOYlFsMDdhV1lvUkNZbWRIbHdaVzltSUVROVBUMWNJbTlpYW1WamRGd2lLWHQyWVhJZ2JqMXVkV3hzTzJadmNpaDJZWElnZWlCcGJpQkVLWHRwWmloaUxtTmhiR3dvUkN4NktTWW1SQ0U5UFVNcGUzWmhjaUI1UFhNb1JDeDZLVHRwWmloNUlUMDlkbTlwWkNBd0tYdEVXM3BkUFhsOVpXeHpaWHRwWmlnaGJpbDdiajFiWFgxdUxuQjFjMmdvZWlsOWZYMXBaaWh1S1h0bWIzSW9kbUZ5SUVFOWJpNXNaVzVuZEdnN0xTMUJQajB3T3lsN1pHVnNaWFJsSUVSYmJsdEJYVjE5ZlgxeVpYUjFjbTRnY1M1allXeHNLRU1zUWl4RUtYMDdlRDF6S0h0Y0lsd2lPbmg5TEZ3aVhDSXBmWEpsZEhWeWJpQjRmWDBwS0NrN1hHNHZLaUVnWVhOdU1TMHhMakF1T1M1cWN5QW9ZeWtnTWpBeE15MHlNREUxSUV0bGJtcHBJRlZ5ZFhOb2FXMWhJSHdnYTJwMWNpNW5hWFJvZFdJdVkyOXRMMnB6Y25OaGMybG5iaTlzYVdObGJuTmxYRzRnS2k5Y2JtbG1LSFI1Y0dWdlppQkxTbFZTUFQxY0luVnVaR1ZtYVc1bFpGd2lmSHdoUzBwVlVpbDdTMHBWVWoxN2ZYMXBaaWgwZVhCbGIyWWdTMHBWVWk1aGMyNHhQVDFjSW5WdVpHVm1hVzVsWkZ3aWZId2hTMHBWVWk1aGMyNHhLWHRMU2xWU0xtRnpiakU5ZTMxOVMwcFZVaTVoYzI0eExrRlRUakZWZEdsc1BXNWxkeUJtZFc1amRHbHZiaWdwZTNSb2FYTXVhVzUwWldkbGNsUnZRbmwwWlVobGVEMW1kVzVqZEdsdmJpaGhLWHQyWVhJZ1lqMWhMblJ2VTNSeWFXNW5LREUyS1R0cFppZ29ZaTVzWlc1bmRHZ2xNaWs5UFRFcGUySTlYQ0l3WENJclluMXlaWFIxY200Z1luMDdkR2hwY3k1aWFXZEpiblJVYjAxcGJsUjNiM05EYjIxd2JHVnRaVzUwYzBobGVEMW1kVzVqZEdsdmJpaHFLWHQyWVhJZ1pqMXFMblJ2VTNSeWFXNW5LREUyS1R0cFppaG1Mbk4xWW5OMGNpZ3dMREVwSVQxY0lpMWNJaWw3YVdZb1ppNXNaVzVuZEdnbE1qMDlNU2w3WmoxY0lqQmNJaXRtZldWc2MyVjdhV1lvSVdZdWJXRjBZMmdvTDE1Yk1DMDNYUzhwS1h0bVBWd2lNREJjSWl0bWZYMTlaV3h6Wlh0MllYSWdZVDFtTG5OMVluTjBjaWd4S1R0MllYSWdaVDFoTG14bGJtZDBhRHRwWmlobEpUSTlQVEVwZTJVclBURjlaV3h6Wlh0cFppZ2haaTV0WVhSamFDZ3ZYbHN3TFRkZEx5a3BlMlVyUFRKOWZYWmhjaUJuUFZ3aVhDSTdabTl5S0haaGNpQmtQVEE3WkR4bE8yUXJLeWw3WnlzOVhDSm1YQ0o5ZG1GeUlHTTlibVYzSUVKcFowbHVkR1ZuWlhJb1p5d3hOaWs3ZG1GeUlHSTlZeTU0YjNJb2Fpa3VZV1JrS0VKcFowbHVkR1ZuWlhJdVQwNUZLVHRtUFdJdWRHOVRkSEpwYm1jb01UWXBMbkpsY0d4aFkyVW9MMTR0THl4Y0lsd2lLWDF5WlhSMWNtNGdabjA3ZEdocGN5NW5aWFJRUlUxVGRISnBibWRHY205dFNHVjRQV1oxYm1OMGFXOXVLR0VzWWlsN2RtRnlJR005UzBwVlVpNWhjMjR4TzNaaGNpQm1QVU55ZVhCMGIwcFRMbVZ1WXk1SVpYZ3VjR0Z5YzJVb1lTazdkbUZ5SUdROVEzSjVjSFJ2U2xNdVpXNWpMa0poYzJVMk5DNXpkSEpwYm1kcFpua29aaWs3ZG1GeUlHVTlaQzV5WlhCc1lXTmxLQzhvTG5zMk5IMHBMMmNzWENJa01WeGNjbHhjYmx3aUtUdGxQV1V1Y21Wd2JHRmpaU2d2WEZ4eVhGeHVKQzhzWENKY0lpazdjbVYwZFhKdVhDSXRMUzB0TFVKRlIwbE9JRndpSzJJclhDSXRMUzB0TFZ4Y2NseGNibHdpSzJVclhDSmNYSEpjWEc0dExTMHRMVVZPUkNCY0lpdGlLMXdpTFMwdExTMWNYSEpjWEc1Y0luMDdkR2hwY3k1dVpYZFBZbXBsWTNROVpuVnVZM1JwYjI0b1lpbDdkbUZ5SUdjOVMwcFZVaTVoYzI0eE8zWmhjaUJyUFU5aWFtVmpkQzVyWlhsektHSXBPMmxtS0dzdWJHVnVaM1JvSVQweEtYdDBhSEp2ZDF3aWEyVjVJRzltSUhCaGNtRnRJSE5vWVd4c0lHSmxJRzl1YkhrZ2IyNWxMbHdpZlhaaGNpQnFQV3RiTUYwN2FXWW9YQ0k2WW05dmJEcHBiblE2WW1sMGMzUnlPbTlqZEhOMGNqcHVkV3hzT205cFpEcGxiblZ0T25WMFpqaHpkSEk2Ym5WdGMzUnlPbkJ5Ym5OMGNqcDBaV3h6ZEhJNmFXRTFjM1J5T25WMFkzUnBiV1U2WjJWdWRHbHRaVHB6WlhFNmMyVjBPblJoWnpwY0lpNXBibVJsZUU5bUtGd2lPbHdpSzJvclhDSTZYQ0lwUFQwdE1TbDdkR2h5YjNkY0luVnVaR1ZtYVc1bFpDQnJaWGs2SUZ3aUsycDlhV1lvYWowOVhDSmliMjlzWENJcGUzSmxkSFZ5YmlCdVpYY2daeTVFUlZKQ2IyOXNaV0Z1S0dKYmFsMHBmV2xtS0dvOVBWd2lhVzUwWENJcGUzSmxkSFZ5YmlCdVpYY2daeTVFUlZKSmJuUmxaMlZ5S0dKYmFsMHBmV2xtS0dvOVBWd2lZbWwwYzNSeVhDSXBlM0psZEhWeWJpQnVaWGNnWnk1RVJWSkNhWFJUZEhKcGJtY29ZbHRxWFNsOWFXWW9hajA5WENKdlkzUnpkSEpjSWlsN2NtVjBkWEp1SUc1bGR5Qm5Ma1JGVWs5amRHVjBVM1J5YVc1bktHSmJhbDBwZldsbUtHbzlQVndpYm5Wc2JGd2lLWHR5WlhSMWNtNGdibVYzSUdjdVJFVlNUblZzYkNoaVcycGRLWDFwWmlocVBUMWNJbTlwWkZ3aUtYdHlaWFIxY200Z2JtVjNJR2N1UkVWU1QySnFaV04wU1dSbGJuUnBabWxsY2loaVcycGRLWDFwWmlocVBUMWNJbVZ1ZFcxY0lpbDdjbVYwZFhKdUlHNWxkeUJuTGtSRlVrVnVkVzFsY21GMFpXUW9ZbHRxWFNsOWFXWW9hajA5WENKMWRHWTRjM1J5WENJcGUzSmxkSFZ5YmlCdVpYY2daeTVFUlZKVlZFWTRVM1J5YVc1bktHSmJhbDBwZldsbUtHbzlQVndpYm5WdGMzUnlYQ0lwZTNKbGRIVnliaUJ1WlhjZ1p5NUVSVkpPZFcxbGNtbGpVM1J5YVc1bktHSmJhbDBwZldsbUtHbzlQVndpY0hKdWMzUnlYQ0lwZTNKbGRIVnliaUJ1WlhjZ1p5NUVSVkpRY21sdWRHRmliR1ZUZEhKcGJtY29ZbHRxWFNsOWFXWW9hajA5WENKMFpXeHpkSEpjSWlsN2NtVjBkWEp1SUc1bGR5Qm5Ma1JGVWxSbGJHVjBaWGhUZEhKcGJtY29ZbHRxWFNsOWFXWW9hajA5WENKcFlUVnpkSEpjSWlsN2NtVjBkWEp1SUc1bGR5Qm5Ma1JGVWtsQk5WTjBjbWx1WnloaVcycGRLWDFwWmlocVBUMWNJblYwWTNScGJXVmNJaWw3Y21WMGRYSnVJRzVsZHlCbkxrUkZVbFZVUTFScGJXVW9ZbHRxWFNsOWFXWW9hajA5WENKblpXNTBhVzFsWENJcGUzSmxkSFZ5YmlCdVpYY2daeTVFUlZKSFpXNWxjbUZzYVhwbFpGUnBiV1VvWWx0cVhTbDlhV1lvYWowOVhDSnpaWEZjSWlsN2RtRnlJRzA5WWx0cVhUdDJZWElnYUQxYlhUdG1iM0lvZG1GeUlHVTlNRHRsUEcwdWJHVnVaM1JvTzJVckt5bDdkbUZ5SUd3OVp5NUJVMDR4VlhScGJDNXVaWGRQWW1wbFkzUW9iVnRsWFNrN2FDNXdkWE5vS0d3cGZYSmxkSFZ5YmlCdVpYY2daeTVFUlZKVFpYRjFaVzVqWlNoN1lYSnlZWGs2YUgwcGZXbG1LR285UFZ3aWMyVjBYQ0lwZTNaaGNpQnRQV0piYWwwN2RtRnlJR2c5VzEwN1ptOXlLSFpoY2lCbFBUQTdaVHh0TG14bGJtZDBhRHRsS3lzcGUzWmhjaUJzUFdjdVFWTk9NVlYwYVd3dWJtVjNUMkpxWldOMEtHMWJaVjBwTzJndWNIVnphQ2hzS1gxeVpYUjFjbTRnYm1WM0lHY3VSRVZTVTJWMEtIdGhjbkpoZVRwb2ZTbDlhV1lvYWowOVhDSjBZV2RjSWlsN2RtRnlJR005WWx0cVhUdHBaaWhQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b1l5azlQVDFjSWx0dlltcGxZM1FnUVhKeVlYbGRYQ0ltSm1NdWJHVnVaM1JvUFQwektYdDJZWElnWkQxbkxrRlRUakZWZEdsc0xtNWxkMDlpYW1WamRDaGpXekpkS1R0eVpYUjFjbTRnYm1WM0lHY3VSRVZTVkdGbloyVmtUMkpxWldOMEtIdDBZV2M2WTFzd1hTeGxlSEJzYVdOcGREcGpXekZkTEc5aWFqcGtmU2w5Wld4elpYdDJZWElnWmoxN2ZUdHBaaWhqTG1WNGNHeHBZMmwwSVQwOWRXNWtaV1pwYm1Wa0tYdG1MbVY0Y0d4cFkybDBQV011Wlhod2JHbGphWFI5YVdZb1l5NTBZV2NoUFQxMWJtUmxabWx1WldRcGUyWXVkR0ZuUFdNdWRHRm5mV2xtS0dNdWIySnFQVDA5ZFc1a1pXWnBibVZrS1h0MGFISnZkMXdpYjJKcUlITm9ZV3hzSUdKbElITndaV05wWm1sbFpDQm1iM0lnSjNSaFp5Y3VYQ0o5Wmk1dlltbzlaeTVCVTA0eFZYUnBiQzV1WlhkUFltcGxZM1FvWXk1dlltb3BPM0psZEhWeWJpQnVaWGNnWnk1RVJWSlVZV2RuWldSUFltcGxZM1FvWmlsOWZYMDdkR2hwY3k1cWMyOXVWRzlCVTA0eFNFVllQV1oxYm1OMGFXOXVLR0lwZTNaaGNpQmhQWFJvYVhNdWJtVjNUMkpxWldOMEtHSXBPM0psZEhWeWJpQmhMbWRsZEVWdVkyOWtaV1JJWlhnb0tYMTlPMHRLVlZJdVlYTnVNUzVCVTA0eFZYUnBiQzV2YVdSSVpYaFViMGx1ZEQxbWRXNWpkR2x2YmloaEtYdDJZWElnYWoxY0lsd2lPM1poY2lCclBYQmhjbk5sU1c1MEtHRXVjM1ZpYzNSeUtEQXNNaWtzTVRZcE8zWmhjaUJrUFUxaGRHZ3VabXh2YjNJb2F5ODBNQ2s3ZG1GeUlHTTlheVUwTUR0MllYSWdhajFrSzF3aUxsd2lLMk03ZG1GeUlHVTlYQ0pjSWp0bWIzSW9kbUZ5SUdZOU1qdG1QR0V1YkdWdVozUm9PMllyUFRJcGUzWmhjaUJuUFhCaGNuTmxTVzUwS0dFdWMzVmljM1J5S0dZc01pa3NNVFlwTzNaaGNpQm9QU2hjSWpBd01EQXdNREF3WENJclp5NTBiMU4wY21sdVp5Z3lLU2t1YzJ4cFkyVW9MVGdwTzJVOVpTdG9Mbk4xWW5OMGNpZ3hMRGNwTzJsbUtHZ3VjM1ZpYzNSeUtEQXNNU2s5UFZ3aU1Gd2lLWHQyWVhJZ1lqMXVaWGNnUW1sblNXNTBaV2RsY2lobExESXBPMm85YWl0Y0lpNWNJaXRpTG5SdlUzUnlhVzVuS0RFd0tUdGxQVndpWENKOWZYSmxkSFZ5YmlCcWZUdExTbFZTTG1GemJqRXVRVk5PTVZWMGFXd3ViMmxrU1c1MFZHOUlaWGc5Wm5WdVkzUnBiMjRvWmlsN2RtRnlJR1U5Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR3M5WVM1MGIxTjBjbWx1WnlneE5pazdhV1lvYXk1c1pXNW5kR2c5UFRFcGUyczlYQ0l3WENJcmEzMXlaWFIxY200Z2EzMDdkbUZ5SUdROVpuVnVZM1JwYjI0b2J5bDdkbUZ5SUc0OVhDSmNJanQyWVhJZ2F6MXVaWGNnUW1sblNXNTBaV2RsY2lodkxERXdLVHQyWVhJZ1lUMXJMblJ2VTNSeWFXNW5LRElwTzNaaGNpQnNQVGN0WVM1c1pXNW5kR2dsTnp0cFppaHNQVDAzS1h0c1BUQjlkbUZ5SUhFOVhDSmNJanRtYjNJb2RtRnlJRzA5TUR0dFBHdzdiU3NyS1h0eEt6MWNJakJjSW4xaFBYRXJZVHRtYjNJb2RtRnlJRzA5TUR0dFBHRXViR1Z1WjNSb0xURTdiU3M5TnlsN2RtRnlJSEE5WVM1emRXSnpkSElvYlN3M0tUdHBaaWh0SVQxaExteGxibWQwYUMwM0tYdHdQVndpTVZ3aUszQjliaXM5WlNod1lYSnpaVWx1ZENod0xESXBLWDF5WlhSMWNtNGdibjA3YVdZb0lXWXViV0YwWTJnb0wxNWJNQzA1TGwwckpDOHBLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJRzlwWkNCemRISnBibWM2SUZ3aUsyWjlkbUZ5SUdjOVhDSmNJanQyWVhJZ1lqMW1Mbk53YkdsMEtGd2lMbHdpS1R0MllYSWdhajF3WVhKelpVbHVkQ2hpV3pCZEtTbzBNQ3R3WVhKelpVbHVkQ2hpV3pGZEtUdG5LejFsS0dvcE8ySXVjM0JzYVdObEtEQXNNaWs3Wm05eUtIWmhjaUJqUFRBN1l6eGlMbXhsYm1kMGFEdGpLeXNwZTJjclBXUW9ZbHRqWFNsOWNtVjBkWEp1SUdkOU8wdEtWVkl1WVhOdU1TNUJVMDR4VDJKcVpXTjBQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHTTlkSEoxWlR0MllYSWdZajF1ZFd4c08zWmhjaUJrUFZ3aU1EQmNJanQyWVhJZ1pUMWNJakF3WENJN2RtRnlJR0U5WENKY0lqdDBhR2x6TG1kbGRFeGxibWQwYUVobGVFWnliMjFXWVd4MVpUMW1kVzVqZEdsdmJpZ3BlMmxtS0hSNWNHVnZaaUIwYUdsekxtaFdQVDFjSW5WdVpHVm1hVzVsWkZ3aWZIeDBhR2x6TG1oV1BUMXVkV3hzS1h0MGFISnZkMXdpZEdocGN5NW9WaUJwY3lCdWRXeHNJRzl5SUhWdVpHVm1hVzVsWkM1Y0luMXBaaWgwYUdsekxtaFdMbXhsYm1kMGFDVXlQVDB4S1h0MGFISnZkMXdpZG1Gc2RXVWdhR1Y0SUcxMWMzUWdZbVVnWlhabGJpQnNaVzVuZEdnNklHNDlYQ0lyWVM1c1pXNW5kR2dyWENJc2RqMWNJaXQwYUdsekxtaFdmWFpoY2lCcFBYUm9hWE11YUZZdWJHVnVaM1JvTHpJN2RtRnlJR2c5YVM1MGIxTjBjbWx1WnlneE5pazdhV1lvYUM1c1pXNW5kR2dsTWowOU1TbDdhRDFjSWpCY0lpdG9mV2xtS0drOE1USTRLWHR5WlhSMWNtNGdhSDFsYkhObGUzWmhjaUJuUFdndWJHVnVaM1JvTHpJN2FXWW9aejR4TlNsN2RHaHliM2RjSWtGVFRpNHhJR3hsYm1kMGFDQjBiMjhnYkc5dVp5QjBieUJ5WlhCeVpYTmxiblFnWW5rZ09IZzZJRzRnUFNCY0lpdHBMblJ2VTNSeWFXNW5LREUyS1gxMllYSWdaajB4TWpnclp6dHlaWFIxY200Z1ppNTBiMU4wY21sdVp5Z3hOaWtyYUgxOU8zUm9hWE11WjJWMFJXNWpiMlJsWkVobGVEMW1kVzVqZEdsdmJpZ3BlMmxtS0hSb2FYTXVhRlJNVmowOWJuVnNiSHg4ZEdocGN5NXBjMDF2WkdsbWFXVmtLWHQwYUdsekxtaFdQWFJvYVhNdVoyVjBSbkpsYzJoV1lXeDFaVWhsZUNncE8zUm9hWE11YUV3OWRHaHBjeTVuWlhSTVpXNW5kR2hJWlhoR2NtOXRWbUZzZFdVb0tUdDBhR2x6TG1oVVRGWTlkR2hwY3k1b1ZDdDBhR2x6TG1oTUszUm9hWE11YUZZN2RHaHBjeTVwYzAxdlpHbG1hV1ZrUFdaaGJITmxmWEpsZEhWeWJpQjBhR2x6TG1oVVRGWjlPM1JvYVhNdVoyVjBWbUZzZFdWSVpYZzlablZ1WTNScGIyNG9LWHQwYUdsekxtZGxkRVZ1WTI5a1pXUklaWGdvS1R0eVpYUjFjbTRnZEdocGN5NW9WbjA3ZEdocGN5NW5aWFJHY21WemFGWmhiSFZsU0dWNFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdVhDSmNJbjE5TzB0S1ZWSXVZWE51TVM1RVJWSkJZbk4wY21GamRGTjBjbWx1WnoxbWRXNWpkR2x2YmloaktYdExTbFZTTG1GemJqRXVSRVZTUVdKemRISmhZM1JUZEhKcGJtY3VjM1Z3WlhKamJHRnpjeTVqYjI1emRISjFZM1J2Y2k1allXeHNLSFJvYVhNcE8zWmhjaUJpUFc1MWJHdzdkbUZ5SUdFOWJuVnNiRHQwYUdsekxtZGxkRk4wY21sdVp6MW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG5OOU8zUm9hWE11YzJWMFUzUnlhVzVuUFdaMWJtTjBhVzl1S0dRcGUzUm9hWE11YUZSTVZqMXVkV3hzTzNSb2FYTXVhWE5OYjJScFptbGxaRDEwY25WbE8zUm9hWE11Y3oxa08zUm9hWE11YUZZOWMzUnZhR1Y0S0hSb2FYTXVjeWw5TzNSb2FYTXVjMlYwVTNSeWFXNW5TR1Y0UFdaMWJtTjBhVzl1S0dRcGUzUm9hWE11YUZSTVZqMXVkV3hzTzNSb2FYTXVhWE5OYjJScFptbGxaRDEwY25WbE8zUm9hWE11Y3oxdWRXeHNPM1JvYVhNdWFGWTlaSDA3ZEdocGN5NW5aWFJHY21WemFGWmhiSFZsU0dWNFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11YUZaOU8ybG1LSFI1Y0dWdlppQmpJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdHBaaWgwZVhCbGIyWWdZejA5WENKemRISnBibWRjSWlsN2RHaHBjeTV6WlhSVGRISnBibWNvWXlsOVpXeHpaWHRwWmloMGVYQmxiMllnWXk1emRISWhQVndpZFc1a1pXWnBibVZrWENJcGUzUm9hWE11YzJWMFUzUnlhVzVuS0dNdWMzUnlLWDFsYkhObGUybG1LSFI1Y0dWdlppQmpMbWhsZUNFOVhDSjFibVJsWm1sdVpXUmNJaWw3ZEdocGN5NXpaWFJUZEhKcGJtZElaWGdvWXk1b1pYZ3BmWDE5ZlgwN1dVRklUMDh1YkdGdVp5NWxlSFJsYm1Rb1MwcFZVaTVoYzI0eExrUkZVa0ZpYzNSeVlXTjBVM1J5YVc1bkxFdEtWVkl1WVhOdU1TNUJVMDR4VDJKcVpXTjBLVHRMU2xWU0xtRnpiakV1UkVWU1FXSnpkSEpoWTNSVWFXMWxQV1oxYm1OMGFXOXVLR01wZTB0S1ZWSXVZWE51TVM1RVJWSkJZbk4wY21GamRGUnBiV1V1YzNWd1pYSmpiR0Z6Y3k1amIyNXpkSEoxWTNSdmNpNWpZV3hzS0hSb2FYTXBPM1poY2lCaVBXNTFiR3c3ZG1GeUlHRTliblZzYkR0MGFHbHpMbXh2WTJGc1JHRjBaVlJ2VlZSRFBXWjFibU4wYVc5dUtHWXBlM1YwWXoxbUxtZGxkRlJwYldVb0tTc29aaTVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwS2pZd01EQXdLVHQyWVhJZ1pUMXVaWGNnUkdGMFpTaDFkR01wTzNKbGRIVnliaUJsZlR0MGFHbHpMbVp2Y20xaGRFUmhkR1U5Wm5WdVkzUnBiMjRvYlN4dkxHVXBlM1poY2lCblBYUm9hWE11ZW1WeWIxQmhaR1JwYm1jN2RtRnlJRzQ5ZEdocGN5NXNiMk5oYkVSaGRHVlViMVZVUXlodEtUdDJZWElnY0QxVGRISnBibWNvYmk1blpYUkdkV3hzV1dWaGNpZ3BLVHRwWmlodlBUMWNJblYwWTF3aUtYdHdQWEF1YzNWaWMzUnlLRElzTWlsOWRtRnlJR3c5WnloVGRISnBibWNvYmk1blpYUk5iMjUwYUNncEt6RXBMRElwTzNaaGNpQnhQV2NvVTNSeWFXNW5LRzR1WjJWMFJHRjBaU2dwS1N3eUtUdDJZWElnYUQxbktGTjBjbWx1WnlodUxtZGxkRWh2ZFhKektDa3BMRElwTzNaaGNpQnBQV2NvVTNSeWFXNW5LRzR1WjJWMFRXbHVkWFJsY3lncEtTd3lLVHQyWVhJZ2FqMW5LRk4wY21sdVp5aHVMbWRsZEZObFkyOXVaSE1vS1Nrc01pazdkbUZ5SUhJOWNDdHNLM0VyYUN0cEsybzdhV1lvWlQwOVBYUnlkV1VwZTNaaGNpQm1QVzR1WjJWMFRXbHNiR2x6WldOdmJtUnpLQ2s3YVdZb1ppRTlNQ2w3ZG1GeUlHczlaeWhUZEhKcGJtY29aaWtzTXlrN2F6MXJMbkpsY0d4aFkyVW9MMXN3WFNza0x5eGNJbHdpS1R0eVBYSXJYQ0l1WENJcmEzMTljbVYwZFhKdUlISXJYQ0phWENKOU8zUm9hWE11ZW1WeWIxQmhaR1JwYm1jOVpuVnVZM1JwYjI0b1pTeGtLWHRwWmlobExteGxibWQwYUQ0OVpDbDdjbVYwZFhKdUlHVjljbVYwZFhKdUlHNWxkeUJCY25KaGVTaGtMV1V1YkdWdVozUm9LekVwTG1wdmFXNG9YQ0l3WENJcEsyVjlPM1JvYVhNdVoyVjBVM1J5YVc1blBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11YzMwN2RHaHBjeTV6WlhSVGRISnBibWM5Wm5WdVkzUnBiMjRvWkNsN2RHaHBjeTVvVkV4V1BXNTFiR3c3ZEdocGN5NXBjMDF2WkdsbWFXVmtQWFJ5ZFdVN2RHaHBjeTV6UFdRN2RHaHBjeTVvVmoxemRHOW9aWGdvWkNsOU8zUm9hWE11YzJWMFFubEVZWFJsVm1Gc2RXVTlablZ1WTNScGIyNG9hQ3hxTEdVc1pDeG1MR2NwZTNaaGNpQnBQVzVsZHlCRVlYUmxLRVJoZEdVdVZWUkRLR2dzYWkweExHVXNaQ3htTEdjc01Da3BPM1JvYVhNdWMyVjBRbmxFWVhSbEtHa3BmVHQwYUdsekxtZGxkRVp5WlhOb1ZtRnNkV1ZJWlhnOVpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2RHaHBjeTVvVm4xOU8xbEJTRTlQTG14aGJtY3VaWGgwWlc1a0tFdEtWVkl1WVhOdU1TNUVSVkpCWW5OMGNtRmpkRlJwYldVc1MwcFZVaTVoYzI0eExrRlRUakZQWW1wbFkzUXBPMHRLVlZJdVlYTnVNUzVFUlZKQlluTjBjbUZqZEZOMGNuVmpkSFZ5WldROVpuVnVZM1JwYjI0b1lpbDdTMHBWVWk1aGMyNHhMa1JGVWtGaWMzUnlZV04wVTNSeWFXNW5Mbk4xY0dWeVkyeGhjM011WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2gwYUdsektUdDJZWElnWVQxdWRXeHNPM1JvYVhNdWMyVjBRbmxCVTA0eFQySnFaV04wUVhKeVlYazlablZ1WTNScGIyNG9ZeWw3ZEdocGN5NW9WRXhXUFc1MWJHdzdkR2hwY3k1cGMwMXZaR2xtYVdWa1BYUnlkV1U3ZEdocGN5NWhjMjR4UVhKeVlYazlZMzA3ZEdocGN5NWhjSEJsYm1SQlUwNHhUMkpxWldOMFBXWjFibU4wYVc5dUtHTXBlM1JvYVhNdWFGUk1WajF1ZFd4c08zUm9hWE11YVhOTmIyUnBabWxsWkQxMGNuVmxPM1JvYVhNdVlYTnVNVUZ5Y21GNUxuQjFjMmdvWXlsOU8zUm9hWE11WVhOdU1VRnljbUY1UFc1bGR5QkJjbkpoZVNncE8ybG1LSFI1Y0dWdlppQmlJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdHBaaWgwZVhCbGIyWWdZaTVoY25KaGVTRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTVoYzI0eFFYSnlZWGs5WWk1aGNuSmhlWDE5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdVJFVlNRV0p6ZEhKaFkzUlRkSEoxWTNSMWNtVmtMRXRLVlZJdVlYTnVNUzVCVTA0eFQySnFaV04wS1R0TFNsVlNMbUZ6YmpFdVJFVlNRbTl2YkdWaGJqMW1kVzVqZEdsdmJpZ3BlMHRLVlZJdVlYTnVNUzVFUlZKQ2IyOXNaV0Z1TG5OMWNHVnlZMnhoYzNNdVkyOXVjM1J5ZFdOMGIzSXVZMkZzYkNoMGFHbHpLVHQwYUdsekxtaFVQVndpTURGY0lqdDBhR2x6TG1oVVRGWTlYQ0l3TVRBeFptWmNJbjA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TGtSRlVrSnZiMnhsWVc0c1MwcFZVaTVoYzI0eExrRlRUakZQWW1wbFkzUXBPMHRLVlZJdVlYTnVNUzVFUlZKSmJuUmxaMlZ5UFdaMWJtTjBhVzl1S0dFcGUwdEtWVkl1WVhOdU1TNUVSVkpKYm5SbFoyVnlMbk4xY0dWeVkyeGhjM011WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2gwYUdsektUdDBhR2x6TG1oVVBWd2lNREpjSWp0MGFHbHpMbk5sZEVKNVFtbG5TVzUwWldkbGNqMW1kVzVqZEdsdmJpaGlLWHQwYUdsekxtaFVURlk5Ym5Wc2JEdDBhR2x6TG1selRXOWthV1pwWldROWRISjFaVHQwYUdsekxtaFdQVXRLVlZJdVlYTnVNUzVCVTA0eFZYUnBiQzVpYVdkSmJuUlViMDFwYmxSM2IzTkRiMjF3YkdWdFpXNTBjMGhsZUNoaUtYMDdkR2hwY3k1elpYUkNlVWx1ZEdWblpYSTlablZ1WTNScGIyNG9ZeWw3ZG1GeUlHSTlibVYzSUVKcFowbHVkR1ZuWlhJb1UzUnlhVzVuS0dNcExERXdLVHQwYUdsekxuTmxkRUo1UW1sblNXNTBaV2RsY2loaUtYMDdkR2hwY3k1elpYUldZV3gxWlVobGVEMW1kVzVqZEdsdmJpaGlLWHQwYUdsekxtaFdQV0o5TzNSb2FYTXVaMlYwUm5KbGMyaFdZV3gxWlVobGVEMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1oV2ZUdHBaaWgwZVhCbGIyWWdZU0U5WENKMWJtUmxabWx1WldSY0lpbDdhV1lvZEhsd1pXOW1JR0V1WW1sbmFXNTBJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdDBhR2x6TG5ObGRFSjVRbWxuU1c1MFpXZGxjaWhoTG1KcFoybHVkQ2w5Wld4elpYdHBaaWgwZVhCbGIyWWdZVnRjSW1sdWRGd2lYU0U5WENKMWJtUmxabWx1WldSY0lpbDdkR2hwY3k1elpYUkNlVWx1ZEdWblpYSW9ZVnRjSW1sdWRGd2lYU2w5Wld4elpYdHBaaWgwZVhCbGIyWWdZVDA5WENKdWRXMWlaWEpjSWlsN2RHaHBjeTV6WlhSQ2VVbHVkR1ZuWlhJb1lTbDlaV3h6Wlh0cFppaDBlWEJsYjJZZ1lTNW9aWGdoUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlM1JvYVhNdWMyVjBWbUZzZFdWSVpYZ29ZUzVvWlhncGZYMTlmWDE5TzFsQlNFOVBMbXhoYm1jdVpYaDBaVzVrS0V0S1ZWSXVZWE51TVM1RVJWSkpiblJsWjJWeUxFdEtWVkl1WVhOdU1TNUJVMDR4VDJKcVpXTjBLVHRMU2xWU0xtRnpiakV1UkVWU1FtbDBVM1J5YVc1blBXWjFibU4wYVc5dUtHRXBlMHRLVlZJdVlYTnVNUzVFUlZKQ2FYUlRkSEpwYm1jdWMzVndaWEpqYkdGemN5NWpiMjV6ZEhKMVkzUnZjaTVqWVd4c0tIUm9hWE1wTzNSb2FYTXVhRlE5WENJd00xd2lPM1JvYVhNdWMyVjBTR1Y0Vm1Gc2RXVkpibU5zZFdScGJtZFZiblZ6WldSQ2FYUnpQV1oxYm1OMGFXOXVLR0lwZTNSb2FYTXVhRlJNVmoxdWRXeHNPM1JvYVhNdWFYTk5iMlJwWm1sbFpEMTBjblZsTzNSb2FYTXVhRlk5WW4wN2RHaHBjeTV6WlhSVmJuVnpaV1JDYVhSelFXNWtTR1Y0Vm1Gc2RXVTlablZ1WTNScGIyNG9ZaXhrS1h0cFppaGlQREI4ZkRjOFlpbDdkR2h5YjNkY0luVnVkWE5sWkNCaWFYUnpJSE5vWVd4c0lHSmxJR1p5YjIwZ01DQjBieUEzT2lCMUlEMGdYQ0lyWW4xMllYSWdZejFjSWpCY0lpdGlPM1JvYVhNdWFGUk1WajF1ZFd4c08zUm9hWE11YVhOTmIyUnBabWxsWkQxMGNuVmxPM1JvYVhNdWFGWTlZeXRrZlR0MGFHbHpMbk5sZEVKNVFtbHVZWEo1VTNSeWFXNW5QV1oxYm1OMGFXOXVLR1VwZTJVOVpTNXlaWEJzWVdObEtDOHdLeVF2TEZ3aVhDSXBPM1poY2lCbVBUZ3RaUzVzWlc1bmRHZ2xPRHRwWmlobVBUMDRLWHRtUFRCOVptOXlLSFpoY2lCblBUQTdaenc5Wmp0bkt5c3BlMlVyUFZ3aU1Gd2lmWFpoY2lCcVBWd2lYQ0k3Wm05eUtIWmhjaUJuUFRBN1p6eGxMbXhsYm1kMGFDMHhPMmNyUFRncGUzWmhjaUJrUFdVdWMzVmljM1J5S0djc09DazdkbUZ5SUdNOWNHRnljMlZKYm5Rb1pDd3lLUzUwYjFOMGNtbHVaeWd4TmlrN2FXWW9ZeTVzWlc1bmRHZzlQVEVwZTJNOVhDSXdYQ0lyWTMxcUt6MWpmWFJvYVhNdWFGUk1WajF1ZFd4c08zUm9hWE11YVhOTmIyUnBabWxsWkQxMGNuVmxPM1JvYVhNdWFGWTlYQ0l3WENJclppdHFmVHQwYUdsekxuTmxkRUo1UW05dmJHVmhia0Z5Y21GNVBXWjFibU4wYVc5dUtHUXBlM1poY2lCalBWd2lYQ0k3Wm05eUtIWmhjaUJpUFRBN1lqeGtMbXhsYm1kMGFEdGlLeXNwZTJsbUtHUmJZbDA5UFhSeWRXVXBlMk1yUFZ3aU1Wd2lmV1ZzYzJWN1l5czlYQ0l3WENKOWZYUm9hWE11YzJWMFFubENhVzVoY25sVGRISnBibWNvWXlsOU8zUm9hWE11Ym1WM1JtRnNjMlZCY25KaGVUMW1kVzVqZEdsdmJpaGtLWHQyWVhJZ1lqMXVaWGNnUVhKeVlYa29aQ2s3Wm05eUtIWmhjaUJqUFRBN1l6eGtPMk1yS3lsN1lsdGpYVDFtWVd4elpYMXlaWFIxY200Z1luMDdkR2hwY3k1blpYUkdjbVZ6YUZaaGJIVmxTR1Y0UFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTXVhRlo5TzJsbUtIUjVjR1Z2WmlCaElUMWNJblZ1WkdWbWFXNWxaRndpS1h0cFppaDBlWEJsYjJZZ1lUMDlYQ0p6ZEhKcGJtZGNJaVltWVM1MGIweHZkMlZ5UTJGelpTZ3BMbTFoZEdOb0tDOWVXekF0T1dFdFpsMHJKQzhwS1h0MGFHbHpMbk5sZEVobGVGWmhiSFZsU1c1amJIVmthVzVuVlc1MWMyVmtRbWwwY3loaEtYMWxiSE5sZTJsbUtIUjVjR1Z2WmlCaExtaGxlQ0U5WENKMWJtUmxabWx1WldSY0lpbDdkR2hwY3k1elpYUklaWGhXWVd4MVpVbHVZMngxWkdsdVoxVnVkWE5sWkVKcGRITW9ZUzVvWlhncGZXVnNjMlY3YVdZb2RIbHdaVzltSUdFdVltbHVJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdDBhR2x6TG5ObGRFSjVRbWx1WVhKNVUzUnlhVzVuS0dFdVltbHVLWDFsYkhObGUybG1LSFI1Y0dWdlppQmhMbUZ5Y21GNUlUMWNJblZ1WkdWbWFXNWxaRndpS1h0MGFHbHpMbk5sZEVKNVFtOXZiR1ZoYmtGeWNtRjVLR0V1WVhKeVlYa3BmWDE5ZlgxOU8xbEJTRTlQTG14aGJtY3VaWGgwWlc1a0tFdEtWVkl1WVhOdU1TNUVSVkpDYVhSVGRISnBibWNzUzBwVlVpNWhjMjR4TGtGVFRqRlBZbXBsWTNRcE8wdEtWVkl1WVhOdU1TNUVSVkpQWTNSbGRGTjBjbWx1WnoxbWRXNWpkR2x2YmloaEtYdExTbFZTTG1GemJqRXVSRVZTVDJOMFpYUlRkSEpwYm1jdWMzVndaWEpqYkdGemN5NWpiMjV6ZEhKMVkzUnZjaTVqWVd4c0tIUm9hWE1zWVNrN2RHaHBjeTVvVkQxY0lqQTBYQ0o5TzFsQlNFOVBMbXhoYm1jdVpYaDBaVzVrS0V0S1ZWSXVZWE51TVM1RVJWSlBZM1JsZEZOMGNtbHVaeXhMU2xWU0xtRnpiakV1UkVWU1FXSnpkSEpoWTNSVGRISnBibWNwTzB0S1ZWSXVZWE51TVM1RVJWSk9kV3hzUFdaMWJtTjBhVzl1S0NsN1MwcFZVaTVoYzI0eExrUkZVazUxYkd3dWMzVndaWEpqYkdGemN5NWpiMjV6ZEhKMVkzUnZjaTVqWVd4c0tIUm9hWE1wTzNSb2FYTXVhRlE5WENJd05Wd2lPM1JvYVhNdWFGUk1WajFjSWpBMU1EQmNJbjA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TGtSRlVrNTFiR3dzUzBwVlVpNWhjMjR4TGtGVFRqRlBZbXBsWTNRcE8wdEtWVkl1WVhOdU1TNUVSVkpQWW1wbFkzUkpaR1Z1ZEdsbWFXVnlQV1oxYm1OMGFXOXVLR01wZTNaaGNpQmlQV1oxYm1OMGFXOXVLR1FwZTNaaGNpQmxQV1F1ZEc5VGRISnBibWNvTVRZcE8ybG1LR1V1YkdWdVozUm9QVDB4S1h0bFBWd2lNRndpSzJWOWNtVjBkWEp1SUdWOU8zWmhjaUJoUFdaMWJtTjBhVzl1S0dzcGUzWmhjaUJxUFZ3aVhDSTdkbUZ5SUdVOWJtVjNJRUpwWjBsdWRHVm5aWElvYXl3eE1DazdkbUZ5SUdROVpTNTBiMU4wY21sdVp5Z3lLVHQyWVhJZ1pqMDNMV1F1YkdWdVozUm9KVGM3YVdZb1pqMDlOeWw3Wmowd2ZYWmhjaUJ0UFZ3aVhDSTdabTl5S0haaGNpQm5QVEE3Wnp4bU8yY3JLeWw3YlNzOVhDSXdYQ0o5WkQxdEsyUTdabTl5S0haaGNpQm5QVEE3Wnp4a0xteGxibWQwYUMweE8yY3JQVGNwZTNaaGNpQnNQV1F1YzNWaWMzUnlLR2NzTnlrN2FXWW9aeUU5WkM1c1pXNW5kR2d0TnlsN2JEMWNJakZjSWl0c2ZXb3JQV0lvY0dGeWMyVkpiblFvYkN3eUtTbDljbVYwZFhKdUlHcDlPMHRLVlZJdVlYTnVNUzVFUlZKUFltcGxZM1JKWkdWdWRHbG1hV1Z5TG5OMWNHVnlZMnhoYzNNdVkyOXVjM1J5ZFdOMGIzSXVZMkZzYkNoMGFHbHpLVHQwYUdsekxtaFVQVndpTURaY0lqdDBhR2x6TG5ObGRGWmhiSFZsU0dWNFBXWjFibU4wYVc5dUtHUXBlM1JvYVhNdWFGUk1WajF1ZFd4c08zUm9hWE11YVhOTmIyUnBabWxsWkQxMGNuVmxPM1JvYVhNdWN6MXVkV3hzTzNSb2FYTXVhRlk5WkgwN2RHaHBjeTV6WlhSV1lXeDFaVTlwWkZOMGNtbHVaejFtZFc1amRHbHZiaWhtS1h0cFppZ2haaTV0WVhSamFDZ3ZYbHN3TFRrdVhTc2tMeWtwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnYjJsa0lITjBjbWx1WnpvZ1hDSXJabjEyWVhJZ1p6MWNJbHdpTzNaaGNpQmtQV1l1YzNCc2FYUW9YQ0l1WENJcE8zWmhjaUJxUFhCaGNuTmxTVzUwS0dSYk1GMHBLalF3SzNCaGNuTmxTVzUwS0dSYk1WMHBPMmNyUFdJb2FpazdaQzV6Y0d4cFkyVW9NQ3d5S1R0bWIzSW9kbUZ5SUdVOU1EdGxQR1F1YkdWdVozUm9PMlVyS3lsN1p5czlZU2hrVzJWZEtYMTBhR2x6TG1oVVRGWTliblZzYkR0MGFHbHpMbWx6VFc5a2FXWnBaV1E5ZEhKMVpUdDBhR2x6TG5NOWJuVnNiRHQwYUdsekxtaFdQV2Q5TzNSb2FYTXVjMlYwVm1Gc2RXVk9ZVzFsUFdaMWJtTjBhVzl1S0dVcGUybG1LSFI1Y0dWdlppQkxTbFZTTG1GemJqRXVlRFV3T1M1UFNVUXVibUZ0WlRKdmFXUk1hWE4wVzJWZElUMWNJblZ1WkdWbWFXNWxaRndpS1h0MllYSWdaRDFMU2xWU0xtRnpiakV1ZURVd09TNVBTVVF1Ym1GdFpUSnZhV1JNYVhOMFcyVmRPM1JvYVhNdWMyVjBWbUZzZFdWUGFXUlRkSEpwYm1jb1pDbDlaV3h6Wlh0MGFISnZkMXdpUkVWU1QySnFaV04wU1dSbGJuUnBabWxsY2lCdmFXUk9ZVzFsSUhWdVpHVm1hVzVsWkRvZ1hDSXJaWDE5TzNSb2FYTXVaMlYwUm5KbGMyaFdZV3gxWlVobGVEMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1oV2ZUdHBaaWgwZVhCbGIyWWdZeUU5WENKMWJtUmxabWx1WldSY0lpbDdhV1lvZEhsd1pXOW1JR005UFZ3aWMzUnlhVzVuWENJbUptTXViV0YwWTJnb0wxNWJNQzB5WFM1Yk1DMDVMbDBySkM4cEtYdDBhR2x6TG5ObGRGWmhiSFZsVDJsa1UzUnlhVzVuS0dNcGZXVnNjMlY3YVdZb1MwcFZVaTVoYzI0eExuZzFNRGt1VDBsRUxtNWhiV1V5YjJsa1RHbHpkRnRqWFNFOVBYVnVaR1ZtYVc1bFpDbDdkR2hwY3k1elpYUldZV3gxWlU5cFpGTjBjbWx1WnloTFNsVlNMbUZ6YmpFdWVEVXdPUzVQU1VRdWJtRnRaVEp2YVdSTWFYTjBXMk5kS1gxbGJITmxlMmxtS0hSNWNHVnZaaUJqTG05cFpDRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTV6WlhSV1lXeDFaVTlwWkZOMGNtbHVaeWhqTG05cFpDbDlaV3h6Wlh0cFppaDBlWEJsYjJZZ1l5NW9aWGdoUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlM1JvYVhNdWMyVjBWbUZzZFdWSVpYZ29ZeTVvWlhncGZXVnNjMlY3YVdZb2RIbHdaVzltSUdNdWJtRnRaU0U5WENKMWJtUmxabWx1WldSY0lpbDdkR2hwY3k1elpYUldZV3gxWlU1aGJXVW9ZeTV1WVcxbEtYMTlmWDE5ZlgwN1dVRklUMDh1YkdGdVp5NWxlSFJsYm1Rb1MwcFZVaTVoYzI0eExrUkZVazlpYW1WamRFbGtaVzUwYVdacFpYSXNTMHBWVWk1aGMyNHhMa0ZUVGpGUFltcGxZM1FwTzB0S1ZWSXVZWE51TVM1RVJWSkZiblZ0WlhKaGRHVmtQV1oxYm1OMGFXOXVLR0VwZTB0S1ZWSXVZWE51TVM1RVJWSkZiblZ0WlhKaGRHVmtMbk4xY0dWeVkyeGhjM011WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2gwYUdsektUdDBhR2x6TG1oVVBWd2lNR0ZjSWp0MGFHbHpMbk5sZEVKNVFtbG5TVzUwWldkbGNqMW1kVzVqZEdsdmJpaGlLWHQwYUdsekxtaFVURlk5Ym5Wc2JEdDBhR2x6TG1selRXOWthV1pwWldROWRISjFaVHQwYUdsekxtaFdQVXRLVlZJdVlYTnVNUzVCVTA0eFZYUnBiQzVpYVdkSmJuUlViMDFwYmxSM2IzTkRiMjF3YkdWdFpXNTBjMGhsZUNoaUtYMDdkR2hwY3k1elpYUkNlVWx1ZEdWblpYSTlablZ1WTNScGIyNG9ZeWw3ZG1GeUlHSTlibVYzSUVKcFowbHVkR1ZuWlhJb1UzUnlhVzVuS0dNcExERXdLVHQwYUdsekxuTmxkRUo1UW1sblNXNTBaV2RsY2loaUtYMDdkR2hwY3k1elpYUldZV3gxWlVobGVEMW1kVzVqZEdsdmJpaGlLWHQwYUdsekxtaFdQV0o5TzNSb2FYTXVaMlYwUm5KbGMyaFdZV3gxWlVobGVEMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1oV2ZUdHBaaWgwZVhCbGIyWWdZU0U5WENKMWJtUmxabWx1WldSY0lpbDdhV1lvZEhsd1pXOW1JR0ZiWENKcGJuUmNJbDBoUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlM1JvYVhNdWMyVjBRbmxKYm5SbFoyVnlLR0ZiWENKcGJuUmNJbDBwZldWc2MyVjdhV1lvZEhsd1pXOW1JR0U5UFZ3aWJuVnRZbVZ5WENJcGUzUm9hWE11YzJWMFFubEpiblJsWjJWeUtHRXBmV1ZzYzJWN2FXWW9kSGx3Wlc5bUlHRXVhR1Y0SVQxY0luVnVaR1ZtYVc1bFpGd2lLWHQwYUdsekxuTmxkRlpoYkhWbFNHVjRLR0V1YUdWNEtYMTlmWDE5TzFsQlNFOVBMbXhoYm1jdVpYaDBaVzVrS0V0S1ZWSXVZWE51TVM1RVJWSkZiblZ0WlhKaGRHVmtMRXRLVlZJdVlYTnVNUzVCVTA0eFQySnFaV04wS1R0TFNsVlNMbUZ6YmpFdVJFVlNWVlJHT0ZOMGNtbHVaejFtZFc1amRHbHZiaWhoS1h0TFNsVlNMbUZ6YmpFdVJFVlNWVlJHT0ZOMGNtbHVaeTV6ZFhCbGNtTnNZWE56TG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5eGhLVHQwYUdsekxtaFVQVndpTUdOY0luMDdXVUZJVDA4dWJHRnVaeTVsZUhSbGJtUW9TMHBWVWk1aGMyNHhMa1JGVWxWVVJqaFRkSEpwYm1jc1MwcFZVaTVoYzI0eExrUkZVa0ZpYzNSeVlXTjBVM1J5YVc1bktUdExTbFZTTG1GemJqRXVSRVZTVG5WdFpYSnBZMU4wY21sdVp6MW1kVzVqZEdsdmJpaGhLWHRMU2xWU0xtRnpiakV1UkVWU1RuVnRaWEpwWTFOMGNtbHVaeTV6ZFhCbGNtTnNZWE56TG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5eGhLVHQwYUdsekxtaFVQVndpTVRKY0luMDdXVUZJVDA4dWJHRnVaeTVsZUhSbGJtUW9TMHBWVWk1aGMyNHhMa1JGVWs1MWJXVnlhV05UZEhKcGJtY3NTMHBWVWk1aGMyNHhMa1JGVWtGaWMzUnlZV04wVTNSeWFXNW5LVHRMU2xWU0xtRnpiakV1UkVWU1VISnBiblJoWW14bFUzUnlhVzVuUFdaMWJtTjBhVzl1S0dFcGUwdEtWVkl1WVhOdU1TNUVSVkpRY21sdWRHRmliR1ZUZEhKcGJtY3VjM1Z3WlhKamJHRnpjeTVqYjI1emRISjFZM1J2Y2k1allXeHNLSFJvYVhNc1lTazdkR2hwY3k1b1ZEMWNJakV6WENKOU8xbEJTRTlQTG14aGJtY3VaWGgwWlc1a0tFdEtWVkl1WVhOdU1TNUVSVkpRY21sdWRHRmliR1ZUZEhKcGJtY3NTMHBWVWk1aGMyNHhMa1JGVWtGaWMzUnlZV04wVTNSeWFXNW5LVHRMU2xWU0xtRnpiakV1UkVWU1ZHVnNaWFJsZUZOMGNtbHVaejFtZFc1amRHbHZiaWhoS1h0TFNsVlNMbUZ6YmpFdVJFVlNWR1ZzWlhSbGVGTjBjbWx1Wnk1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeXhoS1R0MGFHbHpMbWhVUFZ3aU1UUmNJbjA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TGtSRlVsUmxiR1YwWlhoVGRISnBibWNzUzBwVlVpNWhjMjR4TGtSRlVrRmljM1J5WVdOMFUzUnlhVzVuS1R0TFNsVlNMbUZ6YmpFdVJFVlNTVUUxVTNSeWFXNW5QV1oxYm1OMGFXOXVLR0VwZTB0S1ZWSXVZWE51TVM1RVJWSkpRVFZUZEhKcGJtY3VjM1Z3WlhKamJHRnpjeTVqYjI1emRISjFZM1J2Y2k1allXeHNLSFJvYVhNc1lTazdkR2hwY3k1b1ZEMWNJakUyWENKOU8xbEJTRTlQTG14aGJtY3VaWGgwWlc1a0tFdEtWVkl1WVhOdU1TNUVSVkpKUVRWVGRISnBibWNzUzBwVlVpNWhjMjR4TGtSRlVrRmljM1J5WVdOMFUzUnlhVzVuS1R0TFNsVlNMbUZ6YmpFdVJFVlNWVlJEVkdsdFpUMW1kVzVqZEdsdmJpaGhLWHRMU2xWU0xtRnpiakV1UkVWU1ZWUkRWR2x0WlM1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeXhoS1R0MGFHbHpMbWhVUFZ3aU1UZGNJanQwYUdsekxuTmxkRUo1UkdGMFpUMW1kVzVqZEdsdmJpaGlLWHQwYUdsekxtaFVURlk5Ym5Wc2JEdDBhR2x6TG1selRXOWthV1pwWldROWRISjFaVHQwYUdsekxtUmhkR1U5WWp0MGFHbHpMbk05ZEdocGN5NW1iM0p0WVhSRVlYUmxLSFJvYVhNdVpHRjBaU3hjSW5WMFkxd2lLVHQwYUdsekxtaFdQWE4wYjJobGVDaDBhR2x6TG5NcGZUdDBhR2x6TG1kbGRFWnlaWE5vVm1Gc2RXVklaWGc5Wm5WdVkzUnBiMjRvS1h0cFppaDBlWEJsYjJZZ2RHaHBjeTVrWVhSbFBUMWNJblZ1WkdWbWFXNWxaRndpSmlaMGVYQmxiMllnZEdocGN5NXpQVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdDBhR2x6TG1SaGRHVTlibVYzSUVSaGRHVW9LVHQwYUdsekxuTTlkR2hwY3k1bWIzSnRZWFJFWVhSbEtIUm9hWE11WkdGMFpTeGNJblYwWTF3aUtUdDBhR2x6TG1oV1BYTjBiMmhsZUNoMGFHbHpMbk1wZlhKbGRIVnliaUIwYUdsekxtaFdmVHRwWmloaElUMDlkVzVrWldacGJtVmtLWHRwWmloaExuTjBjaUU5UFhWdVpHVm1hVzVsWkNsN2RHaHBjeTV6WlhSVGRISnBibWNvWVM1emRISXBmV1ZzYzJWN2FXWW9kSGx3Wlc5bUlHRTlQVndpYzNSeWFXNW5YQ0ltSm1FdWJXRjBZMmdvTDE1Yk1DMDVYWHN4TW4xYUpDOHBLWHQwYUdsekxuTmxkRk4wY21sdVp5aGhLWDFsYkhObGUybG1LR0V1YUdWNElUMDlkVzVrWldacGJtVmtLWHQwYUdsekxuTmxkRk4wY21sdVowaGxlQ2hoTG1obGVDbDlaV3h6Wlh0cFppaGhMbVJoZEdVaFBUMTFibVJsWm1sdVpXUXBlM1JvYVhNdWMyVjBRbmxFWVhSbEtHRXVaR0YwWlNsOWZYMTlmWDA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TGtSRlVsVlVRMVJwYldVc1MwcFZVaTVoYzI0eExrUkZVa0ZpYzNSeVlXTjBWR2x0WlNrN1MwcFZVaTVoYzI0eExrUkZVa2RsYm1WeVlXeHBlbVZrVkdsdFpUMW1kVzVqZEdsdmJpaGhLWHRMU2xWU0xtRnpiakV1UkVWU1IyVnVaWEpoYkdsNlpXUlVhVzFsTG5OMWNHVnlZMnhoYzNNdVkyOXVjM1J5ZFdOMGIzSXVZMkZzYkNoMGFHbHpMR0VwTzNSb2FYTXVhRlE5WENJeE9Gd2lPM1JvYVhNdWQybDBhRTFwYkd4cGN6MW1ZV3h6WlR0MGFHbHpMbk5sZEVKNVJHRjBaVDFtZFc1amRHbHZiaWhpS1h0MGFHbHpMbWhVVEZZOWJuVnNiRHQwYUdsekxtbHpUVzlrYVdacFpXUTlkSEoxWlR0MGFHbHpMbVJoZEdVOVlqdDBhR2x6TG5NOWRHaHBjeTVtYjNKdFlYUkVZWFJsS0hSb2FYTXVaR0YwWlN4Y0ltZGxibHdpTEhSb2FYTXVkMmwwYUUxcGJHeHBjeWs3ZEdocGN5NW9WajF6ZEc5b1pYZ29kR2hwY3k1ektYMDdkR2hwY3k1blpYUkdjbVZ6YUZaaGJIVmxTR1Y0UFdaMWJtTjBhVzl1S0NsN2FXWW9kR2hwY3k1a1lYUmxQVDA5ZFc1a1pXWnBibVZrSmlaMGFHbHpMbk05UFQxMWJtUmxabWx1WldRcGUzUm9hWE11WkdGMFpUMXVaWGNnUkdGMFpTZ3BPM1JvYVhNdWN6MTBhR2x6TG1admNtMWhkRVJoZEdVb2RHaHBjeTVrWVhSbExGd2laMlZ1WENJc2RHaHBjeTUzYVhSb1RXbHNiR2x6S1R0MGFHbHpMbWhXUFhOMGIyaGxlQ2gwYUdsekxuTXBmWEpsZEhWeWJpQjBhR2x6TG1oV2ZUdHBaaWhoSVQwOWRXNWtaV1pwYm1Wa0tYdHBaaWhoTG5OMGNpRTlQWFZ1WkdWbWFXNWxaQ2w3ZEdocGN5NXpaWFJUZEhKcGJtY29ZUzV6ZEhJcGZXVnNjMlY3YVdZb2RIbHdaVzltSUdFOVBWd2ljM1J5YVc1blhDSW1KbUV1YldGMFkyZ29MMTViTUMwNVhYc3hOSDFhSkM4cEtYdDBhR2x6TG5ObGRGTjBjbWx1WnloaEtYMWxiSE5sZTJsbUtHRXVhR1Y0SVQwOWRXNWtaV1pwYm1Wa0tYdDBhR2x6TG5ObGRGTjBjbWx1WjBobGVDaGhMbWhsZUNsOVpXeHpaWHRwWmloaExtUmhkR1VoUFQxMWJtUmxabWx1WldRcGUzUm9hWE11YzJWMFFubEVZWFJsS0dFdVpHRjBaU2w5ZlgxOWFXWW9ZUzV0YVd4c2FYTTlQVDEwY25WbEtYdDBhR2x6TG5kcGRHaE5hV3hzYVhNOWRISjFaWDE5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdVJFVlNSMlZ1WlhKaGJHbDZaV1JVYVcxbExFdEtWVkl1WVhOdU1TNUVSVkpCWW5OMGNtRmpkRlJwYldVcE8wdEtWVkl1WVhOdU1TNUVSVkpUWlhGMVpXNWpaVDFtZFc1amRHbHZiaWhoS1h0TFNsVlNMbUZ6YmpFdVJFVlNVMlZ4ZFdWdVkyVXVjM1Z3WlhKamJHRnpjeTVqYjI1emRISjFZM1J2Y2k1allXeHNLSFJvYVhNc1lTazdkR2hwY3k1b1ZEMWNJak13WENJN2RHaHBjeTVuWlhSR2NtVnphRlpoYkhWbFNHVjRQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHTTlYQ0pjSWp0bWIzSW9kbUZ5SUdJOU1EdGlQSFJvYVhNdVlYTnVNVUZ5Y21GNUxteGxibWQwYUR0aUt5c3BlM1poY2lCa1BYUm9hWE11WVhOdU1VRnljbUY1VzJKZE8yTXJQV1F1WjJWMFJXNWpiMlJsWkVobGVDZ3BmWFJvYVhNdWFGWTlZenR5WlhSMWNtNGdkR2hwY3k1b1ZuMTlPMWxCU0U5UExteGhibWN1WlhoMFpXNWtLRXRLVlZJdVlYTnVNUzVFUlZKVFpYRjFaVzVqWlN4TFNsVlNMbUZ6YmpFdVJFVlNRV0p6ZEhKaFkzUlRkSEoxWTNSMWNtVmtLVHRMU2xWU0xtRnpiakV1UkVWU1UyVjBQV1oxYm1OMGFXOXVLR0VwZTB0S1ZWSXVZWE51TVM1RVJWSlRaWFF1YzNWd1pYSmpiR0Z6Y3k1amIyNXpkSEoxWTNSdmNpNWpZV3hzS0hSb2FYTXNZU2s3ZEdocGN5NW9WRDFjSWpNeFhDSTdkR2hwY3k1emIzSjBSbXhoWnoxMGNuVmxPM1JvYVhNdVoyVjBSbkpsYzJoV1lXeDFaVWhsZUQxbWRXNWpkR2x2YmlncGUzWmhjaUJpUFc1bGR5QkJjbkpoZVNncE8yWnZjaWgyWVhJZ1l6MHdPMk04ZEdocGN5NWhjMjR4UVhKeVlYa3ViR1Z1WjNSb08yTXJLeWw3ZG1GeUlHUTlkR2hwY3k1aGMyNHhRWEp5WVhsYlkxMDdZaTV3ZFhOb0tHUXVaMlYwUlc1amIyUmxaRWhsZUNncEtYMXBaaWgwYUdsekxuTnZjblJHYkdGblBUMTBjblZsS1h0aUxuTnZjblFvS1gxMGFHbHpMbWhXUFdJdWFtOXBiaWhjSWx3aUtUdHlaWFIxY200Z2RHaHBjeTVvVm4wN2FXWW9kSGx3Wlc5bUlHRWhQVndpZFc1a1pXWnBibVZrWENJcGUybG1LSFI1Y0dWdlppQmhMbk52Y25SbWJHRm5JVDFjSW5WdVpHVm1hVzVsWkZ3aUppWmhMbk52Y25SbWJHRm5QVDFtWVd4elpTbDdkR2hwY3k1emIzSjBSbXhoWnoxbVlXeHpaWDE5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdVJFVlNVMlYwTEV0S1ZWSXVZWE51TVM1RVJWSkJZbk4wY21GamRGTjBjblZqZEhWeVpXUXBPMHRLVlZJdVlYTnVNUzVFUlZKVVlXZG5aV1JQWW1wbFkzUTlablZ1WTNScGIyNG9ZU2w3UzBwVlVpNWhjMjR4TGtSRlVsUmhaMmRsWkU5aWFtVmpkQzV6ZFhCbGNtTnNZWE56TG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5azdkR2hwY3k1b1ZEMWNJbUV3WENJN2RHaHBjeTVvVmoxY0lsd2lPM1JvYVhNdWFYTkZlSEJzYVdOcGREMTBjblZsTzNSb2FYTXVZWE51TVU5aWFtVmpkRDF1ZFd4c08zUm9hWE11YzJWMFFWTk9NVTlpYW1WamREMW1kVzVqZEdsdmJpaGlMR01zWkNsN2RHaHBjeTVvVkQxak8zUm9hWE11YVhORmVIQnNhV05wZEQxaU8zUm9hWE11WVhOdU1VOWlhbVZqZEQxa08ybG1LSFJvYVhNdWFYTkZlSEJzYVdOcGRDbDdkR2hwY3k1b1ZqMTBhR2x6TG1GemJqRlBZbXBsWTNRdVoyVjBSVzVqYjJSbFpFaGxlQ2dwTzNSb2FYTXVhRlJNVmoxdWRXeHNPM1JvYVhNdWFYTk5iMlJwWm1sbFpEMTBjblZsZldWc2MyVjdkR2hwY3k1b1ZqMXVkV3hzTzNSb2FYTXVhRlJNVmoxa0xtZGxkRVZ1WTI5a1pXUklaWGdvS1R0MGFHbHpMbWhVVEZZOWRHaHBjeTVvVkV4V0xuSmxjR3hoWTJVb0wxNHVMaThzWXlrN2RHaHBjeTVwYzAxdlpHbG1hV1ZrUFdaaGJITmxmWDA3ZEdocGN5NW5aWFJHY21WemFGWmhiSFZsU0dWNFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11YUZaOU8ybG1LSFI1Y0dWdlppQmhJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdHBaaWgwZVhCbGIyWWdZUzUwWVdjaFBWd2lkVzVrWldacGJtVmtYQ0lwZTNSb2FYTXVhRlE5WVM1MFlXZDlhV1lvZEhsd1pXOW1JR0V1Wlhod2JHbGphWFFoUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlM1JvYVhNdWFYTkZlSEJzYVdOcGREMWhMbVY0Y0d4cFkybDBmV2xtS0hSNWNHVnZaaUJoTG05aWFpRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTVoYzI0eFQySnFaV04wUFdFdWIySnFPM1JvYVhNdWMyVjBRVk5PTVU5aWFtVmpkQ2gwYUdsekxtbHpSWGh3YkdsamFYUXNkR2hwY3k1b1ZDeDBhR2x6TG1GemJqRlBZbXBsWTNRcGZYMTlPMWxCU0U5UExteGhibWN1WlhoMFpXNWtLRXRLVlZJdVlYTnVNUzVFUlZKVVlXZG5aV1JQWW1wbFkzUXNTMHBWVWk1aGMyNHhMa0ZUVGpGUFltcGxZM1FwTzF4dUx5b2hJR0Z6YmpGb1pYZ3RNUzR4TGpZdWFuTWdLR01wSURJd01USXRNakF4TlNCTFpXNXFhU0JWY25WemFHbHRZU0I4SUd0cWRYSXVaMmwwYUhWaUxtTnZiUzlxYzNKellYTnBaMjR2YkdsalpXNXpaVnh1SUNvdlhHNTJZWElnUVZOT01VaEZXRDF1WlhjZ1puVnVZM1JwYjI0b0tYdDBhR2x6TG1kbGRFSjVkR1ZNWlc1bmRHaFBaa3hmUVhSUFltbzlablZ1WTNScGIyNG9ZaXhqS1h0cFppaGlMbk4xWW5OMGNtbHVaeWhqS3pJc1l5c3pLU0U5WENJNFhDSXBlM0psZEhWeWJpQXhmWFpoY2lCaFBYQmhjbk5sU1c1MEtHSXVjM1ZpYzNSeWFXNW5LR01yTXl4akt6UXBLVHRwWmloaFBUMHdLWHR5WlhSMWNtNGdMVEY5YVdZb01EeGhKaVpoUERFd0tYdHlaWFIxY200Z1lTc3hmWEpsZEhWeWJpQXRNbjA3ZEdocGN5NW5aWFJJWlhoUFpreGZRWFJQWW1vOVpuVnVZM1JwYjI0b1lpeGpLWHQyWVhJZ1lUMTBhR2x6TG1kbGRFSjVkR1ZNWlc1bmRHaFBaa3hmUVhSUFltb29ZaXhqS1R0cFppaGhQREVwZTNKbGRIVnlibHdpWENKOWNtVjBkWEp1SUdJdWMzVmljM1J5YVc1bktHTXJNaXhqS3pJcllTb3lLWDA3ZEdocGN5NW5aWFJKYm5SUFpreGZRWFJQWW1vOVpuVnVZM1JwYjI0b1l5eGtLWHQyWVhJZ1lqMTBhR2x6TG1kbGRFaGxlRTltVEY5QmRFOWlhaWhqTEdRcE8ybG1LR0k5UFZ3aVhDSXBlM0psZEhWeWJpQXRNWDEyWVhJZ1lUdHBaaWh3WVhKelpVbHVkQ2hpTG5OMVluTjBjbWx1Wnlnd0xERXBLVHc0S1h0aFBXNWxkeUJDYVdkSmJuUmxaMlZ5S0dJc01UWXBmV1ZzYzJWN1lUMXVaWGNnUW1sblNXNTBaV2RsY2loaUxuTjFZbk4wY21sdVp5Z3lLU3d4TmlsOWNtVjBkWEp1SUdFdWFXNTBWbUZzZFdVb0tYMDdkR2hwY3k1blpYUlRkR0Z5ZEZCdmMwOW1WbDlCZEU5aWFqMW1kVzVqZEdsdmJpaGlMR01wZTNaaGNpQmhQWFJvYVhNdVoyVjBRbmwwWlV4bGJtZDBhRTltVEY5QmRFOWlhaWhpTEdNcE8ybG1LR0U4TUNsN2NtVjBkWEp1SUdGOWNtVjBkWEp1SUdNcktHRXJNU2txTW4wN2RHaHBjeTVuWlhSSVpYaFBabFpmUVhSUFltbzlablZ1WTNScGIyNG9ZeXhrS1h0MllYSWdZajEwYUdsekxtZGxkRk4wWVhKMFVHOXpUMlpXWDBGMFQySnFLR01zWkNrN2RtRnlJR0U5ZEdocGN5NW5aWFJKYm5SUFpreGZRWFJQWW1vb1l5eGtLVHR5WlhSMWNtNGdZeTV6ZFdKemRISnBibWNvWWl4aUsyRXFNaWw5TzNSb2FYTXVaMlYwU0dWNFQyWlVURlpmUVhSUFltbzlablZ1WTNScGIyNG9ZeXhsS1h0MllYSWdZajFqTG5OMVluTjBjaWhsTERJcE8zWmhjaUJrUFhSb2FYTXVaMlYwU0dWNFQyWk1YMEYwVDJKcUtHTXNaU2s3ZG1GeUlHRTlkR2hwY3k1blpYUklaWGhQWmxaZlFYUlBZbW9vWXl4bEtUdHlaWFIxY200Z1lpdGtLMkY5TzNSb2FYTXVaMlYwVUc5elQyWk9aWGgwVTJsaWJHbHVaMTlCZEU5aWFqMW1kVzVqZEdsdmJpaGpMR1FwZTNaaGNpQmlQWFJvYVhNdVoyVjBVM1JoY25SUWIzTlBabFpmUVhSUFltb29ZeXhrS1R0MllYSWdZVDEwYUdsekxtZGxkRWx1ZEU5bVRGOUJkRTlpYWloakxHUXBPM0psZEhWeWJpQmlLMkVxTW4wN2RHaHBjeTVuWlhSUWIzTkJjbkpoZVU5bVEyaHBiR1J5Wlc1ZlFYUlBZbW85Wm5WdVkzUnBiMjRvWml4cUtYdDJZWElnWXoxdVpYY2dRWEp5WVhrb0tUdDJZWElnYVQxMGFHbHpMbWRsZEZOMFlYSjBVRzl6VDJaV1gwRjBUMkpxS0dZc2FpazdZeTV3ZFhOb0tHa3BPM1poY2lCaVBYUm9hWE11WjJWMFNXNTBUMlpNWDBGMFQySnFLR1lzYWlrN2RtRnlJR2M5YVR0MllYSWdaRDB3TzNkb2FXeGxLREVwZTNaaGNpQmxQWFJvYVhNdVoyVjBVRzl6VDJaT1pYaDBVMmxpYkdsdVoxOUJkRTlpYWlobUxHY3BPMmxtS0dVOVBXNTFiR3g4ZkNobExXaytQU2hpS2pJcEtTbDdZbkpsWVd0OWFXWW9aRDQ5TWpBd0tYdGljbVZoYTMxakxuQjFjMmdvWlNrN1p6MWxPMlFySzMxeVpYUjFjbTRnWTMwN2RHaHBjeTVuWlhST2RHaERhR2xzWkVsdVpHVjRYMEYwVDJKcVBXWjFibU4wYVc5dUtHUXNZaXhsS1h0MllYSWdZejEwYUdsekxtZGxkRkJ2YzBGeWNtRjVUMlpEYUdsc1pISmxibDlCZEU5aWFpaGtMR0lwTzNKbGRIVnliaUJqVzJWZGZUdDBhR2x6TG1kbGRFUmxZMlZ1WkdGdWRFbHVaR1Y0UW5sT2RHaE1hWE4wUFdaMWJtTjBhVzl1S0dVc1pDeGpLWHRwWmloakxteGxibWQwYUQwOU1DbDdjbVYwZFhKdUlHUjlkbUZ5SUdZOVl5NXphR2xtZENncE8zWmhjaUJpUFhSb2FYTXVaMlYwVUc5elFYSnlZWGxQWmtOb2FXeGtjbVZ1WDBGMFQySnFLR1VzWkNrN2NtVjBkWEp1SUhSb2FYTXVaMlYwUkdWalpXNWtZVzUwU1c1a1pYaENlVTUwYUV4cGMzUW9aU3hpVzJaZExHTXBmVHQwYUdsekxtZGxkRVJsWTJWdVpHRnVkRWhsZUZSTVZrSjVUblJvVEdsemREMW1kVzVqZEdsdmJpaGtMR01zWWlsN2RtRnlJR0U5ZEdocGN5NW5aWFJFWldObGJtUmhiblJKYm1SbGVFSjVUblJvVEdsemRDaGtMR01zWWlrN2NtVjBkWEp1SUhSb2FYTXVaMlYwU0dWNFQyWlVURlpmUVhSUFltb29aQ3hoS1gwN2RHaHBjeTVuWlhSRVpXTmxibVJoYm5SSVpYaFdRbmxPZEdoTWFYTjBQV1oxYm1OMGFXOXVLR1FzWXl4aUtYdDJZWElnWVQxMGFHbHpMbWRsZEVSbFkyVnVaR0Z1ZEVsdVpHVjRRbmxPZEdoTWFYTjBLR1FzWXl4aUtUdHlaWFIxY200Z2RHaHBjeTVuWlhSSVpYaFBabFpmUVhSUFltb29aQ3hoS1gxOU8wRlRUakZJUlZndVoyVjBWbUo1VEdsemREMW1kVzVqZEdsdmJpaGtMR01zWWl4bEtYdDJZWElnWVQxMGFHbHpMbWRsZEVSbFkyVnVaR0Z1ZEVsdVpHVjRRbmxPZEdoTWFYTjBLR1FzWXl4aUtUdHBaaWhoUFQwOWRXNWtaV1pwYm1Wa0tYdDBhSEp2ZDF3aVkyRnVKM1FnWm1sdVpDQnVkR2hNYVhOMElHOWlhbVZqZEZ3aWZXbG1LR1VoUFQxMWJtUmxabWx1WldRcGUybG1LR1F1YzNWaWMzUnlLR0VzTWlraFBXVXBlM1JvY205M1hDSmphR1ZqYTJsdVp5QjBZV2NnWkc5bGMyNG5kQ0J0WVhSamFEb2dYQ0lyWkM1emRXSnpkSElvWVN3eUtTdGNJaUU5WENJclpYMTljbVYwZFhKdUlIUm9hWE11WjJWMFNHVjRUMlpXWDBGMFQySnFLR1FzWVNsOU8wRlRUakZJUlZndWFHVjRkRzl2YVdSemRISTlablZ1WTNScGIyNG9aU2w3ZG1GeUlHZzlablZ1WTNScGIyNG9ZaXhoS1h0cFppaGlMbXhsYm1kMGFENDlZU2w3Y21WMGRYSnVJR0o5Y21WMGRYSnVJRzVsZHlCQmNuSmhlU2hoTFdJdWJHVnVaM1JvS3pFcExtcHZhVzRvWENJd1hDSXBLMko5TzNaaGNpQnNQVnRkTzNaaGNpQnZQV1V1YzNWaWMzUnlLREFzTWlrN2RtRnlJR1k5Y0dGeWMyVkpiblFvYnl3eE5pazdiRnN3WFQxdVpYY2dVM1J5YVc1bktFMWhkR2d1Wm14dmIzSW9aaTgwTUNrcE8yeGJNVjA5Ym1WM0lGTjBjbWx1WnlobUpUUXdLVHQyWVhJZ2JUMWxMbk4xWW5OMGNpZ3lLVHQyWVhJZ2F6MWJYVHRtYjNJb2RtRnlJR2M5TUR0blBHMHViR1Z1WjNSb0x6STdaeXNyS1h0ckxuQjFjMmdvY0dGeWMyVkpiblFvYlM1emRXSnpkSElvWnlveUxESXBMREUyS1NsOWRtRnlJR285VzEwN2RtRnlJR1E5WENKY0lqdG1iM0lvZG1GeUlHYzlNRHRuUEdzdWJHVnVaM1JvTzJjckt5bDdhV1lvYTF0blhTWXhNamdwZTJROVpDdG9LQ2hyVzJkZEpqRXlOeWt1ZEc5VGRISnBibWNvTWlrc055bDlaV3h6Wlh0a1BXUXJhQ2dvYTF0blhTWXhNamNwTG5SdlUzUnlhVzVuS0RJcExEY3BPMm91Y0hWemFDaHVaWGNnVTNSeWFXNW5LSEJoY25ObFNXNTBLR1FzTWlrcEtUdGtQVndpWENKOWZYWmhjaUJ1UFd3dWFtOXBiaWhjSWk1Y0lpazdhV1lvYWk1c1pXNW5kR2crTUNsN2JqMXVLMXdpTGx3aUsyb3VhbTlwYmloY0lpNWNJaWw5Y21WMGRYSnVJRzU5TzBGVFRqRklSVmd1WkhWdGNEMW1kVzVqZEdsdmJpaGxMR01zYXl4bktYdDJZWElnYnoxbWRXNWpkR2x2YmloM0xHa3BlMmxtS0hjdWJHVnVaM1JvUEQxcEtqSXBlM0psZEhWeWJpQjNmV1ZzYzJWN2RtRnlJSFk5ZHk1emRXSnpkSElvTUN4cEtTdGNJaTR1S0hSdmRHRnNJRndpSzNjdWJHVnVaM1JvTHpJclhDSmllWFJsY3lrdUxsd2lLM2N1YzNWaWMzUnlLSGN1YkdWdVozUm9MV2tzYVNrN2NtVjBkWEp1SUhaOWZUdHBaaWhqUFQwOWRXNWtaV1pwYm1Wa0tYdGpQWHR2YlcxcGRGOXNiMjVuWDI5amRHVjBPak15ZlgxcFppaHJQVDA5ZFc1a1pXWnBibVZrS1h0clBUQjlhV1lvWnowOVBYVnVaR1ZtYVc1bFpDbDdaejFjSWx3aWZYWmhjaUJ5UFdNdWIyMXRhWFJmYkc5dVoxOXZZM1JsZER0cFppaGxMbk4xWW5OMGNpaHJMRElwUFQxY0lqQXhYQ0lwZTNaaGNpQm9QVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtHVXNheWs3YVdZb2FEMDlYQ0l3TUZ3aUtYdHlaWFIxY200Z1p5dGNJa0pQVDB4RlFVNGdSa0ZNVTBWY1hHNWNJbjFsYkhObGUzSmxkSFZ5YmlCbksxd2lRazlQVEVWQlRpQlVVbFZGWEZ4dVhDSjlmV2xtS0dVdWMzVmljM1J5S0dzc01pazlQVndpTURKY0lpbDdkbUZ5SUdnOVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vWlN4cktUdHlaWFIxY200Z1p5dGNJa2xPVkVWSFJWSWdYQ0lyYnlob0xISXBLMXdpWEZ4dVhDSjlhV1lvWlM1emRXSnpkSElvYXl3eUtUMDlYQ0l3TTF3aUtYdDJZWElnYUQxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWhsTEdzcE8zSmxkSFZ5YmlCbksxd2lRa2xVVTFSU1NVNUhJRndpSzI4b2FDeHlLU3RjSWx4Y2Jsd2lmV2xtS0dVdWMzVmljM1J5S0dzc01pazlQVndpTURSY0lpbDdkbUZ5SUdnOVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vWlN4cktUdHBaaWhCVTA0eFNFVllMbWx6UVZOT01VaEZXQ2hvS1NsN2RtRnlJR285Wnl0Y0lrOURWRVZVVTFSU1NVNUhMQ0JsYm1OaGNITjFiR0YwWlhOY1hHNWNJanRxUFdvclFWTk9NVWhGV0M1a2RXMXdLR2dzWXl3d0xHY3JYQ0lnSUZ3aUtUdHlaWFIxY200Z2FuMWxiSE5sZTNKbGRIVnliaUJuSzF3aVQwTlVSVlJUVkZKSlRrY2dYQ0lyYnlob0xISXBLMXdpWEZ4dVhDSjlmV2xtS0dVdWMzVmljM1J5S0dzc01pazlQVndpTURWY0lpbDdjbVYwZFhKdUlHY3JYQ0pPVlV4TVhGeHVYQ0o5YVdZb1pTNXpkV0p6ZEhJb2F5d3lLVDA5WENJd05sd2lLWHQyWVhJZ2JEMUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZsOUJkRTlpYWlobExHc3BPM1poY2lCaFBVdEtWVkl1WVhOdU1TNUJVMDR4VlhScGJDNXZhV1JJWlhoVWIwbHVkQ2hzS1R0MllYSWdiajFMU2xWU0xtRnpiakV1ZURVd09TNVBTVVF1YjJsa01tNWhiV1VvWVNrN2RtRnlJR0k5WVM1eVpYQnNZV05sS0M5Y1hDNHZaeXhjSWlCY0lpazdhV1lvYmlFOVhDSmNJaWw3Y21WMGRYSnVJR2NyWENKUFltcGxZM1JKWkdWdWRHbG1hV1Z5SUZ3aUsyNHJYQ0lnS0Z3aUsySXJYQ0lwWEZ4dVhDSjlaV3h6Wlh0eVpYUjFjbTRnWnl0Y0lrOWlhbVZqZEVsa1pXNTBhV1pwWlhJZ0tGd2lLMklyWENJcFhGeHVYQ0o5ZldsbUtHVXVjM1ZpYzNSeUtHc3NNaWs5UFZ3aU1HTmNJaWw3Y21WMGRYSnVJR2NyWENKVlZFWTRVM1J5YVc1bklDZGNJaXRvWlhoMGIzVjBaamdvUVZOT01VaEZXQzVuWlhSSVpYaFBabFpmUVhSUFltb29aU3hyS1NrclhDSW5YRnh1WENKOWFXWW9aUzV6ZFdKemRISW9heXd5S1QwOVhDSXhNMXdpS1h0eVpYUjFjbTRnWnl0Y0lsQnlhVzUwWVdKc1pWTjBjbWx1WnlBblhDSXJhR1Y0ZEc5MWRHWTRLRUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtHVXNheWtwSzF3aUoxeGNibHdpZldsbUtHVXVjM1ZpYzNSeUtHc3NNaWs5UFZ3aU1UUmNJaWw3Y21WMGRYSnVJR2NyWENKVVpXeGxkR1Y0VTNSeWFXNW5JQ2RjSWl0b1pYaDBiM1YwWmpnb1FWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vWlN4cktTa3JYQ0luWEZ4dVhDSjlhV1lvWlM1emRXSnpkSElvYXl3eUtUMDlYQ0l4Tmx3aUtYdHlaWFIxY200Z1p5dGNJa2xCTlZOMGNtbHVaeUFuWENJcmFHVjRkRzkxZEdZNEtFRlRUakZJUlZndVoyVjBTR1Y0VDJaV1gwRjBUMkpxS0dVc2F5a3BLMXdpSjF4Y2Jsd2lmV2xtS0dVdWMzVmljM1J5S0dzc01pazlQVndpTVRkY0lpbDdjbVYwZFhKdUlHY3JYQ0pWVkVOVWFXMWxJRndpSzJobGVIUnZkWFJtT0NoQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWhsTEdzcEtTdGNJbHhjYmx3aWZXbG1LR1V1YzNWaWMzUnlLR3NzTWlrOVBWd2lNVGhjSWlsN2NtVjBkWEp1SUdjclhDSkhaVzVsY21Gc2FYcGxaRlJwYldVZ1hDSXJhR1Y0ZEc5MWRHWTRLRUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtHVXNheWtwSzF3aVhGeHVYQ0o5YVdZb1pTNXpkV0p6ZEhJb2F5d3lLVDA5WENJek1Gd2lLWHRwWmlobExuTjFZbk4wY2lockxEUXBQVDFjSWpNd01EQmNJaWw3Y21WMGRYSnVJR2NyWENKVFJWRlZSVTVEUlNCN2ZWeGNibHdpZlhaaGNpQnFQV2NyWENKVFJWRlZSVTVEUlZ4Y2Jsd2lPM1poY2lCa1BVRlRUakZJUlZndVoyVjBVRzl6UVhKeVlYbFBaa05vYVd4a2NtVnVYMEYwVDJKcUtHVXNheWs3ZG1GeUlHWTlZenRwWmlnb1pDNXNaVzVuZEdnOVBUSjhmR1F1YkdWdVozUm9QVDB6S1NZbVpTNXpkV0p6ZEhJb1pGc3dYU3d5S1QwOVhDSXdObHdpSmlabExuTjFZbk4wY2loa1cyUXViR1Z1WjNSb0xURmRMRElwUFQxY0lqQTBYQ0lwZTNaaGNpQjBQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtHVXNaRnN3WFNrN2RtRnlJR0U5UzBwVlVpNWhjMjR4TGtGVFRqRlZkR2xzTG05cFpFaGxlRlJ2U1c1MEtIUXBPM1poY2lCdVBVdEtWVkl1WVhOdU1TNTROVEE1TGs5SlJDNXZhV1F5Ym1GdFpTaGhLVHQyWVhJZ2NEMUtVMDlPTG5CaGNuTmxLRXBUVDA0dWMzUnlhVzVuYVdaNUtHTXBLVHR3TG5nMU1EbEZlSFJPWVcxbFBXNDdaajF3ZldadmNpaDJZWElnY1Qwd08zRThaQzVzWlc1bmRHZzdjU3NyS1h0cVBXb3JRVk5PTVVoRldDNWtkVzF3S0dVc1ppeGtXM0ZkTEdjclhDSWdJRndpS1gxeVpYUjFjbTRnYW4xcFppaGxMbk4xWW5OMGNpaHJMRElwUFQxY0lqTXhYQ0lwZTNaaGNpQnFQV2NyWENKVFJWUmNYRzVjSWp0MllYSWdaRDFCVTA0eFNFVllMbWRsZEZCdmMwRnljbUY1VDJaRGFHbHNaSEpsYmw5QmRFOWlhaWhsTEdzcE8yWnZjaWgyWVhJZ2NUMHdPM0U4WkM1c1pXNW5kR2c3Y1NzcktYdHFQV29yUVZOT01VaEZXQzVrZFcxd0tHVXNZeXhrVzNGZExHY3JYQ0lnSUZ3aUtYMXlaWFIxY200Z2FuMTJZWElnZFQxd1lYSnpaVWx1ZENobExuTjFZbk4wY2lockxESXBMREUyS1R0cFppZ29kU1l4TWpncElUMHdLWHQyWVhJZ2JUMTFKak14TzJsbUtDaDFKak15S1NFOU1DbDdkbUZ5SUdvOVp5dGNJbHRjSWl0dEsxd2lYVnhjYmx3aU8zWmhjaUJrUFVGVFRqRklSVmd1WjJWMFVHOXpRWEp5WVhsUFprTm9hV3hrY21WdVgwRjBUMkpxS0dVc2F5azdabTl5S0haaGNpQnhQVEE3Y1R4a0xteGxibWQwYUR0eEt5c3BlMm85YWl0QlUwNHhTRVZZTG1SMWJYQW9aU3hqTEdSYmNWMHNaeXRjSWlBZ1hDSXBmWEpsZEhWeWJpQnFmV1ZzYzJWN2RtRnlJR2c5UVZOT01VaEZXQzVuWlhSSVpYaFBabFpmUVhSUFltb29aU3hyS1R0cFppaG9Mbk4xWW5OMGNpZ3dMRGdwUFQxY0lqWTROelEzTkRjd1hDSXBlMmc5YUdWNGRHOTFkR1k0S0dncGZXbG1LR011ZURVd09VVjRkRTVoYldVOVBUMWNJbk4xWW1wbFkzUkJiSFJPWVcxbFhDSW1KbTA5UFRJcGUyZzlhR1Y0ZEc5MWRHWTRLR2dwZlhaaGNpQnFQV2NyWENKYlhDSXJiU3RjSWwwZ1hDSXJhQ3RjSWx4Y2Jsd2lPM0psZEhWeWJpQnFmWDF5WlhSMWNtNGdaeXRjSWxWT1MwNVBWMDRvWENJclpTNXpkV0p6ZEhJb2F5d3lLU3RjSWlrZ1hDSXJRVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb1pTeHJLU3RjSWx4Y2Jsd2lmVHRCVTA0eFNFVllMbWx6UVZOT01VaEZXRDFtZFc1amRHbHZiaWhrS1h0cFppaGtMbXhsYm1kMGFDVXlQVDB4S1h0eVpYUjFjbTRnWm1Gc2MyVjlkbUZ5SUdNOVFWTk9NVWhGV0M1blpYUkpiblJQWmt4ZlFYUlBZbW9vWkN3d0tUdDJZWElnWWoxa0xuTjFZbk4wY2lnd0xESXBPM1poY2lCbFBVRlRUakZJUlZndVoyVjBTR1Y0VDJaTVgwRjBUMkpxS0dRc01DazdkbUZ5SUdFOVpDNXNaVzVuZEdndFlpNXNaVzVuZEdndFpTNXNaVzVuZEdnN2FXWW9ZVDA5WXlveUtYdHlaWFIxY200Z2RISjFaWDF5WlhSMWNtNGdabUZzYzJWOU8xeHVMeW9oSUdGemJqRjROVEE1TFRFdU1DNHhOQzVxY3lBb1l5a2dNakF4TXkweU1ERTFJRXRsYm1wcElGVnlkWE5vYVcxaElId2dhMnAxY2k1bmFYUm9kV0l1WTI5dEwycHpjbk5oYzJsbmJpOXNhV05sYm5ObFhHNGdLaTljYm1sbUtIUjVjR1Z2WmlCTFNsVlNQVDFjSW5WdVpHVm1hVzVsWkZ3aWZId2hTMHBWVWlsN1MwcFZVajE3ZlgxcFppaDBlWEJsYjJZZ1MwcFZVaTVoYzI0eFBUMWNJblZ1WkdWbWFXNWxaRndpZkh3aFMwcFZVaTVoYzI0eEtYdExTbFZTTG1GemJqRTllMzE5YVdZb2RIbHdaVzltSUV0S1ZWSXVZWE51TVM1NE5UQTVQVDFjSW5WdVpHVm1hVzVsWkZ3aWZId2hTMHBWVWk1aGMyNHhMbmcxTURrcGUwdEtWVkl1WVhOdU1TNTROVEE1UFh0OWZVdEtWVkl1WVhOdU1TNTROVEE1TGtObGNuUnBabWxqWVhSbFBXWjFibU4wYVc5dUtHY3BlMHRLVlZJdVlYTnVNUzU0TlRBNUxrTmxjblJwWm1sallYUmxMbk4xY0dWeVkyeGhjM011WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2gwYUdsektUdDJZWElnWWoxdWRXeHNPM1poY2lCa1BXNTFiR3c3ZG1GeUlHWTliblZzYkR0MllYSWdZejF1ZFd4c08zWmhjaUJoUFc1MWJHdzdkbUZ5SUdVOWJuVnNiRHQwYUdsekxuTmxkRkp6WVZCeWRrdGxlVUo1VUVWTllXNWtVR0Z6Y3oxbWRXNWpkR2x2YmlocExHc3BlM1poY2lCb1BWQkxRMU0xVUV0RldTNW5aWFJFWldOeWVYQjBaV1JMWlhsSVpYZ29hU3hyS1R0MllYSWdhajF1WlhjZ1VsTkJTMlY1S0NrN2FpNXlaV0ZrVUhKcGRtRjBaVXRsZVVaeWIyMUJVMDR4U0dWNFUzUnlhVzVuS0dncE8zUm9hWE11Y0hKMlMyVjVQV3A5TzNSb2FYTXVjMmxuYmoxbWRXNWpkR2x2YmlncGUzUm9hWE11WVhOdU1WTnBaMjVoZEhWeVpVRnNaejEwYUdsekxtRnpiakZVUWxORFpYSjBMbUZ6YmpGVGFXZHVZWFIxY21WQmJHYzdjMmxuUFc1bGR5QkxTbFZTTG1OeWVYQjBieTVUYVdkdVlYUjFjbVVvZTJGc1p6cGNJbE5JUVRGM2FYUm9VbE5CWENKOUtUdHphV2N1YVc1cGRDaDBhR2x6TG5CeWRrdGxlU2s3YzJsbkxuVndaR0YwWlVobGVDaDBhR2x6TG1GemJqRlVRbE5EWlhKMExtZGxkRVZ1WTI5a1pXUklaWGdvS1NrN2RHaHBjeTVvWlhoVGFXYzljMmxuTG5OcFoyNG9LVHQwYUdsekxtRnpiakZUYVdjOWJtVjNJRXRLVlZJdVlYTnVNUzVFUlZKQ2FYUlRkSEpwYm1jb2UyaGxlRHBjSWpBd1hDSXJkR2hwY3k1b1pYaFRhV2Q5S1R0MllYSWdhRDF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVbE5sY1hWbGJtTmxLSHRoY25KaGVUcGJkR2hwY3k1aGMyNHhWRUpUUTJWeWRDeDBhR2x6TG1GemJqRlRhV2R1WVhSMWNtVkJiR2NzZEdocGN5NWhjMjR4VTJsblhYMHBPM1JvYVhNdWFGUk1WajFvTG1kbGRFVnVZMjlrWldSSVpYZ29LVHQwYUdsekxtbHpUVzlrYVdacFpXUTlabUZzYzJWOU8zUm9hWE11YzJWMFUybG5ibUYwZFhKbFNHVjRQV1oxYm1OMGFXOXVLR2dwZTNSb2FYTXVZWE51TVZOcFoyNWhkSFZ5WlVGc1p6MTBhR2x6TG1GemJqRlVRbE5EWlhKMExtRnpiakZUYVdkdVlYUjFjbVZCYkdjN2RHaHBjeTVvWlhoVGFXYzlhRHQwYUdsekxtRnpiakZUYVdjOWJtVjNJRXRLVlZJdVlYTnVNUzVFUlZKQ2FYUlRkSEpwYm1jb2UyaGxlRHBjSWpBd1hDSXJkR2hwY3k1b1pYaFRhV2Q5S1R0MllYSWdhVDF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVbE5sY1hWbGJtTmxLSHRoY25KaGVUcGJkR2hwY3k1aGMyNHhWRUpUUTJWeWRDeDBhR2x6TG1GemJqRlRhV2R1WVhSMWNtVkJiR2NzZEdocGN5NWhjMjR4VTJsblhYMHBPM1JvYVhNdWFGUk1WajFwTG1kbGRFVnVZMjlrWldSSVpYZ29LVHQwYUdsekxtbHpUVzlrYVdacFpXUTlabUZzYzJWOU8zUm9hWE11WjJWMFJXNWpiMlJsWkVobGVEMW1kVzVqZEdsdmJpZ3BlMmxtS0hSb2FYTXVhWE5OYjJScFptbGxaRDA5Wm1Gc2MyVW1KblJvYVhNdWFGUk1WaUU5Ym5Wc2JDbDdjbVYwZFhKdUlIUm9hWE11YUZSTVZuMTBhSEp2ZDF3aWJtOTBJSE5wWjI1bFpDQjVaWFJjSW4wN2RHaHBjeTVuWlhSUVJVMVRkSEpwYm1jOVpuVnVZM1JwYjI0b0tYdDJZWElnYWoxMGFHbHpMbWRsZEVWdVkyOWtaV1JJWlhnb0tUdDJZWElnYUQxRGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5CaGNuTmxLR29wTzNaaGNpQnBQVU55ZVhCMGIwcFRMbVZ1WXk1Q1lYTmxOalF1YzNSeWFXNW5hV1o1S0dncE8zWmhjaUJyUFdrdWNtVndiR0ZqWlNndktDNTdOalI5S1M5bkxGd2lKREZjWEhKY1hHNWNJaWs3Y21WMGRYSnVYQ0l0TFMwdExVSkZSMGxPSUVORlVsUkpSa2xEUVZSRkxTMHRMUzFjWEhKY1hHNWNJaXRySzF3aVhGeHlYRnh1TFMwdExTMUZUa1FnUTBWU1ZFbEdTVU5CVkVVdExTMHRMVnhjY2x4Y2Jsd2lmVHRwWmloMGVYQmxiMllnWnlFOVhDSjFibVJsWm1sdVpXUmNJaWw3YVdZb2RIbHdaVzltSUdjdWRHSnpZMlZ5ZEc5aWFpRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTVoYzI0eFZFSlRRMlZ5ZEQxbkxuUmljMk5sY25SdlltcDlhV1lvZEhsd1pXOW1JR2N1Y0hKMmEyVjViMkpxSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHQwYUdsekxuQnlka3RsZVQxbkxuQnlkbXRsZVc5aWFuMWxiSE5sZTJsbUtIUjVjR1Z2WmlCbkxuSnpZWEJ5ZG10bGVTRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTV3Y25aTFpYazlaeTV5YzJGd2NuWnJaWGw5Wld4elpYdHBaaWdvZEhsd1pXOW1JR2N1Y25OaGNISjJjR1Z0SVQxY0luVnVaR1ZtYVc1bFpGd2lLU1ltS0hSNWNHVnZaaUJuTG5KellYQnlkbkJoY3lFOVhDSjFibVJsWm1sdVpXUmNJaWtwZTNSb2FYTXVjMlYwVW5OaFVISjJTMlY1UW5sUVJVMWhibVJRWVhOektHY3Vjbk5oY0hKMmNHVnRMR2N1Y25OaGNISjJjR0Z6S1gxOWZYMTlPMWxCU0U5UExteGhibWN1WlhoMFpXNWtLRXRLVlZJdVlYTnVNUzU0TlRBNUxrTmxjblJwWm1sallYUmxMRXRLVlZJdVlYTnVNUzVCVTA0eFQySnFaV04wS1R0TFNsVlNMbUZ6YmpFdWVEVXdPUzVVUWxORFpYSjBhV1pwWTJGMFpUMW1kVzVqZEdsdmJpaGhLWHRMU2xWU0xtRnpiakV1ZURVd09TNVVRbE5EWlhKMGFXWnBZMkYwWlM1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeWs3ZEdocGN5NWZhVzVwZEdsaGJHbDZaVDFtZFc1amRHbHZiaWdwZTNSb2FYTXVZWE51TVVGeWNtRjVQVzVsZHlCQmNuSmhlU2dwTzNSb2FYTXVZWE51TVZabGNuTnBiMjQ5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpVWVdkblpXUlBZbXBsWTNRb2UyOWlhanB1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2x1ZEdWblpYSW9lMXdpYVc1MFhDSTZNbjBwZlNrN2RHaHBjeTVoYzI0eFUyVnlhV0ZzVG5WdFltVnlQVzUxYkd3N2RHaHBjeTVoYzI0eFUybG5ibUYwZFhKbFFXeG5QVzUxYkd3N2RHaHBjeTVoYzI0eFNYTnpkV1Z5UFc1MWJHdzdkR2hwY3k1aGMyNHhUbTkwUW1WbWIzSmxQVzUxYkd3N2RHaHBjeTVoYzI0eFRtOTBRV1owWlhJOWJuVnNiRHQwYUdsekxtRnpiakZUZFdKcVpXTjBQVzUxYkd3N2RHaHBjeTVoYzI0eFUzVmlhbEJMWlhrOWJuVnNiRHQwYUdsekxtVjRkR1Z1YzJsdmJuTkJjbkpoZVQxdVpYY2dRWEp5WVhrb0tYMDdkR2hwY3k1elpYUlRaWEpwWVd4T2RXMWlaWEpDZVZCaGNtRnRQV1oxYm1OMGFXOXVLR0lwZTNSb2FYTXVZWE51TVZObGNtbGhiRTUxYldKbGNqMXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVrbHVkR1ZuWlhJb1lpbDlPM1JvYVhNdWMyVjBVMmxuYm1GMGRYSmxRV3huUW5sUVlYSmhiVDFtZFc1amRHbHZiaWhpS1h0MGFHbHpMbUZ6YmpGVGFXZHVZWFIxY21WQmJHYzlibVYzSUV0S1ZWSXVZWE51TVM1NE5UQTVMa0ZzWjI5eWFYUm9iVWxrWlc1MGFXWnBaWElvWWlsOU8zUm9hWE11YzJWMFNYTnpkV1Z5UW5sUVlYSmhiVDFtZFc1amRHbHZiaWhpS1h0MGFHbHpMbUZ6YmpGSmMzTjFaWEk5Ym1WM0lFdEtWVkl1WVhOdU1TNTROVEE1TGxnMU1EQk9ZVzFsS0dJcGZUdDBhR2x6TG5ObGRFNXZkRUpsWm05eVpVSjVVR0Z5WVcwOVpuVnVZM1JwYjI0b1lpbDdkR2hwY3k1aGMyNHhUbTkwUW1WbWIzSmxQVzVsZHlCTFNsVlNMbUZ6YmpFdWVEVXdPUzVVYVcxbEtHSXBmVHQwYUdsekxuTmxkRTV2ZEVGbWRHVnlRbmxRWVhKaGJUMW1kVzVqZEdsdmJpaGlLWHQwYUdsekxtRnpiakZPYjNSQlpuUmxjajF1WlhjZ1MwcFZVaTVoYzI0eExuZzFNRGt1VkdsdFpTaGlLWDA3ZEdocGN5NXpaWFJUZFdKcVpXTjBRbmxRWVhKaGJUMW1kVzVqZEdsdmJpaGlLWHQwYUdsekxtRnpiakZUZFdKcVpXTjBQVzVsZHlCTFNsVlNMbUZ6YmpFdWVEVXdPUzVZTlRBd1RtRnRaU2hpS1gwN2RHaHBjeTV6WlhSVGRXSnFaV04wVUhWaWJHbGpTMlY1UW5sUVlYSmhiVDFtZFc1amRHbHZiaWhpS1h0MGFHbHpMbUZ6YmpGVGRXSnFVRXRsZVQxdVpYY2dTMHBWVWk1aGMyNHhMbmcxTURrdVUzVmlhbVZqZEZCMVlteHBZMHRsZVVsdVptOG9ZaWw5TzNSb2FYTXVjMlYwVTNWaWFtVmpkRkIxWW14cFkwdGxlVUo1UjJWMFMyVjVQV1oxYm1OMGFXOXVLR01wZTNaaGNpQmlQVXRGV1ZWVVNVd3VaMlYwUzJWNUtHTXBPM1JvYVhNdVlYTnVNVk4xWW1wUVMyVjVQVzVsZHlCTFNsVlNMbUZ6YmpFdWVEVXdPUzVUZFdKcVpXTjBVSFZpYkdsalMyVjVTVzVtYnloaUtYMDdkR2hwY3k1aGNIQmxibVJGZUhSbGJuTnBiMjQ5Wm5WdVkzUnBiMjRvWWlsN2RHaHBjeTVsZUhSbGJuTnBiMjV6UVhKeVlYa3VjSFZ6YUNoaUtYMDdkR2hwY3k1aGNIQmxibVJGZUhSbGJuTnBiMjVDZVU1aGJXVTlablZ1WTNScGIyNG9aQ3hpS1h0cFppaGtMblJ2VEc5M1pYSkRZWE5sS0NrOVBWd2lZbUZ6YVdOamIyNXpkSEpoYVc1MGMxd2lLWHQyWVhJZ1l6MXVaWGNnUzBwVlVpNWhjMjR4TG5nMU1Ea3VRbUZ6YVdORGIyNXpkSEpoYVc1MGN5aGlLVHQwYUdsekxtRndjR1Z1WkVWNGRHVnVjMmx2YmloaktYMWxiSE5sZTJsbUtHUXVkRzlNYjNkbGNrTmhjMlVvS1QwOVhDSnJaWGwxYzJGblpWd2lLWHQyWVhJZ1l6MXVaWGNnUzBwVlVpNWhjMjR4TG5nMU1Ea3VTMlY1VlhOaFoyVW9ZaWs3ZEdocGN5NWhjSEJsYm1SRmVIUmxibk5wYjI0b1l5bDlaV3h6Wlh0cFppaGtMblJ2VEc5M1pYSkRZWE5sS0NrOVBWd2lZM0pzWkdsemRISnBZblYwYVc5dWNHOXBiblJ6WENJcGUzWmhjaUJqUFc1bGR5QkxTbFZTTG1GemJqRXVlRFV3T1M1RFVreEVhWE4wY21saWRYUnBiMjVRYjJsdWRITW9ZaWs3ZEdocGN5NWhjSEJsYm1SRmVIUmxibk5wYjI0b1l5bDlaV3h6Wlh0cFppaGtMblJ2VEc5M1pYSkRZWE5sS0NrOVBWd2laWGgwYTJWNWRYTmhaMlZjSWlsN2RtRnlJR005Ym1WM0lFdEtWVkl1WVhOdU1TNTROVEE1TGtWNGRFdGxlVlZ6WVdkbEtHSXBPM1JvYVhNdVlYQndaVzVrUlhoMFpXNXphVzl1S0dNcGZXVnNjMlY3YVdZb1pDNTBiMHh2ZDJWeVEyRnpaU2dwUFQxY0ltRjFkR2h2Y21sMGVXdGxlV2xrWlc1MGFXWnBaWEpjSWlsN2RtRnlJR005Ym1WM0lFdEtWVkl1WVhOdU1TNTROVEE1TGtGMWRHaHZjbWwwZVV0bGVVbGtaVzUwYVdacFpYSW9ZaWs3ZEdocGN5NWhjSEJsYm1SRmVIUmxibk5wYjI0b1l5bDlaV3h6Wlh0MGFISnZkMXdpZFc1emRYQndiM0owWldRZ1pYaDBaVzV6YVc5dUlHNWhiV1U2SUZ3aUsyUjlmWDE5ZlgwN2RHaHBjeTVuWlhSRmJtTnZaR1ZrU0dWNFBXWjFibU4wYVc5dUtDbDdhV1lvZEdocGN5NWhjMjR4VG05MFFtVm1iM0psUFQxdWRXeHNmSHgwYUdsekxtRnpiakZPYjNSQlpuUmxjajA5Ym5Wc2JDbDdkR2h5YjNkY0ltNXZkRUpsWm05eVpTQmhibVF2YjNJZ2JtOTBRV1owWlhJZ2JtOTBJSE5sZEZ3aWZYWmhjaUJqUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTVTJWeGRXVnVZMlVvZTJGeWNtRjVPbHQwYUdsekxtRnpiakZPYjNSQ1pXWnZjbVVzZEdocGN5NWhjMjR4VG05MFFXWjBaWEpkZlNrN2RHaHBjeTVoYzI0eFFYSnlZWGs5Ym1WM0lFRnljbUY1S0NrN2RHaHBjeTVoYzI0eFFYSnlZWGt1Y0hWemFDaDBhR2x6TG1GemJqRldaWEp6YVc5dUtUdDBhR2x6TG1GemJqRkJjbkpoZVM1d2RYTm9LSFJvYVhNdVlYTnVNVk5sY21saGJFNTFiV0psY2lrN2RHaHBjeTVoYzI0eFFYSnlZWGt1Y0hWemFDaDBhR2x6TG1GemJqRlRhV2R1WVhSMWNtVkJiR2NwTzNSb2FYTXVZWE51TVVGeWNtRjVMbkIxYzJnb2RHaHBjeTVoYzI0eFNYTnpkV1Z5S1R0MGFHbHpMbUZ6YmpGQmNuSmhlUzV3ZFhOb0tHTXBPM1JvYVhNdVlYTnVNVUZ5Y21GNUxuQjFjMmdvZEdocGN5NWhjMjR4VTNWaWFtVmpkQ2s3ZEdocGN5NWhjMjR4UVhKeVlYa3VjSFZ6YUNoMGFHbHpMbUZ6YmpGVGRXSnFVRXRsZVNrN2FXWW9kR2hwY3k1bGVIUmxibk5wYjI1elFYSnlZWGt1YkdWdVozUm9QakFwZTNaaGNpQmtQVzVsZHlCTFNsVlNMbUZ6YmpFdVJFVlNVMlZ4ZFdWdVkyVW9lMkZ5Y21GNU9uUm9hWE11WlhoMFpXNXphVzl1YzBGeWNtRjVmU2s3ZG1GeUlHSTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlVZV2RuWldSUFltcGxZM1FvZTJWNGNHeHBZMmwwT25SeWRXVXNkR0ZuT2x3aVlUTmNJaXh2WW1vNlpIMHBPM1JvYVhNdVlYTnVNVUZ5Y21GNUxuQjFjMmdvWWlsOWRtRnlJR1U5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpUWlhGMVpXNWpaU2g3WVhKeVlYazZkR2hwY3k1aGMyNHhRWEp5WVhsOUtUdDBhR2x6TG1oVVRGWTlaUzVuWlhSRmJtTnZaR1ZrU0dWNEtDazdkR2hwY3k1cGMwMXZaR2xtYVdWa1BXWmhiSE5sTzNKbGRIVnliaUIwYUdsekxtaFVURlo5TzNSb2FYTXVYMmx1YVhScFlXeHBlbVVvS1gwN1dVRklUMDh1YkdGdVp5NWxlSFJsYm1Rb1MwcFZVaTVoYzI0eExuZzFNRGt1VkVKVFEyVnlkR2xtYVdOaGRHVXNTMHBWVWk1aGMyNHhMa0ZUVGpGUFltcGxZM1FwTzB0S1ZWSXVZWE51TVM1NE5UQTVMa1Y0ZEdWdWMybHZiajFtZFc1amRHbHZiaWhpS1h0TFNsVlNMbUZ6YmpFdWVEVXdPUzVGZUhSbGJuTnBiMjR1YzNWd1pYSmpiR0Z6Y3k1amIyNXpkSEoxWTNSdmNpNWpZV3hzS0hSb2FYTXBPM1poY2lCaFBXNTFiR3c3ZEdocGN5NW5aWFJGYm1OdlpHVmtTR1Y0UFdaMWJtTjBhVzl1S0NsN2RtRnlJR1k5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpQWW1wbFkzUkpaR1Z1ZEdsbWFXVnlLSHR2YVdRNmRHaHBjeTV2YVdSOUtUdDJZWElnWlQxdVpYY2dTMHBWVWk1aGMyNHhMa1JGVWs5amRHVjBVM1J5YVc1bktIdG9aWGc2ZEdocGN5NW5aWFJGZUhSdVZtRnNkV1ZJWlhnb0tYMHBPM1poY2lCa1BXNWxkeUJCY25KaGVTZ3BPMlF1Y0hWemFDaG1LVHRwWmloMGFHbHpMbU55YVhScFkyRnNLWHRrTG5CMWMyZ29ibVYzSUV0S1ZWSXVZWE51TVM1RVJWSkNiMjlzWldGdUtDa3BmV1F1Y0hWemFDaGxLVHQyWVhJZ1l6MXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVsTmxjWFZsYm1ObEtIdGhjbkpoZVRwa2ZTazdjbVYwZFhKdUlHTXVaMlYwUlc1amIyUmxaRWhsZUNncGZUdDBhR2x6TG1OeWFYUnBZMkZzUFdaaGJITmxPMmxtS0hSNWNHVnZaaUJpSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHRwWmloMGVYQmxiMllnWWk1amNtbDBhV05oYkNFOVhDSjFibVJsWm1sdVpXUmNJaWw3ZEdocGN5NWpjbWwwYVdOaGJEMWlMbU55YVhScFkyRnNmWDE5TzFsQlNFOVBMbXhoYm1jdVpYaDBaVzVrS0V0S1ZWSXVZWE51TVM1NE5UQTVMa1Y0ZEdWdWMybHZiaXhMU2xWU0xtRnpiakV1UVZOT01VOWlhbVZqZENrN1MwcFZVaTVoYzI0eExuZzFNRGt1UzJWNVZYTmhaMlU5Wm5WdVkzUnBiMjRvWVNsN1MwcFZVaTVoYzI0eExuZzFNRGt1UzJWNVZYTmhaMlV1YzNWd1pYSmpiR0Z6Y3k1amIyNXpkSEoxWTNSdmNpNWpZV3hzS0hSb2FYTXNZU2s3ZEdocGN5NW5aWFJGZUhSdVZtRnNkV1ZJWlhnOVpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2RHaHBjeTVoYzI0eFJYaDBibFpoYkhWbExtZGxkRVZ1WTI5a1pXUklaWGdvS1gwN2RHaHBjeTV2YVdROVhDSXlMalV1TWprdU1UVmNJanRwWmloMGVYQmxiMllnWVNFOVhDSjFibVJsWm1sdVpXUmNJaWw3YVdZb2RIbHdaVzltSUdFdVltbHVJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdDBhR2x6TG1GemJqRkZlSFJ1Vm1Gc2RXVTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSkNhWFJUZEhKcGJtY29ZU2w5ZlgwN1dVRklUMDh1YkdGdVp5NWxlSFJsYm1Rb1MwcFZVaTVoYzI0eExuZzFNRGt1UzJWNVZYTmhaMlVzUzBwVlVpNWhjMjR4TG5nMU1Ea3VSWGgwWlc1emFXOXVLVHRMU2xWU0xtRnpiakV1ZURVd09TNUNZWE5wWTBOdmJuTjBjbUZwYm5SelBXWjFibU4wYVc5dUtHTXBlMHRLVlZJdVlYTnVNUzU0TlRBNUxrSmhjMmxqUTI5dWMzUnlZV2x1ZEhNdWMzVndaWEpqYkdGemN5NWpiMjV6ZEhKMVkzUnZjaTVqWVd4c0tIUm9hWE1zWXlrN2RtRnlJR0U5Wm1Gc2MyVTdkbUZ5SUdJOUxURTdkR2hwY3k1blpYUkZlSFJ1Vm1Gc2RXVklaWGc5Wm5WdVkzUnBiMjRvS1h0MllYSWdaVDF1WlhjZ1FYSnlZWGtvS1R0cFppaDBhR2x6TG1OQktYdGxMbkIxYzJnb2JtVjNJRXRLVlZJdVlYTnVNUzVFUlZKQ2IyOXNaV0Z1S0NrcGZXbG1LSFJvYVhNdWNHRjBhRXhsYmo0dE1TbDdaUzV3ZFhOb0tHNWxkeUJMU2xWU0xtRnpiakV1UkVWU1NXNTBaV2RsY2loN1hDSnBiblJjSWpwMGFHbHpMbkJoZEdoTVpXNTlLU2w5ZG1GeUlHUTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlRaWEYxWlc1alpTaDdZWEp5WVhrNlpYMHBPM1JvYVhNdVlYTnVNVVY0ZEc1V1lXeDFaVDFrTzNKbGRIVnliaUIwYUdsekxtRnpiakZGZUhSdVZtRnNkV1V1WjJWMFJXNWpiMlJsWkVobGVDZ3BmVHQwYUdsekxtOXBaRDFjSWpJdU5TNHlPUzR4T1Z3aU8zUm9hWE11WTBFOVptRnNjMlU3ZEdocGN5NXdZWFJvVEdWdVBTMHhPMmxtS0hSNWNHVnZaaUJqSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHRwWmloMGVYQmxiMllnWXk1alFTRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTVqUVQxakxtTkJmV2xtS0hSNWNHVnZaaUJqTG5CaGRHaE1aVzRoUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlM1JvYVhNdWNHRjBhRXhsYmoxakxuQmhkR2hNWlc1OWZYMDdXVUZJVDA4dWJHRnVaeTVsZUhSbGJtUW9TMHBWVWk1aGMyNHhMbmcxTURrdVFtRnphV05EYjI1emRISmhhVzUwY3l4TFNsVlNMbUZ6YmpFdWVEVXdPUzVGZUhSbGJuTnBiMjRwTzB0S1ZWSXVZWE51TVM1NE5UQTVMa05TVEVScGMzUnlhV0oxZEdsdmJsQnZhVzUwY3oxbWRXNWpkR2x2YmloaEtYdExTbFZTTG1GemJqRXVlRFV3T1M1RFVreEVhWE4wY21saWRYUnBiMjVRYjJsdWRITXVjM1Z3WlhKamJHRnpjeTVqYjI1emRISjFZM1J2Y2k1allXeHNLSFJvYVhNc1lTazdkR2hwY3k1blpYUkZlSFJ1Vm1Gc2RXVklaWGc5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZEdocGN5NWhjMjR4UlhoMGJsWmhiSFZsTG1kbGRFVnVZMjlrWldSSVpYZ29LWDA3ZEdocGN5NXpaWFJDZVVSUVFYSnlZWGs5Wm5WdVkzUnBiMjRvWWlsN2RHaHBjeTVoYzI0eFJYaDBibFpoYkhWbFBXNWxkeUJMU2xWU0xtRnpiakV1UkVWU1UyVnhkV1Z1WTJVb2UyRnljbUY1T21KOUtYMDdkR2hwY3k1elpYUkNlVTl1WlZWU1NUMW1kVzVqZEdsdmJpaGxLWHQyWVhJZ1lqMXVaWGNnUzBwVlVpNWhjMjR4TG5nMU1Ea3VSMlZ1WlhKaGJFNWhiV1Z6S0Z0N2RYSnBPbVY5WFNrN2RtRnlJR1E5Ym1WM0lFdEtWVkl1WVhOdU1TNTROVEE1TGtScGMzUnlhV0oxZEdsdmJsQnZhVzUwVG1GdFpTaGlLVHQyWVhJZ1l6MXVaWGNnUzBwVlVpNWhjMjR4TG5nMU1Ea3VSR2x6ZEhKcFluVjBhVzl1VUc5cGJuUW9lMlJ3YjJKcU9tUjlLVHQwYUdsekxuTmxkRUo1UkZCQmNuSmhlU2hiWTEwcGZUdDBhR2x6TG05cFpEMWNJakl1TlM0eU9TNHpNVndpTzJsbUtIUjVjR1Z2WmlCaElUMWNJblZ1WkdWbWFXNWxaRndpS1h0cFppaDBlWEJsYjJZZ1lTNWhjbkpoZVNFOVhDSjFibVJsWm1sdVpXUmNJaWw3ZEdocGN5NXpaWFJDZVVSUVFYSnlZWGtvWVM1aGNuSmhlU2w5Wld4elpYdHBaaWgwZVhCbGIyWWdZUzUxY21raFBWd2lkVzVrWldacGJtVmtYQ0lwZTNSb2FYTXVjMlYwUW5sUGJtVlZVa2tvWVM1MWNta3BmWDE5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdWVEVXdPUzVEVWt4RWFYTjBjbWxpZFhScGIyNVFiMmx1ZEhNc1MwcFZVaTVoYzI0eExuZzFNRGt1UlhoMFpXNXphVzl1S1R0TFNsVlNMbUZ6YmpFdWVEVXdPUzVGZUhSTFpYbFZjMkZuWlQxbWRXNWpkR2x2YmloaEtYdExTbFZTTG1GemJqRXVlRFV3T1M1RmVIUkxaWGxWYzJGblpTNXpkWEJsY21Oc1lYTnpMbU52Ym5OMGNuVmpkRzl5TG1OaGJHd29kR2hwY3l4aEtUdDBhR2x6TG5ObGRGQjFjbkJ2YzJWQmNuSmhlVDFtZFc1amRHbHZiaWhpS1h0MGFHbHpMbUZ6YmpGRmVIUnVWbUZzZFdVOWJtVjNJRXRLVlZJdVlYTnVNUzVFUlZKVFpYRjFaVzVqWlNncE8yWnZjaWgyWVhJZ1l6MHdPMk04WWk1c1pXNW5kR2c3WXlzcktYdDJZWElnWkQxdVpYY2dTMHBWVWk1aGMyNHhMa1JGVWs5aWFtVmpkRWxrWlc1MGFXWnBaWElvWWx0alhTazdkR2hwY3k1aGMyNHhSWGgwYmxaaGJIVmxMbUZ3Y0dWdVpFRlRUakZQWW1wbFkzUW9aQ2w5ZlR0MGFHbHpMbWRsZEVWNGRHNVdZV3gxWlVobGVEMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6TG1GemJqRkZlSFJ1Vm1Gc2RXVXVaMlYwUlc1amIyUmxaRWhsZUNncGZUdDBhR2x6TG05cFpEMWNJakl1TlM0eU9TNHpOMXdpTzJsbUtIUjVjR1Z2WmlCaElUMWNJblZ1WkdWbWFXNWxaRndpS1h0cFppaDBlWEJsYjJZZ1lTNWhjbkpoZVNFOVhDSjFibVJsWm1sdVpXUmNJaWw3ZEdocGN5NXpaWFJRZFhKd2IzTmxRWEp5WVhrb1lTNWhjbkpoZVNsOWZYMDdXVUZJVDA4dWJHRnVaeTVsZUhSbGJtUW9TMHBWVWk1aGMyNHhMbmcxTURrdVJYaDBTMlY1VlhOaFoyVXNTMHBWVWk1aGMyNHhMbmcxTURrdVJYaDBaVzV6YVc5dUtUdExTbFZTTG1GemJqRXVlRFV3T1M1QmRYUm9iM0pwZEhsTFpYbEpaR1Z1ZEdsbWFXVnlQV1oxYm1OMGFXOXVLR0VwZTB0S1ZWSXVZWE51TVM1NE5UQTVMa0YxZEdodmNtbDBlVXRsZVVsa1pXNTBhV1pwWlhJdWMzVndaWEpqYkdGemN5NWpiMjV6ZEhKMVkzUnZjaTVqWVd4c0tIUm9hWE1zWVNrN2RHaHBjeTVoYzI0eFMwbEVQVzUxYkd3N2RHaHBjeTVoYzI0eFEyVnlkRWx6YzNWbGNqMXVkV3hzTzNSb2FYTXVZWE51TVVObGNuUlRUajF1ZFd4c08zUm9hWE11WjJWMFJYaDBibFpoYkhWbFNHVjRQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHTTlibVYzSUVGeWNtRjVLQ2s3YVdZb2RHaHBjeTVoYzI0eFMwbEVLWHRqTG5CMWMyZ29ibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlVZV2RuWldSUFltcGxZM1FvZTJWNGNHeHBZMmwwT21aaGJITmxMSFJoWnpwY0lqZ3dYQ0lzYjJKcU9uUm9hWE11WVhOdU1VdEpSSDBwS1gxcFppaDBhR2x6TG1GemJqRkRaWEowU1hOemRXVnlLWHRqTG5CMWMyZ29ibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlVZV2RuWldSUFltcGxZM1FvZTJWNGNHeHBZMmwwT21aaGJITmxMSFJoWnpwY0ltRXhYQ0lzYjJKcU9uUm9hWE11WVhOdU1VTmxjblJKYzNOMVpYSjlLU2w5YVdZb2RHaHBjeTVoYzI0eFEyVnlkRk5PS1h0akxuQjFjMmdvYm1WM0lFdEtWVkl1WVhOdU1TNUVSVkpVWVdkblpXUlBZbXBsWTNRb2UyVjRjR3hwWTJsME9tWmhiSE5sTEhSaFp6cGNJamd5WENJc2IySnFPblJvYVhNdVlYTnVNVU5sY25SVFRuMHBLWDEyWVhJZ1lqMXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVsTmxjWFZsYm1ObEtIdGhjbkpoZVRwamZTazdkR2hwY3k1aGMyNHhSWGgwYmxaaGJIVmxQV0k3Y21WMGRYSnVJSFJvYVhNdVlYTnVNVVY0ZEc1V1lXeDFaUzVuWlhSRmJtTnZaR1ZrU0dWNEtDbDlPM1JvYVhNdWMyVjBTMGxFUW5sUVlYSmhiVDFtZFc1amRHbHZiaWhpS1h0MGFHbHpMbUZ6YmpGTFNVUTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlBZM1JsZEZOMGNtbHVaeWhpS1gwN2RHaHBjeTV6WlhSRFpYSjBTWE56ZFdWeVFubFFZWEpoYlQxbWRXNWpkR2x2YmloaUtYdDBhR2x6TG1GemJqRkRaWEowU1hOemRXVnlQVzVsZHlCTFNsVlNMbUZ6YmpFdWVEVXdPUzVZTlRBd1RtRnRaU2hpS1gwN2RHaHBjeTV6WlhSRFpYSjBVMDVDZVZCaGNtRnRQV1oxYm1OMGFXOXVLR0lwZTNSb2FYTXVZWE51TVVObGNuUlRUajF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2x1ZEdWblpYSW9ZaWw5TzNSb2FYTXViMmxrUFZ3aU1pNDFMakk1TGpNMVhDSTdhV1lvZEhsd1pXOW1JR0VoUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlMmxtS0hSNWNHVnZaaUJoTG10cFpDRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTV6WlhSTFNVUkNlVkJoY21GdEtHRXVhMmxrS1gxcFppaDBlWEJsYjJZZ1lTNXBjM04xWlhJaFBWd2lkVzVrWldacGJtVmtYQ0lwZTNSb2FYTXVjMlYwUTJWeWRFbHpjM1ZsY2tKNVVHRnlZVzBvWVM1cGMzTjFaWElwZldsbUtIUjVjR1Z2WmlCaExuTnVJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdDBhR2x6TG5ObGRFTmxjblJUVGtKNVVHRnlZVzBvWVM1emJpbDlmWDA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TG5nMU1Ea3VRWFYwYUc5eWFYUjVTMlY1U1dSbGJuUnBabWxsY2l4TFNsVlNMbUZ6YmpFdWVEVXdPUzVGZUhSbGJuTnBiMjRwTzB0S1ZWSXVZWE51TVM1NE5UQTVMa05TVEQxbWRXNWpkR2x2YmlobUtYdExTbFZTTG1GemJqRXVlRFV3T1M1RFVrd3VjM1Z3WlhKamJHRnpjeTVqYjI1emRISjFZM1J2Y2k1allXeHNLSFJvYVhNcE8zWmhjaUJoUFc1MWJHdzdkbUZ5SUdNOWJuVnNiRHQyWVhJZ1pUMXVkV3hzTzNaaGNpQmlQVzUxYkd3N2RtRnlJR1E5Ym5Wc2JEdDBhR2x6TG5ObGRGSnpZVkJ5ZGt0bGVVSjVVRVZOWVc1a1VHRnpjejFtZFc1amRHbHZiaWhvTEdvcGUzWmhjaUJuUFZCTFExTTFVRXRGV1M1blpYUkVaV055ZVhCMFpXUkxaWGxJWlhnb2FDeHFLVHQyWVhJZ2FUMXVaWGNnVWxOQlMyVjVLQ2s3YVM1eVpXRmtVSEpwZG1GMFpVdGxlVVp5YjIxQlUwNHhTR1Y0VTNSeWFXNW5LR2NwTzNSb2FYTXVjbk5oVUhKMlMyVjVQV2w5TzNSb2FYTXVjMmxuYmoxbWRXNWpkR2x2YmlncGUzUm9hWE11WVhOdU1WTnBaMjVoZEhWeVpVRnNaejEwYUdsekxtRnpiakZVUWxORFpYSjBUR2x6ZEM1aGMyNHhVMmxuYm1GMGRYSmxRV3huTzNOcFp6MXVaWGNnUzBwVlVpNWpjbmx3ZEc4dVUybG5ibUYwZFhKbEtIdGhiR2M2WENKVFNFRXhkMmwwYUZKVFFWd2lMSEJ5YjNZNlhDSmpjbmx3ZEc5cWN5OXFjM0p6WVZ3aWZTazdjMmxuTG1sdWFYUlRhV2R1S0hSb2FYTXVjbk5oVUhKMlMyVjVLVHR6YVdjdWRYQmtZWFJsU0dWNEtIUm9hWE11WVhOdU1WUkNVME5sY25STWFYTjBMbWRsZEVWdVkyOWtaV1JJWlhnb0tTazdkR2hwY3k1b1pYaFRhV2M5YzJsbkxuTnBaMjRvS1R0MGFHbHpMbUZ6YmpGVGFXYzlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSkNhWFJUZEhKcGJtY29lMmhsZURwY0lqQXdYQ0lyZEdocGN5NW9aWGhUYVdkOUtUdDJZWElnWnoxdVpYY2dTMHBWVWk1aGMyNHhMa1JGVWxObGNYVmxibU5sS0h0aGNuSmhlVHBiZEdocGN5NWhjMjR4VkVKVFEyVnlkRXhwYzNRc2RHaHBjeTVoYzI0eFUybG5ibUYwZFhKbFFXeG5MSFJvYVhNdVlYTnVNVk5wWjExOUtUdDBhR2x6TG1oVVRGWTlaeTVuWlhSRmJtTnZaR1ZrU0dWNEtDazdkR2hwY3k1cGMwMXZaR2xtYVdWa1BXWmhiSE5sZlR0MGFHbHpMbWRsZEVWdVkyOWtaV1JJWlhnOVpuVnVZM1JwYjI0b0tYdHBaaWgwYUdsekxtbHpUVzlrYVdacFpXUTlQV1poYkhObEppWjBhR2x6TG1oVVRGWWhQVzUxYkd3cGUzSmxkSFZ5YmlCMGFHbHpMbWhVVEZaOWRHaHliM2RjSW01dmRDQnphV2R1WldRZ2VXVjBYQ0o5TzNSb2FYTXVaMlYwVUVWTlUzUnlhVzVuUFdaMWJtTjBhVzl1S0NsN2RtRnlJR2s5ZEdocGN5NW5aWFJGYm1OdlpHVmtTR1Y0S0NrN2RtRnlJR2M5UTNKNWNIUnZTbE11Wlc1akxraGxlQzV3WVhKelpTaHBLVHQyWVhJZ2FEMURjbmx3ZEc5S1V5NWxibU11UW1GelpUWTBMbk4wY21sdVoybG1lU2huS1R0MllYSWdhajFvTG5KbGNHeGhZMlVvTHlndWV6WTBmU2t2Wnl4Y0lpUXhYRnh5WEZ4dVhDSXBPM0psZEhWeWJsd2lMUzB0TFMxQ1JVZEpUaUJZTlRBNUlFTlNUQzB0TFMwdFhGeHlYRnh1WENJcmFpdGNJbHhjY2x4Y2JpMHRMUzB0UlU1RUlGZzFNRGtnUTFKTUxTMHRMUzFjWEhKY1hHNWNJbjA3YVdZb2RIbHdaVzltSUdZaFBWd2lkVzVrWldacGJtVmtYQ0lwZTJsbUtIUjVjR1Z2WmlCbUxuUmljMjlpYWlFOVhDSjFibVJsWm1sdVpXUmNJaWw3ZEdocGN5NWhjMjR4VkVKVFEyVnlkRXhwYzNROVppNTBZbk52WW1wOWFXWW9kSGx3Wlc5bUlHWXVjbk5oY0hKMmEyVjVJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdDBhR2x6TG5KellWQnlka3RsZVQxbUxuSnpZWEJ5ZG10bGVYMXBaaWdvZEhsd1pXOW1JR1l1Y25OaGNISjJjR1Z0SVQxY0luVnVaR1ZtYVc1bFpGd2lLU1ltS0hSNWNHVnZaaUJtTG5KellYQnlkbkJoY3lFOVhDSjFibVJsWm1sdVpXUmNJaWtwZTNSb2FYTXVjMlYwVW5OaFVISjJTMlY1UW5sUVJVMWhibVJRWVhOektHWXVjbk5oY0hKMmNHVnRMR1l1Y25OaGNISjJjR0Z6S1gxOWZUdFpRVWhQVHk1c1lXNW5MbVY0ZEdWdVpDaExTbFZTTG1GemJqRXVlRFV3T1M1RFVrd3NTMHBWVWk1aGMyNHhMa0ZUVGpGUFltcGxZM1FwTzB0S1ZWSXVZWE51TVM1NE5UQTVMbFJDVTBObGNuUk1hWE4wUFdaMWJtTjBhVzl1S0dJcGUwdEtWVkl1WVhOdU1TNTROVEE1TGxSQ1UwTmxjblJNYVhOMExuTjFjR1Z5WTJ4aGMzTXVZMjl1YzNSeWRXTjBiM0l1WTJGc2JDaDBhR2x6S1R0MllYSWdZVDF1ZFd4c08zUm9hWE11YzJWMFUybG5ibUYwZFhKbFFXeG5RbmxRWVhKaGJUMW1kVzVqZEdsdmJpaGpLWHQwYUdsekxtRnpiakZUYVdkdVlYUjFjbVZCYkdjOWJtVjNJRXRLVlZJdVlYTnVNUzU0TlRBNUxrRnNaMjl5YVhSb2JVbGtaVzUwYVdacFpYSW9ZeWw5TzNSb2FYTXVjMlYwU1hOemRXVnlRbmxRWVhKaGJUMW1kVzVqZEdsdmJpaGpLWHQwYUdsekxtRnpiakZKYzNOMVpYSTlibVYzSUV0S1ZWSXVZWE51TVM1NE5UQTVMbGcxTURCT1lXMWxLR01wZlR0MGFHbHpMbk5sZEZSb2FYTlZjR1JoZEdWQ2VWQmhjbUZ0UFdaMWJtTjBhVzl1S0dNcGUzUm9hWE11WVhOdU1WUm9hWE5WY0dSaGRHVTlibVYzSUV0S1ZWSXVZWE51TVM1NE5UQTVMbFJwYldVb1l5bDlPM1JvYVhNdWMyVjBUbVY0ZEZWd1pHRjBaVUo1VUdGeVlXMDlablZ1WTNScGIyNG9ZeWw3ZEdocGN5NWhjMjR4VG1WNGRGVndaR0YwWlQxdVpYY2dTMHBWVWk1aGMyNHhMbmcxTURrdVZHbHRaU2hqS1gwN2RHaHBjeTVoWkdSU1pYWnZhMlZrUTJWeWREMW1kVzVqZEdsdmJpaGpMR1FwZTNaaGNpQm1QWHQ5TzJsbUtHTWhQWFZ1WkdWbWFXNWxaQ1ltWXlFOWJuVnNiQ2w3Wmk1emJqMWpmV2xtS0dRaFBYVnVaR1ZtYVc1bFpDWW1aQ0U5Ym5Wc2JDbDdaaTUwYVcxbFBXUjlkbUZ5SUdVOWJtVjNJRXRLVlZJdVlYTnVNUzU0TlRBNUxrTlNURVZ1ZEhKNUtHWXBPM1JvYVhNdVlWSmxkbTlyWldSRFpYSjBMbkIxYzJnb1pTbDlPM1JvYVhNdVoyVjBSVzVqYjJSbFpFaGxlRDFtZFc1amRHbHZiaWdwZTNSb2FYTXVZWE51TVVGeWNtRjVQVzVsZHlCQmNuSmhlU2dwTzJsbUtIUm9hWE11WVhOdU1WWmxjbk5wYjI0aFBXNTFiR3dwZTNSb2FYTXVZWE51TVVGeWNtRjVMbkIxYzJnb2RHaHBjeTVoYzI0eFZtVnljMmx2YmlsOWRHaHBjeTVoYzI0eFFYSnlZWGt1Y0hWemFDaDBhR2x6TG1GemJqRlRhV2R1WVhSMWNtVkJiR2NwTzNSb2FYTXVZWE51TVVGeWNtRjVMbkIxYzJnb2RHaHBjeTVoYzI0eFNYTnpkV1Z5S1R0MGFHbHpMbUZ6YmpGQmNuSmhlUzV3ZFhOb0tIUm9hWE11WVhOdU1WUm9hWE5WY0dSaGRHVXBPMmxtS0hSb2FYTXVZWE51TVU1bGVIUlZjR1JoZEdVaFBXNTFiR3dwZTNSb2FYTXVZWE51TVVGeWNtRjVMbkIxYzJnb2RHaHBjeTVoYzI0eFRtVjRkRlZ3WkdGMFpTbDlhV1lvZEdocGN5NWhVbVYyYjJ0bFpFTmxjblF1YkdWdVozUm9QakFwZTNaaGNpQmpQVzVsZHlCTFNsVlNMbUZ6YmpFdVJFVlNVMlZ4ZFdWdVkyVW9lMkZ5Y21GNU9uUm9hWE11WVZKbGRtOXJaV1JEWlhKMGZTazdkR2hwY3k1aGMyNHhRWEp5WVhrdWNIVnphQ2hqS1gxMllYSWdaRDF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVbE5sY1hWbGJtTmxLSHRoY25KaGVUcDBhR2x6TG1GemJqRkJjbkpoZVgwcE8zUm9hWE11YUZSTVZqMWtMbWRsZEVWdVkyOWtaV1JJWlhnb0tUdDBhR2x6TG1selRXOWthV1pwWldROVptRnNjMlU3Y21WMGRYSnVJSFJvYVhNdWFGUk1WbjA3ZEdocGN5NWZhVzVwZEdsaGJHbDZaVDFtZFc1amRHbHZiaWdwZTNSb2FYTXVZWE51TVZabGNuTnBiMjQ5Ym5Wc2JEdDBhR2x6TG1GemJqRlRhV2R1WVhSMWNtVkJiR2M5Ym5Wc2JEdDBhR2x6TG1GemJqRkpjM04xWlhJOWJuVnNiRHQwYUdsekxtRnpiakZVYUdselZYQmtZWFJsUFc1MWJHdzdkR2hwY3k1aGMyNHhUbVY0ZEZWd1pHRjBaVDF1ZFd4c08zUm9hWE11WVZKbGRtOXJaV1JEWlhKMFBXNWxkeUJCY25KaGVTZ3BmVHQwYUdsekxsOXBibWwwYVdGc2FYcGxLQ2w5TzFsQlNFOVBMbXhoYm1jdVpYaDBaVzVrS0V0S1ZWSXVZWE51TVM1NE5UQTVMbFJDVTBObGNuUk1hWE4wTEV0S1ZWSXVZWE51TVM1QlUwNHhUMkpxWldOMEtUdExTbFZTTG1GemJqRXVlRFV3T1M1RFVreEZiblJ5ZVQxbWRXNWpkR2x2YmloaktYdExTbFZTTG1GemJqRXVlRFV3T1M1RFVreEZiblJ5ZVM1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeWs3ZG1GeUlHSTliblZzYkR0MllYSWdZVDF1ZFd4c08zUm9hWE11YzJWMFEyVnlkRk5sY21saGJEMW1kVzVqZEdsdmJpaGtLWHQwYUdsekxuTnVQVzVsZHlCTFNsVlNMbUZ6YmpFdVJFVlNTVzUwWldkbGNpaGtLWDA3ZEdocGN5NXpaWFJTWlhadlkyRjBhVzl1UkdGMFpUMW1kVzVqZEdsdmJpaGtLWHQwYUdsekxuUnBiV1U5Ym1WM0lFdEtWVkl1WVhOdU1TNTROVEE1TGxScGJXVW9aQ2w5TzNSb2FYTXVaMlYwUlc1amIyUmxaRWhsZUQxbWRXNWpkR2x2YmlncGUzWmhjaUJrUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTVTJWeGRXVnVZMlVvZTJGeWNtRjVPbHQwYUdsekxuTnVMSFJvYVhNdWRHbHRaVjE5S1R0MGFHbHpMbFJNVmoxa0xtZGxkRVZ1WTI5a1pXUklaWGdvS1R0eVpYUjFjbTRnZEdocGN5NVVURlo5TzJsbUtIUjVjR1Z2WmlCaklUMWNJblZ1WkdWbWFXNWxaRndpS1h0cFppaDBlWEJsYjJZZ1l5NTBhVzFsSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHQwYUdsekxuTmxkRkpsZG05allYUnBiMjVFWVhSbEtHTXVkR2x0WlNsOWFXWW9kSGx3Wlc5bUlHTXVjMjRoUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlM1JvYVhNdWMyVjBRMlZ5ZEZObGNtbGhiQ2hqTG5OdUtYMTlmVHRaUVVoUFR5NXNZVzVuTG1WNGRHVnVaQ2hMU2xWU0xtRnpiakV1ZURVd09TNURVa3hGYm5SeWVTeExTbFZTTG1GemJqRXVRVk5PTVU5aWFtVmpkQ2s3UzBwVlVpNWhjMjR4TG5nMU1Ea3VXRFV3TUU1aGJXVTlablZ1WTNScGIyNG9ZaWw3UzBwVlVpNWhjMjR4TG5nMU1Ea3VXRFV3TUU1aGJXVXVjM1Z3WlhKamJHRnpjeTVqYjI1emRISjFZM1J2Y2k1allXeHNLSFJvYVhNcE8zUm9hWE11WVhOdU1VRnljbUY1UFc1bGR5QkJjbkpoZVNncE8zUm9hWE11YzJWMFFubFRkSEpwYm1jOVpuVnVZM1JwYjI0b1l5bDdkbUZ5SUdROVl5NXpjR3hwZENoY0lpOWNJaWs3WkM1emFHbG1kQ2dwTzJadmNpaDJZWElnWlQwd08yVThaQzVzWlc1bmRHZzdaU3NyS1h0MGFHbHpMbUZ6YmpGQmNuSmhlUzV3ZFhOb0tHNWxkeUJMU2xWU0xtRnpiakV1ZURVd09TNVNSRTRvZTNOMGNqcGtXMlZkZlNrcGZYMDdkR2hwY3k1elpYUkNlVTlpYW1WamREMW1kVzVqZEdsdmJpaGxLWHRtYjNJb2RtRnlJR01nYVc0Z1pTbDdhV1lvWlM1b1lYTlBkMjVRY205d1pYSjBlU2hqS1NsN2RtRnlJR1E5Ym1WM0lFdEtWVkl1WVhOdU1TNTROVEE1TGxKRVRpaDdjM1J5T21NclhDSTlYQ0lyWlZ0alhYMHBPM1JvYVhNdVlYTnVNVUZ5Y21GNVAzUm9hWE11WVhOdU1VRnljbUY1TG5CMWMyZ29aQ2s2ZEdocGN5NWhjMjR4UVhKeVlYazlXMlJkZlgxOU8zUm9hWE11WjJWMFJXNWpiMlJsWkVobGVEMW1kVzVqZEdsdmJpZ3BlMmxtS0hSNWNHVnZaaUIwYUdsekxtaFVURlk5UFZ3aWMzUnlhVzVuWENJcGUzSmxkSFZ5YmlCMGFHbHpMbWhVVEZaOWRtRnlJR005Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpUWlhGMVpXNWpaU2g3WVhKeVlYazZkR2hwY3k1aGMyNHhRWEp5WVhsOUtUdDBhR2x6TG1oVVRGWTlZeTVuWlhSRmJtTnZaR1ZrU0dWNEtDazdjbVYwZFhKdUlIUm9hWE11YUZSTVZuMDdhV1lvZEhsd1pXOW1JR0loUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlMmxtS0hSNWNHVnZaaUJpTG5OMGNpRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTV6WlhSQ2VWTjBjbWx1WnloaUxuTjBjaWw5Wld4elpYdHBaaWgwZVhCbGIyWWdZajA5UFZ3aWIySnFaV04wWENJcGUzUm9hWE11YzJWMFFubFBZbXBsWTNRb1lpbDlmV2xtS0hSNWNHVnZaaUJpTG1ObGNuUnBjM04xWlhJaFBWd2lkVzVrWldacGJtVmtYQ0lwZTNaaGNpQmhQVzVsZHlCWU5UQTVLQ2s3WVM1b1pYZzlXRFV3T1M1d1pXMVViMGhsZUNoaUxtTmxjblJwYzNOMVpYSXBPM1JvYVhNdWFGUk1WajFoTG1kbGRFbHpjM1ZsY2tobGVDZ3BmV2xtS0hSNWNHVnZaaUJpTG1ObGNuUnpkV0pxWldOMElUMWNJblZ1WkdWbWFXNWxaRndpS1h0MllYSWdZVDF1WlhjZ1dEVXdPU2dwTzJFdWFHVjRQVmcxTURrdWNHVnRWRzlJWlhnb1lpNWpaWEowYzNWaWFtVmpkQ2s3ZEdocGN5NW9WRXhXUFdFdVoyVjBVM1ZpYW1WamRFaGxlQ2dwZlgxOU8xbEJTRTlQTG14aGJtY3VaWGgwWlc1a0tFdEtWVkl1WVhOdU1TNTROVEE1TGxnMU1EQk9ZVzFsTEV0S1ZWSXVZWE51TVM1QlUwNHhUMkpxWldOMEtUdExTbFZTTG1GemJqRXVlRFV3T1M1U1JFNDlablZ1WTNScGIyNG9ZU2w3UzBwVlVpNWhjMjR4TG5nMU1Ea3VVa1JPTG5OMWNHVnlZMnhoYzNNdVkyOXVjM1J5ZFdOMGIzSXVZMkZzYkNoMGFHbHpLVHQwYUdsekxtRnpiakZCY25KaGVUMXVaWGNnUVhKeVlYa29LVHQwYUdsekxtRmtaRUo1VTNSeWFXNW5QV1oxYm1OMGFXOXVLR0lwZTNSb2FYTXVZWE51TVVGeWNtRjVMbkIxYzJnb2JtVjNJRXRLVlZJdVlYTnVNUzU0TlRBNUxrRjBkSEpwWW5WMFpWUjVjR1ZCYm1SV1lXeDFaU2g3YzNSeU9tSjlLU2w5TzNSb2FYTXVaMlYwUlc1amIyUmxaRWhsZUQxbWRXNWpkR2x2YmlncGUzWmhjaUJpUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTVTJWMEtIdGhjbkpoZVRwMGFHbHpMbUZ6YmpGQmNuSmhlWDBwTzNSb2FYTXVWRXhXUFdJdVoyVjBSVzVqYjJSbFpFaGxlQ2dwTzNKbGRIVnliaUIwYUdsekxsUk1WbjA3YVdZb2RIbHdaVzltSUdFaFBWd2lkVzVrWldacGJtVmtYQ0lwZTJsbUtIUjVjR1Z2WmlCaExuTjBjaUU5WENKMWJtUmxabWx1WldSY0lpbDdkR2hwY3k1aFpHUkNlVk4wY21sdVp5aGhMbk4wY2lsOWZYMDdXVUZJVDA4dWJHRnVaeTVsZUhSbGJtUW9TMHBWVWk1aGMyNHhMbmcxTURrdVVrUk9MRXRLVlZJdVlYTnVNUzVCVTA0eFQySnFaV04wS1R0TFNsVlNMbUZ6YmpFdWVEVXdPUzVCZEhSeWFXSjFkR1ZVZVhCbFFXNWtWbUZzZFdVOVpuVnVZM1JwYjI0b1lpbDdTMHBWVWk1aGMyNHhMbmcxTURrdVFYUjBjbWxpZFhSbFZIbHdaVUZ1WkZaaGJIVmxMbk4xY0dWeVkyeGhjM011WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2gwYUdsektUdDJZWElnWkQxdWRXeHNPM1poY2lCalBXNTFiR3c3ZG1GeUlHRTlYQ0oxZEdZNFhDSTdkR2hwY3k1elpYUkNlVk4wY21sdVp6MW1kVzVqZEdsdmJpaGxLWHRwWmlobExtMWhkR05vS0M5ZUtGdGVQVjByS1Qwb0xpc3BKQzhwS1h0MGFHbHpMbk5sZEVKNVFYUjBjbFI1Y0dWQmJtUldZV3gxWlZOMGNpaFNaV2RGZUhBdUpERXNVbVZuUlhod0xpUXlLWDFsYkhObGUzUm9jbTkzWENKdFlXeG1iM0p0WldRZ1lYUjBjbFI1Y0dWQmJtUldZV3gxWlZOMGNqb2dYQ0lyWlgxOU8zUm9hWE11YzJWMFFubEJkSFJ5Vkhsd1pVRnVaRlpoYkhWbFUzUnlQV1oxYm1OMGFXOXVLR2NzWmlsN2RHaHBjeTUwZVhCbFQySnFQVXRLVlZJdVlYTnVNUzU0TlRBNUxrOUpSQzVoZEhsd1pUSnZZbW9vWnlrN2RtRnlJR1U5WVR0cFppaG5QVDFjSWtOY0lpbDdaVDFjSW5CeWJsd2lmWFJvYVhNdWRtRnNkV1ZQWW1vOWRHaHBjeTVuWlhSV1lXeDFaVTlpYWlobExHWXBmVHQwYUdsekxtZGxkRlpoYkhWbFQySnFQV1oxYm1OMGFXOXVLR1lzWlNsN2FXWW9aajA5WENKMWRHWTRYQ0lwZTNKbGRIVnliaUJ1WlhjZ1MwcFZVaTVoYzI0eExrUkZVbFZVUmpoVGRISnBibWNvZTNOMGNqcGxmU2w5YVdZb1pqMDlYQ0p3Y201Y0lpbDdjbVYwZFhKdUlHNWxkeUJMU2xWU0xtRnpiakV1UkVWU1VISnBiblJoWW14bFUzUnlhVzVuS0h0emRISTZaWDBwZldsbUtHWTlQVndpZEdWc1hDSXBlM0psZEhWeWJpQnVaWGNnUzBwVlVpNWhjMjR4TGtSRlVsUmxiR1YwWlhoVGRISnBibWNvZTNOMGNqcGxmU2w5YVdZb1pqMDlYQ0pwWVRWY0lpbDdjbVYwZFhKdUlHNWxkeUJMU2xWU0xtRnpiakV1UkVWU1NVRTFVM1J5YVc1bktIdHpkSEk2WlgwcGZYUm9jbTkzWENKMWJuTjFjSEJ2Y25SbFpDQmthWEpsWTNSdmNua2djM1J5YVc1bklIUjVjR1U2SUhSNWNHVTlYQ0lyWml0Y0lpQjJZV3gxWlQxY0lpdGxmVHQwYUdsekxtZGxkRVZ1WTI5a1pXUklaWGc5Wm5WdVkzUnBiMjRvS1h0MllYSWdaVDF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVbE5sY1hWbGJtTmxLSHRoY25KaGVUcGJkR2hwY3k1MGVYQmxUMkpxTEhSb2FYTXVkbUZzZFdWUFltcGRmU2s3ZEdocGN5NVVURlk5WlM1blpYUkZibU52WkdWa1NHVjRLQ2s3Y21WMGRYSnVJSFJvYVhNdVZFeFdmVHRwWmloMGVYQmxiMllnWWlFOVhDSjFibVJsWm1sdVpXUmNJaWw3YVdZb2RIbHdaVzltSUdJdWMzUnlJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdDBhR2x6TG5ObGRFSjVVM1J5YVc1bktHSXVjM1J5S1gxOWZUdFpRVWhQVHk1c1lXNW5MbVY0ZEdWdVpDaExTbFZTTG1GemJqRXVlRFV3T1M1QmRIUnlhV0oxZEdWVWVYQmxRVzVrVm1Gc2RXVXNTMHBWVWk1aGMyNHhMa0ZUVGpGUFltcGxZM1FwTzB0S1ZWSXVZWE51TVM1NE5UQTVMbE4xWW1wbFkzUlFkV0pzYVdOTFpYbEpibVp2UFdaMWJtTjBhVzl1S0dRcGUwdEtWVkl1WVhOdU1TNTROVEE1TGxOMVltcGxZM1JRZFdKc2FXTkxaWGxKYm1adkxuTjFjR1Z5WTJ4aGMzTXVZMjl1YzNSeWRXTjBiM0l1WTJGc2JDaDBhR2x6S1R0MllYSWdZajF1ZFd4c08zWmhjaUJqUFc1MWJHdzdkbUZ5SUdFOWJuVnNiRHQwYUdsekxuTmxkRkpUUVV0bGVUMW1kVzVqZEdsdmJpaGxLWHRwWmlnaFVsTkJTMlY1TG5CeWIzUnZkSGx3WlM1cGMxQnliM1J2ZEhsd1pVOW1LR1VwS1h0MGFISnZkMXdpWVhKbmRXMWxiblFnYVhNZ2JtOTBJRkpUUVV0bGVTQnBibk4wWVc1alpWd2lmWFJvYVhNdWNuTmhTMlY1UFdVN2RtRnlJR2M5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpKYm5SbFoyVnlLSHRpYVdkcGJuUTZaUzV1ZlNrN2RtRnlJR1k5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpKYm5SbFoyVnlLSHRjSW1sdWRGd2lPbVV1WlgwcE8zWmhjaUJwUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTVTJWeGRXVnVZMlVvZTJGeWNtRjVPbHRuTEdaZGZTazdkbUZ5SUdnOWFTNW5aWFJGYm1OdlpHVmtTR1Y0S0NrN2RHaHBjeTVoYzI0eFFXeG5TV1E5Ym1WM0lFdEtWVkl1WVhOdU1TNTROVEE1TGtGc1oyOXlhWFJvYlVsa1pXNTBhV1pwWlhJb2UyNWhiV1U2WENKeWMyRkZibU55ZVhCMGFXOXVYQ0o5S1R0MGFHbHpMbUZ6YmpGVGRXSnFVRXRsZVQxdVpYY2dTMHBWVWk1aGMyNHhMa1JGVWtKcGRGTjBjbWx1WnloN2FHVjRPbHdpTURCY0lpdG9mU2w5TzNSb2FYTXVjMlYwVWxOQlVFVk5QV1oxYm1OMGFXOXVLR2NwZTJsbUtHY3ViV0YwWTJnb0x5MHRMUzB0UWtWSFNVNGdVRlZDVEVsRElFdEZXUzB0TFMwdEx5a3BlM1poY2lCdVBXYzdiajF1TG5KbGNHeGhZMlVvTDE0dExTMHRMVnRlTFYwckxTMHRMUzB2TEZ3aVhDSXBPMjQ5Ymk1eVpYQnNZV05sS0M4dExTMHRMVnRlTFYwckxTMHRMUzFjWEhNcUpDOHNYQ0pjSWlrN2RtRnlJRzA5Ymk1eVpYQnNZV05sS0M5Y1hITXJMMmNzWENKY0lpazdkbUZ5SUdZOVEzSjVjSFJ2U2xNdVpXNWpMa0poYzJVMk5DNXdZWEp6WlNodEtUdDJZWElnYVQxRGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5OMGNtbHVaMmxtZVNobUtUdDJZWElnYXoxZmNuTmhjR1Z0WDJkbGRFaGxlRlpoYkhWbFFYSnlZWGxQWmtOb2FXeGtjbVZ1Um5KdmJVaGxlQ2hwS1R0MllYSWdhRDFyV3pGZE8zWmhjaUJzUFdndWMzVmljM1J5S0RJcE8zWmhjaUJsUFY5eWMyRndaVzFmWjJWMFNHVjRWbUZzZFdWQmNuSmhlVTltUTJocGJHUnlaVzVHY205dFNHVjRLR3dwTzNaaGNpQnFQVzVsZHlCU1UwRkxaWGtvS1R0cUxuTmxkRkIxWW14cFl5aGxXekJkTEdWYk1WMHBPM1JvYVhNdWMyVjBVbE5CUzJWNUtHb3BmV1ZzYzJWN2RHaHliM2RjSW10bGVTQnViM1FnYzNWd2NHOXlkR1ZrWENKOWZUdDBhR2x6TG1kbGRFRlRUakZQWW1wbFkzUTlablZ1WTNScGIyNG9LWHRwWmloMGFHbHpMbUZ6YmpGQmJHZEpaRDA5Ym5Wc2JIeDhkR2hwY3k1aGMyNHhVM1ZpYWxCTFpYazlQVzUxYkd3cGUzUm9jbTkzWENKaGJHZEpaQ0JoYm1RdmIzSWdjM1ZpYWxCMVlrdGxlU0J1YjNRZ2MyVjBYQ0o5ZG1GeUlHVTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlRaWEYxWlc1alpTaDdZWEp5WVhrNlczUm9hWE11WVhOdU1VRnNaMGxrTEhSb2FYTXVZWE51TVZOMVltcFFTMlY1WFgwcE8zSmxkSFZ5YmlCbGZUdDBhR2x6TG1kbGRFVnVZMjlrWldSSVpYZzlablZ1WTNScGIyNG9LWHQyWVhJZ1pUMTBhR2x6TG1kbGRFRlRUakZQWW1wbFkzUW9LVHQwYUdsekxtaFVURlk5WlM1blpYUkZibU52WkdWa1NHVjRLQ2s3Y21WMGRYSnVJSFJvYVhNdWFGUk1WbjA3ZEdocGN5NWZjMlYwVWxOQlMyVjVQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQm5QVXRLVlZJdVlYTnVNUzVCVTA0eFZYUnBiQzV1WlhkUFltcGxZM1FvZTNObGNUcGJlMXdpYVc1MFhDSTZlMkpwWjJsdWREcGxMbTU5ZlN4N1hDSnBiblJjSWpwN1hDSnBiblJjSWpwbExtVjlmVjE5S1R0MllYSWdaajFuTG1kbGRFVnVZMjlrWldSSVpYZ29LVHQwYUdsekxtRnpiakZCYkdkSlpEMXVaWGNnUzBwVlVpNWhjMjR4TG5nMU1Ea3VRV3huYjNKcGRHaHRTV1JsYm5ScFptbGxjaWg3Ym1GdFpUcGNJbkp6WVVWdVkzSjVjSFJwYjI1Y0luMHBPM1JvYVhNdVlYTnVNVk4xWW1wUVMyVjVQVzVsZHlCTFNsVlNMbUZ6YmpFdVJFVlNRbWwwVTNSeWFXNW5LSHRvWlhnNlhDSXdNRndpSzJaOUtYMDdkR2hwY3k1ZmMyVjBSVU05Wm5WdVkzUnBiMjRvWlNsN2RtRnlJR1k5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpQWW1wbFkzUkpaR1Z1ZEdsbWFXVnlLSHR1WVcxbE9tVXVZM1Z5ZG1WT1lXMWxmU2s3ZEdocGN5NWhjMjR4UVd4blNXUTlibVYzSUV0S1ZWSXVZWE51TVM1NE5UQTVMa0ZzWjI5eWFYUm9iVWxrWlc1MGFXWnBaWElvZTI1aGJXVTZYQ0psWTFCMVlteHBZMHRsZVZ3aUxHRnpiakZ3WVhKaGJYTTZabjBwTzNSb2FYTXVZWE51TVZOMVltcFFTMlY1UFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTUW1sMFUzUnlhVzVuS0h0b1pYZzZYQ0l3TUZ3aUsyVXVjSFZpUzJWNVNHVjRmU2w5TzNSb2FYTXVYM05sZEVSVFFUMW1kVzVqZEdsdmJpaGxLWHQyWVhJZ1pqMXVaWGNnUzBwVlVpNWhjMjR4TGtGVFRqRlZkR2xzTG01bGQwOWlhbVZqZENoN2MyVnhPbHQ3WENKcGJuUmNJanA3WW1sbmFXNTBPbVV1Y0gxOUxIdGNJbWx1ZEZ3aU9udGlhV2RwYm5RNlpTNXhmWDBzZTF3aWFXNTBYQ0k2ZTJKcFoybHVkRHBsTG1kOWZWMTlLVHQwYUdsekxtRnpiakZCYkdkSlpEMXVaWGNnUzBwVlVpNWhjMjR4TG5nMU1Ea3VRV3huYjNKcGRHaHRTV1JsYm5ScFptbGxjaWg3Ym1GdFpUcGNJbVJ6WVZ3aUxHRnpiakZ3WVhKaGJYTTZabjBwTzNaaGNpQm5QVzVsZHlCTFNsVlNMbUZ6YmpFdVJFVlNTVzUwWldkbGNpaDdZbWxuYVc1ME9tVXVlWDBwTzNSb2FYTXVZWE51TVZOMVltcFFTMlY1UFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTUW1sMFUzUnlhVzVuS0h0b1pYZzZYQ0l3TUZ3aUsyY3VaMlYwUlc1amIyUmxaRWhsZUNncGZTbDlPMmxtS0hSNWNHVnZaaUJrSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHRwWmloMGVYQmxiMllnVWxOQlMyVjVJVDFjSW5WdVpHVm1hVzVsWkZ3aUppWmtJR2x1YzNSaGJtTmxiMllnVWxOQlMyVjVLWHQwYUdsekxsOXpaWFJTVTBGTFpYa29aQ2w5Wld4elpYdHBaaWgwZVhCbGIyWWdTMHBWVWk1amNubHdkRzh1UlVORVUwRWhQVndpZFc1a1pXWnBibVZrWENJbUptUWdhVzV6ZEdGdVkyVnZaaUJMU2xWU0xtTnllWEIwYnk1RlEwUlRRU2w3ZEdocGN5NWZjMlYwUlVNb1pDbDlaV3h6Wlh0cFppaDBlWEJsYjJZZ1MwcFZVaTVqY25sd2RHOHVSRk5CSVQxY0luVnVaR1ZtYVc1bFpGd2lKaVprSUdsdWMzUmhibU5sYjJZZ1MwcFZVaTVqY25sd2RHOHVSRk5CS1h0MGFHbHpMbDl6WlhSRVUwRW9aQ2w5Wld4elpYdHBaaWgwZVhCbGIyWWdaQzV5YzJGclpYa2hQVndpZFc1a1pXWnBibVZrWENJcGUzUm9hWE11YzJWMFVsTkJTMlY1S0dRdWNuTmhhMlY1S1gxbGJITmxlMmxtS0hSNWNHVnZaaUJrTG5KellYQmxiU0U5WENKMWJtUmxabWx1WldSY0lpbDdkR2hwY3k1elpYUlNVMEZRUlUwb1pDNXljMkZ3WlcwcGZYMTlmWDE5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdWVEVXdPUzVUZFdKcVpXTjBVSFZpYkdsalMyVjVTVzVtYnl4TFNsVlNMbUZ6YmpFdVFWTk9NVTlpYW1WamRDazdTMHBWVWk1aGMyNHhMbmcxTURrdVZHbHRaVDFtZFc1amRHbHZiaWhqS1h0TFNsVlNMbUZ6YmpFdWVEVXdPUzVVYVcxbExuTjFjR1Z5WTJ4aGMzTXVZMjl1YzNSeWRXTjBiM0l1WTJGc2JDaDBhR2x6S1R0MllYSWdZajF1ZFd4c08zWmhjaUJoUFc1MWJHdzdkR2hwY3k1elpYUlVhVzFsVUdGeVlXMXpQV1oxYm1OMGFXOXVLR1FwZTNSb2FYTXVkR2x0WlZCaGNtRnRjejFrZlR0MGFHbHpMbWRsZEVWdVkyOWtaV1JJWlhnOVpuVnVZM1JwYjI0b0tYdDJZWElnWkQxdWRXeHNPMmxtS0hSb2FYTXVkR2x0WlZCaGNtRnRjeUU5Ym5Wc2JDbDdhV1lvZEdocGN5NTBlWEJsUFQxY0luVjBZMXdpS1h0a1BXNWxkeUJMU2xWU0xtRnpiakV1UkVWU1ZWUkRWR2x0WlNoMGFHbHpMblJwYldWUVlYSmhiWE1wZldWc2MyVjdaRDF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2RsYm1WeVlXeHBlbVZrVkdsdFpTaDBhR2x6TG5ScGJXVlFZWEpoYlhNcGZYMWxiSE5sZTJsbUtIUm9hWE11ZEhsd1pUMDlYQ0oxZEdOY0lpbDdaRDF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVbFZVUTFScGJXVW9LWDFsYkhObGUyUTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSkhaVzVsY21Gc2FYcGxaRlJwYldVb0tYMTlkR2hwY3k1VVRGWTlaQzVuWlhSRmJtTnZaR1ZrU0dWNEtDazdjbVYwZFhKdUlIUm9hWE11VkV4V2ZUdDBhR2x6TG5SNWNHVTlYQ0oxZEdOY0lqdHBaaWgwZVhCbGIyWWdZeUU5WENKMWJtUmxabWx1WldSY0lpbDdhV1lvZEhsd1pXOW1JR011ZEhsd1pTRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTUwZVhCbFBXTXVkSGx3WlgxbGJITmxlMmxtS0hSNWNHVnZaaUJqTG5OMGNpRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2FXWW9ZeTV6ZEhJdWJXRjBZMmdvTDE1Yk1DMDVYWHN4TW4xYUpDOHBLWHQwYUdsekxuUjVjR1U5WENKMWRHTmNJbjFwWmloakxuTjBjaTV0WVhSamFDZ3ZYbHN3TFRsZGV6RTBmVm9rTHlrcGUzUm9hWE11ZEhsd1pUMWNJbWRsYmx3aWZYMTlkR2hwY3k1MGFXMWxVR0Z5WVcxelBXTjlmVHRaUVVoUFR5NXNZVzVuTG1WNGRHVnVaQ2hMU2xWU0xtRnpiakV1ZURVd09TNVVhVzFsTEV0S1ZWSXVZWE51TVM1QlUwNHhUMkpxWldOMEtUdExTbFZTTG1GemJqRXVlRFV3T1M1QmJHZHZjbWwwYUcxSlpHVnVkR2xtYVdWeVBXWjFibU4wYVc5dUtHVXBlMHRLVlZJdVlYTnVNUzU0TlRBNUxrRnNaMjl5YVhSb2JVbGtaVzUwYVdacFpYSXVjM1Z3WlhKamJHRnpjeTVqYjI1emRISjFZM1J2Y2k1allXeHNLSFJvYVhNcE8zWmhjaUJoUFc1MWJHdzdkbUZ5SUdROWJuVnNiRHQyWVhJZ1lqMXVkV3hzTzNaaGNpQmpQV1poYkhObE8zUm9hWE11WjJWMFJXNWpiMlJsWkVobGVEMW1kVzVqZEdsdmJpZ3BlMmxtS0hSb2FYTXVibUZ0WlVGc1p6MDliblZzYkNZbWRHaHBjeTVoYzI0eFFXeG5QVDF1ZFd4c0tYdDBhSEp2ZDF3aVlXeG5iM0pwZEdodElHNXZkQ0J6Y0dWamFXWnBaV1JjSW4xcFppaDBhR2x6TG01aGJXVkJiR2NoUFc1MWJHd21KblJvYVhNdVlYTnVNVUZzWnowOWJuVnNiQ2w3ZEdocGN5NWhjMjR4UVd4blBVdEtWVkl1WVhOdU1TNTROVEE1TGs5SlJDNXVZVzFsTW05aWFpaDBhR2x6TG01aGJXVkJiR2NwZlhaaGNpQm1QVnQwYUdsekxtRnpiakZCYkdkZE8ybG1LQ0YwYUdsekxuQmhjbUZ0Ulcxd2RIa3BlMll1Y0hWemFDaDBhR2x6TG1GemJqRlFZWEpoYlhNcGZYWmhjaUJuUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTVTJWeGRXVnVZMlVvZTJGeWNtRjVPbVo5S1R0MGFHbHpMbWhVVEZZOVp5NW5aWFJGYm1OdlpHVmtTR1Y0S0NrN2NtVjBkWEp1SUhSb2FYTXVhRlJNVm4wN2FXWW9kSGx3Wlc5bUlHVWhQVndpZFc1a1pXWnBibVZrWENJcGUybG1LSFI1Y0dWdlppQmxMbTVoYldVaFBWd2lkVzVrWldacGJtVmtYQ0lwZTNSb2FYTXVibUZ0WlVGc1p6MWxMbTVoYldWOWFXWW9kSGx3Wlc5bUlHVXVZWE51TVhCaGNtRnRjeUU5WENKMWJtUmxabWx1WldSY0lpbDdkR2hwY3k1aGMyNHhVR0Z5WVcxelBXVXVZWE51TVhCaGNtRnRjMzFwWmloMGVYQmxiMllnWlM1d1lYSmhiV1Z0Y0hSNUlUMWNJblZ1WkdWbWFXNWxaRndpS1h0MGFHbHpMbkJoY21GdFJXMXdkSGs5WlM1d1lYSmhiV1Z0Y0hSNWZYMXBaaWgwYUdsekxtRnpiakZRWVhKaGJYTTlQVzUxYkd3cGUzUm9hWE11WVhOdU1WQmhjbUZ0Y3oxdVpYY2dTMHBWVWk1aGMyNHhMa1JGVWs1MWJHd29LWDE5TzFsQlNFOVBMbXhoYm1jdVpYaDBaVzVrS0V0S1ZWSXVZWE51TVM1NE5UQTVMa0ZzWjI5eWFYUm9iVWxrWlc1MGFXWnBaWElzUzBwVlVpNWhjMjR4TGtGVFRqRlBZbXBsWTNRcE8wdEtWVkl1WVhOdU1TNTROVEE1TGtkbGJtVnlZV3hPWVcxbFBXWjFibU4wYVc5dUtHUXBlMHRLVlZJdVlYTnVNUzU0TlRBNUxrZGxibVZ5WVd4T1lXMWxMbk4xY0dWeVkyeGhjM011WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2gwYUdsektUdDJZWElnWXoxdWRXeHNPM1poY2lCaVBXNTFiR3c3ZG1GeUlHRTllM0ptWXpneU1qcGNJamd4WENJc1pHNXpPbHdpT0RKY0lpeGtianBjSW1FMFhDSXNkWEpwT2x3aU9EWmNJbjA3ZEdocGN5NWxlSEJzYVdOcGREMW1ZV3h6WlR0MGFHbHpMbk5sZEVKNVVHRnlZVzA5Wm5WdVkzUnBiMjRvYXlsN2RtRnlJR285Ym5Wc2JEdDJZWElnWnoxdWRXeHNPMmxtS0hSNWNHVnZaaUJyUFQxY0luVnVaR1ZtYVc1bFpGd2lLWHR5WlhSMWNtNTlhV1lvZEhsd1pXOW1JR3N1Y21aak9ESXlJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdDBhR2x6TG5SNWNHVTlYQ0p5Wm1NNE1qSmNJanRuUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTU1VFMVUzUnlhVzVuS0h0emRISTZhMXQwYUdsekxuUjVjR1ZkZlNsOWFXWW9kSGx3Wlc5bUlHc3VaRzV6SVQxY0luVnVaR1ZtYVc1bFpGd2lLWHQwYUdsekxuUjVjR1U5WENKa2JuTmNJanRuUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTU1VFMVUzUnlhVzVuS0h0emRISTZhMXQwYUdsekxuUjVjR1ZkZlNsOWFXWW9kSGx3Wlc5bUlHc3VkWEpwSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHQwYUdsekxuUjVjR1U5WENKMWNtbGNJanRuUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTU1VFMVUzUnlhVzVuS0h0emRISTZhMXQwYUdsekxuUjVjR1ZkZlNsOWFXWW9kSGx3Wlc5bUlHc3VZMlZ5ZEdsemMzVmxjaUU5WENKMWJtUmxabWx1WldSY0lpbDdkR2hwY3k1MGVYQmxQVndpWkc1Y0lqdDBhR2x6TG1WNGNHeHBZMmwwUFhSeWRXVTdkbUZ5SUdnOWF5NWpaWEowYVhOemRXVnlPM1poY2lCbVBXNTFiR3c3YVdZb2FDNXRZWFJqYUNndlhsc3dMVGxCTFVaaExXWmRLeVF2S1NsN1pqMDlhSDFwWmlob0xtbHVaR1Y0VDJZb1hDSXRMUzB0TFVKRlIwbE9JRndpS1NFOUxURXBlMlk5V0RVd09TNXdaVzFVYjBobGVDaG9LWDFwWmlobVBUMXVkV3hzS1h0MGFISnZkMXdpWTJWeWRHbHpjM1ZsY2lCd1lYSmhiU0J1YjNRZ1kyVnlkRndpZlhaaGNpQmxQVzVsZHlCWU5UQTVLQ2s3WlM1b1pYZzlaanQyWVhJZ2FUMWxMbWRsZEVsemMzVmxja2hsZUNncE8yYzlibVYzSUV0S1ZWSXVZWE51TVM1QlUwNHhUMkpxWldOMEtDazdaeTVvVkV4V1BXbDlhV1lvZEhsd1pXOW1JR3N1WTJWeWRITjFZbW9oUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlM1JvYVhNdWRIbHdaVDFjSW1SdVhDSTdkR2hwY3k1bGVIQnNhV05wZEQxMGNuVmxPM1poY2lCb1BXc3VZMlZ5ZEhOMVltbzdkbUZ5SUdZOWJuVnNiRHRwWmlob0xtMWhkR05vS0M5ZVd6QXRPVUV0Um1FdFpsMHJKQzhwS1h0bVBUMW9mV2xtS0dndWFXNWtaWGhQWmloY0lpMHRMUzB0UWtWSFNVNGdYQ0lwSVQwdE1TbDdaajFZTlRBNUxuQmxiVlJ2U0dWNEtHZ3BmV2xtS0dZOVBXNTFiR3dwZTNSb2NtOTNYQ0pqWlhKMGMzVmlhaUJ3WVhKaGJTQnViM1FnWTJWeWRGd2lmWFpoY2lCbFBXNWxkeUJZTlRBNUtDazdaUzVvWlhnOVpqdDJZWElnYVQxbExtZGxkRk4xWW1wbFkzUklaWGdvS1R0blBXNWxkeUJMU2xWU0xtRnpiakV1UVZOT01VOWlhbVZqZENncE8yY3VhRlJNVmoxcGZXbG1LSFJvYVhNdWRIbHdaVDA5Ym5Wc2JDbDdkR2h5YjNkY0luVnVjM1Z3Y0c5eWRHVmtJSFI1Y0dVZ2FXNGdjR0Z5WVcxelBWd2lLMnQ5ZEdocGN5NWhjMjR4VDJKcVBXNWxkeUJMU2xWU0xtRnpiakV1UkVWU1ZHRm5aMlZrVDJKcVpXTjBLSHRsZUhCc2FXTnBkRHAwYUdsekxtVjRjR3hwWTJsMExIUmhaenBoVzNSb2FYTXVkSGx3WlYwc2IySnFPbWQ5S1gwN2RHaHBjeTVuWlhSRmJtTnZaR1ZrU0dWNFBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11WVhOdU1VOWlhaTVuWlhSRmJtTnZaR1ZrU0dWNEtDbDlPMmxtS0hSNWNHVnZaaUJrSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHQwYUdsekxuTmxkRUo1VUdGeVlXMG9aQ2w5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdWVEVXdPUzVIWlc1bGNtRnNUbUZ0WlN4TFNsVlNMbUZ6YmpFdVFWTk9NVTlpYW1WamRDazdTMHBWVWk1aGMyNHhMbmcxTURrdVIyVnVaWEpoYkU1aGJXVnpQV1oxYm1OMGFXOXVLR0lwZTB0S1ZWSXVZWE51TVM1NE5UQTVMa2RsYm1WeVlXeE9ZVzFsY3k1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeWs3ZG1GeUlHRTliblZzYkR0MGFHbHpMbk5sZEVKNVVHRnlZVzFCY25KaGVUMW1kVzVqZEdsdmJpaGxLWHRtYjNJb2RtRnlJR005TUR0alBHVXViR1Z1WjNSb08yTXJLeWw3ZG1GeUlHUTlibVYzSUV0S1ZWSXVZWE51TVM1NE5UQTVMa2RsYm1WeVlXeE9ZVzFsS0dWYlkxMHBPM1JvYVhNdVlYTnVNVUZ5Y21GNUxuQjFjMmdvWkNsOWZUdDBhR2x6TG1kbGRFVnVZMjlrWldSSVpYZzlablZ1WTNScGIyNG9LWHQyWVhJZ1l6MXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVsTmxjWFZsYm1ObEtIdGhjbkpoZVRwMGFHbHpMbUZ6YmpGQmNuSmhlWDBwTzNKbGRIVnliaUJqTG1kbGRFVnVZMjlrWldSSVpYZ29LWDA3ZEdocGN5NWhjMjR4UVhKeVlYazlibVYzSUVGeWNtRjVLQ2s3YVdZb2RIbHdaVzltSUdJaFBWd2lkVzVrWldacGJtVmtYQ0lwZTNSb2FYTXVjMlYwUW5sUVlYSmhiVUZ5Y21GNUtHSXBmWDA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TG5nMU1Ea3VSMlZ1WlhKaGJFNWhiV1Z6TEV0S1ZWSXVZWE51TVM1QlUwNHhUMkpxWldOMEtUdExTbFZTTG1GemJqRXVlRFV3T1M1RWFYTjBjbWxpZFhScGIyNVFiMmx1ZEU1aGJXVTlablZ1WTNScGIyNG9ZaWw3UzBwVlVpNWhjMjR4TG5nMU1Ea3VSR2x6ZEhKcFluVjBhVzl1VUc5cGJuUk9ZVzFsTG5OMWNHVnlZMnhoYzNNdVkyOXVjM1J5ZFdOMGIzSXVZMkZzYkNoMGFHbHpLVHQyWVhJZ1pUMXVkV3hzTzNaaGNpQmpQVzUxYkd3N2RtRnlJR0U5Ym5Wc2JEdDJZWElnWkQxdWRXeHNPM1JvYVhNdVoyVjBSVzVqYjJSbFpFaGxlRDFtZFc1amRHbHZiaWdwZTJsbUtIUm9hWE11ZEhsd1pTRTlYQ0ptZFd4c1hDSXBlM1JvY205M1hDSmpkWEp5Wlc1MGJIa2dkSGx3WlNCemFHRnNiQ0JpWlNBblpuVnNiQ2M2SUZ3aUszUm9hWE11ZEhsd1pYMTBhR2x6TG1GemJqRlBZbW85Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpVWVdkblpXUlBZbXBsWTNRb2UyVjRjR3hwWTJsME9tWmhiSE5sTEhSaFp6cDBhR2x6TG5SaFp5eHZZbW82ZEdocGN5NWhjMjR4Vm4wcE8zUm9hWE11YUZSTVZqMTBhR2x6TG1GemJqRlBZbW91WjJWMFJXNWpiMlJsWkVobGVDZ3BPM0psZEhWeWJpQjBhR2x6TG1oVVRGWjlPMmxtS0hSNWNHVnZaaUJpSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHRwWmloTFNsVlNMbUZ6YmpFdWVEVXdPUzVIWlc1bGNtRnNUbUZ0WlhNdWNISnZkRzkwZVhCbExtbHpVSEp2ZEc5MGVYQmxUMllvWWlrcGUzUm9hWE11ZEhsd1pUMWNJbVoxYkd4Y0lqdDBhR2x6TG5SaFp6MWNJbUV3WENJN2RHaHBjeTVoYzI0eFZqMWlmV1ZzYzJWN2RHaHliM2RjSWxSb2FYTWdZMnhoYzNNZ2MzVndjRzl5ZEhNZ1IyVnVaWEpoYkU1aGJXVnpJRzl1YkhrZ1lYTWdZWEpuZFcxbGJuUmNJbjE5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdWVEVXdPUzVFYVhOMGNtbGlkWFJwYjI1UWIybHVkRTVoYldVc1MwcFZVaTVoYzI0eExrRlRUakZQWW1wbFkzUXBPMHRLVlZJdVlYTnVNUzU0TlRBNUxrUnBjM1J5YVdKMWRHbHZibEJ2YVc1MFBXWjFibU4wYVc5dUtHSXBlMHRLVlZJdVlYTnVNUzU0TlRBNUxrUnBjM1J5YVdKMWRHbHZibEJ2YVc1MExuTjFjR1Z5WTJ4aGMzTXVZMjl1YzNSeWRXTjBiM0l1WTJGc2JDaDBhR2x6S1R0MllYSWdZVDF1ZFd4c08zUm9hWE11WjJWMFJXNWpiMlJsWkVobGVEMW1kVzVqZEdsdmJpZ3BlM1poY2lCalBXNWxkeUJMU2xWU0xtRnpiakV1UkVWU1UyVnhkV1Z1WTJVb0tUdHBaaWgwYUdsekxtRnpiakZFVUNFOWJuVnNiQ2w3ZG1GeUlHUTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlVZV2RuWldSUFltcGxZM1FvZTJWNGNHeHBZMmwwT25SeWRXVXNkR0ZuT2x3aVlUQmNJaXh2WW1vNmRHaHBjeTVoYzI0eFJGQjlLVHRqTG1Gd2NHVnVaRUZUVGpGUFltcGxZM1FvWkNsOWRHaHBjeTVvVkV4V1BXTXVaMlYwUlc1amIyUmxaRWhsZUNncE8zSmxkSFZ5YmlCMGFHbHpMbWhVVEZaOU8ybG1LSFI1Y0dWdlppQmlJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdHBaaWgwZVhCbGIyWWdZaTVrY0c5aWFpRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTVoYzI0eFJGQTlZaTVrY0c5aWFuMTlmVHRaUVVoUFR5NXNZVzVuTG1WNGRHVnVaQ2hMU2xWU0xtRnpiakV1ZURVd09TNUVhWE4wY21saWRYUnBiMjVRYjJsdWRDeExTbFZTTG1GemJqRXVRVk5PTVU5aWFtVmpkQ2s3UzBwVlVpNWhjMjR4TG5nMU1Ea3VUMGxFUFc1bGR5Qm1kVzVqZEdsdmJpaGhLWHQwYUdsekxtRjBlWEJsTW05cFpFeHBjM1E5ZTBNNlhDSXlMalV1TkM0MlhDSXNUenBjSWpJdU5TNDBMakV3WENJc1QxVTZYQ0l5TGpVdU5DNHhNVndpTEZOVU9sd2lNaTQxTGpRdU9Gd2lMRXc2WENJeUxqVXVOQzQzWENJc1EwNDZYQ0l5TGpVdU5DNHpYQ0lzVTA0NlhDSXlMalV1TkM0MFhDSXNSRTQ2WENJeUxqVXVOQzQwT1Z3aUxFUkRPbHdpTUM0NUxqSXpOREl1TVRreU1EQXpNREF1TVRBd0xqRXVNalZjSWl4OU8zUm9hWE11Ym1GdFpUSnZhV1JNYVhOMFBYdHphR0V4T2x3aU1TNHpMakUwTGpNdU1pNHlObHdpTEhOb1lUSTFOanBjSWpJdU1UWXVPRFF3TGpFdU1UQXhMak11TkM0eUxqRmNJaXh6YUdFek9EUTZYQ0l5TGpFMkxqZzBNQzR4TGpFd01TNHpMalF1TWk0eVhDSXNjMmhoTlRFeU9sd2lNaTR4Tmk0NE5EQXVNUzR4TURFdU15NDBMakl1TTF3aUxITm9ZVEl5TkRwY0lqSXVNVFl1T0RRd0xqRXVNVEF4TGpNdU5DNHlMalJjSWl4dFpEVTZYQ0l4TGpJdU9EUXdMakV4TXpVME9TNHlMalZjSWl4dFpESTZYQ0l4TGpNdU1UUXVOeTR5TGpJdU1Wd2lMSEpwY0dWdFpERTJNRHBjSWpFdU15NHpOaTR6TGpJdU1Wd2lMRTFFTW5kcGRHaFNVMEU2WENJeExqSXVPRFF3TGpFeE16VTBPUzR4TGpFdU1sd2lMRTFFTkhkcGRHaFNVMEU2WENJeExqSXVPRFF3TGpFeE16VTBPUzR4TGpFdU0xd2lMRTFFTlhkcGRHaFNVMEU2WENJeExqSXVPRFF3TGpFeE16VTBPUzR4TGpFdU5Gd2lMRk5JUVRGM2FYUm9VbE5CT2x3aU1TNHlMamcwTUM0eE1UTTFORGt1TVM0eExqVmNJaXhUU0VFeU1qUjNhWFJvVWxOQk9sd2lNUzR5TGpnME1DNHhNVE0xTkRrdU1TNHhMakUwWENJc1UwaEJNalUyZDJsMGFGSlRRVHBjSWpFdU1pNDROREF1TVRFek5UUTVMakV1TVM0eE1Wd2lMRk5JUVRNNE5IZHBkR2hTVTBFNlhDSXhMakl1T0RRd0xqRXhNelUwT1M0eExqRXVNVEpjSWl4VFNFRTFNVEozYVhSb1VsTkJPbHdpTVM0eUxqZzBNQzR4TVRNMU5Ea3VNUzR4TGpFelhDSXNVMGhCTVhkcGRHaEZRMFJUUVRwY0lqRXVNaTQ0TkRBdU1UQXdORFV1TkM0eFhDSXNVMGhCTWpJMGQybDBhRVZEUkZOQk9sd2lNUzR5TGpnME1DNHhNREEwTlM0MExqTXVNVndpTEZOSVFUSTFObmRwZEdoRlEwUlRRVHBjSWpFdU1pNDROREF1TVRBd05EVXVOQzR6TGpKY0lpeFRTRUV6T0RSM2FYUm9SVU5FVTBFNlhDSXhMakl1T0RRd0xqRXdNRFExTGpRdU15NHpYQ0lzVTBoQk5URXlkMmwwYUVWRFJGTkJPbHdpTVM0eUxqZzBNQzR4TURBME5TNDBMak11TkZ3aUxHUnpZVHBjSWpFdU1pNDROREF1TVRBd05EQXVOQzR4WENJc1UwaEJNWGRwZEdoRVUwRTZYQ0l4TGpJdU9EUXdMakV3TURRd0xqUXVNMXdpTEZOSVFUSXlOSGRwZEdoRVUwRTZYQ0l5TGpFMkxqZzBNQzR4TGpFd01TNHpMalF1TXk0eFhDSXNVMGhCTWpVMmQybDBhRVJUUVRwY0lqSXVNVFl1T0RRd0xqRXVNVEF4TGpNdU5DNHpMakpjSWl4eWMyRkZibU55ZVhCMGFXOXVPbHdpTVM0eUxqZzBNQzR4TVRNMU5Ea3VNUzR4TGpGY0lpeGpiM1Z1ZEhKNVRtRnRaVHBjSWpJdU5TNDBMalpjSWl4dmNtZGhibWw2WVhScGIyNDZYQ0l5TGpVdU5DNHhNRndpTEc5eVoyRnVhWHBoZEdsdmJtRnNWVzVwZERwY0lqSXVOUzQwTGpFeFhDSXNjM1JoZEdWUGNsQnliM1pwYm1ObFRtRnRaVHBjSWpJdU5TNDBMamhjSWl4c2IyTmhiR2wwZVRwY0lqSXVOUzQwTGpkY0lpeGpiMjF0YjI1T1lXMWxPbHdpTWk0MUxqUXVNMXdpTEhOMVltcGxZM1JMWlhsSlpHVnVkR2xtYVdWeU9sd2lNaTQxTGpJNUxqRTBYQ0lzYTJWNVZYTmhaMlU2WENJeUxqVXVNamt1TVRWY0lpeHpkV0pxWldOMFFXeDBUbUZ0WlRwY0lqSXVOUzR5T1M0eE4xd2lMR0poYzJsalEyOXVjM1J5WVdsdWRITTZYQ0l5TGpVdU1qa3VNVGxjSWl4dVlXMWxRMjl1YzNSeVlXbHVkSE02WENJeUxqVXVNamt1TXpCY0lpeGpVa3hFYVhOMGNtbGlkWFJwYjI1UWIybHVkSE02WENJeUxqVXVNamt1TXpGY0lpeGpaWEowYVdacFkyRjBaVkJ2YkdsamFXVnpPbHdpTWk0MUxqSTVMak15WENJc1lYVjBhRzl5YVhSNVMyVjVTV1JsYm5ScFptbGxjanBjSWpJdU5TNHlPUzR6TlZ3aUxIQnZiR2xqZVVOdmJuTjBjbUZwYm5Sek9sd2lNaTQxTGpJNUxqTTJYQ0lzWlhoMFMyVjVWWE5oWjJVNlhDSXlMalV1TWprdU16ZGNJaXhoZFhSb2IzSnBkSGxKYm1adlFXTmpaWE56T2x3aU1TNHpMall1TVM0MUxqVXVOeTR4TGpGY0lpeGhibmxGZUhSbGJtUmxaRXRsZVZWellXZGxPbHdpTWk0MUxqSTVMak0zTGpCY0lpeHpaWEoyWlhKQmRYUm9PbHdpTVM0ekxqWXVNUzQxTGpVdU55NHpMakZjSWl4amJHbGxiblJCZFhSb09sd2lNUzR6TGpZdU1TNDFMalV1Tnk0ekxqSmNJaXhqYjJSbFUybG5ibWx1WnpwY0lqRXVNeTQyTGpFdU5TNDFMamN1TXk0elhDSXNaVzFoYVd4UWNtOTBaV04wYVc5dU9sd2lNUzR6TGpZdU1TNDFMalV1Tnk0ekxqUmNJaXgwYVcxbFUzUmhiWEJwYm1jNlhDSXhMak11Tmk0eExqVXVOUzQzTGpNdU9Gd2lMRzlqYzNCVGFXZHVhVzVuT2x3aU1TNHpMall1TVM0MUxqVXVOeTR6TGpsY0lpeGxZMUIxWW14cFkwdGxlVHBjSWpFdU1pNDROREF1TVRBd05EVXVNaTR4WENJc2MyVmpjREkxTm5JeE9sd2lNUzR5TGpnME1DNHhNREEwTlM0ekxqRXVOMXdpTEhObFkzQXlOVFpyTVRwY0lqRXVNeTR4TXpJdU1DNHhNRndpTEhObFkzQXpPRFJ5TVRwY0lqRXVNeTR4TXpJdU1DNHpORndpTEhCclkzTTFVRUpGVXpJNlhDSXhMakl1T0RRd0xqRXhNelUwT1M0eExqVXVNVE5jSWl4d2EyTnpOVkJDUzBSR01qcGNJakV1TWk0NE5EQXVNVEV6TlRRNUxqRXVOUzR4TWx3aUxGd2laR1Z6TFVWRVJUTXRRMEpEWENJNlhDSXhMakl1T0RRd0xqRXhNelUwT1M0ekxqZGNJaXhrWVhSaE9sd2lNUzR5TGpnME1DNHhNVE0xTkRrdU1TNDNMakZjSWl4Y0luTnBaMjVsWkMxa1lYUmhYQ0k2WENJeExqSXVPRFF3TGpFeE16VTBPUzR4TGpjdU1sd2lMRndpWlc1MlpXeHZjR1ZrTFdSaGRHRmNJanBjSWpFdU1pNDROREF1TVRFek5UUTVMakV1Tnk0elhDSXNYQ0prYVdkbGMzUmxaQzFrWVhSaFhDSTZYQ0l4TGpJdU9EUXdMakV4TXpVME9TNHhMamN1TlZ3aUxGd2laVzVqY25sd2RHVmtMV1JoZEdGY0lqcGNJakV1TWk0NE5EQXVNVEV6TlRRNUxqRXVOeTQyWENJc1hDSmhkWFJvWlc1MGFXTmhkR1ZrTFdSaGRHRmNJanBjSWpFdU1pNDROREF1TVRFek5UUTVMakV1T1M0eE5pNHhMakpjSWl4MGMzUnBibVp2T2x3aU1TNHlMamcwTUM0eE1UTTFORGt1TVM0NUxqRTJMakV1TkZ3aUxIMDdkR2hwY3k1dlltcERZV05vWlQxN2ZUdDBhR2x6TG01aGJXVXliMkpxUFdaMWJtTjBhVzl1S0dJcGUybG1LSFI1Y0dWdlppQjBhR2x6TG05aWFrTmhZMmhsVzJKZElUMWNJblZ1WkdWbWFXNWxaRndpS1h0eVpYUjFjbTRnZEdocGN5NXZZbXBEWVdOb1pWdGlYWDFwWmloMGVYQmxiMllnZEdocGN5NXVZVzFsTW05cFpFeHBjM1JiWWwwOVBWd2lkVzVrWldacGJtVmtYQ0lwZTNSb2NtOTNYQ0pPWVcxbElHOW1JRTlpYW1WamRFbGtaVzUwYVdacFpYSWdibTkwSUdSbFptbHVaV1E2SUZ3aUsySjlkbUZ5SUdNOWRHaHBjeTV1WVcxbE1tOXBaRXhwYzNSYllsMDdkbUZ5SUdROWJtVjNJRXRLVlZJdVlYTnVNUzVFUlZKUFltcGxZM1JKWkdWdWRHbG1hV1Z5S0h0dmFXUTZZMzBwTzNSb2FYTXViMkpxUTJGamFHVmJZbDA5WkR0eVpYUjFjbTRnWkgwN2RHaHBjeTVoZEhsd1pUSnZZbW85Wm5WdVkzUnBiMjRvWWlsN2FXWW9kSGx3Wlc5bUlIUm9hWE11YjJKcVEyRmphR1ZiWWwwaFBWd2lkVzVrWldacGJtVmtYQ0lwZTNKbGRIVnliaUIwYUdsekxtOWlha05oWTJobFcySmRmV2xtS0hSNWNHVnZaaUIwYUdsekxtRjBlWEJsTW05cFpFeHBjM1JiWWwwOVBWd2lkVzVrWldacGJtVmtYQ0lwZTNSb2NtOTNYQ0pCZEhSeWFXSjFkR1ZVZVhCbElHNWhiV1VnZFc1a1pXWnBibVZrT2lCY0lpdGlmWFpoY2lCalBYUm9hWE11WVhSNWNHVXliMmxrVEdsemRGdGlYVHQyWVhJZ1pEMXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVrOWlhbVZqZEVsa1pXNTBhV1pwWlhJb2UyOXBaRHBqZlNrN2RHaHBjeTV2WW1wRFlXTm9aVnRpWFQxa08zSmxkSFZ5YmlCa2ZYMDdTMHBWVWk1aGMyNHhMbmcxTURrdVQwbEVMbTlwWkRKdVlXMWxQV1oxYm1OMGFXOXVLR0lwZTNaaGNpQmpQVXRLVlZJdVlYTnVNUzU0TlRBNUxrOUpSQzV1WVcxbE1tOXBaRXhwYzNRN1ptOXlLSFpoY2lCaElHbHVJR01wZTJsbUtHTmJZVjA5UFdJcGUzSmxkSFZ5YmlCaGZYMXlaWFIxY201Y0lsd2lmVHRMU2xWU0xtRnpiakV1ZURVd09TNVBTVVF1Ym1GdFpUSnZhV1E5Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k5UzBwVlVpNWhjMjR4TG5nMU1Ea3VUMGxFTG01aGJXVXliMmxrVEdsemREdHBaaWhpVzJGZFBUMDlkVzVrWldacGJtVmtLWHR5WlhSMWNtNWNJbHdpZlhKbGRIVnliaUJpVzJGZGZUdExTbFZTTG1GemJqRXVlRFV3T1M1WU5UQTVWWFJwYkQxdVpYY2dablZ1WTNScGIyNG9LWHQwYUdsekxtZGxkRkJMUTFNNFVIVmlTMlY1VUVWTlpuSnZiVkpUUVV0bGVUMW1kVzVqZEdsdmJpaHBLWHQyWVhJZ2FEMXVkV3hzTzNaaGNpQm1QVXRLVlZJdVlYTnVNUzVCVTA0eFZYUnBiQzVpYVdkSmJuUlViMDFwYmxSM2IzTkRiMjF3YkdWdFpXNTBjMGhsZUNocExtNHBPM1poY2lCcVBVdEtWVkl1WVhOdU1TNUJVMDR4VlhScGJDNXBiblJsWjJWeVZHOUNlWFJsU0dWNEtHa3VaU2s3ZG1GeUlHRTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSkpiblJsWjJWeUtIdG9aWGc2Wm4wcE8zWmhjaUJuUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTU1c1MFpXZGxjaWg3YUdWNE9tcDlLVHQyWVhJZ2JEMXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVsTmxjWFZsYm1ObEtIdGhjbkpoZVRwYllTeG5YWDBwTzNaaGNpQmpQV3d1WjJWMFJXNWpiMlJsWkVobGVDZ3BPM1poY2lCa1BXNWxkeUJMU2xWU0xtRnpiakV1ZURVd09TNUJiR2R2Y21sMGFHMUpaR1Z1ZEdsbWFXVnlLSHR1WVcxbE9sd2ljbk5oUlc1amNubHdkR2x2Ymx3aWZTazdkbUZ5SUdJOWJtVjNJRXRLVlZJdVlYTnVNUzVFUlZKQ2FYUlRkSEpwYm1jb2UyaGxlRHBjSWpBd1hDSXJZMzBwTzNaaGNpQnJQVzVsZHlCTFNsVlNMbUZ6YmpFdVJFVlNVMlZ4ZFdWdVkyVW9lMkZ5Y21GNU9sdGtMR0pkZlNrN2RtRnlJR1U5YXk1blpYUkZibU52WkdWa1NHVjRLQ2s3ZG1GeUlHZzlTMHBWVWk1aGMyNHhMa0ZUVGpGVmRHbHNMbWRsZEZCRlRWTjBjbWx1WjBaeWIyMUlaWGdvWlN4Y0lsQlZRa3hKUXlCTFJWbGNJaWs3Y21WMGRYSnVJR2g5ZlR0TFNsVlNMbUZ6YmpFdWVEVXdPUzVZTlRBNVZYUnBiQzV1WlhkRFpYSjBVRVZOUFdaMWJtTjBhVzl1S0dZcGUzWmhjaUJqUFV0S1ZWSXVZWE51TVM1NE5UQTVPM1poY2lCbFBXNWxkeUJqTGxSQ1UwTmxjblJwWm1sallYUmxLQ2s3YVdZb1ppNXpaWEpwWVd3aFBUMTFibVJsWm1sdVpXUXBlMlV1YzJWMFUyVnlhV0ZzVG5WdFltVnlRbmxRWVhKaGJTaG1Mbk5sY21saGJDbDlaV3h6Wlh0MGFISnZkMXdpYzJWeWFXRnNJRzUxYldKbGNpQjFibVJsWm1sdVpXUXVYQ0o5YVdZb2RIbHdaVzltSUdZdWMybG5ZV3huTG01aGJXVTlQVndpYzNSeWFXNW5YQ0lwZTJVdWMyVjBVMmxuYm1GMGRYSmxRV3huUW5sUVlYSmhiU2htTG5OcFoyRnNaeWw5Wld4elpYdDBhSEp2ZDF3aWRXNXdjbTl3WlhJZ2MybG5ibUYwZFhKbElHRnNaMjl5YVhSb2JTQnVZVzFsWENKOWFXWW9aaTVwYzNOMVpYSWhQVDExYm1SbFptbHVaV1FwZTJVdWMyVjBTWE56ZFdWeVFubFFZWEpoYlNobUxtbHpjM1ZsY2lsOVpXeHpaWHQwYUhKdmQxd2lhWE56ZFdWeUlHNWhiV1VnZFc1a1pXWnBibVZrTGx3aWZXbG1LR1l1Ym05MFltVm1iM0psSVQwOWRXNWtaV1pwYm1Wa0tYdGxMbk5sZEU1dmRFSmxabTl5WlVKNVVHRnlZVzBvWmk1dWIzUmlaV1p2Y21VcGZXVnNjMlY3ZEdoeWIzZGNJbTV2ZEdKbFptOXlaU0IxYm1SbFptbHVaV1F1WENKOWFXWW9aaTV1YjNSaFpuUmxjaUU5UFhWdVpHVm1hVzVsWkNsN1pTNXpaWFJPYjNSQlpuUmxja0o1VUdGeVlXMG9aaTV1YjNSaFpuUmxjaWw5Wld4elpYdDBhSEp2ZDF3aWJtOTBZV1owWlhJZ2RXNWtaV1pwYm1Wa0xsd2lmV2xtS0dZdWMzVmlhbVZqZENFOVBYVnVaR1ZtYVc1bFpDbDdaUzV6WlhSVGRXSnFaV04wUW5sUVlYSmhiU2htTG5OMVltcGxZM1FwZldWc2MyVjdkR2h5YjNkY0luTjFZbXBsWTNRZ2JtRnRaU0IxYm1SbFptbHVaV1F1WENKOWFXWW9aaTV6WW1wd2RXSnJaWGtoUFQxMWJtUmxabWx1WldRcGUyVXVjMlYwVTNWaWFtVmpkRkIxWW14cFkwdGxlVUo1UjJWMFMyVjVLR1l1YzJKcWNIVmlhMlY1S1gxbGJITmxlM1JvY205M1hDSnpkV0pxWldOMElIQjFZbXhwWXlCclpYa2dkVzVrWldacGJtVmtMbHdpZldsbUtHWXVaWGgwSVQwOWRXNWtaV1pwYm1Wa0ppWm1MbVY0ZEM1c1pXNW5kR2doUFQxMWJtUmxabWx1WldRcGUyWnZjaWgyWVhJZ1lqMHdPMkk4Wmk1bGVIUXViR1Z1WjNSb08ySXJLeWw3Wm05eUtHdGxlU0JwYmlCbUxtVjRkRnRpWFNsN1pTNWhjSEJsYm1SRmVIUmxibk5wYjI1Q2VVNWhiV1VvYTJWNUxHWXVaWGgwVzJKZFcydGxlVjBwZlgxOWFXWW9aaTVqWVd0bGVUMDlQWFZ1WkdWbWFXNWxaQ1ltWmk1emFXZG9aWGc5UFQxMWJtUmxabWx1WldRcGUzUm9jbTkzWENKd1lYSmhiU0JqWVd0bGVTQmhibVFnYzJsbmFHVjRJSFZ1WkdWbWFXNWxaQzVjSW4xMllYSWdaRDF1ZFd4c08zWmhjaUJoUFc1MWJHdzdhV1lvWmk1allXdGxlU2w3WkQxTFJWbFZWRWxNTG1kbGRFdGxlUzVoY0hCc2VTaHVkV3hzTEdZdVkyRnJaWGtwTzJFOWJtVjNJR011UTJWeWRHbG1hV05oZEdVb2UzUmljMk5sY25SdlltbzZaU3h3Y25aclpYbHZZbW82WkgwcE8yRXVjMmxuYmlncGZXbG1LR1l1YzJsbmFHVjRLWHRoUFc1bGR5QmpMa05sY25ScFptbGpZWFJsS0h0MFluTmpaWEowYjJKcU9tVjlLVHRoTG5ObGRGTnBaMjVoZEhWeVpVaGxlQ2htTG5OcFoyaGxlQ2w5Y21WMGRYSnVJR0V1WjJWMFVFVk5VM1J5YVc1bktDbDlPMXh1THlvaElHRnpiakZqYlhNdE1TNHdMakl1YW5NZ0tHTXBJREl3TVRNdE1qQXhOQ0JMWlc1cWFTQlZjblZ6YUdsdFlTQjhJR3RxZFhJdVoybDBhSFZpTG1OdmJTOXFjM0p6WVhOcFoyNHZiR2xqWlc1elpWeHVJQ292WEc1cFppaDBlWEJsYjJZZ1MwcFZVajA5WENKMWJtUmxabWx1WldSY0lueDhJVXRLVlZJcGUwdEtWVkk5ZTMxOWFXWW9kSGx3Wlc5bUlFdEtWVkl1WVhOdU1UMDlYQ0oxYm1SbFptbHVaV1JjSW54OElVdEtWVkl1WVhOdU1TbDdTMHBWVWk1aGMyNHhQWHQ5ZldsbUtIUjVjR1Z2WmlCTFNsVlNMbUZ6YmpFdVkyMXpQVDFjSW5WdVpHVm1hVzVsWkZ3aWZId2hTMHBWVWk1aGMyNHhMbU50Y3lsN1MwcFZVaTVoYzI0eExtTnRjejE3ZlgxTFNsVlNMbUZ6YmpFdVkyMXpMa0YwZEhKcFluVjBaVDFtZFc1amRHbHZiaWhpS1h0TFNsVlNMbUZ6YmpFdVkyMXpMa0YwZEhKcFluVjBaUzV6ZFhCbGNtTnNZWE56TG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5azdkbUZ5SUdFOVcxMDdkR2hwY3k1blpYUkZibU52WkdWa1NHVjRQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHWXNaU3hqTzJZOWJtVjNJRXRLVlZJdVlYTnVNUzVFUlZKUFltcGxZM1JKWkdWdWRHbG1hV1Z5S0h0dmFXUTZkR2hwY3k1aGRIUnlWSGx3WlU5cFpIMHBPMlU5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpUWlhRb2UyRnljbUY1T25Sb2FYTXVkbUZzZFdWTWFYTjBmU2s3ZEhKNWUyVXVaMlYwUlc1amIyUmxaRWhsZUNncGZXTmhkR05vS0dRcGUzUm9jbTkzWENKbVlXbHNJSFpoYkhWbFUyVjBMbWRsZEVWdVkyOWtaV1JJWlhnZ2FXNGdRWFIwY21saWRYUmxLREVwTDF3aUsyUjlZejF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVbE5sY1hWbGJtTmxLSHRoY25KaGVUcGJaaXhsWFgwcE8zUnllWHQwYUdsekxtaFVURlk5WXk1blpYUkZibU52WkdWa1NHVjRLQ2w5WTJGMFkyZ29aQ2w3ZEdoeWIzZGNJbVpoYVd4bFpDQnpaWEV1WjJWMFJXNWpiMlJsWkVobGVDQnBiaUJCZEhSeWFXSjFkR1VvTWlrdlhDSXJaSDF5WlhSMWNtNGdkR2hwY3k1b1ZFeFdmWDA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TG1OdGN5NUJkSFJ5YVdKMWRHVXNTMHBWVWk1aGMyNHhMa0ZUVGpGUFltcGxZM1FwTzB0S1ZWSXVZWE51TVM1amJYTXVRMjl1ZEdWdWRGUjVjR1U5Wm5WdVkzUnBiMjRvWWlsN1MwcFZVaTVoYzI0eExtTnRjeTVEYjI1MFpXNTBWSGx3WlM1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeWs3ZEdocGN5NWhkSFJ5Vkhsd1pVOXBaRDFjSWpFdU1pNDROREF1TVRFek5UUTVMakV1T1M0elhDSTdkbUZ5SUdFOWJuVnNiRHRwWmloMGVYQmxiMllnWWlFOVhDSjFibVJsWm1sdVpXUmNJaWw3ZG1GeUlHRTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlBZbXBsWTNSSlpHVnVkR2xtYVdWeUtHSXBPM1JvYVhNdWRtRnNkV1ZNYVhOMFBWdGhYWDE5TzFsQlNFOVBMbXhoYm1jdVpYaDBaVzVrS0V0S1ZWSXVZWE51TVM1amJYTXVRMjl1ZEdWdWRGUjVjR1VzUzBwVlVpNWhjMjR4TG1OdGN5NUJkSFJ5YVdKMWRHVXBPMHRLVlZJdVlYTnVNUzVqYlhNdVRXVnpjMkZuWlVScFoyVnpkRDFtZFc1amRHbHZiaWhsS1h0TFNsVlNMbUZ6YmpFdVkyMXpMazFsYzNOaFoyVkVhV2RsYzNRdWMzVndaWEpqYkdGemN5NWpiMjV6ZEhKMVkzUnZjaTVqWVd4c0tIUm9hWE1wTzNSb2FYTXVZWFIwY2xSNWNHVlBhV1E5WENJeExqSXVPRFF3TGpFeE16VTBPUzR4TGprdU5Gd2lPMmxtS0hSNWNHVnZaaUJsSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHRwWmlobExtVmphVTlpYWlCcGJuTjBZVzVqWlc5bUlFdEtWVkl1WVhOdU1TNWpiWE11Ulc1allYQnpkV3hoZEdWa1EyOXVkR1Z1ZEVsdVptOG1KblI1Y0dWdlppQmxMbWhoYzJoQmJHYzlQVndpYzNSeWFXNW5YQ0lwZTNaaGNpQmlQV1V1WldOcFQySnFMbVZEYjI1MFpXNTBWbUZzZFdWSVpYZzdkbUZ5SUdFOVpTNW9ZWE5vUVd4bk8zWmhjaUJqUFV0S1ZWSXVZM0o1Y0hSdkxsVjBhV3d1YUdGemFFaGxlQ2hpTEdFcE8zWmhjaUJrUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTVDJOMFpYUlRkSEpwYm1jb2UyaGxlRHBqZlNrN1pDNW5aWFJGYm1OdlpHVmtTR1Y0S0NrN2RHaHBjeTUyWVd4MVpVeHBjM1E5VzJSZGZXVnNjMlY3ZG1GeUlHUTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlBZM1JsZEZOMGNtbHVaeWhsS1R0a0xtZGxkRVZ1WTI5a1pXUklaWGdvS1R0MGFHbHpMblpoYkhWbFRHbHpkRDFiWkYxOWZYMDdXVUZJVDA4dWJHRnVaeTVsZUhSbGJtUW9TMHBWVWk1aGMyNHhMbU50Y3k1TlpYTnpZV2RsUkdsblpYTjBMRXRLVlZJdVlYTnVNUzVqYlhNdVFYUjBjbWxpZFhSbEtUdExTbFZTTG1GemJqRXVZMjF6TGxOcFoyNXBibWRVYVcxbFBXWjFibU4wYVc5dUtHTXBlMHRLVlZJdVlYTnVNUzVqYlhNdVUybG5ibWx1WjFScGJXVXVjM1Z3WlhKamJHRnpjeTVqYjI1emRISjFZM1J2Y2k1allXeHNLSFJvYVhNcE8zUm9hWE11WVhSMGNsUjVjR1ZQYVdROVhDSXhMakl1T0RRd0xqRXhNelUwT1M0eExqa3VOVndpTzJsbUtIUjVjR1Z2WmlCaklUMWNJblZ1WkdWbWFXNWxaRndpS1h0MllYSWdZVDF1WlhjZ1MwcFZVaTVoYzI0eExuZzFNRGt1VkdsdFpTaGpLVHQwY25sN1lTNW5aWFJGYm1OdlpHVmtTR1Y0S0NsOVkyRjBZMmdvWWlsN2RHaHliM2RjSWxOcFoyNXBibWRVYVcxbExtZGxkRVZ1WTI5a1pXUklaWGdvS1NCbVlXbHNaV1F2WENJclluMTBhR2x6TG5aaGJIVmxUR2x6ZEQxYllWMTlmVHRaUVVoUFR5NXNZVzVuTG1WNGRHVnVaQ2hMU2xWU0xtRnpiakV1WTIxekxsTnBaMjVwYm1kVWFXMWxMRXRLVlZJdVlYTnVNUzVqYlhNdVFYUjBjbWxpZFhSbEtUdExTbFZTTG1GemJqRXVZMjF6TGxOcFoyNXBibWREWlhKMGFXWnBZMkYwWlQxbWRXNWpkR2x2Ymloa0tYdExTbFZTTG1GemJqRXVZMjF6TGxOcFoyNXBibWREWlhKMGFXWnBZMkYwWlM1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeWs3ZEdocGN5NWhkSFJ5Vkhsd1pVOXBaRDFjSWpFdU1pNDROREF1TVRFek5UUTVMakV1T1M0eE5pNHlMakV5WENJN2RtRnlJR0U5UzBwVlVpNWhjMjR4TzNaaGNpQmpQVXRLVlZJdVlYTnVNUzVqYlhNN2RtRnlJR0k5UzBwVlVpNWpjbmx3ZEc4N2RHaHBjeTV6WlhSRFpYSjBjejFtZFc1amRHbHZiaWhzS1h0MllYSWdhajFiWFR0bWIzSW9kbUZ5SUdnOU1EdG9QR3d1YkdWdVozUm9PMmdyS3lsN2RtRnlJR1k5UzBWWlZWUkpUQzVuWlhSSVpYaEdjbTl0VUVWTktHeGJhRjBwTzNaaGNpQmxQV0l1VlhScGJDNW9ZWE5vU0dWNEtHWXNYQ0p6YUdFeFhDSXBPM1poY2lCdFBXNWxkeUJoTGtSRlVrOWpkR1YwVTNSeWFXNW5LSHRvWlhnNlpYMHBPMjB1WjJWMFJXNWpiMlJsWkVobGVDZ3BPM1poY2lCclBXNWxkeUJqTGtsemMzVmxja0Z1WkZObGNtbGhiRTUxYldKbGNpaDdZMlZ5ZERwc1cyaGRmU2s3YXk1blpYUkZibU52WkdWa1NHVjRLQ2s3ZG1GeUlHNDlibVYzSUdFdVJFVlNVMlZ4ZFdWdVkyVW9lMkZ5Y21GNU9sdHRMR3RkZlNrN2JpNW5aWFJGYm1OdlpHVmtTR1Y0S0NrN2FpNXdkWE5vS0c0cGZYWmhjaUJuUFc1bGR5QmhMa1JGVWxObGNYVmxibU5sS0h0aGNuSmhlVHBxZlNrN1p5NW5aWFJGYm1OdlpHVmtTR1Y0S0NrN2RHaHBjeTUyWVd4MVpVeHBjM1E5VzJkZGZUdHBaaWgwZVhCbGIyWWdaQ0U5WENKMWJtUmxabWx1WldSY0lpbDdhV1lvZEhsd1pXOW1JR1F1WVhKeVlYazlQVndpYjJKcVpXTjBYQ0lwZTNSb2FYTXVjMlYwUTJWeWRITW9aQzVoY25KaGVTbDlmWDA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TG1OdGN5NVRhV2R1YVc1blEyVnlkR2xtYVdOaGRHVXNTMHBWVWk1aGMyNHhMbU50Y3k1QmRIUnlhV0oxZEdVcE8wdEtWVkl1WVhOdU1TNWpiWE11VTJsbmJtbHVaME5sY25ScFptbGpZWFJsVmpJOVpuVnVZM1JwYjI0b1pTbDdTMHBWVWk1aGMyNHhMbU50Y3k1VGFXZHVhVzVuUTJWeWRHbG1hV05oZEdWV01pNXpkWEJsY21Oc1lYTnpMbU52Ym5OMGNuVmpkRzl5TG1OaGJHd29kR2hwY3lrN2RHaHBjeTVoZEhSeVZIbHdaVTlwWkQxY0lqRXVNaTQ0TkRBdU1URXpOVFE1TGpFdU9TNHhOaTR5TGpRM1hDSTdkbUZ5SUdJOVMwcFZVaTVoYzI0eE8zWmhjaUJtUFV0S1ZWSXVZWE51TVM1NE5UQTVPM1poY2lCa1BVdEtWVkl1WVhOdU1TNWpiWE03ZG1GeUlHTTlTMHBWVWk1amNubHdkRzg3ZEdocGN5NXpaWFJEWlhKMGN6MW1kVzVqZEdsdmJpaHdMR2dwZTNaaGNpQnVQVnRkTzJadmNpaDJZWElnYkQwd08ydzhjQzVzWlc1bmRHZzdiQ3NyS1h0MllYSWdhajFMUlZsVlZFbE1MbWRsZEVobGVFWnliMjFRUlUwb2NGdHNYU2s3ZG1GeUlISTlXMTA3YVdZb2FDRTlYQ0p6YUdFeU5UWmNJaWw3Y2k1d2RYTm9LRzVsZHlCbUxrRnNaMjl5YVhSb2JVbGtaVzUwYVdacFpYSW9lMjVoYldVNmFIMHBLWDEyWVhJZ1p6MWpMbFYwYVd3dWFHRnphRWhsZUNocUxHZ3BPM1poY2lCeFBXNWxkeUJpTGtSRlVrOWpkR1YwVTNSeWFXNW5LSHRvWlhnNlozMHBPM0V1WjJWMFJXNWpiMlJsWkVobGVDZ3BPM0l1Y0hWemFDaHhLVHQyWVhJZ2JUMXVaWGNnWkM1SmMzTjFaWEpCYm1SVFpYSnBZV3hPZFcxaVpYSW9lMk5sY25RNmNGdHNYWDBwTzIwdVoyVjBSVzVqYjJSbFpFaGxlQ2dwTzNJdWNIVnphQ2h0S1R0MllYSWdiejF1WlhjZ1lpNUVSVkpUWlhGMVpXNWpaU2g3WVhKeVlYazZjbjBwTzI4dVoyVjBSVzVqYjJSbFpFaGxlQ2dwTzI0dWNIVnphQ2h2S1gxMllYSWdhejF1WlhjZ1lpNUVSVkpUWlhGMVpXNWpaU2g3WVhKeVlYazZibjBwTzJzdVoyVjBSVzVqYjJSbFpFaGxlQ2dwTzNSb2FYTXVkbUZzZFdWTWFYTjBQVnRyWFgwN2FXWW9kSGx3Wlc5bUlHVWhQVndpZFc1a1pXWnBibVZrWENJcGUybG1LSFI1Y0dWdlppQmxMbUZ5Y21GNVBUMWNJbTlpYW1WamRGd2lLWHQyWVhJZ1lUMWNJbk5vWVRJMU5sd2lPMmxtS0hSNWNHVnZaaUJsTG1oaGMyaEJiR2M5UFZ3aWMzUnlhVzVuWENJcGUyRTlaUzVvWVhOb1FXeG5mWFJvYVhNdWMyVjBRMlZ5ZEhNb1pTNWhjbkpoZVN4aEtYMTlmVHRaUVVoUFR5NXNZVzVuTG1WNGRHVnVaQ2hMU2xWU0xtRnpiakV1WTIxekxsTnBaMjVwYm1kRFpYSjBhV1pwWTJGMFpWWXlMRXRLVlZJdVlYTnVNUzVqYlhNdVFYUjBjbWxpZFhSbEtUdExTbFZTTG1GemJqRXVZMjF6TGtsemMzVmxja0Z1WkZObGNtbGhiRTUxYldKbGNqMW1kVzVqZEdsdmJpaGpLWHRMU2xWU0xtRnpiakV1WTIxekxrbHpjM1ZsY2tGdVpGTmxjbWxoYkU1MWJXSmxjaTV6ZFhCbGNtTnNZWE56TG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5azdkbUZ5SUdVOWJuVnNiRHQyWVhJZ1lqMXVkV3hzTzNaaGNpQmhQVXRLVlZJdVlYTnVNVHQyWVhJZ1pEMWhMbmcxTURrN2RHaHBjeTV6WlhSQ2VVTmxjblJRUlUwOVpuVnVZM1JwYjI0b2FTbDdkbUZ5SUdjOVMwVlpWVlJKVEM1blpYUklaWGhHY205dFVFVk5LR2twTzNaaGNpQm1QVzVsZHlCWU5UQTVLQ2s3Wmk1b1pYZzlaenQyWVhJZ2FqMW1MbWRsZEVsemMzVmxja2hsZUNncE8zUm9hWE11WkVsemMzVmxjajF1WlhjZ1pDNVlOVEF3VG1GdFpTZ3BPM1JvYVhNdVpFbHpjM1ZsY2k1b1ZFeFdQV283ZG1GeUlHZzlaaTVuWlhSVFpYSnBZV3hPZFcxaVpYSklaWGdvS1R0MGFHbHpMbVJUWlhKcFlXdzlibVYzSUdFdVJFVlNTVzUwWldkbGNpaDdhR1Y0T21oOUtYMDdkR2hwY3k1blpYUkZibU52WkdWa1NHVjRQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHWTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlRaWEYxWlc1alpTaDdZWEp5WVhrNlczUm9hWE11WkVsemMzVmxjaXgwYUdsekxtUlRaWEpwWVd4ZGZTazdkR2hwY3k1b1ZFeFdQV1l1WjJWMFJXNWpiMlJsWkVobGVDZ3BPM0psZEhWeWJpQjBhR2x6TG1oVVRGWjlPMmxtS0hSNWNHVnZaaUJqSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHRwWmloMGVYQmxiMllnWXowOVhDSnpkSEpwYm1kY0lpWW1ZeTVwYm1SbGVFOW1LRndpTFMwdExTMUNSVWRKVGlCY0lpa2hQUzB4S1h0MGFHbHpMbk5sZEVKNVEyVnlkRkJGVFNoaktYMXBaaWhqTG1semMzVmxjaVltWXk1elpYSnBZV3dwZTJsbUtHTXVhWE56ZFdWeUlHbHVjM1JoYm1ObGIyWWdTMHBWVWk1aGMyNHhMbmcxTURrdVdEVXdNRTVoYldVcGUzUm9hWE11WkVsemMzVmxjajFqTG1semMzVmxjbjFsYkhObGUzUm9hWE11WkVsemMzVmxjajF1WlhjZ1MwcFZVaTVoYzI0eExuZzFNRGt1V0RVd01FNWhiV1VvWXk1cGMzTjFaWElwZldsbUtHTXVjMlZ5YVdGc0lHbHVjM1JoYm1ObGIyWWdTMHBWVWk1aGMyNHhMa1JGVWtsdWRHVm5aWElwZTNSb2FYTXVaRk5sY21saGJEMWpMbk5sY21saGJIMWxiSE5sZTNSb2FYTXVaRk5sY21saGJEMXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVrbHVkR1ZuWlhJb1l5NXpaWEpwWVd3cGZYMXBaaWgwZVhCbGIyWWdZeTVqWlhKMFBUMWNJbk4wY21sdVoxd2lLWHQwYUdsekxuTmxkRUo1UTJWeWRGQkZUU2hqTG1ObGNuUXBmWDE5TzFsQlNFOVBMbXhoYm1jdVpYaDBaVzVrS0V0S1ZWSXVZWE51TVM1amJYTXVTWE56ZFdWeVFXNWtVMlZ5YVdGc1RuVnRZbVZ5TEV0S1ZWSXVZWE51TVM1QlUwNHhUMkpxWldOMEtUdExTbFZTTG1GemJqRXVZMjF6TGtGMGRISnBZblYwWlV4cGMzUTlablZ1WTNScGIyNG9ZU2w3UzBwVlVpNWhjMjR4TG1OdGN5NUJkSFJ5YVdKMWRHVk1hWE4wTG5OMWNHVnlZMnhoYzNNdVkyOXVjM1J5ZFdOMGIzSXVZMkZzYkNoMGFHbHpLVHQwYUdsekxteHBjM1E5Ym1WM0lFRnljbUY1S0NrN2RHaHBjeTV6YjNKMFJteGhaejEwY25WbE8zUm9hWE11WVdSa1BXWjFibU4wYVc5dUtHSXBlMmxtS0dJZ2FXNXpkR0Z1WTJWdlppQkxTbFZTTG1GemJqRXVZMjF6TGtGMGRISnBZblYwWlNsN2RHaHBjeTVzYVhOMExuQjFjMmdvWWlsOWZUdDBhR2x6TG14bGJtZDBhRDFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsekxteHBjM1F1YkdWdVozUm9mVHQwYUdsekxtTnNaV0Z5UFdaMWJtTjBhVzl1S0NsN2RHaHBjeTVzYVhOMFBXNWxkeUJCY25KaGVTZ3BPM1JvYVhNdWFGUk1WajF1ZFd4c08zUm9hWE11YUZZOWJuVnNiSDA3ZEdocGN5NW5aWFJGYm1OdlpHVmtTR1Y0UFdaMWJtTjBhVzl1S0NsN2FXWW9kSGx3Wlc5bUlIUm9hWE11YUZSTVZqMDlYQ0p6ZEhKcGJtZGNJaWw3Y21WMGRYSnVJSFJvYVhNdWFGUk1WbjEyWVhJZ1lqMXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVsTmxkQ2g3WVhKeVlYazZkR2hwY3k1c2FYTjBMSE52Y25SbWJHRm5PblJvYVhNdWMyOXlkRVpzWVdkOUtUdDBhR2x6TG1oVVRGWTlZaTVuWlhSRmJtTnZaR1ZrU0dWNEtDazdjbVYwZFhKdUlIUm9hWE11YUZSTVZuMDdhV1lvZEhsd1pXOW1JR0VoUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlMmxtS0hSNWNHVnZaaUJoTG5OdmNuUm1iR0ZuSVQxY0luVnVaR1ZtYVc1bFpGd2lKaVpoTG5OdmNuUm1iR0ZuUFQxbVlXeHpaU2w3ZEdocGN5NXpiM0owUm14aFp6MW1ZV3h6WlgxOWZUdFpRVWhQVHk1c1lXNW5MbVY0ZEdWdVpDaExTbFZTTG1GemJqRXVZMjF6TGtGMGRISnBZblYwWlV4cGMzUXNTMHBWVWk1aGMyNHhMa0ZUVGpGUFltcGxZM1FwTzB0S1ZWSXVZWE51TVM1amJYTXVVMmxuYm1WeVNXNW1iejFtZFc1amRHbHZiaWhqS1h0TFNsVlNMbUZ6YmpFdVkyMXpMbE5wWjI1bGNrbHVabTh1YzNWd1pYSmpiR0Z6Y3k1amIyNXpkSEoxWTNSdmNpNWpZV3hzS0hSb2FYTXBPM1poY2lCaFBVdEtWVkl1WVhOdU1UdDJZWElnWWoxTFNsVlNMbUZ6YmpFdVkyMXpPM1poY2lCa1BVdEtWVkl1WVhOdU1TNTROVEE1TzNSb2FYTXVaRU5OVTFabGNuTnBiMjQ5Ym1WM0lHRXVSRVZTU1c1MFpXZGxjaWg3WENKcGJuUmNJam94ZlNrN2RHaHBjeTVrVTJsbmJtVnlTV1JsYm5ScFptbGxjajF1ZFd4c08zUm9hWE11WkVScFoyVnpkRUZzWjI5eWFYUm9iVDF1ZFd4c08zUm9hWE11WkZOcFoyNWxaRUYwZEhKelBXNWxkeUJpTGtGMGRISnBZblYwWlV4cGMzUW9LVHQwYUdsekxtUlRhV2RCYkdjOWJuVnNiRHQwYUdsekxtUlRhV2M5Ym5Wc2JEdDBhR2x6TG1SVmJuTnBaMjVsWkVGMGRISnpQVzVsZHlCaUxrRjBkSEpwWW5WMFpVeHBjM1FvS1R0MGFHbHpMbk5sZEZOcFoyNWxja2xrWlc1MGFXWnBaWEk5Wm5WdVkzUnBiMjRvWmlsN2FXWW9kSGx3Wlc5bUlHWTlQVndpYzNSeWFXNW5YQ0ltSm1ZdWFXNWtaWGhQWmloY0lrTkZVbFJKUmtsRFFWUkZYQ0lwSVQwdE1TWW1aaTVwYm1SbGVFOW1LRndpUWtWSFNVNWNJaWtoUFMweEppWm1MbWx1WkdWNFQyWW9YQ0pGVGtSY0lpa2hQUzB4S1h0MllYSWdaVDFtTzNSb2FYTXVaRk5wWjI1bGNrbGtaVzUwYVdacFpYSTlibVYzSUdJdVNYTnpkV1Z5UVc1a1UyVnlhV0ZzVG5WdFltVnlLSHRqWlhKME9tWjlLWDE5TzNSb2FYTXVjMlYwUm05eVEyOXVkR1Z1ZEVGdVpFaGhjMmc5Wm5WdVkzUnBiMjRvWlNsN2FXWW9kSGx3Wlc5bUlHVWhQVndpZFc1a1pXWnBibVZrWENJcGUybG1LR1V1WldOcFQySnFJR2x1YzNSaGJtTmxiMllnUzBwVlVpNWhjMjR4TG1OdGN5NUZibU5oY0hOMWJHRjBaV1JEYjI1MFpXNTBTVzVtYnlsN2RHaHBjeTVrVTJsbmJtVmtRWFIwY25NdVlXUmtLRzVsZHlCaUxrTnZiblJsYm5SVWVYQmxLSHR2YVdRNlhDSXhMakl1T0RRd0xqRXhNelUwT1M0eExqY3VNVndpZlNrcE8zUm9hWE11WkZOcFoyNWxaRUYwZEhKekxtRmtaQ2h1WlhjZ1lpNU5aWE56WVdkbFJHbG5aWE4wS0h0bFkybFBZbW82WlM1bFkybFBZbW9zYUdGemFFRnNaenBsTG1oaGMyaEJiR2Q5S1NsOWFXWW9kSGx3Wlc5bUlHVXVjMlJQWW1vaFBWd2lkVzVrWldacGJtVmtYQ0ltSm1VdWMyUlBZbW9nYVc1emRHRnVZMlZ2WmlCTFNsVlNMbUZ6YmpFdVkyMXpMbE5wWjI1bFpFUmhkR0VwZTJsbUtHVXVjMlJQWW1vdVpHbG5aWE4wUVd4blRtRnRaVXhwYzNRdWFtOXBiaWhjSWpwY0lpa3VhVzVrWlhoUFppaGxMbWhoYzJoQmJHY3BQVDB0TVNsN1pTNXpaRTlpYWk1a2FXZGxjM1JCYkdkT1lXMWxUR2x6ZEM1d2RYTm9LR1V1YUdGemFFRnNaeWw5ZldsbUtIUjVjR1Z2WmlCbExtaGhjMmhCYkdjOVBWd2ljM1J5YVc1blhDSXBlM1JvYVhNdVpFUnBaMlZ6ZEVGc1oyOXlhWFJvYlQxdVpYY2daQzVCYkdkdmNtbDBhRzFKWkdWdWRHbG1hV1Z5S0h0dVlXMWxPbVV1YUdGemFFRnNaMzBwZlgxOU8zUm9hWE11YzJsbmJqMW1kVzVqZEdsdmJpaHFMR1lwZTNSb2FYTXVaRk5wWjBGc1p6MXVaWGNnWkM1QmJHZHZjbWwwYUcxSlpHVnVkR2xtYVdWeUtIdHVZVzFsT21aOUtUdDJZWElnWnoxMGFHbHpMbVJUYVdkdVpXUkJkSFJ5Y3k1blpYUkZibU52WkdWa1NHVjRLQ2s3ZG1GeUlHVTlTMFZaVlZSSlRDNW5aWFJMWlhrb2FpazdkbUZ5SUdrOWJtVjNJRXRLVlZJdVkzSjVjSFJ2TGxOcFoyNWhkSFZ5WlNoN1lXeG5PbVo5S1R0cExtbHVhWFFvWlNrN2FTNTFjR1JoZEdWSVpYZ29aeWs3ZG1GeUlHZzlhUzV6YVdkdUtDazdkR2hwY3k1a1UybG5QVzVsZHlCaExrUkZVazlqZEdWMFUzUnlhVzVuS0h0b1pYZzZhSDBwZlR0MGFHbHpMbUZrWkZWdWMybG5ibVZrUFdaMWJtTjBhVzl1S0dVcGUzUm9hWE11YUZSTVZqMXVkV3hzTzNSb2FYTXVaRlZ1YzJsbmJtVmtRWFIwY25NdWFGUk1WajF1ZFd4c08zUm9hWE11WkZWdWMybG5ibVZrUVhSMGNuTXVZV1JrS0dVcGZUdDBhR2x6TG1kbGRFVnVZMjlrWldSSVpYZzlablZ1WTNScGIyNG9LWHRwWmloMGFHbHpMbVJUYVdkdVpXUkJkSFJ5Y3lCcGJuTjBZVzVqWlc5bUlFdEtWVkl1WVhOdU1TNWpiWE11UVhSMGNtbGlkWFJsVEdsemRDWW1kR2hwY3k1a1UybG5ibVZrUVhSMGNuTXViR1Z1WjNSb0tDazlQVEFwZTNSb2NtOTNYQ0pUYVdkdVpXUkJkSFJ5Y3lCc1pXNW5kR2dnUFNBd0lDaGxiWEIwZVNsY0luMTJZWElnWlQxdVpYY2dZUzVFUlZKVVlXZG5aV1JQWW1wbFkzUW9lMjlpYWpwMGFHbHpMbVJUYVdkdVpXUkJkSFJ5Y3l4MFlXYzZYQ0poTUZ3aUxHVjRjR3hwWTJsME9tWmhiSE5sZlNrN2RtRnlJR2c5Ym5Wc2JEdHBaaWgwYUdsekxtUlZibk5wWjI1bFpFRjBkSEp6TG14bGJtZDBhQ2dwUGpBcGUyZzlibVYzSUdFdVJFVlNWR0ZuWjJWa1QySnFaV04wS0h0dlltbzZkR2hwY3k1a1ZXNXphV2R1WldSQmRIUnljeXgwWVdjNlhDSmhNVndpTEdWNGNHeHBZMmwwT21aaGJITmxmU2w5ZG1GeUlHYzlXM1JvYVhNdVpFTk5VMVpsY25OcGIyNHNkR2hwY3k1a1UybG5ibVZ5U1dSbGJuUnBabWxsY2l4MGFHbHpMbVJFYVdkbGMzUkJiR2R2Y21sMGFHMHNaU3gwYUdsekxtUlRhV2RCYkdjc2RHaHBjeTVrVTJsbkxGMDdhV1lvYUNFOWJuVnNiQ2w3Wnk1d2RYTm9LR2dwZlhaaGNpQm1QVzVsZHlCaExrUkZVbE5sY1hWbGJtTmxLSHRoY25KaGVUcG5mU2s3ZEdocGN5NW9WRXhXUFdZdVoyVjBSVzVqYjJSbFpFaGxlQ2dwTzNKbGRIVnliaUIwYUdsekxtaFVURlo5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdVkyMXpMbE5wWjI1bGNrbHVabThzUzBwVlVpNWhjMjR4TGtGVFRqRlBZbXBsWTNRcE8wdEtWVkl1WVhOdU1TNWpiWE11Ulc1allYQnpkV3hoZEdWa1EyOXVkR1Z1ZEVsdVptODlablZ1WTNScGIyNG9ZeWw3UzBwVlVpNWhjMjR4TG1OdGN5NUZibU5oY0hOMWJHRjBaV1JEYjI1MFpXNTBTVzVtYnk1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeWs3ZG1GeUlHRTlTMHBWVWk1aGMyNHhPM1poY2lCaVBVdEtWVkl1WVhOdU1TNWpiWE03ZG1GeUlHUTlTMHBWVWk1aGMyNHhMbmcxTURrN2RHaHBjeTVrUlVOdmJuUmxiblJVZVhCbFBXNWxkeUJoTGtSRlVrOWlhbVZqZEVsa1pXNTBhV1pwWlhJb2UyNWhiV1U2WENKa1lYUmhYQ0o5S1R0MGFHbHpMbVJGUTI5dWRHVnVkRDF1ZFd4c08zUm9hWE11YVhORVpYUmhZMmhsWkQxbVlXeHpaVHQwYUdsekxtVkRiMjUwWlc1MFZtRnNkV1ZJWlhnOWJuVnNiRHQwYUdsekxuTmxkRU52Ym5SbGJuUlVlWEJsUFdaMWJtTjBhVzl1S0dVcGUybG1LR1V1YldGMFkyZ29MMTViTUMweVhWc3VYVnN3TFRrdVhTc2tMeWtwZTNSb2FYTXVaRVZEYjI1MFpXNTBWSGx3WlQxdVpYY2dZUzVFUlZKUFltcGxZM1JKWkdWdWRHbG1hV1Z5S0h0dmFXUTZaWDBwZldWc2MyVjdkR2hwY3k1a1JVTnZiblJsYm5SVWVYQmxQVzVsZHlCaExrUkZVazlpYW1WamRFbGtaVzUwYVdacFpYSW9lMjVoYldVNlpYMHBmWDA3ZEdocGN5NXpaWFJEYjI1MFpXNTBWbUZzZFdVOVpuVnVZM1JwYjI0b1pTbDdhV1lvZEhsd1pXOW1JR1VoUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlMmxtS0hSNWNHVnZaaUJsTG1obGVEMDlYQ0p6ZEhKcGJtZGNJaWw3ZEdocGN5NWxRMjl1ZEdWdWRGWmhiSFZsU0dWNFBXVXVhR1Y0ZldWc2MyVjdhV1lvZEhsd1pXOW1JR1V1YzNSeVBUMWNJbk4wY21sdVoxd2lLWHQwYUdsekxtVkRiMjUwWlc1MFZtRnNkV1ZJWlhnOWRYUm1PSFJ2YUdWNEtHVXVjM1J5S1gxOWZYMDdkR2hwY3k1elpYUkRiMjUwWlc1MFZtRnNkV1ZJWlhnOVpuVnVZM1JwYjI0b1pTbDdkR2hwY3k1bFEyOXVkR1Z1ZEZaaGJIVmxTR1Y0UFdWOU8zUm9hWE11YzJWMFEyOXVkR1Z1ZEZaaGJIVmxVM1J5UFdaMWJtTjBhVzl1S0dVcGUzUm9hWE11WlVOdmJuUmxiblJXWVd4MVpVaGxlRDExZEdZNGRHOW9aWGdvWlNsOU8zUm9hWE11WjJWMFJXNWpiMlJsWkVobGVEMW1kVzVqZEdsdmJpZ3BlMmxtS0hSNWNHVnZaaUIwYUdsekxtVkRiMjUwWlc1MFZtRnNkV1ZJWlhnaFBWd2ljM1J5YVc1blhDSXBlM1JvY205M1hDSmxRMjl1ZEdWdWRGWmhiSFZsSUc1dmRDQjVaWFFnYzJWMFhDSjlkbUZ5SUdjOWJtVjNJR0V1UkVWU1QyTjBaWFJUZEhKcGJtY29lMmhsZURwMGFHbHpMbVZEYjI1MFpXNTBWbUZzZFdWSVpYaDlLVHQwYUdsekxtUkZRMjl1ZEdWdWREMXVaWGNnWVM1RVJWSlVZV2RuWldSUFltcGxZM1FvZTI5aWFqcG5MSFJoWnpwY0ltRXdYQ0lzWlhod2JHbGphWFE2ZEhKMVpYMHBPM1poY2lCbFBWdDBhR2x6TG1SRlEyOXVkR1Z1ZEZSNWNHVmRPMmxtS0NGMGFHbHpMbWx6UkdWMFlXTm9aV1FwZTJVdWNIVnphQ2gwYUdsekxtUkZRMjl1ZEdWdWRDbDlkbUZ5SUdZOWJtVjNJR0V1UkVWU1UyVnhkV1Z1WTJVb2UyRnljbUY1T21WOUtUdDBhR2x6TG1oVVRGWTlaaTVuWlhSRmJtTnZaR1ZrU0dWNEtDazdjbVYwZFhKdUlIUm9hWE11YUZSTVZuMTlPMWxCU0U5UExteGhibWN1WlhoMFpXNWtLRXRLVlZJdVlYTnVNUzVqYlhNdVJXNWpZWEJ6ZFd4aGRHVmtRMjl1ZEdWdWRFbHVabThzUzBwVlVpNWhjMjR4TGtGVFRqRlBZbXBsWTNRcE8wdEtWVkl1WVhOdU1TNWpiWE11UTI5dWRHVnVkRWx1Wm04OVpuVnVZM1JwYjI0b1l5bDdTMHBWVWk1aGMyNHhMbU50Y3k1RGIyNTBaVzUwU1c1bWJ5NXpkWEJsY21Oc1lYTnpMbU52Ym5OMGNuVmpkRzl5TG1OaGJHd29kR2hwY3lrN2RtRnlJR0U5UzBwVlVpNWhjMjR4TzNaaGNpQmlQVXRLVlZJdVlYTnVNUzVqYlhNN2RtRnlJR1E5UzBwVlVpNWhjMjR4TG5nMU1EazdkR2hwY3k1a1EyOXVkR1Z1ZEZSNWNHVTliblZzYkR0MGFHbHpMbVJEYjI1MFpXNTBQVzUxYkd3N2RHaHBjeTV6WlhSRGIyNTBaVzUwVkhsd1pUMW1kVzVqZEdsdmJpaGxLWHRwWmloMGVYQmxiMllnWlQwOVhDSnpkSEpwYm1kY0lpbDdkR2hwY3k1a1EyOXVkR1Z1ZEZSNWNHVTlaQzVQU1VRdWJtRnRaVEp2WW1vb1pTbDlmVHQwYUdsekxtZGxkRVZ1WTI5a1pXUklaWGc5Wm5WdVkzUnBiMjRvS1h0MllYSWdaajF1WlhjZ1lTNUVSVkpVWVdkblpXUlBZbXBsWTNRb2UyOWlhanAwYUdsekxtUkRiMjUwWlc1MExIUmhaenBjSW1Fd1hDSXNaWGh3YkdsamFYUTZkSEoxWlgwcE8zWmhjaUJsUFc1bGR5QmhMa1JGVWxObGNYVmxibU5sS0h0aGNuSmhlVHBiZEdocGN5NWtRMjl1ZEdWdWRGUjVjR1VzWmwxOUtUdDBhR2x6TG1oVVRGWTlaUzVuWlhSRmJtTnZaR1ZrU0dWNEtDazdjbVYwZFhKdUlIUm9hWE11YUZSTVZuMDdhV1lvZEhsd1pXOW1JR01oUFZ3aWRXNWtaV1pwYm1Wa1hDSXBlMmxtS0dNdWRIbHdaU2w3ZEdocGN5NXpaWFJEYjI1MFpXNTBWSGx3WlNoakxuUjVjR1VwZldsbUtHTXViMkpxSmlaakxtOWlhaUJwYm5OMFlXNWpaVzltSUdFdVFWTk9NVTlpYW1WamRDbDdkR2hwY3k1a1EyOXVkR1Z1ZEQxakxtOWlhbjE5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdVkyMXpMa052Ym5SbGJuUkpibVp2TEV0S1ZWSXVZWE51TVM1QlUwNHhUMkpxWldOMEtUdExTbFZTTG1GemJqRXVZMjF6TGxOcFoyNWxaRVJoZEdFOVpuVnVZM1JwYjI0b1l5bDdTMHBWVWk1aGMyNHhMbU50Y3k1VGFXZHVaV1JFWVhSaExuTjFjR1Z5WTJ4aGMzTXVZMjl1YzNSeWRXTjBiM0l1WTJGc2JDaDBhR2x6S1R0MllYSWdZVDFMU2xWU0xtRnpiakU3ZG1GeUlHSTlTMHBWVWk1aGMyNHhMbU50Y3p0MllYSWdaRDFMU2xWU0xtRnpiakV1ZURVd09UdDBhR2x6TG1SRFRWTldaWEp6YVc5dVBXNWxkeUJoTGtSRlVrbHVkR1ZuWlhJb2Uxd2lhVzUwWENJNk1YMHBPM1JvYVhNdVpFUnBaMlZ6ZEVGc1ozTTliblZzYkR0MGFHbHpMbVJwWjJWemRFRnNaMDVoYldWTWFYTjBQVnRkTzNSb2FYTXVaRVZ1WTJGd1EyOXVkR1Z1ZEVsdVptODlibVYzSUdJdVJXNWpZWEJ6ZFd4aGRHVmtRMjl1ZEdWdWRFbHVabThvS1R0MGFHbHpMbVJEWlhKMGN6MXVkV3hzTzNSb2FYTXVZMlZ5ZEdsbWFXTmhkR1ZNYVhOMFBWdGRPM1JvYVhNdVkzSnNUR2x6ZEQxYlhUdDBhR2x6TG5OcFoyNWxja2x1Wm05TWFYTjBQVnR1WlhjZ1lpNVRhV2R1WlhKSmJtWnZLQ2xkTzNSb2FYTXVZV1JrUTJWeWRHbG1hV05oZEdWelFubFFSVTA5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJR1k5UzBWWlZWUkpUQzVuWlhSSVpYaEdjbTl0VUVWTktHVXBPM1poY2lCblBXNWxkeUJoTGtGVFRqRlBZbXBsWTNRb0tUdG5MbWhVVEZZOVpqdDBhR2x6TG1ObGNuUnBabWxqWVhSbFRHbHpkQzV3ZFhOb0tHY3BmVHQwYUdsekxtZGxkRVZ1WTI5a1pXUklaWGc5Wm5WdVkzUnBiMjRvS1h0cFppaDBlWEJsYjJZZ2RHaHBjeTVvVkV4V1BUMWNJbk4wY21sdVoxd2lLWHR5WlhSMWNtNGdkR2hwY3k1b1ZFeFdmV2xtS0hSb2FYTXVaRVJwWjJWemRFRnNaM005UFc1MWJHd3BlM1poY2lCclBWdGRPMlp2Y2loMllYSWdhajB3TzJvOGRHaHBjeTVrYVdkbGMzUkJiR2RPWVcxbFRHbHpkQzVzWlc1bmRHZzdhaXNyS1h0MllYSWdhRDEwYUdsekxtUnBaMlZ6ZEVGc1owNWhiV1ZNYVhOMFcycGRPM1poY2lCdFBXNWxkeUJrTGtGc1oyOXlhWFJvYlVsa1pXNTBhV1pwWlhJb2UyNWhiV1U2YUgwcE8yc3VjSFZ6YUNodEtYMTBhR2x6TG1SRWFXZGxjM1JCYkdkelBXNWxkeUJoTGtSRlVsTmxkQ2g3WVhKeVlYazZhMzBwZlhaaGNpQmxQVnQwYUdsekxtUkRUVk5XWlhKemFXOXVMSFJvYVhNdVpFUnBaMlZ6ZEVGc1ozTXNkR2hwY3k1a1JXNWpZWEJEYjI1MFpXNTBTVzVtYjEwN2FXWW9kR2hwY3k1a1EyVnlkSE05UFc1MWJHd3BlMmxtS0hSb2FYTXVZMlZ5ZEdsbWFXTmhkR1ZNYVhOMExteGxibWQwYUQ0d0tYdDJZWElnYkQxdVpYY2dZUzVFUlZKVFpYUW9lMkZ5Y21GNU9uUm9hWE11WTJWeWRHbG1hV05oZEdWTWFYTjBmU2s3ZEdocGN5NWtRMlZ5ZEhNOWJtVjNJR0V1UkVWU1ZHRm5aMlZrVDJKcVpXTjBLSHR2WW1vNmJDeDBZV2M2WENKaE1Gd2lMR1Y0Y0d4cFkybDBPbVpoYkhObGZTbDlmV2xtS0hSb2FYTXVaRU5sY25SeklUMXVkV3hzS1h0bExuQjFjMmdvZEdocGN5NWtRMlZ5ZEhNcGZYWmhjaUJuUFc1bGR5QmhMa1JGVWxObGRDaDdZWEp5WVhrNmRHaHBjeTV6YVdkdVpYSkpibVp2VEdsemRIMHBPMlV1Y0hWemFDaG5LVHQyWVhJZ1pqMXVaWGNnWVM1RVJWSlRaWEYxWlc1alpTaDdZWEp5WVhrNlpYMHBPM1JvYVhNdWFGUk1WajFtTG1kbGRFVnVZMjlrWldSSVpYZ29LVHR5WlhSMWNtNGdkR2hwY3k1b1ZFeFdmVHQwYUdsekxtZGxkRU52Ym5SbGJuUkpibVp2UFdaMWJtTjBhVzl1S0NsN2RHaHBjeTVuWlhSRmJtTnZaR1ZrU0dWNEtDazdkbUZ5SUdVOWJtVjNJR0l1UTI5dWRHVnVkRWx1Wm04b2UzUjVjR1U2WENKemFXZHVaV1F0WkdGMFlWd2lMRzlpYWpwMGFHbHpmU2s3Y21WMGRYSnVJR1Y5TzNSb2FYTXVaMlYwUTI5dWRHVnVkRWx1Wm05RmJtTnZaR1ZrU0dWNFBXWjFibU4wYVc5dUtDbDdkbUZ5SUdVOWRHaHBjeTVuWlhSRGIyNTBaVzUwU1c1bWJ5Z3BPM1poY2lCbVBXVXVaMlYwUlc1amIyUmxaRWhsZUNncE8zSmxkSFZ5YmlCbWZUdDBhR2x6TG1kbGRGQkZUVDFtZFc1amRHbHZiaWdwZTNaaGNpQmxQWFJvYVhNdVoyVjBRMjl1ZEdWdWRFbHVabTlGYm1OdlpHVmtTR1Y0S0NrN2RtRnlJR1k5WVM1QlUwNHhWWFJwYkM1blpYUlFSVTFUZEhKcGJtZEdjbTl0U0dWNEtHVXNYQ0pEVFZOY0lpazdjbVYwZFhKdUlHWjlmVHRaUVVoUFR5NXNZVzVuTG1WNGRHVnVaQ2hMU2xWU0xtRnpiakV1WTIxekxsTnBaMjVsWkVSaGRHRXNTMHBWVWk1aGMyNHhMa0ZUVGpGUFltcGxZM1FwTzB0S1ZWSXVZWE51TVM1amJYTXVRMDFUVlhScGJEMXVaWGNnWm5WdVkzUnBiMjRvS1h0OU8wdEtWVkl1WVhOdU1TNWpiWE11UTAxVFZYUnBiQzV1WlhkVGFXZHVaV1JFWVhSaFBXWjFibU4wYVc5dUtHRXBlM1poY2lCb1BVdEtWVkl1WVhOdU1TNWpiWE03ZG1GeUlHYzlTMHBWVWk1aGMyNHhMbU5oWkdWek8zWmhjaUJtUFc1bGR5Qm9MbE5wWjI1bFpFUmhkR0VvS1R0bUxtUkZibU5oY0VOdmJuUmxiblJKYm1adkxuTmxkRU52Ym5SbGJuUldZV3gxWlNoaExtTnZiblJsYm5RcE8ybG1LSFI1Y0dWdlppQmhMbU5sY25SelBUMWNJbTlpYW1WamRGd2lLWHRtYjNJb2RtRnlJR0k5TUR0aVBHRXVZMlZ5ZEhNdWJHVnVaM1JvTzJJckt5bDdaaTVoWkdSRFpYSjBhV1pwWTJGMFpYTkNlVkJGVFNoaExtTmxjblJ6VzJKZEtYMTlaaTV6YVdkdVpYSkpibVp2VEdsemREMWJYVHRtYjNJb2RtRnlJR0k5TUR0aVBHRXVjMmxuYm1WeVNXNW1iM011YkdWdVozUm9PMklyS3lsN2RtRnlJR1E5WVM1emFXZHVaWEpKYm1admMxdGlYVHQyWVhJZ1l6MXVaWGNnYUM1VGFXZHVaWEpKYm1adktDazdZeTV6WlhSVGFXZHVaWEpKWkdWdWRHbG1hV1Z5S0dRdWMybG5ibVZ5UTJWeWRDazdZeTV6WlhSR2IzSkRiMjUwWlc1MFFXNWtTR0Z6YUNoN2MyUlBZbW82Wml4bFkybFBZbW82Wmk1a1JXNWpZWEJEYjI1MFpXNTBTVzVtYnl4b1lYTm9RV3huT21RdWFHRnphRUZzWjMwcE8yWnZjaWhoZEhSeVRtRnRaU0JwYmlCa0xuTkJkSFJ5S1h0MllYSWdhajFrTG5OQmRIUnlXMkYwZEhKT1lXMWxYVHRwWmloaGRIUnlUbUZ0WlQwOVhDSlRhV2R1YVc1blZHbHRaVndpS1h0MllYSWdaVDF1WlhjZ2FDNVRhV2R1YVc1blZHbHRaU2hxS1R0akxtUlRhV2R1WldSQmRIUnljeTVoWkdRb1pTbDlhV1lvWVhSMGNrNWhiV1U5UFZ3aVUybG5ibWx1WjBObGNuUnBabWxqWVhSbFhDSXBlM1poY2lCbFBXNWxkeUJvTGxOcFoyNXBibWREWlhKMGFXWnBZMkYwWlNocUtUdGpMbVJUYVdkdVpXUkJkSFJ5Y3k1aFpHUW9aU2w5YVdZb1lYUjBjazVoYldVOVBWd2lVMmxuYm1sdVowTmxjblJwWm1sallYUmxWakpjSWlsN2RtRnlJR1U5Ym1WM0lHZ3VVMmxuYm1sdVowTmxjblJwWm1sallYUmxWaklvYWlrN1l5NWtVMmxuYm1Wa1FYUjBjbk11WVdSa0tHVXBmV2xtS0dGMGRISk9ZVzFsUFQxY0lsTnBaMjVoZEhWeVpWQnZiR2xqZVVsa1pXNTBhV1pwWlhKY0lpbDdkbUZ5SUdVOWJtVjNJR2N1VTJsbmJtRjBkWEpsVUc5c2FXTjVTV1JsYm5ScFptbGxjaWhxS1R0akxtUlRhV2R1WldSQmRIUnljeTVoWkdRb1pTbDlmV011YzJsbmJpaGtMbk5wWjI1bGNsQnlka3RsZVN4a0xuTnBaMEZzWnlrN1ppNXphV2R1WlhKSmJtWnZUR2x6ZEM1d2RYTm9LR01wZlhKbGRIVnliaUJtZlR0Y2JpOHFJU0JoYzI0eGRITndMVEV1TUM0eExtcHpJQ2hqS1NBeU1ERTBJRXRsYm1wcElGVnlkWE5vYVcxaElId2dhMnAxY2k1bmFYUm9kV0l1WTI5dEwycHpjbk5oYzJsbmJpOXNhV05sYm5ObFhHNGdLaTljYm1sbUtIUjVjR1Z2WmlCTFNsVlNQVDFjSW5WdVpHVm1hVzVsWkZ3aWZId2hTMHBWVWlsN1MwcFZVajE3ZlgxcFppaDBlWEJsYjJZZ1MwcFZVaTVoYzI0eFBUMWNJblZ1WkdWbWFXNWxaRndpZkh3aFMwcFZVaTVoYzI0eEtYdExTbFZTTG1GemJqRTllMzE5YVdZb2RIbHdaVzltSUV0S1ZWSXVZWE51TVM1MGMzQTlQVndpZFc1a1pXWnBibVZrWENKOGZDRkxTbFZTTG1GemJqRXVkSE53S1h0TFNsVlNMbUZ6YmpFdWRITndQWHQ5ZlV0S1ZWSXVZWE51TVM1MGMzQXVRV05qZFhKaFkzazlablZ1WTNScGIyNG9ZaWw3UzBwVlVpNWhjMjR4TG5SemNDNUJZMk4xY21GamVTNXpkWEJsY21Oc1lYTnpMbU52Ym5OMGNuVmpkRzl5TG1OaGJHd29kR2hwY3lrN2RtRnlJR0U5UzBwVlVpNWhjMjR4TzNSb2FYTXVjMlZqYjI1a2N6MXVkV3hzTzNSb2FYTXViV2xzYkdselBXNTFiR3c3ZEdocGN5NXRhV055YjNNOWJuVnNiRHQwYUdsekxtZGxkRVZ1WTI5a1pXUklaWGc5Wm5WdVkzUnBiMjRvS1h0MllYSWdaVDF1ZFd4c08zWmhjaUJuUFc1MWJHdzdkbUZ5SUdrOWJuVnNiRHQyWVhJZ1l6MWJYVHRwWmloMGFHbHpMbk5sWTI5dVpITWhQVzUxYkd3cGUyVTlibVYzSUdFdVJFVlNTVzUwWldkbGNpaDdYQ0pwYm5SY0lqcDBhR2x6TG5ObFkyOXVaSE45S1R0akxuQjFjMmdvWlNsOWFXWW9kR2hwY3k1dGFXeHNhWE1oUFc1MWJHd3BlM1poY2lCb1BXNWxkeUJoTGtSRlVrbHVkR1ZuWlhJb2Uxd2lhVzUwWENJNmRHaHBjeTV0YVd4c2FYTjlLVHRuUFc1bGR5QmhMa1JGVWxSaFoyZGxaRTlpYW1WamRDaDdiMkpxT21nc2RHRm5PbHdpT0RCY0lpeGxlSEJzYVdOcGREcG1ZV3h6WlgwcE8yTXVjSFZ6YUNobktYMXBaaWgwYUdsekxtMXBZM0p2Y3lFOWJuVnNiQ2w3ZG1GeUlHWTlibVYzSUdFdVJFVlNTVzUwWldkbGNpaDdYQ0pwYm5SY0lqcDBhR2x6TG0xcFkzSnZjMzBwTzJrOWJtVjNJR0V1UkVWU1ZHRm5aMlZrVDJKcVpXTjBLSHR2WW1vNlppeDBZV2M2WENJNE1Wd2lMR1Y0Y0d4cFkybDBPbVpoYkhObGZTazdZeTV3ZFhOb0tHa3BmWFpoY2lCa1BXNWxkeUJoTGtSRlVsTmxjWFZsYm1ObEtIdGhjbkpoZVRwamZTazdkR2hwY3k1b1ZFeFdQV1F1WjJWMFJXNWpiMlJsWkVobGVDZ3BPM0psZEhWeWJpQjBhR2x6TG1oVVRGWjlPMmxtS0hSNWNHVnZaaUJpSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHRwWmloMGVYQmxiMllnWWk1elpXTnZibVJ6UFQxY0ltNTFiV0psY2x3aUtYdDBhR2x6TG5ObFkyOXVaSE05WWk1elpXTnZibVJ6ZldsbUtIUjVjR1Z2WmlCaUxtMXBiR3hwY3owOVhDSnVkVzFpWlhKY0lpbDdkR2hwY3k1dGFXeHNhWE05WWk1dGFXeHNhWE45YVdZb2RIbHdaVzltSUdJdWJXbGpjbTl6UFQxY0ltNTFiV0psY2x3aUtYdDBhR2x6TG0xcFkzSnZjejFpTG0xcFkzSnZjMzE5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdWRITndMa0ZqWTNWeVlXTjVMRXRLVlZJdVlYTnVNUzVCVTA0eFQySnFaV04wS1R0TFNsVlNMbUZ6YmpFdWRITndMazFsYzNOaFoyVkpiWEJ5YVc1MFBXWjFibU4wYVc5dUtHSXBlMHRLVlZJdVlYTnVNUzUwYzNBdVRXVnpjMkZuWlVsdGNISnBiblF1YzNWd1pYSmpiR0Z6Y3k1amIyNXpkSEoxWTNSdmNpNWpZV3hzS0hSb2FYTXBPM1poY2lCaFBVdEtWVkl1WVhOdU1UdDJZWElnWXoxTFNsVlNMbUZ6YmpFdWVEVXdPVHQwYUdsekxtUklZWE5vUVd4blBXNTFiR3c3ZEdocGN5NWtTR0Z6YUZaaGJIVmxQVzUxYkd3N2RHaHBjeTVuWlhSRmJtTnZaR1ZrU0dWNFBXWjFibU4wYVc5dUtDbDdhV1lvZEhsd1pXOW1JSFJvYVhNdWFGUk1WajA5WENKemRISnBibWRjSWlsN2NtVjBkWEp1SUhSb2FYTXVhRlJNVm4xMllYSWdaRDF1WlhjZ1lTNUVSVkpUWlhGMVpXNWpaU2g3WVhKeVlYazZXM1JvYVhNdVpFaGhjMmhCYkdjc2RHaHBjeTVrU0dGemFGWmhiSFZsWFgwcE8zSmxkSFZ5YmlCa0xtZGxkRVZ1WTI5a1pXUklaWGdvS1gwN2FXWW9kSGx3Wlc5bUlHSWhQVndpZFc1a1pXWnBibVZrWENJcGUybG1LSFI1Y0dWdlppQmlMbWhoYzJoQmJHYzlQVndpYzNSeWFXNW5YQ0lwZTNSb2FYTXVaRWhoYzJoQmJHYzlibVYzSUdNdVFXeG5iM0pwZEdodFNXUmxiblJwWm1sbGNpaDdibUZ0WlRwaUxtaGhjMmhCYkdkOUtYMXBaaWgwZVhCbGIyWWdZaTVvWVhOb1ZtRnNkV1U5UFZ3aWMzUnlhVzVuWENJcGUzUm9hWE11WkVoaGMyaFdZV3gxWlQxdVpYY2dZUzVFUlZKUFkzUmxkRk4wY21sdVp5aDdhR1Y0T21JdWFHRnphRlpoYkhWbGZTbDlmWDA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TG5SemNDNU5aWE56WVdkbFNXMXdjbWx1ZEN4TFNsVlNMbUZ6YmpFdVFWTk9NVTlpYW1WamRDazdTMHBWVWk1aGMyNHhMblJ6Y0M1VWFXMWxVM1JoYlhCU1pYRTlablZ1WTNScGIyNG9ZeWw3UzBwVlVpNWhjMjR4TG5SemNDNVVhVzFsVTNSaGJYQlNaWEV1YzNWd1pYSmpiR0Z6Y3k1amIyNXpkSEoxWTNSdmNpNWpZV3hzS0hSb2FYTXBPM1poY2lCaFBVdEtWVkl1WVhOdU1UdDJZWElnWWoxTFNsVlNMbUZ6YmpFdWRITndPM1JvYVhNdVpGWmxjbk5wYjI0OWJtVjNJR0V1UkVWU1NXNTBaV2RsY2loN1hDSnBiblJjSWpveGZTazdkR2hwY3k1a1RXVnpjMkZuWlVsdGNISnBiblE5Ym5Wc2JEdDBhR2x6TG1SUWIyeHBZM2s5Ym5Wc2JEdDBhR2x6TG1ST2IyNWpaVDF1ZFd4c08zUm9hWE11WTJWeWRGSmxjVDEwY25WbE8zUm9hWE11YzJWMFRXVnpjMkZuWlVsdGNISnBiblE5Wm5WdVkzUnBiMjRvWkNsN2FXWW9aQ0JwYm5OMFlXNWpaVzltSUV0S1ZWSXVZWE51TVM1MGMzQXVUV1Z6YzJGblpVbHRjSEpwYm5RcGUzUm9hWE11WkUxbGMzTmhaMlZKYlhCeWFXNTBQV1E3Y21WMGRYSnVmV2xtS0hSNWNHVnZaaUJrUFQxY0ltOWlhbVZqZEZ3aUtYdDBhR2x6TG1STlpYTnpZV2RsU1cxd2NtbHVkRDF1WlhjZ1lpNU5aWE56WVdkbFNXMXdjbWx1ZENoa0tYMTlPM1JvYVhNdVoyVjBSVzVqYjJSbFpFaGxlRDFtZFc1amRHbHZiaWdwZTJsbUtIUm9hWE11WkUxbGMzTmhaMlZKYlhCeWFXNTBQVDF1ZFd4c0tYdDBhSEp2ZDF3aWJXVnpjMkZuWlVsdGNISnBiblFnYzJoaGJHd2dZbVVnYzNCbFkybG1hV1ZrWENKOWRtRnlJR1E5VzNSb2FYTXVaRlpsY25OcGIyNHNkR2hwY3k1a1RXVnpjMkZuWlVsdGNISnBiblJkTzJsbUtIUm9hWE11WkZCdmJHbGplU0U5Ym5Wc2JDbDdaQzV3ZFhOb0tIUm9hWE11WkZCdmJHbGplU2w5YVdZb2RHaHBjeTVrVG05dVkyVWhQVzUxYkd3cGUyUXVjSFZ6YUNoMGFHbHpMbVJPYjI1alpTbDlhV1lvZEdocGN5NWpaWEowVW1WeEtYdGtMbkIxYzJnb2JtVjNJR0V1UkVWU1FtOXZiR1ZoYmlncEtYMTJZWElnWlQxdVpYY2dZUzVFUlZKVFpYRjFaVzVqWlNoN1lYSnlZWGs2WkgwcE8zUm9hWE11YUZSTVZqMWxMbWRsZEVWdVkyOWtaV1JJWlhnb0tUdHlaWFIxY200Z2RHaHBjeTVvVkV4V2ZUdHBaaWgwZVhCbGIyWWdZeUU5WENKMWJtUmxabWx1WldSY0lpbDdhV1lvZEhsd1pXOW1JR011YldrOVBWd2liMkpxWldOMFhDSXBlM1JvYVhNdWMyVjBUV1Z6YzJGblpVbHRjSEpwYm5Rb1l5NXRhU2w5YVdZb2RIbHdaVzltSUdNdWNHOXNhV041UFQxY0ltOWlhbVZqZEZ3aUtYdDBhR2x6TG1SUWIyeHBZM2s5Ym1WM0lHRXVSRVZTVDJKcVpXTjBTV1JsYm5ScFptbGxjaWhqTG5CdmJHbGplU2w5YVdZb2RIbHdaVzltSUdNdWJtOXVZMlU5UFZ3aWIySnFaV04wWENJcGUzUm9hWE11WkU1dmJtTmxQVzVsZHlCaExrUkZVa2x1ZEdWblpYSW9ZeTV1YjI1alpTbDlhV1lvZEhsd1pXOW1JR011WTJWeWRISmxjVDA5WENKaWIyOXNaV0Z1WENJcGUzUm9hWE11WTJWeWRGSmxjVDFqTG1ObGNuUnlaWEY5ZlgwN1dVRklUMDh1YkdGdVp5NWxlSFJsYm1Rb1MwcFZVaTVoYzI0eExuUnpjQzVVYVcxbFUzUmhiWEJTWlhFc1MwcFZVaTVoYzI0eExrRlRUakZQWW1wbFkzUXBPMHRLVlZJdVlYTnVNUzUwYzNBdVZGTlVTVzVtYnoxbWRXNWpkR2x2YmloaktYdExTbFZTTG1GemJqRXVkSE53TGxSVFZFbHVabTh1YzNWd1pYSmpiR0Z6Y3k1amIyNXpkSEoxWTNSdmNpNWpZV3hzS0hSb2FYTXBPM1poY2lCaFBVdEtWVkl1WVhOdU1UdDJZWElnWkQxTFNsVlNMbUZ6YmpFdWVEVXdPVHQyWVhJZ1lqMUxTbFZTTG1GemJqRXVkSE53TzNSb2FYTXVaRlpsY25OcGIyNDlibVYzSUdFdVJFVlNTVzUwWldkbGNpaDdYQ0pwYm5SY0lqb3hmU2s3ZEdocGN5NWtVRzlzYVdONVBXNTFiR3c3ZEdocGN5NWtUV1Z6YzJGblpVbHRjSEpwYm5ROWJuVnNiRHQwYUdsekxtUlRaWEpwWVd4T2RXMWlaWEk5Ym5Wc2JEdDBhR2x6TG1SSFpXNVVhVzFsUFc1MWJHdzdkR2hwY3k1a1FXTmpkWEpoWTNrOWJuVnNiRHQwYUdsekxtUlBjbVJsY21sdVp6MXVkV3hzTzNSb2FYTXVaRTV2Ym1ObFBXNTFiR3c3ZEdocGN5NWtWSE5oUFc1MWJHdzdkR2hwY3k1blpYUkZibU52WkdWa1NHVjRQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVTlXM1JvYVhNdVpGWmxjbk5wYjI1ZE8ybG1LSFJvYVhNdVpGQnZiR2xqZVQwOWJuVnNiQ2w3ZEdoeWIzZGNJbkJ2YkdsamVTQnphR0ZzYkNCaVpTQnpjR1ZqYVdacFpXUXVYQ0o5WlM1d2RYTm9LSFJvYVhNdVpGQnZiR2xqZVNrN2FXWW9kR2hwY3k1a1RXVnpjMkZuWlVsdGNISnBiblE5UFc1MWJHd3BlM1JvY205M1hDSnRaWE56WVdkbFNXMXdjbWx1ZENCemFHRnNiQ0JpWlNCemNHVmphV1pwWldRdVhDSjlaUzV3ZFhOb0tIUm9hWE11WkUxbGMzTmhaMlZKYlhCeWFXNTBLVHRwWmloMGFHbHpMbVJUWlhKcFlXeE9kVzFpWlhJOVBXNTFiR3dwZTNSb2NtOTNYQ0p6WlhKcFlXeE9kVzFpWlhJZ2MyaGhiR3dnWW1VZ2MzQmxZMmxtYVdWa0xsd2lmV1V1Y0hWemFDaDBhR2x6TG1SVFpYSnBZV3hPZFcxaVpYSXBPMmxtS0hSb2FYTXVaRWRsYmxScGJXVTlQVzUxYkd3cGUzUm9jbTkzWENKblpXNVVhVzFsSUhOb1lXeHNJR0psSUhOd1pXTnBabWxsWkM1Y0luMWxMbkIxYzJnb2RHaHBjeTVrUjJWdVZHbHRaU2s3YVdZb2RHaHBjeTVrUVdOamRYSmhZM2toUFc1MWJHd3BlMlV1Y0hWemFDaDBhR2x6TG1SQlkyTjFjbUZqZVNsOWFXWW9kR2hwY3k1a1QzSmtaWEpwYm1jaFBXNTFiR3dwZTJVdWNIVnphQ2gwYUdsekxtUlBjbVJsY21sdVp5bDlhV1lvZEdocGN5NWtUbTl1WTJVaFBXNTFiR3dwZTJVdWNIVnphQ2gwYUdsekxtUk9iMjVqWlNsOWFXWW9kR2hwY3k1a1ZITmhJVDF1ZFd4c0tYdGxMbkIxYzJnb2RHaHBjeTVrVkhOaEtYMTJZWElnWmoxdVpYY2dZUzVFUlZKVFpYRjFaVzVqWlNoN1lYSnlZWGs2WlgwcE8zUm9hWE11YUZSTVZqMW1MbWRsZEVWdVkyOWtaV1JJWlhnb0tUdHlaWFIxY200Z2RHaHBjeTVvVkV4V2ZUdHBaaWgwZVhCbGIyWWdZeUU5WENKMWJtUmxabWx1WldSY0lpbDdhV1lvZEhsd1pXOW1JR011Y0c5c2FXTjVQVDFjSW5OMGNtbHVaMXdpS1h0cFppZ2hZeTV3YjJ4cFkza3ViV0YwWTJnb0wxNWJNQzA1TGwwckpDOHBLWHQwYUhKdmQxd2ljRzlzYVdONUlITm9ZV3hzSUdKbElHOXBaQ0JzYVd0bElEQXVNUzQwTGpFek5Gd2lmWFJvYVhNdVpGQnZiR2xqZVQxdVpYY2dZUzVFUlZKUFltcGxZM1JKWkdWdWRHbG1hV1Z5S0h0dmFXUTZZeTV3YjJ4cFkzbDlLWDFwWmloMGVYQmxiMllnWXk1dFpYTnpZV2RsU1cxd2NtbHVkQ0U5WENKMWJtUmxabWx1WldSY0lpbDdkR2hwY3k1a1RXVnpjMkZuWlVsdGNISnBiblE5Ym1WM0lHSXVUV1Z6YzJGblpVbHRjSEpwYm5Rb1l5NXRaWE56WVdkbFNXMXdjbWx1ZENsOWFXWW9kSGx3Wlc5bUlHTXVjMlZ5YVdGc1RuVnRZbVZ5SVQxY0luVnVaR1ZtYVc1bFpGd2lLWHQwYUdsekxtUlRaWEpwWVd4T2RXMWlaWEk5Ym1WM0lHRXVSRVZTU1c1MFpXZGxjaWhqTG5ObGNtbGhiRTUxYldKbGNpbDlhV1lvZEhsd1pXOW1JR011WjJWdVZHbHRaU0U5WENKMWJtUmxabWx1WldSY0lpbDdkR2hwY3k1a1IyVnVWR2x0WlQxdVpYY2dZUzVFUlZKSFpXNWxjbUZzYVhwbFpGUnBiV1VvWXk1blpXNVVhVzFsS1gxcFppaDBlWEJsYjJZZ1l5NWhZMk4xY21GamVTRTlYQ0oxYm1SbFptbHVaRndpS1h0MGFHbHpMbVJCWTJOMWNtRmplVDF1WlhjZ1lpNUJZMk4xY21GamVTaGpMbUZqWTNWeVlXTjVLWDFwWmloMGVYQmxiMllnWXk1dmNtUmxjbWx1WnlFOVhDSjFibVJsWm1sdVpXUmNJaVltWXk1dmNtUmxjbWx1WnowOWRISjFaU2w3ZEdocGN5NWtUM0prWlhKcGJtYzlibVYzSUdFdVJFVlNRbTl2YkdWaGJpZ3BmV2xtS0hSNWNHVnZaaUJqTG01dmJtTmxJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdDBhR2x6TG1ST2IyNWpaVDF1WlhjZ1lTNUVSVkpKYm5SbFoyVnlLR011Ym05dVkyVXBmV2xtS0hSNWNHVnZaaUJqTG5SellTRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2RHaHBjeTVrVkhOaFBXNWxkeUJrTGxnMU1EQk9ZVzFsS0dNdWRITmhLWDE5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdWRITndMbFJUVkVsdVptOHNTMHBWVWk1aGMyNHhMa0ZUVGpGUFltcGxZM1FwTzB0S1ZWSXVZWE51TVM1MGMzQXVWR2x0WlZOMFlXMXdVbVZ6Y0QxbWRXNWpkR2x2YmloaktYdExTbFZTTG1GemJqRXVkSE53TGxScGJXVlRkR0Z0Y0ZKbGMzQXVjM1Z3WlhKamJHRnpjeTVqYjI1emRISjFZM1J2Y2k1allXeHNLSFJvYVhNcE8zWmhjaUJoUFV0S1ZWSXVZWE51TVR0MllYSWdZajFMU2xWU0xtRnpiakV1ZEhOd08zUm9hWE11WkZOMFlYUjFjejF1ZFd4c08zUm9hWE11WkZSVFZEMXVkV3hzTzNSb2FYTXVaMlYwUlc1amIyUmxaRWhsZUQxbWRXNWpkR2x2YmlncGUybG1LSFJvYVhNdVpGTjBZWFIxY3owOWJuVnNiQ2w3ZEdoeWIzZGNJbk4wWVhSMWN5QnphR0ZzYkNCaVpTQnpjR1ZqYVdacFpXUmNJbjEyWVhJZ1pEMWJkR2hwY3k1a1UzUmhkSFZ6WFR0cFppaDBhR2x6TG1SVVUxUWhQVzUxYkd3cGUyUXVjSFZ6YUNoMGFHbHpMbVJVVTFRcGZYWmhjaUJsUFc1bGR5QmhMa1JGVWxObGNYVmxibU5sS0h0aGNuSmhlVHBrZlNrN2RHaHBjeTVvVkV4V1BXVXVaMlYwUlc1amIyUmxaRWhsZUNncE8zSmxkSFZ5YmlCMGFHbHpMbWhVVEZaOU8ybG1LSFI1Y0dWdlppQmpJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdHBaaWgwZVhCbGIyWWdZeTV6ZEdGMGRYTTlQVndpYjJKcVpXTjBYQ0lwZTNSb2FYTXVaRk4wWVhSMWN6MXVaWGNnWWk1UVMwbFRkR0YwZFhOSmJtWnZLR011YzNSaGRIVnpLWDFwWmloMGVYQmxiMllnWXk1MGMzUWhQVndpZFc1a1pXWnBibVZrWENJbUptTXVkSE4wSUdsdWMzUmhibU5sYjJZZ1MwcFZVaTVoYzI0eExrRlRUakZQWW1wbFkzUXBlM1JvYVhNdVpGUlRWRDFqTG5SemRDNW5aWFJEYjI1MFpXNTBTVzVtYnlncGZYMTlPMWxCU0U5UExteGhibWN1WlhoMFpXNWtLRXRLVlZJdVlYTnVNUzUwYzNBdVZHbHRaVk4wWVcxd1VtVnpjQ3hMU2xWU0xtRnpiakV1UVZOT01VOWlhbVZqZENrN1MwcFZVaTVoYzI0eExuUnpjQzVRUzBsVGRHRjBkWE5KYm1adlBXWjFibU4wYVc5dUtHTXBlMHRLVlZJdVlYTnVNUzUwYzNBdVVFdEpVM1JoZEhWelNXNW1ieTV6ZFhCbGNtTnNZWE56TG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5azdkbUZ5SUdFOVMwcFZVaTVoYzI0eE8zWmhjaUJpUFV0S1ZWSXVZWE51TVM1MGMzQTdkR2hwY3k1a1UzUmhkSFZ6UFc1MWJHdzdkR2hwY3k1a1UzUmhkSFZ6VTNSeWFXNW5QVzUxYkd3N2RHaHBjeTVrUm1GcGJIVnlaVWx1Wm04OWJuVnNiRHQwYUdsekxtZGxkRVZ1WTI5a1pXUklaWGc5Wm5WdVkzUnBiMjRvS1h0cFppaDBhR2x6TG1SVGRHRjBkWE05UFc1MWJHd3BlM1JvY205M1hDSnpkR0YwZFhNZ2MyaGhiR3dnWW1VZ2MzQmxZMmxtYVdWa1hDSjlkbUZ5SUdROVczUm9hWE11WkZOMFlYUjFjMTA3YVdZb2RHaHBjeTVrVTNSaGRIVnpVM1J5YVc1bklUMXVkV3hzS1h0a0xuQjFjMmdvZEdocGN5NWtVM1JoZEhWelUzUnlhVzVuS1gxcFppaDBhR2x6TG1SR1lXbHNkWEpsU1c1bWJ5RTliblZzYkNsN1pDNXdkWE5vS0hSb2FYTXVaRVpoYVd4MWNtVkpibVp2S1gxMllYSWdaVDF1WlhjZ1lTNUVSVkpUWlhGMVpXNWpaU2g3WVhKeVlYazZaSDBwTzNSb2FYTXVhRlJNVmoxbExtZGxkRVZ1WTI5a1pXUklaWGdvS1R0eVpYUjFjbTRnZEdocGN5NW9WRXhXZlR0cFppaDBlWEJsYjJZZ1l5RTlYQ0oxYm1SbFptbHVaV1JjSWlsN2FXWW9kSGx3Wlc5bUlHTXVjM1JoZEhWelBUMWNJbTlpYW1WamRGd2lLWHQwYUdsekxtUlRkR0YwZFhNOWJtVjNJR0l1VUV0SlUzUmhkSFZ6S0dNdWMzUmhkSFZ6S1gxcFppaDBlWEJsYjJZZ1l5NXpkR0YwYzNSeVBUMWNJbTlpYW1WamRGd2lLWHQwYUdsekxtUlRkR0YwZFhOVGRISnBibWM5Ym1WM0lHSXVVRXRKUm5KbFpWUmxlSFFvZTJGeWNtRjVPbU11YzNSaGRITjBjbjBwZldsbUtIUjVjR1Z2WmlCakxtWmhhV3hwYm1adlBUMWNJbTlpYW1WamRGd2lLWHQwYUdsekxtUkdZV2xzZFhKbFNXNW1iejF1WlhjZ1lpNVFTMGxHWVdsc2RYSmxTVzVtYnloakxtWmhhV3hwYm1adktYMTlmVHRaUVVoUFR5NXNZVzVuTG1WNGRHVnVaQ2hMU2xWU0xtRnpiakV1ZEhOd0xsQkxTVk4wWVhSMWMwbHVabThzUzBwVlVpNWhjMjR4TGtGVFRqRlBZbXBsWTNRcE8wdEtWVkl1WVhOdU1TNTBjM0F1VUV0SlUzUmhkSFZ6UFdaMWJtTjBhVzl1S0dVcGUwdEtWVkl1WVhOdU1TNTBjM0F1VUV0SlUzUmhkSFZ6TG5OMWNHVnlZMnhoYzNNdVkyOXVjM1J5ZFdOMGIzSXVZMkZzYkNoMGFHbHpLVHQyWVhJZ1lUMUxTbFZTTG1GemJqRTdkbUZ5SUdJOVMwcFZVaTVoYzI0eExuUnpjRHQyWVhJZ1pEMXVkV3hzTzNSb2FYTXVaMlYwUlc1amIyUmxaRWhsZUQxbWRXNWpkR2x2YmlncGUzUm9hWE11YUZSTVZqMTBhR2x6TG1SVGRHRjBkWE11WjJWMFJXNWpiMlJsWkVobGVDZ3BPM0psZEhWeWJpQjBhR2x6TG1oVVRGWjlPMmxtS0hSNWNHVnZaaUJsSVQxY0luVnVaR1ZtYVc1bFpGd2lLWHRwWmloMGVYQmxiMllnWlM1dVlXMWxJVDFjSW5WdVpHVm1hVzVsWkZ3aUtYdDJZWElnWXoxaUxsQkxTVk4wWVhSMWN5NTJZV3gxWlV4cGMzUTdhV1lvZEhsd1pXOW1JR05iWlM1dVlXMWxYVDA5WENKMWJtUmxabWx1WldSY0lpbDdkR2h5YjNkY0ltNWhiV1VnZFc1a1pXWnBibVZrT2lCY0lpdGxMbTVoYldWOWRHaHBjeTVrVTNSaGRIVnpQVzVsZHlCaExrUkZVa2x1ZEdWblpYSW9lMXdpYVc1MFhDSTZZMXRsTG01aGJXVmRmU2w5Wld4elpYdDBhR2x6TG1SVGRHRjBkWE05Ym1WM0lHRXVSRVZTU1c1MFpXZGxjaWhsS1gxOWZUdFpRVWhQVHk1c1lXNW5MbVY0ZEdWdVpDaExTbFZTTG1GemJqRXVkSE53TGxCTFNWTjBZWFIxY3l4TFNsVlNMbUZ6YmpFdVFWTk9NVTlpYW1WamRDazdTMHBWVWk1aGMyNHhMblJ6Y0M1UVMwbFRkR0YwZFhNdWRtRnNkV1ZNYVhOMFBYdG5jbUZ1ZEdWa09qQXNaM0poYm5SbFpGZHBkR2hOYjJSek9qRXNjbVZxWldOMGFXOXVPaklzZDJGcGRHbHVaem96TEhKbGRtOWpZWFJwYjI1WFlYSnVhVzVuT2pRc2NtVjJiMk5oZEdsdmJrNXZkR2xtYVdOaGRHbHZiam8xZlR0TFNsVlNMbUZ6YmpFdWRITndMbEJMU1VaeVpXVlVaWGgwUFdaMWJtTjBhVzl1S0dJcGUwdEtWVkl1WVhOdU1TNTBjM0F1VUV0SlJuSmxaVlJsZUhRdWMzVndaWEpqYkdGemN5NWpiMjV6ZEhKMVkzUnZjaTVqWVd4c0tIUm9hWE1wTzNaaGNpQmhQVXRLVlZJdVlYTnVNVHQwYUdsekxuUmxlSFJNYVhOMFBWdGRPM1JvYVhNdVoyVjBSVzVqYjJSbFpFaGxlRDFtZFc1amRHbHZiaWdwZTNaaGNpQmpQVnRkTzJadmNpaDJZWElnWlQwd08yVThkR2hwY3k1MFpYaDBUR2x6ZEM1c1pXNW5kR2c3WlNzcktYdGpMbkIxYzJnb2JtVjNJR0V1UkVWU1ZWUkdPRk4wY21sdVp5aDdjM1J5T25Sb2FYTXVkR1Y0ZEV4cGMzUmJaVjE5S1NsOWRtRnlJR1E5Ym1WM0lHRXVSRVZTVTJWeGRXVnVZMlVvZTJGeWNtRjVPbU45S1R0MGFHbHpMbWhVVEZZOVpDNW5aWFJGYm1OdlpHVmtTR1Y0S0NrN2NtVjBkWEp1SUhSb2FYTXVhRlJNVm4wN2FXWW9kSGx3Wlc5bUlHSWhQVndpZFc1a1pXWnBibVZrWENJcGUybG1LSFI1Y0dWdlppQmlMbUZ5Y21GNVBUMWNJbTlpYW1WamRGd2lLWHQwYUdsekxuUmxlSFJNYVhOMFBXSXVZWEp5WVhsOWZYMDdXVUZJVDA4dWJHRnVaeTVsZUhSbGJtUW9TMHBWVWk1aGMyNHhMblJ6Y0M1UVMwbEdjbVZsVkdWNGRDeExTbFZTTG1GemJqRXVRVk5PTVU5aWFtVmpkQ2s3UzBwVlVpNWhjMjR4TG5SemNDNVFTMGxHWVdsc2RYSmxTVzVtYnoxbWRXNWpkR2x2Ymloa0tYdExTbFZTTG1GemJqRXVkSE53TGxCTFNVWmhhV3gxY21WSmJtWnZMbk4xY0dWeVkyeGhjM011WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2gwYUdsektUdDJZWElnWVQxTFNsVlNMbUZ6YmpFN2RtRnlJR0k5UzBwVlVpNWhjMjR4TG5SemNEdDBhR2x6TG5aaGJIVmxQVzUxYkd3N2RHaHBjeTVuWlhSRmJtTnZaR1ZrU0dWNFBXWjFibU4wYVc5dUtDbDdhV1lvZEdocGN5NTJZV3gxWlQwOWJuVnNiQ2w3ZEdoeWIzZGNJblpoYkhWbElITm9ZV3hzSUdKbElITndaV05wWm1sbFpGd2lmWFpoY2lCbFBXNWxkeUJPZFcxaVpYSW9kR2hwY3k1MllXeDFaU2t1ZEc5VGRISnBibWNvTWlrN2RtRnlJR1k5Ym1WM0lHRXVSRVZTUW1sMFUzUnlhVzVuS0NrN1ppNXpaWFJDZVVKcGJtRnllVk4wY21sdVp5aGxLVHQwYUdsekxtaFVURlk5Wmk1blpYUkZibU52WkdWa1NHVjRLQ2s3Y21WMGRYSnVJSFJvYVhNdWFGUk1WbjA3YVdZb2RIbHdaVzltSUdRaFBWd2lkVzVrWldacGJtVmtYQ0lwZTJsbUtIUjVjR1Z2WmlCa0xtNWhiV1U5UFZ3aWMzUnlhVzVuWENJcGUzWmhjaUJqUFdJdVVFdEpSbUZwYkhWeVpVbHVabTh1ZG1Gc2RXVk1hWE4wTzJsbUtIUjVjR1Z2WmlCalcyUXVibUZ0WlYwOVBWd2lkVzVrWldacGJtVmtYQ0lwZTNSb2NtOTNYQ0p1WVcxbElIVnVaR1ZtYVc1bFpEb2dYQ0lyWkM1dVlXMWxmWFJvYVhNdWRtRnNkV1U5WTF0a0xtNWhiV1ZkZldWc2MyVjdhV1lvZEhsd1pXOW1JR1JiWENKcGJuUmNJbDA5UFZ3aWJuVnRZbVZ5WENJcGUzUm9hWE11ZG1Gc2RXVTlaRnRjSW1sdWRGd2lYWDE5ZlgwN1dVRklUMDh1YkdGdVp5NWxlSFJsYm1Rb1MwcFZVaTVoYzI0eExuUnpjQzVRUzBsR1lXbHNkWEpsU1c1bWJ5eExTbFZTTG1GemJqRXVRVk5PTVU5aWFtVmpkQ2s3UzBwVlVpNWhjMjR4TG5SemNDNVFTMGxHWVdsc2RYSmxTVzVtYnk1MllXeDFaVXhwYzNROWUySmhaRUZzWnpvd0xHSmhaRkpsY1hWbGMzUTZNaXhpWVdSRVlYUmhSbTl5YldGME9qVXNkR2x0WlU1dmRFRjJZV2xzWVdKc1pUb3hOQ3gxYm1GalkyVndkR1ZrVUc5c2FXTjVPakUxTEhWdVlXTmpaWEIwWldSRmVIUmxibk5wYjI0Nk1UWXNZV1JrU1c1bWIwNXZkRUYyWVdsc1lXSnNaVG94Tnl4emVYTjBaVzFHWVdsc2RYSmxPakkxZlR0TFNsVlNMbUZ6YmpFdWRITndMa0ZpYzNSeVlXTjBWRk5CUVdSaGNIUmxjajFtZFc1amRHbHZiaWhoS1h0MGFHbHpMbWRsZEZSVFZFaGxlRDFtZFc1amRHbHZiaWhqTEdJcGUzUm9jbTkzWENKdWIzUWdhVzF3YkdWdFpXNTBaV1FnZVdWMFhDSjlmVHRMU2xWU0xtRnpiakV1ZEhOd0xsTnBiWEJzWlZSVFFVRmtZWEIwWlhJOVpuVnVZM1JwYjI0b1lTbDdTMHBWVWk1aGMyNHhMblJ6Y0M1VGFXMXdiR1ZVVTBGQlpHRndkR1Z5TG5OMWNHVnlZMnhoYzNNdVkyOXVjM1J5ZFdOMGIzSXVZMkZzYkNoMGFHbHpLVHQwYUdsekxuQmhjbUZ0Y3oxdWRXeHNPM1JvYVhNdWMyVnlhV0ZzUFRBN2RHaHBjeTVuWlhSVVUxUklaWGc5Wm5WdVkzUnBiMjRvWXl4aUtYdDJZWElnWlQxTFNsVlNMbU55ZVhCMGJ5NVZkR2xzTG1oaGMyaElaWGdvWXl4aUtUdDBhR2x6TG5CaGNtRnRjeTUwYzNSSmJtWnZMbTFsYzNOaFoyVkpiWEJ5YVc1MFBYdG9ZWE5vUVd4bk9tSXNhR0Z6YUZaaGJIVmxPbVY5TzNSb2FYTXVjR0Z5WVcxekxuUnpkRWx1Wm04dWMyVnlhV0ZzVG5WdFltVnlQWHRjSW1sdWRGd2lPblJvYVhNdWMyVnlhV0ZzS3l0OU8zWmhjaUJrUFUxaGRHZ3VabXh2YjNJb1RXRjBhQzV5WVc1a2IyMG9LU294TURBd01EQXdNREF3S1R0MGFHbHpMbkJoY21GdGN5NTBjM1JKYm1adkxtNXZibU5sUFh0Y0ltbHVkRndpT21SOU8zWmhjaUJtUFV0S1ZWSXVZWE51TVM1MGMzQXVWRk5RVlhScGJDNXVaWGRVYVcxbFUzUmhiWEJVYjJ0bGJpaDBhR2x6TG5CaGNtRnRjeWs3Y21WMGRYSnVJR1l1WjJWMFEyOXVkR1Z1ZEVsdVptOUZibU52WkdWa1NHVjRLQ2w5TzJsbUtIUjVjR1Z2WmlCaElUMWNJblZ1WkdWbWFXNWxaRndpS1h0MGFHbHpMbkJoY21GdGN6MWhmWDA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TG5SemNDNVRhVzF3YkdWVVUwRkJaR0Z3ZEdWeUxFdEtWVkl1WVhOdU1TNTBjM0F1UVdKemRISmhZM1JVVTBGQlpHRndkR1Z5S1R0TFNsVlNMbUZ6YmpFdWRITndMa1pwZUdWa1ZGTkJRV1JoY0hSbGNqMW1kVzVqZEdsdmJpaGhLWHRMU2xWU0xtRnpiakV1ZEhOd0xrWnBlR1ZrVkZOQlFXUmhjSFJsY2k1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeWs3ZEdocGN5NXdZWEpoYlhNOWJuVnNiRHQwYUdsekxtZGxkRlJUVkVobGVEMW1kVzVqZEdsdmJpaGpMR0lwZTNaaGNpQmtQVXRLVlZJdVkzSjVjSFJ2TGxWMGFXd3VhR0Z6YUVobGVDaGpMR0lwTzNSb2FYTXVjR0Z5WVcxekxuUnpkRWx1Wm04dWJXVnpjMkZuWlVsdGNISnBiblE5ZTJoaGMyaEJiR2M2WWl4b1lYTm9WbUZzZFdVNlpIMDdkbUZ5SUdVOVMwcFZVaTVoYzI0eExuUnpjQzVVVTFCVmRHbHNMbTVsZDFScGJXVlRkR0Z0Y0ZSdmEyVnVLSFJvYVhNdWNHRnlZVzF6S1R0eVpYUjFjbTRnWlM1blpYUkRiMjUwWlc1MFNXNW1iMFZ1WTI5a1pXUklaWGdvS1gwN2FXWW9kSGx3Wlc5bUlHRWhQVndpZFc1a1pXWnBibVZrWENJcGUzUm9hWE11Y0dGeVlXMXpQV0Y5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdWRITndMa1pwZUdWa1ZGTkJRV1JoY0hSbGNpeExTbFZTTG1GemJqRXVkSE53TGtGaWMzUnlZV04wVkZOQlFXUmhjSFJsY2lrN1MwcFZVaTVoYzI0eExuUnpjQzVVVTFCVmRHbHNQVzVsZHlCbWRXNWpkR2x2YmlncGUzMDdTMHBWVWk1aGMyNHhMblJ6Y0M1VVUxQlZkR2xzTG01bGQxUnBiV1ZUZEdGdGNGUnZhMlZ1UFdaMWJtTjBhVzl1S0dJcGUzWmhjaUJxUFV0S1ZWSXVZWE51TVM1amJYTTdkbUZ5SUdFOVMwcFZVaTVoYzI0eExuUnpjRHQyWVhJZ1p6MXVaWGNnYWk1VGFXZHVaV1JFWVhSaEtDazdkbUZ5SUdVOWJtVjNJR0V1VkZOVVNXNW1ieWhpTG5SemRFbHVabThwTzNaaGNpQm1QV1V1WjJWMFJXNWpiMlJsWkVobGVDZ3BPMmN1WkVWdVkyRndRMjl1ZEdWdWRFbHVabTh1YzJWMFEyOXVkR1Z1ZEZaaGJIVmxLSHRvWlhnNlpuMHBPMmN1WkVWdVkyRndRMjl1ZEdWdWRFbHVabTh1YzJWMFEyOXVkR1Z1ZEZSNWNHVW9YQ0owYzNScGJtWnZYQ0lwTzJsbUtIUjVjR1Z2WmlCaUxtTmxjblJ6UFQxY0ltOWlhbVZqZEZ3aUtYdG1iM0lvZG1GeUlHTTlNRHRqUEdJdVkyVnlkSE11YkdWdVozUm9PMk1yS3lsN1p5NWhaR1JEWlhKMGFXWnBZMkYwWlhOQ2VWQkZUU2hpTG1ObGNuUnpXMk5kS1gxOWRtRnlJR1E5Wnk1emFXZHVaWEpKYm1adlRHbHpkRnN3WFR0a0xuTmxkRk5wWjI1bGNrbGtaVzUwYVdacFpYSW9ZaTV6YVdkdVpYSkRaWEowS1R0a0xuTmxkRVp2Y2tOdmJuUmxiblJCYm1SSVlYTm9LSHR6WkU5aWFqcG5MR1ZqYVU5aWFqcG5MbVJGYm1OaGNFTnZiblJsYm5SSmJtWnZMR2hoYzJoQmJHYzZZaTVvWVhOb1FXeG5mU2s3ZG1GeUlHZzlibVYzSUdvdVUybG5ibWx1WjBObGNuUnBabWxqWVhSbEtIdGhjbkpoZVRwYllpNXphV2R1WlhKRFpYSjBYWDBwTzJRdVpGTnBaMjVsWkVGMGRISnpMbUZrWkNob0tUdGtMbk5wWjI0b1lpNXphV2R1WlhKUWNuWkxaWGtzWWk1emFXZEJiR2NwTzNKbGRIVnliaUJuZlR0TFNsVlNMbUZ6YmpFdWRITndMbFJUVUZWMGFXd3VjR0Z5YzJWVWFXMWxVM1JoYlhCU1pYRTlablZ1WTNScGIyNG9aQ2w3ZG1GeUlHWTllMzA3Wmk1alpYSjBjbVZ4UFdaaGJITmxPM1poY2lCb1BVRlRUakZJUlZndVoyVjBVRzl6UVhKeVlYbFBaa05vYVd4a2NtVnVYMEYwVDJKcUtHUXNNQ2s3YVdZb2FDNXNaVzVuZEdnOE1pbDdkR2h5YjNkY0lsUnBiV1ZUZEdGdGNGSmxjU0J0ZFhOMElHaGhkbVVnWVhRZ2JHVmhjM1FnTWlCcGRHVnRjMXdpZlhaaGNpQmpQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWlVURlpmUVhSUFltb29aQ3hvV3pGZEtUdG1MbTFwUFV0S1ZWSXVZWE51TVM1MGMzQXVWRk5RVlhScGJDNXdZWEp6WlUxbGMzTmhaMlZKYlhCeWFXNTBLR01wTzJadmNpaDJZWElnWlQweU8yVThhQzVzWlc1bmRHZzdaU3NyS1h0MllYSWdZajFvVzJWZE8zWmhjaUJoUFdRdWMzVmljM1J5S0dJc01pazdhV1lvWVQwOVhDSXdObHdpS1h0MllYSWdaejFCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaGtMR0lwTzJZdWNHOXNhV041UFVGVFRqRklSVmd1YUdWNGRHOXZhV1J6ZEhJb1p5bDlhV1lvWVQwOVhDSXdNbHdpS1h0bUxtNXZibU5sUFVGVFRqRklSVmd1WjJWMFNHVjRUMlpXWDBGMFQySnFLR1FzWWlsOWFXWW9ZVDA5WENJd01Wd2lLWHRtTG1ObGNuUnlaWEU5ZEhKMVpYMTljbVYwZFhKdUlHWjlPMHRLVlZJdVlYTnVNUzUwYzNBdVZGTlFWWFJwYkM1d1lYSnpaVTFsYzNOaFoyVkpiWEJ5YVc1MFBXWjFibU4wYVc5dUtHTXBlM1poY2lCb1BYdDlPMmxtS0dNdWMzVmljM1J5S0RBc01pa2hQVndpTXpCY0lpbDdkR2h5YjNkY0ltaGxZV1FnYjJZZ2JXVnpjMkZuWlVsdGNISnBiblFnYUdWNElITm9ZV3hzSUdKbElDY3pNQ2RjSW4xMllYSWdZVDFCVTA0eFNFVllMbWRsZEZCdmMwRnljbUY1VDJaRGFHbHNaSEpsYmw5QmRFOWlhaWhqTERBcE8zWmhjaUJwUFVGVFRqRklSVmd1WjJWMFJHVmpaVzVrWVc1MFNXNWtaWGhDZVU1MGFFeHBjM1FvWXl3d0xGc3dMREJkS1R0MllYSWdaRDFCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaGpMR2twTzNaaGNpQmxQVUZUVGpGSVJWZ3VhR1Y0ZEc5dmFXUnpkSElvWkNrN2RtRnlJR2M5UzBwVlVpNWhjMjR4TG5nMU1Ea3VUMGxFTG05cFpESnVZVzFsS0dVcE8ybG1LR2M5UFZ3aVhDSXBlM1JvY205M1hDSm9ZWE5vUVd4bklHNWhiV1VnZFc1a1pXWnBibVZrT2lCY0lpdGxmWFpoY2lCaVBXYzdkbUZ5SUdZOVFWTk9NVWhGV0M1blpYUkVaV05sYm1SaGJuUkpibVJsZUVKNVRuUm9UR2x6ZENoakxEQXNXekZkS1R0b0xtaGhjMmhCYkdjOVlqdG9MbWhoYzJoV1lXeDFaVDFCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaGpMR1lwTzNKbGRIVnliaUJvZlR0Y2JpOHFJU0JoYzI0eFkyRmtaWE10TVM0d0xqQXVhbk1nS0dNcElESXdNVE10TWpBeE5DQkxaVzVxYVNCVmNuVnphR2x0WVNCOElHdHFkWEl1WjJsMGFIVmlMbU52YlM5cWMzSnpZWE5wWjI0dmJHbGpaVzV6WlZ4dUlDb3ZYRzVwWmloMGVYQmxiMllnUzBwVlVqMDlYQ0oxYm1SbFptbHVaV1JjSW54OElVdEtWVklwZTB0S1ZWSTllMzE5YVdZb2RIbHdaVzltSUV0S1ZWSXVZWE51TVQwOVhDSjFibVJsWm1sdVpXUmNJbng4SVV0S1ZWSXVZWE51TVNsN1MwcFZVaTVoYzI0eFBYdDlmV2xtS0hSNWNHVnZaaUJMU2xWU0xtRnpiakV1WTJGa1pYTTlQVndpZFc1a1pXWnBibVZrWENKOGZDRkxTbFZTTG1GemJqRXVZMkZrWlhNcGUwdEtWVkl1WVhOdU1TNWpZV1JsY3oxN2ZYMUxTbFZTTG1GemJqRXVZMkZrWlhNdVUybG5ibUYwZFhKbFVHOXNhV041U1dSbGJuUnBabWxsY2oxbWRXNWpkR2x2YmlobEtYdExTbFZTTG1GemJqRXVZMkZrWlhNdVUybG5ibUYwZFhKbFVHOXNhV041U1dSbGJuUnBabWxsY2k1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeWs3ZEdocGN5NWhkSFJ5Vkhsd1pVOXBaRDFjSWpFdU1pNDROREF1TVRFek5UUTVMakV1T1M0eE5pNHlMakUxWENJN2RtRnlJR0k5UzBwVlVpNWhjMjR4TzNaaGNpQmtQVXRLVlZJdVlYTnVNUzVqWVdSbGN6dHBaaWgwZVhCbGIyWWdaU0U5WENKMWJtUmxabWx1WldSY0lpbDdhV1lvZEhsd1pXOW1JR1V1YjJsa1BUMWNJbk4wY21sdVoxd2lKaVowZVhCbGIyWWdaUzVvWVhOb1BUMWNJbTlpYW1WamRGd2lLWHQyWVhJZ1pqMXVaWGNnWWk1RVJWSlBZbXBsWTNSSlpHVnVkR2xtYVdWeUtIdHZhV1E2WlM1dmFXUjlLVHQyWVhJZ1lUMXVaWGNnWkM1UGRHaGxja2hoYzJoQmJHZEJibVJXWVd4MVpTaGxMbWhoYzJncE8zWmhjaUJqUFc1bGR5QmlMa1JGVWxObGNYVmxibU5sS0h0aGNuSmhlVHBiWml4aFhYMHBPM1JvYVhNdWRtRnNkV1ZNYVhOMFBWdGpYWDE5ZlR0WlFVaFBUeTVzWVc1bkxtVjRkR1Z1WkNoTFNsVlNMbUZ6YmpFdVkyRmtaWE11VTJsbmJtRjBkWEpsVUc5c2FXTjVTV1JsYm5ScFptbGxjaXhMU2xWU0xtRnpiakV1WTIxekxrRjBkSEpwWW5WMFpTazdTMHBWVWk1aGMyNHhMbU5oWkdWekxrOTBhR1Z5U0dGemFFRnNaMEZ1WkZaaGJIVmxQV1oxYm1OMGFXOXVLR0lwZTB0S1ZWSXVZWE51TVM1allXUmxjeTVQZEdobGNraGhjMmhCYkdkQmJtUldZV3gxWlM1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeWs3ZG1GeUlHRTlTMHBWVWk1aGMyNHhPM1poY2lCalBVdEtWVkl1WVhOdU1TNTROVEE1TzNSb2FYTXVaRUZzWnoxdWRXeHNPM1JvYVhNdVpFaGhjMmc5Ym5Wc2JEdDBhR2x6TG1kbGRFVnVZMjlrWldSSVpYZzlablZ1WTNScGIyNG9LWHQyWVhJZ1pEMXVaWGNnWVM1RVJWSlRaWEYxWlc1alpTaDdZWEp5WVhrNlczUm9hWE11WkVGc1p5eDBhR2x6TG1SSVlYTm9YWDBwTzNSb2FYTXVhRlJNVmoxa0xtZGxkRVZ1WTI5a1pXUklaWGdvS1R0eVpYUjFjbTRnZEdocGN5NW9WRXhXZlR0cFppaDBlWEJsYjJZZ1lpRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2FXWW9kSGx3Wlc5bUlHSXVZV3huUFQxY0luTjBjbWx1WjF3aUppWjBlWEJsYjJZZ1lpNW9ZWE5vUFQxY0luTjBjbWx1WjF3aUtYdDBhR2x6TG1SQmJHYzlibVYzSUdNdVFXeG5iM0pwZEdodFNXUmxiblJwWm1sbGNpaDdibUZ0WlRwaUxtRnNaMzBwTzNSb2FYTXVaRWhoYzJnOWJtVjNJR0V1UkVWU1QyTjBaWFJUZEhKcGJtY29lMmhsZURwaUxtaGhjMmg5S1gxOWZUdFpRVWhQVHk1c1lXNW5MbVY0ZEdWdVpDaExTbFZTTG1GemJqRXVZMkZrWlhNdVQzUm9aWEpJWVhOb1FXeG5RVzVrVm1Gc2RXVXNTMHBWVWk1aGMyNHhMa0ZUVGpGUFltcGxZM1FwTzB0S1ZWSXVZWE51TVM1allXUmxjeTVUYVdkdVlYUjFjbVZVYVcxbFUzUmhiWEE5Wm5WdVkzUnBiMjRvWXlsN1MwcFZVaTVoYzI0eExtTmhaR1Z6TGxOcFoyNWhkSFZ5WlZScGJXVlRkR0Z0Y0M1emRYQmxjbU5zWVhOekxtTnZibk4wY25WamRHOXlMbU5oYkd3b2RHaHBjeWs3ZEdocGN5NWhkSFJ5Vkhsd1pVOXBaRDFjSWpFdU1pNDROREF1TVRFek5UUTVMakV1T1M0eE5pNHlMakUwWENJN2RHaHBjeTUwYzNSSVpYZzliblZzYkR0MllYSWdZVDFMU2xWU0xtRnpiakU3YVdZb2RIbHdaVzltSUdNaFBWd2lkVzVrWldacGJtVmtYQ0lwZTJsbUtIUjVjR1Z2WmlCakxuSmxjeUU5WENKMWJtUmxabWx1WldSY0lpbDdhV1lvZEhsd1pXOW1JR011Y21WelBUMWNJbk4wY21sdVoxd2lKaVpqTG5KbGN5NXRZWFJqYUNndlhsc3dMVGxCTFVaaExXWmRLeVF2S1NsN2ZXVnNjMlY3YVdZb1l5NXlaWE1nYVc1emRHRnVZMlZ2WmlCTFNsVlNMbUZ6YmpFdVFWTk9NVTlpYW1WamRDbDdmV1ZzYzJWN2RHaHliM2RjSW5KbGN5QndZWEpoYlNCemFHRnNiQ0JpWlNCQlUwNHhUMkpxWldOMElHOXlJR2hsZUNCemRISnBibWRjSW4xOWZXbG1LSFI1Y0dWdlppQmpMblJ6ZENFOVhDSjFibVJsWm1sdVpXUmNJaWw3YVdZb2RIbHdaVzltSUdNdWRITjBQVDFjSW5OMGNtbHVaMXdpSmlaakxuUnpkQzV0WVhSamFDZ3ZYbHN3TFRsQkxVWmhMV1pkS3lRdktTbDdkbUZ5SUdJOWJtVjNJR0V1UVZOT01VOWlhbVZqZENncE8zUm9hWE11ZEhOMFNHVjRQV011ZEhOME8ySXVhRlJNVmoxMGFHbHpMblJ6ZEVobGVEdGlMbWRsZEVWdVkyOWtaV1JJWlhnb0tUdDBhR2x6TG5aaGJIVmxUR2x6ZEQxYllsMTlaV3h6Wlh0cFppaGpMblJ6ZENCcGJuTjBZVzVqWlc5bUlFdEtWVkl1WVhOdU1TNUJVMDR4VDJKcVpXTjBLWHQ5Wld4elpYdDBhSEp2ZDF3aWRITjBJSEJoY21GdElITm9ZV3hzSUdKbElFRlRUakZQWW1wbFkzUWdiM0lnYUdWNElITjBjbWx1WjF3aWZYMTlmWDA3V1VGSVQwOHViR0Z1Wnk1bGVIUmxibVFvUzBwVlVpNWhjMjR4TG1OaFpHVnpMbE5wWjI1aGRIVnlaVlJwYldWVGRHRnRjQ3hMU2xWU0xtRnpiakV1WTIxekxrRjBkSEpwWW5WMFpTazdTMHBWVWk1aGMyNHhMbU5oWkdWekxrTnZiWEJzWlhSbFEyVnlkR2xtYVdOaGRHVlNaV1p6UFdaMWJtTjBhVzl1S0dNcGUwdEtWVkl1WVhOdU1TNWpZV1JsY3k1RGIyMXdiR1YwWlVObGNuUnBabWxqWVhSbFVtVm1jeTV6ZFhCbGNtTnNZWE56TG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5azdkR2hwY3k1aGRIUnlWSGx3WlU5cFpEMWNJakV1TWk0NE5EQXVNVEV6TlRRNUxqRXVPUzR4Tmk0eUxqSXhYQ0k3ZG1GeUlHRTlTMHBWVWk1aGMyNHhPM1poY2lCaVBVdEtWVkl1WVhOdU1TNWpZV1JsY3p0MGFHbHpMbk5sZEVKNVFYSnlZWGs5Wm5WdVkzUnBiMjRvWkNsN2RHaHBjeTUyWVd4MVpVeHBjM1E5VzEwN1ptOXlLSFpoY2lCbFBUQTdaVHhrTG14bGJtZDBhRHRsS3lzcGUzWmhjaUJtUFc1bGR5QmlMazkwYUdWeVEyVnlkRWxFS0dSYlpWMHBPM1JvYVhNdWRtRnNkV1ZNYVhOMExuQjFjMmdvWmlsOWZUdHBaaWgwZVhCbGIyWWdZeUU5WENKMWJtUmxabWx1WldSY0lpbDdhV1lvZEhsd1pXOW1JR005UFZ3aWIySnFaV04wWENJbUpuUjVjR1Z2WmlCakxteGxibWQwYUQwOVhDSnVkVzFpWlhKY0lpbDdkR2hwY3k1elpYUkNlVUZ5Y21GNUtHTXBmWDE5TzFsQlNFOVBMbXhoYm1jdVpYaDBaVzVrS0V0S1ZWSXVZWE51TVM1allXUmxjeTVEYjIxd2JHVjBaVU5sY25ScFptbGpZWFJsVW1WbWN5eExTbFZTTG1GemJqRXVZMjF6TGtGMGRISnBZblYwWlNrN1MwcFZVaTVoYzI0eExtTmhaR1Z6TGs5MGFHVnlRMlZ5ZEVsRVBXWjFibU4wYVc5dUtHUXBlMHRLVlZJdVlYTnVNUzVqWVdSbGN5NVBkR2hsY2tObGNuUkpSQzV6ZFhCbGNtTnNZWE56TG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5azdkbUZ5SUdFOVMwcFZVaTVoYzI0eE8zWmhjaUJqUFV0S1ZWSXVZWE51TVM1amJYTTdkbUZ5SUdJOVMwcFZVaTVoYzI0eExtTmhaR1Z6TzNSb2FYTXVhR0Z6U1hOemRXVnlVMlZ5YVdGc1BYUnlkV1U3ZEdocGN5NWtUM1JvWlhKRFpYSjBTR0Z6YUQxdWRXeHNPM1JvYVhNdVpFbHpjM1ZsY2xObGNtbGhiRDF1ZFd4c08zUm9hWE11YzJWMFFubERaWEowVUVWTlBXWjFibU4wYVc5dUtHVXBlM1JvYVhNdVpFOTBhR1Z5UTJWeWRFaGhjMmc5Ym1WM0lHSXVUM1JvWlhKSVlYTm9LR1VwTzJsbUtIUm9hWE11YUdGelNYTnpkV1Z5VTJWeWFXRnNLWHQwYUdsekxtUkpjM04xWlhKVFpYSnBZV3c5Ym1WM0lHTXVTWE56ZFdWeVFXNWtVMlZ5YVdGc1RuVnRZbVZ5S0dVcGZYMDdkR2hwY3k1blpYUkZibU52WkdWa1NHVjRQV1oxYm1OMGFXOXVLQ2w3YVdZb2RHaHBjeTVvVkV4V0lUMXVkV3hzS1h0eVpYUjFjbTRnZEdocGN5NW9WRXhXZldsbUtIUm9hWE11WkU5MGFHVnlRMlZ5ZEVoaGMyZzlQVzUxYkd3cGUzUm9jbTkzWENKdmRHaGxja05sY25SSVlYTm9JRzV2ZENCelpYUmNJbjEyWVhJZ1pUMWJkR2hwY3k1a1QzUm9aWEpEWlhKMFNHRnphRjA3YVdZb2RHaHBjeTVrU1hOemRXVnlVMlZ5YVdGc0lUMXVkV3hzS1h0bExuQjFjMmdvZEdocGN5NWtTWE56ZFdWeVUyVnlhV0ZzS1gxMllYSWdaajF1WlhjZ1lTNUVSVkpUWlhGMVpXNWpaU2g3WVhKeVlYazZaWDBwTzNSb2FYTXVhRlJNVmoxbUxtZGxkRVZ1WTI5a1pXUklaWGdvS1R0eVpYUjFjbTRnZEdocGN5NW9WRXhXZlR0cFppaDBlWEJsYjJZZ1pDRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2FXWW9kSGx3Wlc5bUlHUTlQVndpYzNSeWFXNW5YQ0ltSm1RdWFXNWtaWGhQWmloY0lpMHRMUzB0UWtWSFNVNGdYQ0lwSVQwdE1TbDdkR2hwY3k1elpYUkNlVU5sY25SUVJVMG9aQ2w5YVdZb2RIbHdaVzltSUdROVBWd2liMkpxWldOMFhDSXBlMmxtS0dRdWFHRnphWE05UFQxbVlXeHpaU2w3ZEdocGN5NW9ZWE5KYzNOMVpYSlRaWEpwWVd3OVptRnNjMlY5YVdZb2RIbHdaVzltSUdRdVkyVnlkRDA5WENKemRISnBibWRjSWlsN2RHaHBjeTV6WlhSQ2VVTmxjblJRUlUwb1pDNWpaWEowS1gxOWZYMDdXVUZJVDA4dWJHRnVaeTVsZUhSbGJtUW9TMHBWVWk1aGMyNHhMbU5oWkdWekxrOTBhR1Z5UTJWeWRFbEVMRXRLVlZJdVlYTnVNUzVCVTA0eFQySnFaV04wS1R0TFNsVlNMbUZ6YmpFdVkyRmtaWE11VDNSb1pYSklZWE5vUFdaMWJtTjBhVzl1S0dNcGUwdEtWVkl1WVhOdU1TNWpZV1JsY3k1UGRHaGxja2hoYzJndWMzVndaWEpqYkdGemN5NWpiMjV6ZEhKMVkzUnZjaTVqWVd4c0tIUm9hWE1wTzNaaGNpQmhQVXRLVlZJdVlYTnVNVHQyWVhJZ1lqMUxTbFZTTG1GemJqRXVZMkZrWlhNN2RHaHBjeTVoYkdjOVhDSnphR0V5TlRaY0lqdDBhR2x6TG1SUGRHaGxja2hoYzJnOWJuVnNiRHQwYUdsekxuTmxkRUo1UTJWeWRGQkZUVDFtZFc1amRHbHZiaWhrS1h0cFppaGtMbWx1WkdWNFQyWW9YQ0l0TFMwdExVSkZSMGxPSUZ3aUtUMDlMVEVwZTNSb2NtOTNYQ0pqWlhKMFVFVk5JRzV2ZENCMGJ5QnpaV1Z0SUZCRlRTQm1iM0p0WVhSY0luMTJZWElnWlQxWU5UQTVMbkJsYlZSdlNHVjRLR1FwTzNaaGNpQm1QVXRLVlZJdVkzSjVjSFJ2TGxWMGFXd3VhR0Z6YUVobGVDaGxMSFJvYVhNdVlXeG5LVHQwYUdsekxtUlBkR2hsY2toaGMyZzlibVYzSUdJdVQzUm9aWEpJWVhOb1FXeG5RVzVrVm1Gc2RXVW9lMkZzWnpwMGFHbHpMbUZzWnl4b1lYTm9PbVo5S1gwN2RHaHBjeTVuWlhSRmJtTnZaR1ZrU0dWNFBXWjFibU4wYVc5dUtDbDdhV1lvZEdocGN5NWtUM1JvWlhKSVlYTm9QVDF1ZFd4c0tYdDBhSEp2ZDF3aVQzUm9aWEpJWVhOb0lHNXZkQ0J6WlhSY0luMXlaWFIxY200Z2RHaHBjeTVrVDNSb1pYSklZWE5vTG1kbGRFVnVZMjlrWldSSVpYZ29LWDA3YVdZb2RIbHdaVzltSUdNaFBWd2lkVzVrWldacGJtVmtYQ0lwZTJsbUtIUjVjR1Z2WmlCalBUMWNJbk4wY21sdVoxd2lLWHRwWmloakxtbHVaR1Y0VDJZb1hDSXRMUzB0TFVKRlIwbE9JRndpS1NFOUxURXBlM1JvYVhNdWMyVjBRbmxEWlhKMFVFVk5LR01wZldWc2MyVjdhV1lvWXk1dFlYUmphQ2d2WGxzd0xUbEJMVVpoTFdaZEt5UXZLU2w3ZEdocGN5NWtUM1JvWlhKSVlYTm9QVzVsZHlCaExrUkZVazlqZEdWMFUzUnlhVzVuS0h0b1pYZzZZMzBwZldWc2MyVjdkR2h5YjNkY0luVnVjM1Z3Y0c5eWRHVmtJSE4wY21sdVp5QjJZV3gxWlNCbWIzSWdjR0Z5WVcxelhDSjlmWDFsYkhObGUybG1LSFI1Y0dWdlppQmpQVDFjSW05aWFtVmpkRndpS1h0cFppaDBlWEJsYjJZZ1l5NWpaWEowUFQxY0luTjBjbWx1WjF3aUtYdHBaaWgwZVhCbGIyWWdZeTVoYkdjOVBWd2ljM1J5YVc1blhDSXBlM1JvYVhNdVlXeG5QV011WVd4bmZYUm9hWE11YzJWMFFubERaWEowVUVWTktHTXVZMlZ5ZENsOVpXeHpaWHQwYUdsekxtUlBkR2hsY2toaGMyZzlibVYzSUdJdVQzUm9aWEpJWVhOb1FXeG5RVzVrVm1Gc2RXVW9ZeWw5ZlgxOWZUdFpRVWhQVHk1c1lXNW5MbVY0ZEdWdVpDaExTbFZTTG1GemJqRXVZMkZrWlhNdVQzUm9aWEpJWVhOb0xFdEtWVkl1WVhOdU1TNUJVMDR4VDJKcVpXTjBLVHRMU2xWU0xtRnpiakV1WTJGa1pYTXVRMEZrUlZOVmRHbHNQVzVsZHlCbWRXNWpkR2x2YmlncGUzMDdTMHBWVWk1aGMyNHhMbU5oWkdWekxrTkJaRVZUVlhScGJDNWhaR1JUYVdkVVV6MW1kVzVqZEdsdmJpaGpMR0lzWVNsN2ZUdExTbFZTTG1GemJqRXVZMkZrWlhNdVEwRmtSVk5WZEdsc0xuQmhjbk5sVTJsbmJtVmtSR0YwWVVadmNrRmtaR2x1WjFWdWMybG5ibVZrUFdaMWJtTjBhVzl1S0dRcGUzWmhjaUJ4UFV0S1ZWSXVZWE51TVR0MllYSWdjRDFMU2xWU0xtRnpiakV1WTIxek8zWmhjaUJqUFV0S1ZWSXVZWE51TVM1allXUmxjeTVEUVdSRlUxVjBhV3c3ZG1GeUlHRTllMzA3YVdZb1FWTk9NVWhGV0M1blpYUkVaV05sYm1SaGJuUklaWGhVVEZaQ2VVNTBhRXhwYzNRb1pDd3dMRnN3WFNraFBWd2lNRFl3T1RKaE9EWTBPRGcyWmpjd1pEQXhNRGN3TWx3aUtYdDBhSEp2ZDF3aWFHVjRJR2x6SUc1dmRDQkRUVk1nVTJsbmJtVmtSR0YwWVZ3aWZYWmhjaUJ6UFVGVFRqRklSVmd1WjJWMFJHVmpaVzVrWVc1MFNXNWtaWGhDZVU1MGFFeHBjM1FvWkN3d0xGc3hMREJkS1R0MllYSWdZajFCVTA0eFNFVllMbWRsZEZCdmMwRnljbUY1VDJaRGFHbHNaSEpsYmw5QmRFOWlhaWhrTEhNcE8ybG1LR0l1YkdWdVozUm9QRFFwZTNSb2NtOTNYQ0p1ZFcwZ2IyWWdVMmxuYm1Wa1JHRjBZU0JsYkdWdElITm9ZV3hzSUdKbElEUWdZWFFnYkdWaGMzUmNJbjEyWVhJZ1pqMWlMbk5vYVdaMEtDazdZUzUyWlhKemFXOXVQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWlVURlpmUVhSUFltb29aQ3htS1R0MllYSWdiRDFpTG5Ob2FXWjBLQ2s3WVM1aGJHZHpQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWlVURlpmUVhSUFltb29aQ3hzS1R0MllYSWdiVDFpTG5Ob2FXWjBLQ2s3WVM1bGJtTmhjR052Ym5SbGJuUTlRVk5PTVVoRldDNW5aWFJJWlhoUFpsUk1WbDlCZEU5aWFpaGtMRzBwTzJFdVkyVnlkSE05Ym5Wc2JEdGhMbkpsZG5NOWJuVnNiRHRoTG5OcFBWdGRPM1poY2lCdVBXSXVjMmhwWm5Rb0tUdHBaaWhrTG5OMVluTjBjaWh1TERJcFBUMWNJbUV3WENJcGUyRXVZMlZ5ZEhNOVFWTk9NVWhGV0M1blpYUklaWGhQWmxSTVZsOUJkRTlpYWloa0xHNHBPMjQ5WWk1emFHbG1kQ2dwZldsbUtHUXVjM1ZpYzNSeUtHNHNNaWs5UFZ3aVlURmNJaWw3WVM1eVpYWnpQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWlVURlpmUVhSUFltb29aQ3h1S1R0dVBXSXVjMmhwWm5Rb0tYMTJZWElnYXoxdU8ybG1LR1F1YzNWaWMzUnlLR3NzTWlraFBWd2lNekZjSWlsN2RHaHliM2RjSWtOaGJpZDBJR1pwYm1RZ2MybG5ibVZ5U1c1bWIzTmNJbjEyWVhJZ2FqMUJVMDR4U0VWWUxtZGxkRkJ2YzBGeWNtRjVUMlpEYUdsc1pISmxibDlCZEU5aWFpaGtMR3NwTzJadmNpaDJZWElnYUQwd08yZzhhaTVzWlc1bmRHZzdhQ3NyS1h0MllYSWdiejFxVzJoZE8zWmhjaUJsUFdNdWNHRnljMlZUYVdkdVpYSkpibVp2Um05eVFXUmthVzVuVlc1emFXZHVaV1FvWkN4dkxHZ3BPMkV1YzJsYmFGMDlaWDEyWVhJZ1p6MXVkV3hzTzJFdWIySnFQVzVsZHlCd0xsTnBaMjVsWkVSaGRHRW9LVHRuUFc1bGR5QnhMa0ZUVGpGUFltcGxZM1FvS1R0bkxtaFVURlk5WVM1MlpYSnphVzl1TzJFdWIySnFMbVJEVFZOV1pYSnphVzl1UFdjN1p6MXVaWGNnY1M1QlUwNHhUMkpxWldOMEtDazdaeTVvVkV4V1BXRXVZV3huY3p0aExtOWlhaTVrUkdsblpYTjBRV3huY3oxbk8yYzlibVYzSUhFdVFWTk9NVTlpYW1WamRDZ3BPMmN1YUZSTVZqMWhMbVZ1WTJGd1kyOXVkR1Z1ZER0aExtOWlhaTVrUlc1allYQkRiMjUwWlc1MFNXNW1iejFuTzJjOWJtVjNJSEV1UVZOT01VOWlhbVZqZENncE8yY3VhRlJNVmoxaExtTmxjblJ6TzJFdWIySnFMbVJEWlhKMGN6MW5PMkV1YjJKcUxuTnBaMjVsY2tsdVptOU1hWE4wUFZ0ZE8yWnZjaWgyWVhJZ2FEMHdPMmc4WVM1emFTNXNaVzVuZEdnN2FDc3JLWHRoTG05aWFpNXphV2R1WlhKSmJtWnZUR2x6ZEM1d2RYTm9LR0V1YzJsYmFGMHViMkpxS1gxeVpYUjFjbTRnWVgwN1MwcFZVaTVoYzI0eExtTmhaR1Z6TGtOQlpFVlRWWFJwYkM1d1lYSnpaVk5wWjI1bGNrbHVabTlHYjNKQlpHUnBibWRWYm5OcFoyNWxaRDFtZFc1amRHbHZiaWhrTEdzc1lTbDdkbUZ5SUcwOVMwcFZVaTVoYzI0eE8zWmhjaUJzUFV0S1ZWSXVZWE51TVM1amJYTTdkbUZ5SUdJOWUzMDdkbUZ5SUdVOVFWTk9NVWhGV0M1blpYUlFiM05CY25KaGVVOW1RMmhwYkdSeVpXNWZRWFJQWW1vb1pDeHJLVHRwWmlobExteGxibWQwYUNFOU5pbDdkR2h5YjNkY0ltNXZkQ0J6ZFhCd2IzSjBaV1FnYVhSbGJYTWdabTl5SUZOcFoyNWxja2x1Wm04Z0tDRTlOaWxjSW4xMllYSWdaajFsTG5Ob2FXWjBLQ2s3WWk1MlpYSnphVzl1UFVGVFRqRklSVmd1WjJWMFNHVjRUMlpVVEZaZlFYUlBZbW9vWkN4bUtUdDJZWElnYmoxbExuTm9hV1owS0NrN1lpNXphVDFCVTA0eFNFVllMbWRsZEVobGVFOW1WRXhXWDBGMFQySnFLR1FzYmlrN2RtRnlJR2c5WlM1emFHbG1kQ2dwTzJJdVpHbG5ZV3huUFVGVFRqRklSVmd1WjJWMFNHVjRUMlpVVEZaZlFYUlBZbW9vWkN4b0tUdDJZWElnWXoxbExuTm9hV1owS0NrN1lpNXpZWFIwY25NOVFWTk9NVWhGV0M1blpYUklaWGhQWmxSTVZsOUJkRTlpYWloa0xHTXBPM1poY2lCcFBXVXVjMmhwWm5Rb0tUdGlMbk5wWjJGc1p6MUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZFeFdYMEYwVDJKcUtHUXNhU2s3ZG1GeUlHbzlaUzV6YUdsbWRDZ3BPMkl1YzJsblBVRlRUakZJUlZndVoyVjBTR1Y0VDJaVVRGWmZRWFJQWW1vb1pDeHFLVHRpTG5OcFozWmhiRDFCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaGtMR29wTzNaaGNpQm5QVzUxYkd3N1lpNXZZbW85Ym1WM0lHd3VVMmxuYm1WeVNXNW1ieWdwTzJjOWJtVjNJRzB1UVZOT01VOWlhbVZqZENncE8yY3VhRlJNVmoxaUxuWmxjbk5wYjI0N1lpNXZZbW91WkVOTlUxWmxjbk5wYjI0OVp6dG5QVzVsZHlCdExrRlRUakZQWW1wbFkzUW9LVHRuTG1oVVRGWTlZaTV6YVR0aUxtOWlhaTVrVTJsbmJtVnlTV1JsYm5ScFptbGxjajFuTzJjOWJtVjNJRzB1UVZOT01VOWlhbVZqZENncE8yY3VhRlJNVmoxaUxtUnBaMkZzWnp0aUxtOWlhaTVrUkdsblpYTjBRV3huYjNKcGRHaHRQV2M3WnoxdVpYY2diUzVCVTA0eFQySnFaV04wS0NrN1p5NW9WRXhXUFdJdWMyRjBkSEp6TzJJdWIySnFMbVJUYVdkdVpXUkJkSFJ5Y3oxbk8yYzlibVYzSUcwdVFWTk9NVTlpYW1WamRDZ3BPMmN1YUZSTVZqMWlMbk5wWjJGc1p6dGlMbTlpYWk1a1UybG5RV3huUFdjN1p6MXVaWGNnYlM1QlUwNHhUMkpxWldOMEtDazdaeTVvVkV4V1BXSXVjMmxuTzJJdWIySnFMbVJUYVdjOVp6dGlMbTlpYWk1a1ZXNXphV2R1WldSQmRIUnljejF1WlhjZ2JDNUJkSFJ5YVdKMWRHVk1hWE4wS0NrN2NtVjBkWEp1SUdKOU8xeHVMeW9oSUdGemJqRmpjM0l0TVM0d0xqQXVhbk1nS0dNcElESXdNVFVnUzJWdWFta2dWWEoxYzJocGJXRWdmQ0JyYW5WeUxtZHBkR2gxWWk1amIyMHZhbk55YzJGemFXZHVMMnhwWTJWdWMyVmNiaUFxTDF4dWFXWW9kSGx3Wlc5bUlFdEtWVkl1WVhOdU1TNWpjM0k5UFZ3aWRXNWtaV1pwYm1Wa1hDSjhmQ0ZMU2xWU0xtRnpiakV1WTNOeUtYdExTbFZTTG1GemJqRXVZM055UFh0OWZVdEtWVkl1WVhOdU1TNWpjM0l1UTJWeWRHbG1hV05oZEdsdmJsSmxjWFZsYzNROVpuVnVZM1JwYjI0b1ppbDdTMHBWVWk1aGMyNHhMbU56Y2k1RFpYSjBhV1pwWTJGMGFXOXVVbVZ4ZFdWemRDNXpkWEJsY21Oc1lYTnpMbU52Ym5OMGNuVmpkRzl5TG1OaGJHd29kR2hwY3lrN2RtRnlJR0k5Ym5Wc2JEdDJZWElnWkQxdWRXeHNPM1poY2lCbFBXNTFiR3c3ZG1GeUlHTTliblZzYkR0MllYSWdZVDF1ZFd4c08zUm9hWE11YzJsbmJqMW1kVzVqZEdsdmJpaHBMR2dwZTJsbUtIUm9hWE11Y0hKMlMyVjVQVDF1ZFd4c0tYdDBhR2x6TG5CeWRrdGxlVDFvZlhSb2FYTXVZWE51TVZOcFoyNWhkSFZ5WlVGc1p6MXVaWGNnUzBwVlVpNWhjMjR4TG5nMU1Ea3VRV3huYjNKcGRHaHRTV1JsYm5ScFptbGxjaWg3Ym1GdFpUcHBmU2s3YzJsblBXNWxkeUJMU2xWU0xtTnllWEIwYnk1VGFXZHVZWFIxY21Vb2UyRnNaenBwZlNrN2MybG5MbWx1YVhSVGFXZHVLSFJvYVhNdWNISjJTMlY1S1R0emFXY3VkWEJrWVhSbFNHVjRLSFJvYVhNdVlYTnVNVU5UVWtsdVptOHVaMlYwUlc1amIyUmxaRWhsZUNncEtUdDBhR2x6TG1obGVGTnBaejF6YVdjdWMybG5iaWdwTzNSb2FYTXVZWE51TVZOcFp6MXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVrSnBkRk4wY21sdVp5aDdhR1Y0T2x3aU1EQmNJaXQwYUdsekxtaGxlRk5wWjMwcE8zWmhjaUJuUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTVTJWeGRXVnVZMlVvZTJGeWNtRjVPbHQwYUdsekxtRnpiakZEVTFKSmJtWnZMSFJvYVhNdVlYTnVNVk5wWjI1aGRIVnlaVUZzWnl4MGFHbHpMbUZ6YmpGVGFXZGRmU2s3ZEdocGN5NW9WRXhXUFdjdVoyVjBSVzVqYjJSbFpFaGxlQ2dwTzNSb2FYTXVhWE5OYjJScFptbGxaRDFtWVd4elpYMDdkR2hwY3k1blpYUlFSVTFUZEhKcGJtYzlablZ1WTNScGIyNG9LWHQyWVhJZ1p6MUxTbFZTTG1GemJqRXVRVk5PTVZWMGFXd3VaMlYwVUVWTlUzUnlhVzVuUm5KdmJVaGxlQ2gwYUdsekxtZGxkRVZ1WTI5a1pXUklaWGdvS1N4Y0lrTkZVbFJKUmtsRFFWUkZJRkpGVVZWRlUxUmNJaWs3Y21WMGRYSnVJR2Q5TzNSb2FYTXVaMlYwUlc1amIyUmxaRWhsZUQxbWRXNWpkR2x2YmlncGUybG1LSFJvYVhNdWFYTk5iMlJwWm1sbFpEMDlabUZzYzJVbUpuUm9hWE11YUZSTVZpRTliblZzYkNsN2NtVjBkWEp1SUhSb2FYTXVhRlJNVm4xMGFISnZkMXdpYm05MElITnBaMjVsWkNCNVpYUmNJbjA3YVdZb2RIbHdaVzltSUdZaFBWd2lkVzVrWldacGJtVmtYQ0lwZTJsbUtIUjVjR1Z2WmlCbUxtTnpjbWx1Wm04aFBWd2lkVzVrWldacGJtVmtYQ0lwZTNSb2FYTXVZWE51TVVOVFVrbHVabTg5Wmk1amMzSnBibVp2ZlgxOU8xbEJTRTlQTG14aGJtY3VaWGgwWlc1a0tFdEtWVkl1WVhOdU1TNWpjM0l1UTJWeWRHbG1hV05oZEdsdmJsSmxjWFZsYzNRc1MwcFZVaTVoYzI0eExrRlRUakZQWW1wbFkzUXBPMHRLVlZJdVlYTnVNUzVqYzNJdVEyVnlkR2xtYVdOaGRHbHZibEpsY1hWbGMzUkpibVp2UFdaMWJtTjBhVzl1S0dFcGUwdEtWVkl1WVhOdU1TNWpjM0l1UTJWeWRHbG1hV05oZEdsdmJsSmxjWFZsYzNSSmJtWnZMbk4xY0dWeVkyeGhjM011WTI5dWMzUnlkV04wYjNJdVkyRnNiQ2gwYUdsektUdDBhR2x6TGw5cGJtbDBhV0ZzYVhwbFBXWjFibU4wYVc5dUtDbDdkR2hwY3k1aGMyNHhRWEp5WVhrOWJtVjNJRUZ5Y21GNUtDazdkR2hwY3k1aGMyNHhWbVZ5YzJsdmJqMXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVrbHVkR1ZuWlhJb2Uxd2lhVzUwWENJNk1IMHBPM1JvYVhNdVlYTnVNVk4xWW1wbFkzUTliblZzYkR0MGFHbHpMbUZ6YmpGVGRXSnFVRXRsZVQxdWRXeHNPM1JvYVhNdVpYaDBaVzV6YVc5dWMwRnljbUY1UFc1bGR5QkJjbkpoZVNncGZUdDBhR2x6TG5ObGRGTjFZbXBsWTNSQ2VWQmhjbUZ0UFdaMWJtTjBhVzl1S0dJcGUzUm9hWE11WVhOdU1WTjFZbXBsWTNROWJtVjNJRXRLVlZJdVlYTnVNUzU0TlRBNUxsZzFNREJPWVcxbEtHSXBmVHQwYUdsekxuTmxkRk4xWW1wbFkzUlFkV0pzYVdOTFpYbENlVWRsZEV0bGVUMW1kVzVqZEdsdmJpaGpLWHQyWVhJZ1lqMUxSVmxWVkVsTUxtZGxkRXRsZVNoaktUdDBhR2x6TG1GemJqRlRkV0pxVUV0bGVUMXVaWGNnUzBwVlVpNWhjMjR4TG5nMU1Ea3VVM1ZpYW1WamRGQjFZbXhwWTB0bGVVbHVabThvWWlsOU8zUm9hWE11WjJWMFJXNWpiMlJsWkVobGVEMW1kVzVqZEdsdmJpZ3BlM1JvYVhNdVlYTnVNVUZ5Y21GNVBXNWxkeUJCY25KaGVTZ3BPM1JvYVhNdVlYTnVNVUZ5Y21GNUxuQjFjMmdvZEdocGN5NWhjMjR4Vm1WeWMybHZiaWs3ZEdocGN5NWhjMjR4UVhKeVlYa3VjSFZ6YUNoMGFHbHpMbUZ6YmpGVGRXSnFaV04wS1R0MGFHbHpMbUZ6YmpGQmNuSmhlUzV3ZFhOb0tIUm9hWE11WVhOdU1WTjFZbXBRUzJWNUtUdDJZWElnWXoxdVpYY2dTMHBWVWk1aGMyNHhMa1JGVWxObGNYVmxibU5sS0h0aGNuSmhlVHAwYUdsekxtVjRkR1Z1YzJsdmJuTkJjbkpoZVgwcE8zWmhjaUJpUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTVkdGbloyVmtUMkpxWldOMEtIdGxlSEJzYVdOcGREcG1ZV3h6WlN4MFlXYzZYQ0poTUZ3aUxHOWlhanBqZlNrN2RHaHBjeTVoYzI0eFFYSnlZWGt1Y0hWemFDaGlLVHQyWVhJZ1pEMXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVsTmxjWFZsYm1ObEtIdGhjbkpoZVRwMGFHbHpMbUZ6YmpGQmNuSmhlWDBwTzNSb2FYTXVhRlJNVmoxa0xtZGxkRVZ1WTI5a1pXUklaWGdvS1R0MGFHbHpMbWx6VFc5a2FXWnBaV1E5Wm1Gc2MyVTdjbVYwZFhKdUlIUm9hWE11YUZSTVZuMDdkR2hwY3k1ZmFXNXBkR2xoYkdsNlpTZ3BmVHRaUVVoUFR5NXNZVzVuTG1WNGRHVnVaQ2hMU2xWU0xtRnpiakV1WTNOeUxrTmxjblJwWm1sallYUnBiMjVTWlhGMVpYTjBTVzVtYnl4TFNsVlNMbUZ6YmpFdVFWTk9NVTlpYW1WamRDazdTMHBWVWk1aGMyNHhMbU56Y2k1RFUxSlZkR2xzUFc1bGR5Qm1kVzVqZEdsdmJpZ3BlMzA3UzBwVlVpNWhjMjR4TG1OemNpNURVMUpWZEdsc0xtNWxkME5UVWxCRlRUMW1kVzVqZEdsdmJpaG1LWHQyWVhJZ1l6MUxTbFZTTG1GemJqRXVZM055TzJsbUtHWXVjM1ZpYW1WamREMDlQWFZ1WkdWbWFXNWxaQ2w3ZEdoeWIzZGNJbkJoY21GdFpYUmxjaUJ6ZFdKcVpXTjBJSFZ1WkdWbWFXNWxaRndpZldsbUtHWXVjMkpxY0hWaWEyVjVQVDA5ZFc1a1pXWnBibVZrS1h0MGFISnZkMXdpY0dGeVlXMWxkR1Z5SUhOaWFuQjFZbXRsZVNCMWJtUmxabWx1WldSY0luMXBaaWhtTG5OcFoyRnNaejA5UFhWdVpHVm1hVzVsWkNsN2RHaHliM2RjSW5CaGNtRnRaWFJsY2lCemFXZGhiR2NnZFc1a1pXWnBibVZrWENKOWFXWW9aaTV6WW1wd2NuWnJaWGs5UFQxMWJtUmxabWx1WldRcGUzUm9jbTkzWENKd1lYSmhiV1YwWlhJZ2MySnFjSFZpYTJWNUlIVnVaR1ZtYVc1bFpGd2lmWFpoY2lCaVBXNWxkeUJqTGtObGNuUnBabWxqWVhScGIyNVNaWEYxWlhOMFNXNW1ieWdwTzJJdWMyVjBVM1ZpYW1WamRFSjVVR0Z5WVcwb1ppNXpkV0pxWldOMEtUdGlMbk5sZEZOMVltcGxZM1JRZFdKc2FXTkxaWGxDZVVkbGRFdGxlU2htTG5OaWFuQjFZbXRsZVNrN2RtRnlJR1E5Ym1WM0lHTXVRMlZ5ZEdsbWFXTmhkR2x2YmxKbGNYVmxjM1FvZTJOemNtbHVabTg2WW4wcE8zWmhjaUJoUFV0RldWVlVTVXd1WjJWMFMyVjVLR1l1YzJKcWNISjJhMlY1S1R0a0xuTnBaMjRvWmk1emFXZGhiR2NzWVNrN2RtRnlJR1U5WkM1blpYUlFSVTFUZEhKcGJtY29LVHR5WlhSMWNtNGdaWDA3WEc0dktpRWdZbUZ6WlRZMGVDMHhMakV1TmlBb1l5a2dNakF4TWkweU1ERTFJRXRsYm1wcElGVnlkWE5vYVcxaElId2dhMnAxY2k1bmFYUm9kV0l1WTI5dEwycHpjbk5oYzJsbmJpOXNhV05sYm5ObFhHNGdLaTljYm1aMWJtTjBhVzl1SUVKaGMyVTJOSGdvS1h0OVpuVnVZM1JwYjI0Z2MzUnZRa0VvWkNsN2RtRnlJR0k5Ym1WM0lFRnljbUY1S0NrN1ptOXlLSFpoY2lCalBUQTdZenhrTG14bGJtZDBhRHRqS3lzcGUySmJZMTA5WkM1amFHRnlRMjlrWlVGMEtHTXBmWEpsZEhWeWJpQmlmV1oxYm1OMGFXOXVJRUpCZEc5ektHSXBlM1poY2lCa1BWd2lYQ0k3Wm05eUtIWmhjaUJqUFRBN1l6eGlMbXhsYm1kMGFEdGpLeXNwZTJROVpDdFRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR0piWTEwcGZYSmxkSFZ5YmlCa2ZXWjFibU4wYVc5dUlFSkJkRzlvWlhnb1lpbDdkbUZ5SUdVOVhDSmNJanRtYjNJb2RtRnlJR1E5TUR0a1BHSXViR1Z1WjNSb08yUXJLeWw3ZG1GeUlHTTlZbHRrWFM1MGIxTjBjbWx1WnlneE5pazdhV1lvWXk1c1pXNW5kR2c5UFRFcGUyTTlYQ0l3WENJclkzMWxQV1VyWTMxeVpYUjFjbTRnWlgxbWRXNWpkR2x2YmlCemRHOW9aWGdvWVNsN2NtVjBkWEp1SUVKQmRHOW9aWGdvYzNSdlFrRW9ZU2twZldaMWJtTjBhVzl1SUhOMGIySTJOQ2hoS1h0eVpYUjFjbTRnYUdWNE1tSTJOQ2h6ZEc5b1pYZ29ZU2twZldaMWJtTjBhVzl1SUhOMGIySTJOSFVvWVNsN2NtVjBkWEp1SUdJMk5IUnZZalkwZFNob1pYZ3lZalkwS0hOMGIyaGxlQ2hoS1NrcGZXWjFibU4wYVc5dUlHSTJOSFYwYjNNb1lTbDdjbVYwZFhKdUlFSkJkRzl6S0dJMk5IUnZRa0VvWWpZMGRYUnZZalkwS0dFcEtTbDlablZ1WTNScGIyNGdZalkwZEc5aU5qUjFLR0VwZTJFOVlTNXlaWEJzWVdObEtDOWNYRDB2Wnl4Y0lsd2lLVHRoUFdFdWNtVndiR0ZqWlNndlhGd3JMMmNzWENJdFhDSXBPMkU5WVM1eVpYQnNZV05sS0M5Y1hDOHZaeXhjSWw5Y0lpazdjbVYwZFhKdUlHRjlablZ1WTNScGIyNGdZalkwZFhSdllqWTBLR0VwZTJsbUtHRXViR1Z1WjNSb0pUUTlQVElwZTJFOVlTdGNJajA5WENKOVpXeHpaWHRwWmloaExteGxibWQwYUNVMFBUMHpLWHRoUFdFclhDSTlYQ0o5ZldFOVlTNXlaWEJzWVdObEtDOHRMMmNzWENJclhDSXBPMkU5WVM1eVpYQnNZV05sS0M5ZkwyY3NYQ0l2WENJcE8zSmxkSFZ5YmlCaGZXWjFibU4wYVc5dUlHaGxlSFJ2WWpZMGRTaGhLWHRwWmloaExteGxibWQwYUNVeVBUMHhLWHRoUFZ3aU1Gd2lLMkY5Y21WMGRYSnVJR0kyTkhSdllqWTBkU2hvWlhneVlqWTBLR0VwS1gxbWRXNWpkR2x2YmlCaU5qUjFkRzlvWlhnb1lTbDdjbVYwZFhKdUlHSTJOSFJ2YUdWNEtHSTJOSFYwYjJJMk5DaGhLU2w5ZG1GeUlIVjBaamgwYjJJMk5IVXNZalkwZFhSdmRYUm1PRHRwWmloMGVYQmxiMllnUW5WbVptVnlQVDA5WENKbWRXNWpkR2x2Ymx3aUtYdDFkR1k0ZEc5aU5qUjFQV1oxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJpTmpSMGIySTJOSFVvYm1WM0lFSjFabVpsY2loaExGd2lkWFJtT0Z3aUtTNTBiMU4wY21sdVp5aGNJbUpoYzJVMk5Gd2lLU2w5TzJJMk5IVjBiM1YwWmpnOVpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlHNWxkeUJDZFdabVpYSW9ZalkwZFhSdllqWTBLR0VwTEZ3aVltRnpaVFkwWENJcExuUnZVM1J5YVc1bktGd2lkWFJtT0Z3aUtYMTlaV3h6Wlh0MWRHWTRkRzlpTmpSMVBXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQm9aWGgwYjJJMk5IVW9kWEpwWTIxd2RHOW9aWGdvWlc1amIyUmxWVkpKUTI5dGNHOXVaVzUwUVd4c0tHRXBLU2w5TzJJMk5IVjBiM1YwWmpnOVpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaG9aWGgwYjNWeWFXTnRjQ2hpTmpSMWRHOW9aWGdvWVNrcEtYMTlablZ1WTNScGIyNGdkWFJtT0hSdllqWTBLR0VwZTNKbGRIVnliaUJvWlhneVlqWTBLSFZ5YVdOdGNIUnZhR1Y0S0dWdVkyOWtaVlZTU1VOdmJYQnZibVZ1ZEVGc2JDaGhLU2twZldaMWJtTjBhVzl1SUdJMk5IUnZkWFJtT0NoaEtYdHlaWFIxY200Z1pHVmpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtHaGxlSFJ2ZFhKcFkyMXdLR0kyTkhSdmFHVjRLR0VwS1NsOVpuVnVZM1JwYjI0Z2RYUm1PSFJ2YUdWNEtHRXBlM0psZEhWeWJpQjFjbWxqYlhCMGIyaGxlQ2hsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblJCYkd3b1lTa3BmV1oxYm1OMGFXOXVJR2hsZUhSdmRYUm1PQ2hoS1h0eVpYUjFjbTRnWkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwS0dobGVIUnZkWEpwWTIxd0tHRXBLWDFtZFc1amRHbHZiaUJvWlhoMGIzSnpkSElvWXlsN2RtRnlJR0k5WENKY0lqdG1iM0lvZG1GeUlHRTlNRHRoUEdNdWJHVnVaM1JvTFRFN1lTczlNaWw3WWlzOVUzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTaHdZWEp6WlVsdWRDaGpMbk4xWW5OMGNpaGhMRElwTERFMktTbDljbVYwZFhKdUlHSjlablZ1WTNScGIyNGdjbk4wY25SdmFHVjRLR01wZTNaaGNpQmhQVndpWENJN1ptOXlLSFpoY2lCaVBUQTdZanhqTG14bGJtZDBhRHRpS3lzcGUyRXJQU2hjSWpCY0lpdGpMbU5vWVhKRGIyUmxRWFFvWWlrdWRHOVRkSEpwYm1jb01UWXBLUzV6YkdsalpTZ3RNaWw5Y21WMGRYSnVJR0Y5Wm5WdVkzUnBiMjRnYUdWNGRHOWlOalFvWVNsN2NtVjBkWEp1SUdobGVESmlOalFvWVNsOVpuVnVZM1JwYjI0Z2FHVjRkRzlpTmpSdWJDaGlLWHQyWVhJZ1lUMW9aWGgwYjJJMk5DaGlLVHQyWVhJZ1l6MWhMbkpsY0d4aFkyVW9MeWd1ZXpZMGZTa3ZaeXhjSWlReFhGeHlYRnh1WENJcE8yTTlZeTV5WlhCc1lXTmxLQzljWEhKY1hHNGtMeXhjSWx3aUtUdHlaWFIxY200Z1kzMW1kVzVqZEdsdmJpQmlOalJ1YkhSdmFHVjRLR0lwZTNaaGNpQmhQV0l1Y21Wd2JHRmpaU2d2VzE0d0xUbEJMVnBoTFhwY1hDOHJQVjBxTDJjc1hDSmNJaWs3ZG1GeUlHTTlZalkwZEc5b1pYZ29ZU2s3Y21WMGRYSnVJR045Wm5WdVkzUnBiMjRnZFhKcFkyMXdkRzlvWlhnb1lTbDdjbVYwZFhKdUlHRXVjbVZ3YkdGalpTZ3ZKUzluTEZ3aVhDSXBmV1oxYm1OMGFXOXVJR2hsZUhSdmRYSnBZMjF3S0dFcGUzSmxkSFZ5YmlCaExuSmxjR3hoWTJVb0x5Z3VMaWt2Wnl4Y0lpVWtNVndpS1gxbWRXNWpkR2x2YmlCbGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5SQmJHd29ZU2w3ZG1GeUlHUTlaVzVqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLR0VwTzNaaGNpQmlQVndpWENJN1ptOXlLSFpoY2lCalBUQTdZenhrTG14bGJtZDBhRHRqS3lzcGUybG1LR1JiWTEwOVBWd2lKVndpS1h0aVBXSXJaQzV6ZFdKemRISW9ZeXd6S1R0alBXTXJNbjFsYkhObGUySTlZaXRjSWlWY0lpdHpkRzlvWlhnb1pGdGpYU2w5ZlhKbGRIVnliaUJpZldaMWJtTjBhVzl1SUc1bGQyeHBibVZmZEc5VmJtbDRLR0VwZTJFOVlTNXlaWEJzWVdObEtDOWNYSEpjWEc0dmJXY3NYQ0pjWEc1Y0lpazdjbVYwZFhKdUlHRjlablZ1WTNScGIyNGdibVYzYkdsdVpWOTBiMFJ2Y3loaEtYdGhQV0V1Y21Wd2JHRmpaU2d2WEZ4eVhGeHVMMjFuTEZ3aVhGeHVYQ0lwTzJFOVlTNXlaWEJzWVdObEtDOWNYRzR2Yldjc1hDSmNYSEpjWEc1Y0lpazdjbVYwZFhKdUlHRjlablZ1WTNScGIyNGdhVzUwWVhKNWMzUnlkRzlvWlhnb1lpbDdZajFpTG5KbGNHeGhZMlVvTDE1Y1hITXFYRnhiWEZ4ektpOHNYQ0pjSWlrN1lqMWlMbkpsY0d4aFkyVW9MMXhjY3lwY1hGMWNYSE1xSkM4c1hDSmNJaWs3WWoxaUxuSmxjR3hoWTJVb0wxeGNjeW92Wnl4Y0lsd2lLVHQwY25sN2RtRnlJR005WWk1emNHeHBkQ2d2TEM4cExtMWhjQ2htZFc1amRHbHZiaWhuTEdVc2FDbDdkbUZ5SUdZOWNHRnljMlZKYm5Rb1p5azdhV1lvWmp3d2ZId3lOVFU4WmlsN2RHaHliM2RjSW1sdWRHVm5aWElnYm05MElHbHVJSEpoYm1kbElEQXRNalUxWENKOWRtRnlJR1E5S0Z3aU1EQmNJaXRtTG5SdlUzUnlhVzVuS0RFMktTa3VjMnhwWTJVb0xUSXBPM0psZEhWeWJpQmtmU2t1YW05cGJpaGNJbHdpS1R0eVpYUjFjbTRnWTMxallYUmphQ2hoS1h0MGFISnZkMXdpYldGc1ptOXliV1ZrSUdsdWRHVm5aWElnWVhKeVlYa2djM1J5YVc1bk9pQmNJaXRoZlgxMllYSWdjM1J5WkdsbVptbGtlRDFtZFc1amRHbHZiaWhqTEdFcGUzWmhjaUJrUFdNdWJHVnVaM1JvTzJsbUtHTXViR1Z1WjNSb1BtRXViR1Z1WjNSb0tYdGtQV0V1YkdWdVozUm9mV1p2Y2loMllYSWdZajB3TzJJOFpEdGlLeXNwZTJsbUtHTXVZMmhoY2tOdlpHVkJkQ2hpS1NFOVlTNWphR0Z5UTI5a1pVRjBLR0lwS1h0eVpYUjFjbTRnWW4xOWFXWW9ZeTVzWlc1bmRHZ2hQV0V1YkdWdVozUm9LWHR5WlhSMWNtNGdaSDF5WlhSMWNtNGdMVEY5TzF4dUx5b2hJR055ZVhCMGJ5MHhMakV1T0M1cWN5QW9ZeWtnTWpBeE15MHlNREUySUV0bGJtcHBJRlZ5ZFhOb2FXMWhJSHdnYTJwMWNpNW5hWFJvZFdJdVkyOXRMMnB6Y25OaGMybG5iaTlzYVdObGJuTmxYRzRnS2k5Y2JtbG1LSFI1Y0dWdlppQkxTbFZTUFQxY0luVnVaR1ZtYVc1bFpGd2lmSHdoUzBwVlVpbDdTMHBWVWoxN2ZYMXBaaWgwZVhCbGIyWWdTMHBWVWk1amNubHdkRzg5UFZ3aWRXNWtaV1pwYm1Wa1hDSjhmQ0ZMU2xWU0xtTnllWEIwYnlsN1MwcFZVaTVqY25sd2RHODllMzE5UzBwVlVpNWpjbmx3ZEc4dVZYUnBiRDF1WlhjZ1puVnVZM1JwYjI0b0tYdDBhR2x6TGtSSlIwVlRWRWxPUms5SVJVRkVQWHR6YUdFeE9sd2lNekF5TVRNd01Ea3dOakExTW1Jd1pUQXpNREl4WVRBMU1EQXdOREUwWENJc2MyaGhNakkwT2x3aU16QXlaRE13TUdRd05qQTVOakE0TmpRNE1ERTJOVEF6TURRd01qQTBNRFV3TURBME1XTmNJaXh6YUdFeU5UWTZYQ0l6TURNeE16QXdaREEyTURrMk1EZzJORGd3TVRZMU1ETXdOREF5TURFd05UQXdNRFF5TUZ3aUxITm9ZVE00TkRwY0lqTXdOREV6TURCa01EWXdPVFl3T0RZME9EQXhOalV3TXpBME1ESXdNakExTURBd05ETXdYQ0lzYzJoaE5URXlPbHdpTXpBMU1UTXdNR1F3TmpBNU5qQTROalE0TURFMk5UQXpNRFF3TWpBek1EVXdNREEwTkRCY0lpeHRaREk2WENJek1ESXdNekF3WXpBMk1EZ3lZVGcyTkRnNE5tWTNNR1F3TWpBeU1EVXdNREEwTVRCY0lpeHRaRFU2WENJek1ESXdNekF3WXpBMk1EZ3lZVGcyTkRnNE5tWTNNR1F3TWpBMU1EVXdNREEwTVRCY0lpeHlhWEJsYldReE5qQTZYQ0l6TURJeE16QXdPVEEyTURVeVlqSTBNRE13TWpBeE1EVXdNREEwTVRSY0lpeDlPM1JvYVhNdVJFVkdRVlZNVkZCU1QxWkpSRVZTUFh0dFpEVTZYQ0pqY25sd2RHOXFjMXdpTEhOb1lURTZYQ0pqY25sd2RHOXFjMXdpTEhOb1lUSXlORHBjSW1OeWVYQjBiMnB6WENJc2MyaGhNalUyT2x3aVkzSjVjSFJ2YW5OY0lpeHphR0V6T0RRNlhDSmpjbmx3ZEc5cWMxd2lMSE5vWVRVeE1qcGNJbU55ZVhCMGIycHpYQ0lzY21sd1pXMWtNVFl3T2x3aVkzSjVjSFJ2YW5OY0lpeG9iV0ZqYldRMU9sd2lZM0o1Y0hSdmFuTmNJaXhvYldGamMyaGhNVHBjSW1OeWVYQjBiMnB6WENJc2FHMWhZM05vWVRJeU5EcGNJbU55ZVhCMGIycHpYQ0lzYUcxaFkzTm9ZVEkxTmpwY0ltTnllWEIwYjJwelhDSXNhRzFoWTNOb1lUTTRORHBjSW1OeWVYQjBiMnB6WENJc2FHMWhZM05vWVRVeE1qcGNJbU55ZVhCMGIycHpYQ0lzYUcxaFkzSnBjR1Z0WkRFMk1EcGNJbU55ZVhCMGIycHpYQ0lzVFVRMWQybDBhRkpUUVRwY0ltTnllWEIwYjJwekwycHpjbk5oWENJc1UwaEJNWGRwZEdoU1UwRTZYQ0pqY25sd2RHOXFjeTlxYzNKellWd2lMRk5JUVRJeU5IZHBkR2hTVTBFNlhDSmpjbmx3ZEc5cWN5OXFjM0p6WVZ3aUxGTklRVEkxTm5kcGRHaFNVMEU2WENKamNubHdkRzlxY3k5cWMzSnpZVndpTEZOSVFUTTROSGRwZEdoU1UwRTZYQ0pqY25sd2RHOXFjeTlxYzNKellWd2lMRk5JUVRVeE1uZHBkR2hTVTBFNlhDSmpjbmx3ZEc5cWN5OXFjM0p6WVZ3aUxGSkpVRVZOUkRFMk1IZHBkR2hTVTBFNlhDSmpjbmx3ZEc5cWN5OXFjM0p6WVZ3aUxFMUVOWGRwZEdoRlEwUlRRVHBjSW1OeWVYQjBiMnB6TDJwemNuTmhYQ0lzVTBoQk1YZHBkR2hGUTBSVFFUcGNJbU55ZVhCMGIycHpMMnB6Y25OaFhDSXNVMGhCTWpJMGQybDBhRVZEUkZOQk9sd2lZM0o1Y0hSdmFuTXZhbk55YzJGY0lpeFRTRUV5TlRaM2FYUm9SVU5FVTBFNlhDSmpjbmx3ZEc5cWN5OXFjM0p6WVZ3aUxGTklRVE00TkhkcGRHaEZRMFJUUVRwY0ltTnllWEIwYjJwekwycHpjbk5oWENJc1UwaEJOVEV5ZDJsMGFFVkRSRk5CT2x3aVkzSjVjSFJ2YW5NdmFuTnljMkZjSWl4U1NWQkZUVVF4TmpCM2FYUm9SVU5FVTBFNlhDSmpjbmx3ZEc5cWN5OXFjM0p6WVZ3aUxGTklRVEYzYVhSb1JGTkJPbHdpWTNKNWNIUnZhbk12YW5OeWMyRmNJaXhUU0VFeU1qUjNhWFJvUkZOQk9sd2lZM0o1Y0hSdmFuTXZhbk55YzJGY0lpeFRTRUV5TlRaM2FYUm9SRk5CT2x3aVkzSjVjSFJ2YW5NdmFuTnljMkZjSWl4TlJEVjNhWFJvVWxOQllXNWtUVWRHTVRwY0ltTnllWEIwYjJwekwycHpjbk5oWENJc1UwaEJNWGRwZEdoU1UwRmhibVJOUjBZeE9sd2lZM0o1Y0hSdmFuTXZhbk55YzJGY0lpeFRTRUV5TWpSM2FYUm9VbE5CWVc1a1RVZEdNVHBjSW1OeWVYQjBiMnB6TDJwemNuTmhYQ0lzVTBoQk1qVTJkMmwwYUZKVFFXRnVaRTFIUmpFNlhDSmpjbmx3ZEc5cWN5OXFjM0p6WVZ3aUxGTklRVE00TkhkcGRHaFNVMEZoYm1STlIwWXhPbHdpWTNKNWNIUnZhbk12YW5OeWMyRmNJaXhUU0VFMU1USjNhWFJvVWxOQllXNWtUVWRHTVRwY0ltTnllWEIwYjJwekwycHpjbk5oWENJc1VrbFFSVTFFTVRZd2QybDBhRkpUUVdGdVpFMUhSakU2WENKamNubHdkRzlxY3k5cWMzSnpZVndpTEgwN2RHaHBjeTVEVWxsUVZFOUtVMDFGVTFOQlIwVkVTVWRGVTFST1FVMUZQWHR0WkRVNlEzSjVjSFJ2U2xNdVlXeG5ieTVOUkRVc2MyaGhNVHBEY25sd2RHOUtVeTVoYkdkdkxsTklRVEVzYzJoaE1qSTBPa055ZVhCMGIwcFRMbUZzWjI4dVUwaEJNakkwTEhOb1lUSTFOanBEY25sd2RHOUtVeTVoYkdkdkxsTklRVEkxTml4emFHRXpPRFE2UTNKNWNIUnZTbE11WVd4bmJ5NVRTRUV6T0RRc2MyaGhOVEV5T2tOeWVYQjBiMHBUTG1Gc1oyOHVVMGhCTlRFeUxISnBjR1Z0WkRFMk1EcERjbmx3ZEc5S1V5NWhiR2R2TGxKSlVFVk5SREUyTUgwN2RHaHBjeTVuWlhSRWFXZGxjM1JKYm1adlNHVjRQV1oxYm1OMGFXOXVLR0VzWWlsN2FXWW9kSGx3Wlc5bUlIUm9hWE11UkVsSFJWTlVTVTVHVDBoRlFVUmJZbDA5UFZ3aWRXNWtaV1pwYm1Wa1hDSXBlM1JvY205M1hDSmhiR2NnYm05MElITjFjSEJ2Y25SbFpDQnBiaUJWZEdsc0xrUkpSMFZUVkVsT1JrOUlSVUZFT2lCY0lpdGlmWEpsZEhWeWJpQjBhR2x6TGtSSlIwVlRWRWxPUms5SVJVRkVXMkpkSzJGOU8zUm9hWE11WjJWMFVHRmtaR1ZrUkdsblpYTjBTVzVtYjBobGVEMW1kVzVqZEdsdmJpaG9MR0VzYWlsN2RtRnlJR005ZEdocGN5NW5aWFJFYVdkbGMzUkpibVp2U0dWNEtHZ3NZU2s3ZG1GeUlHUTlhaTgwTzJsbUtHTXViR1Z1WjNSb0t6SXlQbVFwZTNSb2NtOTNYQ0pyWlhrZ2FYTWdkRzl2SUhOb2IzSjBJR1p2Y2lCVGFXZEJiR2M2SUd0bGVXeGxiajFjSWl0cUsxd2lMRndpSzJGOWRtRnlJR0k5WENJd01EQXhYQ0k3ZG1GeUlHczlYQ0l3TUZ3aUsyTTdkbUZ5SUdjOVhDSmNJanQyWVhJZ2JEMWtMV0l1YkdWdVozUm9MV3N1YkdWdVozUm9PMlp2Y2loMllYSWdaajB3TzJZOGJEdG1LejB5S1h0bkt6MWNJbVptWENKOWRtRnlJR1U5WWl0bksyczdjbVYwZFhKdUlHVjlPM1JvYVhNdWFHRnphRk4wY21sdVp6MW1kVzVqZEdsdmJpaGhMR01wZTNaaGNpQmlQVzVsZHlCTFNsVlNMbU55ZVhCMGJ5NU5aWE56WVdkbFJHbG5aWE4wS0h0aGJHYzZZMzBwTzNKbGRIVnliaUJpTG1ScFoyVnpkRk4wY21sdVp5aGhLWDA3ZEdocGN5NW9ZWE5vU0dWNFBXWjFibU4wYVc5dUtHSXNZeWw3ZG1GeUlHRTlibVYzSUV0S1ZWSXVZM0o1Y0hSdkxrMWxjM05oWjJWRWFXZGxjM1FvZTJGc1p6cGpmU2s3Y21WMGRYSnVJR0V1WkdsblpYTjBTR1Y0S0dJcGZUdDBhR2x6TG5Ob1lURTlablZ1WTNScGIyNG9ZU2w3ZG1GeUlHSTlibVYzSUV0S1ZWSXVZM0o1Y0hSdkxrMWxjM05oWjJWRWFXZGxjM1FvZTJGc1p6cGNJbk5vWVRGY0lpeHdjbTkyT2x3aVkzSjVjSFJ2YW5OY0luMHBPM0psZEhWeWJpQmlMbVJwWjJWemRGTjBjbWx1WnloaEtYMDdkR2hwY3k1emFHRXlOVFk5Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k5Ym1WM0lFdEtWVkl1WTNKNWNIUnZMazFsYzNOaFoyVkVhV2RsYzNRb2UyRnNaenBjSW5Ob1lUSTFObHdpTEhCeWIzWTZYQ0pqY25sd2RHOXFjMXdpZlNrN2NtVjBkWEp1SUdJdVpHbG5aWE4wVTNSeWFXNW5LR0VwZlR0MGFHbHpMbk5vWVRJMU5raGxlRDFtZFc1amRHbHZiaWhoS1h0MllYSWdZajF1WlhjZ1MwcFZVaTVqY25sd2RHOHVUV1Z6YzJGblpVUnBaMlZ6ZENoN1lXeG5PbHdpYzJoaE1qVTJYQ0lzY0hKdmRqcGNJbU55ZVhCMGIycHpYQ0o5S1R0eVpYUjFjbTRnWWk1a2FXZGxjM1JJWlhnb1lTbDlPM1JvYVhNdWMyaGhOVEV5UFdaMWJtTjBhVzl1S0dFcGUzWmhjaUJpUFc1bGR5QkxTbFZTTG1OeWVYQjBieTVOWlhOellXZGxSR2xuWlhOMEtIdGhiR2M2WENKemFHRTFNVEpjSWl4d2NtOTJPbHdpWTNKNWNIUnZhbk5jSW4wcE8zSmxkSFZ5YmlCaUxtUnBaMlZ6ZEZOMGNtbHVaeWhoS1gwN2RHaHBjeTV6YUdFMU1USklaWGc5Wm5WdVkzUnBiMjRvWVNsN2RtRnlJR0k5Ym1WM0lFdEtWVkl1WTNKNWNIUnZMazFsYzNOaFoyVkVhV2RsYzNRb2UyRnNaenBjSW5Ob1lUVXhNbHdpTEhCeWIzWTZYQ0pqY25sd2RHOXFjMXdpZlNrN2NtVjBkWEp1SUdJdVpHbG5aWE4wU0dWNEtHRXBmVHQwYUdsekxtMWtOVDFtZFc1amRHbHZiaWhoS1h0MllYSWdZajF1WlhjZ1MwcFZVaTVqY25sd2RHOHVUV1Z6YzJGblpVUnBaMlZ6ZENoN1lXeG5PbHdpYldRMVhDSXNjSEp2ZGpwY0ltTnllWEIwYjJwelhDSjlLVHR5WlhSMWNtNGdZaTVrYVdkbGMzUlRkSEpwYm1jb1lTbDlPM1JvYVhNdWNtbHdaVzFrTVRZd1BXWjFibU4wYVc5dUtHRXBlM1poY2lCaVBXNWxkeUJMU2xWU0xtTnllWEIwYnk1TlpYTnpZV2RsUkdsblpYTjBLSHRoYkdjNlhDSnlhWEJsYldReE5qQmNJaXh3Y205Mk9sd2lZM0o1Y0hSdmFuTmNJbjBwTzNKbGRIVnliaUJpTG1ScFoyVnpkRk4wY21sdVp5aGhLWDA3ZEdocGN5NW5aWFJEY25sd2RHOUtVMDFFUW5sT1lXMWxQV1oxYm1OMGFXOXVLR0VwZTMxOU8wdEtWVkl1WTNKNWNIUnZMazFsYzNOaFoyVkVhV2RsYzNROVpuVnVZM1JwYjI0b1l5bDdkbUZ5SUdJOWJuVnNiRHQyWVhJZ1lUMXVkV3hzTzNaaGNpQmtQVzUxYkd3N2RHaHBjeTV6WlhSQmJHZEJibVJRY205MmFXUmxjajFtZFc1amRHbHZiaWhuTEdZcGUybG1LR2NoUFc1MWJHd21KbVk5UFQxMWJtUmxabWx1WldRcGUyWTlTMHBWVWk1amNubHdkRzh1VlhScGJDNUVSVVpCVlV4VVVGSlBWa2xFUlZKYloxMTlhV1lvWENJNmJXUTFPbk5vWVRFNmMyaGhNakkwT25Ob1lUSTFOanB6YUdFek9EUTZjMmhoTlRFeU9uSnBjR1Z0WkRFMk1EcGNJaTVwYm1SbGVFOW1LR2NwSVQwdE1TWW1aajA5WENKamNubHdkRzlxYzF3aUtYdDBjbmw3ZEdocGN5NXRaRDFMU2xWU0xtTnllWEIwYnk1VmRHbHNMa05TV1ZCVVQwcFRUVVZUVTBGSFJVUkpSMFZUVkU1QlRVVmJaMTB1WTNKbFlYUmxLQ2w5WTJGMFkyZ29aU2w3ZEdoeWIzZGNJbk5sZEVGc1owRnVaRkJ5YjNacFpHVnlJR2hoYzJnZ1lXeG5JSE5sZENCbVlXbHNJR0ZzWnoxY0lpdG5LMXdpTDF3aUsyVjlkR2hwY3k1MWNHUmhkR1ZUZEhKcGJtYzlablZ1WTNScGIyNG9hQ2w3ZEdocGN5NXRaQzUxY0dSaGRHVW9hQ2w5TzNSb2FYTXVkWEJrWVhSbFNHVjRQV1oxYm1OMGFXOXVLR2dwZTNaaGNpQnBQVU55ZVhCMGIwcFRMbVZ1WXk1SVpYZ3VjR0Z5YzJVb2FDazdkR2hwY3k1dFpDNTFjR1JoZEdVb2FTbDlPM1JvYVhNdVpHbG5aWE4wUFdaMWJtTjBhVzl1S0NsN2RtRnlJR2c5ZEdocGN5NXRaQzVtYVc1aGJHbDZaU2dwTzNKbGRIVnliaUJvTG5SdlUzUnlhVzVuS0VOeWVYQjBiMHBUTG1WdVl5NUlaWGdwZlR0MGFHbHpMbVJwWjJWemRGTjBjbWx1WnoxbWRXNWpkR2x2Ymlob0tYdDBhR2x6TG5Wd1pHRjBaVk4wY21sdVp5aG9LVHR5WlhSMWNtNGdkR2hwY3k1a2FXZGxjM1FvS1gwN2RHaHBjeTVrYVdkbGMzUklaWGc5Wm5WdVkzUnBiMjRvYUNsN2RHaHBjeTUxY0dSaGRHVklaWGdvYUNrN2NtVjBkWEp1SUhSb2FYTXVaR2xuWlhOMEtDbDlmV2xtS0Z3aU9uTm9ZVEkxTmpwY0lpNXBibVJsZUU5bUtHY3BJVDB0TVNZbVpqMDlYQ0p6YW1Oc1hDSXBlM1J5ZVh0MGFHbHpMbTFrUFc1bGR5QnphbU5zTG1oaGMyZ3VjMmhoTWpVMktDbDlZMkYwWTJnb1pTbDdkR2h5YjNkY0luTmxkRUZzWjBGdVpGQnliM1pwWkdWeUlHaGhjMmdnWVd4bklITmxkQ0JtWVdsc0lHRnNaejFjSWl0bksxd2lMMXdpSzJWOWRHaHBjeTUxY0dSaGRHVlRkSEpwYm1jOVpuVnVZM1JwYjI0b2FDbDdkR2hwY3k1dFpDNTFjR1JoZEdVb2FDbDlPM1JvYVhNdWRYQmtZWFJsU0dWNFBXWjFibU4wYVc5dUtHa3BlM1poY2lCb1BYTnFZMnd1WTI5a1pXTXVhR1Y0TG5SdlFtbDBjeWhwS1R0MGFHbHpMbTFrTG5Wd1pHRjBaU2hvS1gwN2RHaHBjeTVrYVdkbGMzUTlablZ1WTNScGIyNG9LWHQyWVhJZ2FEMTBhR2x6TG0xa0xtWnBibUZzYVhwbEtDazdjbVYwZFhKdUlITnFZMnd1WTI5a1pXTXVhR1Y0TG1aeWIyMUNhWFJ6S0dncGZUdDBhR2x6TG1ScFoyVnpkRk4wY21sdVp6MW1kVzVqZEdsdmJpaG9LWHQwYUdsekxuVndaR0YwWlZOMGNtbHVaeWhvS1R0eVpYUjFjbTRnZEdocGN5NWthV2RsYzNRb0tYMDdkR2hwY3k1a2FXZGxjM1JJWlhnOVpuVnVZM1JwYjI0b2FDbDdkR2hwY3k1MWNHUmhkR1ZJWlhnb2FDazdjbVYwZFhKdUlIUm9hWE11WkdsblpYTjBLQ2w5ZlgwN2RHaHBjeTUxY0dSaGRHVlRkSEpwYm1jOVpuVnVZM1JwYjI0b1pTbDdkR2h5YjNkY0luVndaR0YwWlZOMGNtbHVaeWh6ZEhJcElHNXZkQ0J6ZFhCd2IzSjBaV1FnWm05eUlIUm9hWE1nWVd4bkwzQnliM1k2SUZ3aUszUm9hWE11WVd4blRtRnRaU3RjSWk5Y0lpdDBhR2x6TG5CeWIzWk9ZVzFsZlR0MGFHbHpMblZ3WkdGMFpVaGxlRDFtZFc1amRHbHZiaWhsS1h0MGFISnZkMXdpZFhCa1lYUmxTR1Y0S0dobGVDa2dibTkwSUhOMWNIQnZjblJsWkNCbWIzSWdkR2hwY3lCaGJHY3ZjSEp2ZGpvZ1hDSXJkR2hwY3k1aGJHZE9ZVzFsSzF3aUwxd2lLM1JvYVhNdWNISnZkazVoYldWOU8zUm9hWE11WkdsblpYTjBQV1oxYm1OMGFXOXVLQ2w3ZEdoeWIzZGNJbVJwWjJWemRDZ3BJRzV2ZENCemRYQndiM0owWldRZ1ptOXlJSFJvYVhNZ1lXeG5MM0J5YjNZNklGd2lLM1JvYVhNdVlXeG5UbUZ0WlN0Y0lpOWNJaXQwYUdsekxuQnliM1pPWVcxbGZUdDBhR2x6TG1ScFoyVnpkRk4wY21sdVp6MW1kVzVqZEdsdmJpaGxLWHQwYUhKdmQxd2laR2xuWlhOMFUzUnlhVzVuS0hOMGNpa2dibTkwSUhOMWNIQnZjblJsWkNCbWIzSWdkR2hwY3lCaGJHY3ZjSEp2ZGpvZ1hDSXJkR2hwY3k1aGJHZE9ZVzFsSzF3aUwxd2lLM1JvYVhNdWNISnZkazVoYldWOU8zUm9hWE11WkdsblpYTjBTR1Y0UFdaMWJtTjBhVzl1S0dVcGUzUm9jbTkzWENKa2FXZGxjM1JJWlhnb2FHVjRLU0J1YjNRZ2MzVndjRzl5ZEdWa0lHWnZjaUIwYUdseklHRnNaeTl3Y205Mk9pQmNJaXQwYUdsekxtRnNaMDVoYldVclhDSXZYQ0lyZEdocGN5NXdjbTkyVG1GdFpYMDdhV1lvWXlFOVBYVnVaR1ZtYVc1bFpDbDdhV1lvWXk1aGJHY2hQVDExYm1SbFptbHVaV1FwZTNSb2FYTXVZV3huVG1GdFpUMWpMbUZzWnp0cFppaGpMbkJ5YjNZOVBUMTFibVJsWm1sdVpXUXBlM1JvYVhNdWNISnZkazVoYldVOVMwcFZVaTVqY25sd2RHOHVWWFJwYkM1RVJVWkJWVXhVVUZKUFZrbEVSVkpiZEdocGN5NWhiR2RPWVcxbFhYMTBhR2x6TG5ObGRFRnNaMEZ1WkZCeWIzWnBaR1Z5S0hSb2FYTXVZV3huVG1GdFpTeDBhR2x6TG5CeWIzWk9ZVzFsS1gxOWZUdExTbFZTTG1OeWVYQjBieTVOWVdNOVpuVnVZM1JwYjI0b1pDbDdkbUZ5SUdZOWJuVnNiRHQyWVhJZ1l6MXVkV3hzTzNaaGNpQmhQVzUxYkd3N2RtRnlJR1U5Ym5Wc2JEdDJZWElnWWoxdWRXeHNPM1JvYVhNdWMyVjBRV3huUVc1a1VISnZkbWxrWlhJOVpuVnVZM1JwYjI0b2F5eHBLWHRyUFdzdWRHOU1iM2RsY2tOaGMyVW9LVHRwWmloclBUMXVkV3hzS1h0clBWd2lhRzFoWTNOb1lURmNJbjFyUFdzdWRHOU1iM2RsY2tOaGMyVW9LVHRwWmlockxuTjFZbk4wY2lnd0xEUXBJVDFjSW1odFlXTmNJaWw3ZEdoeWIzZGNJbk5sZEVGc1owRnVaRkJ5YjNacFpHVnlJSFZ1YzNWd2NHOXlkR1ZrSUVoTlFVTWdZV3huT2lCY0lpdHJmV2xtS0drOVBUMTFibVJsWm1sdVpXUXBlMms5UzBwVlVpNWpjbmx3ZEc4dVZYUnBiQzVFUlVaQlZVeFVVRkpQVmtsRVJWSmJhMTE5ZEdocGN5NWhiR2RRY205MlBXc3JYQ0l2WENJcmFUdDJZWElnWnoxckxuTjFZbk4wY2lnMEtUdHBaaWhjSWpwdFpEVTZjMmhoTVRwemFHRXlNalE2YzJoaE1qVTJPbk5vWVRNNE5EcHphR0UxTVRJNmNtbHdaVzFrTVRZd09sd2lMbWx1WkdWNFQyWW9aeWtoUFMweEppWnBQVDFjSW1OeWVYQjBiMnB6WENJcGUzUnllWHQyWVhJZ2FqMUxTbFZTTG1OeWVYQjBieTVWZEdsc0xrTlNXVkJVVDBwVFRVVlRVMEZIUlVSSlIwVlRWRTVCVFVWYloxMDdkR2hwY3k1dFlXTTlRM0o1Y0hSdlNsTXVZV3huYnk1SVRVRkRMbU55WldGMFpTaHFMSFJvYVhNdWNHRnpjeWw5WTJGMFkyZ29hQ2w3ZEdoeWIzZGNJbk5sZEVGc1owRnVaRkJ5YjNacFpHVnlJR2hoYzJnZ1lXeG5JSE5sZENCbVlXbHNJR2hoYzJoQmJHYzlYQ0lyWnl0Y0lpOWNJaXRvZlhSb2FYTXVkWEJrWVhSbFUzUnlhVzVuUFdaMWJtTjBhVzl1S0d3cGUzUm9hWE11YldGakxuVndaR0YwWlNoc0tYMDdkR2hwY3k1MWNHUmhkR1ZJWlhnOVpuVnVZM1JwYjI0b2JDbDdkbUZ5SUcwOVEzSjVjSFJ2U2xNdVpXNWpMa2hsZUM1d1lYSnpaU2hzS1R0MGFHbHpMbTFoWXk1MWNHUmhkR1VvYlNsOU8zUm9hWE11Wkc5R2FXNWhiRDFtZFc1amRHbHZiaWdwZTNaaGNpQnNQWFJvYVhNdWJXRmpMbVpwYm1Gc2FYcGxLQ2s3Y21WMGRYSnVJR3d1ZEc5VGRISnBibWNvUTNKNWNIUnZTbE11Wlc1akxraGxlQ2w5TzNSb2FYTXVaRzlHYVc1aGJGTjBjbWx1WnoxbWRXNWpkR2x2Ymloc0tYdDBhR2x6TG5Wd1pHRjBaVk4wY21sdVp5aHNLVHR5WlhSMWNtNGdkR2hwY3k1a2IwWnBibUZzS0NsOU8zUm9hWE11Wkc5R2FXNWhiRWhsZUQxbWRXNWpkR2x2Ymloc0tYdDBhR2x6TG5Wd1pHRjBaVWhsZUNoc0tUdHlaWFIxY200Z2RHaHBjeTVrYjBacGJtRnNLQ2w5ZlgwN2RHaHBjeTUxY0dSaGRHVlRkSEpwYm1jOVpuVnVZM1JwYjI0b1p5bDdkR2h5YjNkY0luVndaR0YwWlZOMGNtbHVaeWh6ZEhJcElHNXZkQ0J6ZFhCd2IzSjBaV1FnWm05eUlIUm9hWE1nWVd4bkwzQnliM1k2SUZ3aUszUm9hWE11WVd4blVISnZkbjA3ZEdocGN5NTFjR1JoZEdWSVpYZzlablZ1WTNScGIyNG9aeWw3ZEdoeWIzZGNJblZ3WkdGMFpVaGxlQ2hvWlhncElHNXZkQ0J6ZFhCd2IzSjBaV1FnWm05eUlIUm9hWE1nWVd4bkwzQnliM1k2SUZ3aUszUm9hWE11WVd4blVISnZkbjA3ZEdocGN5NWtiMFpwYm1Gc1BXWjFibU4wYVc5dUtDbDdkR2h5YjNkY0ltUnBaMlZ6ZENncElHNXZkQ0J6ZFhCd2IzSjBaV1FnWm05eUlIUm9hWE1nWVd4bkwzQnliM1k2SUZ3aUszUm9hWE11WVd4blVISnZkbjA3ZEdocGN5NWtiMFpwYm1Gc1UzUnlhVzVuUFdaMWJtTjBhVzl1S0djcGUzUm9jbTkzWENKa2FXZGxjM1JUZEhKcGJtY29jM1J5S1NCdWIzUWdjM1Z3Y0c5eWRHVmtJR1p2Y2lCMGFHbHpJR0ZzWnk5d2NtOTJPaUJjSWl0MGFHbHpMbUZzWjFCeWIzWjlPM1JvYVhNdVpHOUdhVzVoYkVobGVEMW1kVzVqZEdsdmJpaG5LWHQwYUhKdmQxd2laR2xuWlhOMFNHVjRLR2hsZUNrZ2JtOTBJSE4xY0hCdmNuUmxaQ0JtYjNJZ2RHaHBjeUJoYkdjdmNISnZkam9nWENJcmRHaHBjeTVoYkdkUWNtOTJmVHQwYUdsekxuTmxkRkJoYzNOM2IzSmtQV1oxYm1OMGFXOXVLR2dwZTJsbUtIUjVjR1Z2WmlCb1BUMWNJbk4wY21sdVoxd2lLWHQyWVhJZ1p6MW9PMmxtS0dndWJHVnVaM1JvSlRJOVBURjhmQ0ZvTG0xaGRHTm9LQzllV3pBdE9VRXRSbUV0WmwwckpDOHBLWHRuUFhKemRISjBiMmhsZUNob0tYMTBhR2x6TG5CaGMzTTlRM0o1Y0hSdlNsTXVaVzVqTGtobGVDNXdZWEp6WlNobktUdHlaWFIxY201OWFXWW9kSGx3Wlc5bUlHZ2hQVndpYjJKcVpXTjBYQ0lwZTNSb2NtOTNYQ0pMU2xWU0xtTnllWEIwYnk1TllXTWdkVzV6ZFhCd2IzSjBaV1FnY0dGemMzZHZjbVFnZEhsd1pUb2dYQ0lyYUgxMllYSWdaejF1ZFd4c08ybG1LR2d1YUdWNElUMDlkVzVrWldacGJtVmtLWHRwWmlob0xtaGxlQzVzWlc1bmRHZ2xNaUU5TUh4OElXZ3VhR1Y0TG0xaGRHTm9LQzllV3pBdE9VRXRSbUV0WmwwckpDOHBLWHQwYUhKdmQxd2lUV0ZqT2lCM2NtOXVaeUJvWlhnZ2NHRnpjM2R2Y21RNklGd2lLMmd1YUdWNGZXYzlhQzVvWlhoOWFXWW9hQzUxZEdZNElUMDlkVzVrWldacGJtVmtLWHRuUFhWMFpqaDBiMmhsZUNob0xuVjBaamdwZldsbUtHZ3Vjbk4wY2lFOVBYVnVaR1ZtYVc1bFpDbDdaejF5YzNSeWRHOW9aWGdvYUM1eWMzUnlLWDFwWmlob0xtSTJOQ0U5UFhWdVpHVm1hVzVsWkNsN1p6MWlOalIwYjJobGVDaG9MbUkyTkNsOWFXWW9hQzVpTmpSMUlUMDlkVzVrWldacGJtVmtLWHRuUFdJMk5IVjBiMmhsZUNob0xtSTJOSFVwZldsbUtHYzlQVzUxYkd3cGUzUm9jbTkzWENKTFNsVlNMbU55ZVhCMGJ5NU5ZV01nZFc1emRYQndiM0owWldRZ2NHRnpjM2R2Y21RZ2RIbHdaVG9nWENJcmFIMTBhR2x6TG5CaGMzTTlRM0o1Y0hSdlNsTXVaVzVqTGtobGVDNXdZWEp6WlNobktYMDdhV1lvWkNFOVBYVnVaR1ZtYVc1bFpDbDdhV1lvWkM1d1lYTnpJVDA5ZFc1a1pXWnBibVZrS1h0MGFHbHpMbk5sZEZCaGMzTjNiM0prS0dRdWNHRnpjeWw5YVdZb1pDNWhiR2NoUFQxMWJtUmxabWx1WldRcGUzUm9hWE11WVd4blRtRnRaVDFrTG1Gc1p6dHBaaWhrTG5CeWIzWTlQVDExYm1SbFptbHVaV1FwZTNSb2FYTXVjSEp2ZGs1aGJXVTlTMHBWVWk1amNubHdkRzh1VlhScGJDNUVSVVpCVlV4VVVGSlBWa2xFUlZKYmRHaHBjeTVoYkdkT1lXMWxYWDEwYUdsekxuTmxkRUZzWjBGdVpGQnliM1pwWkdWeUtIUm9hWE11WVd4blRtRnRaU3gwYUdsekxuQnliM1pPWVcxbEtYMTlmVHRMU2xWU0xtTnllWEIwYnk1VGFXZHVZWFIxY21VOVpuVnVZM1JwYjI0b2J5bDdkbUZ5SUhFOWJuVnNiRHQyWVhJZ2JqMXVkV3hzTzNaaGNpQnlQVzUxYkd3N2RtRnlJR005Ym5Wc2JEdDJZWElnYkQxdWRXeHNPM1poY2lCa1BXNTFiR3c3ZG1GeUlHczliblZzYkR0MllYSWdhRDF1ZFd4c08zWmhjaUJ3UFc1MWJHdzdkbUZ5SUdVOWJuVnNiRHQyWVhJZ1lqMHRNVHQyWVhJZ1p6MXVkV3hzTzNaaGNpQnFQVzUxYkd3N2RtRnlJR0U5Ym5Wc2JEdDJZWElnYVQxdWRXeHNPM1poY2lCbVBXNTFiR3c3ZEdocGN5NWZjMlYwUVd4blRtRnRaWE05Wm5WdVkzUnBiMjRvS1h0cFppaDBhR2x6TG1Gc1owNWhiV1V1YldGMFkyZ29MMTRvTGlzcGQybDBhQ2d1S3lra0x5a3BlM1JvYVhNdWJXUkJiR2RPWVcxbFBWSmxaMFY0Y0M0a01TNTBiMHh2ZDJWeVEyRnpaU2dwTzNSb2FYTXVjSFZpYTJWNVFXeG5UbUZ0WlQxU1pXZEZlSEF1SkRJdWRHOU1iM2RsY2tOaGMyVW9LWDE5TzNSb2FYTXVYM3BsY205UVlXUmthVzVuVDJaVGFXZHVZWFIxY21VOVpuVnVZM1JwYjI0b2VDeDNLWHQyWVhJZ2RqMWNJbHdpTzNaaGNpQjBQWGN2TkMxNExteGxibWQwYUR0bWIzSW9kbUZ5SUhVOU1EdDFQSFE3ZFNzcktYdDJQWFlyWENJd1hDSjljbVYwZFhKdUlIWXJlSDA3ZEdocGN5NXpaWFJCYkdkQmJtUlFjbTkyYVdSbGNqMW1kVzVqZEdsdmJpaDFMSFFwZTNSb2FYTXVYM05sZEVGc1owNWhiV1Z6S0NrN2FXWW9kQ0U5WENKamNubHdkRzlxY3k5cWMzSnpZVndpS1h0MGFISnZkMXdpY0hKdmRtbGtaWElnYm05MElITjFjSEJ2Y25SbFpEb2dYQ0lyZEgxcFppaGNJanB0WkRVNmMyaGhNVHB6YUdFeU1qUTZjMmhoTWpVMk9uTm9ZVE00TkRwemFHRTFNVEk2Y21sd1pXMWtNVFl3T2x3aUxtbHVaR1Y0VDJZb2RHaHBjeTV0WkVGc1owNWhiV1VwSVQwdE1TbDdkSEo1ZTNSb2FYTXViV1E5Ym1WM0lFdEtWVkl1WTNKNWNIUnZMazFsYzNOaFoyVkVhV2RsYzNRb2UyRnNaenAwYUdsekxtMWtRV3huVG1GdFpYMHBmV05oZEdOb0tITXBlM1JvY205M1hDSnpaWFJCYkdkQmJtUlFjbTkyYVdSbGNpQm9ZWE5vSUdGc1p5QnpaWFFnWm1GcGJDQmhiR2M5WENJcmRHaHBjeTV0WkVGc1owNWhiV1VyWENJdlhDSXJjMzEwYUdsekxtbHVhWFE5Wm5WdVkzUnBiMjRvZHl4NEtYdDJZWElnZVQxdWRXeHNPM1J5ZVh0cFppaDRQVDA5ZFc1a1pXWnBibVZrS1h0NVBVdEZXVlZVU1V3dVoyVjBTMlY1S0hjcGZXVnNjMlY3ZVQxTFJWbFZWRWxNTG1kbGRFdGxlU2gzTEhncGZYMWpZWFJqYUNoMktYdDBhSEp2ZDF3aWFXNXBkQ0JtWVdsc1pXUTZYQ0lyZG4xcFppaDVMbWx6VUhKcGRtRjBaVDA5UFhSeWRXVXBlM1JvYVhNdWNISjJTMlY1UFhrN2RHaHBjeTV6ZEdGMFpUMWNJbE5KUjA1Y0luMWxiSE5sZTJsbUtIa3VhWE5RZFdKc2FXTTlQVDEwY25WbEtYdDBhR2x6TG5CMVlrdGxlVDE1TzNSb2FYTXVjM1JoZEdVOVhDSldSVkpKUmxsY0luMWxiSE5sZTNSb2NtOTNYQ0pwYm1sMElHWmhhV3hsWkM0NlhDSXJlWDE5ZlR0MGFHbHpMbWx1YVhSVGFXZHVQV1oxYm1OMGFXOXVLSFlwZTJsbUtIUjVjR1Z2WmlCMkxtVmpjSEoyYUdWNFBUMWNJbk4wY21sdVoxd2lKaVowZVhCbGIyWWdkaTVsWTJOMWNuWmxibUZ0WlQwOVhDSnpkSEpwYm1kY0lpbDdkR2hwY3k1bFkzQnlkbWhsZUQxMkxtVmpjSEoyYUdWNE8zUm9hWE11WldOamRYSjJaVzVoYldVOWRpNWxZMk4xY25abGJtRnRaWDFsYkhObGUzUm9hWE11Y0hKMlMyVjVQWFo5ZEdocGN5NXpkR0YwWlQxY0lsTkpSMDVjSW4wN2RHaHBjeTVwYm1sMFZtVnlhV1o1UW5sUWRXSnNhV05MWlhrOVpuVnVZM1JwYjI0b2RpbDdhV1lvZEhsd1pXOW1JSFl1WldOd2RXSm9aWGc5UFZ3aWMzUnlhVzVuWENJbUpuUjVjR1Z2WmlCMkxtVmpZM1Z5ZG1WdVlXMWxQVDFjSW5OMGNtbHVaMXdpS1h0MGFHbHpMbVZqY0hWaWFHVjRQWFl1WldOd2RXSm9aWGc3ZEdocGN5NWxZMk4xY25abGJtRnRaVDEyTG1WalkzVnlkbVZ1WVcxbGZXVnNjMlY3YVdZb2RpQnBibk4wWVc1alpXOW1JRXRLVlZJdVkzSjVjSFJ2TGtWRFJGTkJLWHQwYUdsekxuQjFZa3RsZVQxMmZXVnNjMlY3YVdZb2RpQnBibk4wWVc1alpXOW1JRkpUUVV0bGVTbDdkR2hwY3k1d2RXSkxaWGs5ZG4xOWZYUm9hWE11YzNSaGRHVTlYQ0pXUlZKSlJsbGNJbjA3ZEdocGN5NXBibWwwVm1WeWFXWjVRbmxEWlhKMGFXWnBZMkYwWlZCRlRUMW1kVzVqZEdsdmJpaDJLWHQyWVhJZ2R6MXVaWGNnV0RVd09TZ3BPM2N1Y21WaFpFTmxjblJRUlUwb2RpazdkR2hwY3k1d2RXSkxaWGs5ZHk1emRXSnFaV04wVUhWaWJHbGpTMlY1VWxOQk8zUm9hWE11YzNSaGRHVTlYQ0pXUlZKSlJsbGNJbjA3ZEdocGN5NTFjR1JoZEdWVGRISnBibWM5Wm5WdVkzUnBiMjRvZGlsN2RHaHBjeTV0WkM1MWNHUmhkR1ZUZEhKcGJtY29kaWw5TzNSb2FYTXVkWEJrWVhSbFNHVjRQV1oxYm1OMGFXOXVLSFlwZTNSb2FYTXViV1F1ZFhCa1lYUmxTR1Y0S0hZcGZUdDBhR2x6TG5OcFoyNDlablZ1WTNScGIyNG9LWHQwYUdsekxuTklZWE5vU0dWNFBYUm9hWE11YldRdVpHbG5aWE4wS0NrN2FXWW9kSGx3Wlc5bUlIUm9hWE11WldOd2NuWm9aWGdoUFZ3aWRXNWtaV1pwYm1Wa1hDSW1KblI1Y0dWdlppQjBhR2x6TG1WalkzVnlkbVZ1WVcxbElUMWNJblZ1WkdWbWFXNWxaRndpS1h0MllYSWdkajF1WlhjZ1MwcFZVaTVqY25sd2RHOHVSVU5FVTBFb2UyTjFjblpsT25Sb2FYTXVaV05qZFhKMlpXNWhiV1Y5S1R0MGFHbHpMbWhUYVdkdVBYWXVjMmxuYmtobGVDaDBhR2x6TG5OSVlYTm9TR1Y0TEhSb2FYTXVaV053Y25ab1pYZ3BmV1ZzYzJWN2FXWW9kR2hwY3k1d2NuWkxaWGtnYVc1emRHRnVZMlZ2WmlCU1UwRkxaWGttSm5Sb2FYTXVjSFZpYTJWNVFXeG5UbUZ0WlQwOVhDSnljMkZoYm1SdFoyWXhYQ0lwZTNSb2FYTXVhRk5wWjI0OWRHaHBjeTV3Y25aTFpYa3VjMmxuYmxkcGRHaE5aWE56WVdkbFNHRnphRkJUVXloMGFHbHpMbk5JWVhOb1NHVjRMSFJvYVhNdWJXUkJiR2RPWVcxbExIUm9hWE11Y0hOelUyRnNkRXhsYmlsOVpXeHpaWHRwWmloMGFHbHpMbkJ5ZGt0bGVTQnBibk4wWVc1alpXOW1JRkpUUVV0bGVTWW1kR2hwY3k1d2RXSnJaWGxCYkdkT1lXMWxQVDFjSW5KellWd2lLWHQwYUdsekxtaFRhV2R1UFhSb2FYTXVjSEoyUzJWNUxuTnBaMjVYYVhSb1RXVnpjMkZuWlVoaGMyZ29kR2hwY3k1elNHRnphRWhsZUN4MGFHbHpMbTFrUVd4blRtRnRaU2w5Wld4elpYdHBaaWgwYUdsekxuQnlka3RsZVNCcGJuTjBZVzVqWlc5bUlFdEtWVkl1WTNKNWNIUnZMa1ZEUkZOQktYdDBhR2x6TG1oVGFXZHVQWFJvYVhNdWNISjJTMlY1TG5OcFoyNVhhWFJvVFdWemMyRm5aVWhoYzJnb2RHaHBjeTV6U0dGemFFaGxlQ2w5Wld4elpYdHBaaWgwYUdsekxuQnlka3RsZVNCcGJuTjBZVzVqWlc5bUlFdEtWVkl1WTNKNWNIUnZMa1JUUVNsN2RHaHBjeTVvVTJsbmJqMTBhR2x6TG5CeWRrdGxlUzV6YVdkdVYybDBhRTFsYzNOaFoyVklZWE5vS0hSb2FYTXVjMGhoYzJoSVpYZ3BmV1ZzYzJWN2RHaHliM2RjSWxOcFoyNWhkSFZ5WlRvZ2RXNXpkWEJ3YjNKMFpXUWdjSFZpYkdsaklHdGxlU0JoYkdjNklGd2lLM1JvYVhNdWNIVmlhMlY1UVd4blRtRnRaWDE5ZlgxOWNtVjBkWEp1SUhSb2FYTXVhRk5wWjI1OU8zUm9hWE11YzJsbmJsTjBjbWx1WnoxbWRXNWpkR2x2YmloMktYdDBhR2x6TG5Wd1pHRjBaVk4wY21sdVp5aDJLVHR5WlhSMWNtNGdkR2hwY3k1emFXZHVLQ2w5TzNSb2FYTXVjMmxuYmtobGVEMW1kVzVqZEdsdmJpaDJLWHQwYUdsekxuVndaR0YwWlVobGVDaDJLVHR5WlhSMWNtNGdkR2hwY3k1emFXZHVLQ2w5TzNSb2FYTXVkbVZ5YVdaNVBXWjFibU4wYVc5dUtIWXBlM1JvYVhNdWMwaGhjMmhJWlhnOWRHaHBjeTV0WkM1a2FXZGxjM1FvS1R0cFppaDBlWEJsYjJZZ2RHaHBjeTVsWTNCMVltaGxlQ0U5WENKMWJtUmxabWx1WldSY0lpWW1kSGx3Wlc5bUlIUm9hWE11WldOamRYSjJaVzVoYldVaFBWd2lkVzVrWldacGJtVmtYQ0lwZTNaaGNpQjNQVzVsZHlCTFNsVlNMbU55ZVhCMGJ5NUZRMFJUUVNoN1kzVnlkbVU2ZEdocGN5NWxZMk4xY25abGJtRnRaWDBwTzNKbGRIVnliaUIzTG5abGNtbG1lVWhsZUNoMGFHbHpMbk5JWVhOb1NHVjRMSFlzZEdocGN5NWxZM0IxWW1obGVDbDlaV3h6Wlh0cFppaDBhR2x6TG5CMVlrdGxlU0JwYm5OMFlXNWpaVzltSUZKVFFVdGxlU1ltZEdocGN5NXdkV0pyWlhsQmJHZE9ZVzFsUFQxY0luSnpZV0Z1WkcxblpqRmNJaWw3Y21WMGRYSnVJSFJvYVhNdWNIVmlTMlY1TG5abGNtbG1lVmRwZEdoTlpYTnpZV2RsU0dGemFGQlRVeWgwYUdsekxuTklZWE5vU0dWNExIWXNkR2hwY3k1dFpFRnNaMDVoYldVc2RHaHBjeTV3YzNOVFlXeDBUR1Z1S1gxbGJITmxlMmxtS0hSb2FYTXVjSFZpUzJWNUlHbHVjM1JoYm1ObGIyWWdVbE5CUzJWNUppWjBhR2x6TG5CMVltdGxlVUZzWjA1aGJXVTlQVndpY25OaFhDSXBlM0psZEhWeWJpQjBhR2x6TG5CMVlrdGxlUzUyWlhKcFpubFhhWFJvVFdWemMyRm5aVWhoYzJnb2RHaHBjeTV6U0dGemFFaGxlQ3gyS1gxbGJITmxlMmxtS0hSb2FYTXVjSFZpUzJWNUlHbHVjM1JoYm1ObGIyWWdTMHBWVWk1amNubHdkRzh1UlVORVUwRXBlM0psZEhWeWJpQjBhR2x6TG5CMVlrdGxlUzUyWlhKcFpubFhhWFJvVFdWemMyRm5aVWhoYzJnb2RHaHBjeTV6U0dGemFFaGxlQ3gyS1gxbGJITmxlMmxtS0hSb2FYTXVjSFZpUzJWNUlHbHVjM1JoYm1ObGIyWWdTMHBWVWk1amNubHdkRzh1UkZOQktYdHlaWFIxY200Z2RHaHBjeTV3ZFdKTFpYa3VkbVZ5YVdaNVYybDBhRTFsYzNOaFoyVklZWE5vS0hSb2FYTXVjMGhoYzJoSVpYZ3NkaWw5Wld4elpYdDBhSEp2ZDF3aVUybG5ibUYwZFhKbE9pQjFibk4xY0hCdmNuUmxaQ0J3ZFdKc2FXTWdhMlY1SUdGc1p6b2dYQ0lyZEdocGN5NXdkV0pyWlhsQmJHZE9ZVzFsZlgxOWZYMTlmWDA3ZEdocGN5NXBibWwwUFdaMWJtTjBhVzl1S0hNc2RDbDdkR2h5YjNkY0ltbHVhWFFvYTJWNUxDQndZWE56S1NCdWIzUWdjM1Z3Y0c5eWRHVmtJR1p2Y2lCMGFHbHpJR0ZzWnpwd2NtOTJQVndpSzNSb2FYTXVZV3huVUhKdmRrNWhiV1Y5TzNSb2FYTXVhVzVwZEZabGNtbG1lVUo1VUhWaWJHbGpTMlY1UFdaMWJtTjBhVzl1S0hNcGUzUm9jbTkzWENKcGJtbDBWbVZ5YVdaNVFubFFkV0pzYVdOTFpYa29jbk5oVUhWaVMyVjVlU2tnYm05MElITjFjSEJ2Y25SbFpDQm1iM0lnZEdocGN5QmhiR2M2Y0hKdmRqMWNJaXQwYUdsekxtRnNaMUJ5YjNaT1lXMWxmVHQwYUdsekxtbHVhWFJXWlhKcFpubENlVU5sY25ScFptbGpZWFJsVUVWTlBXWjFibU4wYVc5dUtITXBlM1JvY205M1hDSnBibWwwVm1WeWFXWjVRbmxEWlhKMGFXWnBZMkYwWlZCRlRTaGpaWEowVUVWTktTQnViM1FnYzNWd2NHOXlkR1ZrSUdadmNpQjBhR2x6SUdGc1p6cHdjbTkyUFZ3aUszUm9hWE11WVd4blVISnZkazVoYldWOU8zUm9hWE11YVc1cGRGTnBaMjQ5Wm5WdVkzUnBiMjRvY3lsN2RHaHliM2RjSW1sdWFYUlRhV2R1S0hCeWRrdGxlU2tnYm05MElITjFjSEJ2Y25SbFpDQm1iM0lnZEdocGN5QmhiR2M2Y0hKdmRqMWNJaXQwYUdsekxtRnNaMUJ5YjNaT1lXMWxmVHQwYUdsekxuVndaR0YwWlZOMGNtbHVaejFtZFc1amRHbHZiaWh6S1h0MGFISnZkMXdpZFhCa1lYUmxVM1J5YVc1bktITjBjaWtnYm05MElITjFjSEJ2Y25SbFpDQm1iM0lnZEdocGN5QmhiR2M2Y0hKdmRqMWNJaXQwYUdsekxtRnNaMUJ5YjNaT1lXMWxmVHQwYUdsekxuVndaR0YwWlVobGVEMW1kVzVqZEdsdmJpaHpLWHQwYUhKdmQxd2lkWEJrWVhSbFNHVjRLR2hsZUNrZ2JtOTBJSE4xY0hCdmNuUmxaQ0JtYjNJZ2RHaHBjeUJoYkdjNmNISnZkajFjSWl0MGFHbHpMbUZzWjFCeWIzWk9ZVzFsZlR0MGFHbHpMbk5wWjI0OVpuVnVZM1JwYjI0b0tYdDBhSEp2ZDF3aWMybG5iaWdwSUc1dmRDQnpkWEJ3YjNKMFpXUWdabTl5SUhSb2FYTWdZV3huT25CeWIzWTlYQ0lyZEdocGN5NWhiR2RRY205MlRtRnRaWDA3ZEdocGN5NXphV2R1VTNSeWFXNW5QV1oxYm1OMGFXOXVLSE1wZTNSb2NtOTNYQ0prYVdkbGMzUlRkSEpwYm1jb2MzUnlLU0J1YjNRZ2MzVndjRzl5ZEdWa0lHWnZjaUIwYUdseklHRnNaenB3Y205MlBWd2lLM1JvYVhNdVlXeG5VSEp2ZGs1aGJXVjlPM1JvYVhNdWMybG5ia2hsZUQxbWRXNWpkR2x2YmloektYdDBhSEp2ZDF3aVpHbG5aWE4wU0dWNEtHaGxlQ2tnYm05MElITjFjSEJ2Y25SbFpDQm1iM0lnZEdocGN5QmhiR2M2Y0hKdmRqMWNJaXQwYUdsekxtRnNaMUJ5YjNaT1lXMWxmVHQwYUdsekxuWmxjbWxtZVQxbWRXNWpkR2x2YmloektYdDBhSEp2ZDF3aWRtVnlhV1o1S0doVGFXZFdZV3dwSUc1dmRDQnpkWEJ3YjNKMFpXUWdabTl5SUhSb2FYTWdZV3huT25CeWIzWTlYQ0lyZEdocGN5NWhiR2RRY205MlRtRnRaWDA3ZEdocGN5NXBibWwwVUdGeVlXMXpQVzg3YVdZb2J5RTlQWFZ1WkdWbWFXNWxaQ2w3YVdZb2J5NWhiR2NoUFQxMWJtUmxabWx1WldRcGUzUm9hWE11WVd4blRtRnRaVDF2TG1Gc1p6dHBaaWh2TG5CeWIzWTlQVDExYm1SbFptbHVaV1FwZTNSb2FYTXVjSEp2ZGs1aGJXVTlTMHBWVWk1amNubHdkRzh1VlhScGJDNUVSVVpCVlV4VVVGSlBWa2xFUlZKYmRHaHBjeTVoYkdkT1lXMWxYWDFsYkhObGUzUm9hWE11Y0hKdmRrNWhiV1U5Ynk1d2NtOTJmWFJvYVhNdVlXeG5VSEp2ZGs1aGJXVTlkR2hwY3k1aGJHZE9ZVzFsSzF3aU9sd2lLM1JvYVhNdWNISnZkazVoYldVN2RHaHBjeTV6WlhSQmJHZEJibVJRY205MmFXUmxjaWgwYUdsekxtRnNaMDVoYldVc2RHaHBjeTV3Y205MlRtRnRaU2s3ZEdocGN5NWZjMlYwUVd4blRtRnRaWE1vS1gxcFppaHZMbkJ6YzNOaGJIUnNaVzRoUFQxMWJtUmxabWx1WldRcGUzUm9hWE11Y0hOelUyRnNkRXhsYmoxdkxuQnpjM05oYkhSc1pXNTlhV1lvYnk1d2NuWnJaWGx3WlcwaFBUMTFibVJsWm1sdVpXUXBlMmxtS0c4dWNISjJhMlY1Y0dGeklUMDlkVzVrWldacGJtVmtLWHQwYUhKdmQxd2lZbTkwYUNCd2NuWnJaWGx3WlcwZ1lXNWtJSEJ5ZG10bGVYQmhjeUJ3WVhKaGJXVjBaWEp6SUc1dmRDQnpkWEJ3YjNKMFpXUmNJbjFsYkhObGUzUnllWHQyWVhJZ2NUMXVaWGNnVWxOQlMyVjVLQ2s3Y1M1eVpXRmtVSEpwZG1GMFpVdGxlVVp5YjIxUVJVMVRkSEpwYm1jb2J5NXdjblpyWlhsd1pXMHBPM1JvYVhNdWFXNXBkRk5wWjI0b2NTbDlZMkYwWTJnb2JTbDdkR2h5YjNkY0ltWmhkR0ZzSUdWeWNtOXlJSFJ2SUd4dllXUWdjR1Z0SUhCeWFYWmhkR1VnYTJWNU9pQmNJaXR0ZlgxOWZYMDdTMHBWVWk1amNubHdkRzh1VDBsRVBXNWxkeUJtZFc1amRHbHZiaWdwZTNSb2FYTXViMmxrYUdWNE1tNWhiV1U5ZTF3aU1tRTROalE0T0RabU56QmtNREV3TVRBeFhDSTZYQ0p5YzJGRmJtTnllWEIwYVc5dVhDSXNYQ0l5WVRnMk5EaGpaVE5rTURJd01Wd2lPbHdpWldOUWRXSnNhV05MWlhsY0lpeGNJakpoT0RZME9HTmxNemd3TkRBeFhDSTZYQ0prYzJGY0lpeGNJakpoT0RZME9HTmxNMlF3TXpBeE1EZGNJanBjSW5ObFkzQXlOVFp5TVZ3aUxGd2lNbUk0TVRBME1EQXhabHdpT2x3aWMyVmpjREU1TW1zeFhDSXNYQ0l5WWpneE1EUXdNREl4WENJNlhDSnpaV053TWpJMGNqRmNJaXhjSWpKaU9ERXdOREF3TUdGY0lqcGNJbk5sWTNBeU5UWnJNVndpTEZ3aU1tSTRNVEEwTURBeU0xd2lPbHdpYzJWamNEVXlNWEl4WENJc1hDSXlZamd4TURRd01ESXlYQ0k2WENKelpXTndNemcwY2pGY0lpeGNJakpoT0RZME9HTmxNemd3TkRBelhDSTZYQ0pUU0VFeGQybDBhRVJUUVZ3aUxGd2lOakE0TmpRNE1ERTJOVEF6TURRd016QXhYQ0k2WENKVFNFRXlNalIzYVhSb1JGTkJYQ0lzWENJMk1EZzJORGd3TVRZMU1ETXdOREF6TURKY0lqcGNJbE5JUVRJMU5uZHBkR2hFVTBGY0lpeDlmVHRjYmk4cUlTQmxZMlJ6WVMxdGIyUnBabWxsWkMweExqQXVOQzVxY3lBb1l5a2dVM1JsY0doaGJpQlVhRzl0WVhNc0lFdGxibXBwSUZWeWRYTm9hVzFoSUh3Z1oybDBhSFZpTG1OdmJTOWlhWFJqYjJsdWFuTXZZbWwwWTI5cGJtcHpMV3hwWWk5aWJHOWlMMjFoYzNSbGNpOU1TVU5GVGxORlhHNGdLaTljYm1sbUtIUjVjR1Z2WmlCTFNsVlNQVDFjSW5WdVpHVm1hVzVsWkZ3aWZId2hTMHBWVWlsN1MwcFZVajE3ZlgxcFppaDBlWEJsYjJZZ1MwcFZVaTVqY25sd2RHODlQVndpZFc1a1pXWnBibVZrWENKOGZDRkxTbFZTTG1OeWVYQjBieWw3UzBwVlVpNWpjbmx3ZEc4OWUzMTlTMHBWVWk1amNubHdkRzh1UlVORVUwRTlablZ1WTNScGIyNG9hQ2w3ZG1GeUlHVTlYQ0p6WldOd01qVTJjakZjSWp0MllYSWdaejF1ZFd4c08zWmhjaUJpUFc1MWJHdzdkbUZ5SUdZOWJuVnNiRHQyWVhJZ1lUMXVaWGNnVTJWamRYSmxVbUZ1Wkc5dEtDazdkbUZ5SUdROWJuVnNiRHQwYUdsekxuUjVjR1U5WENKRlExd2lPMloxYm1OMGFXOXVJR01vY3l4dkxISXNiaWw3ZG1GeUlHbzlUV0YwYUM1dFlYZ29ieTVpYVhSTVpXNW5kR2dvS1N4dUxtSnBkRXhsYm1kMGFDZ3BLVHQyWVhJZ2REMXpMbUZrWkRKRUtISXBPM1poY2lCeFBYTXVZM1Z5ZG1VdVoyVjBTVzVtYVc1cGRIa29LVHRtYjNJb2RtRnlJSEE5YWkweE8zQStQVEE3TFMxd0tYdHhQWEV1ZEhkcFkyVXlSQ2dwTzNFdWVqMUNhV2RKYm5SbFoyVnlMazlPUlR0cFppaHZMblJsYzNSQ2FYUW9jQ2twZTJsbUtHNHVkR1Z6ZEVKcGRDaHdLU2w3Y1QxeExtRmtaREpFS0hRcGZXVnNjMlY3Y1QxeExtRmtaREpFS0hNcGZYMWxiSE5sZTJsbUtHNHVkR1Z6ZEVKcGRDaHdLU2w3Y1QxeExtRmtaREpFS0hJcGZYMTljbVYwZFhKdUlIRjlkR2hwY3k1blpYUkNhV2RTWVc1a2IyMDlablZ1WTNScGIyNG9hU2w3Y21WMGRYSnVJRzVsZHlCQ2FXZEpiblJsWjJWeUtHa3VZbWwwVEdWdVozUm9LQ2tzWVNrdWJXOWtLR2t1YzNWaWRISmhZM1FvUW1sblNXNTBaV2RsY2k1UFRrVXBLUzVoWkdRb1FtbG5TVzUwWldkbGNpNVBUa1VwZlR0MGFHbHpMbk5sZEU1aGJXVmtRM1Z5ZG1VOVpuVnVZM1JwYjI0b2FTbDdkR2hwY3k1bFkzQmhjbUZ0Y3oxTFNsVlNMbU55ZVhCMGJ5NUZRMUJoY21GdFpYUmxja1JDTG1kbGRFSjVUbUZ0WlNocEtUdDBhR2x6TG5CeWRrdGxlVWhsZUQxdWRXeHNPM1JvYVhNdWNIVmlTMlY1U0dWNFBXNTFiR3c3ZEdocGN5NWpkWEoyWlU1aGJXVTlhWDA3ZEdocGN5NXpaWFJRY21sMllYUmxTMlY1U0dWNFBXWjFibU4wYVc5dUtHa3BlM1JvYVhNdWFYTlFjbWwyWVhSbFBYUnlkV1U3ZEdocGN5NXdjblpMWlhsSVpYZzlhWDA3ZEdocGN5NXpaWFJRZFdKc2FXTkxaWGxJWlhnOVpuVnVZM1JwYjI0b2FTbDdkR2hwY3k1cGMxQjFZbXhwWXoxMGNuVmxPM1JvYVhNdWNIVmlTMlY1U0dWNFBXbDlPM1JvYVhNdVoyVnVaWEpoZEdWTFpYbFFZV2x5U0dWNFBXWjFibU4wYVc5dUtDbDdkbUZ5SUdzOWRHaHBjeTVsWTNCaGNtRnRjeTV1TzNaaGNpQnVQWFJvYVhNdVoyVjBRbWxuVW1GdVpHOXRLR3NwTzNaaGNpQnNQWFJvYVhNdVpXTndZWEpoYlhNdVJ5NXRkV3gwYVhCc2VTaHVLVHQyWVhJZ2NUMXNMbWRsZEZnb0tTNTBiMEpwWjBsdWRHVm5aWElvS1R0MllYSWdiejFzTG1kbGRGa29LUzUwYjBKcFowbHVkR1ZuWlhJb0tUdDJZWElnYVQxMGFHbHpMbVZqY0dGeVlXMXpMbXRsZVd4bGJpODBPM1poY2lCdFBTaGNJakF3TURBd01EQXdNREJjSWl0dUxuUnZVM1J5YVc1bktERTJLU2t1YzJ4cFkyVW9MV2twTzNaaGNpQnlQU2hjSWpBd01EQXdNREF3TURCY0lpdHhMblJ2VTNSeWFXNW5LREUyS1NrdWMyeHBZMlVvTFdrcE8zWmhjaUJ3UFNoY0lqQXdNREF3TURBd01EQmNJaXR2TG5SdlUzUnlhVzVuS0RFMktTa3VjMnhwWTJVb0xXa3BPM1poY2lCcVBWd2lNRFJjSWl0eUszQTdkR2hwY3k1elpYUlFjbWwyWVhSbFMyVjVTR1Y0S0cwcE8zUm9hWE11YzJWMFVIVmliR2xqUzJWNVNHVjRLR29wTzNKbGRIVnlibnRsWTNCeWRtaGxlRHB0TEdWamNIVmlhR1Y0T21wOWZUdDBhR2x6TG5OcFoyNVhhWFJvVFdWemMyRm5aVWhoYzJnOVpuVnVZM1JwYjI0b2FTbDdjbVYwZFhKdUlIUm9hWE11YzJsbmJraGxlQ2hwTEhSb2FYTXVjSEoyUzJWNVNHVjRLWDA3ZEdocGN5NXphV2R1U0dWNFBXWjFibU4wYVc5dUtHOHNhaWw3ZG1GeUlIUTlibVYzSUVKcFowbHVkR1ZuWlhJb2Fpd3hOaWs3ZG1GeUlHdzlkR2hwY3k1bFkzQmhjbUZ0Y3k1dU8zWmhjaUJ4UFc1bGR5QkNhV2RKYm5SbFoyVnlLRzhzTVRZcE8yUnZlM1poY2lCdFBYUm9hWE11WjJWMFFtbG5VbUZ1Wkc5dEtHd3BPM1poY2lCMVBYUm9hWE11WldOd1lYSmhiWE11Unp0MllYSWdjRDExTG0xMWJIUnBjR3g1S0cwcE8zWmhjaUJwUFhBdVoyVjBXQ2dwTG5SdlFtbG5TVzUwWldkbGNpZ3BMbTF2WkNoc0tYMTNhR2xzWlNocExtTnZiWEJoY21WVWJ5aENhV2RKYm5SbFoyVnlMbHBGVWs4cFBEMHdLVHQyWVhJZ2RqMXRMbTF2WkVsdWRtVnljMlVvYkNrdWJYVnNkR2x3Ykhrb2NTNWhaR1FvZEM1dGRXeDBhWEJzZVNocEtTa3BMbTF2WkNoc0tUdHlaWFIxY200Z1MwcFZVaTVqY25sd2RHOHVSVU5FVTBFdVltbFNVMU5wWjFSdlFWTk9NVk5wWnlocExIWXBmVHQwYUdsekxuTnBaMjQ5Wm5WdVkzUnBiMjRvYlN4MUtYdDJZWElnY1QxMU8zWmhjaUJxUFhSb2FYTXVaV053WVhKaGJYTXVianQyWVhJZ2NEMUNhV2RKYm5SbFoyVnlMbVp5YjIxQ2VYUmxRWEp5WVhsVmJuTnBaMjVsWkNodEtUdGtiM3QyWVhJZ2JEMTBhR2x6TG1kbGRFSnBaMUpoYm1SdmJTaHFLVHQyWVhJZ2REMTBhR2x6TG1WamNHRnlZVzF6TGtjN2RtRnlJRzg5ZEM1dGRXeDBhWEJzZVNoc0tUdDJZWElnYVQxdkxtZGxkRmdvS1M1MGIwSnBaMGx1ZEdWblpYSW9LUzV0YjJRb2FpbDlkMmhwYkdVb2FTNWpiMjF3WVhKbFZHOG9RbWxuU1c1MFpXZGxjaTVhUlZKUEtUdzlNQ2s3ZG1GeUlIWTliQzV0YjJSSmJuWmxjbk5sS0dvcExtMTFiSFJwY0d4NUtIQXVZV1JrS0hFdWJYVnNkR2x3Ykhrb2FTa3BLUzV0YjJRb2FpazdjbVYwZFhKdUlIUm9hWE11YzJWeWFXRnNhWHBsVTJsbktHa3NkaWw5TzNSb2FYTXVkbVZ5YVdaNVYybDBhRTFsYzNOaFoyVklZWE5vUFdaMWJtTjBhVzl1S0dvc2FTbDdjbVYwZFhKdUlIUm9hWE11ZG1WeWFXWjVTR1Y0S0dvc2FTeDBhR2x6TG5CMVlrdGxlVWhsZUNsOU8zUm9hWE11ZG1WeWFXWjVTR1Y0UFdaMWJtTjBhVzl1S0cwc2FTeHdLWHQyWVhJZ2JDeHFPM1poY2lCdlBVdEtWVkl1WTNKNWNIUnZMa1ZEUkZOQkxuQmhjbk5sVTJsblNHVjRLR2twTzJ3OWJ5NXlPMm85Ynk1ek8zWmhjaUJyTzJzOVJVTlFiMmx1ZEVad0xtUmxZMjlrWlVaeWIyMUlaWGdvZEdocGN5NWxZM0JoY21GdGN5NWpkWEoyWlN4d0tUdDJZWElnYmoxdVpYY2dRbWxuU1c1MFpXZGxjaWh0TERFMktUdHlaWFIxY200Z2RHaHBjeTUyWlhKcFpubFNZWGNvYml4c0xHb3NheWw5TzNSb2FYTXVkbVZ5YVdaNVBXWjFibU4wYVc5dUtHOHNjQ3hxS1h0MllYSWdiQ3hwTzJsbUtFSnBkR052YVc0dVZYUnBiQzVwYzBGeWNtRjVLSEFwS1h0MllYSWdiajEwYUdsekxuQmhjbk5sVTJsbktIQXBPMnc5Ymk1eU8yazliaTV6ZldWc2MyVjdhV1lvWENKdlltcGxZM1JjSWowOVBYUjVjR1Z2WmlCd0ppWndMbkltSm5BdWN5bDdiRDF3TG5JN2FUMXdMbk45Wld4elpYdDBhSEp2ZDF3aVNXNTJZV3hwWkNCMllXeDFaU0JtYjNJZ2MybG5ibUYwZFhKbFhDSjlmWFpoY2lCck8ybG1LR29nYVc1emRHRnVZMlZ2WmlCRlExQnZhVzUwUm5BcGUyczlhbjFsYkhObGUybG1LRUpwZEdOdmFXNHVWWFJwYkM1cGMwRnljbUY1S0dvcEtYdHJQVVZEVUc5cGJuUkdjQzVrWldOdlpHVkdjbTl0S0hSb2FYTXVaV053WVhKaGJYTXVZM1Z5ZG1Vc2FpbDlaV3h6Wlh0MGFISnZkMXdpU1c1MllXeHBaQ0JtYjNKdFlYUWdabTl5SUhCMVltdGxlU0IyWVd4MVpTd2diWFZ6ZENCaVpTQmllWFJsSUdGeWNtRjVJRzl5SUVWRFVHOXBiblJHY0Z3aWZYMTJZWElnYlQxQ2FXZEpiblJsWjJWeUxtWnliMjFDZVhSbFFYSnlZWGxWYm5OcFoyNWxaQ2h2S1R0eVpYUjFjbTRnZEdocGN5NTJaWEpwWm5sU1lYY29iU3hzTEdrc2F5bDlPM1JvYVhNdWRtVnlhV1o1VW1GM1BXWjFibU4wYVc5dUtHOHNhU3gzTEcwcGUzWmhjaUJzUFhSb2FYTXVaV053WVhKaGJYTXVianQyWVhJZ2RUMTBhR2x6TG1WamNHRnlZVzF6TGtjN2FXWW9hUzVqYjIxd1lYSmxWRzhvUW1sblNXNTBaV2RsY2k1UFRrVXBQREI4ZkdrdVkyOXRjR0Z5WlZSdktHd3BQajB3S1h0eVpYUjFjbTRnWm1Gc2MyVjlhV1lvZHk1amIyMXdZWEpsVkc4b1FtbG5TVzUwWldkbGNpNVBUa1VwUERCOGZIY3VZMjl0Y0dGeVpWUnZLR3dwUGowd0tYdHlaWFIxY200Z1ptRnNjMlY5ZG1GeUlIQTlkeTV0YjJSSmJuWmxjbk5sS0d3cE8zWmhjaUJyUFc4dWJYVnNkR2x3Ykhrb2NDa3ViVzlrS0d3cE8zWmhjaUJxUFdrdWJYVnNkR2x3Ykhrb2NDa3ViVzlrS0d3cE8zWmhjaUJ4UFhVdWJYVnNkR2x3Ykhrb2F5a3VZV1JrS0cwdWJYVnNkR2x3Ykhrb2Fpa3BPM1poY2lCMFBYRXVaMlYwV0NncExuUnZRbWxuU1c1MFpXZGxjaWdwTG0xdlpDaHNLVHR5WlhSMWNtNGdkQzVsY1hWaGJITW9hU2w5TzNSb2FYTXVjMlZ5YVdGc2FYcGxVMmxuUFdaMWJtTjBhVzl1S0dzc2FpbDdkbUZ5SUd3OWF5NTBiMEo1ZEdWQmNuSmhlVk5wWjI1bFpDZ3BPM1poY2lCcFBXb3VkRzlDZVhSbFFYSnlZWGxUYVdkdVpXUW9LVHQyWVhJZ2JUMWJYVHR0TG5CMWMyZ29NaWs3YlM1d2RYTm9LR3d1YkdWdVozUm9LVHR0UFcwdVkyOXVZMkYwS0d3cE8yMHVjSFZ6YUNneUtUdHRMbkIxYzJnb2FTNXNaVzVuZEdncE8yMDliUzVqYjI1allYUW9hU2s3YlM1MWJuTm9hV1owS0cwdWJHVnVaM1JvS1R0dExuVnVjMmhwWm5Rb05EZ3BPM0psZEhWeWJpQnRmVHQwYUdsekxuQmhjbk5sVTJsblBXWjFibU4wYVc5dUtHNHBlM1poY2lCdE8ybG1LRzViTUYwaFBUUTRLWHQwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pUYVdkdVlYUjFjbVVnYm05MElHRWdkbUZzYVdRZ1JFVlNVMlZ4ZFdWdVkyVmNJaWw5YlQweU8ybG1LRzViYlYwaFBUSXBlM1JvY205M0lHNWxkeUJGY25KdmNpaGNJa1pwY25OMElHVnNaVzFsYm5RZ2FXNGdjMmxuYm1GMGRYSmxJRzExYzNRZ1ltVWdZU0JFUlZKSmJuUmxaMlZ5WENJcGZYWmhjaUJzUFc0dWMyeHBZMlVvYlNzeUxHMHJNaXR1VzIwck1WMHBPMjByUFRJcmJsdHRLekZkTzJsbUtHNWJiVjBoUFRJcGUzUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lsTmxZMjl1WkNCbGJHVnRaVzUwSUdsdUlITnBaMjVoZEhWeVpTQnRkWE4wSUdKbElHRWdSRVZTU1c1MFpXZGxjbHdpS1gxMllYSWdhVDF1TG5Oc2FXTmxLRzByTWl4dEt6SXJibHR0S3pGZEtUdHRLejB5SzI1YmJTc3hYVHQyWVhJZ2F6MUNhV2RKYm5SbFoyVnlMbVp5YjIxQ2VYUmxRWEp5WVhsVmJuTnBaMjVsWkNoc0tUdDJZWElnYWoxQ2FXZEpiblJsWjJWeUxtWnliMjFDZVhSbFFYSnlZWGxWYm5OcFoyNWxaQ2hwS1R0eVpYUjFjbTU3Y2pwckxITTZhbjE5TzNSb2FYTXVjR0Z5YzJWVGFXZERiMjF3WVdOMFBXWjFibU4wYVc5dUtHMHBlMmxtS0cwdWJHVnVaM1JvSVQwOU5qVXBlM1JvY205M1hDSlRhV2R1WVhSMWNtVWdhR0Z6SUhSb1pTQjNjbTl1WnlCc1pXNW5kR2hjSW4xMllYSWdhajF0V3pCZExUSTNPMmxtS0dvOE1IeDhhajQzS1h0MGFISnZkMXdpU1c1MllXeHBaQ0J6YVdkdVlYUjFjbVVnZEhsd1pWd2lmWFpoY2lCdlBYUm9hWE11WldOd1lYSmhiWE11Ymp0MllYSWdiRDFDYVdkSmJuUmxaMlZ5TG1aeWIyMUNlWFJsUVhKeVlYbFZibk5wWjI1bFpDaHRMbk5zYVdObEtERXNNek1wS1M1dGIyUW9ieWs3ZG1GeUlHczlRbWxuU1c1MFpXZGxjaTVtY205dFFubDBaVUZ5Y21GNVZXNXphV2R1WldRb2JTNXpiR2xqWlNnek15dzJOU2twTG0xdlpDaHZLVHR5WlhSMWNtNTdjanBzTEhNNmF5eHBPbXA5ZlR0cFppaG9JVDA5ZFc1a1pXWnBibVZrS1h0cFppaG9MbU4xY25abElUMDlkVzVrWldacGJtVmtLWHQwYUdsekxtTjFjblpsVG1GdFpUMW9MbU4xY25abGZYMXBaaWgwYUdsekxtTjFjblpsVG1GdFpUMDlQWFZ1WkdWbWFXNWxaQ2w3ZEdocGN5NWpkWEoyWlU1aGJXVTlaWDEwYUdsekxuTmxkRTVoYldWa1EzVnlkbVVvZEdocGN5NWpkWEoyWlU1aGJXVXBPMmxtS0dnaFBUMTFibVJsWm1sdVpXUXBlMmxtS0dndWNISjJJVDA5ZFc1a1pXWnBibVZrS1h0MGFHbHpMbk5sZEZCeWFYWmhkR1ZMWlhsSVpYZ29hQzV3Y25ZcGZXbG1LR2d1Y0hWaUlUMDlkVzVrWldacGJtVmtLWHQwYUdsekxuTmxkRkIxWW14cFkwdGxlVWhsZUNob0xuQjFZaWw5ZlgwN1MwcFZVaTVqY25sd2RHOHVSVU5FVTBFdWNHRnljMlZUYVdkSVpYZzlablZ1WTNScGIyNG9ZU2w3ZG1GeUlHSTlTMHBWVWk1amNubHdkRzh1UlVORVUwRXVjR0Z5YzJWVGFXZElaWGhKYmtobGVGSlRLR0VwTzNaaGNpQmtQVzVsZHlCQ2FXZEpiblJsWjJWeUtHSXVjaXd4TmlrN2RtRnlJR005Ym1WM0lFSnBaMGx1ZEdWblpYSW9ZaTV6TERFMktUdHlaWFIxY201N2NqcGtMSE02WTMxOU8wdEtWVkl1WTNKNWNIUnZMa1ZEUkZOQkxuQmhjbk5sVTJsblNHVjRTVzVJWlhoU1V6MW1kVzVqZEdsdmJpaGpLWHRwWmloakxuTjFZbk4wY2lnd0xESXBJVDFjSWpNd1hDSXBlM1JvY205M1hDSnphV2R1WVhSMWNtVWdhWE1nYm05MElHRWdRVk5PTGpFZ2MyVnhkV1Z1WTJWY0luMTJZWElnWWoxQlUwNHhTRVZZTG1kbGRGQnZjMEZ5Y21GNVQyWkRhR2xzWkhKbGJsOUJkRTlpYWloakxEQXBPMmxtS0dJdWJHVnVaM1JvSVQweUtYdDBhSEp2ZDF3aWJuVnRZbVZ5SUc5bUlITnBaMjVoZEhWeVpTQkJVMDR1TVNCelpYRjFaVzVqWlNCbGJHVnRaVzUwY3lCelpXVnRJSGR5YjI1blhDSjlkbUZ5SUdjOVlsc3dYVHQyWVhJZ1pqMWlXekZkTzJsbUtHTXVjM1ZpYzNSeUtHY3NNaWtoUFZ3aU1ESmNJaWw3ZEdoeWIzZGNJakZ6ZENCcGRHVnRJRzltSUhObGNYVmxibVVnYjJZZ2MybG5ibUYwZFhKbElHbHpJRzV2ZENCQlUwNHVNU0JwYm5SbFoyVnlYQ0o5YVdZb1l5NXpkV0p6ZEhJb1ppd3lLU0U5WENJd01sd2lLWHQwYUhKdmQxd2lNbTVrSUdsMFpXMGdiMllnYzJWeGRXVnVaU0J2WmlCemFXZHVZWFIxY21VZ2FYTWdibTkwSUVGVFRpNHhJR2x1ZEdWblpYSmNJbjEyWVhJZ1pUMUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZsOUJkRTlpYWloakxHY3BPM1poY2lCa1BVRlRUakZJUlZndVoyVjBTR1Y0VDJaV1gwRjBUMkpxS0dNc1ppazdjbVYwZFhKdWUzSTZaU3h6T21SOWZUdExTbFZTTG1OeWVYQjBieTVGUTBSVFFTNWhjMjR4VTJsblZHOURiMjVqWVhSVGFXYzlablZ1WTNScGIyNG9ZeWw3ZG1GeUlHUTlTMHBWVWk1amNubHdkRzh1UlVORVUwRXVjR0Z5YzJWVGFXZElaWGhKYmtobGVGSlRLR01wTzNaaGNpQmlQV1F1Y2p0MllYSWdZVDFrTG5NN2FXWW9ZaTV6ZFdKemRISW9NQ3d5S1QwOVhDSXdNRndpSmlZb0tDaGlMbXhsYm1kMGFDOHlLU280S1NVb01UWXFPQ2twUFQwNEtYdGlQV0l1YzNWaWMzUnlLRElwZldsbUtHRXVjM1ZpYzNSeUtEQXNNaWs5UFZ3aU1EQmNJaVltS0Nnb1lTNXNaVzVuZEdndk1pa3FPQ2tsS0RFMktqZ3BLVDA5T0NsN1lUMWhMbk4xWW5OMGNpZ3lLWDFwWmlnb0tDaGlMbXhsYm1kMGFDOHlLU280S1NVb01UWXFPQ2twSVQwd0tYdDBhSEp2ZDF3aWRXNXJibTkzYmlCRlEwUlRRU0J6YVdjZ2NpQnNaVzVuZEdnZ1pYSnliM0pjSW4xcFppZ29LQ2hoTG14bGJtZDBhQzh5S1NvNEtTVW9NVFlxT0NrcElUMHdLWHQwYUhKdmQxd2lkVzVyYm05M2JpQkZRMFJUUVNCemFXY2djeUJzWlc1bmRHZ2daWEp5YjNKY0luMXlaWFIxY200Z1lpdGhmVHRMU2xWU0xtTnllWEIwYnk1RlEwUlRRUzVqYjI1allYUlRhV2RVYjBGVFRqRlRhV2M5Wm5WdVkzUnBiMjRvWVNsN2FXWW9LQ2dvWVM1c1pXNW5kR2d2TWlrcU9Da2xLREUyS2pncEtTRTlNQ2w3ZEdoeWIzZGNJblZ1YTI1dmQyNGdSVU5FVTBFZ1kyOXVZMkYwYVc1aGRHVmtJSEl0Y3lCemFXY2dJR3hsYm1kMGFDQmxjbkp2Y2x3aWZYWmhjaUJqUFdFdWMzVmljM1J5S0RBc1lTNXNaVzVuZEdndk1pazdkbUZ5SUdJOVlTNXpkV0p6ZEhJb1lTNXNaVzVuZEdndk1pazdjbVYwZFhKdUlFdEtWVkl1WTNKNWNIUnZMa1ZEUkZOQkxtaGxlRkpUVTJsblZHOUJVMDR4VTJsbktHTXNZaWw5TzB0S1ZWSXVZM0o1Y0hSdkxrVkRSRk5CTG1obGVGSlRVMmxuVkc5QlUwNHhVMmxuUFdaMWJtTjBhVzl1S0dJc1lTbDdkbUZ5SUdROWJtVjNJRUpwWjBsdWRHVm5aWElvWWl3eE5pazdkbUZ5SUdNOWJtVjNJRUpwWjBsdWRHVm5aWElvWVN3eE5pazdjbVYwZFhKdUlFdEtWVkl1WTNKNWNIUnZMa1ZEUkZOQkxtSnBVbE5UYVdkVWIwRlRUakZUYVdjb1pDeGpLWDA3UzBwVlVpNWpjbmx3ZEc4dVJVTkVVMEV1WW1sU1UxTnBaMVJ2UVZOT01WTnBaejFtZFc1amRHbHZiaWhsTEdNcGUzWmhjaUJpUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTU1c1MFpXZGxjaWg3WW1sbmFXNTBPbVY5S1R0MllYSWdZVDF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2x1ZEdWblpYSW9lMkpwWjJsdWREcGpmU2s3ZG1GeUlHUTlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSlRaWEYxWlc1alpTaDdZWEp5WVhrNlcySXNZVjE5S1R0eVpYUjFjbTRnWkM1blpYUkZibU52WkdWa1NHVjRLQ2w5TzF4dUx5b2hJR1ZqY0dGeVlXMHRNUzR3TGpBdWFuTWdLR01wSURJd01UTWdTMlZ1YW1rZ1ZYSjFjMmhwYldFZ2ZDQnJhblZ5TG1kcGRHaDFZaTVqYjIwdmFuTnljMkZ6YVdkdUwyeHBZMlZ1YzJWY2JpQXFMMXh1YVdZb2RIbHdaVzltSUV0S1ZWSTlQVndpZFc1a1pXWnBibVZrWENKOGZDRkxTbFZTS1h0TFNsVlNQWHQ5ZldsbUtIUjVjR1Z2WmlCTFNsVlNMbU55ZVhCMGJ6MDlYQ0oxYm1SbFptbHVaV1JjSW54OElVdEtWVkl1WTNKNWNIUnZLWHRMU2xWU0xtTnllWEIwYnoxN2ZYMUxTbFZTTG1OeWVYQjBieTVGUTFCaGNtRnRaWFJsY2tSQ1BXNWxkeUJtZFc1amRHbHZiaWdwZTNaaGNpQmlQWHQ5TzNaaGNpQmpQWHQ5TzJaMWJtTjBhVzl1SUdFb1pDbDdjbVYwZFhKdUlHNWxkeUJDYVdkSmJuUmxaMlZ5S0dRc01UWXBmWFJvYVhNdVoyVjBRbmxPWVcxbFBXWjFibU4wYVc5dUtHVXBlM1poY2lCa1BXVTdhV1lvZEhsd1pXOW1JR05iWkYwaFBWd2lkVzVrWldacGJtVmtYQ0lwZTJROVkxdGxYWDFwWmloMGVYQmxiMllnWWx0a1hTRTlYQ0oxYm1SbFptbHVaV1JjSWlsN2NtVjBkWEp1SUdKYlpGMTlkR2h5YjNkY0luVnVjbVZuYVhOMFpYSmxaQ0JGUXlCamRYSjJaU0J1WVcxbE9pQmNJaXRrZlR0MGFHbHpMbkpsWjJsemREMW1kVzVqZEdsdmJpaEJMR3dzYnl4bkxHMHNaU3hxTEdZc2F5eDFMR1FzZUNsN1lsdEJYVDE3ZlR0MllYSWdjejFoS0c4cE8zWmhjaUI2UFdFb1p5azdkbUZ5SUhrOVlTaHRLVHQyWVhJZ2REMWhLR1VwTzNaaGNpQjNQV0VvYWlrN2RtRnlJSEk5Ym1WM0lFVkRRM1Z5ZG1WR2NDaHpMSG9zZVNrN2RtRnlJSEU5Y2k1a1pXTnZaR1ZRYjJsdWRFaGxlQ2hjSWpBMFhDSXJaaXRyS1R0aVcwRmRXMXdpYm1GdFpWd2lYVDFCTzJKYlFWMWJYQ0pyWlhsc1pXNWNJbDA5YkR0aVcwRmRXMXdpWTNWeWRtVmNJbDA5Y2p0aVcwRmRXMXdpUjF3aVhUMXhPMkpiUVYxYlhDSnVYQ0pkUFhRN1lsdEJYVnRjSW1oY0lsMDlkenRpVzBGZFcxd2liMmxrWENKZFBXUTdZbHRCWFZ0Y0ltbHVabTljSWwwOWVEdG1iM0lvZG1GeUlIWTlNRHQyUEhVdWJHVnVaM1JvTzNZckt5bDdZMXQxVzNaZFhUMUJmWDE5TzB0S1ZWSXVZM0o1Y0hSdkxrVkRVR0Z5WVcxbGRHVnlSRUl1Y21WbmFYTjBLRndpYzJWamNERXlPSEl4WENJc01USTRMRndpUmtaR1JrWkdSa1JHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWmNJaXhjSWtaR1JrWkdSa1pFUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkRYQ0lzWENKRk9EYzFOemxETVRFd056bEdORE5FUkRneU5EazVNME15UTBWRk5VVkVNMXdpTEZ3aVJrWkdSa1pHUmtVd01EQXdNREF3TURjMVFUTXdSREZDT1RBek9FRXhNVFZjSWl4Y0lqRmNJaXhjSWpFMk1VWkdOelV5T0VJNE9UbENNa1F3UXpJNE5qQTNRMEUxTWtNMVFqZzJYQ0lzWENKRFJqVkJRemd6T1RWQ1FVWkZRakV6UXpBeVJFRXlPVEpFUkVWRU4wRTRNMXdpTEZ0ZExGd2lYQ0lzWENKelpXTndNVEk0Y2pFZ09pQlRSVU5ISUdOMWNuWmxJRzkyWlhJZ1lTQXhNamdnWW1sMElIQnlhVzFsSUdacFpXeGtYQ0lwTzB0S1ZWSXVZM0o1Y0hSdkxrVkRVR0Z5WVcxbGRHVnlSRUl1Y21WbmFYTjBLRndpYzJWamNERTJNR3N4WENJc01UWXdMRndpUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrVkdSa1pHUVVNM00xd2lMRndpTUZ3aUxGd2lOMXdpTEZ3aU1ERXdNREF3TURBd01EQXdNREF3TURBd01EQXdNVUk0UmtFeE5rUkdRVUk1UVVOQk1UWkNOa0l6WENJc1hDSXhYQ0lzWENJelFqUkRNemd5UTBVek4wRkJNVGt5UVRRd01UbEZOell6TURNMlJqUkdOVVJFTkVRM1JVSkNYQ0lzWENJNU16aERSamt6TlRNeE9FWkVRMFZFTmtKRE1qZ3lPRFkxTXpFM016TkRNMFl3TTBNMFJrVkZYQ0lzVzEwc1hDSmNJaXhjSW5ObFkzQXhOakJyTVNBNklGTkZRMGNnWTNWeWRtVWdiM1psY2lCaElERTJNQ0JpYVhRZ2NISnBiV1VnWm1sbGJHUmNJaWs3UzBwVlVpNWpjbmx3ZEc4dVJVTlFZWEpoYldWMFpYSkVRaTV5WldkcGMzUW9YQ0p6WldOd01UWXdjakZjSWl3eE5qQXNYQ0pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JqZEdSa1pHUmtaR1hDSXNYQ0pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JqZEdSa1pHUmtaRFhDSXNYQ0l4UXprM1FrVkdRelUwUWtRM1FUaENOalZCUTBZNE9VWTRNVVEwUkRSQlJFTTFOalZHUVRRMVhDSXNYQ0l3TVRBd01EQXdNREF3TURBd01EQXdNREF3TURBeFJqUkRPRVk1TWpkQlJVUXpRMEUzTlRJeU5UZGNJaXhjSWpGY0lpeGNJalJCT1RaQ05UWTRPRVZHTlRjek1qZzBOalkwTmprNE9UWTRRek00UWtJNU1UTkRRa1pET0RKY0lpeGNJakl6UVRZeU9EVTFNekUyT0RrME4wUTFPVVJEUXpreE1qQTBNak0xTVRNM04wRkROVVpDTXpKY0lpeGJYU3hjSWx3aUxGd2ljMlZqY0RFMk1ISXhJRG9nVTBWRFJ5QmpkWEoyWlNCdmRtVnlJR0VnTVRZd0lHSnBkQ0J3Y21sdFpTQm1hV1ZzWkZ3aUtUdExTbFZTTG1OeWVYQjBieTVGUTFCaGNtRnRaWFJsY2tSQ0xuSmxaMmx6ZENoY0luTmxZM0F4T1RKck1Wd2lMREU1TWl4Y0lrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1ZHUmtaR1JVVXpOMXdpTEZ3aU1Gd2lMRndpTTF3aUxGd2lSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaRk1qWkdNa1pETVRjd1JqWTVORFkyUVRjMFJFVkdSRGhFWENJc1hDSXhYQ0lzWENKRVFqUkdSakV3UlVNd05UZEZPVUZGTWpaQ01EZEVNREk0TUVJM1JqUXpOREZFUVRWRU1VSXhSVUZGTURaRE4wUmNJaXhjSWpsQ01rWXlSalpFT1VNMU5qSTRRVGM0TkRReE5qTkVNREUxUWtVNE5qTTBOREE0TWtGQk9EaEVPVFZGTWtZNVJGd2lMRnRkS1R0TFNsVlNMbU55ZVhCMGJ5NUZRMUJoY21GdFpYUmxja1JDTG5KbFoybHpkQ2hjSW5ObFkzQXhPVEp5TVZ3aUxERTVNaXhjSWtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkZSa1pHUmtaR1JrWkdSa1pHUmtaR1Jsd2lMRndpUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrVkdSa1pHUmtaR1JrWkdSa1pHUmtaRFhDSXNYQ0kyTkRJeE1EVXhPVVUxT1VNNE1FVTNNRVpCTjBVNVFVSTNNakkwTXpBME9VWkZRamhFUlVWRFF6RTBOa0k1UWpGY0lpeGNJa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JqazVSRVZHT0RNMk1UUTJRa001UWpGQ05FUXlNamd6TVZ3aUxGd2lNVndpTEZ3aU1UZzRSRUU0TUVWQ01ETXdPVEJHTmpkRFFrWXlNRVZDTkROQk1UZzRNREJHTkVaR01FRkdSRGd5UmtZeE1ERXlYQ0lzWENJd056RTVNa0k1TlVaR1F6aEVRVGM0TmpNeE1ERXhSVVEyUWpJMFEwUkVOVGN6UmprM04wRXhNVVUzT1RRNE1URmNJaXhiWFNrN1MwcFZVaTVqY25sd2RHOHVSVU5RWVhKaGJXVjBaWEpFUWk1eVpXZHBjM1FvWENKelpXTndNakkwY2pGY0lpd3lNalFzWENKR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSakF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01Wd2lMRndpUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrVkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtWY0lpeGNJa0kwTURVd1FUZzFNRU13TkVJelFVSkdOVFF4TXpJMU5qVXdORFJDTUVJM1JEZENSa1E0UWtFeU56QkNNemswTXpJek5UVkdSa0kwWENJc1hDSkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdNVFpCTWtVd1FqaEdNRE5GTVRORVJESTVORFUxUXpWRE1rRXpSRndpTEZ3aU1Wd2lMRndpUWpjd1JUQkRRa1EyUWtJMFFrWTNSak15TVRNNU1FSTVORUV3TTBNeFJETTFOa015TVRFeU1qTTBNekk0TUVRMk1URTFRekZFTWpGY0lpeGNJa0pFTXpjMk16ZzRRalZHTnpJelJrSTBRekl5UkVaRk5rTkVORE0zTlVFd05VRXdOelEzTmpRME5FUTFPREU1T1RnMU1EQTNSVE0wWENJc1cxMHBPMHRLVlZJdVkzSjVjSFJ2TGtWRFVHRnlZVzFsZEdWeVJFSXVjbVZuYVhOMEtGd2ljMlZqY0RJMU5tc3hYQ0lzTWpVMkxGd2lSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1ZHUmtaR1JrTXlSbHdpTEZ3aU1Gd2lMRndpTjF3aUxGd2lSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtWQ1FVRkZSRU5GTmtGR05EaEJNRE5DUWtaRU1qVkZPRU5FTURNMk5ERTBNVndpTEZ3aU1Wd2lMRndpTnpsQ1JUWTJOMFZHT1VSRFFrSkJRelUxUVRBMk1qazFRMFU0TnpCQ01EY3dNamxDUmtORVFqSkVRMFV5T0VRNU5UbEdNamd4TlVJeE5rWTRNVGM1T0Z3aUxGd2lORGd6UVVSQk56Y3lOa0V6UXpRMk5UVkVRVFJHUWtaRE1FVXhNVEE0UVRoR1JERTNRalEwT0VFMk9EVTFOREU1T1VNME4wUXdPRVpHUWpFd1JEUkNPRndpTEZ0ZEtUdExTbFZTTG1OeWVYQjBieTVGUTFCaGNtRnRaWFJsY2tSQ0xuSmxaMmx6ZENoY0luTmxZM0F5TlRaeU1Wd2lMREkxTml4Y0lrWkdSa1pHUmtaR01EQXdNREF3TURFd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREJHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWmNJaXhjSWtaR1JrWkdSa1pHTURBd01EQXdNREV3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtOY0lpeGNJalZCUXpZek5VUTRRVUV6UVRrelJUZENNMFZDUWtRMU5UYzJPVGc0TmtKRE5qVXhSREEyUWpCRFF6VXpRakJHTmpOQ1EwVXpRek5GTWpkRU1qWXdORUpjSWl4Y0lrWkdSa1pHUmtaR01EQXdNREF3TURCR1JrWkdSa1pHUmtaR1JrWkdSa1pHUWtORk5rWkJRVVJCTnpFM09VVTRORVl6UWpsRFFVTXlSa00yTXpJMU5URmNJaXhjSWpGY0lpeGNJalpDTVRkRU1VWXlSVEV5UXpReU5EZEdPRUpEUlRaRk5UWXpRVFEwTUVZeU56Y3dNemRFT0RFeVJFVkNNek5CTUVZMFFURXpPVFExUkRnNU9FTXlPVFpjSWl4Y0lqUkdSVE0wTWtVeVJrVXhRVGRHT1VJNFJVVTNSVUkwUVRkRE1FWTVSVEUyTWtKRFJUTXpOVGMyUWpNeE5VVkRSVU5DUWpZME1EWTRNemRDUmpVeFJqVmNJaXhiWENKT1NWTlVJRkF0TWpVMlhDSXNYQ0pRTFRJMU5sd2lMRndpY0hKcGJXVXlOVFoyTVZ3aVhTazdTMHBWVWk1amNubHdkRzh1UlVOUVlYSmhiV1YwWlhKRVFpNXlaV2RwYzNRb1hDSnpaV053TXpnMGNqRmNJaXd6T0RRc1hDSkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkZSa1pHUmtaR1JrWXdNREF3TURBd01EQXdNREF3TURBd1JrWkdSa1pHUmtaY0lpeGNJa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1ZHUmtaR1JrWkdSakF3TURBd01EQXdNREF3TURBd01EQkdSa1pHUmtaR1Exd2lMRndpUWpNek1USkdRVGRGTWpORlJUZEZORGs0T0VVd05UWkNSVE5HT0RKRU1Ua3hPREZFT1VNMlJVWkZPREUwTVRFeU1ETXhOREE0T0VZMU1ERXpPRGMxUVVNMk5UWXpPVGhFT0VFeVJVUXhPVVF5UVRnMVF6aEZSRVF6UlVNeVFVVkdYQ0lzWENKR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkROell6TkVRNE1VWTBNemN5UkVSR05UZ3hRVEJFUWpJME9FSXdRVGMzUVVWRFJVTXhPVFpCUTBORE5USTVOek5jSWl4Y0lqRmNJaXhjSWtGQk9EZERRVEl5UWtVNFFqQTFNemM0UlVJeFF6Y3hSVVl6TWpCQlJEYzBOa1V4UkROQ05qSTRRa0UzT1VJNU9EVTVSamMwTVVVd09ESTFOREpCTXpnMU5UQXlSakkxUkVKR05UVXlPVFpETTBFMU5EVkZNemczTWpjMk1FRkNOMXdpTEZ3aU16WXhOMlJsTkdFNU5qSTJNbU0yWmpWa09XVTVPR0ptT1RJNU1tUmpNamxtT0dZME1XUmlaREk0T1dFeE5EZGpaVGxrWVRNeE1UTmlOV1l3WWpoak1EQmhOakJpTVdObE1XUTNaVGd4T1dRM1lUUXpNV1EzWXprd1pXRXdaVFZtWENJc1cxd2lUa2xUVkNCUUxUTTRORndpTEZ3aVVDMHpPRFJjSWwwcE8wdEtWVkl1WTNKNWNIUnZMa1ZEVUdGeVlXMWxkR1Z5UkVJdWNtVm5hWE4wS0Z3aWMyVmpjRFV5TVhJeFhDSXNOVEl4TEZ3aU1VWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pjSWl4Y0lqRkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pEWENJc1hDSXdOVEU1TlRORlFqazJNVGhGTVVNNVFURkdPVEk1UVRJeFFUQkNOamcxTkRCRlJVRXlSRUUzTWpWQ09UbENNekUxUmpOQ09FSTBPRGs1TVRoRlJqRXdPVVV4TlRZeE9UTTVOVEZGUXpkRk9UTTNRakUyTlRKRE1FSkVNMEpDTVVKR01EY3pOVGN6UkVZNE9ETkVNa016TkVZeFJVWTBOVEZHUkRRMlFqVXdNMFl3TUZ3aUxGd2lNVVpHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUmtaR1JrWkdSa1pHUVRVeE9EWTROemd6UWtZeVJqazJOa0kzUmtORE1ERTBPRVkzTURsQk5VUXdNMEpDTlVNNVFqZzRPVGxETkRkQlJVSkNOa1pDTnpGRk9URXpPRFkwTURsY0lpeGNJakZjSWl4Y0lrTTJPRFU0UlRBMlFqY3dOREEwUlRsRFJEbEZNMFZEUWpZMk1qTTVOVUkwTkRJNVF6WTBPREV6T1RBMU0wWkNOVEl4UmpneU9FRkdOakEyUWpSRU0wUkNRVUV4TkVJMVJUYzNSVVpGTnpVNU1qaEdSVEZFUXpFeU4wRXlSa1pCT0VSRk16TTBPRUl6UXpFNE5UWkJOREk1UWtZNU4wVTNSVE14UXpKRk5VSkVOalpjSWl4Y0lqQXhNVGd6T1RJNU5tRTNPRGxoTTJKak1EQTBOV000WVRWbVlqUXlZemRrTVdKa09UazRaalUwTkRRNU5UYzVZalEwTmpneE4yRm1ZbVF4TnpJM00yVTJOakpqT1RkbFpUY3lPVGsxWldZME1qWTBNR00xTlRCaU9UQXhNMlpoWkRBM05qRXpOVE5qTnpBNE5tRXlOekpqTWpRd09EaGlaVGswTnpZNVptUXhOalkxTUZ3aUxGdGNJazVKVTFRZ1VDMDFNakZjSWl4Y0lsQXROVEl4WENKZEtUdGNiaThxSVNCa2MyRXRiVzlrYVdacFpXUXRNUzR3TGpFdWFuTWdLR01wSUZKbFkzVnlhWFI1SUV4aFluTWdSMjFpU0N3Z1MyVnVhbWtnVlhKMWMyaHBiVzFoSUh3Z1oybDBhSFZpTG1OdmJTOXZjR1Z1Y0dkd2FuTXZiM0JsYm5CbmNHcHpMMkpzYjJJdmJXRnpkR1Z5TDB4SlEwVk9VMFZjYmlBcUwxeHVhV1lvZEhsd1pXOW1JRXRLVlZJOVBWd2lkVzVrWldacGJtVmtYQ0o4ZkNGTFNsVlNLWHRMU2xWU1BYdDlmV2xtS0hSNWNHVnZaaUJMU2xWU0xtTnllWEIwYnowOVhDSjFibVJsWm1sdVpXUmNJbng4SVV0S1ZWSXVZM0o1Y0hSdktYdExTbFZTTG1OeWVYQjBiejE3ZlgxTFNsVlNMbU55ZVhCMGJ5NUVVMEU5Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbkE5Ym5Wc2JEdDBhR2x6TG5FOWJuVnNiRHQwYUdsekxtYzliblZzYkR0MGFHbHpMbms5Ym5Wc2JEdDBhR2x6TG5nOWJuVnNiRHQwYUdsekxuUjVjR1U5WENKRVUwRmNJanQwYUdsekxuTmxkRkJ5YVhaaGRHVTlablZ1WTNScGIyNG9laXgzTEhZc1FTeDFLWHQwYUdsekxtbHpVSEpwZG1GMFpUMTBjblZsTzNSb2FYTXVjRDE2TzNSb2FYTXVjVDEzTzNSb2FYTXVaejEyTzNSb2FYTXVlVDFCTzNSb2FYTXVlRDExZlR0MGFHbHpMbk5sZEZCMVlteHBZejFtZFc1amRHbHZiaWgzTEhZc2RTeDZLWHQwYUdsekxtbHpVSFZpYkdsalBYUnlkV1U3ZEdocGN5NXdQWGM3ZEdocGN5NXhQWFk3ZEdocGN5NW5QWFU3ZEdocGN5NTVQWG83ZEdocGN5NTRQVzUxYkd4OU8zUm9hWE11YzJsbmJsZHBkR2hOWlhOellXZGxTR0Z6YUQxbWRXNWpkR2x2YmloNktYdDJZWElnZGoxMGFHbHpMbkE3ZG1GeUlIVTlkR2hwY3k1eE8zWmhjaUJEUFhSb2FYTXVaenQyWVhJZ1JEMTBhR2x6TG5rN2RtRnlJRVU5ZEdocGN5NTRPM1poY2lCQlBYb3VjM1ZpYzNSeUtEQXNkUzVpYVhSTVpXNW5kR2dvS1M4MEtUdDJZWElnUWoxdVpYY2dRbWxuU1c1MFpXZGxjaWg2TERFMktUdDJZWElnZHoxdUtFSnBaMGx1ZEdWblpYSXVUMDVGTG1Ga1pDaENhV2RKYm5SbFoyVnlMazlPUlNrc2RTNXpkV0owY21GamRDaENhV2RKYm5SbFoyVnlMazlPUlNrcE8zWmhjaUJIUFNoRExtMXZaRkJ2ZHloM0xIWXBLUzV0YjJRb2RTazdkbUZ5SUVZOUtIY3ViVzlrU1c1MlpYSnpaU2gxS1M1dGRXeDBhWEJzZVNoQ0xtRmtaQ2hGTG0xMWJIUnBjR3g1S0VjcEtTa3BMbTF2WkNoMUtUdDJZWElnU0QxTFNsVlNMbUZ6YmpFdVFWTk9NVlYwYVd3dWFuTnZibFJ2UVZOT01VaEZXQ2g3YzJWeE9sdDdYQ0pwYm5SY0lqcDdZbWxuYVc1ME9rZDlmU3g3WENKcGJuUmNJanA3WW1sbmFXNTBPa1o5ZlYxOUtUdHlaWFIxY200Z1NIMDdkR2hwY3k1MlpYSnBabmxYYVhSb1RXVnpjMkZuWlVoaGMyZzlablZ1WTNScGIyNG9ReXhDS1h0MllYSWdlajEwYUdsekxuQTdkbUZ5SUhVOWRHaHBjeTV4TzNaaGNpQkhQWFJvYVhNdVp6dDJZWElnU0QxMGFHbHpMbms3ZG1GeUlFVTlkR2hwY3k1d1lYSnpaVUZUVGpGVGFXZHVZWFIxY21Vb1FpazdkbUZ5SUVzOVJWc3dYVHQyWVhJZ1NqMUZXekZkTzNaaGNpQkRQVU11YzNWaWMzUnlLREFzZFM1aWFYUk1aVzVuZEdnb0tTODBLVHQyWVhJZ1JEMXVaWGNnUW1sblNXNTBaV2RsY2loRExERTJLVHRwWmloQ2FXZEpiblJsWjJWeUxscEZVazh1WTI5dGNHRnlaVlJ2S0VzcFBqQjhmRXN1WTI5dGNHRnlaVlJ2S0hVcFBqQjhmRUpwWjBsdWRHVm5aWEl1V2tWU1R5NWpiMjF3WVhKbFZHOG9TaWsrTUh4OFNpNWpiMjF3WVhKbFZHOG9kU2srTUNsN2RHaHliM2RjSW1sdWRtRnNhV1FnUkZOQklITnBaMjVoZEhWeVpWd2lmWFpoY2lCSlBVb3ViVzlrU1c1MlpYSnpaU2gxS1R0MllYSWdRVDFFTG0xMWJIUnBjR3g1S0VrcExtMXZaQ2gxS1R0MllYSWdkajFMTG0xMWJIUnBjR3g1S0VrcExtMXZaQ2gxS1R0MllYSWdSajFITG0xdlpGQnZkeWhCTEhvcExtMTFiSFJwY0d4NUtFZ3ViVzlrVUc5M0tIWXNlaWtwTG0xdlpDaDZLUzV0YjJRb2RTazdjbVYwZFhKdUlFWXVZMjl0Y0dGeVpWUnZLRXNwUFQwd2ZUdDBhR2x6TG5CaGNuTmxRVk5PTVZOcFoyNWhkSFZ5WlQxbWRXNWpkR2x2YmloMUtYdDBjbmw3ZG1GeUlIazlibVYzSUVKcFowbHVkR1ZuWlhJb1FWTk9NVWhGV0M1blpYUldZbmxNYVhOMEtIVXNNQ3hiTUYwc1hDSXdNbHdpS1N3eE5pazdkbUZ5SUhZOWJtVjNJRUpwWjBsdWRHVm5aWElvUVZOT01VaEZXQzVuWlhSV1lubE1hWE4wS0hVc01DeGJNVjBzWENJd01sd2lLU3d4TmlrN2NtVjBkWEp1VzNrc2RsMTlZMkYwWTJnb2R5bDdkR2h5YjNkY0ltMWhiR1p2Y20xbFpDQkVVMEVnYzJsbmJtRjBkWEpsWENKOWZUdG1kVzVqZEdsdmJpQmtLRVVzZHl4Q0xIWXNkU3hES1h0MllYSWdlajFMU2xWU0xtTnllWEIwYnk1VmRHbHNMbWhoYzJoVGRISnBibWNvZHl4RkxuUnZURzkzWlhKRFlYTmxLQ2twTzNaaGNpQjZQWG91YzNWaWMzUnlLREFzZFM1aWFYUk1aVzVuZEdnb0tTODBLVHQyWVhJZ1FUMXVaWGNnUW1sblNXNTBaV2RsY2loNkxERTJLVHQyWVhJZ2VUMXVLRUpwWjBsdWRHVm5aWEl1VDA1RkxtRmtaQ2hDYVdkSmJuUmxaMlZ5TGs5T1JTa3NkUzV6ZFdKMGNtRmpkQ2hDYVdkSmJuUmxaMlZ5TGs5T1JTa3BPM1poY2lCR1BTaENMbTF2WkZCdmR5aDVMSFlwS1M1dGIyUW9kU2s3ZG1GeUlFUTlLSGt1Ylc5a1NXNTJaWEp6WlNoMUtTNXRkV3gwYVhCc2VTaEJMbUZrWkNoRExtMTFiSFJwY0d4NUtFWXBLU2twTG0xdlpDaDFLVHQyWVhJZ1J6MXVaWGNnUVhKeVlYa29LVHRIV3pCZFBVWTdSMXN4WFQxRU8zSmxkSFZ5YmlCSGZXWjFibU4wYVc5dUlISW9kaWw3ZG1GeUlIVTliM0JsYm5CbmNDNWpiMjVtYVdjdVkyOXVabWxuTG5CeVpXWmxjbDlvWVhOb1gyRnNaMjl5YVhSb2JUdHpkMmwwWTJnb1RXRjBhQzV5YjNWdVpDaDJMbUpwZEV4bGJtZDBhQ2dwTHpncEtYdGpZWE5sSURJd09tbG1LSFVoUFRJbUpuVStNVEVtSm5VaFBURXdKaVoxUERncGUzSmxkSFZ5YmlBeWZYSmxkSFZ5YmlCMU8yTmhjMlVnTWpnNmFXWW9kVDR4TVNZbWRUdzRLWHR5WlhSMWNtNGdNVEY5Y21WMGRYSnVJSFU3WTJGelpTQXpNanBwWmloMVBqRXdKaVoxUERncGUzSmxkSFZ5YmlBNGZYSmxkSFZ5YmlCMU8yUmxabUYxYkhRNmRYUnBiQzV3Y21sdWRGOWtaV0oxWnloY0lrUlRRU0J6Wld4bFkzUWdhR0Z6YUNCaGJHZHZjbWwwYUcwNklISmxkSFZ5Ym1sdVp5QnVkV3hzSUdadmNpQmhiaUIxYm10dWIzZHVJR3hsYm1kMGFDQnZaaUJ4WENJcE8zSmxkSFZ5YmlCdWRXeHNmWDEwYUdsekxuTmxiR1ZqZEY5b1lYTm9YMkZzWjI5eWFYUm9iVDF5TzJaMWJtTjBhVzl1SUcwb1NTeExMRW9zUWl4NkxIVXNSaXhIS1h0MllYSWdRejFMU2xWU0xtTnllWEIwYnk1VmRHbHNMbWhoYzJoVGRISnBibWNvUWl4SkxuUnZURzkzWlhKRFlYTmxLQ2twTzNaaGNpQkRQVU11YzNWaWMzUnlLREFzZFM1aWFYUk1aVzVuZEdnb0tTODBLVHQyWVhJZ1JEMXVaWGNnUW1sblNXNTBaV2RsY2loRExERTJLVHRwWmloQ2FXZEpiblJsWjJWeUxscEZVazh1WTI5dGNHRnlaVlJ2S0VzcFBqQjhmRXN1WTI5dGNHRnlaVlJ2S0hVcFBqQjhmRUpwWjBsdWRHVm5aWEl1V2tWU1R5NWpiMjF3WVhKbFZHOG9TaWsrTUh4OFNpNWpiMjF3WVhKbFZHOG9kU2srTUNsN2RYUnBiQzV3Y21sdWRGOWxjbkp2Y2loY0ltbHVkbUZzYVdRZ1JGTkJJRk5wWjI1aGRIVnlaVndpS1R0eVpYUjFjbTRnYm5Wc2JIMTJZWElnU0QxS0xtMXZaRWx1ZG1WeWMyVW9kU2s3ZG1GeUlFRTlSQzV0ZFd4MGFYQnNlU2hJS1M1dGIyUW9kU2s3ZG1GeUlIWTlTeTV0ZFd4MGFYQnNlU2hJS1M1dGIyUW9kU2s3ZG1GeUlFVTlSaTV0YjJSUWIzY29RU3g2S1M1dGRXeDBhWEJzZVNoSExtMXZaRkJ2ZHloMkxIb3BLUzV0YjJRb2Vpa3ViVzlrS0hVcE8zSmxkSFZ5YmlCRkxtTnZiWEJoY21WVWJ5aExLVDA5TUgxbWRXNWpkR2x2YmlCaEtIb3BlM1poY2lCQlBXNWxkeUJDYVdkSmJuUmxaMlZ5S0hvc2NISnBiV1ZEWlc1MFpYSnBaU2s3ZG1GeUlIazlhaWh4TERVeE1pazdkbUZ5SUhVOWRDaHdMSEVzZWlrN2RtRnlJSFk3Wkc5N2RqMXVaWGNnUW1sblNXNTBaV2RsY2loeExtSnBkRU52ZFc1MEtDa3NjbUZ1WkNsOWQyaHBiR1VvZUM1amIyMXdZWEpsVkc4b1FtbG5TVzUwWldkbGNpNWFSVkpQS1NFOU1TWW1lQzVqYjIxd1lYSmxWRzhvY1NraFBTMHhLVHQyWVhJZ2R6MW5MbTF2WkZCdmR5aDRMSEFwTzNKbGRIVnlibnQ0T25Zc2NUcEJMSEE2ZVN4bk9uVXNlVHAzZlgxbWRXNWpkR2x2YmlCcUtIa3NlaXgzS1h0cFppaDZKVFkwSVQwd0tYdHlaWFIxY200Z1ptRnNjMlY5ZG1GeUlIVTdkbUZ5SUhZN1pHOTdkVDEzS0dKcGRHTnZkVzUwTEhSeWRXVXBPM1k5ZFM1emRXSjBjbUZqZENoQ2FXZEpiblJsWjJWeUxrOU9SU2s3ZFQxMUxuTjFZblJ5WVdOMEtIWXVjbVZ0WVdsdVpHVnlLSGtwS1gxM2FHbHNaU2doZFM1cGMxQnliMkpoWW14bFVISnBiV1VvY0hKcGJXVkRaVzUwWlhKcFpTbDhmSFV1WW1sMFRHVnVaM1JvS0NraFBXd3BPM0psZEhWeWJpQjFmV1oxYm1OMGFXOXVJSFFvUWl4NkxFRXNkeWw3ZG1GeUlIVTlRaTV6ZFdKMGNtRmpkQ2hDYVdkSmJuUmxaMlZ5TGs5T1JTazdkbUZ5SUhrOWRTNWthWFpwWkdVb2VpazdkbUZ5SUhZN1pHOTdkajEzS0VFcGZYZG9hV3hsS0hZdVkyOXRjR0Z5WlZSdktIVXBJVDB0TVNZbWRpNWpiMjF3WVhKbFZHOG9RbWxuU1c1MFpXZGxjaTVQVGtVcElUMHhLVHR5WlhSMWNtNGdkaTV0YjJSUWIzY29lU3hDS1gxbWRXNWpkR2x2YmlCdktIY3NlU3gxS1h0MllYSWdkanRrYjN0MlBYVW9lU3htWVd4elpTbDlkMmhwYkdVb2RpNWpiMjF3WVhKbFZHOG9keWtoUFMweEppWjJMbU52YlhCaGNtVlVieWhDYVdkSmJuUmxaMlZ5TGxwRlVrOHBJVDB4S1R0eVpYUjFjbTRnZG4xbWRXNWpkR2x2YmlCcEtIWXNkeWw3YXoxdktIWXBPM1poY2lCMVBXY3ViVzlrVUc5M0tHc3NkeWt1Ylc5a0tIWXBPM0psZEhWeWJpQjFmV1oxYm1OMGFXOXVJR2dvUWl4M0xIa3NkaXg2TEhVcGUzWmhjaUJCUFVJb2RpazdjejBvZHk1dGIyUkpiblpsY25ObEtIb3BMbTExYkhScGNHeDVLRUV1WVdSa0tIVXViWFZzZEdsd2JIa29lU2twS1NrdWJXOWtLSG9wTzNKbGRIVnliaUJ6ZlhSb2FYTXVjMmxuYmoxa08zUm9hWE11ZG1WeWFXWjVQVzA3Wm5WdVkzUnBiMjRnYmloM0xIVXBlMmxtS0hVdVkyOXRjR0Z5WlZSdktIY3BQRDB3S1h0eVpYUjFjbTU5ZG1GeUlIWTlkUzV6ZFdKMGNtRmpkQ2gzS1R0MllYSWdlVDFsS0hZdVltbDBUR1Z1WjNSb0tDa3BPM2RvYVd4bEtIaytkaWw3ZVQxbEtIWXVZbWwwVEdWdVozUm9LQ2twZlhKbGRIVnliaUIzTG1Ga1pDaDVLWDFtZFc1amRHbHZiaUJsS0hjcGUybG1LSGM4TUNsN2NtVjBkWEp1SUc1MWJHeDlkbUZ5SUhVOVRXRjBhQzVtYkc5dmNpZ29keXMzS1M4NEtUdDJZWElnZGoxaktIVXBPMmxtS0hjbE9ENHdLWHQyUFZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb0tFMWhkR2d1Y0c5M0tESXNkeVU0S1MweEtTWjJMbU5vWVhKRGIyUmxRWFFvTUNrcEszWXVjM1ZpYzNSeWFXNW5LREVwZlhKbGRIVnliaUJ1WlhjZ1FtbG5TVzUwWldkbGNpaG1LSFlwTERFMktYMW1kVzVqZEdsdmJpQmpLSGNwZTNaaGNpQjFQVndpWENJN1ptOXlLSFpoY2lCMlBUQTdkangzTzNZckt5bDdkU3M5VTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNoaUtDa3BmWEpsZEhWeWJpQjFmV1oxYm1OMGFXOXVJR0lvS1h0MllYSWdkVDF1WlhjZ1ZXbHVkRE15UVhKeVlYa29NU2s3ZDJsdVpHOTNMbU55ZVhCMGJ5NW5aWFJTWVc1a2IyMVdZV3gxWlhNb2RTazdjbVYwZFhKdUlIVmJNRjBtTWpVMWZXWjFibU4wYVc5dUlHWW9lU2w3YVdZb2VUMDliblZzYkNsN2NtVjBkWEp1WENKY0luMTJZWElnZGoxYlhUdDJZWElnZHoxNUxteGxibWQwYUR0MllYSWdlajB3TzNaaGNpQjFPM2RvYVd4bEtIbzhkeWw3ZFQxNVczb3JLMTB1WTJoaGNrTnZaR1ZCZENncExuUnZVM1J5YVc1bktERTJLVHQzYUdsc1pTaDFMbXhsYm1kMGFEd3lLWHQxUFZ3aU1Gd2lLM1Y5ZGk1d2RYTm9LRndpWENJcmRTbDljbVYwZFhKdUlIWXVhbTlwYmloY0lsd2lLWDEwYUdsekxtZGxkRkpoYm1SdmJVSnBaMGx1ZEdWblpYSkpibEpoYm1kbFBXNDdkR2hwY3k1blpYUlNZVzVrYjIxQ2FXZEpiblJsWjJWeVBXVTdkR2hwY3k1blpYUlNZVzVrYjIxQ2VYUmxjejFqZlR0Y2JpOHFJU0J3YTJOek5YQnJaWGt0TVM0d0xqWXVhbk1nS0dNcElESXdNVE10TWpBeE5DQkxaVzVxYVNCVmNuVnphR2x0WVNCOElHdHFkWEl1WjJsMGFIVmlMbU52YlM5cWMzSnpZWE5wWjI0dmJHbGpaVzV6WlZ4dUlDb3ZYRzUyWVhJZ1VFdERVelZRUzBWWlBXWjFibU4wYVc5dUtDbDdkbUZ5SUdNOVpuVnVZM1JwYjI0b2JpeHdMRzhwZTNKbGRIVnliaUJwS0VOeWVYQjBiMHBUTGtGRlV5eHVMSEFzYnlsOU8zWmhjaUJrUFdaMWJtTjBhVzl1S0c0c2NDeHZLWHR5WlhSMWNtNGdhU2hEY25sd2RHOUtVeTVVY21sd2JHVkVSVk1zYml4d0xHOHBmVHQyWVhJZ2FUMW1kVzVqZEdsdmJpaHhMSFlzY3l4dktYdDJZWElnY0QxRGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5CaGNuTmxLSFlwTzNaaGNpQjFQVU55ZVhCMGIwcFRMbVZ1WXk1SVpYZ3VjR0Z5YzJVb2N5azdkbUZ5SUc0OVEzSjVjSFJ2U2xNdVpXNWpMa2hsZUM1d1lYSnpaU2h2S1R0MllYSWdjajE3ZlR0eUxtdGxlVDExTzNJdWFYWTlianR5TG1OcGNHaGxjblJsZUhROWNEdDJZWElnZEQxeExtUmxZM0o1Y0hRb2NpeDFMSHRwZGpwdWZTazdjbVYwZFhKdUlFTnllWEIwYjBwVExtVnVZeTVJWlhndWMzUnlhVzVuYVdaNUtIUXBmVHQyWVhJZ2FqMW1kVzVqZEdsdmJpaHVMSEFzYnlsN2NtVjBkWEp1SUdVb1EzSjVjSFJ2U2xNdVFVVlRMRzRzY0N4dktYMDdkbUZ5SUcwOVpuVnVZM1JwYjI0b2JpeHdMRzhwZTNKbGRIVnliaUJsS0VOeWVYQjBiMHBUTGxSeWFYQnNaVVJGVXl4dUxIQXNieWw5TzNaaGNpQmxQV1oxYm1OMGFXOXVLSE1zZUN4MkxIQXBlM1poY2lCeVBVTnllWEIwYjBwVExtVnVZeTVJWlhndWNHRnljMlVvZUNrN2RtRnlJSGM5UTNKNWNIUnZTbE11Wlc1akxraGxlQzV3WVhKelpTaDJLVHQyWVhJZ2J6MURjbmx3ZEc5S1V5NWxibU11U0dWNExuQmhjbk5sS0hBcE8zWmhjaUJ1UFh0OU8zWmhjaUIxUFhNdVpXNWpjbmx3ZENoeUxIY3NlMmwyT205OUtUdDJZWElnY1QxRGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5CaGNuTmxLSFV1ZEc5VGRISnBibWNvS1NrN2RtRnlJSFE5UTNKNWNIUnZTbE11Wlc1akxrSmhjMlUyTkM1emRISnBibWRwWm5rb2NTazdjbVYwZFhKdUlIUjlPM1poY2lCblBYdGNJa0ZGVXkweU5UWXRRMEpEWENJNmUzQnliMk02WXl4bGNISnZZenBxTEd0bGVXeGxiam96TWl4cGRteGxiam94Tm4wc1hDSkJSVk10TVRreUxVTkNRMXdpT250d2NtOWpPbU1zWlhCeWIyTTZhaXhyWlhsc1pXNDZNalFzYVhac1pXNDZNVFo5TEZ3aVFVVlRMVEV5T0MxRFFrTmNJanA3Y0hKdll6cGpMR1Z3Y205ak9tb3NhMlY1YkdWdU9qRTJMR2wyYkdWdU9qRTJmU3hjSWtSRlV5MUZSRVV6TFVOQ1Exd2lPbnR3Y205ak9tUXNaWEJ5YjJNNmJTeHJaWGxzWlc0Nk1qUXNhWFpzWlc0Nk9IMTlPM1poY2lCaVBXWjFibU4wYVc5dUtHNHBlM0psZEhWeWJpQm5XMjVkVzF3aWNISnZZMXdpWFgwN2RtRnlJR3M5Wm5WdVkzUnBiMjRvYmlsN2RtRnlJSEE5UTNKNWNIUnZTbE11YkdsaUxsZHZjbVJCY25KaGVTNXlZVzVrYjIwb2JpazdkbUZ5SUc4OVEzSjVjSFJ2U2xNdVpXNWpMa2hsZUM1emRISnBibWRwWm5rb2NDazdjbVYwZFhKdUlHOTlPM1poY2lCc1BXWjFibU4wYVc5dUtIRXBlM1poY2lCeVBYdDlPMmxtS0hFdWJXRjBZMmdvYm1WM0lGSmxaMFY0Y0NoY0lrUkZTeTFKYm1adk9pQW9XMTRzWFNzcExDaGJNQzA1UVMxR1lTMW1YU3NwWENJc1hDSnRYQ0lwS1NsN2NpNWphWEJvWlhJOVVtVm5SWGh3TGlReE8zSXVhWFp6WVd4MFBWSmxaMFY0Y0M0a01uMXBaaWh4TG0xaGRHTm9LRzVsZHlCU1pXZEZlSEFvWENJdExTMHRMVUpGUjBsT0lDaGJRUzFhWFNzcElGQlNTVlpCVkVVZ1MwVlpMUzB0TFMxY0lpa3BLWHR5TG5SNWNHVTlVbVZuUlhod0xpUXhmWFpoY2lCd1BTMHhPM1poY2lCMFBUQTdhV1lvY1M1cGJtUmxlRTltS0Z3aVhGeHlYRnh1WEZ4eVhGeHVYQ0lwSVQwdE1TbDdjRDF4TG1sdVpHVjRUMllvWENKY1hISmNYRzVjWEhKY1hHNWNJaWs3ZEQweWZXbG1LSEV1YVc1a1pYaFBaaWhjSWx4Y2JseGNibHdpS1NFOUxURXBlM0E5Y1M1cGJtUmxlRTltS0Z3aVhGeHVYRnh1WENJcE8zUTlNWDEyWVhJZ2J6MXhMbWx1WkdWNFQyWW9YQ0l0TFMwdExVVk9SRndpS1R0cFppaHdJVDB0TVNZbWJ5RTlMVEVwZTNaaGNpQnVQWEV1YzNWaWMzUnlhVzVuS0hBcmRDb3lMRzh0ZENrN2JqMXVMbkpsY0d4aFkyVW9MMXhjY3lzdlp5eGNJbHdpS1R0eUxtUmhkR0U5Ym4xeVpYUjFjbTRnY24wN2RtRnlJR2c5Wm5WdVkzUnBiMjRvYnl4M0xHNHBlM1poY2lCMFBXNHVjM1ZpYzNSeWFXNW5LREFzTVRZcE8zWmhjaUJ5UFVOeWVYQjBiMHBUTG1WdVl5NUlaWGd1Y0dGeWMyVW9kQ2s3ZG1GeUlIQTlRM0o1Y0hSdlNsTXVaVzVqTGxWMFpqZ3VjR0Z5YzJVb2R5azdkbUZ5SUhNOVoxdHZYVnRjSW10bGVXeGxibHdpWFN0blcyOWRXMXdpYVhac1pXNWNJbDA3ZG1GeUlIWTlYQ0pjSWp0MllYSWdkVDF1ZFd4c08yWnZjaWc3T3lsN2RtRnlJSEU5UTNKNWNIUnZTbE11WVd4bmJ5NU5SRFV1WTNKbFlYUmxLQ2s3YVdZb2RTRTliblZzYkNsN2NTNTFjR1JoZEdVb2RTbDljUzUxY0dSaGRHVW9jQ2s3Y1M1MWNHUmhkR1VvY2lrN2RUMXhMbVpwYm1Gc2FYcGxLQ2s3ZGoxMkswTnllWEIwYjBwVExtVnVZeTVJWlhndWMzUnlhVzVuYVdaNUtIVXBPMmxtS0hZdWJHVnVaM1JvUGoxektqSXBlMkp5WldGcmZYMTJZWElnZUQxN2ZUdDRMbXRsZVdobGVEMTJMbk4xWW5OMGNpZ3dMR2RiYjExYlhDSnJaWGxzWlc1Y0lsMHFNaWs3ZUM1cGRtaGxlRDEyTG5OMVluTjBjaWhuVzI5ZFcxd2lhMlY1YkdWdVhDSmRLaklzWjF0dlhWdGNJbWwyYkdWdVhDSmRLaklwTzNKbGRIVnliaUI0ZlR0MllYSWdZVDFtZFc1amRHbHZiaWh1TEhRc2NDeDFLWHQyWVhJZ2NUMURjbmx3ZEc5S1V5NWxibU11UW1GelpUWTBMbkJoY25ObEtHNHBPM1poY2lCdlBVTnllWEIwYjBwVExtVnVZeTVJWlhndWMzUnlhVzVuYVdaNUtIRXBPM1poY2lCelBXZGJkRjFiWENKd2NtOWpYQ0pkTzNaaGNpQnlQWE1vYnl4d0xIVXBPM0psZEhWeWJpQnlmVHQyWVhJZ1pqMW1kVzVqZEdsdmJpaHVMSEVzYnl4ektYdDJZWElnY0QxblczRmRXMXdpWlhCeWIyTmNJbDA3ZG1GeUlISTljQ2h1TEc4c2N5azdjbVYwZFhKdUlISjlPM0psZEhWeWJudDJaWEp6YVc5dU9sd2lNUzR3TGpWY0lpeG5aWFJJWlhoR2NtOXRVRVZOT21aMWJtTjBhVzl1S0c4c2NpbDdkbUZ5SUhBOWJ6dHBaaWh3TG1sdVpHVjRUMllvWENKQ1JVZEpUaUJjSWl0eUtUMDlMVEVwZTNSb2NtOTNYQ0pqWVc0bmRDQm1hVzVrSUZCRlRTQm9aV0ZrWlhJNklGd2lLM0o5Y0Qxd0xuSmxjR3hoWTJVb1hDSXRMUzB0TFVKRlIwbE9JRndpSzNJclhDSXRMUzB0TFZ3aUxGd2lYQ0lwTzNBOWNDNXlaWEJzWVdObEtGd2lMUzB0TFMxRlRrUWdYQ0lyY2l0Y0lpMHRMUzB0WENJc1hDSmNJaWs3ZG1GeUlIRTljQzV5WlhCc1lXTmxLQzljWEhNckwyY3NYQ0pjSWlrN2RtRnlJRzQ5WWpZMGRHOW9aWGdvY1NrN2NtVjBkWEp1SUc1OUxHZGxkRVJsWTNKNWNIUmxaRXRsZVVobGVFSjVTMlY1U1ZZNlpuVnVZM1JwYjI0b2J5eHlMSEVzY0NsN2RtRnlJRzQ5WWloeUtUdHlaWFIxY200Z2JpaHZMSEVzY0NsOUxIQmhjbk5sVUV0RFV6VlFSVTA2Wm5WdVkzUnBiMjRvYmlsN2NtVjBkWEp1SUd3b2JpbDlMR2RsZEV0bGVVRnVaRlZ1ZFhObFpFbDJRbmxRWVhOelkyOWtaVUZ1WkVsMmMyRnNkRHBtZFc1amRHbHZiaWh2TEc0c2NDbDdjbVYwZFhKdUlHZ29ieXh1TEhBcGZTeGtaV055ZVhCMFMyVjVRalkwT21aMWJtTjBhVzl1S0c0c2NDeHZMSEVwZTNKbGRIVnliaUJoS0c0c2NDeHZMSEVwZlN4blpYUkVaV055ZVhCMFpXUkxaWGxJWlhnNlpuVnVZM1JwYjI0b2R5eDJLWHQyWVhJZ2J6MXNLSGNwTzNaaGNpQnlQVzh1ZEhsd1pUdDJZWElnY0QxdkxtTnBjR2hsY2p0MllYSWdiajF2TG1sMmMyRnNkRHQyWVhJZ2NUMXZMbVJoZEdFN2RtRnlJSFU5YUNod0xIWXNiaWs3ZG1GeUlIUTlkUzVyWlhsb1pYZzdkbUZ5SUhNOVlTaHhMSEFzZEN4dUtUdHlaWFIxY200Z2MzMHNaMlYwVWxOQlMyVjVSbkp2YlVWdVkzSjVjSFJsWkZCTFExTTFVRVZOT21aMWJtTjBhVzl1S0hBc2J5bDdkbUZ5SUhFOWRHaHBjeTVuWlhSRVpXTnllWEIwWldSTFpYbElaWGdvY0N4dktUdDJZWElnYmoxdVpYY2dVbE5CUzJWNUtDazdiaTV5WldGa1VISnBkbUYwWlV0bGVVWnliMjFCVTA0eFNHVjRVM1J5YVc1bktIRXBPM0psZEhWeWJpQnVmU3huWlhSRmNubHdkR1ZrVUV0RFV6VlFSVTFHY205dFVISjJTMlY1U0dWNE9tWjFibU4wYVc5dUtIRXNlQ3h5TEhBcGUzWmhjaUJ1UFZ3aVhDSTdhV1lvZEhsd1pXOW1JSEk5UFZ3aWRXNWtaV1pwYm1Wa1hDSjhmSEk5UFc1MWJHd3BlM0k5WENKQlJWTXRNalUyTFVOQ1Exd2lmV2xtS0hSNWNHVnZaaUJuVzNKZFBUMWNJblZ1WkdWbWFXNWxaRndpS1h0MGFISnZkMXdpVUV0RFV6VlFTMFZaSUhWdWMzVndjRzl5ZEdWa0lHRnNaMjl5YVhSb2JUb2dYQ0lyY24xcFppaDBlWEJsYjJZZ2NEMDlYQ0oxYm1SbFptbHVaV1JjSW54OGNEMDliblZzYkNsN2RtRnlJSFE5WjF0eVhWdGNJbWwyYkdWdVhDSmRPM1poY2lCelBXc29kQ2s3Y0QxekxuUnZWWEJ3WlhKRFlYTmxLQ2w5ZG1GeUlIYzlhQ2h5TEhnc2NDazdkbUZ5SUhZOWR5NXJaWGxvWlhnN2RtRnlJSFU5WmloeExISXNkaXh3S1R0MllYSWdiejExTG5KbGNHeGhZMlVvTHlndWV6WTBmU2t2Wnl4Y0lpUXhYRnh5WEZ4dVhDSXBPM1poY2lCdVBWd2lMUzB0TFMxQ1JVZEpUaUJTVTBFZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFZ4Y2NseGNibHdpTzI0clBWd2lVSEp2WXkxVWVYQmxPaUEwTEVWT1ExSlpVRlJGUkZ4Y2NseGNibHdpTzI0clBWd2lSRVZMTFVsdVptODZJRndpSzNJclhDSXNYQ0lyY0N0Y0lseGNjbHhjYmx3aU8yNHJQVndpWEZ4eVhGeHVYQ0k3YmlzOWJ6dHVLejFjSWx4Y2NseGNiaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0WEZ4eVhGeHVYQ0k3Y21WMGRYSnVJRzU5TEdkbGRFVnllWEIwWldSUVMwTlROVkJGVFVaeWIyMVNVMEZMWlhrNlpuVnVZM1JwYjI0b1F5eEVMRzhzY3lsN2RtRnlJRUU5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpKYm5SbFoyVnlLSHRjSW1sdWRGd2lPakI5S1R0MllYSWdkajF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2x1ZEdWblpYSW9lMkpwWjJsdWREcERMbTU5S1R0MllYSWdlajF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2x1ZEdWblpYSW9lMXdpYVc1MFhDSTZReTVsZlNrN2RtRnlJRUk5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpKYm5SbFoyVnlLSHRpYVdkcGJuUTZReTVrZlNrN2RtRnlJSFE5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpKYm5SbFoyVnlLSHRpYVdkcGJuUTZReTV3ZlNrN2RtRnlJSEk5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpKYm5SbFoyVnlLSHRpYVdkcGJuUTZReTV4ZlNrN2RtRnlJSGs5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpKYm5SbFoyVnlLSHRpYVdkcGJuUTZReTVrYlhBeGZTazdkbUZ5SUhVOWJtVjNJRXRLVlZJdVlYTnVNUzVFUlZKSmJuUmxaMlZ5S0h0aWFXZHBiblE2UXk1a2JYRXhmU2s3ZG1GeUlIZzlibVYzSUV0S1ZWSXVZWE51TVM1RVJWSkpiblJsWjJWeUtIdGlhV2RwYm5RNlF5NWpiMlZtWm4wcE8zWmhjaUJGUFc1bGR5QkxTbFZTTG1GemJqRXVSRVZTVTJWeGRXVnVZMlVvZTJGeWNtRjVPbHRCTEhZc2VpeENMSFFzY2l4NUxIVXNlRjE5S1R0MllYSWdkejFGTG1kbGRFVnVZMjlrWldSSVpYZ29LVHR5WlhSMWNtNGdkR2hwY3k1blpYUkZjbmx3ZEdWa1VFdERVelZRUlUxR2NtOXRVSEoyUzJWNVNHVjRLSGNzUkN4dkxITXBmU3h1WlhkRmJtTnllWEIwWldSUVMwTlROVkJGVFRwbWRXNWpkR2x2YmlodUxHOHNjaXh6S1h0cFppaDBlWEJsYjJZZ2J6MDlYQ0oxYm1SbFptbHVaV1JjSW54OGJ6MDliblZzYkNsN2J6MHhNREkwZldsbUtIUjVjR1Z2WmlCeVBUMWNJblZ1WkdWbWFXNWxaRndpZkh4eVBUMXVkV3hzS1h0eVBWd2lNVEF3TURGY0luMTJZWElnY0QxdVpYY2dVbE5CUzJWNUtDazdjQzVuWlc1bGNtRjBaU2h2TEhJcE8zWmhjaUJ4UFc1MWJHdzdhV1lvZEhsd1pXOW1JSE05UFZ3aWRXNWtaV1pwYm1Wa1hDSjhmSE05UFc1MWJHd3BlM0U5ZEdocGN5NW5aWFJGYm1OeWVYQjBaV1JRUzBOVE5WQkZUVVp5YjIxU1UwRkxaWGtvY0d0bGVTeHVLWDFsYkhObGUzRTlkR2hwY3k1blpYUkZibU55ZVhCMFpXUlFTME5UTlZCRlRVWnliMjFTVTBGTFpYa29jR3RsZVN4dUxITXBmWEpsZEhWeWJpQnhmU3huWlhSU1UwRkxaWGxHY205dFVHeGhhVzVRUzBOVE9GQkZUVHBtZFc1amRHbHZiaWh3S1h0cFppaHdMbTFoZEdOb0tDOUZUa05TV1ZCVVJVUXZLU2w3ZEdoeWIzZGNJbkJsYlNCemFHRnNiQ0JpWlNCdWIzUWdSVTVEVWxsUVZFVkVYQ0o5ZG1GeUlHODlkR2hwY3k1blpYUklaWGhHY205dFVFVk5LSEFzWENKUVVrbFdRVlJGSUV0RldWd2lLVHQyWVhJZ2JqMTBhR2x6TG1kbGRGSlRRVXRsZVVaeWIyMVFiR0ZwYmxCTFExTTRTR1Y0S0c4cE8zSmxkSFZ5YmlCdWZTeG5aWFJTVTBGTFpYbEdjbTl0VUd4aGFXNVFTME5UT0VobGVEcG1kVzVqZEdsdmJpaHhLWHQyWVhJZ2NEMUJVMDR4U0VWWUxtZGxkRkJ2YzBGeWNtRjVUMlpEYUdsc1pISmxibDlCZEU5aWFpaHhMREFwTzJsbUtIQXViR1Z1WjNSb0lUMHpLWHQwYUhKdmQxd2liM1YwWlhJZ1JFVlNVMlZ4ZFdWdVkyVWdjMmhoYkd3Z2FHRjJaU0F6SUdWc1pXMWxiblJ6T2lCY0lpdHdMbXhsYm1kMGFIMTJZWElnYnoxQlUwNHhTRVZZTG1kbGRFaGxlRTltVkV4V1gwRjBUMkpxS0hFc2NGc3hYU2s3YVdZb2J5RTlYQ0l6TURCa01EWXdPVEpoT0RZME9EZzJaamN3WkRBeE1ERXdNVEExTURCY0lpbDdkR2h5YjNkY0lsQkxRMU00SUVGc1oyOXlhWFJvYlVsa1pXNTBhV1pwWlhJZ2FYTWdibTkwSUhKellVVnVZem9nWENJcmIzMTJZWElnYnoxQlUwNHhTRVZZTG1kbGRFaGxlRTltVkV4V1gwRjBUMkpxS0hFc2NGc3hYU2s3ZG1GeUlISTlRVk5PTVVoRldDNW5aWFJJWlhoUFpsUk1WbDlCZEU5aWFpaHhMSEJiTWwwcE8zWmhjaUJ6UFVGVFRqRklSVmd1WjJWMFNHVjRUMlpXWDBGMFQySnFLSElzTUNrN2RtRnlJRzQ5Ym1WM0lGSlRRVXRsZVNncE8yNHVjbVZoWkZCeWFYWmhkR1ZMWlhsR2NtOXRRVk5PTVVobGVGTjBjbWx1WnloektUdHlaWFIxY200Z2JuMHNjR0Z5YzJWSVpYaFBaa1Z1WTNKNWNIUmxaRkJMUTFNNE9tWjFibU4wYVc5dUtIVXBlM1poY2lCeFBYdDlPM1poY2lCd1BVRlRUakZJUlZndVoyVjBVRzl6UVhKeVlYbFBaa05vYVd4a2NtVnVYMEYwVDJKcUtIVXNNQ2s3YVdZb2NDNXNaVzVuZEdnaFBUSXBlM1JvY205M1hDSnRZV3htYjNKdFpXUWdabTl5YldGME9pQlRSVkZWUlU1RFJTZ3dLUzVwZEdWdGN5QWhQU0F5T2lCY0lpdHdMbXhsYm1kMGFIMXhMbU5wY0dobGNuUmxlSFE5UVZOT01VaEZXQzVuWlhSSVpYaFBabFpmUVhSUFltb29kU3h3V3pGZEtUdDJZWElnZHoxQlUwNHhTRVZZTG1kbGRGQnZjMEZ5Y21GNVQyWkRhR2xzWkhKbGJsOUJkRTlpYWloMUxIQmJNRjBwTzJsbUtIY3ViR1Z1WjNSb0lUMHlLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJR1p2Y20xaGREb2dVMFZSVlVWT1EwVW9NQzR3S1M1cGRHVnRjeUFoUFNBeU9pQmNJaXQzTG14bGJtZDBhSDFwWmloQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWgxTEhkYk1GMHBJVDFjSWpKaE9EWTBPRGcyWmpjd1pEQXhNRFV3WkZ3aUtYdDBhSEp2ZDF3aWRHaHBjeUJ2Ym14NUlITjFjSEJ2Y25SeklIQnJZM00xVUVKRlV6SmNJbjEyWVhJZ2JqMUJVMDR4U0VWWUxtZGxkRkJ2YzBGeWNtRjVUMlpEYUdsc1pISmxibDlCZEU5aWFpaDFMSGRiTVYwcE8ybG1LSGN1YkdWdVozUm9JVDB5S1h0MGFISnZkMXdpYldGc1ptOXliV1ZrSUdadmNtMWhkRG9nVTBWUlZVVk9RMFVvTUM0d0xqRXBMbWwwWlcxeklDRTlJREk2SUZ3aUsyNHViR1Z1WjNSb2ZYWmhjaUJ2UFVGVFRqRklSVmd1WjJWMFVHOXpRWEp5WVhsUFprTm9hV3hrY21WdVgwRjBUMkpxS0hVc2Jsc3hYU2s3YVdZb2J5NXNaVzVuZEdnaFBUSXBlM1JvY205M1hDSnRZV3htYjNKdFpXUWdabTl5YldGME9pQlRSVkZWUlU1RFJTZ3dMakF1TVM0eEtTNXBkR1Z0Y3lBaFBTQXlPaUJjSWl0dkxteGxibWQwYUgxcFppaEJVMDR4U0VWWUxtZGxkRWhsZUU5bVZsOUJkRTlpYWloMUxHOWJNRjBwSVQxY0lqSmhPRFkwT0RnMlpqY3daREF6TURkY0lpbDdkR2h5YjNkY0luUm9hWE1nYjI1c2VTQnpkWEJ3YjNKMGN5QlVjbWx3YkdWRVJWTmNJbjF4TG1WdVkzSjVjSFJwYjI1VFkyaGxiV1ZCYkdjOVhDSlVjbWx3YkdWRVJWTmNJanR4TG1WdVkzSjVjSFJwYjI1VFkyaGxiV1ZKVmoxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWgxTEc5Yk1WMHBPM1poY2lCeVBVRlRUakZJUlZndVoyVjBVRzl6UVhKeVlYbFBaa05vYVd4a2NtVnVYMEYwVDJKcUtIVXNibHN3WFNrN2FXWW9jaTVzWlc1bmRHZ2hQVElwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnWm05eWJXRjBPaUJUUlZGVlJVNURSU2d3TGpBdU1TNHdLUzVwZEdWdGN5QWhQU0F5T2lCY0lpdHlMbXhsYm1kMGFIMXBaaWhCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaDFMSEpiTUYwcElUMWNJakpoT0RZME9EZzJaamN3WkRBeE1EVXdZMXdpS1h0MGFISnZkMXdpZEdocGN5QnZibXg1SUhOMWNIQnZjblJ6SUhCclkzTTFVRUpMUkVZeVhDSjlkbUZ5SUhZOVFWTk9NVWhGV0M1blpYUlFiM05CY25KaGVVOW1RMmhwYkdSeVpXNWZRWFJQWW1vb2RTeHlXekZkS1R0cFppaDJMbXhsYm1kMGFEd3lLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJR1p2Y20xaGREb2dVMFZSVlVWT1EwVW9NQzR3TGpFdU1DNHhLUzVwZEdWdGN5QThJREk2SUZ3aUszWXViR1Z1WjNSb2ZYRXVjR0pyWkdZeVUyRnNkRDFCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaDFMSFpiTUYwcE8zWmhjaUJ6UFVGVFRqRklSVmd1WjJWMFNHVjRUMlpXWDBGMFQySnFLSFVzZGxzeFhTazdkSEo1ZTNFdWNHSnJaR1l5U1hSbGNqMXdZWEp6WlVsdWRDaHpMREUyS1gxallYUmphQ2gwS1h0MGFISnZkMXdpYldGc1ptOXliV1ZrSUdadmNtMWhkQ0J3WW10a1pqSkpkR1Z5T2lCY0lpdHpmWEpsZEhWeWJpQnhmU3huWlhSUVFrdEVSakpMWlhsSVpYaEdjbTl0VUdGeVlXMDZablZ1WTNScGIyNG9jeXh1S1h0MllYSWdjajFEY25sd2RHOUtVeTVsYm1NdVNHVjRMbkJoY25ObEtITXVjR0pyWkdZeVUyRnNkQ2s3ZG1GeUlHODljeTV3WW10a1pqSkpkR1Z5TzNaaGNpQnhQVU55ZVhCMGIwcFRMbEJDUzBSR01paHVMSElzZTJ0bGVWTnBlbVU2TVRreUx6TXlMR2wwWlhKaGRHbHZibk02YjMwcE8zWmhjaUJ3UFVOeWVYQjBiMHBUTG1WdVl5NUlaWGd1YzNSeWFXNW5hV1o1S0hFcE8zSmxkSFZ5YmlCd2ZTeG5aWFJRYkdGcGJsQkxRMU00U0dWNFJuSnZiVVZ1WTNKNWNIUmxaRkJMUTFNNFVFVk5PbVoxYm1OMGFXOXVLSFlzZHlsN2RtRnlJSEE5ZEdocGN5NW5aWFJJWlhoR2NtOXRVRVZOS0hZc1hDSkZUa05TV1ZCVVJVUWdVRkpKVmtGVVJTQkxSVmxjSWlrN2RtRnlJRzQ5ZEdocGN5NXdZWEp6WlVobGVFOW1SVzVqY25sd2RHVmtVRXREVXpnb2NDazdkbUZ5SUhNOVVFdERVelZRUzBWWkxtZGxkRkJDUzBSR01rdGxlVWhsZUVaeWIyMVFZWEpoYlNodUxIY3BPM1poY2lCMFBYdDlPM1F1WTJsd2FHVnlkR1Y0ZEQxRGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5CaGNuTmxLRzR1WTJsd2FHVnlkR1Y0ZENrN2RtRnlJSEk5UTNKNWNIUnZTbE11Wlc1akxraGxlQzV3WVhKelpTaHpLVHQyWVhJZ2NUMURjbmx3ZEc5S1V5NWxibU11U0dWNExuQmhjbk5sS0c0dVpXNWpjbmx3ZEdsdmJsTmphR1Z0WlVsV0tUdDJZWElnZFQxRGNubHdkRzlLVXk1VWNtbHdiR1ZFUlZNdVpHVmpjbmx3ZENoMExISXNlMmwyT25GOUtUdDJZWElnYnoxRGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5OMGNtbHVaMmxtZVNoMUtUdHlaWFIxY200Z2IzMHNaMlYwVWxOQlMyVjVSbkp2YlVWdVkzSjVjSFJsWkZCTFExTTRVRVZOT21aMWJtTjBhVzl1S0hFc2NDbDdkbUZ5SUc4OWRHaHBjeTVuWlhSUWJHRnBibEJMUTFNNFNHVjRSbkp2YlVWdVkzSjVjSFJsWkZCTFExTTRVRVZOS0hFc2NDazdkbUZ5SUc0OWRHaHBjeTVuWlhSU1UwRkxaWGxHY205dFVHeGhhVzVRUzBOVE9FaGxlQ2h2S1R0eVpYUjFjbTRnYm4wc1oyVjBTMlY1Um5KdmJVVnVZM0o1Y0hSbFpGQkxRMU00VUVWTk9tWjFibU4wYVc5dUtIRXNieWw3ZG1GeUlHNDlkR2hwY3k1blpYUlFiR0ZwYmxCTFExTTRTR1Y0Um5KdmJVVnVZM0o1Y0hSbFpGQkxRMU00VUVWTktIRXNieWs3ZG1GeUlIQTlkR2hwY3k1blpYUkxaWGxHY205dFVHeGhhVzVRY21sMllYUmxVRXREVXpoSVpYZ29iaWs3Y21WMGRYSnVJSEI5TEhCaGNuTmxVR3hoYVc1UWNtbDJZWFJsVUV0RFV6aElaWGc2Wm5WdVkzUnBiMjRvY1NsN2RtRnlJRzg5ZTMwN2J5NWhiR2R3WVhKaGJUMXVkV3hzTzJsbUtIRXVjM1ZpYzNSeUtEQXNNaWtoUFZ3aU16QmNJaWw3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0J3YkdGcGJpQlFTME5UT0NCd2NtbDJZWFJsSUd0bGVTaGpiMlJsT2pBd01TbGNJbjEyWVhJZ2NEMUJVMDR4U0VWWUxtZGxkRkJ2YzBGeWNtRjVUMlpEYUdsc1pISmxibDlCZEU5aWFpaHhMREFwTzJsbUtIQXViR1Z1WjNSb0lUMHpLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJSEJzWVdsdUlGQkxRMU00SUhCeWFYWmhkR1VnYTJWNUtHTnZaR1U2TURBeUtWd2lmV2xtS0hFdWMzVmljM1J5S0hCYk1WMHNNaWtoUFZ3aU16QmNJaWw3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0JRUzBOVE9DQndjbWwyWVhSbElHdGxlU2hqYjJSbE9qQXdNeWxjSW4xMllYSWdiajFCVTA0eFNFVllMbWRsZEZCdmMwRnljbUY1VDJaRGFHbHNaSEpsYmw5QmRFOWlhaWh4TEhCYk1WMHBPMmxtS0c0dWJHVnVaM1JvSVQweUtYdDBhSEp2ZDF3aWJXRnNabTl5YldWa0lGQkxRMU00SUhCeWFYWmhkR1VnYTJWNUtHTnZaR1U2TURBMEtWd2lmV2xtS0hFdWMzVmljM1J5S0c1Yk1GMHNNaWtoUFZ3aU1EWmNJaWw3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0JRUzBOVE9DQndjbWwyWVhSbElHdGxlU2hqYjJSbE9qQXdOU2xjSW4xdkxtRnNaMjlwWkQxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWh4TEc1Yk1GMHBPMmxtS0hFdWMzVmljM1J5S0c1Yk1WMHNNaWs5UFZ3aU1EWmNJaWw3Ynk1aGJHZHdZWEpoYlQxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWh4TEc1Yk1WMHBmV2xtS0hFdWMzVmljM1J5S0hCYk1sMHNNaWtoUFZ3aU1EUmNJaWw3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0JRUzBOVE9DQndjbWwyWVhSbElHdGxlU2hqYjJSbE9qQXdOaWxjSW4xdkxtdGxlV2xrZUQxQlUwNHhTRVZZTG1kbGRGTjBZWEowVUc5elQyWldYMEYwVDJKcUtIRXNjRnN5WFNrN2NtVjBkWEp1SUc5OUxHZGxkRXRsZVVaeWIyMVFiR0ZwYmxCeWFYWmhkR1ZRUzBOVE9GQkZUVHBtZFc1amRHbHZiaWh2S1h0MllYSWdiajEwYUdsekxtZGxkRWhsZUVaeWIyMVFSVTBvYnl4Y0lsQlNTVlpCVkVVZ1MwVlpYQ0lwTzNaaGNpQndQWFJvYVhNdVoyVjBTMlY1Um5KdmJWQnNZV2x1VUhKcGRtRjBaVkJMUTFNNFNHVjRLRzRwTzNKbGRIVnliaUJ3ZlN4blpYUkxaWGxHY205dFVHeGhhVzVRY21sMllYUmxVRXREVXpoSVpYZzZablZ1WTNScGIyNG9iaWw3ZG1GeUlIQTlkR2hwY3k1d1lYSnpaVkJzWVdsdVVISnBkbUYwWlZCTFExTTRTR1Y0S0c0cE8ybG1LSEF1WVd4bmIybGtQVDFjSWpKaE9EWTBPRGcyWmpjd1pEQXhNREV3TVZ3aUtYdDBhR2x6TG5CaGNuTmxVSEpwZG1GMFpWSmhkMUpUUVV0bGVVaGxlRUYwVDJKcUtHNHNjQ2s3ZG1GeUlHODljQzVyWlhrN2RtRnlJSEU5Ym1WM0lGSlRRVXRsZVNncE8zRXVjMlYwVUhKcGRtRjBaVVY0S0c4dWJpeHZMbVVzYnk1a0xHOHVjQ3h2TG5Fc2J5NWtjQ3h2TG1SeExHOHVZMjhwTzNKbGRIVnliaUJ4ZldWc2MyVjdhV1lvY0M1aGJHZHZhV1E5UFZ3aU1tRTROalE0WTJVelpEQXlNREZjSWlsN2RHaHBjeTV3WVhKelpWQnlhWFpoZEdWU1lYZEZRMHRsZVVobGVFRjBUMkpxS0c0c2NDazdhV1lvUzBwVlVpNWpjbmx3ZEc4dVQwbEVMbTlwWkdobGVESnVZVzFsVzNBdVlXeG5jR0Z5WVcxZFBUMDlkVzVrWldacGJtVmtLWHQwYUhKdmQxd2lTMHBWVWk1amNubHdkRzh1VDBsRUxtOXBaR2hsZURKdVlXMWxJSFZ1WkdWbWFXNWxaRG9nWENJcmNDNWhiR2R3WVhKaGJYMTJZWElnY2oxTFNsVlNMbU55ZVhCMGJ5NVBTVVF1YjJsa2FHVjRNbTVoYldWYmNDNWhiR2R3WVhKaGJWMDdkbUZ5SUhFOWJtVjNJRXRLVlZJdVkzSjVjSFJ2TGtWRFJGTkJLSHRqZFhKMlpUcHlMSEJ5ZGpwd0xtdGxlWDBwTzNKbGRIVnliaUJ4ZldWc2MyVjdkR2h5YjNkY0luVnVjM1Z3Y0c5eWRHVmtJSEJ5YVhaaGRHVWdhMlY1SUdGc1oyOXlhWFJvYlZ3aWZYMTlMR2RsZEZKVFFVdGxlVVp5YjIxUWRXSnNhV05RUzBOVE9GQkZUVHBtZFc1amRHbHZiaWh2S1h0MllYSWdjRDEwYUdsekxtZGxkRWhsZUVaeWIyMVFSVTBvYnl4Y0lsQlZRa3hKUXlCTFJWbGNJaWs3ZG1GeUlHNDlkR2hwY3k1blpYUlNVMEZMWlhsR2NtOXRVSFZpYkdsalVFdERVemhJWlhnb2NDazdjbVYwZFhKdUlHNTlMR2RsZEV0bGVVWnliMjFRZFdKc2FXTlFTME5UT0ZCRlRUcG1kVzVqZEdsdmJpaHZLWHQyWVhJZ2NEMTBhR2x6TG1kbGRFaGxlRVp5YjIxUVJVMG9ieXhjSWxCVlFreEpReUJMUlZsY0lpazdkbUZ5SUc0OWRHaHBjeTVuWlhSTFpYbEdjbTl0VUhWaWJHbGpVRXREVXpoSVpYZ29jQ2s3Y21WMGRYSnVJRzU5TEdkbGRFdGxlVVp5YjIxUWRXSnNhV05RUzBOVE9FaGxlRHBtZFc1amRHbHZiaWh2S1h0MllYSWdiajEwYUdsekxuQmhjbk5sVUhWaWJHbGpVRXREVXpoSVpYZ29ieWs3YVdZb2JpNWhiR2R2YVdROVBWd2lNbUU0TmpRNE9EWm1OekJrTURFd01UQXhYQ0lwZTNaaGNpQnlQWFJvYVhNdWNHRnljMlZRZFdKc2FXTlNZWGRTVTBGTFpYbElaWGdvYmk1clpYa3BPM1poY2lCd1BXNWxkeUJTVTBGTFpYa29LVHR3TG5ObGRGQjFZbXhwWXloeUxtNHNjaTVsS1R0eVpYUjFjbTRnY0gxbGJITmxlMmxtS0c0dVlXeG5iMmxrUFQxY0lqSmhPRFkwT0dObE0yUXdNakF4WENJcGUybG1LRXRLVlZJdVkzSjVjSFJ2TGs5SlJDNXZhV1JvWlhneWJtRnRaVnR1TG1Gc1ozQmhjbUZ0WFQwOVBYVnVaR1ZtYVc1bFpDbDdkR2h5YjNkY0lrdEtWVkl1WTNKNWNIUnZMazlKUkM1dmFXUm9aWGd5Ym1GdFpTQjFibVJsWm1sdVpXUTZJRndpSzI0dVlXeG5jR0Z5WVcxOWRtRnlJSEU5UzBwVlVpNWpjbmx3ZEc4dVQwbEVMbTlwWkdobGVESnVZVzFsVzI0dVlXeG5jR0Z5WVcxZE8zWmhjaUJ3UFc1bGR5QkxTbFZTTG1OeWVYQjBieTVGUTBSVFFTaDdZM1Z5ZG1VNmNTeHdkV0k2Ymk1clpYbDlLVHR5WlhSMWNtNGdjSDFsYkhObGUzUm9jbTkzWENKMWJuTjFjSEJ2Y25SbFpDQndkV0pzYVdNZ2EyVjVJR0ZzWjI5eWFYUm9iVndpZlgxOUxIQmhjbk5sVUhWaWJHbGpVbUYzVWxOQlMyVjVTR1Y0T21aMWJtTjBhVzl1S0hBcGUzWmhjaUJ1UFh0OU8ybG1LSEF1YzNWaWMzUnlLREFzTWlraFBWd2lNekJjSWlsN2RHaHliM2RjSW0xaGJHWnZjbTFsWkNCU1UwRWdhMlY1S0dOdlpHVTZNREF4S1Z3aWZYWmhjaUJ2UFVGVFRqRklSVmd1WjJWMFVHOXpRWEp5WVhsUFprTm9hV3hrY21WdVgwRjBUMkpxS0hBc01DazdhV1lvYnk1c1pXNW5kR2doUFRJcGUzUm9jbTkzWENKdFlXeG1iM0p0WldRZ1VsTkJJR3RsZVNoamIyUmxPakF3TWlsY0luMXBaaWh3TG5OMVluTjBjaWh2V3pCZExESXBJVDFjSWpBeVhDSXBlM1JvY205M1hDSnRZV3htYjNKdFpXUWdVbE5CSUd0bGVTaGpiMlJsT2pBd015bGNJbjF1TG00OVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vY0N4dld6QmRLVHRwWmlod0xuTjFZbk4wY2lodld6RmRMRElwSVQxY0lqQXlYQ0lwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnVWxOQklHdGxlU2hqYjJSbE9qQXdOQ2xjSW4xdUxtVTlRVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb2NDeHZXekZkS1R0eVpYUjFjbTRnYm4wc2NHRnljMlZRY21sMllYUmxVbUYzVWxOQlMyVjVTR1Y0UVhSUFltbzZablZ1WTNScGIyNG9ieXh4S1h0MllYSWdjRDF4TG10bGVXbGtlRHRwWmlodkxuTjFZbk4wY2lod0xESXBJVDFjSWpNd1hDSXBlM1JvY205M1hDSnRZV3htYjNKdFpXUWdVbE5CSUhCeWFYWmhkR1VnYTJWNUtHTnZaR1U2TURBeEtWd2lmWFpoY2lCdVBVRlRUakZJUlZndVoyVjBVRzl6UVhKeVlYbFBaa05vYVd4a2NtVnVYMEYwVDJKcUtHOHNjQ2s3YVdZb2JpNXNaVzVuZEdnaFBUa3BlM1JvY205M1hDSnRZV3htYjNKdFpXUWdVbE5CSUhCeWFYWmhkR1VnYTJWNUtHTnZaR1U2TURBeUtWd2lmWEV1YTJWNVBYdDlPM0V1YTJWNUxtNDlRVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb2J5eHVXekZkS1R0eExtdGxlUzVsUFVGVFRqRklSVmd1WjJWMFNHVjRUMlpXWDBGMFQySnFLRzhzYmxzeVhTazdjUzVyWlhrdVpEMUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZsOUJkRTlpYWlodkxHNWJNMTBwTzNFdWEyVjVMbkE5UVZOT01VaEZXQzVuWlhSSVpYaFBabFpmUVhSUFltb29ieXh1V3pSZEtUdHhMbXRsZVM1eFBVRlRUakZJUlZndVoyVjBTR1Y0VDJaV1gwRjBUMkpxS0c4c2JsczFYU2s3Y1M1clpYa3VaSEE5UVZOT01VaEZXQzVuWlhSSVpYaFBabFpmUVhSUFltb29ieXh1V3paZEtUdHhMbXRsZVM1a2NUMUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZsOUJkRTlpYWlodkxHNWJOMTBwTzNFdWEyVjVMbU52UFVGVFRqRklSVmd1WjJWMFNHVjRUMlpXWDBGMFQySnFLRzhzYmxzNFhTbDlMSEJoY25ObFVISnBkbUYwWlZKaGQwVkRTMlY1U0dWNFFYUlBZbW82Wm5WdVkzUnBiMjRvYnl4eEtYdDJZWElnY0QxeExtdGxlV2xrZUR0cFppaHZMbk4xWW5OMGNpaHdMRElwSVQxY0lqTXdYQ0lwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnUlVORElIQnlhWFpoZEdVZ2EyVjVLR052WkdVNk1EQXhLVndpZlhaaGNpQnVQVUZUVGpGSVJWZ3VaMlYwVUc5elFYSnlZWGxQWmtOb2FXeGtjbVZ1WDBGMFQySnFLRzhzY0NrN2FXWW9iaTVzWlc1bmRHZ2hQVE1wZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnUlVORElIQnlhWFpoZEdVZ2EyVjVLR052WkdVNk1EQXlLVndpZldsbUtHOHVjM1ZpYzNSeUtHNWJNVjBzTWlraFBWd2lNRFJjSWlsN2RHaHliM2RjSW0xaGJHWnZjbTFsWkNCRlEwTWdjSEpwZG1GMFpTQnJaWGtvWTI5a1pUb3dNRE1wWENKOWNTNXJaWGs5UVZOT01VaEZXQzVuWlhSSVpYaFBabFpmUVhSUFltb29ieXh1V3pGZEtYMHNjR0Z5YzJWUWRXSnNhV05RUzBOVE9FaGxlRHBtZFc1amRHbHZiaWh4S1h0MllYSWdiejE3ZlR0dkxtRnNaM0JoY21GdFBXNTFiR3c3ZG1GeUlIQTlRVk5PTVVoRldDNW5aWFJRYjNOQmNuSmhlVTltUTJocGJHUnlaVzVmUVhSUFltb29jU3d3S1R0cFppaHdMbXhsYm1kMGFDRTlNaWw3ZEdoeWIzZGNJbTkxZEdWeUlFUkZVbE5sY1hWbGJtTmxJSE5vWVd4c0lHaGhkbVVnTWlCbGJHVnRaVzUwY3pvZ1hDSXJjQzVzWlc1bmRHaDlkbUZ5SUhJOWNGc3dYVHRwWmloeExuTjFZbk4wY2loeUxESXBJVDFjSWpNd1hDSXBlM1JvY205M1hDSnRZV3htYjNKdFpXUWdVRXREVXpnZ2NIVmliR2xqSUd0bGVTaGpiMlJsT2pBd01TbGNJbjEyWVhJZ2JqMUJVMDR4U0VWWUxtZGxkRkJ2YzBGeWNtRjVUMlpEYUdsc1pISmxibDlCZEU5aWFpaHhMSElwTzJsbUtHNHViR1Z1WjNSb0lUMHlLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJRkJMUTFNNElIQjFZbXhwWXlCclpYa29ZMjlrWlRvd01ESXBYQ0o5YVdZb2NTNXpkV0p6ZEhJb2Jsc3dYU3d5S1NFOVhDSXdObHdpS1h0MGFISnZkMXdpYldGc1ptOXliV1ZrSUZCTFExTTRJSEIxWW14cFl5QnJaWGtvWTI5a1pUb3dNRE1wWENKOWJ5NWhiR2R2YVdROVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vY1N4dVd6QmRLVHRwWmloeExuTjFZbk4wY2lodVd6RmRMRElwUFQxY0lqQTJYQ0lwZTI4dVlXeG5jR0Z5WVcwOVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vY1N4dVd6RmRLWDFwWmloeExuTjFZbk4wY2lod1d6RmRMRElwSVQxY0lqQXpYQ0lwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnVUV0RFV6Z2djSFZpYkdsaklHdGxlU2hqYjJSbE9qQXdOQ2xjSW4xdkxtdGxlVDFCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaHhMSEJiTVYwcExuTjFZbk4wY2lneUtUdHlaWFIxY200Z2IzMHNaMlYwVWxOQlMyVjVSbkp2YlZCMVlteHBZMUJMUTFNNFNHVjRPbVoxYm1OMGFXOXVLSElwZTNaaGNpQnhQVUZUVGpGSVJWZ3VaMlYwVUc5elFYSnlZWGxQWmtOb2FXeGtjbVZ1WDBGMFQySnFLSElzTUNrN2FXWW9jUzVzWlc1bmRHZ2hQVElwZTNSb2NtOTNYQ0p2ZFhSbGNpQkVSVkpUWlhGMVpXNWpaU0J6YUdGc2JDQm9ZWFpsSURJZ1pXeGxiV1Z1ZEhNNklGd2lLM0V1YkdWdVozUm9mWFpoY2lCd1BVRlRUakZJUlZndVoyVjBTR1Y0VDJaVVRGWmZRWFJQWW1vb2NpeHhXekJkS1R0cFppaHdJVDFjSWpNd01HUXdOakE1TW1FNE5qUTRPRFptTnpCa01ERXdNVEF4TURVd01Gd2lLWHQwYUhKdmQxd2lVRXREVXpnZ1FXeG5iM0pwZEdodFNXUWdhWE1nYm05MElISnpZVVZ1WTNKNWNIUnBiMjVjSW4xcFppaHlMbk4xWW5OMGNpaHhXekZkTERJcElUMWNJakF6WENJcGUzUm9jbTkzWENKUVMwTlRPQ0JRZFdKc2FXTWdTMlY1SUdseklHNXZkQ0JDU1ZSVFZGSkpUa2NnWlc1allYQnpiR0YwWldRdVhDSjlkbUZ5SUhROVFWTk9NVWhGV0M1blpYUlRkR0Z5ZEZCdmMwOW1WbDlCZEU5aWFpaHlMSEZiTVYwcEt6STdhV1lvY2k1emRXSnpkSElvZEN3eUtTRTlYQ0l6TUZ3aUtYdDBhSEp2ZDF3aVVFdERVemdnVUhWaWJHbGpJRXRsZVNCcGN5QnViM1FnVTBWUlZVVk9RMFV1WENKOWRtRnlJRzQ5UVZOT01VaEZXQzVuWlhSUWIzTkJjbkpoZVU5bVEyaHBiR1J5Wlc1ZlFYUlBZbW9vY2l4MEtUdHBaaWh1TG14bGJtZDBhQ0U5TWlsN2RHaHliM2RjSW1sdWJtVnlJRVJGVWxObGNYVmxibU5sSUhOb1lXeHNJR2hoZG1VZ01pQmxiR1Z0Wlc1MGN6b2dYQ0lyYmk1c1pXNW5kR2g5YVdZb2NpNXpkV0p6ZEhJb2Jsc3dYU3d5S1NFOVhDSXdNbHdpS1h0MGFISnZkMXdpVGlCcGN5QnViM1FnUVZOT0xqRWdTVTVVUlVkRlVsd2lmV2xtS0hJdWMzVmljM1J5S0c1Yk1WMHNNaWtoUFZ3aU1ESmNJaWw3ZEdoeWIzZGNJa1VnYVhNZ2JtOTBJRUZUVGk0eElFbE9WRVZIUlZKY0luMTJZWElnZFQxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWh5TEc1Yk1GMHBPM1poY2lCelBVRlRUakZJUlZndVoyVjBTR1Y0VDJaV1gwRjBUMkpxS0hJc2Jsc3hYU2s3ZG1GeUlHODlibVYzSUZKVFFVdGxlU2dwTzI4dWMyVjBVSFZpYkdsaktIVXNjeWs3Y21WMGRYSnVJRzk5TEgxOUtDazdYRzR2S2lFZ2EyVjVkWFJwYkMweExqQXVNVEl1YW5NZ0tHTXBJREl3TVRNdE1qQXhOU0JMWlc1cWFTQlZjblZ6YUdsdFlTQjhJR3RxZFhJdVoybDBhSFZpTG1OdmJTOXFjM0p6WVhOcFoyNHZiR2xqWlc1elpWeHVJQ292WEc1MllYSWdTMFZaVlZSSlREMW1kVzVqZEdsdmJpZ3BlM1poY2lCa1BXWjFibU4wYVc5dUtIQXNjaXh4S1h0eVpYUjFjbTRnYXloRGNubHdkRzlLVXk1QlJWTXNjQ3h5TEhFcGZUdDJZWElnWlQxbWRXNWpkR2x2Ymlod0xISXNjU2w3Y21WMGRYSnVJR3NvUTNKNWNIUnZTbE11VkhKcGNHeGxSRVZUTEhBc2NpeHhLWDA3ZG1GeUlHRTlablZ1WTNScGIyNG9jQ3h5TEhFcGUzSmxkSFZ5YmlCcktFTnllWEIwYjBwVExrUkZVeXh3TEhJc2NTbDlPM1poY2lCclBXWjFibU4wYVc5dUtITXNlQ3gxTEhFcGUzWmhjaUJ5UFVOeWVYQjBiMHBUTG1WdVl5NUlaWGd1Y0dGeWMyVW9lQ2s3ZG1GeUlIYzlRM0o1Y0hSdlNsTXVaVzVqTGtobGVDNXdZWEp6WlNoMUtUdDJZWElnY0QxRGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5CaGNuTmxLSEVwTzNaaGNpQjBQWHQ5TzNRdWEyVjVQWGM3ZEM1cGRqMXdPM1F1WTJsd2FHVnlkR1Y0ZEQxeU8zWmhjaUIyUFhNdVpHVmpjbmx3ZENoMExIY3NlMmwyT25COUtUdHlaWFIxY200Z1EzSjVjSFJ2U2xNdVpXNWpMa2hsZUM1emRISnBibWRwWm5rb2RpbDlPM1poY2lCc1BXWjFibU4wYVc5dUtIQXNjaXh4S1h0eVpYUjFjbTRnWnloRGNubHdkRzlLVXk1QlJWTXNjQ3h5TEhFcGZUdDJZWElnYnoxbWRXNWpkR2x2Ymlod0xISXNjU2w3Y21WMGRYSnVJR2NvUTNKNWNIUnZTbE11VkhKcGNHeGxSRVZUTEhBc2NpeHhLWDA3ZG1GeUlHWTlablZ1WTNScGIyNG9jQ3h5TEhFcGUzSmxkSFZ5YmlCbktFTnllWEIwYjBwVExrUkZVeXh3TEhJc2NTbDlPM1poY2lCblBXWjFibU4wYVc5dUtIUXNlU3gyTEhFcGUzWmhjaUJ6UFVOeWVYQjBiMHBUTG1WdVl5NUlaWGd1Y0dGeWMyVW9lU2s3ZG1GeUlIZzlRM0o1Y0hSdlNsTXVaVzVqTGtobGVDNXdZWEp6WlNoMktUdDJZWElnY0QxRGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5CaGNuTmxLSEVwTzNaaGNpQjNQWFF1Wlc1amNubHdkQ2h6TEhnc2UybDJPbkI5S1R0MllYSWdjajFEY25sd2RHOUtVeTVsYm1NdVNHVjRMbkJoY25ObEtIY3VkRzlUZEhKcGJtY29LU2s3ZG1GeUlIVTlRM0o1Y0hSdlNsTXVaVzVqTGtKaGMyVTJOQzV6ZEhKcGJtZHBabmtvY2lrN2NtVjBkWEp1SUhWOU8zWmhjaUJwUFh0Y0lrRkZVeTB5TlRZdFEwSkRYQ0k2ZTNCeWIyTTZaQ3hsY0hKdll6cHNMR3RsZVd4bGJqb3pNaXhwZG14bGJqb3hObjBzWENKQlJWTXRNVGt5TFVOQ1Exd2lPbnR3Y205ak9tUXNaWEJ5YjJNNmJDeHJaWGxzWlc0Nk1qUXNhWFpzWlc0Nk1UWjlMRndpUVVWVExURXlPQzFEUWtOY0lqcDdjSEp2WXpwa0xHVndjbTlqT213c2EyVjViR1Z1T2pFMkxHbDJiR1Z1T2pFMmZTeGNJa1JGVXkxRlJFVXpMVU5DUTF3aU9udHdjbTlqT21Vc1pYQnliMk02Ynl4clpYbHNaVzQ2TWpRc2FYWnNaVzQ2T0gwc1hDSkVSVk10UTBKRFhDSTZlM0J5YjJNNllTeGxjSEp2WXpwbUxHdGxlV3hsYmpvNExHbDJiR1Z1T2poOWZUdDJZWElnWXoxbWRXNWpkR2x2Ymlod0tYdHlaWFIxY200Z2FWdHdYVnRjSW5CeWIyTmNJbDE5TzNaaGNpQnRQV1oxYm1OMGFXOXVLSEFwZTNaaGNpQnlQVU55ZVhCMGIwcFRMbXhwWWk1WGIzSmtRWEp5WVhrdWNtRnVaRzl0S0hBcE8zWmhjaUJ4UFVOeWVYQjBiMHBUTG1WdVl5NUlaWGd1YzNSeWFXNW5hV1o1S0hJcE8zSmxkSFZ5YmlCeGZUdDJZWElnYmoxbWRXNWpkR2x2YmloMEtYdDJZWElnZFQxN2ZUdHBaaWgwTG0xaGRHTm9LRzVsZHlCU1pXZEZlSEFvWENKRVJVc3RTVzVtYnpvZ0tGdGVMRjByS1N3b1d6QXRPVUV0Um1FdFpsMHJLVndpTEZ3aWJWd2lLU2twZTNVdVkybHdhR1Z5UFZKbFowVjRjQzRrTVR0MUxtbDJjMkZzZEQxU1pXZEZlSEF1SkRKOWFXWW9kQzV0WVhSamFDaHVaWGNnVW1WblJYaHdLRndpTFMwdExTMUNSVWRKVGlBb1cwRXRXbDByS1NCUVVrbFdRVlJGSUV0RldTMHRMUzB0WENJcEtTbDdkUzUwZVhCbFBWSmxaMFY0Y0M0a01YMTJZWElnY2owdE1UdDJZWElnZGowd08ybG1LSFF1YVc1a1pYaFBaaWhjSWx4Y2NseGNibHhjY2x4Y2Jsd2lLU0U5TFRFcGUzSTlkQzVwYm1SbGVFOW1LRndpWEZ4eVhGeHVYRnh5WEZ4dVhDSXBPM1k5TW4xcFppaDBMbWx1WkdWNFQyWW9YQ0pjWEc1Y1hHNWNJaWtoUFMweEtYdHlQWFF1YVc1a1pYaFBaaWhjSWx4Y2JseGNibHdpS1R0MlBURjlkbUZ5SUhFOWRDNXBibVJsZUU5bUtGd2lMUzB0TFMxRlRrUmNJaWs3YVdZb2NpRTlMVEVtSm5FaFBTMHhLWHQyWVhJZ2NEMTBMbk4xWW5OMGNtbHVaeWh5SzNZcU1peHhMWFlwTzNBOWNDNXlaWEJzWVdObEtDOWNYSE1yTDJjc1hDSmNJaWs3ZFM1a1lYUmhQWEI5Y21WMGRYSnVJSFY5TzNaaGNpQnFQV1oxYm1OMGFXOXVLSEVzZVN4d0tYdDJZWElnZGoxd0xuTjFZbk4wY21sdVp5Z3dMREUyS1R0MllYSWdkRDFEY25sd2RHOUtVeTVsYm1NdVNHVjRMbkJoY25ObEtIWXBPM1poY2lCeVBVTnllWEIwYjBwVExtVnVZeTVWZEdZNExuQmhjbk5sS0hrcE8zWmhjaUIxUFdsYmNWMWJYQ0pyWlhsc1pXNWNJbDByYVZ0eFhWdGNJbWwyYkdWdVhDSmRPM1poY2lCNFBWd2lYQ0k3ZG1GeUlIYzliblZzYkR0bWIzSW9PenNwZTNaaGNpQnpQVU55ZVhCMGIwcFRMbUZzWjI4dVRVUTFMbU55WldGMFpTZ3BPMmxtS0hjaFBXNTFiR3dwZTNNdWRYQmtZWFJsS0hjcGZYTXVkWEJrWVhSbEtISXBPM011ZFhCa1lYUmxLSFFwTzNjOWN5NW1hVzVoYkdsNlpTZ3BPM2c5ZUN0RGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5OMGNtbHVaMmxtZVNoM0tUdHBaaWg0TG14bGJtZDBhRDQ5ZFNveUtYdGljbVZoYTMxOWRtRnlJSG85ZTMwN2VpNXJaWGxvWlhnOWVDNXpkV0p6ZEhJb01DeHBXM0ZkVzF3aWEyVjViR1Z1WENKZEtqSXBPM291YVhab1pYZzllQzV6ZFdKemRISW9hVnR4WFZ0Y0ltdGxlV3hsYmx3aVhTb3lMR2xiY1YxYlhDSnBkbXhsYmx3aVhTb3lLVHR5WlhSMWNtNGdlbjA3ZG1GeUlHSTlablZ1WTNScGIyNG9jQ3gyTEhJc2R5bDdkbUZ5SUhNOVEzSjVjSFJ2U2xNdVpXNWpMa0poYzJVMk5DNXdZWEp6WlNod0tUdDJZWElnY1QxRGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5OMGNtbHVaMmxtZVNoektUdDJZWElnZFQxcFczWmRXMXdpY0hKdlkxd2lYVHQyWVhJZ2REMTFLSEVzY2l4M0tUdHlaWFIxY200Z2RIMDdkbUZ5SUdnOVpuVnVZM1JwYjI0b2NDeHpMSEVzZFNsN2RtRnlJSEk5YVZ0elhWdGNJbVZ3Y205alhDSmRPM1poY2lCMFBYSW9jQ3h4TEhVcE8zSmxkSFZ5YmlCMGZUdHlaWFIxY201N2RtVnljMmx2YmpwY0lqRXVNQzR3WENJc1oyVjBTR1Y0Um5KdmJWQkZUVHBtZFc1amRHbHZiaWh4TEhVcGUzWmhjaUJ5UFhFN2FXWW9jaTVwYm1SbGVFOW1LRndpTFMwdExTMUNSVWRKVGlCY0lpazlQUzB4S1h0MGFISnZkMXdpWTJGdUozUWdabWx1WkNCUVJVMGdhR1ZoWkdWeU9pQmNJaXQxZldsbUtIUjVjR1Z2WmlCMVBUMWNJbk4wY21sdVoxd2lKaVoxSVQxY0lsd2lLWHR5UFhJdWNtVndiR0ZqWlNoY0lpMHRMUzB0UWtWSFNVNGdYQ0lyZFN0Y0lpMHRMUzB0WENJc1hDSmNJaWs3Y2oxeUxuSmxjR3hoWTJVb1hDSXRMUzB0TFVWT1JDQmNJaXQxSzF3aUxTMHRMUzFjSWl4Y0lsd2lLWDFsYkhObGUzSTljaTV5WlhCc1lXTmxLQzh0TFMwdExVSkZSMGxPSUZ0ZUxWMHJMUzB0TFMwdkxGd2lYQ0lwTzNJOWNpNXlaWEJzWVdObEtDOHRMUzB0TFVWT1JDQmJYaTFkS3kwdExTMHRMeXhjSWx3aUtYMTJZWElnZEQxeUxuSmxjR3hoWTJVb0wxeGNjeXN2Wnl4Y0lsd2lLVHQyWVhJZ2NEMWlOalIwYjJobGVDaDBLVHR5WlhSMWNtNGdjSDBzWjJWMFJHVmpjbmx3ZEdWa1MyVjVTR1Y0UW5sTFpYbEpWanBtZFc1amRHbHZiaWh4TEhRc2N5eHlLWHQyWVhJZ2NEMWpLSFFwTzNKbGRIVnliaUJ3S0hFc2N5eHlLWDBzY0dGeWMyVlFTME5UTlZCRlRUcG1kVzVqZEdsdmJpaHdLWHR5WlhSMWNtNGdiaWh3S1gwc1oyVjBTMlY1UVc1a1ZXNTFjMlZrU1haQ2VWQmhjM05qYjJSbFFXNWtTWFp6WVd4ME9tWjFibU4wYVc5dUtIRXNjQ3h5S1h0eVpYUjFjbTRnYWloeExIQXNjaWw5TEdSbFkzSjVjSFJMWlhsQ05qUTZablZ1WTNScGIyNG9jQ3h5TEhFc2N5bDdjbVYwZFhKdUlHSW9jQ3h5TEhFc2N5bDlMR2RsZEVSbFkzSjVjSFJsWkV0bGVVaGxlRHBtZFc1amRHbHZiaWg1TEhncGUzWmhjaUJ4UFc0b2VTazdkbUZ5SUhROWNTNTBlWEJsTzNaaGNpQnlQWEV1WTJsd2FHVnlPM1poY2lCd1BYRXVhWFp6WVd4ME8zWmhjaUJ6UFhFdVpHRjBZVHQyWVhJZ2R6MXFLSElzZUN4d0tUdDJZWElnZGoxM0xtdGxlV2hsZUR0MllYSWdkVDFpS0hNc2NpeDJMSEFwTzNKbGRIVnliaUIxZlN4blpYUlNVMEZMWlhsR2NtOXRSVzVqY25sd2RHVmtVRXREVXpWUVJVMDZablZ1WTNScGIyNG9jaXh4S1h0MllYSWdjejEwYUdsekxtZGxkRVJsWTNKNWNIUmxaRXRsZVVobGVDaHlMSEVwTzNaaGNpQndQVzVsZHlCU1UwRkxaWGtvS1R0d0xuSmxZV1JRY21sMllYUmxTMlY1Um5KdmJVRlRUakZJWlhoVGRISnBibWNvY3lrN2NtVjBkWEp1SUhCOUxHZGxkRVZ1WTNKNWNIUmxaRkJMUTFNMVVFVk5Sbkp2YlZCeWRrdGxlVWhsZURwbWRXNWpkR2x2YmloNExITXNRU3gwTEhJcGUzWmhjaUJ3UFZ3aVhDSTdhV1lvZEhsd1pXOW1JSFE5UFZ3aWRXNWtaV1pwYm1Wa1hDSjhmSFE5UFc1MWJHd3BlM1E5WENKQlJWTXRNalUyTFVOQ1Exd2lmV2xtS0hSNWNHVnZaaUJwVzNSZFBUMWNJblZ1WkdWbWFXNWxaRndpS1h0MGFISnZkMXdpUzBWWlZWUkpUQ0IxYm5OMWNIQnZjblJsWkNCaGJHZHZjbWwwYUcwNklGd2lLM1I5YVdZb2RIbHdaVzltSUhJOVBWd2lkVzVrWldacGJtVmtYQ0o4ZkhJOVBXNTFiR3dwZTNaaGNpQjJQV2xiZEYxYlhDSnBkbXhsYmx3aVhUdDJZWElnZFQxdEtIWXBPM0k5ZFM1MGIxVndjR1Z5UTJGelpTZ3BmWFpoY2lCNlBXb29kQ3hCTEhJcE8zWmhjaUI1UFhvdWEyVjVhR1Y0TzNaaGNpQjNQV2dvY3l4MExIa3NjaWs3ZG1GeUlIRTlkeTV5WlhCc1lXTmxLQzhvTG5zMk5IMHBMMmNzWENJa01WeGNjbHhjYmx3aUtUdDJZWElnY0QxY0lpMHRMUzB0UWtWSFNVNGdYQ0lyZUN0Y0lpQlFVa2xXUVZSRklFdEZXUzB0TFMwdFhGeHlYRnh1WENJN2NDczlYQ0pRY205akxWUjVjR1U2SURRc1JVNURVbGxRVkVWRVhGeHlYRnh1WENJN2NDczlYQ0pFUlVzdFNXNW1iem9nWENJcmRDdGNJaXhjSWl0eUsxd2lYRnh5WEZ4dVhDSTdjQ3M5WENKY1hISmNYRzVjSWp0d0t6MXhPM0FyUFZ3aVhGeHlYRnh1TFMwdExTMUZUa1FnWENJcmVDdGNJaUJRVWtsV1FWUkZJRXRGV1MwdExTMHRYRnh5WEZ4dVhDSTdjbVYwZFhKdUlIQjlMR2RsZEVWdVkzSjVjSFJsWkZCTFExTTFVRVZOUm5KdmJWSlRRVXRsZVRwbWRXNWpkR2x2YmloRUxFVXNjaXgwS1h0MllYSWdRajF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2x1ZEdWblpYSW9lMXdpYVc1MFhDSTZNSDBwTzNaaGNpQjNQVzVsZHlCTFNsVlNMbUZ6YmpFdVJFVlNTVzUwWldkbGNpaDdZbWxuYVc1ME9rUXVibjBwTzNaaGNpQkJQVzVsZHlCTFNsVlNMbUZ6YmpFdVJFVlNTVzUwWldkbGNpaDdYQ0pwYm5SY0lqcEVMbVY5S1R0MllYSWdRejF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2x1ZEdWblpYSW9lMkpwWjJsdWREcEVMbVI5S1R0MllYSWdkVDF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2x1ZEdWblpYSW9lMkpwWjJsdWREcEVMbkI5S1R0MllYSWdjejF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2x1ZEdWblpYSW9lMkpwWjJsdWREcEVMbkY5S1R0MllYSWdlajF1WlhjZ1MwcFZVaTVoYzI0eExrUkZVa2x1ZEdWblpYSW9lMkpwWjJsdWREcEVMbVJ0Y0RGOUtUdDJZWElnZGoxdVpYY2dTMHBWVWk1aGMyNHhMa1JGVWtsdWRHVm5aWElvZTJKcFoybHVkRHBFTG1SdGNURjlLVHQyWVhJZ2VUMXVaWGNnUzBwVlVpNWhjMjR4TGtSRlVrbHVkR1ZuWlhJb2UySnBaMmx1ZERwRUxtTnZaV1ptZlNrN2RtRnlJRVk5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpUWlhGMVpXNWpaU2g3WVhKeVlYazZXMElzZHl4QkxFTXNkU3h6TEhvc2RpeDVYWDBwTzNaaGNpQjRQVVl1WjJWMFJXNWpiMlJsWkVobGVDZ3BPM0psZEhWeWJpQjBhR2x6TG1kbGRFVnVZM0o1Y0hSbFpGQkxRMU0xVUVWTlJuSnZiVkJ5ZGt0bGVVaGxlQ2hjSWxKVFFWd2lMSGdzUlN4eUxIUXBmU3h1WlhkRmJtTnllWEIwWldSUVMwTlROVkJGVFRwbWRXNWpkR2x2Ymlod0xIRXNkQ3gxS1h0cFppaDBlWEJsYjJZZ2NUMDlYQ0oxYm1SbFptbHVaV1JjSW54OGNUMDliblZzYkNsN2NUMHhNREkwZldsbUtIUjVjR1Z2WmlCMFBUMWNJblZ1WkdWbWFXNWxaRndpZkh4MFBUMXVkV3hzS1h0MFBWd2lNVEF3TURGY0luMTJZWElnY2oxdVpYY2dVbE5CUzJWNUtDazdjaTVuWlc1bGNtRjBaU2h4TEhRcE8zWmhjaUJ6UFc1MWJHdzdhV1lvZEhsd1pXOW1JSFU5UFZ3aWRXNWtaV1pwYm1Wa1hDSjhmSFU5UFc1MWJHd3BlM005ZEdocGN5NW5aWFJGYm1OeWVYQjBaV1JRUzBOVE5WQkZUVVp5YjIxU1UwRkxaWGtvY2l4d0tYMWxiSE5sZTNNOWRHaHBjeTVuWlhSRmJtTnllWEIwWldSUVMwTlROVkJGVFVaeWIyMVNVMEZMWlhrb2NpeHdMSFVwZlhKbGRIVnliaUJ6ZlN4blpYUlNVMEZMWlhsR2NtOXRVR3hoYVc1UVMwTlRPRkJGVFRwbWRXNWpkR2x2YmloeUtYdHBaaWh5TG0xaGRHTm9LQzlGVGtOU1dWQlVSVVF2S1NsN2RHaHliM2RjSW5CbGJTQnphR0ZzYkNCaVpTQnViM1FnUlU1RFVsbFFWRVZFWENKOWRtRnlJSEU5ZEdocGN5NW5aWFJJWlhoR2NtOXRVRVZOS0hJc1hDSlFVa2xXUVZSRklFdEZXVndpS1R0MllYSWdjRDEwYUdsekxtZGxkRkpUUVV0bGVVWnliMjFRYkdGcGJsQkxRMU00U0dWNEtIRXBPM0psZEhWeWJpQndmU3huWlhSU1UwRkxaWGxHY205dFVHeGhhVzVRUzBOVE9FaGxlRHBtZFc1amRHbHZiaWh6S1h0MllYSWdjajFCVTA0eFNFVllMbWRsZEZCdmMwRnljbUY1VDJaRGFHbHNaSEpsYmw5QmRFOWlhaWh6TERBcE8ybG1LSEl1YkdWdVozUm9JVDB6S1h0MGFISnZkMXdpYjNWMFpYSWdSRVZTVTJWeGRXVnVZMlVnYzJoaGJHd2dhR0YyWlNBeklHVnNaVzFsYm5Sek9pQmNJaXR5TG14bGJtZDBhSDEyWVhJZ2NUMUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZFeFdYMEYwVDJKcUtITXNjbHN4WFNrN2FXWW9jU0U5WENJek1EQmtNRFl3T1RKaE9EWTBPRGcyWmpjd1pEQXhNREV3TVRBMU1EQmNJaWw3ZEdoeWIzZGNJbEJMUTFNNElFRnNaMjl5YVhSb2JVbGtaVzUwYVdacFpYSWdhWE1nYm05MElISnpZVVZ1WXpvZ1hDSXJjWDEyWVhJZ2NUMUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZFeFdYMEYwVDJKcUtITXNjbHN4WFNrN2RtRnlJSFE5UVZOT01VaEZXQzVuWlhSSVpYaFBabFJNVmw5QmRFOWlhaWh6TEhKYk1sMHBPM1poY2lCMVBVRlRUakZJUlZndVoyVjBTR1Y0VDJaV1gwRjBUMkpxS0hRc01DazdkbUZ5SUhBOWJtVjNJRkpUUVV0bGVTZ3BPM0F1Y21WaFpGQnlhWFpoZEdWTFpYbEdjbTl0UVZOT01VaGxlRk4wY21sdVp5aDFLVHR5WlhSMWNtNGdjSDBzY0dGeWMyVklaWGhQWmtWdVkzSjVjSFJsWkZCTFExTTRPbVoxYm1OMGFXOXVLSGNwZTNaaGNpQnpQWHQ5TzNaaGNpQnlQVUZUVGpGSVJWZ3VaMlYwVUc5elFYSnlZWGxQWmtOb2FXeGtjbVZ1WDBGMFQySnFLSGNzTUNrN2FXWW9jaTVzWlc1bmRHZ2hQVElwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnWm05eWJXRjBPaUJUUlZGVlJVNURSU2d3S1M1cGRHVnRjeUFoUFNBeU9pQmNJaXR5TG14bGJtZDBhSDF6TG1OcGNHaGxjblJsZUhROVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vZHl4eVd6RmRLVHQyWVhJZ2VUMUJVMDR4U0VWWUxtZGxkRkJ2YzBGeWNtRjVUMlpEYUdsc1pISmxibDlCZEU5aWFpaDNMSEpiTUYwcE8ybG1LSGt1YkdWdVozUm9JVDB5S1h0MGFISnZkMXdpYldGc1ptOXliV1ZrSUdadmNtMWhkRG9nVTBWUlZVVk9RMFVvTUM0d0tTNXBkR1Z0Y3lBaFBTQXlPaUJjSWl0NUxteGxibWQwYUgxcFppaEJVMDR4U0VWWUxtZGxkRWhsZUU5bVZsOUJkRTlpYWloM0xIbGJNRjBwSVQxY0lqSmhPRFkwT0RnMlpqY3daREF4TURVd1pGd2lLWHQwYUhKdmQxd2lkR2hwY3lCdmJteDVJSE4xY0hCdmNuUnpJSEJyWTNNMVVFSkZVekpjSW4xMllYSWdjRDFCVTA0eFNFVllMbWRsZEZCdmMwRnljbUY1VDJaRGFHbHNaSEpsYmw5QmRFOWlhaWgzTEhsYk1WMHBPMmxtS0hrdWJHVnVaM1JvSVQweUtYdDBhSEp2ZDF3aWJXRnNabTl5YldWa0lHWnZjbTFoZERvZ1UwVlJWVVZPUTBVb01DNHdMakVwTG1sMFpXMXpJQ0U5SURJNklGd2lLM0F1YkdWdVozUm9mWFpoY2lCeFBVRlRUakZJUlZndVoyVjBVRzl6UVhKeVlYbFBaa05vYVd4a2NtVnVYMEYwVDJKcUtIY3NjRnN4WFNrN2FXWW9jUzVzWlc1bmRHZ2hQVElwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnWm05eWJXRjBPaUJUUlZGVlJVNURSU2d3TGpBdU1TNHhLUzVwZEdWdGN5QWhQU0F5T2lCY0lpdHhMbXhsYm1kMGFIMXBaaWhCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaDNMSEZiTUYwcElUMWNJakpoT0RZME9EZzJaamN3WkRBek1EZGNJaWw3ZEdoeWIzZGNJblJvYVhNZ2IyNXNlU0J6ZFhCd2IzSjBjeUJVY21sd2JHVkVSVk5jSW4xekxtVnVZM0o1Y0hScGIyNVRZMmhsYldWQmJHYzlYQ0pVY21sd2JHVkVSVk5jSWp0ekxtVnVZM0o1Y0hScGIyNVRZMmhsYldWSlZqMUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZsOUJkRTlpYWloM0xIRmJNVjBwTzNaaGNpQjBQVUZUVGpGSVJWZ3VaMlYwVUc5elFYSnlZWGxQWmtOb2FXeGtjbVZ1WDBGMFQySnFLSGNzY0Zzd1hTazdhV1lvZEM1c1pXNW5kR2doUFRJcGUzUm9jbTkzWENKdFlXeG1iM0p0WldRZ1ptOXliV0YwT2lCVFJWRlZSVTVEUlNnd0xqQXVNUzR3S1M1cGRHVnRjeUFoUFNBeU9pQmNJaXQwTG14bGJtZDBhSDFwWmloQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWgzTEhSYk1GMHBJVDFjSWpKaE9EWTBPRGcyWmpjd1pEQXhNRFV3WTF3aUtYdDBhSEp2ZDF3aWRHaHBjeUJ2Ym14NUlITjFjSEJ2Y25SeklIQnJZM00xVUVKTFJFWXlYQ0o5ZG1GeUlIZzlRVk5PTVVoRldDNW5aWFJRYjNOQmNuSmhlVTltUTJocGJHUnlaVzVmUVhSUFltb29keXgwV3pGZEtUdHBaaWg0TG14bGJtZDBhRHd5S1h0MGFISnZkMXdpYldGc1ptOXliV1ZrSUdadmNtMWhkRG9nVTBWUlZVVk9RMFVvTUM0d0xqRXVNQzR4S1M1cGRHVnRjeUE4SURJNklGd2lLM2d1YkdWdVozUm9mWE11Y0dKclpHWXlVMkZzZEQxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWgzTEhoYk1GMHBPM1poY2lCMVBVRlRUakZJUlZndVoyVjBTR1Y0VDJaV1gwRjBUMkpxS0hjc2VGc3hYU2s3ZEhKNWUzTXVjR0pyWkdZeVNYUmxjajF3WVhKelpVbHVkQ2gxTERFMktYMWpZWFJqYUNoMktYdDBhSEp2ZDF3aWJXRnNabTl5YldWa0lHWnZjbTFoZENCd1ltdGtaakpKZEdWeU9pQmNJaXQxZlhKbGRIVnliaUJ6ZlN4blpYUlFRa3RFUmpKTFpYbElaWGhHY205dFVHRnlZVzA2Wm5WdVkzUnBiMjRvZFN4d0tYdDJZWElnZEQxRGNubHdkRzlLVXk1bGJtTXVTR1Y0TG5CaGNuTmxLSFV1Y0dKclpHWXlVMkZzZENrN2RtRnlJSEU5ZFM1d1ltdGtaakpKZEdWeU8zWmhjaUJ6UFVOeWVYQjBiMHBUTGxCQ1MwUkdNaWh3TEhRc2UydGxlVk5wZW1VNk1Ua3lMek15TEdsMFpYSmhkR2x2Ym5NNmNYMHBPM1poY2lCeVBVTnllWEIwYjBwVExtVnVZeTVJWlhndWMzUnlhVzVuYVdaNUtITXBPM0psZEhWeWJpQnlmU3huWlhSUWJHRnBibEJMUTFNNFNHVjRSbkp2YlVWdVkzSjVjSFJsWkZCTFExTTRVRVZOT21aMWJtTjBhVzl1S0hnc2VTbDdkbUZ5SUhJOWRHaHBjeTVuWlhSSVpYaEdjbTl0VUVWTktIZ3NYQ0pGVGtOU1dWQlVSVVFnVUZKSlZrRlVSU0JMUlZsY0lpazdkbUZ5SUhBOWRHaHBjeTV3WVhKelpVaGxlRTltUlc1amNubHdkR1ZrVUV0RFV6Z29jaWs3ZG1GeUlIVTlTMFZaVlZSSlRDNW5aWFJRUWt0RVJqSkxaWGxJWlhoR2NtOXRVR0Z5WVcwb2NDeDVLVHQyWVhJZ2RqMTdmVHQyTG1OcGNHaGxjblJsZUhROVEzSjVjSFJ2U2xNdVpXNWpMa2hsZUM1d1lYSnpaU2h3TG1OcGNHaGxjblJsZUhRcE8zWmhjaUIwUFVOeWVYQjBiMHBUTG1WdVl5NUlaWGd1Y0dGeWMyVW9kU2s3ZG1GeUlITTlRM0o1Y0hSdlNsTXVaVzVqTGtobGVDNXdZWEp6WlNod0xtVnVZM0o1Y0hScGIyNVRZMmhsYldWSlZpazdkbUZ5SUhjOVEzSjVjSFJ2U2xNdVZISnBjR3hsUkVWVExtUmxZM0o1Y0hRb2RpeDBMSHRwZGpwemZTazdkbUZ5SUhFOVEzSjVjSFJ2U2xNdVpXNWpMa2hsZUM1emRISnBibWRwWm5rb2R5azdjbVYwZFhKdUlIRjlMR2RsZEZKVFFVdGxlVVp5YjIxRmJtTnllWEIwWldSUVMwTlRPRkJGVFRwbWRXNWpkR2x2YmloekxISXBlM1poY2lCeFBYUm9hWE11WjJWMFVHeGhhVzVRUzBOVE9FaGxlRVp5YjIxRmJtTnllWEIwWldSUVMwTlRPRkJGVFNoekxISXBPM1poY2lCd1BYUm9hWE11WjJWMFVsTkJTMlY1Um5KdmJWQnNZV2x1VUV0RFV6aElaWGdvY1NrN2NtVjBkWEp1SUhCOUxHZGxkRXRsZVVaeWIyMUZibU55ZVhCMFpXUlFTME5UT0ZCRlRUcG1kVzVqZEdsdmJpaHpMSEVwZTNaaGNpQndQWFJvYVhNdVoyVjBVR3hoYVc1UVMwTlRPRWhsZUVaeWIyMUZibU55ZVhCMFpXUlFTME5UT0ZCRlRTaHpMSEVwTzNaaGNpQnlQWFJvYVhNdVoyVjBTMlY1Um5KdmJWQnNZV2x1VUhKcGRtRjBaVkJMUTFNNFNHVjRLSEFwTzNKbGRIVnliaUJ5ZlN4d1lYSnpaVkJzWVdsdVVISnBkbUYwWlZCTFExTTRTR1Y0T21aMWJtTjBhVzl1S0hNcGUzWmhjaUJ4UFh0OU8zRXVZV3huY0dGeVlXMDliblZzYkR0cFppaHpMbk4xWW5OMGNpZ3dMRElwSVQxY0lqTXdYQ0lwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnY0d4aGFXNGdVRXREVXpnZ2NISnBkbUYwWlNCclpYa29ZMjlrWlRvd01ERXBYQ0o5ZG1GeUlISTlRVk5PTVVoRldDNW5aWFJRYjNOQmNuSmhlVTltUTJocGJHUnlaVzVmUVhSUFltb29jeXd3S1R0cFppaHlMbXhsYm1kMGFDRTlNeWw3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0J3YkdGcGJpQlFTME5UT0NCd2NtbDJZWFJsSUd0bGVTaGpiMlJsT2pBd01pbGNJbjFwWmloekxuTjFZbk4wY2loeVd6RmRMRElwSVQxY0lqTXdYQ0lwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnVUV0RFV6Z2djSEpwZG1GMFpTQnJaWGtvWTI5a1pUb3dNRE1wWENKOWRtRnlJSEE5UVZOT01VaEZXQzVuWlhSUWIzTkJjbkpoZVU5bVEyaHBiR1J5Wlc1ZlFYUlBZbW9vY3l4eVd6RmRLVHRwWmlod0xteGxibWQwYUNFOU1pbDdkR2h5YjNkY0ltMWhiR1p2Y20xbFpDQlFTME5UT0NCd2NtbDJZWFJsSUd0bGVTaGpiMlJsT2pBd05DbGNJbjFwWmloekxuTjFZbk4wY2lod1d6QmRMRElwSVQxY0lqQTJYQ0lwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnVUV0RFV6Z2djSEpwZG1GMFpTQnJaWGtvWTI5a1pUb3dNRFVwWENKOWNTNWhiR2R2YVdROVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vY3l4d1d6QmRLVHRwWmloekxuTjFZbk4wY2lod1d6RmRMRElwUFQxY0lqQTJYQ0lwZTNFdVlXeG5jR0Z5WVcwOVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vY3l4d1d6RmRLWDFwWmloekxuTjFZbk4wY2loeVd6SmRMRElwSVQxY0lqQTBYQ0lwZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnVUV0RFV6Z2djSEpwZG1GMFpTQnJaWGtvWTI5a1pUb3dNRFlwWENKOWNTNXJaWGxwWkhnOVFWTk9NVWhGV0M1blpYUlRkR0Z5ZEZCdmMwOW1WbDlCZEU5aWFpaHpMSEpiTWwwcE8zSmxkSFZ5YmlCeGZTeG5aWFJMWlhsR2NtOXRVR3hoYVc1UWNtbDJZWFJsVUV0RFV6aFFSVTA2Wm5WdVkzUnBiMjRvY1NsN2RtRnlJSEE5ZEdocGN5NW5aWFJJWlhoR2NtOXRVRVZOS0hFc1hDSlFVa2xXUVZSRklFdEZXVndpS1R0MllYSWdjajEwYUdsekxtZGxkRXRsZVVaeWIyMVFiR0ZwYmxCeWFYWmhkR1ZRUzBOVE9FaGxlQ2h3S1R0eVpYUjFjbTRnY24wc1oyVjBTMlY1Um5KdmJWQnNZV2x1VUhKcGRtRjBaVkJMUTFNNFNHVjRPbVoxYm1OMGFXOXVLSEFwZTNaaGNpQjNQWFJvYVhNdWNHRnljMlZRYkdGcGJsQnlhWFpoZEdWUVMwTlRPRWhsZUNod0tUdHBaaWgzTG1Gc1oyOXBaRDA5WENJeVlUZzJORGc0Tm1ZM01HUXdNVEF4TURGY0lpbDdkR2hwY3k1d1lYSnpaVkJ5YVhaaGRHVlNZWGRTVTBGTFpYbElaWGhCZEU5aWFpaHdMSGNwTzNaaGNpQjFQWGN1YTJWNU8zWmhjaUI2UFc1bGR5QlNVMEZMWlhrb0tUdDZMbk5sZEZCeWFYWmhkR1ZGZUNoMUxtNHNkUzVsTEhVdVpDeDFMbkFzZFM1eExIVXVaSEFzZFM1a2NTeDFMbU52S1R0eVpYUjFjbTRnZW4xbGJITmxlMmxtS0hjdVlXeG5iMmxrUFQxY0lqSmhPRFkwT0dObE0yUXdNakF4WENJcGUzUm9hWE11Y0dGeWMyVlFjbWwyWVhSbFVtRjNSVU5MWlhsSVpYaEJkRTlpYWlod0xIY3BPMmxtS0V0S1ZWSXVZM0o1Y0hSdkxrOUpSQzV2YVdSb1pYZ3libUZ0WlZ0M0xtRnNaM0JoY21GdFhUMDlQWFZ1WkdWbWFXNWxaQ2w3ZEdoeWIzZGNJa3RLVlZJdVkzSjVjSFJ2TGs5SlJDNXZhV1JvWlhneWJtRnRaU0IxYm1SbFptbHVaV1E2SUZ3aUszY3VZV3huY0dGeVlXMTlkbUZ5SUhZOVMwcFZVaTVqY25sd2RHOHVUMGxFTG05cFpHaGxlREp1WVcxbFczY3VZV3huY0dGeVlXMWRPM1poY2lCNlBXNWxkeUJMU2xWU0xtTnllWEIwYnk1RlEwUlRRU2g3WTNWeWRtVTZkbjBwTzNvdWMyVjBVSFZpYkdsalMyVjVTR1Y0S0hjdWNIVmlhMlY1S1R0NkxuTmxkRkJ5YVhaaGRHVkxaWGxJWlhnb2R5NXJaWGtwTzNvdWFYTlFkV0pzYVdNOVptRnNjMlU3Y21WMGRYSnVJSHA5Wld4elpYdHBaaWgzTG1Gc1oyOXBaRDA5WENJeVlUZzJORGhqWlRNNE1EUXdNVndpS1h0MllYSWdkRDFCVTA0eFNFVllMbWRsZEZaaWVVeHBjM1FvY0N3d0xGc3hMREVzTUYwc1hDSXdNbHdpS1R0MllYSWdjejFCVTA0eFNFVllMbWRsZEZaaWVVeHBjM1FvY0N3d0xGc3hMREVzTVYwc1hDSXdNbHdpS1R0MllYSWdlVDFCVTA0eFNFVllMbWRsZEZaaWVVeHBjM1FvY0N3d0xGc3hMREVzTWwwc1hDSXdNbHdpS1R0MllYSWdRajFCVTA0eFNFVllMbWRsZEZaaWVVeHBjM1FvY0N3d0xGc3lMREJkTEZ3aU1ESmNJaWs3ZG1GeUlISTlibVYzSUVKcFowbHVkR1ZuWlhJb2RDd3hOaWs3ZG1GeUlIRTlibVYzSUVKcFowbHVkR1ZuWlhJb2N5d3hOaWs3ZG1GeUlIZzlibVYzSUVKcFowbHVkR1ZuWlhJb2VTd3hOaWs3ZG1GeUlFRTlibVYzSUVKcFowbHVkR1ZuWlhJb1Fpd3hOaWs3ZG1GeUlIbzlibVYzSUV0S1ZWSXVZM0o1Y0hSdkxrUlRRU2dwTzNvdWMyVjBVSEpwZG1GMFpTaHlMSEVzZUN4dWRXeHNMRUVwTzNKbGRIVnliaUI2ZldWc2MyVjdkR2h5YjNkY0luVnVjM1Z3Y0c5eWRHVmtJSEJ5YVhaaGRHVWdhMlY1SUdGc1oyOXlhWFJvYlZ3aWZYMTlmU3huWlhSU1UwRkxaWGxHY205dFVIVmliR2xqVUV0RFV6aFFSVTA2Wm5WdVkzUnBiMjRvY1NsN2RtRnlJSEk5ZEdocGN5NW5aWFJJWlhoR2NtOXRVRVZOS0hFc1hDSlFWVUpNU1VNZ1MwVlpYQ0lwTzNaaGNpQndQWFJvYVhNdVoyVjBVbE5CUzJWNVJuSnZiVkIxWW14cFkxQkxRMU00U0dWNEtISXBPM0psZEhWeWJpQndmU3huWlhSTFpYbEdjbTl0VUhWaWJHbGpVRXREVXpoUVJVMDZablZ1WTNScGIyNG9jU2w3ZG1GeUlISTlkR2hwY3k1blpYUklaWGhHY205dFVFVk5LSEVzWENKUVZVSk1TVU1nUzBWWlhDSXBPM1poY2lCd1BYUm9hWE11WjJWMFMyVjVSbkp2YlZCMVlteHBZMUJMUTFNNFNHVjRLSElwTzNKbGRIVnliaUJ3ZlN4blpYUkxaWGxHY205dFVIVmliR2xqVUV0RFV6aElaWGc2Wm5WdVkzUnBiMjRvY1NsN2RtRnlJSEE5ZEdocGN5NXdZWEp6WlZCMVlteHBZMUJMUTFNNFNHVjRLSEVwTzJsbUtIQXVZV3huYjJsa1BUMWNJakpoT0RZME9EZzJaamN3WkRBeE1ERXdNVndpS1h0MllYSWdkVDEwYUdsekxuQmhjbk5sVUhWaWJHbGpVbUYzVWxOQlMyVjVTR1Y0S0hBdWEyVjVLVHQyWVhJZ2NqMXVaWGNnVWxOQlMyVjVLQ2s3Y2k1elpYUlFkV0pzYVdNb2RTNXVMSFV1WlNrN2NtVjBkWEp1SUhKOVpXeHpaWHRwWmlod0xtRnNaMjlwWkQwOVhDSXlZVGcyTkRoalpUTmtNREl3TVZ3aUtYdHBaaWhMU2xWU0xtTnllWEIwYnk1UFNVUXViMmxrYUdWNE1tNWhiV1ZiY0M1aGJHZHdZWEpoYlYwOVBUMTFibVJsWm1sdVpXUXBlM1JvY205M1hDSkxTbFZTTG1OeWVYQjBieTVQU1VRdWIybGthR1Y0TW01aGJXVWdkVzVrWldacGJtVmtPaUJjSWl0d0xtRnNaM0JoY21GdGZYWmhjaUJ6UFV0S1ZWSXVZM0o1Y0hSdkxrOUpSQzV2YVdSb1pYZ3libUZ0WlZ0d0xtRnNaM0JoY21GdFhUdDJZWElnY2oxdVpYY2dTMHBWVWk1amNubHdkRzh1UlVORVUwRW9lMk4xY25abE9uTXNjSFZpT25BdWEyVjVmU2s3Y21WMGRYSnVJSEo5Wld4elpYdHBaaWh3TG1Gc1oyOXBaRDA5WENJeVlUZzJORGhqWlRNNE1EUXdNVndpS1h0MllYSWdkRDF3TG1Gc1ozQmhjbUZ0TzNaaGNpQjJQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtIQXVhMlY1TERBcE8zWmhjaUJ5UFc1bGR5QkxTbFZTTG1OeWVYQjBieTVFVTBFb0tUdHlMbk5sZEZCMVlteHBZeWh1WlhjZ1FtbG5TVzUwWldkbGNpaDBMbkFzTVRZcExHNWxkeUJDYVdkSmJuUmxaMlZ5S0hRdWNTd3hOaWtzYm1WM0lFSnBaMGx1ZEdWblpYSW9kQzVuTERFMktTeHVaWGNnUW1sblNXNTBaV2RsY2loMkxERTJLU2s3Y21WMGRYSnVJSEo5Wld4elpYdDBhSEp2ZDF3aWRXNXpkWEJ3YjNKMFpXUWdjSFZpYkdsaklHdGxlU0JoYkdkdmNtbDBhRzFjSW4xOWZYMHNjR0Z5YzJWUWRXSnNhV05TWVhkU1UwRkxaWGxJWlhnNlpuVnVZM1JwYjI0b2NpbDdkbUZ5SUhBOWUzMDdhV1lvY2k1emRXSnpkSElvTUN3eUtTRTlYQ0l6TUZ3aUtYdDBhSEp2ZDF3aWJXRnNabTl5YldWa0lGSlRRU0JyWlhrb1kyOWtaVG93TURFcFhDSjlkbUZ5SUhFOVFWTk9NVWhGV0M1blpYUlFiM05CY25KaGVVOW1RMmhwYkdSeVpXNWZRWFJQWW1vb2Npd3dLVHRwWmloeExteGxibWQwYUNFOU1pbDdkR2h5YjNkY0ltMWhiR1p2Y20xbFpDQlNVMEVnYTJWNUtHTnZaR1U2TURBeUtWd2lmV2xtS0hJdWMzVmljM1J5S0hGYk1GMHNNaWtoUFZ3aU1ESmNJaWw3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0JTVTBFZ2EyVjVLR052WkdVNk1EQXpLVndpZlhBdWJqMUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZsOUJkRTlpYWloeUxIRmJNRjBwTzJsbUtISXVjM1ZpYzNSeUtIRmJNVjBzTWlraFBWd2lNREpjSWlsN2RHaHliM2RjSW0xaGJHWnZjbTFsWkNCU1UwRWdhMlY1S0dOdlpHVTZNREEwS1Z3aWZYQXVaVDFCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaHlMSEZiTVYwcE8zSmxkSFZ5YmlCd2ZTeHdZWEp6WlZCeWFYWmhkR1ZTWVhkU1UwRkxaWGxJWlhoQmRFOWlhanBtZFc1amRHbHZiaWh4TEhNcGUzWmhjaUJ5UFhNdWEyVjVhV1I0TzJsbUtIRXVjM1ZpYzNSeUtISXNNaWtoUFZ3aU16QmNJaWw3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0JTVTBFZ2NISnBkbUYwWlNCclpYa29ZMjlrWlRvd01ERXBYQ0o5ZG1GeUlIQTlRVk5PTVVoRldDNW5aWFJRYjNOQmNuSmhlVTltUTJocGJHUnlaVzVmUVhSUFltb29jU3h5S1R0cFppaHdMbXhsYm1kMGFDRTlPU2w3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0JTVTBFZ2NISnBkbUYwWlNCclpYa29ZMjlrWlRvd01ESXBYQ0o5Y3k1clpYazllMzA3Y3k1clpYa3ViajFCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaHhMSEJiTVYwcE8zTXVhMlY1TG1VOVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vY1N4d1d6SmRLVHR6TG10bGVTNWtQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtIRXNjRnN6WFNrN2N5NXJaWGt1Y0QxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWh4TEhCYk5GMHBPM011YTJWNUxuRTlRVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb2NTeHdXelZkS1R0ekxtdGxlUzVrY0QxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWh4TEhCYk5sMHBPM011YTJWNUxtUnhQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtIRXNjRnMzWFNrN2N5NXJaWGt1WTI4OVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vY1N4d1d6aGRLWDBzY0dGeWMyVlFjbWwyWVhSbFVtRjNSVU5MWlhsSVpYaEJkRTlpYWpwbWRXNWpkR2x2Ymlod0xIUXBlM1poY2lCeFBYUXVhMlY1YVdSNE8zWmhjaUJ5UFVGVFRqRklSVmd1WjJWMFZtSjVUR2x6ZENod0xIRXNXekZkTEZ3aU1EUmNJaWs3ZG1GeUlITTlRVk5PTVVoRldDNW5aWFJXWW5sTWFYTjBLSEFzY1N4Yk1pd3dYU3hjSWpBelhDSXBMbk4xWW5OMGNpZ3lLVHQwTG10bGVUMXlPM1F1Y0hWaWEyVjVQWE45TEhCaGNuTmxVSFZpYkdsalVFdERVemhJWlhnNlpuVnVZM1JwYjI0b2N5bDdkbUZ5SUhFOWUzMDdjUzVoYkdkd1lYSmhiVDF1ZFd4c08zWmhjaUJ5UFVGVFRqRklSVmd1WjJWMFVHOXpRWEp5WVhsUFprTm9hV3hrY21WdVgwRjBUMkpxS0hNc01DazdhV1lvY2k1c1pXNW5kR2doUFRJcGUzUm9jbTkzWENKdmRYUmxjaUJFUlZKVFpYRjFaVzVqWlNCemFHRnNiQ0JvWVhabElESWdaV3hsYldWdWRITTZJRndpSzNJdWJHVnVaM1JvZlhaaGNpQjBQWEpiTUYwN2FXWW9jeTV6ZFdKemRISW9kQ3d5S1NFOVhDSXpNRndpS1h0MGFISnZkMXdpYldGc1ptOXliV1ZrSUZCTFExTTRJSEIxWW14cFl5QnJaWGtvWTI5a1pUb3dNREVwWENKOWRtRnlJSEE5UVZOT01VaEZXQzVuWlhSUWIzTkJjbkpoZVU5bVEyaHBiR1J5Wlc1ZlFYUlBZbW9vY3l4MEtUdHBaaWh3TG14bGJtZDBhQ0U5TWlsN2RHaHliM2RjSW0xaGJHWnZjbTFsWkNCUVMwTlRPQ0J3ZFdKc2FXTWdhMlY1S0dOdlpHVTZNREF5S1Z3aWZXbG1LSE11YzNWaWMzUnlLSEJiTUYwc01pa2hQVndpTURaY0lpbDdkR2h5YjNkY0ltMWhiR1p2Y20xbFpDQlFTME5UT0NCd2RXSnNhV01nYTJWNUtHTnZaR1U2TURBektWd2lmWEV1WVd4bmIybGtQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtITXNjRnN3WFNrN2FXWW9jeTV6ZFdKemRISW9jRnN4WFN3eUtUMDlYQ0l3Tmx3aUtYdHhMbUZzWjNCaGNtRnRQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtITXNjRnN4WFNsOVpXeHpaWHRwWmloekxuTjFZbk4wY2lod1d6RmRMRElwUFQxY0lqTXdYQ0lwZTNFdVlXeG5jR0Z5WVcwOWUzMDdjUzVoYkdkd1lYSmhiUzV3UFVGVFRqRklSVmd1WjJWMFZtSjVUR2x6ZENoekxIQmJNVjBzV3pCZExGd2lNREpjSWlrN2NTNWhiR2R3WVhKaGJTNXhQVUZUVGpGSVJWZ3VaMlYwVm1KNVRHbHpkQ2h6TEhCYk1WMHNXekZkTEZ3aU1ESmNJaWs3Y1M1aGJHZHdZWEpoYlM1blBVRlRUakZJUlZndVoyVjBWbUo1VEdsemRDaHpMSEJiTVYwc1d6SmRMRndpTURKY0lpbDlmV2xtS0hNdWMzVmljM1J5S0hKYk1WMHNNaWtoUFZ3aU1ETmNJaWw3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0JRUzBOVE9DQndkV0pzYVdNZ2EyVjVLR052WkdVNk1EQTBLVndpZlhFdWEyVjVQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtITXNjbHN4WFNrdWMzVmljM1J5S0RJcE8zSmxkSFZ5YmlCeGZTeG5aWFJTVTBGTFpYbEdjbTl0VUhWaWJHbGpVRXREVXpoSVpYZzZablZ1WTNScGIyNG9kQ2w3ZG1GeUlITTlRVk5PTVVoRldDNW5aWFJRYjNOQmNuSmhlVTltUTJocGJHUnlaVzVmUVhSUFltb29kQ3d3S1R0cFppaHpMbXhsYm1kMGFDRTlNaWw3ZEdoeWIzZGNJbTkxZEdWeUlFUkZVbE5sY1hWbGJtTmxJSE5vWVd4c0lHaGhkbVVnTWlCbGJHVnRaVzUwY3pvZ1hDSXJjeTVzWlc1bmRHaDlkbUZ5SUhJOVFWTk9NVWhGV0M1blpYUklaWGhQWmxSTVZsOUJkRTlpYWloMExITmJNRjBwTzJsbUtISWhQVndpTXpBd1pEQTJNRGt5WVRnMk5EZzRObVkzTUdRd01UQXhNREV3TlRBd1hDSXBlM1JvY205M1hDSlFTME5UT0NCQmJHZHZjbWwwYUcxSlpDQnBjeUJ1YjNRZ2NuTmhSVzVqY25sd2RHbHZibHdpZldsbUtIUXVjM1ZpYzNSeUtITmJNVjBzTWlraFBWd2lNRE5jSWlsN2RHaHliM2RjSWxCTFExTTRJRkIxWW14cFl5QkxaWGtnYVhNZ2JtOTBJRUpKVkZOVVVrbE9SeUJsYm1OaGNITnNZWFJsWkM1Y0luMTJZWElnZGoxQlUwNHhTRVZZTG1kbGRGTjBZWEowVUc5elQyWldYMEYwVDJKcUtIUXNjMXN4WFNrck1qdHBaaWgwTG5OMVluTjBjaWgyTERJcElUMWNJak13WENJcGUzUm9jbTkzWENKUVMwTlRPQ0JRZFdKc2FXTWdTMlY1SUdseklHNXZkQ0JUUlZGVlJVNURSUzVjSW4xMllYSWdjRDFCVTA0eFNFVllMbWRsZEZCdmMwRnljbUY1VDJaRGFHbHNaSEpsYmw5QmRFOWlhaWgwTEhZcE8ybG1LSEF1YkdWdVozUm9JVDB5S1h0MGFISnZkMXdpYVc1dVpYSWdSRVZTVTJWeGRXVnVZMlVnYzJoaGJHd2dhR0YyWlNBeUlHVnNaVzFsYm5Sek9pQmNJaXR3TG14bGJtZDBhSDFwWmloMExuTjFZbk4wY2lod1d6QmRMRElwSVQxY0lqQXlYQ0lwZTNSb2NtOTNYQ0pPSUdseklHNXZkQ0JCVTA0dU1TQkpUbFJGUjBWU1hDSjlhV1lvZEM1emRXSnpkSElvY0ZzeFhTd3lLU0U5WENJd01sd2lLWHQwYUhKdmQxd2lSU0JwY3lCdWIzUWdRVk5PTGpFZ1NVNVVSVWRGVWx3aWZYWmhjaUIzUFVGVFRqRklSVmd1WjJWMFNHVjRUMlpXWDBGMFQySnFLSFFzY0Zzd1hTazdkbUZ5SUhVOVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vZEN4d1d6RmRLVHQyWVhJZ2NUMXVaWGNnVWxOQlMyVjVLQ2s3Y1M1elpYUlFkV0pzYVdNb2R5eDFLVHR5WlhSMWNtNGdjWDBzZlgwb0tUdExSVmxWVkVsTUxtZGxkRXRsZVQxbWRXNWpkR2x2YmlobUxHVXNhQ2w3YVdZb2RIbHdaVzltSUZKVFFVdGxlU0U5WENKMWJtUmxabWx1WldSY0lpWW1aaUJwYm5OMFlXNWpaVzltSUZKVFFVdGxlU2w3Y21WMGRYSnVJR1o5YVdZb2RIbHdaVzltSUV0S1ZWSXVZM0o1Y0hSdkxrVkRSRk5CSVQxY0luVnVaR1ZtYVc1bFpGd2lKaVptSUdsdWMzUmhibU5sYjJZZ1MwcFZVaTVqY25sd2RHOHVSVU5FVTBFcGUzSmxkSFZ5YmlCbWZXbG1LSFI1Y0dWdlppQkxTbFZTTG1OeWVYQjBieTVFVTBFaFBWd2lkVzVrWldacGJtVmtYQ0ltSm1ZZ2FXNXpkR0Z1WTJWdlppQkxTbFZTTG1OeWVYQjBieTVFVTBFcGUzSmxkSFZ5YmlCbWZXbG1LR1l1WTNWeWRtVWhQVDExYm1SbFptbHVaV1FtSm1ZdWVIa2hQVDExYm1SbFptbHVaV1FtSm1ZdVpEMDlQWFZ1WkdWbWFXNWxaQ2w3Y21WMGRYSnVJRzVsZHlCTFNsVlNMbU55ZVhCMGJ5NUZRMFJUUVNoN2NIVmlPbVl1ZUhrc1kzVnlkbVU2Wmk1amRYSjJaWDBwZldsbUtHWXVZM1Z5ZG1VaFBUMTFibVJsWm1sdVpXUW1KbVl1WkNFOVBYVnVaR1ZtYVc1bFpDbDdjbVYwZFhKdUlHNWxkeUJMU2xWU0xtTnllWEIwYnk1RlEwUlRRU2g3Y0hKMk9tWXVaQ3hqZFhKMlpUcG1MbU4xY25abGZTbDlhV1lvWmk1cmRIazlQVDExYm1SbFptbHVaV1FtSm1ZdWJpRTlQWFZ1WkdWbWFXNWxaQ1ltWmk1bElUMDlkVzVrWldacGJtVmtKaVptTG1ROVBUMTFibVJsWm1sdVpXUXBlM1poY2lCM1BXNWxkeUJTVTBGTFpYa29LVHQzTG5ObGRGQjFZbXhwWXlobUxtNHNaaTVsS1R0eVpYUjFjbTRnZDMxcFppaG1MbXQwZVQwOVBYVnVaR1ZtYVc1bFpDWW1aaTV1SVQwOWRXNWtaV1pwYm1Wa0ppWm1MbVVoUFQxMWJtUmxabWx1WldRbUptWXVaQ0U5UFhWdVpHVm1hVzVsWkNZbVppNXdJVDA5ZFc1a1pXWnBibVZrSmlabUxuRWhQVDExYm1SbFptbHVaV1FtSm1ZdVpIQWhQVDExYm1SbFptbHVaV1FtSm1ZdVpIRWhQVDExYm1SbFptbHVaV1FtSm1ZdVkyOGhQVDExYm1SbFptbHVaV1FtSm1ZdWNXazlQVDExYm1SbFptbHVaV1FwZTNaaGNpQjNQVzVsZHlCU1UwRkxaWGtvS1R0M0xuTmxkRkJ5YVhaaGRHVkZlQ2htTG00c1ppNWxMR1l1WkN4bUxuQXNaaTV4TEdZdVpIQXNaaTVrY1N4bUxtTnZLVHR5WlhSMWNtNGdkMzFwWmlobUxtdDBlVDA5UFhWdVpHVm1hVzVsWkNZbVppNXVJVDA5ZFc1a1pXWnBibVZrSmlabUxtVWhQVDExYm1SbFptbHVaV1FtSm1ZdVpDRTlQWFZ1WkdWbWFXNWxaQ1ltWmk1d1BUMDlkVzVrWldacGJtVmtLWHQyWVhJZ2R6MXVaWGNnVWxOQlMyVjVLQ2s3ZHk1elpYUlFjbWwyWVhSbEtHWXViaXhtTG1Vc1ppNWtLVHR5WlhSMWNtNGdkMzFwWmlobUxuQWhQVDExYm1SbFptbHVaV1FtSm1ZdWNTRTlQWFZ1WkdWbWFXNWxaQ1ltWmk1bklUMDlkVzVrWldacGJtVmtKaVptTG5raFBUMTFibVJsWm1sdVpXUW1KbVl1ZUQwOVBYVnVaR1ZtYVc1bFpDbDdkbUZ5SUhjOWJtVjNJRXRLVlZJdVkzSjVjSFJ2TGtSVFFTZ3BPM2N1YzJWMFVIVmliR2xqS0dZdWNDeG1MbkVzWmk1bkxHWXVlU2s3Y21WMGRYSnVJSGQ5YVdZb1ppNXdJVDA5ZFc1a1pXWnBibVZrSmlabUxuRWhQVDExYm1SbFptbHVaV1FtSm1ZdVp5RTlQWFZ1WkdWbWFXNWxaQ1ltWmk1NUlUMDlkVzVrWldacGJtVmtKaVptTG5naFBUMTFibVJsWm1sdVpXUXBlM1poY2lCM1BXNWxkeUJMU2xWU0xtTnllWEIwYnk1RVUwRW9LVHQzTG5ObGRGQnlhWFpoZEdVb1ppNXdMR1l1Y1N4bUxtY3NaaTU1TEdZdWVDazdjbVYwZFhKdUlIZDlhV1lvWmk1cmRIazlQVDFjSWxKVFFWd2lKaVptTG00aFBUMTFibVJsWm1sdVpXUW1KbVl1WlNFOVBYVnVaR1ZtYVc1bFpDWW1aaTVrUFQwOWRXNWtaV1pwYm1Wa0tYdDJZWElnZHoxdVpYY2dVbE5CUzJWNUtDazdkeTV6WlhSUWRXSnNhV01vWWpZMGRYUnZhR1Y0S0dZdWJpa3NZalkwZFhSdmFHVjRLR1l1WlNrcE8zSmxkSFZ5YmlCM2ZXbG1LR1l1YTNSNVBUMDlYQ0pTVTBGY0lpWW1aaTV1SVQwOWRXNWtaV1pwYm1Wa0ppWm1MbVVoUFQxMWJtUmxabWx1WldRbUptWXVaQ0U5UFhWdVpHVm1hVzVsWkNZbVppNXdJVDA5ZFc1a1pXWnBibVZrSmlabUxuRWhQVDExYm1SbFptbHVaV1FtSm1ZdVpIQWhQVDExYm1SbFptbHVaV1FtSm1ZdVpIRWhQVDExYm1SbFptbHVaV1FtSm1ZdWNXa2hQVDExYm1SbFptbHVaV1FwZTNaaGNpQjNQVzVsZHlCU1UwRkxaWGtvS1R0M0xuTmxkRkJ5YVhaaGRHVkZlQ2hpTmpSMWRHOW9aWGdvWmk1dUtTeGlOalIxZEc5b1pYZ29aaTVsS1N4aU5qUjFkRzlvWlhnb1ppNWtLU3hpTmpSMWRHOW9aWGdvWmk1d0tTeGlOalIxZEc5b1pYZ29aaTV4S1N4aU5qUjFkRzlvWlhnb1ppNWtjQ2tzWWpZMGRYUnZhR1Y0S0dZdVpIRXBMR0kyTkhWMGIyaGxlQ2htTG5GcEtTazdjbVYwZFhKdUlIZDlhV1lvWmk1cmRIazlQVDFjSWxKVFFWd2lKaVptTG00aFBUMTFibVJsWm1sdVpXUW1KbVl1WlNFOVBYVnVaR1ZtYVc1bFpDWW1aaTVrSVQwOWRXNWtaV1pwYm1Wa0tYdDJZWElnZHoxdVpYY2dVbE5CUzJWNUtDazdkeTV6WlhSUWNtbDJZWFJsS0dJMk5IVjBiMmhsZUNobUxtNHBMR0kyTkhWMGIyaGxlQ2htTG1VcExHSTJOSFYwYjJobGVDaG1MbVFwS1R0eVpYUjFjbTRnZDMxcFppaG1MbXQwZVQwOVBWd2lSVU5jSWlZbVppNWpjblloUFQxMWJtUmxabWx1WldRbUptWXVlQ0U5UFhWdVpHVm1hVzVsWkNZbVppNTVJVDA5ZFc1a1pXWnBibVZrSmlabUxtUTlQVDExYm1SbFptbHVaV1FwZTNaaGNpQmtQVzVsZHlCTFNsVlNMbU55ZVhCMGJ5NUZRMFJUUVNoN1kzVnlkbVU2Wmk1amNuWjlLVHQyWVhJZ2JEMWtMbVZqY0dGeVlXMXpMbXRsZVd4bGJpODBPM1poY2lCeVBTaGNJakF3TURBd01EQXdNREJjSWl0aU5qUjFkRzlvWlhnb1ppNTRLU2t1YzJ4cFkyVW9MV3dwTzNaaGNpQnVQU2hjSWpBd01EQXdNREF3TURCY0lpdGlOalIxZEc5b1pYZ29aaTU1S1NrdWMyeHBZMlVvTFd3cE8zWmhjaUJ0UFZ3aU1EUmNJaXR5SzI0N1pDNXpaWFJRZFdKc2FXTkxaWGxJWlhnb2JTazdjbVYwZFhKdUlHUjlhV1lvWmk1cmRIazlQVDFjSWtWRFhDSW1KbVl1WTNKMklUMDlkVzVrWldacGJtVmtKaVptTG5naFBUMTFibVJsWm1sdVpXUW1KbVl1ZVNFOVBYVnVaR1ZtYVc1bFpDWW1aaTVrSVQwOWRXNWtaV1pwYm1Wa0tYdDJZWElnWkQxdVpYY2dTMHBWVWk1amNubHdkRzh1UlVORVUwRW9lMk4xY25abE9tWXVZM0oyZlNrN2RtRnlJR3c5WkM1bFkzQmhjbUZ0Y3k1clpYbHNaVzR2TkR0MllYSWdZVDBvWENJd01EQXdNREF3TURBd1hDSXJZalkwZFhSdmFHVjRLR1l1WkNrcExuTnNhV05sS0Mxc0tUdGtMbk5sZEZCeWFYWmhkR1ZMWlhsSVpYZ29ZU2s3Y21WMGRYSnVJR1I5YVdZb1ppNXBibVJsZUU5bUtGd2lMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMWNJaXd3S1NFOUxURjhmR1l1YVc1a1pYaFBaaWhjSWkxRlRrUWdXRFV3T1NCRFJWSlVTVVpKUTBGVVJTMWNJaXd3S1NFOUxURjhmR1l1YVc1a1pYaFBaaWhjSWkxRlRrUWdWRkpWVTFSRlJDQkRSVkpVU1VaSlEwRlVSUzFjSWl3d0tTRTlMVEVwZTNKbGRIVnliaUJZTlRBNUxtZGxkRkIxWW14cFkwdGxlVVp5YjIxRFpYSjBVRVZOS0dZcGZXbG1LR2c5UFQxY0luQnJZM000Y0hWaVhDSXBlM0psZEhWeWJpQkxSVmxWVkVsTUxtZGxkRXRsZVVaeWIyMVFkV0pzYVdOUVMwTlRPRWhsZUNobUtYMXBaaWhtTG1sdVpHVjRUMllvWENJdFJVNUVJRkJWUWt4SlF5QkxSVmt0WENJcElUMHRNU2w3Y21WMGRYSnVJRXRGV1ZWVVNVd3VaMlYwUzJWNVJuSnZiVkIxWW14cFkxQkxRMU00VUVWTktHWXBmV2xtS0dnOVBUMWNJbkJyWTNNMWNISjJYQ0lwZTNaaGNpQjNQVzVsZHlCU1UwRkxaWGtvS1R0M0xuSmxZV1JRY21sMllYUmxTMlY1Um5KdmJVRlRUakZJWlhoVGRISnBibWNvWmlrN2NtVjBkWEp1SUhkOWFXWW9hRDA5UFZ3aWNHdGpjelZ3Y25aY0lpbDdkbUZ5SUhjOWJtVjNJRkpUUVV0bGVTZ3BPM2N1Y21WaFpGQnlhWFpoZEdWTFpYbEdjbTl0UVZOT01VaGxlRk4wY21sdVp5aG1LVHR5WlhSMWNtNGdkMzFwWmlobUxtbHVaR1Y0VDJZb1hDSXRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzFjSWlraFBTMHhKaVptTG1sdVpHVjRUMllvWENJMExFVk9RMUpaVUZSRlJGd2lLVDA5TFRFcGUzWmhjaUJwUFV0RldWVlVTVXd1WjJWMFNHVjRSbkp2YlZCRlRTaG1MRndpVWxOQklGQlNTVlpCVkVVZ1MwVlpYQ0lwTzNKbGRIVnliaUJMUlZsVlZFbE1MbWRsZEV0bGVTaHBMRzUxYkd3c1hDSndhMk56TlhCeWRsd2lLWDFwWmlobUxtbHVaR1Y0VDJZb1hDSXRSVTVFSUVSVFFTQlFVa2xXUVZSRklFdEZXUzFjSWlraFBTMHhKaVptTG1sdVpHVjRUMllvWENJMExFVk9RMUpaVUZSRlJGd2lLVDA5TFRFcGUzWmhjaUIxUFhSb2FYTXVaMlYwU0dWNFJuSnZiVkJGVFNobUxGd2lSRk5CSUZCU1NWWkJWRVVnUzBWWlhDSXBPM1poY2lCMFBVRlRUakZJUlZndVoyVjBWbUo1VEdsemRDaDFMREFzV3pGZExGd2lNREpjSWlrN2RtRnlJSE05UVZOT01VaEZXQzVuWlhSV1lubE1hWE4wS0hVc01DeGJNbDBzWENJd01sd2lLVHQyWVhJZ2RqMUJVMDR4U0VWWUxtZGxkRlppZVV4cGMzUW9kU3d3TEZzelhTeGNJakF5WENJcE8zWmhjaUJxUFVGVFRqRklSVmd1WjJWMFZtSjVUR2x6ZENoMUxEQXNXelJkTEZ3aU1ESmNJaWs3ZG1GeUlHczlRVk5PTVVoRldDNW5aWFJXWW5sTWFYTjBLSFVzTUN4Yk5WMHNYQ0l3TWx3aUtUdDJZWElnZHoxdVpYY2dTMHBWVWk1amNubHdkRzh1UkZOQktDazdkeTV6WlhSUWNtbDJZWFJsS0c1bGR5QkNhV2RKYm5SbFoyVnlLSFFzTVRZcExHNWxkeUJDYVdkSmJuUmxaMlZ5S0hNc01UWXBMRzVsZHlCQ2FXZEpiblJsWjJWeUtIWXNNVFlwTEc1bGR5QkNhV2RKYm5SbFoyVnlLR29zTVRZcExHNWxkeUJDYVdkSmJuUmxaMlZ5S0dzc01UWXBLVHR5WlhSMWNtNGdkMzFwWmlobUxtbHVaR1Y0VDJZb1hDSXRSVTVFSUZCU1NWWkJWRVVnUzBWWkxWd2lLU0U5TFRFcGUzSmxkSFZ5YmlCTFJWbFZWRWxNTG1kbGRFdGxlVVp5YjIxUWJHRnBibEJ5YVhaaGRHVlFTME5UT0ZCRlRTaG1LWDFwWmlobUxtbHVaR1Y0VDJZb1hDSXRSVTVFSUZKVFFTQlFVa2xXUVZSRklFdEZXUzFjSWlraFBTMHhKaVptTG1sdVpHVjRUMllvWENJMExFVk9RMUpaVUZSRlJGd2lLU0U5TFRFcGUzSmxkSFZ5YmlCTFJWbFZWRWxNTG1kbGRGSlRRVXRsZVVaeWIyMUZibU55ZVhCMFpXUlFTME5UTlZCRlRTaG1MR1VwZldsbUtHWXVhVzVrWlhoUFppaGNJaTFGVGtRZ1JVTWdVRkpKVmtGVVJTQkxSVmt0WENJcElUMHRNU1ltWmk1cGJtUmxlRTltS0Z3aU5DeEZUa05TV1ZCVVJVUmNJaWtoUFMweEtYdDJZWElnZFQxTFJWbFZWRWxNTG1kbGRFUmxZM0o1Y0hSbFpFdGxlVWhsZUNobUxHVXBPM1poY2lCM1BVRlRUakZJUlZndVoyVjBWbUo1VEdsemRDaDFMREFzV3pGZExGd2lNRFJjSWlrN2RtRnlJR005UVZOT01VaEZXQzVuWlhSV1lubE1hWE4wS0hVc01DeGJNaXd3WFN4Y0lqQTJYQ0lwTzNaaGNpQnZQVUZUVGpGSVJWZ3VaMlYwVm1KNVRHbHpkQ2gxTERBc1d6TXNNRjBzWENJd00xd2lLUzV6ZFdKemRISW9NaWs3ZG1GeUlHSTlYQ0pjSWp0cFppaExTbFZTTG1OeWVYQjBieTVQU1VRdWIybGthR1Y0TW01aGJXVmJZMTBoUFQxMWJtUmxabWx1WldRcGUySTlTMHBWVWk1amNubHdkRzh1VDBsRUxtOXBaR2hsZURKdVlXMWxXMk5kZldWc2MyVjdkR2h5YjNkY0luVnVaR1ZtYVc1bFpDQlBTVVFvYUdWNEtTQnBiaUJMU2xWU0xtTnllWEIwYnk1UFNVUTZJRndpSzJOOWRtRnlJR1E5Ym1WM0lFdEtWVkl1WTNKNWNIUnZMa1ZEUkZOQktIdHVZVzFsT21KOUtUdGtMbk5sZEZCMVlteHBZMHRsZVVobGVDaHZLVHRrTG5ObGRGQnlhWFpoZEdWTFpYbElaWGdvZHlrN1pDNXBjMUIxWW14cFl6MW1ZV3h6WlR0eVpYUjFjbTRnWkgxcFppaG1MbWx1WkdWNFQyWW9YQ0l0UlU1RUlFUlRRU0JRVWtsV1FWUkZJRXRGV1MxY0lpa2hQUzB4SmlabUxtbHVaR1Y0VDJZb1hDSTBMRVZPUTFKWlVGUkZSRndpS1NFOUxURXBlM1poY2lCMVBVdEZXVlZVU1V3dVoyVjBSR1ZqY25sd2RHVmtTMlY1U0dWNEtHWXNaU2s3ZG1GeUlIUTlRVk5PTVVoRldDNW5aWFJXWW5sTWFYTjBLSFVzTUN4Yk1WMHNYQ0l3TWx3aUtUdDJZWElnY3oxQlUwNHhTRVZZTG1kbGRGWmllVXhwYzNRb2RTd3dMRnN5WFN4Y0lqQXlYQ0lwTzNaaGNpQjJQVUZUVGpGSVJWZ3VaMlYwVm1KNVRHbHpkQ2gxTERBc1d6TmRMRndpTURKY0lpazdkbUZ5SUdvOVFWTk9NVWhGV0M1blpYUldZbmxNYVhOMEtIVXNNQ3hiTkYwc1hDSXdNbHdpS1R0MllYSWdhejFCVTA0eFNFVllMbWRsZEZaaWVVeHBjM1FvZFN3d0xGczFYU3hjSWpBeVhDSXBPM1poY2lCM1BXNWxkeUJMU2xWU0xtTnllWEIwYnk1RVUwRW9LVHQzTG5ObGRGQnlhWFpoZEdVb2JtVjNJRUpwWjBsdWRHVm5aWElvZEN3eE5pa3NibVYzSUVKcFowbHVkR1ZuWlhJb2N5d3hOaWtzYm1WM0lFSnBaMGx1ZEdWblpYSW9kaXd4Tmlrc2JtVjNJRUpwWjBsdWRHVm5aWElvYWl3eE5pa3NibVYzSUVKcFowbHVkR1ZuWlhJb2F5d3hOaWtwTzNKbGRIVnliaUIzZldsbUtHWXVhVzVrWlhoUFppaGNJaTFGVGtRZ1JVNURVbGxRVkVWRUlGQlNTVlpCVkVVZ1MwVlpMVndpS1NFOUxURXBlM0psZEhWeWJpQkxSVmxWVkVsTUxtZGxkRXRsZVVaeWIyMUZibU55ZVhCMFpXUlFTME5UT0ZCRlRTaG1MR1VwZlhSb2NtOTNYQ0p1YjNRZ2MzVndjRzl5ZEdWa0lHRnlaM1Z0Wlc1MFhDSjlPMHRGV1ZWVVNVd3VaMlZ1WlhKaGRHVkxaWGx3WVdseVBXWjFibU4wYVc5dUtHRXNZeWw3YVdZb1lUMDlYQ0pTVTBGY0lpbDdkbUZ5SUdJOVl6dDJZWElnYUQxdVpYY2dVbE5CUzJWNUtDazdhQzVuWlc1bGNtRjBaU2hpTEZ3aU1UQXdNREZjSWlrN2FDNXBjMUJ5YVhaaGRHVTlkSEoxWlR0b0xtbHpVSFZpYkdsalBYUnlkV1U3ZG1GeUlHWTlibVYzSUZKVFFVdGxlU2dwTzNaaGNpQmxQV2d1Ymk1MGIxTjBjbWx1WnlneE5pazdkbUZ5SUdrOWFDNWxMblJ2VTNSeWFXNW5LREUyS1R0bUxuTmxkRkIxWW14cFl5aGxMR2twTzJZdWFYTlFjbWwyWVhSbFBXWmhiSE5sTzJZdWFYTlFkV0pzYVdNOWRISjFaVHQyWVhJZ2F6MTdmVHRyTG5CeWRrdGxlVTlpYWoxb08yc3VjSFZpUzJWNVQySnFQV1k3Y21WMGRYSnVJR3Q5Wld4elpYdHBaaWhoUFQxY0lrVkRYQ0lwZTNaaGNpQmtQV003ZG1GeUlHYzlibVYzSUV0S1ZWSXVZM0o1Y0hSdkxrVkRSRk5CS0h0amRYSjJaVHBrZlNrN2RtRnlJR285Wnk1blpXNWxjbUYwWlV0bGVWQmhhWEpJWlhnb0tUdDJZWElnYUQxdVpYY2dTMHBWVWk1amNubHdkRzh1UlVORVUwRW9lMk4xY25abE9tUjlLVHRvTG5ObGRGQnlhWFpoZEdWTFpYbElaWGdvYWk1bFkzQnlkbWhsZUNrN2FDNXBjMUJ5YVhaaGRHVTlkSEoxWlR0b0xtbHpVSFZpYkdsalBXWmhiSE5sTzNaaGNpQm1QVzVsZHlCTFNsVlNMbU55ZVhCMGJ5NUZRMFJUUVNoN1kzVnlkbVU2WkgwcE8yWXVjMlYwVUhWaWJHbGpTMlY1U0dWNEtHb3VaV053ZFdKb1pYZ3BPMll1YVhOUWNtbDJZWFJsUFdaaGJITmxPMll1YVhOUWRXSnNhV005ZEhKMVpUdDJZWElnYXoxN2ZUdHJMbkJ5ZGt0bGVVOWlhajFvTzJzdWNIVmlTMlY1VDJKcVBXWTdjbVYwZFhKdUlHdDlaV3h6Wlh0MGFISnZkMXdpZFc1cmJtOTNiaUJoYkdkdmNtbDBhRzA2SUZ3aUsyRjlmWDA3UzBWWlZWUkpUQzVuWlhSUVJVMDlablZ1WTNScGIyNG9ZU3h5TEc4c1p5eHFLWHQyWVhJZ2RqMUxTbFZTTG1GemJqRTdkbUZ5SUhVOVMwcFZVaTVqY25sd2RHODdablZ1WTNScGIyNGdjQ2h6S1h0MllYSWdkejFMU2xWU0xtRnpiakV1UVZOT01WVjBhV3d1Ym1WM1QySnFaV04wS0h0elpYRTZXM3RjSW1sdWRGd2lPakI5TEh0Y0ltbHVkRndpT250aWFXZHBiblE2Y3k1dWZYMHNlMXdpYVc1MFhDSTZjeTVsZlN4N1hDSnBiblJjSWpwN1ltbG5hVzUwT25NdVpIMTlMSHRjSW1sdWRGd2lPbnRpYVdkcGJuUTZjeTV3Zlgwc2Uxd2lhVzUwWENJNmUySnBaMmx1ZERwekxuRjlmU3g3WENKcGJuUmNJanA3WW1sbmFXNTBPbk11Wkcxd01YMTlMSHRjSW1sdWRGd2lPbnRpYVdkcGJuUTZjeTVrYlhFeGZYMHNlMXdpYVc1MFhDSTZlMkpwWjJsdWREcHpMbU52WldabWZYMWRmU2s3Y21WMGRYSnVJSGQ5Wm5WdVkzUnBiMjRnY1NoM0tYdDJZWElnY3oxTFNsVlNMbUZ6YmpFdVFWTk9NVlYwYVd3dWJtVjNUMkpxWldOMEtIdHpaWEU2VzN0Y0ltbHVkRndpT2pGOUxIdHZZM1J6ZEhJNmUyaGxlRHAzTG5CeWRrdGxlVWhsZUgxOUxIdDBZV2M2VzF3aVlUQmNJaXgwY25WbExIdHZhV1E2ZTI1aGJXVTZkeTVqZFhKMlpVNWhiV1Y5ZlYxOUxIdDBZV2M2VzF3aVlURmNJaXgwY25WbExIdGlhWFJ6ZEhJNmUyaGxlRHBjSWpBd1hDSXJkeTV3ZFdKTFpYbElaWGg5ZlYxOVhYMHBPM0psZEhWeWJpQnpmV1oxYm1OMGFXOXVJRzRvY3lsN2RtRnlJSGM5UzBwVlVpNWhjMjR4TGtGVFRqRlZkR2xzTG01bGQwOWlhbVZqZENoN2MyVnhPbHQ3WENKcGJuUmNJam93ZlN4N1hDSnBiblJjSWpwN1ltbG5hVzUwT25NdWNIMTlMSHRjSW1sdWRGd2lPbnRpYVdkcGJuUTZjeTV4Zlgwc2Uxd2lhVzUwWENJNmUySnBaMmx1ZERwekxtZDlmU3g3WENKcGJuUmNJanA3WW1sbmFXNTBPbk11ZVgxOUxIdGNJbWx1ZEZ3aU9udGlhV2RwYm5RNmN5NTRmWDFkZlNrN2NtVjBkWEp1SUhkOWFXWW9LQ2gwZVhCbGIyWWdVbE5CUzJWNUlUMWNJblZ1WkdWbWFXNWxaRndpSmlaaElHbHVjM1JoYm1ObGIyWWdVbE5CUzJWNUtYeDhLSFI1Y0dWdlppQjFMa1JUUVNFOVhDSjFibVJsWm1sdVpXUmNJaVltWVNCcGJuTjBZVzVqWlc5bUlIVXVSRk5CS1h4OEtIUjVjR1Z2WmlCMUxrVkRSRk5CSVQxY0luVnVaR1ZtYVc1bFpGd2lKaVpoSUdsdWMzUmhibU5sYjJZZ2RTNUZRMFJUUVNrcEppWmhMbWx6VUhWaWJHbGpQVDEwY25WbEppWW9jajA5UFhWdVpHVm1hVzVsWkh4OGNqMDlYQ0pRUzBOVE9GQlZRbHdpS1NsN2RtRnlJSFE5Ym1WM0lFdEtWVkl1WVhOdU1TNTROVEE1TGxOMVltcGxZM1JRZFdKc2FXTkxaWGxKYm1adktHRXBPM1poY2lCdFBYUXVaMlYwUlc1amIyUmxaRWhsZUNncE8zSmxkSFZ5YmlCMkxrRlRUakZWZEdsc0xtZGxkRkJGVFZOMGNtbHVaMFp5YjIxSVpYZ29iU3hjSWxCVlFreEpReUJMUlZsY0lpbDlhV1lvY2owOVhDSlFTME5UTVZCU1Zsd2lKaVowZVhCbGIyWWdVbE5CUzJWNUlUMWNJblZ1WkdWbWFXNWxaRndpSmlaaElHbHVjM1JoYm1ObGIyWWdVbE5CUzJWNUppWW9iejA5UFhWdVpHVm1hVzVsWkh4OGJ6MDliblZzYkNrbUptRXVhWE5RY21sMllYUmxQVDEwY25WbEtYdDJZWElnZEQxd0tHRXBPM1poY2lCdFBYUXVaMlYwUlc1amIyUmxaRWhsZUNncE8zSmxkSFZ5YmlCMkxrRlRUakZWZEdsc0xtZGxkRkJGVFZOMGNtbHVaMFp5YjIxSVpYZ29iU3hjSWxKVFFTQlFVa2xXUVZSRklFdEZXVndpS1gxcFppaHlQVDFjSWxCTFExTXhVRkpXWENJbUpuUjVjR1Z2WmlCU1UwRkxaWGtoUFZ3aWRXNWtaV1pwYm1Wa1hDSW1KbUVnYVc1emRHRnVZMlZ2WmlCTFNsVlNMbU55ZVhCMGJ5NUZRMFJUUVNZbUtHODlQVDExYm1SbFptbHVaV1I4Zkc4OVBXNTFiR3dwSmlaaExtbHpVSEpwZG1GMFpUMDlkSEoxWlNsN2RtRnlJR1k5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpQWW1wbFkzUkpaR1Z1ZEdsbWFXVnlLSHR1WVcxbE9tRXVZM1Z5ZG1WT1lXMWxmU2s3ZG1GeUlHdzlaaTVuWlhSRmJtTnZaR1ZrU0dWNEtDazdkbUZ5SUdVOWNTaGhLVHQyWVhJZ2F6MWxMbWRsZEVWdVkyOWtaV1JJWlhnb0tUdDJZWElnYVQxY0lsd2lPMmtyUFhZdVFWTk9NVlYwYVd3dVoyVjBVRVZOVTNSeWFXNW5Sbkp2YlVobGVDaHNMRndpUlVNZ1VFRlNRVTFGVkVWU1Uxd2lLVHRwS3oxMkxrRlRUakZWZEdsc0xtZGxkRkJGVFZOMGNtbHVaMFp5YjIxSVpYZ29heXhjSWtWRElGQlNTVlpCVkVVZ1MwVlpYQ0lwTzNKbGRIVnliaUJwZldsbUtISTlQVndpVUV0RFV6RlFVbFpjSWlZbWRIbHdaVzltSUV0S1ZWSXVZM0o1Y0hSdkxrUlRRU0U5WENKMWJtUmxabWx1WldSY0lpWW1ZU0JwYm5OMFlXNWpaVzltSUV0S1ZWSXVZM0o1Y0hSdkxrUlRRU1ltS0c4OVBUMTFibVJsWm1sdVpXUjhmRzg5UFc1MWJHd3BKaVpoTG1selVISnBkbUYwWlQwOWRISjFaU2w3ZG1GeUlIUTliaWhoS1R0MllYSWdiVDEwTG1kbGRFVnVZMjlrWldSSVpYZ29LVHR5WlhSMWNtNGdkaTVCVTA0eFZYUnBiQzVuWlhSUVJVMVRkSEpwYm1kR2NtOXRTR1Y0S0cwc1hDSkVVMEVnVUZKSlZrRlVSU0JMUlZsY0lpbDlhV1lvY2owOVhDSlFTME5UTlZCU1Zsd2lKaVowZVhCbGIyWWdVbE5CUzJWNUlUMWNJblZ1WkdWbWFXNWxaRndpSmlaaElHbHVjM1JoYm1ObGIyWWdVbE5CUzJWNUppWW9ieUU5UFhWdVpHVm1hVzVsWkNZbWJ5RTliblZzYkNrbUptRXVhWE5RY21sMllYUmxQVDEwY25WbEtYdDJZWElnZEQxd0tHRXBPM1poY2lCdFBYUXVaMlYwUlc1amIyUmxaRWhsZUNncE8ybG1LR2M5UFQxMWJtUmxabWx1WldRcGUyYzlYQ0pFUlZNdFJVUkZNeTFEUWtOY0luMXlaWFIxY200Z2RHaHBjeTVuWlhSRmJtTnllWEIwWldSUVMwTlROVkJGVFVaeWIyMVFjblpMWlhsSVpYZ29YQ0pTVTBGY0lpeHRMRzhzWnlsOWFXWW9jajA5WENKUVMwTlROVkJTVmx3aUppWjBlWEJsYjJZZ1MwcFZVaTVqY25sd2RHOHVSVU5FVTBFaFBWd2lkVzVrWldacGJtVmtYQ0ltSm1FZ2FXNXpkR0Z1WTJWdlppQkxTbFZTTG1OeWVYQjBieTVGUTBSVFFTWW1LRzhoUFQxMWJtUmxabWx1WldRbUptOGhQVzUxYkd3cEppWmhMbWx6VUhKcGRtRjBaVDA5ZEhKMVpTbDdkbUZ5SUhROWNTaGhLVHQyWVhJZ2JUMTBMbWRsZEVWdVkyOWtaV1JJWlhnb0tUdHBaaWhuUFQwOWRXNWtaV1pwYm1Wa0tYdG5QVndpUkVWVExVVkVSVE10UTBKRFhDSjljbVYwZFhKdUlIUm9hWE11WjJWMFJXNWpjbmx3ZEdWa1VFdERVelZRUlUxR2NtOXRVSEoyUzJWNVNHVjRLRndpUlVOY0lpeHRMRzhzWnlsOWFXWW9jajA5WENKUVMwTlROVkJTVmx3aUppWjBlWEJsYjJZZ1MwcFZVaTVqY25sd2RHOHVSRk5CSVQxY0luVnVaR1ZtYVc1bFpGd2lKaVpoSUdsdWMzUmhibU5sYjJZZ1MwcFZVaTVqY25sd2RHOHVSRk5CSmlZb2J5RTlQWFZ1WkdWbWFXNWxaQ1ltYnlFOWJuVnNiQ2ttSm1FdWFYTlFjbWwyWVhSbFBUMTBjblZsS1h0MllYSWdkRDF1S0dFcE8zWmhjaUJ0UFhRdVoyVjBSVzVqYjJSbFpFaGxlQ2dwTzJsbUtHYzlQVDExYm1SbFptbHVaV1FwZTJjOVhDSkVSVk10UlVSRk15MURRa05jSW4xeVpYUjFjbTRnZEdocGN5NW5aWFJGYm1OeWVYQjBaV1JRUzBOVE5WQkZUVVp5YjIxUWNuWkxaWGxJWlhnb1hDSkVVMEZjSWl4dExHOHNaeWw5ZG1GeUlHZzlablZ1WTNScGIyNG9keXh6S1h0MllYSWdlVDFpS0hjc2N5azdkbUZ5SUhnOWJtVjNJRXRLVlZJdVlYTnVNUzVCVTA0eFZYUnBiQzV1WlhkUFltcGxZM1FvZTNObGNUcGJlM05sY1RwYmUyOXBaRHA3Ym1GdFpUcGNJbkJyWTNNMVVFSkZVekpjSW4xOUxIdHpaWEU2VzN0elpYRTZXM3R2YVdRNmUyNWhiV1U2WENKd2EyTnpOVkJDUzBSR01sd2lmWDBzZTNObGNUcGJlMjlqZEhOMGNqcDdhR1Y0T25rdWNHSnJaR1l5VTJGc2RIMTlMSHRjSW1sdWRGd2lPbmt1Y0dKclpHWXlTWFJsY24xZGZWMTlMSHR6WlhFNlczdHZhV1E2ZTI1aGJXVTZYQ0prWlhNdFJVUkZNeTFEUWtOY0luMTlMSHR2WTNSemRISTZlMmhsZURwNUxtVnVZM0o1Y0hScGIyNVRZMmhsYldWSlZuMTlYWDFkZlYxOUxIdHZZM1J6ZEhJNmUyaGxlRHA1TG1OcGNHaGxjblJsZUhSOWZWMTlLVHR5WlhSMWNtNGdlQzVuWlhSRmJtTnZaR1ZrU0dWNEtDbDlPM1poY2lCaVBXWjFibU4wYVc5dUtFUXNSU2w3ZG1GeUlIZzlNVEF3TzNaaGNpQkRQVU55ZVhCMGIwcFRMbXhwWWk1WGIzSmtRWEp5WVhrdWNtRnVaRzl0S0RncE8zWmhjaUJDUFZ3aVJFVlRMVVZFUlRNdFEwSkRYQ0k3ZG1GeUlITTlRM0o1Y0hSdlNsTXViR2xpTGxkdmNtUkJjbkpoZVM1eVlXNWtiMjBvT0NrN2RtRnlJSGs5UTNKNWNIUnZTbE11VUVKTFJFWXlLRVVzUXl4N2EyVjVVMmw2WlRveE9USXZNeklzYVhSbGNtRjBhVzl1Y3pwNGZTazdkbUZ5SUhvOVEzSjVjSFJ2U2xNdVpXNWpMa2hsZUM1d1lYSnpaU2hFS1R0MllYSWdRVDFEY25sd2RHOUtVeTVVY21sd2JHVkVSVk11Wlc1amNubHdkQ2g2TEhrc2UybDJPbk45S1N0Y0lsd2lPM1poY2lCM1BYdDlPM2N1WTJsd2FHVnlkR1Y0ZEQxQk8zY3VjR0pyWkdZeVUyRnNkRDFEY25sd2RHOUtVeTVsYm1NdVNHVjRMbk4wY21sdVoybG1lU2hES1R0M0xuQmlhMlJtTWtsMFpYSTllRHQzTG1WdVkzSjVjSFJwYjI1VFkyaGxiV1ZCYkdjOVFqdDNMbVZ1WTNKNWNIUnBiMjVUWTJobGJXVkpWajFEY25sd2RHOUtVeTVsYm1NdVNHVjRMbk4wY21sdVoybG1lU2h6S1R0eVpYUjFjbTRnZDMwN2FXWW9jajA5WENKUVMwTlRPRkJTVmx3aUppWjBlWEJsYjJZZ1VsTkJTMlY1SVQxY0luVnVaR1ZtYVc1bFpGd2lKaVpoSUdsdWMzUmhibU5sYjJZZ1VsTkJTMlY1SmlaaExtbHpVSEpwZG1GMFpUMDlkSEoxWlNsN2RtRnlJR1E5Y0NoaEtUdDJZWElnWXoxa0xtZGxkRVZ1WTI5a1pXUklaWGdvS1R0MllYSWdkRDFMU2xWU0xtRnpiakV1UVZOT01WVjBhV3d1Ym1WM1QySnFaV04wS0h0elpYRTZXM3RjSW1sdWRGd2lPakI5TEh0elpYRTZXM3R2YVdRNmUyNWhiV1U2WENKeWMyRkZibU55ZVhCMGFXOXVYQ0o5ZlN4N1hDSnVkV3hzWENJNmRISjFaWDFkZlN4N2IyTjBjM1J5T250b1pYZzZZMzE5WFgwcE8zWmhjaUJ0UFhRdVoyVjBSVzVqYjJSbFpFaGxlQ2dwTzJsbUtHODlQVDExYm1SbFptbHVaV1I4Zkc4OVBXNTFiR3dwZTNKbGRIVnliaUIyTGtGVFRqRlZkR2xzTG1kbGRGQkZUVk4wY21sdVowWnliMjFJWlhnb2JTeGNJbEJTU1ZaQlZFVWdTMFZaWENJcGZXVnNjMlY3ZG1GeUlHczlhQ2h0TEc4cE8zSmxkSFZ5YmlCMkxrRlRUakZWZEdsc0xtZGxkRkJGVFZOMGNtbHVaMFp5YjIxSVpYZ29heXhjSWtWT1ExSlpVRlJGUkNCUVVrbFdRVlJGSUV0RldWd2lLWDE5YVdZb2NqMDlYQ0pRUzBOVE9GQlNWbHdpSmlaMGVYQmxiMllnUzBwVlVpNWpjbmx3ZEc4dVJVTkVVMEVoUFZ3aWRXNWtaV1pwYm1Wa1hDSW1KbUVnYVc1emRHRnVZMlZ2WmlCTFNsVlNMbU55ZVhCMGJ5NUZRMFJUUVNZbVlTNXBjMUJ5YVhaaGRHVTlQWFJ5ZFdVcGUzWmhjaUJrUFc1bGR5QkxTbFZTTG1GemJqRXVRVk5PTVZWMGFXd3VibVYzVDJKcVpXTjBLSHR6WlhFNlczdGNJbWx1ZEZ3aU9qRjlMSHR2WTNSemRISTZlMmhsZURwaExuQnlka3RsZVVobGVIMTlMSHQwWVdjNlcxd2lZVEZjSWl4MGNuVmxMSHRpYVhSemRISTZlMmhsZURwY0lqQXdYQ0lyWVM1d2RXSkxaWGxJWlhoOWZWMTlYWDBwTzNaaGNpQmpQV1F1WjJWMFJXNWpiMlJsWkVobGVDZ3BPM1poY2lCMFBVdEtWVkl1WVhOdU1TNUJVMDR4VlhScGJDNXVaWGRQWW1wbFkzUW9lM05sY1RwYmUxd2lhVzUwWENJNk1IMHNlM05sY1RwYmUyOXBaRHA3Ym1GdFpUcGNJbVZqVUhWaWJHbGpTMlY1WENKOWZTeDdiMmxrT250dVlXMWxPbUV1WTNWeWRtVk9ZVzFsZlgxZGZTeDdiMk4wYzNSeU9udG9aWGc2WTMxOVhYMHBPM1poY2lCdFBYUXVaMlYwUlc1amIyUmxaRWhsZUNncE8ybG1LRzg5UFQxMWJtUmxabWx1WldSOGZHODlQVzUxYkd3cGUzSmxkSFZ5YmlCMkxrRlRUakZWZEdsc0xtZGxkRkJGVFZOMGNtbHVaMFp5YjIxSVpYZ29iU3hjSWxCU1NWWkJWRVVnUzBWWlhDSXBmV1ZzYzJWN2RtRnlJR3M5YUNodExHOHBPM0psZEhWeWJpQjJMa0ZUVGpGVmRHbHNMbWRsZEZCRlRWTjBjbWx1WjBaeWIyMUlaWGdvYXl4Y0lrVk9RMUpaVUZSRlJDQlFVa2xXUVZSRklFdEZXVndpS1gxOWFXWW9jajA5WENKUVMwTlRPRkJTVmx3aUppWjBlWEJsYjJZZ1MwcFZVaTVqY25sd2RHOHVSRk5CSVQxY0luVnVaR1ZtYVc1bFpGd2lKaVpoSUdsdWMzUmhibU5sYjJZZ1MwcFZVaTVqY25sd2RHOHVSRk5CSmlaaExtbHpVSEpwZG1GMFpUMDlkSEoxWlNsN2RtRnlJR1E5Ym1WM0lFdEtWVkl1WVhOdU1TNUVSVkpKYm5SbFoyVnlLSHRpYVdkcGJuUTZZUzU0ZlNrN2RtRnlJR005WkM1blpYUkZibU52WkdWa1NHVjRLQ2s3ZG1GeUlIUTlTMHBWVWk1aGMyNHhMa0ZUVGpGVmRHbHNMbTVsZDA5aWFtVmpkQ2g3YzJWeE9sdDdYQ0pwYm5SY0lqb3dmU3g3YzJWeE9sdDdiMmxrT250dVlXMWxPbHdpWkhOaFhDSjlmU3g3YzJWeE9sdDdYQ0pwYm5SY0lqcDdZbWxuYVc1ME9tRXVjSDE5TEh0Y0ltbHVkRndpT250aWFXZHBiblE2WVM1eGZYMHNlMXdpYVc1MFhDSTZlMkpwWjJsdWREcGhMbWQ5ZlYxOVhYMHNlMjlqZEhOMGNqcDdhR1Y0T21OOWZWMTlLVHQyWVhJZ2JUMTBMbWRsZEVWdVkyOWtaV1JJWlhnb0tUdHBaaWh2UFQwOWRXNWtaV1pwYm1Wa2ZIeHZQVDF1ZFd4c0tYdHlaWFIxY200Z2RpNUJVMDR4VlhScGJDNW5aWFJRUlUxVGRISnBibWRHY205dFNHVjRLRzBzWENKUVVrbFdRVlJGSUV0RldWd2lLWDFsYkhObGUzWmhjaUJyUFdnb2JTeHZLVHR5WlhSMWNtNGdkaTVCVTA0eFZYUnBiQzVuWlhSUVJVMVRkSEpwYm1kR2NtOXRTR1Y0S0dzc1hDSkZUa05TV1ZCVVJVUWdVRkpKVmtGVVJTQkxSVmxjSWlsOWZYUm9jbTkzWENKMWJuTjFjSEJ2Y25SbFpDQnZZbXBsWTNRZ2JtOXlJR1p2Y20xaGRGd2lmVHRMUlZsVlZFbE1MbWRsZEV0bGVVWnliMjFEVTFKUVJVMDlablZ1WTNScGIyNG9ZaWw3ZG1GeUlHRTlTMFZaVlZSSlRDNW5aWFJJWlhoR2NtOXRVRVZOS0dJc1hDSkRSVkpVU1VaSlEwRlVSU0JTUlZGVlJWTlVYQ0lwTzNaaGNpQmpQVXRGV1ZWVVNVd3VaMlYwUzJWNVJuSnZiVU5UVWtobGVDaGhLVHR5WlhSMWNtNGdZMzA3UzBWWlZWUkpUQzVuWlhSTFpYbEdjbTl0UTFOU1NHVjRQV1oxYm1OMGFXOXVLR0VwZTNaaGNpQmpQVXRGV1ZWVVNVd3VjR0Z5YzJWRFUxSklaWGdvWVNrN2RtRnlJR0k5UzBWWlZWUkpUQzVuWlhSTFpYa29ZeTV3T0hCMVltdGxlV2hsZUN4dWRXeHNMRndpY0d0amN6aHdkV0pjSWlrN2NtVjBkWEp1SUdKOU8wdEZXVlZVU1V3dWNHRnljMlZEVTFKSVpYZzlablZ1WTNScGIyNG9ZeWw3ZG1GeUlHSTllMzA3ZG1GeUlHVTlZenRwWmlobExuTjFZbk4wY2lnd0xESXBJVDFjSWpNd1hDSXBlM1JvY205M1hDSnRZV3htYjNKdFpXUWdRMU5TS0dOdlpHVTZNREF4S1Z3aWZYWmhjaUJrUFVGVFRqRklSVmd1WjJWMFVHOXpRWEp5WVhsUFprTm9hV3hrY21WdVgwRjBUMkpxS0dVc01DazdhV1lvWkM1c1pXNW5kR2c4TVNsN2RHaHliM2RjSW0xaGJHWnZjbTFsWkNCRFUxSW9ZMjlrWlRvd01ESXBYQ0o5YVdZb1pTNXpkV0p6ZEhJb1pGc3dYU3d5S1NFOVhDSXpNRndpS1h0MGFISnZkMXdpYldGc1ptOXliV1ZrSUVOVFVpaGpiMlJsT2pBd015bGNJbjEyWVhJZ1lUMUJVMDR4U0VWWUxtZGxkRkJ2YzBGeWNtRjVUMlpEYUdsc1pISmxibDlCZEU5aWFpaGxMR1JiTUYwcE8ybG1LR0V1YkdWdVozUm9QRE1wZTNSb2NtOTNYQ0p0WVd4bWIzSnRaV1FnUTFOU0tHTnZaR1U2TURBMEtWd2lmV0l1Y0Rod2RXSnJaWGxvWlhnOVFWTk9NVWhGV0M1blpYUklaWGhQWmxSTVZsOUJkRTlpYWlobExHRmJNbDBwTzNKbGRIVnliaUJpZlR0Y2JpOHFJU0J5YzJGd1pXMHRNUzR4TG1weklDaGpLU0F5TURFeUlFdGxibXBwSUZWeWRYTm9hVzFoSUh3Z2EycDFjaTVuYVhSb2RXSXVZMjl0TDJwemNuTmhjMmxuYmk5c2FXTmxibk5sWEc0Z0tpOWNibVoxYm1OMGFXOXVJRjl5YzJGd1pXMWZjR1Z0Vkc5Q1lYTmxOalFvWWlsN2RtRnlJR0U5WWp0aFBXRXVjbVZ3YkdGalpTaGNJaTB0TFMwdFFrVkhTVTRnVWxOQklGQlNTVlpCVkVVZ1MwVlpMUzB0TFMxY0lpeGNJbHdpS1R0aFBXRXVjbVZ3YkdGalpTaGNJaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0WENJc1hDSmNJaWs3WVQxaExuSmxjR3hoWTJVb0wxc2dYRnh1WFNzdlp5eGNJbHdpS1R0eVpYUjFjbTRnWVgxbWRXNWpkR2x2YmlCZmNuTmhjR1Z0WDJkbGRGQnZjMEZ5Y21GNVQyWkRhR2xzWkhKbGJrWnliMjFJWlhnb1pDbDdkbUZ5SUdvOWJtVjNJRUZ5Y21GNUtDazdkbUZ5SUdzOVFWTk9NVWhGV0M1blpYUlRkR0Z5ZEZCdmMwOW1WbDlCZEU5aWFpaGtMREFwTzNaaGNpQm1QVUZUVGpGSVJWZ3VaMlYwVUc5elQyWk9aWGgwVTJsaWJHbHVaMTlCZEU5aWFpaGtMR3NwTzNaaGNpQm9QVUZUVGpGSVJWZ3VaMlYwVUc5elQyWk9aWGgwVTJsaWJHbHVaMTlCZEU5aWFpaGtMR1lwTzNaaGNpQmlQVUZUVGpGSVJWZ3VaMlYwVUc5elQyWk9aWGgwVTJsaWJHbHVaMTlCZEU5aWFpaGtMR2dwTzNaaGNpQnNQVUZUVGpGSVJWZ3VaMlYwVUc5elQyWk9aWGgwVTJsaWJHbHVaMTlCZEU5aWFpaGtMR0lwTzNaaGNpQmxQVUZUVGpGSVJWZ3VaMlYwVUc5elQyWk9aWGgwVTJsaWJHbHVaMTlCZEU5aWFpaGtMR3dwTzNaaGNpQm5QVUZUVGpGSVJWZ3VaMlYwVUc5elQyWk9aWGgwVTJsaWJHbHVaMTlCZEU5aWFpaGtMR1VwTzNaaGNpQmpQVUZUVGpGSVJWZ3VaMlYwVUc5elQyWk9aWGgwVTJsaWJHbHVaMTlCZEU5aWFpaGtMR2NwTzNaaGNpQnBQVUZUVGpGSVJWZ3VaMlYwVUc5elQyWk9aWGgwVTJsaWJHbHVaMTlCZEU5aWFpaGtMR01wTzJvdWNIVnphQ2hyTEdZc2FDeGlMR3dzWlN4bkxHTXNhU2s3Y21WMGRYSnVJR3A5Wm5WdVkzUnBiMjRnWDNKellYQmxiVjluWlhSSVpYaFdZV3gxWlVGeWNtRjVUMlpEYUdsc1pISmxia1p5YjIxSVpYZ29hU2w3ZG1GeUlHODlYM0p6WVhCbGJWOW5aWFJRYjNOQmNuSmhlVTltUTJocGJHUnlaVzVHY205dFNHVjRLR2twTzNaaGNpQnlQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtHa3NiMXN3WFNrN2RtRnlJR1k5UVZOT01VaEZXQzVuWlhSSVpYaFBabFpmUVhSUFltb29hU3h2V3pGZEtUdDJZWElnYWoxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWhwTEc5Yk1sMHBPM1poY2lCclBVRlRUakZJUlZndVoyVjBTR1Y0VDJaV1gwRjBUMkpxS0drc2Ixc3pYU2s3ZG1GeUlHTTlRVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb2FTeHZXelJkS1R0MllYSWdZajFCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaHBMRzliTlYwcE8zWmhjaUJvUFVGVFRqRklSVmd1WjJWMFNHVjRUMlpXWDBGMFQySnFLR2tzYjFzMlhTazdkbUZ5SUdjOVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vYVN4dld6ZGRLVHQyWVhJZ2JEMUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZsOUJkRTlpYWlocExHOWJPRjBwTzNaaGNpQnRQVzVsZHlCQmNuSmhlU2dwTzIwdWNIVnphQ2h5TEdZc2FpeHJMR01zWWl4b0xHY3NiQ2s3Y21WMGRYSnVJRzE5Wm5WdVkzUnBiMjRnWDNKellYQmxiVjl5WldGa1VISnBkbUYwWlV0bGVVWnliMjFCVTA0eFNHVjRVM1J5YVc1bktHTXBlM1poY2lCaVBWOXljMkZ3WlcxZloyVjBTR1Y0Vm1Gc2RXVkJjbkpoZVU5bVEyaHBiR1J5Wlc1R2NtOXRTR1Y0S0dNcE8zUm9hWE11YzJWMFVISnBkbUYwWlVWNEtHSmJNVjBzWWxzeVhTeGlXek5kTEdKYk5GMHNZbHMxWFN4aVd6WmRMR0piTjEwc1lsczRYU2w5Wm5WdVkzUnBiMjRnWDNKellYQmxiVjl5WldGa1VISnBkbUYwWlV0bGVVWnliMjFRUlUxVGRISnBibWNvWlNsN2RtRnlJR005WDNKellYQmxiVjl3WlcxVWIwSmhjMlUyTkNobEtUdDJZWElnWkQxaU5qUjBiMmhsZUNoaktUdDJZWElnWWoxZmNuTmhjR1Z0WDJkbGRFaGxlRlpoYkhWbFFYSnlZWGxQWmtOb2FXeGtjbVZ1Um5KdmJVaGxlQ2hrS1R0MGFHbHpMbk5sZEZCeWFYWmhkR1ZGZUNoaVd6RmRMR0piTWwwc1lsc3pYU3hpV3pSZExHSmJOVjBzWWxzMlhTeGlXemRkTEdKYk9GMHBmVkpUUVV0bGVTNXdjbTkwYjNSNWNHVXVjbVZoWkZCeWFYWmhkR1ZMWlhsR2NtOXRVRVZOVTNSeWFXNW5QVjl5YzJGd1pXMWZjbVZoWkZCeWFYWmhkR1ZMWlhsR2NtOXRVRVZOVTNSeWFXNW5PMUpUUVV0bGVTNXdjbTkwYjNSNWNHVXVjbVZoWkZCeWFYWmhkR1ZMWlhsR2NtOXRRVk5PTVVobGVGTjBjbWx1WnoxZmNuTmhjR1Z0WDNKbFlXUlFjbWwyWVhSbFMyVjVSbkp2YlVGVFRqRklaWGhUZEhKcGJtYzdYRzR2S2lFZ2NuTmhjMmxuYmkweExqSXVOeTVxY3lBb1l5a2dNakF4TWlCTFpXNXFhU0JWY25WemFHbHRZU0I4SUd0cWRYSXVaMmwwYUhWaUxtTnZiUzlxYzNKellYTnBaMjR2YkdsalpXNXpaVnh1SUNvdlhHNTJZWElnWDFKRlgwaEZXRVJGUTA5T1RGazlibVYzSUZKbFowVjRjQ2hjSWx3aUtUdGZVa1ZmU0VWWVJFVkRUMDVNV1M1amIyMXdhV3hsS0Z3aVcxNHdMVGxoTFdaZFhDSXNYQ0puYVZ3aUtUdG1kVzVqZEdsdmJpQmZjbk5oYzJsbmJsOW5aWFJJWlhoUVlXUmtaV1JFYVdkbGMzUkpibVp2Um05eVUzUnlhVzVuS0dRc1pTeGhLWHQyWVhJZ1lqMW1kVzVqZEdsdmJpaG1LWHR5WlhSMWNtNGdTMHBWVWk1amNubHdkRzh1VlhScGJDNW9ZWE5vVTNSeWFXNW5LR1lzWVNsOU8zWmhjaUJqUFdJb1pDazdjbVYwZFhKdUlFdEtWVkl1WTNKNWNIUnZMbFYwYVd3dVoyVjBVR0ZrWkdWa1JHbG5aWE4wU1c1bWIwaGxlQ2hqTEdFc1pTbDlablZ1WTNScGIyNGdYM3BsY205UVlXUmthVzVuVDJaVGFXZHVZWFIxY21Vb1pTeGtLWHQyWVhJZ1l6MWNJbHdpTzNaaGNpQmhQV1F2TkMxbExteGxibWQwYUR0bWIzSW9kbUZ5SUdJOU1EdGlQR0U3WWlzcktYdGpQV01yWENJd1hDSjljbVYwZFhKdUlHTXJaWDFtZFc1amRHbHZiaUJmY25OaGMybG5ibDl6YVdkdVUzUnlhVzVuS0dRc1lTbDdkbUZ5SUdJOVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlFdEtWVkl1WTNKNWNIUnZMbFYwYVd3dWFHRnphRk4wY21sdVp5aGxMR0VwZlR0MllYSWdZejFpS0dRcE8zSmxkSFZ5YmlCMGFHbHpMbk5wWjI1WGFYUm9UV1Z6YzJGblpVaGhjMmdvWXl4aEtYMW1kVzVqZEdsdmJpQmZjbk5oYzJsbmJsOXphV2R1VjJsMGFFMWxjM05oWjJWSVlYTm9LR1VzWXlsN2RtRnlJR1k5UzBwVlVpNWpjbmx3ZEc4dVZYUnBiQzVuWlhSUVlXUmtaV1JFYVdkbGMzUkpibVp2U0dWNEtHVXNZeXgwYUdsekxtNHVZbWwwVEdWdVozUm9LQ2twTzNaaGNpQmlQWEJoY25ObFFtbG5TVzUwS0dZc01UWXBPM1poY2lCa1BYUm9hWE11Wkc5UWNtbDJZWFJsS0dJcE8zWmhjaUJoUFdRdWRHOVRkSEpwYm1jb01UWXBPM0psZEhWeWJpQmZlbVZ5YjFCaFpHUnBibWRQWmxOcFoyNWhkSFZ5WlNoaExIUm9hWE11Ymk1aWFYUk1aVzVuZEdnb0tTbDlablZ1WTNScGIyNGdYM0p6WVhOcFoyNWZjMmxuYmxOMGNtbHVaMWRwZEdoVFNFRXhLR0VwZTNKbGRIVnliaUJmY25OaGMybG5ibDl6YVdkdVUzUnlhVzVuTG1OaGJHd29kR2hwY3l4aExGd2ljMmhoTVZ3aUtYMW1kVzVqZEdsdmJpQmZjbk5oYzJsbmJsOXphV2R1VTNSeWFXNW5WMmwwYUZOSVFUSTFOaWhoS1h0eVpYUjFjbTRnWDNKellYTnBaMjVmYzJsbmJsTjBjbWx1Wnk1allXeHNLSFJvYVhNc1lTeGNJbk5vWVRJMU5sd2lLWDFtZFc1amRHbHZiaUJ3YzNOZmJXZG1NVjl6ZEhJb1l5eGhMR1VwZTNaaGNpQmlQVndpWENJc1pEMHdPM2RvYVd4bEtHSXViR1Z1WjNSb1BHRXBlMklyUFdobGVIUnZjbk4wY2lobEtISnpkSEowYjJobGVDaGpLMU4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1V1WVhCd2JIa29VM1J5YVc1bkxGc29aQ1kwTWpjNE1Ua3dNRGd3S1Q0K01qUXNLR1FtTVRZM01URTJPREFwUGo0eE5pd29aQ1kyTlRJNE1DaytQamdzWkNZeU5UVmRLU2twS1R0a0t6MHhmWEpsZEhWeWJpQmlmV1oxYm1OMGFXOXVJRjl5YzJGemFXZHVYM05wWjI1VGRISnBibWRRVTFNb1pTeGhMR1FwZTNaaGNpQmpQV1oxYm1OMGFXOXVLR1lwZTNKbGRIVnliaUJMU2xWU0xtTnllWEIwYnk1VmRHbHNMbWhoYzJoSVpYZ29aaXhoS1gwN2RtRnlJR0k5WXloeWMzUnlkRzlvWlhnb1pTa3BPMmxtS0dROVBUMTFibVJsWm1sdVpXUXBlMlE5TFRGOWNtVjBkWEp1SUhSb2FYTXVjMmxuYmxkcGRHaE5aWE56WVdkbFNHRnphRkJUVXloaUxHRXNaQ2w5Wm5WdVkzUnBiMjRnWDNKellYTnBaMjVmYzJsbmJsZHBkR2hOWlhOellXZGxTR0Z6YUZCVFV5aHNMR0VzYXlsN2RtRnlJR0k5YUdWNGRHOXljM1J5S0d3cE8zWmhjaUJuUFdJdWJHVnVaM1JvTzNaaGNpQnRQWFJvYVhNdWJpNWlhWFJNWlc1bmRHZ29LUzB4TzNaaGNpQmpQVTFoZEdndVkyVnBiQ2h0THpncE8zWmhjaUJrTzNaaGNpQnZQV1oxYm1OMGFXOXVLR2twZTNKbGRIVnliaUJMU2xWU0xtTnllWEIwYnk1VmRHbHNMbWhoYzJoSVpYZ29hU3hoS1gwN2FXWW9hejA5UFMweGZIeHJQVDA5ZFc1a1pXWnBibVZrS1h0clBXZDlaV3h6Wlh0cFppaHJQVDA5TFRJcGUyczlZeTFuTFRKOVpXeHpaWHRwWmloclBDMHlLWHQwYUhKdmQxd2lhVzUyWVd4cFpDQnpZV3gwSUd4bGJtZDBhRndpZlgxOWFXWW9ZendvWnl0ckt6SXBLWHQwYUhKdmQxd2laR0YwWVNCMGIyOGdiRzl1WjF3aWZYWmhjaUJtUFZ3aVhDSTdhV1lvYXo0d0tYdG1QVzVsZHlCQmNuSmhlU2hyS1R0dVpYY2dVMlZqZFhKbFVtRnVaRzl0S0NrdWJtVjRkRUo1ZEdWektHWXBPMlk5VTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlM1aGNIQnNlU2hUZEhKcGJtY3NaaWw5ZG1GeUlHNDlhR1Y0ZEc5eWMzUnlLRzhvY25OMGNuUnZhR1Y0S0Z3aVhGeDRNREJjWEhnd01GeGNlREF3WEZ4NE1EQmNYSGd3TUZ4Y2VEQXdYRng0TURCY1hIZ3dNRndpSzJJclppa3BLVHQyWVhJZ2FqMWJYVHRtYjNJb1pEMHdPMlE4WXkxckxXY3RNanRrS3oweEtYdHFXMlJkUFRCOWRtRnlJR1U5VTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlM1aGNIQnNlU2hUZEhKcGJtY3NhaWtyWENKY1hIZ3dNVndpSzJZN2RtRnlJR2c5Y0hOelgyMW5aakZmYzNSeUtHNHNaUzVzWlc1bmRHZ3NieWs3ZG1GeUlIRTlXMTA3Wm05eUtHUTlNRHRrUEdVdWJHVnVaM1JvTzJRclBURXBlM0ZiWkYwOVpTNWphR0Z5UTI5a1pVRjBLR1FwWG1ndVkyaGhja052WkdWQmRDaGtLWDEyWVhJZ2NEMG9OalV5T0RBK1BpZzRLbU10YlNrcEpqSTFOVHR4V3pCZEpqMStjRHRtYjNJb1pEMHdPMlE4Wnp0a0t5c3BlM0V1Y0hWemFDaHVMbU5vWVhKRGIyUmxRWFFvWkNrcGZYRXVjSFZ6YUNneE9EZ3BPM0psZEhWeWJpQmZlbVZ5YjFCaFpHUnBibWRQWmxOcFoyNWhkSFZ5WlNoMGFHbHpMbVJ2VUhKcGRtRjBaU2h1WlhjZ1FtbG5TVzUwWldkbGNpaHhLU2t1ZEc5VGRISnBibWNvTVRZcExIUm9hWE11Ymk1aWFYUk1aVzVuZEdnb0tTbDlablZ1WTNScGIyNGdYM0p6WVhOcFoyNWZaMlYwUkdWamNubHdkRk5wWjI1aGRIVnlaVUpKS0dFc1pDeGpLWHQyWVhJZ1lqMXVaWGNnVWxOQlMyVjVLQ2s3WWk1elpYUlFkV0pzYVdNb1pDeGpLVHQyWVhJZ1pUMWlMbVJ2VUhWaWJHbGpLR0VwTzNKbGRIVnliaUJsZldaMWJtTjBhVzl1SUY5eWMyRnphV2R1WDJkbGRFaGxlRVJwWjJWemRFbHVabTlHY205dFUybG5LR0VzWXl4aUtYdDJZWElnWlQxZmNuTmhjMmxuYmw5blpYUkVaV055ZVhCMFUybG5ibUYwZFhKbFFra29ZU3hqTEdJcE8zWmhjaUJrUFdVdWRHOVRkSEpwYm1jb01UWXBMbkpsY0d4aFkyVW9MMTR4Wmlzd01DOHNYQ0pjSWlrN2NtVjBkWEp1SUdSOVpuVnVZM1JwYjI0Z1gzSnpZWE5wWjI1ZloyVjBRV3huVG1GdFpVRnVaRWhoYzJoR2NtOXRTR1Y0UkdseloyVnpkRWx1Wm04b1ppbDdabTl5S0haaGNpQmxJR2x1SUV0S1ZWSXVZM0o1Y0hSdkxsVjBhV3d1UkVsSFJWTlVTVTVHVDBoRlFVUXBlM1poY2lCa1BVdEtWVkl1WTNKNWNIUnZMbFYwYVd3dVJFbEhSVk5VU1U1R1QwaEZRVVJiWlYwN2RtRnlJR0k5WkM1c1pXNW5kR2c3YVdZb1ppNXpkV0p6ZEhKcGJtY29NQ3hpS1QwOVpDbDdkbUZ5SUdNOVcyVXNaaTV6ZFdKemRISnBibWNvWWlsZE8zSmxkSFZ5YmlCamZYMXlaWFIxY201YlhYMW1kVzVqZEdsdmJpQmZjbk5oYzJsbmJsOTJaWEpwWm5sVGFXZHVZWFIxY21WWGFYUm9RWEpuY3lobUxHSXNaeXhxS1h0MllYSWdaVDFmY25OaGMybG5ibDluWlhSSVpYaEVhV2RsYzNSSmJtWnZSbkp2YlZOcFp5aGlMR2NzYWlrN2RtRnlJR2c5WDNKellYTnBaMjVmWjJWMFFXeG5UbUZ0WlVGdVpFaGhjMmhHY205dFNHVjRSR2x6WjJWemRFbHVabThvWlNrN2FXWW9hQzVzWlc1bmRHZzlQVEFwZTNKbGRIVnliaUJtWVd4elpYMTJZWElnWkQxb1d6QmRPM1poY2lCcFBXaGJNVjA3ZG1GeUlHRTlablZ1WTNScGIyNG9heWw3Y21WMGRYSnVJRXRLVlZJdVkzSjVjSFJ2TGxWMGFXd3VhR0Z6YUZOMGNtbHVaeWhyTEdRcGZUdDJZWElnWXoxaEtHWXBPM0psZEhWeWJpaHBQVDFqS1gxbWRXNWpkR2x2YmlCZmNuTmhjMmxuYmw5MlpYSnBabmxJWlhoVGFXZHVZWFIxY21WR2IzSk5aWE56WVdkbEtHTXNZaWw3ZG1GeUlHUTljR0Z5YzJWQ2FXZEpiblFvWXl3eE5pazdkbUZ5SUdFOVgzSnpZWE5wWjI1ZmRtVnlhV1o1VTJsbmJtRjBkWEpsVjJsMGFFRnlaM01vWWl4a0xIUm9hWE11Ymk1MGIxTjBjbWx1WnlneE5pa3NkR2hwY3k1bExuUnZVM1J5YVc1bktERTJLU2s3Y21WMGRYSnVJR0Y5Wm5WdVkzUnBiMjRnWDNKellYTnBaMjVmZG1WeWFXWjVVM1J5YVc1bktHWXNhaWw3YWoxcUxuSmxjR3hoWTJVb1gxSkZYMGhGV0VSRlEwOU9URmtzWENKY0lpazdhajFxTG5KbGNHeGhZMlVvTDFzZ1hGeHVYU3N2Wnl4Y0lsd2lLVHQyWVhJZ1lqMXdZWEp6WlVKcFowbHVkQ2hxTERFMktUdHBaaWhpTG1KcGRFeGxibWQwYUNncFBuUm9hWE11Ymk1aWFYUk1aVzVuZEdnb0tTbDdjbVYwZFhKdUlEQjlkbUZ5SUdrOWRHaHBjeTVrYjFCMVlteHBZeWhpS1R0MllYSWdaVDFwTG5SdlUzUnlhVzVuS0RFMktTNXlaWEJzWVdObEtDOWVNV1lyTURBdkxGd2lYQ0lwTzNaaGNpQm5QVjl5YzJGemFXZHVYMmRsZEVGc1owNWhiV1ZCYm1SSVlYTm9Sbkp2YlVobGVFUnBjMmRsYzNSSmJtWnZLR1VwTzJsbUtHY3ViR1Z1WjNSb1BUMHdLWHR5WlhSMWNtNGdabUZzYzJWOWRtRnlJR1E5WjFzd1hUdDJZWElnYUQxbld6RmRPM1poY2lCaFBXWjFibU4wYVc5dUtHc3BlM0psZEhWeWJpQkxTbFZTTG1OeWVYQjBieTVWZEdsc0xtaGhjMmhUZEhKcGJtY29heXhrS1gwN2RtRnlJR005WVNobUtUdHlaWFIxY200b2FEMDlZeWw5Wm5WdVkzUnBiMjRnWDNKellYTnBaMjVmZG1WeWFXWjVWMmwwYUUxbGMzTmhaMlZJWVhOb0tHVXNZU2w3WVQxaExuSmxjR3hoWTJVb1gxSkZYMGhGV0VSRlEwOU9URmtzWENKY0lpazdZVDFoTG5KbGNHeGhZMlVvTDFzZ1hGeHVYU3N2Wnl4Y0lsd2lLVHQyWVhJZ1lqMXdZWEp6WlVKcFowbHVkQ2hoTERFMktUdHBaaWhpTG1KcGRFeGxibWQwYUNncFBuUm9hWE11Ymk1aWFYUk1aVzVuZEdnb0tTbDdjbVYwZFhKdUlEQjlkbUZ5SUdnOWRHaHBjeTVrYjFCMVlteHBZeWhpS1R0MllYSWdaejFvTG5SdlUzUnlhVzVuS0RFMktTNXlaWEJzWVdObEtDOWVNV1lyTURBdkxGd2lYQ0lwTzNaaGNpQmpQVjl5YzJGemFXZHVYMmRsZEVGc1owNWhiV1ZCYm1SSVlYTm9Sbkp2YlVobGVFUnBjMmRsYzNSSmJtWnZLR2NwTzJsbUtHTXViR1Z1WjNSb1BUMHdLWHR5WlhSMWNtNGdabUZzYzJWOWRtRnlJR1E5WTFzd1hUdDJZWElnWmoxald6RmRPM0psZEhWeWJpaG1QVDFsS1gxbWRXNWpkR2x2YmlCZmNuTmhjMmxuYmw5MlpYSnBabmxUZEhKcGJtZFFVMU1vWXl4aUxHRXNaaWw3ZG1GeUlHVTlablZ1WTNScGIyNG9aeWw3Y21WMGRYSnVJRXRLVlZJdVkzSjVjSFJ2TGxWMGFXd3VhR0Z6YUVobGVDaG5MR0VwZlR0MllYSWdaRDFsS0hKemRISjBiMmhsZUNoaktTazdhV1lvWmowOVBYVnVaR1ZtYVc1bFpDbDdaajB0TVgxeVpYUjFjbTRnZEdocGN5NTJaWEpwWm5sWGFYUm9UV1Z6YzJGblpVaGhjMmhRVTFNb1pDeGlMR0VzWmlsOVpuVnVZM1JwYjI0Z1gzSnpZWE5wWjI1ZmRtVnlhV1o1VjJsMGFFMWxjM05oWjJWSVlYTm9VRk5US0dZc2N5eHNMR01wZTNaaGNpQnJQVzVsZHlCQ2FXZEpiblJsWjJWeUtITXNNVFlwTzJsbUtHc3VZbWwwVEdWdVozUm9LQ2srZEdocGN5NXVMbUpwZEV4bGJtZDBhQ2dwS1h0eVpYUjFjbTRnWm1Gc2MyVjlkbUZ5SUhJOVpuVnVZM1JwYjI0b2FTbDdjbVYwZFhKdUlFdEtWVkl1WTNKNWNIUnZMbFYwYVd3dWFHRnphRWhsZUNocExHd3BmVHQyWVhJZ2FqMW9aWGgwYjNKemRISW9aaWs3ZG1GeUlHZzlhaTVzWlc1bmRHZzdkbUZ5SUdjOWRHaHBjeTV1TG1KcGRFeGxibWQwYUNncExURTdkbUZ5SUcwOVRXRjBhQzVqWldsc0tHY3ZPQ2s3ZG1GeUlIRTdhV1lvWXowOVBTMHhmSHhqUFQwOWRXNWtaV1pwYm1Wa0tYdGpQV2g5Wld4elpYdHBaaWhqUFQwOUxUSXBlMk05YlMxb0xUSjlaV3h6Wlh0cFppaGpQQzB5S1h0MGFISnZkMXdpYVc1MllXeHBaQ0J6WVd4MElHeGxibWQwYUZ3aWZYMTlhV1lvYlR3b2FDdGpLeklwS1h0MGFISnZkMXdpWkdGMFlTQjBiMjhnYkc5dVoxd2lmWFpoY2lCaFBYUm9hWE11Wkc5UWRXSnNhV01vYXlrdWRHOUNlWFJsUVhKeVlYa29LVHRtYjNJb2NUMHdPM0U4WVM1c1pXNW5kR2c3Y1NzOU1TbDdZVnR4WFNZOU1qVTFmWGRvYVd4bEtHRXViR1Z1WjNSb1BHMHBlMkV1ZFc1emFHbG1kQ2d3S1gxcFppaGhXMjB0TVYwaFBUMHhPRGdwZTNSb2NtOTNYQ0psYm1OdlpHVmtJRzFsYzNOaFoyVWdaRzlsY3lCdWIzUWdaVzVrSUdsdUlEQjRZbU5jSW4xaFBWTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVXVZWEJ3Ykhrb1UzUnlhVzVuTEdFcE8zWmhjaUJrUFdFdWMzVmljM1J5S0RBc2JTMW9MVEVwTzNaaGNpQmxQV0V1YzNWaWMzUnlLR1F1YkdWdVozUm9MR2dwTzNaaGNpQndQU2cyTlRJNE1ENCtLRGdxYlMxbktTa21NalUxTzJsbUtDaGtMbU5vWVhKRGIyUmxRWFFvTUNrbWNDa2hQVDB3S1h0MGFISnZkMXdpWW1sMGN5QmlaWGx2Ym1RZ2EyVjVjMmw2WlNCdWIzUWdlbVZ5YjF3aWZYWmhjaUJ1UFhCemMxOXRaMll4WDNOMGNpaGxMR1F1YkdWdVozUm9MSElwTzNaaGNpQnZQVnRkTzJadmNpaHhQVEE3Y1R4a0xteGxibWQwYUR0eEt6MHhLWHR2VzNGZFBXUXVZMmhoY2tOdlpHVkJkQ2h4S1Y1dUxtTm9ZWEpEYjJSbFFYUW9jU2w5YjFzd1hTWTlmbkE3ZG1GeUlHSTliUzFvTFdNdE1qdG1iM0lvY1Qwd08zRThZanR4S3oweEtYdHBaaWh2VzNGZElUMDlNQ2w3ZEdoeWIzZGNJbXhsWm5SdGIzTjBJRzlqZEdWMGN5QnViM1FnZW1WeWIxd2lmWDFwWmlodlcySmRJVDA5TVNsN2RHaHliM2RjSWpCNE1ERWdiV0Z5YTJWeUlHNXZkQ0JtYjNWdVpGd2lmWEpsZEhWeWJpQmxQVDA5YUdWNGRHOXljM1J5S0hJb2NuTjBjblJ2YUdWNEtGd2lYRng0TURCY1hIZ3dNRnhjZURBd1hGeDRNREJjWEhnd01GeGNlREF3WEZ4NE1EQmNYSGd3TUZ3aUsyb3JVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaUzVoY0hCc2VTaFRkSEpwYm1jc2J5NXpiR2xqWlNndFl5a3BLU2twZlZKVFFVdGxlUzV3Y205MGIzUjVjR1V1YzJsbmJsZHBkR2hOWlhOellXZGxTR0Z6YUQxZmNuTmhjMmxuYmw5emFXZHVWMmwwYUUxbGMzTmhaMlZJWVhOb08xSlRRVXRsZVM1d2NtOTBiM1I1Y0dVdWMybG5ibE4wY21sdVp6MWZjbk5oYzJsbmJsOXphV2R1VTNSeWFXNW5PMUpUUVV0bGVTNXdjbTkwYjNSNWNHVXVjMmxuYmxOMGNtbHVaMWRwZEdoVFNFRXhQVjl5YzJGemFXZHVYM05wWjI1VGRISnBibWRYYVhSb1UwaEJNVHRTVTBGTFpYa3VjSEp2ZEc5MGVYQmxMbk5wWjI1VGRISnBibWRYYVhSb1UwaEJNalUyUFY5eWMyRnphV2R1WDNOcFoyNVRkSEpwYm1kWGFYUm9VMGhCTWpVMk8xSlRRVXRsZVM1d2NtOTBiM1I1Y0dVdWMybG5iajFmY25OaGMybG5ibDl6YVdkdVUzUnlhVzVuTzFKVFFVdGxlUzV3Y205MGIzUjVjR1V1YzJsbmJsZHBkR2hUU0VFeFBWOXljMkZ6YVdkdVgzTnBaMjVUZEhKcGJtZFhhWFJvVTBoQk1UdFNVMEZMWlhrdWNISnZkRzkwZVhCbExuTnBaMjVYYVhSb1UwaEJNalUyUFY5eWMyRnphV2R1WDNOcFoyNVRkSEpwYm1kWGFYUm9VMGhCTWpVMk8xSlRRVXRsZVM1d2NtOTBiM1I1Y0dVdWMybG5ibGRwZEdoTlpYTnpZV2RsU0dGemFGQlRVejFmY25OaGMybG5ibDl6YVdkdVYybDBhRTFsYzNOaFoyVklZWE5vVUZOVE8xSlRRVXRsZVM1d2NtOTBiM1I1Y0dVdWMybG5ibE4wY21sdVoxQlRVejFmY25OaGMybG5ibDl6YVdkdVUzUnlhVzVuVUZOVE8xSlRRVXRsZVM1d2NtOTBiM1I1Y0dVdWMybG5ibEJUVXoxZmNuTmhjMmxuYmw5emFXZHVVM1J5YVc1blVGTlRPMUpUUVV0bGVTNVRRVXhVWDB4RlRsOUlURVZPUFMweE8xSlRRVXRsZVM1VFFVeFVYMHhGVGw5TlFWZzlMVEk3VWxOQlMyVjVMbkJ5YjNSdmRIbHdaUzUyWlhKcFpubFhhWFJvVFdWemMyRm5aVWhoYzJnOVgzSnpZWE5wWjI1ZmRtVnlhV1o1VjJsMGFFMWxjM05oWjJWSVlYTm9PMUpUUVV0bGVTNXdjbTkwYjNSNWNHVXVkbVZ5YVdaNVUzUnlhVzVuUFY5eWMyRnphV2R1WDNabGNtbG1lVk4wY21sdVp6dFNVMEZMWlhrdWNISnZkRzkwZVhCbExuWmxjbWxtZVVobGVGTnBaMjVoZEhWeVpVWnZjazFsYzNOaFoyVTlYM0p6WVhOcFoyNWZkbVZ5YVdaNVNHVjRVMmxuYm1GMGRYSmxSbTl5VFdWemMyRm5aVHRTVTBGTFpYa3VjSEp2ZEc5MGVYQmxMblpsY21sbWVUMWZjbk5oYzJsbmJsOTJaWEpwWm5sVGRISnBibWM3VWxOQlMyVjVMbkJ5YjNSdmRIbHdaUzUyWlhKcFpubElaWGhUYVdkdVlYUjFjbVZHYjNKQ2VYUmxRWEp5WVhsTlpYTnpZV2RsUFY5eWMyRnphV2R1WDNabGNtbG1lVWhsZUZOcFoyNWhkSFZ5WlVadmNrMWxjM05oWjJVN1VsTkJTMlY1TG5CeWIzUnZkSGx3WlM1MlpYSnBabmxYYVhSb1RXVnpjMkZuWlVoaGMyaFFVMU05WDNKellYTnBaMjVmZG1WeWFXWjVWMmwwYUUxbGMzTmhaMlZJWVhOb1VGTlRPMUpUUVV0bGVTNXdjbTkwYjNSNWNHVXVkbVZ5YVdaNVUzUnlhVzVuVUZOVFBWOXljMkZ6YVdkdVgzWmxjbWxtZVZOMGNtbHVaMUJUVXp0U1UwRkxaWGt1Y0hKdmRHOTBlWEJsTG5abGNtbG1lVkJUVXoxZmNuTmhjMmxuYmw5MlpYSnBabmxUZEhKcGJtZFFVMU03VWxOQlMyVjVMbE5CVEZSZlRFVk9YMUpGUTA5V1JWSTlMVEk3WEc0dktpRWdlRFV3T1MweExqRXVPUzVxY3lBb1l5a2dNakF4TWkweU1ERTJJRXRsYm1wcElGVnlkWE5vYVcxaElId2dhMnAxY2k1bmFYUm9kV0l1WTI5dEwycHpjbk5oYzJsbmJpOXNhV05sYm5ObFhHNGdLaTljYm1aMWJtTjBhVzl1SUZnMU1Ea29LWHQwYUdsekxuTjFZbXBsWTNSUWRXSnNhV05MWlhsU1UwRTliblZzYkR0MGFHbHpMbk4xWW1wbFkzUlFkV0pzYVdOTFpYbFNVMEZmYUU0OWJuVnNiRHQwYUdsekxuTjFZbXBsWTNSUWRXSnNhV05MWlhsU1UwRmZhRVU5Ym5Wc2JEdDBhR2x6TG1obGVEMXVkV3hzTzNSb2FYTXVaMlYwVTJWeWFXRnNUblZ0WW1WeVNHVjRQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRUZUVGpGSVJWZ3VaMlYwUkdWalpXNWtZVzUwU0dWNFZrSjVUblJvVEdsemRDaDBhR2x6TG1obGVDd3dMRnN3TERGZEtYMDdkR2hwY3k1blpYUlRhV2R1WVhSMWNtVkJiR2R2Y21sMGFHMUdhV1ZzWkQxbWRXNWpkR2x2YmlncGUzWmhjaUJpUFVGVFRqRklSVmd1WjJWMFJHVmpaVzVrWVc1MFNHVjRWa0o1VG5Sb1RHbHpkQ2gwYUdsekxtaGxlQ3d3TEZzd0xESXNNRjBwTzNaaGNpQmhQVXRLVlZJdVlYTnVNUzVCVTA0eFZYUnBiQzV2YVdSSVpYaFViMGx1ZENoaUtUdDJZWElnWXoxTFNsVlNMbUZ6YmpFdWVEVXdPUzVQU1VRdWIybGtNbTVoYldVb1lTazdjbVYwZFhKdUlHTjlPM1JvYVhNdVoyVjBTWE56ZFdWeVNHVjRQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRUZUVGpGSVJWZ3VaMlYwUkdWalpXNWtZVzUwU0dWNFZFeFdRbmxPZEdoTWFYTjBLSFJvYVhNdWFHVjRMREFzV3pBc00xMHBmVHQwYUdsekxtZGxkRWx6YzNWbGNsTjBjbWx1WnoxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCWU5UQTVMbWhsZURKa2JpaEJVMDR4U0VWWUxtZGxkRVJsWTJWdVpHRnVkRWhsZUZSTVZrSjVUblJvVEdsemRDaDBhR2x6TG1obGVDd3dMRnN3TEROZEtTbDlPM1JvYVhNdVoyVjBVM1ZpYW1WamRFaGxlRDFtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJCVTA0eFNFVllMbWRsZEVSbFkyVnVaR0Z1ZEVobGVGUk1Wa0o1VG5Sb1RHbHpkQ2gwYUdsekxtaGxlQ3d3TEZzd0xEVmRLWDA3ZEdocGN5NW5aWFJUZFdKcVpXTjBVM1J5YVc1blBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlGZzFNRGt1YUdWNE1tUnVLRUZUVGpGSVJWZ3VaMlYwUkdWalpXNWtZVzUwU0dWNFZFeFdRbmxPZEdoTWFYTjBLSFJvYVhNdWFHVjRMREFzV3pBc05WMHBLWDA3ZEdocGN5NW5aWFJPYjNSQ1pXWnZjbVU5Wm5WdVkzUnBiMjRvS1h0MllYSWdZVDFCVTA0eFNFVllMbWRsZEVSbFkyVnVaR0Z1ZEVobGVGWkNlVTUwYUV4cGMzUW9kR2hwY3k1b1pYZ3NNQ3hiTUN3MExEQmRLVHRoUFdFdWNtVndiR0ZqWlNndktDNHVLUzluTEZ3aUpTUXhYQ0lwTzJFOVpHVmpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtHRXBPM0psZEhWeWJpQmhmVHQwYUdsekxtZGxkRTV2ZEVGbWRHVnlQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHRTlRVk5PTVVoRldDNW5aWFJFWldObGJtUmhiblJJWlhoV1FubE9kR2hNYVhOMEtIUm9hWE11YUdWNExEQXNXekFzTkN3eFhTazdZVDFoTG5KbGNHeGhZMlVvTHlndUxpa3ZaeXhjSWlVa01Wd2lLVHRoUFdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENoaEtUdHlaWFIxY200Z1lYMDdkR2hwY3k1eVpXRmtRMlZ5ZEZCRlRUMW1kVzVqZEdsdmJpaGpLWHQyWVhJZ1pUMVlOVEE1TG5CbGJWUnZTR1Y0S0dNcE8zWmhjaUJpUFZnMU1Ea3VaMlYwVUhWaWJHbGpTMlY1U0dWNFFYSnlZWGxHY205dFEyVnlkRWhsZUNobEtUdDJZWElnWkQxdVpYY2dVbE5CUzJWNUtDazdaQzV6WlhSUWRXSnNhV01vWWxzd1hTeGlXekZkS1R0MGFHbHpMbk4xWW1wbFkzUlFkV0pzYVdOTFpYbFNVMEU5WkR0MGFHbHpMbk4xWW1wbFkzUlFkV0pzYVdOTFpYbFNVMEZmYUU0OVlsc3dYVHQwYUdsekxuTjFZbXBsWTNSUWRXSnNhV05MWlhsU1UwRmZhRVU5WWxzeFhUdDBhR2x6TG1obGVEMWxmVHQwYUdsekxuSmxZV1JEWlhKMFVFVk5WMmwwYUc5MWRGSlRRVWx1YVhROVpuVnVZM1JwYjI0b1l5bDdkbUZ5SUdROVdEVXdPUzV3WlcxVWIwaGxlQ2hqS1R0MllYSWdZajFZTlRBNUxtZGxkRkIxWW14cFkwdGxlVWhsZUVGeWNtRjVSbkp2YlVObGNuUklaWGdvWkNrN2RHaHBjeTV6ZFdKcVpXTjBVSFZpYkdsalMyVjVVbE5CTG5ObGRGQjFZbXhwWXloaVd6QmRMR0piTVYwcE8zUm9hWE11YzNWaWFtVmpkRkIxWW14cFkwdGxlVkpUUVY5b1RqMWlXekJkTzNSb2FYTXVjM1ZpYW1WamRGQjFZbXhwWTB0bGVWSlRRVjlvUlQxaVd6RmRPM1JvYVhNdWFHVjRQV1I5TzNSb2FYTXVaMlYwU1c1bWJ6MW1kVzVqZEdsdmJpZ3BlM1poY2lCd1BWd2lRbUZ6YVdNZ1JtbGxiR1J6WEZ4dVhDSTdjQ3M5WENJZ0lITmxjbWxoYkNCdWRXMWlaWEk2SUZ3aUszUm9hWE11WjJWMFUyVnlhV0ZzVG5WdFltVnlTR1Y0S0NrclhDSmNYRzVjSWp0d0t6MWNJaUFnYzJsbmJtRjBkWEpsSUdGc1oyOXlhWFJvYlRvZ1hDSXJkR2hwY3k1blpYUlRhV2R1WVhSMWNtVkJiR2R2Y21sMGFHMUdhV1ZzWkNncEsxd2lYRnh1WENJN2NDczlYQ0lnSUdsemMzVmxjam9nWENJcmRHaHBjeTVuWlhSSmMzTjFaWEpUZEhKcGJtY29LU3RjSWx4Y2Jsd2lPM0FyUFZ3aUlDQnViM1JDWldadmNtVTZJRndpSzNSb2FYTXVaMlYwVG05MFFtVm1iM0psS0NrclhDSmNYRzVjSWp0d0t6MWNJaUFnYm05MFFXWjBaWEk2SUZ3aUszUm9hWE11WjJWMFRtOTBRV1owWlhJb0tTdGNJbHhjYmx3aU8zQXJQVndpSUNCemRXSnFaV04wT2lCY0lpdDBhR2x6TG1kbGRGTjFZbXBsWTNSVGRISnBibWNvS1N0Y0lseGNibHdpTzNBclBWd2lJQ0J6ZFdKcVpXTjBJSEIxWW14cFl5QnJaWGtnYVc1bWJ6b2dYRnh1WENJN2RtRnlJR285V0RVd09TNW5aWFJUZFdKcVpXTjBVSFZpYkdsalMyVjVTVzVtYjFCdmMwWnliMjFEWlhKMFNHVjRLSFJvYVhNdWFHVjRLVHQyWVhJZ1pEMUJVMDR4U0VWWUxtZGxkRWhsZUU5bVZFeFdYMEYwVDJKcUtIUm9hWE11YUdWNExHb3BPM1poY2lCdVBVdEZXVlZVU1V3dVoyVjBTMlY1S0dRc2JuVnNiQ3hjSW5CclkzTTRjSFZpWENJcE8ybG1LRzRnYVc1emRHRnVZMlZ2WmlCU1UwRkxaWGtwZTNBclBWd2lJQ0FnSUd0bGVTQmhiR2R2Y21sMGFHMDZJRkpUUVZ4Y2Jsd2lPM0FyUFZ3aUlDQWdJRzQ5WENJcmJpNXVMblJ2VTNSeWFXNW5LREUyS1M1emRXSnpkSElvTUN3eE5pa3JYQ0l1TGk1Y1hHNWNJanR3S3oxY0lpQWdJQ0JsUFZ3aUsyNHVaUzUwYjFOMGNtbHVaeWd4TmlrclhDSmNYRzVjSW4xd0t6MWNJbGcxTURsMk15QkZlSFJsYm5OcGIyNXpPbHhjYmx3aU8zWmhjaUJ0UFZnMU1Ea3VaMlYwVmpORmVIUkpibVp2VEdsemRFOW1RMlZ5ZEVobGVDaDBhR2x6TG1obGVDazdabTl5S0haaGNpQmxQVEE3WlR4dExteGxibWQwYUR0bEt5c3BlM1poY2lCaVBXMWJaVjA3ZG1GeUlHODlTMHBWVWk1aGMyNHhMbmcxTURrdVQwbEVMbTlwWkRKdVlXMWxLR0l1YjJsa0tUdHBaaWh2UFQwOVhDSmNJaWw3YnoxaUxtOXBaSDEyWVhJZ2F6MWNJbHdpTzJsbUtHSXVZM0pwZEdsallXdzlQVDEwY25WbEtYdHJQVndpUTFKSlZFbERRVXhjSW4xd0t6MWNJaUFnWENJcmJ5dGNJaUJjSWl0cksxd2lPbHhjYmx3aU8ybG1LRzg5UFQxY0ltSmhjMmxqUTI5dWMzUnlZV2x1ZEhOY0lpbDdkbUZ5SUdjOVdEVXdPUzVuWlhSRmVIUkNZWE5wWTBOdmJuTjBjbUZwYm5SektIUm9hWE11YUdWNEtUdHBaaWhuTG1OQlBUMDlkVzVrWldacGJtVmtLWHR3S3oxY0lpQWdJQ0I3ZlZ4Y2Jsd2lmV1ZzYzJWN2NDczlYQ0lnSUNBZ1kwRTlkSEoxWlZ3aU8ybG1LR2N1Y0dGMGFFeGxiaUU5UFhWdVpHVm1hVzVsWkNsN2NDczlYQ0lzSUhCaGRHaE1aVzQ5WENJclp5NXdZWFJvVEdWdWZYQXJQVndpWEZ4dVhDSjlmV1ZzYzJWN2FXWW9iejA5UFZ3aWEyVjVWWE5oWjJWY0lpbDdjQ3M5WENJZ0lDQWdYQ0lyV0RVd09TNW5aWFJGZUhSTFpYbFZjMkZuWlZOMGNtbHVaeWgwYUdsekxtaGxlQ2tyWENKY1hHNWNJbjFsYkhObGUybG1LRzg5UFQxY0luTjFZbXBsWTNSTFpYbEpaR1Z1ZEdsbWFXVnlYQ0lwZTNBclBWd2lJQ0FnSUZ3aUsxZzFNRGt1WjJWMFJYaDBVM1ZpYW1WamRFdGxlVWxrWlc1MGFXWnBaWElvZEdocGN5NW9aWGdwSzF3aVhGeHVYQ0o5Wld4elpYdHBaaWh2UFQwOVhDSmhkWFJvYjNKcGRIbExaWGxKWkdWdWRHbG1hV1Z5WENJcGUzWmhjaUJoUFZnMU1Ea3VaMlYwUlhoMFFYVjBhRzl5YVhSNVMyVjVTV1JsYm5ScFptbGxjaWgwYUdsekxtaGxlQ2s3YVdZb1lTNXJhV1FoUFQxMWJtUmxabWx1WldRcGUzQXJQVndpSUNBZ0lHdHBaRDFjSWl0aExtdHBaQ3RjSWx4Y2Jsd2lmWDFsYkhObGUybG1LRzg5UFQxY0ltVjRkRXRsZVZWellXZGxYQ0lwZTNaaGNpQm9QVmcxTURrdVoyVjBSWGgwUlhoMFMyVjVWWE5oWjJWT1lXMWxLSFJvYVhNdWFHVjRLVHR3S3oxY0lpQWdJQ0JjSWl0b0xtcHZhVzRvWENJc0lGd2lLU3RjSWx4Y2Jsd2lmV1ZzYzJWN2FXWW9iejA5UFZ3aWMzVmlhbVZqZEVGc2RFNWhiV1ZjSWlsN2RtRnlJR1k5V0RVd09TNW5aWFJGZUhSVGRXSnFaV04wUVd4MFRtRnRaU2gwYUdsekxtaGxlQ2s3Y0NzOVhDSWdJQ0FnWENJclppNXFiMmx1S0Z3aUxDQmNJaWtyWENKY1hHNWNJbjFsYkhObGUybG1LRzg5UFQxY0ltTlNURVJwYzNSeWFXSjFkR2x2YmxCdmFXNTBjMXdpS1h0MllYSWdiRDFZTlRBNUxtZGxkRVY0ZEVOU1RFUnBjM1J5YVdKMWRHbHZibEJ2YVc1MGMxVlNTU2gwYUdsekxtaGxlQ2s3Y0NzOVhDSWdJQ0FnWENJcmJDdGNJbHhjYmx3aWZXVnNjMlY3YVdZb2J6MDlQVndpWVhWMGFHOXlhWFI1U1c1bWIwRmpZMlZ6YzF3aUtYdDJZWElnWXoxWU5UQTVMbWRsZEVWNGRFRkpRVWx1Wm04b2RHaHBjeTVvWlhncE8ybG1LR011YjJOemNDRTlQWFZ1WkdWbWFXNWxaQ2w3Y0NzOVhDSWdJQ0FnYjJOemNEb2dYQ0lyWXk1dlkzTndMbXB2YVc0b1hDSXNYQ0lwSzF3aVhGeHVYQ0o5YVdZb1l5NWpZV2x6YzNWbGNpRTlQWFZ1WkdWbWFXNWxaQ2w3Y0NzOVhDSWdJQ0FnWTJGcGMzTjFaWEk2SUZ3aUsyTXVZMkZwYzNOMVpYSXVhbTlwYmloY0lpeGNJaWtyWENKY1hHNWNJbjE5ZlgxOWZYMTlmWDF3S3oxY0luTnBaMjVoZEhWeVpTQmhiR2R2Y21sMGFHMDZJRndpSzFnMU1Ea3VaMlYwVTJsbmJtRjBkWEpsUVd4bmIzSnBkR2h0VG1GdFpTaDBhR2x6TG1obGVDa3JYQ0pjWEc1Y0lqdHdLejFjSW5OcFoyNWhkSFZ5WlRvZ1hDSXJXRFV3T1M1blpYUlRhV2R1WVhSMWNtVldZV3gxWlVobGVDaDBhR2x6TG1obGVDa3VjM1ZpYzNSeUtEQXNNVFlwSzF3aUxpNHVYRnh1WENJN2NtVjBkWEp1SUhCOWZWZzFNRGt1Y0dWdFZHOUNZWE5sTmpROVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJOVlUdGlQV0l1Y21Wd2JHRmpaU2hjSWkwdExTMHRRa1ZIU1U0Z1EwVlNWRWxHU1VOQlZFVXRMUzB0TFZ3aUxGd2lYQ0lwTzJJOVlpNXlaWEJzWVdObEtGd2lMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExWd2lMRndpWENJcE8ySTlZaTV5WlhCc1lXTmxLQzliSUZ4Y2JsMHJMMmNzWENKY0lpazdjbVYwZFhKdUlHSjlPMWcxTURrdWNHVnRWRzlJWlhnOVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdNOVdEVXdPUzV3WlcxVWIwSmhjMlUyTkNoaEtUdDJZWElnWWoxaU5qUjBiMmhsZUNoaktUdHlaWFIxY200Z1luMDdXRFV3T1M1blpYUlRkV0pxWldOMFVIVmliR2xqUzJWNVVHOXpSbkp2YlVObGNuUklaWGc5Wm5WdVkzUnBiMjRvWmlsN2RtRnlJR1U5V0RVd09TNW5aWFJUZFdKcVpXTjBVSFZpYkdsalMyVjVTVzVtYjFCdmMwWnliMjFEWlhKMFNHVjRLR1lwTzJsbUtHVTlQUzB4S1h0eVpYUjFjbTRnTFRGOWRtRnlJR0k5UVZOT01VaEZXQzVuWlhSUWIzTkJjbkpoZVU5bVEyaHBiR1J5Wlc1ZlFYUlBZbW9vWml4bEtUdHBaaWhpTG14bGJtZDBhQ0U5TWlsN2NtVjBkWEp1SUMweGZYWmhjaUJrUFdKYk1WMDdhV1lvWmk1emRXSnpkSEpwYm1jb1pDeGtLeklwSVQxY0lqQXpYQ0lwZTNKbGRIVnliaUF0TVgxMllYSWdZejFCVTA0eFNFVllMbWRsZEZOMFlYSjBVRzl6VDJaV1gwRjBUMkpxS0dZc1pDazdhV1lvWmk1emRXSnpkSEpwYm1jb1l5eGpLeklwSVQxY0lqQXdYQ0lwZTNKbGRIVnliaUF0TVgxeVpYUjFjbTRnWXlzeWZUdFlOVEE1TG1kbGRGTjFZbXBsWTNSUWRXSnNhV05MWlhsSmJtWnZVRzl6Um5KdmJVTmxjblJJWlhnOVpuVnVZM1JwYjI0b1pDbDdkbUZ5SUdNOVFWTk9NVWhGV0M1blpYUlRkR0Z5ZEZCdmMwOW1WbDlCZEU5aWFpaGtMREFwTzNaaGNpQmlQVUZUVGpGSVJWZ3VaMlYwVUc5elFYSnlZWGxQWmtOb2FXeGtjbVZ1WDBGMFQySnFLR1FzWXlrN2FXWW9ZaTVzWlc1bmRHZzhNU2w3Y21WMGRYSnVJQzB4ZldsbUtHUXVjM1ZpYzNSeWFXNW5LR0piTUYwc1lsc3dYU3N4TUNrOVBWd2lZVEF3TXpBeU1ERXdNbHdpS1h0cFppaGlMbXhsYm1kMGFEdzJLWHR5WlhSMWNtNGdMVEY5Y21WMGRYSnVJR0piTmwxOVpXeHpaWHRwWmloaUxteGxibWQwYUR3MUtYdHlaWFIxY200Z0xURjljbVYwZFhKdUlHSmJOVjE5ZlR0WU5UQTVMbWRsZEZCMVlteHBZMHRsZVVobGVFRnljbUY1Um5KdmJVTmxjblJJWlhnOVpuVnVZM1JwYjI0b1ppbDdkbUZ5SUdVOVdEVXdPUzVuWlhSVGRXSnFaV04wVUhWaWJHbGpTMlY1VUc5elJuSnZiVU5sY25SSVpYZ29aaWs3ZG1GeUlHSTlRVk5PTVVoRldDNW5aWFJRYjNOQmNuSmhlVTltUTJocGJHUnlaVzVmUVhSUFltb29aaXhsS1R0cFppaGlMbXhsYm1kMGFDRTlNaWw3Y21WMGRYSnVXMTE5ZG1GeUlHUTlRVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb1ppeGlXekJkS1R0MllYSWdZejFCVTA0eFNFVllMbWRsZEVobGVFOW1WbDlCZEU5aWFpaG1MR0piTVYwcE8ybG1LR1FoUFc1MWJHd21KbU1oUFc1MWJHd3BlM0psZEhWeWJsdGtMR05kZldWc2MyVjdjbVYwZFhKdVcxMTlmVHRZTlRBNUxtZGxkRWhsZUZSaWMwTmxjblJwWm1sallYUmxSbkp2YlVObGNuUTlablZ1WTNScGIyNG9ZaWw3ZG1GeUlHRTlRVk5PTVVoRldDNW5aWFJUZEdGeWRGQnZjMDltVmw5QmRFOWlhaWhpTERBcE8zSmxkSFZ5YmlCaGZUdFlOVEE1TG1kbGRGQjFZbXhwWTB0bGVVaGxlRUZ5Y21GNVJuSnZiVU5sY25SUVJVMDlablZ1WTNScGIyNG9ZeWw3ZG1GeUlHUTlXRFV3T1M1d1pXMVViMGhsZUNoaktUdDJZWElnWWoxWU5UQTVMbWRsZEZCMVlteHBZMHRsZVVobGVFRnljbUY1Um5KdmJVTmxjblJJWlhnb1pDazdjbVYwZFhKdUlHSjlPMWcxTURrdWFHVjRNbVJ1UFdaMWJtTjBhVzl1S0dVcGUzWmhjaUJtUFZ3aVhDSTdkbUZ5SUdNOVFWTk9NVWhGV0M1blpYUlFiM05CY25KaGVVOW1RMmhwYkdSeVpXNWZRWFJQWW1vb1pTd3dLVHRtYjNJb2RtRnlJR1E5TUR0a1BHTXViR1Z1WjNSb08yUXJLeWw3ZG1GeUlHSTlRVk5PTVVoRldDNW5aWFJJWlhoUFpsUk1WbDlCZEU5aWFpaGxMR05iWkYwcE8yWTlaaXRjSWk5Y0lpdFlOVEE1TG1obGVESnlaRzRvWWlsOWNtVjBkWEp1SUdaOU8xZzFNRGt1YUdWNE1uSmtiajFtZFc1amRHbHZiaWhoS1h0MllYSWdaajFCVTA0eFNFVllMbWRsZEVSbFkyVnVaR0Z1ZEVobGVGUk1Wa0o1VG5Sb1RHbHpkQ2hoTERBc1d6QXNNRjBwTzNaaGNpQmxQVUZUVGpGSVJWZ3VaMlYwUkdWalpXNWtZVzUwU0dWNFZrSjVUblJvVEdsemRDaGhMREFzV3pBc01WMHBPM1poY2lCalBWd2lYQ0k3ZEhKNWUyTTlXRFV3T1M1RVRsOUJWRlJTU0VWWVcyWmRmV05oZEdOb0tHSXBlMk05Wm4xbFBXVXVjbVZ3YkdGalpTZ3ZLQzR1S1M5bkxGd2lKU1F4WENJcE8zWmhjaUJrUFdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENobEtUdHlaWFIxY200Z1l5dGNJajFjSWl0a2ZUdFlOVEE1TGtST1gwRlVWRkpJUlZnOWUxd2lNRFl3TXpVMU1EUXdObHdpT2x3aVExd2lMRndpTURZd016VTFNRFF3WVZ3aU9sd2lUMXdpTEZ3aU1EWXdNelUxTURRd1lsd2lPbHdpVDFWY0lpeGNJakEyTURNMU5UQTBNRE5jSWpwY0lrTk9YQ0lzWENJd05qQXpOVFV3TkRBMVhDSTZYQ0pUVGx3aUxGd2lNRFl3TXpVMU1EUXdPRndpT2x3aVUxUmNJaXhjSWpBMk1ETTFOVEEwTURkY0lqcGNJa3hjSWl4Y0lqQTJNRE0xTlRBME1EbGNJanBjSW5OMGNtVmxkRUZrWkhKbGMzTmNJaXhjSWpBMk1ETTFOVEEwTUdaY0lqcGNJbUoxYzJsdVpYTnpRMkYwWldkdmNubGNJaXhjSWpBMk1ETTFOVEEwTVRGY0lqcGNJbkJ2YzNSaGJFTnZaR1ZjSWl4Y0lqQTJNR0l5WWpBMk1ERXdOREF4T0RJek56TmpNREl3TVRBeVhDSTZYQ0pxZFhKcGMyUnBZM1JwYjI1UFprbHVZMjl5Y0c5eVlYUnBiMjVUVUZ3aUxGd2lNRFl3WWpKaU1EWXdNVEEwTURFNE1qTTNNMk13TWpBeE1ETmNJanBjSW1wMWNtbHpaR2xqZEdsdmJrOW1TVzVqYjNKd2IzSmhkR2x2YmtOY0lpeDlPMWcxTURrdVoyVjBVSFZpYkdsalMyVjVSbkp2YlVObGNuUlFSVTA5Wm5WdVkzUnBiMjRvWmlsN2RtRnlJR005V0RVd09TNW5aWFJRZFdKc2FXTkxaWGxKYm1adlVISnZjRTltUTJWeWRGQkZUU2htS1R0cFppaGpMbUZzWjI5cFpEMDlYQ0l5WVRnMk5EZzRObVkzTUdRd01UQXhNREZjSWlsN2RtRnlJR2s5UzBWWlZWUkpUQzV3WVhKelpWQjFZbXhwWTFKaGQxSlRRVXRsZVVobGVDaGpMbXRsZVdobGVDazdkbUZ5SUdvOWJtVjNJRkpUUVV0bGVTZ3BPMm91YzJWMFVIVmliR2xqS0drdWJpeHBMbVVwTzNKbGRIVnliaUJxZldWc2MyVjdhV1lvWXk1aGJHZHZhV1E5UFZ3aU1tRTROalE0WTJVelpEQXlNREZjSWlsN2RtRnlJR1U5UzBwVlVpNWpjbmx3ZEc4dVQwbEVMbTlwWkdobGVESnVZVzFsVzJNdVlXeG5jR0Z5WVcxZE8zWmhjaUJxUFc1bGR5QkxTbFZTTG1OeWVYQjBieTVGUTBSVFFTaDdZM1Z5ZG1VNlpTeHBibVp2T21NdWEyVjVhR1Y0ZlNrN2FpNXpaWFJRZFdKc2FXTkxaWGxJWlhnb1l5NXJaWGxvWlhncE8zSmxkSFZ5YmlCcWZXVnNjMlY3YVdZb1l5NWhiR2R2YVdROVBWd2lNbUU0TmpRNFkyVXpPREEwTURGY0lpbDdkbUZ5SUdJOVFWTk9NVWhGV0M1blpYUldZbmxNYVhOMEtHTXVZV3huY0dGeVlXMHNNQ3hiTUYwc1hDSXdNbHdpS1R0MllYSWdZVDFCVTA0eFNFVllMbWRsZEZaaWVVeHBjM1FvWXk1aGJHZHdZWEpoYlN3d0xGc3hYU3hjSWpBeVhDSXBPM1poY2lCa1BVRlRUakZJUlZndVoyVjBWbUo1VEdsemRDaGpMbUZzWjNCaGNtRnRMREFzV3pKZExGd2lNREpjSWlrN2RtRnlJR2c5UVZOT01VaEZXQzVuWlhSSVpYaFBabFpmUVhSUFltb29ZeTVyWlhsb1pYZ3NNQ2s3YUQxb0xuTjFZbk4wY2lneUtUdDJZWElnYWoxdVpYY2dTMHBWVWk1amNubHdkRzh1UkZOQktDazdhaTV6WlhSUWRXSnNhV01vYm1WM0lFSnBaMGx1ZEdWblpYSW9ZaXd4Tmlrc2JtVjNJRUpwWjBsdWRHVm5aWElvWVN3eE5pa3NibVYzSUVKcFowbHVkR1ZuWlhJb1pDd3hOaWtzYm1WM0lFSnBaMGx1ZEdWblpYSW9hQ3d4TmlrcE8zSmxkSFZ5YmlCcWZXVnNjMlY3ZEdoeWIzZGNJblZ1YzNWd2NHOXlkR1ZrSUd0bGVWd2lmWDE5ZlR0WU5UQTVMbWRsZEZCMVlteHBZMHRsZVVsdVptOVFjbTl3VDJaRFpYSjBVRVZOUFdaMWJtTjBhVzl1S0dVcGUzWmhjaUJwUFh0OU8ya3VZV3huY0dGeVlXMDliblZzYkR0MllYSWdaajFZTlRBNUxuQmxiVlJ2U0dWNEtHVXBPM1poY2lCa1BVRlRUakZJUlZndVoyVjBVRzl6UVhKeVlYbFBaa05vYVd4a2NtVnVYMEYwVDJKcUtHWXNNQ2s3YVdZb1pDNXNaVzVuZEdnaFBUTXBlM1JvY205M1hDSnRZV3htYjNKdFpXUWdXQzQxTURrZ1kyVnlkR2xtYVdOaGRHVWdVRVZOSUNoamIyUmxPakF3TVNsY0luMXBaaWhtTG5OMVluTjBjaWhrV3pCZExESXBJVDFjSWpNd1hDSXBlM1JvY205M1hDSnRZV3htYjNKdFpXUWdXQzQxTURrZ1kyVnlkR2xtYVdOaGRHVWdVRVZOSUNoamIyUmxPakF3TWlsY0luMTJZWElnWXoxQlUwNHhTRVZZTG1kbGRGQnZjMEZ5Y21GNVQyWkRhR2xzWkhKbGJsOUJkRTlpYWlobUxHUmJNRjBwTzNaaGNpQm5QVFk3YVdZb1ppNXpkV0p6ZEhJb1kxc3dYU3d5S1NFOVBWd2lZVEJjSWlsN1p6MDFmV2xtS0dNdWJHVnVaM1JvUEdjck1TbDdkR2h5YjNkY0ltMWhiR1p2Y20xbFpDQllMalV3T1NCalpYSjBhV1pwWTJGMFpTQlFSVTBnS0dOdlpHVTZNREF6S1Z3aWZYWmhjaUJoUFVGVFRqRklSVmd1WjJWMFVHOXpRWEp5WVhsUFprTm9hV3hrY21WdVgwRjBUMkpxS0dZc1kxdG5YU2s3YVdZb1lTNXNaVzVuZEdnaFBUSXBlM1JvY205M1hDSnRZV3htYjNKdFpXUWdXQzQxTURrZ1kyVnlkR2xtYVdOaGRHVWdVRVZOSUNoamIyUmxPakF3TkNsY0luMTJZWElnYUQxQlUwNHhTRVZZTG1kbGRGQnZjMEZ5Y21GNVQyWkRhR2xzWkhKbGJsOUJkRTlpYWlobUxHRmJNRjBwTzJsbUtHZ3ViR1Z1WjNSb0lUMHlLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJRmd1TlRBNUlHTmxjblJwWm1sallYUmxJRkJGVFNBb1kyOWtaVG93TURVcFhDSjlhUzVoYkdkdmFXUTlRVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb1ppeG9XekJkS1R0cFppaG1Mbk4xWW5OMGNpaG9XekZkTERJcFBUMWNJakEyWENJcGUya3VZV3huY0dGeVlXMDlRVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb1ppeG9XekZkS1gxbGJITmxlMmxtS0dZdWMzVmljM1J5S0doYk1WMHNNaWs5UFZ3aU16QmNJaWw3YVM1aGJHZHdZWEpoYlQxQlUwNHhTRVZZTG1kbGRFaGxlRTltVkV4V1gwRjBUMkpxS0dZc2FGc3hYU2w5ZldsbUtHWXVjM1ZpYzNSeUtHRmJNVjBzTWlraFBWd2lNRE5jSWlsN2RHaHliM2RjSW0xaGJHWnZjbTFsWkNCWUxqVXdPU0JqWlhKMGFXWnBZMkYwWlNCUVJVMGdLR052WkdVNk1EQTJLVndpZlhaaGNpQmlQVUZUVGpGSVJWZ3VaMlYwU0dWNFQyWldYMEYwVDJKcUtHWXNZVnN4WFNrN2FTNXJaWGxvWlhnOVlpNXpkV0p6ZEhJb01pazdjbVYwZFhKdUlHbDlPMWcxTURrdVoyVjBVSFZpYkdsalMyVjVTVzVtYjFCdmMwOW1RMlZ5ZEVoRldEMW1kVzVqZEdsdmJpaGpLWHQyWVhJZ1lqMUJVMDR4U0VWWUxtZGxkRkJ2YzBGeWNtRjVUMlpEYUdsc1pISmxibDlCZEU5aWFpaGpMREFwTzJsbUtHSXViR1Z1WjNSb0lUMHpLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJRmd1TlRBNUlHTmxjblJwWm1sallYUmxJRkJGVFNBb1kyOWtaVG93TURFcFhDSjlhV1lvWXk1emRXSnpkSElvWWxzd1hTd3lLU0U5WENJek1Gd2lLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJRmd1TlRBNUlHTmxjblJwWm1sallYUmxJRkJGVFNBb1kyOWtaVG93TURJcFhDSjlkbUZ5SUdFOVFWTk9NVWhGV0M1blpYUlFiM05CY25KaGVVOW1RMmhwYkdSeVpXNWZRWFJQWW1vb1l5eGlXekJkS1R0cFppaGhMbXhsYm1kMGFEdzNLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJRmd1TlRBNUlHTmxjblJwWm1sallYUmxJRkJGVFNBb1kyOWtaVG93TURNcFhDSjljbVYwZFhKdUlHRmJObDE5TzFnMU1Ea3VaMlYwVmpORmVIUkpibVp2VEdsemRFOW1RMlZ5ZEVobGVEMW1kVzVqZEdsdmJpaG5LWHQyWVhJZ1lqMUJVMDR4U0VWWUxtZGxkRkJ2YzBGeWNtRjVUMlpEYUdsc1pISmxibDlCZEU5aWFpaG5MREFwTzJsbUtHSXViR1Z1WjNSb0lUMHpLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJRmd1TlRBNUlHTmxjblJwWm1sallYUmxJRkJGVFNBb1kyOWtaVG93TURFcFhDSjlhV1lvWnk1emRXSnpkSElvWWxzd1hTd3lLU0U5WENJek1Gd2lLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJRmd1TlRBNUlHTmxjblJwWm1sallYUmxJRkJGVFNBb1kyOWtaVG93TURJcFhDSjlkbUZ5SUdFOVFWTk9NVWhGV0M1blpYUlFiM05CY25KaGVVOW1RMmhwYkdSeVpXNWZRWFJQWW1vb1p5eGlXekJkS1R0cFppaGhMbXhsYm1kMGFEdzRLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJRmd1TlRBNUlHTmxjblJwWm1sallYUmxJRkJGVFNBb1kyOWtaVG93TURNcFhDSjlhV1lvWnk1emRXSnpkSElvWVZzM1hTd3lLU0U5WENKaE0xd2lLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJRmd1TlRBNUlHTmxjblJwWm1sallYUmxJRkJGVFNBb1kyOWtaVG93TURRcFhDSjlkbUZ5SUdnOVFWTk9NVWhGV0M1blpYUlFiM05CY25KaGVVOW1RMmhwYkdSeVpXNWZRWFJQWW1vb1p5eGhXemRkS1R0cFppaG9MbXhsYm1kMGFDRTlNU2w3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0JZTGpVd09TQmpaWEowYVdacFkyRjBaU0JRUlUwZ0tHTnZaR1U2TURBMUtWd2lmV2xtS0djdWMzVmljM1J5S0doYk1GMHNNaWtoUFZ3aU16QmNJaWw3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0JZTGpVd09TQmpaWEowYVdacFkyRjBaU0JRUlUwZ0tHTnZaR1U2TURBMktWd2lmWFpoY2lCbVBVRlRUakZJUlZndVoyVjBVRzl6UVhKeVlYbFBaa05vYVd4a2NtVnVYMEYwVDJKcUtHY3NhRnN3WFNrN2RtRnlJR1U5Wmk1c1pXNW5kR2c3ZG1GeUlHUTlibVYzSUVGeWNtRjVLR1VwTzJadmNpaDJZWElnWXowd08yTThaVHRqS3lzcGUyUmJZMTA5V0RVd09TNW5aWFJXTTBWNGRFbDBaVzFKYm1adlgwRjBUMkpxS0djc1psdGpYU2w5Y21WMGRYSnVJR1I5TzFnMU1Ea3VaMlYwVmpORmVIUkpkR1Z0U1c1bWIxOUJkRTlpYWoxbWRXNWpkR2x2YmlobUxHY3BlM1poY2lCbFBYdDlPMlV1Y0c5elZFeFdQV2M3ZG1GeUlHSTlRVk5PTVVoRldDNW5aWFJRYjNOQmNuSmhlVTltUTJocGJHUnlaVzVmUVhSUFltb29aaXhuS1R0cFppaGlMbXhsYm1kMGFDRTlNaVltWWk1c1pXNW5kR2doUFRNcGUzUm9jbTkzWENKdFlXeG1iM0p0WldRZ1dDNDFNRGwyTXlCRmVIUWdLR052WkdVNk1EQXhLVndpZldsbUtHWXVjM1ZpYzNSeUtHSmJNRjBzTWlraFBWd2lNRFpjSWlsN2RHaHliM2RjSW0xaGJHWnZjbTFsWkNCWUxqVXdPWFl6SUVWNGRDQW9ZMjlrWlRvd01ESXBYQ0o5ZG1GeUlHUTlRVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb1ppeGlXekJkS1R0bExtOXBaRDFCVTA0eFNFVllMbWhsZUhSdmIybGtjM1J5S0dRcE8yVXVZM0pwZEdsallXdzlabUZzYzJVN2FXWW9ZaTVzWlc1bmRHZzlQVE1wZTJVdVkzSnBkR2xqWVd3OWRISjFaWDEyWVhJZ1l6MWlXMkl1YkdWdVozUm9MVEZkTzJsbUtHWXVjM1ZpYzNSeUtHTXNNaWtoUFZ3aU1EUmNJaWw3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0JZTGpVd09YWXpJRVY0ZENBb1kyOWtaVG93TURNcFhDSjlaUzV3YjNOV1BVRlRUakZJUlZndVoyVjBVM1JoY25SUWIzTlBabFpmUVhSUFltb29aaXhqS1R0eVpYUjFjbTRnWlgwN1dEVXdPUzVuWlhSSVpYaFBabFJNVmw5V00wVjRkRlpoYkhWbFBXWjFibU4wYVc5dUtHSXNZU2w3ZG1GeUlHTTlXRFV3T1M1blpYUlFiM05QWmxSTVZsOVdNMFY0ZEZaaGJIVmxLR0lzWVNrN2FXWW9ZejA5TFRFcGUzSmxkSFZ5YmlCdWRXeHNmWEpsZEhWeWJpQkJVMDR4U0VWWUxtZGxkRWhsZUU5bVZFeFdYMEYwVDJKcUtHSXNZeWw5TzFnMU1Ea3VaMlYwU0dWNFQyWldYMVl6UlhoMFZtRnNkV1U5Wm5WdVkzUnBiMjRvWWl4aEtYdDJZWElnWXoxWU5UQTVMbWRsZEZCdmMwOW1WRXhXWDFZelJYaDBWbUZzZFdVb1lpeGhLVHRwWmloalBUMHRNU2w3Y21WMGRYSnVJRzUxYkd4OWNtVjBkWEp1SUVGVFRqRklSVmd1WjJWMFNHVjRUMlpXWDBGMFQySnFLR0lzWXlsOU8xZzFNRGt1WjJWMFVHOXpUMlpVVEZaZlZqTkZlSFJXWVd4MVpUMW1kVzVqZEdsdmJpaG1MR0lwZTNaaGNpQmtQV0k3YVdZb0lXSXViV0YwWTJnb0wxNWJNQzA1TGwwckpDOHBLWHRrUFV0S1ZWSXVZWE51TVM1NE5UQTVMazlKUkM1dVlXMWxNbTlwWkNoaUtYMXBaaWhrUFQxY0lsd2lLWHR5WlhSMWNtNGdMVEY5ZG1GeUlHTTlXRFV3T1M1blpYUldNMFY0ZEVsdVptOU1hWE4wVDJaRFpYSjBTR1Y0S0dZcE8yWnZjaWgyWVhJZ1lUMHdPMkU4WXk1c1pXNW5kR2c3WVNzcktYdDJZWElnWlQxalcyRmRPMmxtS0dVdWIybGtQVDFrS1h0eVpYUjFjbTRnWlM1d2IzTldmWDF5WlhSMWNtNGdMVEY5TzFnMU1Ea3VaMlYwUlhoMFFtRnphV05EYjI1emRISmhhVzUwY3oxbWRXNWpkR2x2Ymloa0tYdDJZWElnWVQxWU5UQTVMbWRsZEVobGVFOW1WbDlXTTBWNGRGWmhiSFZsS0dRc1hDSmlZWE5wWTBOdmJuTjBjbUZwYm5SelhDSXBPMmxtS0dFOVBUMXVkV3hzS1h0eVpYUjFjbTRnYm5Wc2JIMXBaaWhoUFQwOVhDSmNJaWw3Y21WMGRYSnVlMzE5YVdZb1lUMDlQVndpTURFd01XWm1YQ0lwZTNKbGRIVnlibnRqUVRwMGNuVmxmWDFwWmloaExuTjFZbk4wY2lnd0xEZ3BQVDA5WENJd01UQXhabVl3TWx3aUtYdDJZWElnWXoxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWhoTERZcE8zWmhjaUJpUFhCaGNuTmxTVzUwS0dNc01UWXBPM0psZEhWeWJudGpRVHAwY25WbExIQmhkR2hNWlc0NlluMTlkR2h5YjNkY0luVnVhMjV2ZDI0Z1pYSnliM0pjSW4wN1dEVXdPUzVMUlZsVlUwRkhSVjlPUVUxRlBWdGNJbVJwWjJsMFlXeFRhV2R1WVhSMWNtVmNJaXhjSW01dmJsSmxjSFZrYVdGMGFXOXVYQ0lzWENKclpYbEZibU5wY0dobGNtMWxiblJjSWl4Y0ltUmhkR0ZGYm1OcGNHaGxjbTFsYm5SY0lpeGNJbXRsZVVGbmNtVmxiV1Z1ZEZ3aUxGd2lhMlY1UTJWeWRGTnBaMjVjSWl4Y0ltTlNURk5wWjI1Y0lpeGNJbVZ1WTJsd2FHVnlUMjVzZVZ3aUxGd2laR1ZqYVhCb1pYSlBibXg1WENKZE8xZzFNRGt1WjJWMFJYaDBTMlY1VlhOaFoyVkNhVzQ5Wm5WdVkzUnBiMjRvWkNsN2RtRnlJR0k5V0RVd09TNW5aWFJJWlhoUFpsWmZWak5GZUhSV1lXeDFaU2hrTEZ3aWEyVjVWWE5oWjJWY0lpazdhV1lvWWowOVhDSmNJaWw3Y21WMGRYSnVYQ0pjSW4xcFppaGlMbXhsYm1kMGFDVXlJVDB3Zkh4aUxteGxibWQwYUR3OU1pbDdkR2h5YjNkY0ltMWhiR1p2Y20xbFpDQnJaWGtnZFhOaFoyVWdkbUZzZFdWY0luMTJZWElnWVQxd1lYSnpaVWx1ZENoaUxuTjFZbk4wY2lnd0xESXBLVHQyWVhJZ1l6MXdZWEp6WlVsdWRDaGlMbk4xWW5OMGNpZ3lLU3d4TmlrdWRHOVRkSEpwYm1jb01pazdjbVYwZFhKdUlHTXVjM1ZpYzNSeUtEQXNZeTVzWlc1bmRHZ3RZU2w5TzFnMU1Ea3VaMlYwUlhoMFMyVjVWWE5oWjJWVGRISnBibWM5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJR1E5V0RVd09TNW5aWFJGZUhSTFpYbFZjMkZuWlVKcGJpaGxLVHQyWVhJZ1lqMXVaWGNnUVhKeVlYa29LVHRtYjNJb2RtRnlJR005TUR0alBHUXViR1Z1WjNSb08yTXJLeWw3YVdZb1pDNXpkV0p6ZEhJb1l5d3hLVDA5WENJeFhDSXBlMkl1Y0hWemFDaFlOVEE1TGt0RldWVlRRVWRGWDA1QlRVVmJZMTBwZlgxeVpYUjFjbTRnWWk1cWIybHVLRndpTEZ3aUtYMDdXRFV3T1M1blpYUkZlSFJUZFdKcVpXTjBTMlY1U1dSbGJuUnBabWxsY2oxbWRXNWpkR2x2YmloaUtYdDJZWElnWVQxWU5UQTVMbWRsZEVobGVFOW1WbDlXTTBWNGRGWmhiSFZsS0dJc1hDSnpkV0pxWldOMFMyVjVTV1JsYm5ScFptbGxjbHdpS1R0eVpYUjFjbTRnWVgwN1dEVXdPUzVuWlhSRmVIUkJkWFJvYjNKcGRIbExaWGxKWkdWdWRHbG1hV1Z5UFdaMWJtTjBhVzl1S0dZcGUzWmhjaUJpUFh0OU8zWmhjaUJsUFZnMU1Ea3VaMlYwU0dWNFQyWlVURlpmVmpORmVIUldZV3gxWlNobUxGd2lZWFYwYUc5eWFYUjVTMlY1U1dSbGJuUnBabWxsY2x3aUtUdHBaaWhsUFQwOWJuVnNiQ2w3Y21WMGRYSnVJRzUxYkd4OWRtRnlJR005UVZOT01VaEZXQzVuWlhSUWIzTkJjbkpoZVU5bVEyaHBiR1J5Wlc1ZlFYUlBZbW9vWlN3d0tUdG1iM0lvZG1GeUlHUTlNRHRrUEdNdWJHVnVaM1JvTzJRckt5bDdhV1lvWlM1emRXSnpkSElvWTF0a1hTd3lLVDA5UFZ3aU9EQmNJaWw3WWk1cmFXUTlRVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb1pTeGpXMlJkS1gxOWNtVjBkWEp1SUdKOU8xZzFNRGt1WjJWMFJYaDBSWGgwUzJWNVZYTmhaMlZPWVcxbFBXWjFibU4wYVc5dUtHc3BlM1poY2lCaVBXNWxkeUJCY25KaGVTZ3BPM1poY2lCbVBWZzFNRGt1WjJWMFNHVjRUMlpVVEZaZlZqTkZlSFJXWVd4MVpTaHJMRndpWlhoMFMyVjVWWE5oWjJWY0lpazdhV1lvWmowOVBXNTFiR3dwZTNKbGRIVnliaUJ1ZFd4c2ZYWmhjaUJqUFVGVFRqRklSVmd1WjJWMFVHOXpRWEp5WVhsUFprTm9hV3hrY21WdVgwRjBUMkpxS0dZc01DazdabTl5S0haaGNpQmxQVEE3WlR4akxteGxibWQwYUR0bEt5c3BlM1poY2lCcVBVRlRUakZJUlZndVoyVjBTR1Y0VDJaV1gwRjBUMkpxS0dZc1kxdGxYU2s3ZG1GeUlHYzlTMHBWVWk1aGMyNHhMa0ZUVGpGVmRHbHNMbTlwWkVobGVGUnZTVzUwS0dvcE8zWmhjaUJrUFV0S1ZWSXVZWE51TVM1NE5UQTVMazlKUkM1dmFXUXlibUZ0WlNobktUdGlMbkIxYzJnb1pDbDljbVYwZFhKdUlHSjlPMWcxTURrdVoyVjBSWGgwVTNWaWFtVmpkRUZzZEU1aGJXVTlablZ1WTNScGIyNG9aeWw3ZG1GeUlHSTlibVYzSUVGeWNtRjVLQ2s3ZG1GeUlHWTlXRFV3T1M1blpYUklaWGhQWmxSTVZsOVdNMFY0ZEZaaGJIVmxLR2NzWENKemRXSnFaV04wUVd4MFRtRnRaVndpS1R0MllYSWdZejFCVTA0eFNFVllMbWRsZEZCdmMwRnljbUY1VDJaRGFHbHNaSEpsYmw5QmRFOWlhaWhtTERBcE8yWnZjaWgyWVhJZ1pUMHdPMlU4WXk1c1pXNW5kR2c3WlNzcktYdHBaaWhtTG5OMVluTjBjaWhqVzJWZExESXBQVDA5WENJNE1sd2lLWHQyWVhJZ1pEMW9aWGgwYjNWMFpqZ29RVk5PTVVoRldDNW5aWFJJWlhoUFpsWmZRWFJQWW1vb1ppeGpXMlZkS1NrN1lpNXdkWE5vS0dRcGZYMXlaWFIxY200Z1luMDdXRFV3T1M1blpYUkZlSFJEVWt4RWFYTjBjbWxpZFhScGIyNVFiMmx1ZEhOVlVrazlablZ1WTNScGIyNG9iaWw3ZG1GeUlIQTlibVYzSUVGeWNtRjVLQ2s3ZG1GeUlHczlXRFV3T1M1blpYUklaWGhQWmxSTVZsOVdNMFY0ZEZaaGJIVmxLRzRzWENKalVreEVhWE4wY21saWRYUnBiMjVRYjJsdWRITmNJaWs3ZG1GeUlHODlRVk5PTVVoRldDNW5aWFJRYjNOQmNuSmhlVTltUTJocGJHUnlaVzVmUVhSUFltb29heXd3S1R0bWIzSW9kbUZ5SUdjOU1EdG5QRzh1YkdWdVozUm9PMmNyS3lsN2RtRnlJR3c5UVZOT01VaEZXQzVuWlhSSVpYaFBabFJNVmw5QmRFOWlhaWhyTEc5YloxMHBPM1poY2lCaVBVRlRUakZJUlZndVoyVjBVRzl6UVhKeVlYbFBaa05vYVd4a2NtVnVYMEYwVDJKcUtHd3NNQ2s3Wm05eUtIWmhjaUJsUFRBN1pUeGlMbXhsYm1kMGFEdGxLeXNwZTJsbUtHd3VjM1ZpYzNSeUtHSmJaVjBzTWlrOVBUMWNJbUV3WENJcGUzWmhjaUJtUFVGVFRqRklSVmd1WjJWMFNHVjRUMlpXWDBGMFQySnFLR3dzWWx0bFhTazdhV1lvWmk1emRXSnpkSElvTUN3eUtUMDlQVndpWVRCY0lpbDdkbUZ5SUdNOVFWTk9NVWhGV0M1blpYUklaWGhQWmxaZlFYUlBZbW9vWml3d0tUdHBaaWhqTG5OMVluTjBjaWd3TERJcFBUMDlYQ0k0Tmx3aUtYdDJZWElnYlQxQlUwNHhTRVZZTG1kbGRFaGxlRTltVmw5QmRFOWlhaWhqTERBcE8zWmhjaUJrUFdobGVIUnZkWFJtT0NodEtUdHdMbkIxYzJnb1pDbDlmWDE5ZlhKbGRIVnliaUJ3ZlR0WU5UQTVMbWRsZEVWNGRFRkpRVWx1Wm04OVpuVnVZM1JwYjI0b1p5bDdkbUZ5SUdvOWUzMDdhaTV2WTNOd1BWdGRPMm91WTJGcGMzTjFaWEk5VzEwN2RtRnlJR2c5V0RVd09TNW5aWFJRYjNOUFpsUk1WbDlXTTBWNGRGWmhiSFZsS0djc1hDSmhkWFJvYjNKcGRIbEpibVp2UVdOalpYTnpYQ0lwTzJsbUtHZzlQUzB4S1h0eVpYUjFjbTRnYm5Wc2JIMXBaaWhuTG5OMVluTjBjaWhvTERJcElUMWNJak13WENJcGUzUm9jbTkzWENKdFlXeG1iM0p0WldRZ1FVbEJJRVY0ZEc0Z1ZtRnNkV1ZjSW4xMllYSWdaRDFCVTA0eFNFVllMbWRsZEZCdmMwRnljbUY1VDJaRGFHbHNaSEpsYmw5QmRFOWlhaWhuTEdncE8yWnZjaWgyWVhJZ1l6MHdPMk04WkM1c1pXNW5kR2c3WXlzcktYdDJZWElnWVQxa1cyTmRPM1poY2lCaVBVRlRUakZJUlZndVoyVjBVRzl6UVhKeVlYbFBaa05vYVd4a2NtVnVYMEYwVDJKcUtHY3NZU2s3YVdZb1lpNXNaVzVuZEdnaFBUSXBlM1JvY205M1hDSnRZV3htYjNKdFpXUWdRV05qWlhOelJHVnpZM0pwY0hScGIyNGdiMllnUVVsQklFVjRkRzVjSW4xMllYSWdaVDFpV3pCZE8zWmhjaUJtUFdKYk1WMDdhV1lvUVZOT01VaEZXQzVuWlhSSVpYaFBabFpmUVhSUFltb29aeXhsS1QwOVhDSXlZakEyTURFd05UQTFNRGN6TURBeFhDSXBlMmxtS0djdWMzVmljM1J5S0dZc01pazlQVndpT0RaY0lpbDdhaTV2WTNOd0xuQjFjMmdvYUdWNGRHOTFkR1k0S0VGVFRqRklSVmd1WjJWMFNHVjRUMlpXWDBGMFQySnFLR2NzWmlrcEtYMTlhV1lvUVZOT01VaEZXQzVuWlhSSVpYaFBabFpmUVhSUFltb29aeXhsS1QwOVhDSXlZakEyTURFd05UQTFNRGN6TURBeVhDSXBlMmxtS0djdWMzVmljM1J5S0dZc01pazlQVndpT0RaY0lpbDdhaTVqWVdsemMzVmxjaTV3ZFhOb0tHaGxlSFJ2ZFhSbU9DaEJVMDR4U0VWWUxtZGxkRWhsZUU5bVZsOUJkRTlpYWlobkxHWXBLU2w5ZlgxeVpYUjFjbTRnYW4wN1dEVXdPUzVuWlhSVGFXZHVZWFIxY21WQmJHZHZjbWwwYUcxT1lXMWxQV1oxYm1OMGFXOXVLR1FwZTNaaGNpQmlQVUZUVGpGSVJWZ3VaMlYwUkdWalpXNWtZVzUwU0dWNFZrSjVUblJvVEdsemRDaGtMREFzV3pFc01GMHBPM1poY2lCaFBVdEtWVkl1WVhOdU1TNUJVMDR4VlhScGJDNXZhV1JJWlhoVWIwbHVkQ2hpS1R0MllYSWdZejFMU2xWU0xtRnpiakV1ZURVd09TNVBTVVF1YjJsa01tNWhiV1VvWVNrN2NtVjBkWEp1SUdOOU8xZzFNRGt1WjJWMFUybG5ibUYwZFhKbFZtRnNkV1ZJWlhnOVpuVnVZM1JwYjI0b1lpbDdkbUZ5SUdFOVFWTk9NVWhGV0M1blpYUkVaV05sYm1SaGJuUklaWGhXUW5sT2RHaE1hWE4wS0dJc01DeGJNbDBwTzJsbUtHRXVjM1ZpYzNSeUtEQXNNaWtoUFQxY0lqQXdYQ0lwZTNSb2NtOTNYQ0pqWVc0bmRDQm5aWFFnYzJsbmJtRjBkWEpsSUhaaGJIVmxYQ0o5Y21WMGRYSnVJR0V1YzNWaWMzUnlLRElwZlR0WU5UQTVMbWRsZEZObGNtbGhiRTUxYldKbGNraGxlRDFtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnUVZOT01VaEZXQzVuWlhSRVpXTmxibVJoYm5SSVpYaFdRbmxPZEdoTWFYTjBLR0VzTUN4Yk1Dd3hYU2w5TzF4dUx5b2hJR3AzY3kwekxqTXVOQ0FvWXlrZ01qQXhNeTB5TURFMklFdGxibXBwSUZWeWRYTm9hVzFoSUh3Z2EycDFjaTVuYVhSb2RXSXVZMjl0TDJwemNuTmhjMmxuYmk5c2FXTmxibk5sWEc0Z0tpOWNibWxtS0hSNWNHVnZaaUJMU2xWU1BUMWNJblZ1WkdWbWFXNWxaRndpZkh3aFMwcFZVaWw3UzBwVlVqMTdmWDFwWmloMGVYQmxiMllnUzBwVlVpNXFkM005UFZ3aWRXNWtaV1pwYm1Wa1hDSjhmQ0ZMU2xWU0xtcDNjeWw3UzBwVlVpNXFkM005ZTMxOVMwcFZVaTVxZDNNdVNsZFRQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHRTlTMHBWVWk1cWQzTXVTbGRUTzNSb2FYTXVjR0Z5YzJWS1YxTTlablZ1WTNScGIyNG9aU3huS1h0cFppZ29kR2hwY3k1d1lYSnpaV1JLVjFNaFBUMTFibVJsWm1sdVpXUXBKaVlvWjN4OEtIUm9hWE11Y0dGeWMyVmtTbGRUTG5OcFozWmhiRWdoUFQxMWJtUmxabWx1WldRcEtTbDdjbVYwZFhKdWZXbG1LR1V1YldGMFkyZ29MMTRvVzE0dVhTc3BYRnd1S0Z0ZUxsMHJLVnhjTGloYlhpNWRLeWtrTHlrOVBXNTFiR3dwZTNSb2NtOTNYQ0pLVjFNZ2MybG5ibUYwZFhKbElHbHpJRzV2ZENCaElHWnZjbTBnYjJZZ0owaGxZV1F1VUdGNWJHOWhaQzVUYVdkV1lXeDFaU2N1WENKOWRtRnlJR2c5VW1WblJYaHdMaVF4TzNaaGNpQmpQVkpsWjBWNGNDNGtNanQyWVhJZ2FUMVNaV2RGZUhBdUpETTdkbUZ5SUdzOWFDdGNJaTVjSWl0ak8zUm9hWE11Y0dGeWMyVmtTbGRUUFh0OU8zUm9hWE11Y0dGeWMyVmtTbGRUTG1obFlXUkNOalJWUFdnN2RHaHBjeTV3WVhKelpXUktWMU11Y0dGNWJHOWhaRUkyTkZVOVl6dDBhR2x6TG5CaGNuTmxaRXBYVXk1emFXZDJZV3hDTmpSVlBXazdkR2hwY3k1d1lYSnpaV1JLVjFNdWMyazlhenRwWmlnaFp5bDdkbUZ5SUdZOVlqWTBkWFJ2YUdWNEtHa3BPM1poY2lCa1BYQmhjbk5sUW1sblNXNTBLR1lzTVRZcE8zUm9hWE11Y0dGeWMyVmtTbGRUTG5OcFozWmhiRWc5Wmp0MGFHbHpMbkJoY25ObFpFcFhVeTV6YVdkMllXeENTVDFrZlhaaGNpQmlQV0kyTkhWMGIzVjBaamdvYUNrN2RtRnlJR285WWpZMGRYUnZkWFJtT0NoaktUdDBhR2x6TG5CaGNuTmxaRXBYVXk1b1pXRmtVejFpTzNSb2FYTXVjR0Z5YzJWa1NsZFRMbkJoZVd4dllXUlRQV283YVdZb0lXRXVhWE5UWVdabFNsTlBUbE4wY21sdVp5aGlMSFJvYVhNdWNHRnljMlZrU2xkVExGd2lhR1ZoWkZCY0lpa3BlM1JvY205M1hDSnRZV3htYjNKdFpXUWdTbE5QVGlCemRISnBibWNnWm05eUlFcFhVeUJJWldGa09pQmNJaXRpZlgxOU8wdEtWVkl1YW5kekxrcFhVeTV6YVdkdVBXWjFibU4wYVc5dUtHRXNhU3hqTEcwc2JDbDdkbUZ5SUdzOVMwcFZVaTVxZDNNdVNsZFRPM1poY2lCeExHVXNhanRwWmloMGVYQmxiMllnYVNFOVhDSnpkSEpwYm1kY0lpWW1kSGx3Wlc5bUlHa2hQVndpYjJKcVpXTjBYQ0lwZTNSb2NtOTNYQ0p6Y0VobFlXUmxjaUJ0ZFhOMElHSmxJRXBUVDA0Z2MzUnlhVzVuSUc5eUlHOWlhbVZqZERvZ1hDSXJhWDFwWmloMGVYQmxiMllnYVQwOVhDSnZZbXBsWTNSY0lpbDdaVDFwTzNFOVNsTlBUaTV6ZEhKcGJtZHBabmtvWlNsOWFXWW9kSGx3Wlc5bUlHazlQVndpYzNSeWFXNW5YQ0lwZTNFOWFUdHBaaWdoYXk1cGMxTmhabVZLVTA5T1UzUnlhVzVuS0hFcEtYdDBhSEp2ZDF3aVNsZFRJRWhsWVdRZ2FYTWdibTkwSUhOaFptVWdTbE5QVGlCemRISnBibWM2SUZ3aUszRjlaVDFyTG5KbFlXUlRZV1psU2xOUFRsTjBjbWx1WnloeEtYMXFQV003YVdZb2RIbHdaVzltSUdNOVBWd2liMkpxWldOMFhDSXBlMm85U2xOUFRpNXpkSEpwYm1kcFpua29ZeWw5YVdZb0tHRTlQVndpWENKOGZHRTlQVzUxYkd3cEppWmxMbUZzWnlFOVBYVnVaR1ZtYVc1bFpDbDdZVDFsTG1Gc1ozMXBaaWdvWVNFOVhDSmNJaVltWVNFOWJuVnNiQ2ttSm1VdVlXeG5QVDA5ZFc1a1pXWnBibVZrS1h0bExtRnNaejFoTzNFOVNsTlBUaTV6ZEhKcGJtZHBabmtvWlNsOWFXWW9ZU0U5UFdVdVlXeG5LWHQwYUhKdmQxd2lZV3huSUdGdVpDQnpTR1ZoWkdWeUxtRnNaeUJrYjJWemJpZDBJRzFoZEdOb09pQmNJaXRoSzF3aUlUMWNJaXRsTG1Gc1ozMTJZWElnWkQxdWRXeHNPMmxtS0dzdWFuZHpZV3huTW5OcFoyRnNaMXRoWFQwOVBYVnVaR1ZtYVc1bFpDbDdkR2h5YjNkY0luVnVjM1Z3Y0c5eWRHVmtJR0ZzWnlCdVlXMWxPaUJjSWl0aGZXVnNjMlY3WkQxckxtcDNjMkZzWnpKemFXZGhiR2RiWVYxOWRtRnlJR0k5ZFhSbU9IUnZZalkwZFNoeEtUdDJZWElnWnoxMWRHWTRkRzlpTmpSMUtHb3BPM1poY2lCdlBXSXJYQ0l1WENJclp6dDJZWElnYmoxY0lsd2lPMmxtS0dRdWMzVmljM1J5S0RBc05DazlQVndpU0cxaFkxd2lLWHRwWmlodFBUMDlkVzVrWldacGJtVmtLWHQwYUhKdmQxd2liV0ZqSUd0bGVTQnphR0ZzYkNCaVpTQnpjR1ZqYVdacFpXUWdabTl5SUVoVEtpQmhiR2RjSW4xMllYSWdhRDF1WlhjZ1MwcFZVaTVqY25sd2RHOHVUV0ZqS0h0aGJHYzZaQ3h3Y205Mk9sd2lZM0o1Y0hSdmFuTmNJaXh3WVhOek9tMTlLVHRvTG5Wd1pHRjBaVk4wY21sdVp5aHZLVHR1UFdndVpHOUdhVzVoYkNncGZXVnNjMlY3YVdZb1pDNXBibVJsZUU5bUtGd2lkMmwwYUVWRFJGTkJYQ0lwSVQwdE1TbDdkbUZ5SUhBOWJtVjNJRXRLVlZJdVkzSjVjSFJ2TGxOcFoyNWhkSFZ5WlNoN1lXeG5PbVI5S1R0d0xtbHVhWFFvYlN4c0tUdHdMblZ3WkdGMFpWTjBjbWx1WnlodktUdG9RVk5PTVZOcFp6MXdMbk5wWjI0b0tUdHVQVXRLVlZJdVkzSjVjSFJ2TGtWRFJGTkJMbUZ6YmpGVGFXZFViME52Ym1OaGRGTnBaeWhvUVZOT01WTnBaeWw5Wld4elpYdHBaaWhrSVQxY0ltNXZibVZjSWlsN2RtRnlJSEE5Ym1WM0lFdEtWVkl1WTNKNWNIUnZMbE5wWjI1aGRIVnlaU2g3WVd4bk9tUjlLVHR3TG1sdWFYUW9iU3hzS1R0d0xuVndaR0YwWlZOMGNtbHVaeWh2S1R0dVBYQXVjMmxuYmlncGZYMTlkbUZ5SUdZOWFHVjRkRzlpTmpSMUtHNHBPM0psZEhWeWJpQnZLMXdpTGx3aUsyWjlPMHRLVlZJdWFuZHpMa3BYVXk1MlpYSnBabms5Wm5WdVkzUnBiMjRvY0N4MExHb3BlM1poY2lCdFBVdEtWVkl1YW5kekxrcFhVenQyWVhJZ2NUMXdMbk53YkdsMEtGd2lMbHdpS1R0MllYSWdaRDF4V3pCZE8zWmhjaUJzUFhGYk1WMDdkbUZ5SUdJOVpDdGNJaTVjSWl0c08zWmhjaUJ5UFdJMk5IVjBiMmhsZUNoeFd6SmRLVHQyWVhJZ2FUMXRMbkpsWVdSVFlXWmxTbE5QVGxOMGNtbHVaeWhpTmpSMWRHOTFkR1k0S0hGYk1GMHBLVHQyWVhJZ2FEMXVkV3hzTzNaaGNpQnpQVzUxYkd3N2FXWW9hUzVoYkdjOVBUMTFibVJsWm1sdVpXUXBlM1JvY205M1hDSmhiR2R2Y21sMGFHMGdibTkwSUhOd1pXTnBabWxsWkNCcGJpQm9aV0ZrWlhKY0luMWxiSE5sZTJnOWFTNWhiR2M3Y3oxb0xuTjFZbk4wY2lnd0xESXBmV2xtS0dvaFBXNTFiR3dtSms5aWFtVmpkQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWN1WTJGc2JDaHFLVDA5UFZ3aVcyOWlhbVZqZENCQmNuSmhlVjFjSWlZbWFpNXNaVzVuZEdnK01DbDdkbUZ5SUdNOVhDSTZYQ0lyYWk1cWIybHVLRndpT2x3aUtTdGNJanBjSWp0cFppaGpMbWx1WkdWNFQyWW9YQ0k2WENJcmFDdGNJanBjSWlrOVBTMHhLWHQwYUhKdmQxd2lZV3huYjNKcGRHaHRJQ2RjSWl0b0sxd2lKeUJ1YjNRZ1lXTmpaWEIwWldRZ2FXNGdkR2hsSUd4cGMzUmNJbjE5YVdZb2FDRTlYQ0p1YjI1bFhDSW1KblE5UFQxdWRXeHNLWHQwYUhKdmQxd2lhMlY1SUhOb1lXeHNJR0psSUhOd1pXTnBabWxsWkNCMGJ5QjJaWEpwWm5rdVhDSjlhV1lvZEhsd1pXOW1JSFE5UFZ3aWMzUnlhVzVuWENJbUpuUXVhVzVrWlhoUFppaGNJaTB0TFMwdFFrVkhTVTRnWENJcElUMHRNU2w3ZEQxTFJWbFZWRWxNTG1kbGRFdGxlU2gwS1gxcFppaHpQVDFjSWxKVFhDSjhmSE05UFZ3aVVGTmNJaWw3YVdZb0lTaDBJR2x1YzNSaGJtTmxiMllnVWxOQlMyVjVLU2w3ZEdoeWIzZGNJbXRsZVNCemFHRnNiQ0JpWlNCaElGSlRRVXRsZVNCdlltb2dabTl5SUZKVEtpQmhibVFnVUZNcUlHRnNaM05jSW4xOWFXWW9jejA5WENKRlUxd2lLWHRwWmlnaEtIUWdhVzV6ZEdGdVkyVnZaaUJMU2xWU0xtTnllWEIwYnk1RlEwUlRRU2twZTNSb2NtOTNYQ0pyWlhrZ2MyaGhiR3dnWW1VZ1lTQkZRMFJUUVNCdlltb2dabTl5SUVWVEtpQmhiR2R6WENKOWZXbG1LR2c5UFZ3aWJtOXVaVndpS1h0OWRtRnlJRzQ5Ym5Wc2JEdHBaaWh0TG1wM2MyRnNaekp6YVdkaGJHZGJhUzVoYkdkZFBUMDlkVzVrWldacGJtVmtLWHQwYUhKdmQxd2lkVzV6ZFhCd2IzSjBaV1FnWVd4bklHNWhiV1U2SUZ3aUsyaDlaV3h6Wlh0dVBXMHVhbmR6WVd4bk1uTnBaMkZzWjF0b1hYMXBaaWh1UFQxY0ltNXZibVZjSWlsN2RHaHliM2RjSW01dmRDQnpkWEJ3YjNKMFpXUmNJbjFsYkhObGUybG1LRzR1YzNWaWMzUnlLREFzTkNrOVBWd2lTRzFoWTF3aUtYdDJZWElnYXoxdWRXeHNPMmxtS0hROVBUMTFibVJsWm1sdVpXUXBlM1JvY205M1hDSm9aWGhoWkdWamFXMWhiQ0JyWlhrZ2MyaGhiR3dnWW1VZ2MzQmxZMmxtYVdWa0lHWnZjaUJJVFVGRFhDSjlkbUZ5SUdjOWJtVjNJRXRLVlZJdVkzSjVjSFJ2TGsxaFl5aDdZV3huT200c2NHRnpjenAwZlNrN1p5NTFjR1JoZEdWVGRISnBibWNvWWlrN2F6MW5MbVJ2Um1sdVlXd29LVHR5WlhSMWNtNGdjajA5YTMxbGJITmxlMmxtS0c0dWFXNWtaWGhQWmloY0luZHBkR2hGUTBSVFFWd2lLU0U5TFRFcGUzWmhjaUJtUFc1MWJHdzdkSEo1ZTJZOVMwcFZVaTVqY25sd2RHOHVSVU5FVTBFdVkyOXVZMkYwVTJsblZHOUJVMDR4VTJsbktISXBmV05oZEdOb0tHOHBlM0psZEhWeWJpQm1ZV3h6WlgxMllYSWdaVDF1WlhjZ1MwcFZVaTVqY25sd2RHOHVVMmxuYm1GMGRYSmxLSHRoYkdjNmJuMHBPMlV1YVc1cGRDaDBLVHRsTG5Wd1pHRjBaVk4wY21sdVp5aGlLVHR5WlhSMWNtNGdaUzUyWlhKcFpua29aaWw5Wld4elpYdDJZWElnWlQxdVpYY2dTMHBWVWk1amNubHdkRzh1VTJsbmJtRjBkWEpsS0h0aGJHYzZibjBwTzJVdWFXNXBkQ2gwS1R0bExuVndaR0YwWlZOMGNtbHVaeWhpS1R0eVpYUjFjbTRnWlM1MlpYSnBabmtvY2lsOWZYMTlPMHRLVlZJdWFuZHpMa3BYVXk1d1lYSnpaVDFtZFc1amRHbHZiaWhuS1h0MllYSWdZejFuTG5Od2JHbDBLRndpTGx3aUtUdDJZWElnWWoxN2ZUdDJZWElnWml4bExHUTdhV1lvWXk1c1pXNW5kR2doUFRJbUptTXViR1Z1WjNSb0lUMHpLWHQwYUhKdmQxd2liV0ZzWm05eWJXVmtJSE5LVjFNNklIZHliMjVuSUc1MWJXSmxjaUJ2WmlBbkxpY2djM0JzYVhSMFpXUWdaV3hsYldWdWRITmNJbjFtUFdOYk1GMDdaVDFqV3pGZE8ybG1LR011YkdWdVozUm9QVDB6S1h0a1BXTmJNbDE5WWk1b1pXRmtaWEpQWW1vOVMwcFZVaTVxZDNNdVNsZFRMbkpsWVdSVFlXWmxTbE5QVGxOMGNtbHVaeWhpTmpSMWRHOTFkR1k0S0dZcEtUdGlMbkJoZVd4dllXUlBZbW85UzBwVlVpNXFkM011U2xkVExuSmxZV1JUWVdabFNsTlBUbE4wY21sdVp5aGlOalIxZEc5MWRHWTRLR1VwS1R0aUxtaGxZV1JsY2xCUVBVcFRUMDR1YzNSeWFXNW5hV1o1S0dJdWFHVmhaR1Z5VDJKcUxHNTFiR3dzWENJZ0lGd2lLVHRwWmloaUxuQmhlV3h2WVdSUFltbzlQVzUxYkd3cGUySXVjR0Y1Ykc5aFpGQlFQV0kyTkhWMGIzVjBaamdvWlNsOVpXeHpaWHRpTG5CaGVXeHZZV1JRVUQxS1UwOU9Mbk4wY21sdVoybG1lU2hpTG5CaGVXeHZZV1JQWW1vc2JuVnNiQ3hjSWlBZ1hDSXBmV2xtS0dRaFBUMTFibVJsWm1sdVpXUXBlMkl1YzJsblNHVjRQV0kyTkhWMGIyaGxlQ2hrS1gxeVpYUjFjbTRnWW4wN1MwcFZVaTVxZDNNdVNsZFRMblpsY21sbWVVcFhWRDFtZFc1amRHbHZiaWhrTEdvc2JDbDdkbUZ5SUdnOVMwcFZVaTVxZDNNdVNsZFRPM1poY2lCcFBXUXVjM0JzYVhRb1hDSXVYQ0lwTzNaaGNpQmpQV2xiTUYwN2RtRnlJR2M5YVZzeFhUdDJZWElnYlQxaksxd2lMbHdpSzJjN2RtRnlJR3M5WWpZMGRYUnZhR1Y0S0dsYk1sMHBPM1poY2lCbVBXZ3VjbVZoWkZOaFptVktVMDlPVTNSeWFXNW5LR0kyTkhWMGIzVjBaamdvWXlrcE8zWmhjaUJsUFdndWNtVmhaRk5oWm1WS1UwOU9VM1J5YVc1bktHSTJOSFYwYjNWMFpqZ29aeWtwTzJsbUtHWXVZV3huUFQwOWRXNWtaV1pwYm1Wa0tYdHlaWFIxY200Z1ptRnNjMlY5YVdZb2JDNWhiR2M5UFQxMWJtUmxabWx1WldRcGUzUm9jbTkzWENKaFkyTmxjSFJHYVdWc1pDNWhiR2NnYzJoaGJHd2dZbVVnYzNCbFkybG1hV1ZrWENKOWFXWW9JV2d1YVc1QmNuSmhlU2htTG1Gc1p5eHNMbUZzWnlrcGUzSmxkSFZ5YmlCbVlXeHpaWDFwWmlobExtbHpjeUU5UFhWdVpHVm1hVzVsWkNZbWRIbHdaVzltSUd3dWFYTnpQVDA5WENKdlltcGxZM1JjSWlsN2FXWW9JV2d1YVc1QmNuSmhlU2hsTG1semN5eHNMbWx6Y3lrcGUzSmxkSFZ5YmlCbVlXeHpaWDE5YVdZb1pTNXpkV0loUFQxMWJtUmxabWx1WldRbUpuUjVjR1Z2WmlCc0xuTjFZajA5UFZ3aWIySnFaV04wWENJcGUybG1LQ0ZvTG1sdVFYSnlZWGtvWlM1emRXSXNiQzV6ZFdJcEtYdHlaWFIxY200Z1ptRnNjMlY5ZldsbUtHVXVZWFZrSVQwOWRXNWtaV1pwYm1Wa0ppWjBlWEJsYjJZZ2JDNWhkV1E5UFQxY0ltOWlhbVZqZEZ3aUtYdHBaaWgwZVhCbGIyWWdaUzVoZFdROVBWd2ljM1J5YVc1blhDSXBlMmxtS0NGb0xtbHVRWEp5WVhrb1pTNWhkV1FzYkM1aGRXUXBLWHR5WlhSMWNtNGdabUZzYzJWOWZXVnNjMlY3YVdZb2RIbHdaVzltSUdVdVlYVmtQVDFjSW05aWFtVmpkRndpS1h0cFppZ2hhQzVwYm1Oc2RXUmxaRUZ5Y21GNUtHVXVZWFZrTEd3dVlYVmtLU2w3Y21WMGRYSnVJR1poYkhObGZYMTlmWFpoY2lCaVBVdEtWVkl1YW5kekxrbHVkRVJoZEdVdVoyVjBUbTkzS0NrN2FXWW9iQzUyWlhKcFpubEJkQ0U5UFhWdVpHVm1hVzVsWkNZbWRIbHdaVzltSUd3dWRtVnlhV1o1UVhROVBUMWNJbTUxYldKbGNsd2lLWHRpUFd3dWRtVnlhV1o1UVhSOWFXWW9iQzVuY21GalpWQmxjbWx2WkQwOVBYVnVaR1ZtYVc1bFpIeDhkSGx3Wlc5bUlHd3VaM0poWTJWUVpYSnBiMlFoUFQxY0ltNTFiV0psY2x3aUtYdHNMbWR5WVdObFVHVnlhVzlrUFRCOWFXWW9aUzVsZUhBaFBUMTFibVJsWm1sdVpXUW1KblI1Y0dWdlppQmxMbVY0Y0QwOVhDSnVkVzFpWlhKY0lpbDdhV1lvWlM1bGVIQXJiQzVuY21GalpWQmxjbWx2WkR4aUtYdHlaWFIxY200Z1ptRnNjMlY5ZldsbUtHVXVibUptSVQwOWRXNWtaV1pwYm1Wa0ppWjBlWEJsYjJZZ1pTNXVZbVk5UFZ3aWJuVnRZbVZ5WENJcGUybG1LR0k4WlM1dVltWXRiQzVuY21GalpWQmxjbWx2WkNsN2NtVjBkWEp1SUdaaGJITmxmWDFwWmlobExtbGhkQ0U5UFhWdVpHVm1hVzVsWkNZbWRIbHdaVzltSUdVdWFXRjBQVDFjSW01MWJXSmxjbHdpS1h0cFppaGlQR1V1YVdGMExXd3VaM0poWTJWUVpYSnBiMlFwZTNKbGRIVnliaUJtWVd4elpYMTlhV1lvWlM1cWRHa2hQVDExYm1SbFptbHVaV1FtSm13dWFuUnBJVDA5ZFc1a1pXWnBibVZrS1h0cFppaGxMbXAwYVNFOVBXd3VhblJwS1h0eVpYUjFjbTRnWm1Gc2MyVjlmV2xtS0NGTFNsVlNMbXAzY3k1S1YxTXVkbVZ5YVdaNUtHUXNhaXhzTG1Gc1p5a3BlM0psZEhWeWJpQm1ZV3h6WlgxeVpYUjFjbTRnZEhKMVpYMDdTMHBWVWk1cWQzTXVTbGRUTG1sdVkyeDFaR1ZrUVhKeVlYazlablZ1WTNScGIyNG9ZaXhoS1h0MllYSWdaRDFMU2xWU0xtcDNjeTVLVjFNdWFXNUJjbkpoZVR0cFppaGlQVDA5Ym5Wc2JDbDdjbVYwZFhKdUlHWmhiSE5sZldsbUtIUjVjR1Z2WmlCaUlUMDlYQ0p2WW1wbFkzUmNJaWw3Y21WMGRYSnVJR1poYkhObGZXbG1LSFI1Y0dWdlppQmlMbXhsYm1kMGFDRTlQVndpYm5WdFltVnlYQ0lwZTNKbGRIVnliaUJtWVd4elpYMW1iM0lvZG1GeUlHTTlNRHRqUEdJdWJHVnVaM1JvTzJNckt5bDdhV1lvSVdRb1lsdGpYU3hoS1NsN2NtVjBkWEp1SUdaaGJITmxmWDF5WlhSMWNtNGdkSEoxWlgwN1MwcFZVaTVxZDNNdVNsZFRMbWx1UVhKeVlYazlablZ1WTNScGIyNG9aQ3hpS1h0cFppaGlQVDA5Ym5Wc2JDbDdjbVYwZFhKdUlHWmhiSE5sZldsbUtIUjVjR1Z2WmlCaUlUMDlYQ0p2WW1wbFkzUmNJaWw3Y21WMGRYSnVJR1poYkhObGZXbG1LSFI1Y0dWdlppQmlMbXhsYm1kMGFDRTlQVndpYm5WdFltVnlYQ0lwZTNKbGRIVnliaUJtWVd4elpYMW1iM0lvZG1GeUlHTTlNRHRqUEdJdWJHVnVaM1JvTzJNckt5bDdhV1lvWWx0alhUMDlaQ2w3Y21WMGRYSnVJSFJ5ZFdWOWZYSmxkSFZ5YmlCbVlXeHpaWDA3UzBwVlVpNXFkM011U2xkVExtcDNjMkZzWnpKemFXZGhiR2M5ZTBoVE1qVTJPbHdpU0cxaFkxTklRVEkxTmx3aUxFaFRNemcwT2x3aVNHMWhZMU5JUVRNNE5Gd2lMRWhUTlRFeU9sd2lTRzFoWTFOSVFUVXhNbHdpTEZKVE1qVTJPbHdpVTBoQk1qVTJkMmwwYUZKVFFWd2lMRkpUTXpnME9sd2lVMGhCTXpnMGQybDBhRkpUUVZ3aUxGSlROVEV5T2x3aVUwaEJOVEV5ZDJsMGFGSlRRVndpTEVWVE1qVTJPbHdpVTBoQk1qVTJkMmwwYUVWRFJGTkJYQ0lzUlZNek9EUTZYQ0pUU0VFek9EUjNhWFJvUlVORVUwRmNJaXhRVXpJMU5qcGNJbE5JUVRJMU5uZHBkR2hTVTBGaGJtUk5SMFl4WENJc1VGTXpPRFE2WENKVFNFRXpPRFIzYVhSb1VsTkJZVzVrVFVkR01Wd2lMRkJUTlRFeU9sd2lVMGhCTlRFeWQybDBhRkpUUVdGdVpFMUhSakZjSWl4dWIyNWxPbHdpYm05dVpWd2lMSDA3UzBwVlVpNXFkM011U2xkVExtbHpVMkZtWlVwVFQwNVRkSEpwYm1jOVpuVnVZM1JwYjI0b1l5eGlMR1FwZTNaaGNpQmxQVzUxYkd3N2RISjVlMlU5YW5OdmJsQmhjbk5sS0dNcE8ybG1LSFI1Y0dWdlppQmxJVDFjSW05aWFtVmpkRndpS1h0eVpYUjFjbTRnTUgxcFppaGxMbU52Ym5OMGNuVmpkRzl5UFQwOVFYSnlZWGtwZTNKbGRIVnliaUF3ZldsbUtHSXBlMkpiWkYwOVpYMXlaWFIxY200Z01YMWpZWFJqYUNoaEtYdHlaWFIxY200Z01IMTlPMHRLVlZJdWFuZHpMa3BYVXk1eVpXRmtVMkZtWlVwVFQwNVRkSEpwYm1jOVpuVnVZM1JwYjI0b1lpbDdkbUZ5SUdNOWJuVnNiRHQwY25sN1l6MXFjMjl1VUdGeWMyVW9ZaWs3YVdZb2RIbHdaVzltSUdNaFBWd2liMkpxWldOMFhDSXBlM0psZEhWeWJpQnVkV3hzZldsbUtHTXVZMjl1YzNSeWRXTjBiM0k5UFQxQmNuSmhlU2w3Y21WMGRYSnVJRzUxYkd4OWNtVjBkWEp1SUdOOVkyRjBZMmdvWVNsN2NtVjBkWEp1SUc1MWJHeDlmVHRMU2xWU0xtcDNjeTVLVjFNdVoyVjBSVzVqYjJSbFpGTnBaMjVoZEhWeVpWWmhiSFZsUm5KdmJVcFhVejFtZFc1amRHbHZiaWhoS1h0cFppaGhMbTFoZEdOb0tDOWVXMTR1WFN0Y1hDNWJYaTVkSzF4Y0xpaGJYaTVkS3lra0x5azlQVzUxYkd3cGUzUm9jbTkzWENKS1YxTWdjMmxuYm1GMGRYSmxJR2x6SUc1dmRDQmhJR1p2Y20wZ2IyWWdKMGhsWVdRdVVHRjViRzloWkM1VGFXZFdZV3gxWlNjdVhDSjljbVYwZFhKdUlGSmxaMFY0Y0M0a01YMDdTMHBWVWk1cWQzTXVTbGRUTG1kbGRFcFhTM1JvZFcxaWNISnBiblE5Wm5WdVkzUnBiMjRvWkNsN2FXWW9aQzVyZEhraFBUMWNJbEpUUVZ3aUppWmtMbXQwZVNFOVBWd2lSVU5jSWlZbVpDNXJkSGtoUFQxY0ltOWpkRndpS1h0MGFISnZkMXdpZFc1emRYQndiM0owWldRZ1lXeG5iM0pwZEdodElHWnZjaUJLVjBzZ1ZHaDFiWEJ5YVc1MFhDSjlkbUZ5SUdFOVhDSjdYQ0k3YVdZb1pDNXJkSGs5UFQxY0lsSlRRVndpS1h0cFppaDBlWEJsYjJZZ1pDNXVJVDFjSW5OMGNtbHVaMXdpZkh4MGVYQmxiMllnWkM1bElUMWNJbk4wY21sdVoxd2lLWHQwYUhKdmQxd2lkM0p2Ym1jZ2JpQmhibVFnWlNCMllXeDFaU0JtYjNJZ1VsTkJJR3RsZVZ3aWZXRXJQU2RjSW1WY0lqcGNJaWNyWkM1bEt5ZGNJaXduTzJFclBTZGNJbXQwZVZ3aU9sd2lKeXRrTG10MGVTc25YQ0lzSnp0aEt6MG5YQ0p1WENJNlhDSW5LMlF1YmlzblhDSjlKMzFsYkhObGUybG1LR1F1YTNSNVBUMDlYQ0pGUTF3aUtYdHBaaWgwZVhCbGIyWWdaQzVqY25ZaFBWd2ljM1J5YVc1blhDSjhmSFI1Y0dWdlppQmtMbmdoUFZ3aWMzUnlhVzVuWENKOGZIUjVjR1Z2WmlCa0xua2hQVndpYzNSeWFXNW5YQ0lwZTNSb2NtOTNYQ0ozY205dVp5QmpjbllzSUhnZ1lXNWtJSGtnZG1Gc2RXVWdabTl5SUVWRElHdGxlVndpZldFclBTZGNJbU55ZGx3aU9sd2lKeXRrTG1OeWRpc25YQ0lzSnp0aEt6MG5YQ0pyZEhsY0lqcGNJaWNyWkM1cmRIa3JKMXdpTENjN1lTczlKMXdpZUZ3aU9sd2lKeXRrTG5nckoxd2lMQ2M3WVNzOUoxd2llVndpT2x3aUp5dGtMbmtySjF3aWZTZDlaV3h6Wlh0cFppaGtMbXQwZVQwOVBWd2liMk4wWENJcGUybG1LSFI1Y0dWdlppQmtMbXNoUFZ3aWMzUnlhVzVuWENJcGUzUm9jbTkzWENKM2NtOXVaeUJySUhaaGJIVmxJR1p2Y2lCdlkzUW9jM2x0YldWMGNtbGpLU0JyWlhsY0luMWhLejBuWENKcmRIbGNJanBjSWljclpDNXJkSGtySjF3aUxDYzdZU3M5SjF3aWExd2lPbHdpSnl0a0xtc3JKMXdpZlNkOWZYMTJZWElnWWoxeWMzUnlkRzlvWlhnb1lTazdkbUZ5SUdNOVMwcFZVaTVqY25sd2RHOHVWWFJwYkM1b1lYTm9TR1Y0S0dJc1hDSnphR0V5TlRaY0lpazdkbUZ5SUdVOWFHVjRkRzlpTmpSMUtHTXBPM0psZEhWeWJpQmxmVHRMU2xWU0xtcDNjeTVKYm5SRVlYUmxQWHQ5TzB0S1ZWSXVhbmR6TGtsdWRFUmhkR1V1WjJWMFBXWjFibU4wYVc5dUtHRXBlMmxtS0dFOVBWd2libTkzWENJcGUzSmxkSFZ5YmlCTFNsVlNMbXAzY3k1SmJuUkVZWFJsTG1kbGRFNXZkeWdwZldWc2MyVjdhV1lvWVQwOVhDSnViM2NnS3lBeGFHOTFjbHdpS1h0eVpYUjFjbTRnUzBwVlVpNXFkM011U1c1MFJHRjBaUzVuWlhST2IzY29LU3MyTUNvMk1IMWxiSE5sZTJsbUtHRTlQVndpYm05M0lDc2dNV1JoZVZ3aUtYdHlaWFIxY200Z1MwcFZVaTVxZDNNdVNXNTBSR0YwWlM1blpYUk9iM2NvS1NzMk1DbzJNQ295TkgxbGJITmxlMmxtS0dFOVBWd2libTkzSUNzZ01XMXZiblJvWENJcGUzSmxkSFZ5YmlCTFNsVlNMbXAzY3k1SmJuUkVZWFJsTG1kbGRFNXZkeWdwS3pZd0tqWXdLakkwS2pNd2ZXVnNjMlY3YVdZb1lUMDlYQ0p1YjNjZ0t5QXhlV1ZoY2x3aUtYdHlaWFIxY200Z1MwcFZVaTVxZDNNdVNXNTBSR0YwWlM1blpYUk9iM2NvS1NzMk1DbzJNQ295TkNvek5qVjlaV3h6Wlh0cFppaGhMbTFoZEdOb0tDOWFKQzhwS1h0eVpYUjFjbTRnUzBwVlVpNXFkM011U1c1MFJHRjBaUzVuWlhSYWRXeDFLR0VwZldWc2MyVjdhV1lvWVM1dFlYUmphQ2d2WGxzd0xUbGRLeVF2S1NsN2NtVjBkWEp1SUhCaGNuTmxTVzUwS0dFcGZYMTlmWDE5ZlhSb2NtOTNYQ0oxYm5OMWNIQnZjblJsWkNCbWIzSnRZWFE2SUZ3aUsyRjlPMHRLVlZJdWFuZHpMa2x1ZEVSaGRHVXVaMlYwV25Wc2RUMW1kVzVqZEdsdmJpaHNLWHQyWVhJZ2F6dHBaaWhyUFd3dWJXRjBZMmdvTHloY1hHUXJLU2hjWEdSY1hHUXBLRnhjWkZ4Y1pDa29YRnhrWEZ4a0tTaGNYR1JjWEdRcEtGeGNaRnhjWkNsYUx5a3BlM1poY2lCaVBWSmxaMFY0Y0M0a01UdDJZWElnYVQxd1lYSnpaVWx1ZENoaUtUdHBaaWhpTG14bGJtZDBhRDA5TkNsN2ZXVnNjMlY3YVdZb1lpNXNaVzVuZEdnOVBUSXBlMmxtS0RVd1BEMXBKaVpwUERFd01DbDdhVDB4T1RBd0sybDlaV3h6Wlh0cFppZ3dQRDFwSmlacFBEVXdLWHRwUFRJd01EQXJhWDFsYkhObGUzUm9jbTkzWENKdFlXeG1iM0p0WldRZ2VXVmhjaUJ6ZEhKcGJtY2dabTl5SUZWVVExUnBiV1ZjSW4xOWZXVnNjMlY3ZEdoeWIzZGNJbTFoYkdadmNtMWxaQ0I1WldGeUlITjBjbWx1WjF3aWZYMTJZWElnWnoxd1lYSnpaVWx1ZENoU1pXZEZlSEF1SkRJcExURTdkbUZ5SUdvOWNHRnljMlZKYm5Rb1VtVm5SWGh3TGlRektUdDJZWElnWXoxd1lYSnpaVWx1ZENoU1pXZEZlSEF1SkRRcE8zWmhjaUJsUFhCaGNuTmxTVzUwS0ZKbFowVjRjQzRrTlNrN2RtRnlJR1k5Y0dGeWMyVkpiblFvVW1WblJYaHdMaVEyS1R0MllYSWdhRDF1WlhjZ1JHRjBaU2hFWVhSbExsVlVReWhwTEdjc2FpeGpMR1VzWmlrcE8zSmxkSFZ5YmlCK2ZpaG9MekV3TURBcGZYUm9jbTkzWENKMWJuTjFjSEJ2Y25SbFpDQm1iM0p0WVhRNklGd2lLMng5TzB0S1ZWSXVhbmR6TGtsdWRFUmhkR1V1WjJWMFRtOTNQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHRTlmbjRvYm1WM0lFUmhkR1VvS1M4eE1EQXdLVHR5WlhSMWNtNGdZWDA3UzBwVlVpNXFkM011U1c1MFJHRjBaUzVwYm5SRVlYUmxNbFZVUTFOMGNtbHVaejFtZFc1amRHbHZiaWhoS1h0MllYSWdZajF1WlhjZ1JHRjBaU2hoS2pFd01EQXBPM0psZEhWeWJpQmlMblJ2VlZSRFUzUnlhVzVuS0NsOU8wdEtWVkl1YW5kekxrbHVkRVJoZEdVdWFXNTBSR0YwWlRKYWRXeDFQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQnBQVzVsZHlCRVlYUmxLR1VxTVRBd01DazdkbUZ5SUdnOUtGd2lNREF3TUZ3aUsya3VaMlYwVlZSRFJuVnNiRmxsWVhJb0tTa3VjMnhwWTJVb0xUUXBPM1poY2lCblBTaGNJakF3WENJcktHa3VaMlYwVlZSRFRXOXVkR2dvS1NzeEtTa3VjMnhwWTJVb0xUSXBPM1poY2lCaVBTaGNJakF3WENJcmFTNW5aWFJWVkVORVlYUmxLQ2twTG5Oc2FXTmxLQzB5S1R0MllYSWdZVDBvWENJd01Gd2lLMmt1WjJWMFZWUkRTRzkxY25Nb0tTa3VjMnhwWTJVb0xUSXBPM1poY2lCalBTaGNJakF3WENJcmFTNW5aWFJWVkVOTmFXNTFkR1Z6S0NrcExuTnNhV05sS0MweUtUdDJZWElnWmowb1hDSXdNRndpSzJrdVoyVjBWVlJEVTJWamIyNWtjeWdwS1M1emJHbGpaU2d0TWlrN2NtVjBkWEp1SUdnclp5dGlLMkVyWXl0bUsxd2lXbHdpZlR0Y2JpOHFJU0JxZDNOcWN5MHlMakF1TVNBb1l5a2dNakF4TUMweU1ERTFJRXRsYm1wcElGVnlkWE5vYVcxaElId2dhMnAxY2k1bmFYUm9kV0l1WTI5dEwycHphbmR6TDJ4cFkyVnVjMlZjYmlBcUwxeHVhV1lvZEhsd1pXOW1JRXRLVlZJOVBWd2lkVzVrWldacGJtVmtYQ0o4ZkNGTFNsVlNLWHRMU2xWU1BYdDlmV2xtS0hSNWNHVnZaaUJMU2xWU0xtcDNjejA5WENKMWJtUmxabWx1WldSY0lueDhJVXRLVlZJdWFuZHpLWHRMU2xWU0xtcDNjejE3ZlgxTFNsVlNMbXAzY3k1S1YxTktVejFtZFc1amRHbHZiaWdwZTNaaGNpQmhQVXRLVlZJdWFuZHpMa3BYVXp0MGFHbHpMbUZJWldGa1pYSTlXMTA3ZEdocGN5NXpVR0Y1Ykc5aFpEMWNJbHdpTzNSb2FYTXVZVk5wWjI1aGRIVnlaVDFiWFR0MGFHbHpMbWx1YVhROVpuVnVZM1JwYjI0b0tYdDBhR2x6TG1GSVpXRmtaWEk5VzEwN2RHaHBjeTV6VUdGNWJHOWhaRDFjSWx3aU8zUm9hWE11WVZOcFoyNWhkSFZ5WlQxYlhYMDdkR2hwY3k1cGJtbDBWMmwwYUVwWFV6MW1kVzVqZEdsdmJpaGpLWHQwYUdsekxtbHVhWFFvS1R0MllYSWdZajF1WlhjZ1MwcFZVaTVxZDNNdVNsZFRLQ2s3WWk1d1lYSnpaVXBYVXloaktUdDBhR2x6TG1GSVpXRmtaWEl1Y0hWemFDaGlMbkJoY25ObFpFcFhVeTVvWldGa1FqWTBWU2s3ZEdocGN5NXpVR0Y1Ykc5aFpEMWlMbkJoY25ObFpFcFhVeTV3WVhsc2IyRmtRalkwVlR0MGFHbHpMbUZUYVdkdVlYUjFjbVV1Y0hWemFDaGlMbkJoY25ObFpFcFhVeTV6YVdkMllXeENOalJWS1gwN2RHaHBjeTVoWkdSVGFXZHVZWFIxY21WQ2VVaGxZV1JsY2t0bGVUMW1kVzVqZEdsdmJpaGxMR0lwZTNaaGNpQmtQV0kyTkhWMGIzVjBaamdvZEdocGN5NXpVR0Y1Ykc5aFpDazdkbUZ5SUdNOWJtVjNJRXRLVlZJdWFuZHpMa3BYVXlncE8zWmhjaUJtUFdNdVoyVnVaWEpoZEdWS1YxTkNlVkF4VUhKMlMyVjVLR1VzWkN4aUtUdDBhR2x6TG1GSVpXRmtaWEl1Y0hWemFDaGpMbkJoY25ObFpFcFhVeTVvWldGa1FqWTBWU2s3ZEdocGN5NWhVMmxuYm1GMGRYSmxMbkIxYzJnb1l5NXdZWEp6WldSS1YxTXVjMmxuZG1Gc1FqWTBWU2w5TzNSb2FYTXVZV1JrVTJsbmJtRjBkWEpsUW5sSVpXRmtaWEpRWVhsc2IyRmtTMlY1UFdaMWJtTjBhVzl1S0dVc1pDeGlLWHQyWVhJZ1l6MXVaWGNnUzBwVlVpNXFkM011U2xkVEtDazdkbUZ5SUdZOVl5NW5aVzVsY21GMFpVcFhVMEo1VURGUWNuWkxaWGtvWlN4a0xHSXBPM1JvYVhNdVlVaGxZV1JsY2k1d2RYTm9LR011Y0dGeWMyVmtTbGRUTG1obFlXUkNOalJWS1R0MGFHbHpMbk5RWVhsc2IyRmtQV011Y0dGeWMyVmtTbGRUTG5CaGVXeHZZV1JDTmpSVk8zUm9hWE11WVZOcFoyNWhkSFZ5WlM1d2RYTm9LR011Y0dGeWMyVmtTbGRUTG5OcFozWmhiRUkyTkZVcGZUdDBhR2x6TG5abGNtbG1lVmRwZEdoRFpYSjBjejFtZFc1amRHbHZiaWhqS1h0cFppaDBhR2x6TG1GSVpXRmtaWEl1YkdWdVozUm9JVDFqTG14bGJtZDBhQ2w3ZEdoeWIzZGNJbTUxYlNCb1pXRmtaWEp6SUdSdlpYTWdibTkwSUcxaGRHTm9JSGRwZEdnZ2JuVnRJR05sY25SelhDSjlhV1lvZEdocGN5NWhVMmxuYm1GMGRYSmxMbXhsYm1kMGFDRTlZeTVzWlc1bmRHZ3BlM1JvY205M1hDSnVkVzBnYzJsbmJtRjBkWEpsY3lCa2IyVnpJRzV2ZENCdFlYUmphQ0IzYVhSb0lHNTFiU0JqWlhKMGMxd2lmWFpoY2lCclBYUm9hWE11YzFCaGVXeHZZV1E3ZG1GeUlHYzlYQ0pjSWp0bWIzSW9kbUZ5SUdROU1EdGtQR011YkdWdVozUm9PMlFyS3lsN2RtRnlJR1U5WTF0a1hUdDJZWElnWmoxMGFHbHpMbUZJWldGa1pYSmJaRjA3ZG1GeUlHMDlkR2hwY3k1aFUybG5ibUYwZFhKbFcyUmRPM1poY2lCaVBXWXJYQ0l1WENJcmF5dGNJaTVjSWl0dE8zWmhjaUJxUFc1bGR5QkxTbFZTTG1wM2N5NUtWMU1vS1R0MGNubDdkbUZ5SUd3OWFpNTJaWEpwWm5sS1YxTkNlVkJsYlZnMU1EbERaWEowS0dJc1pTazdhV1lvYkNFOU1TbDdaeXM5S0dRck1Ta3JYQ0owYUNCemFXZHVZWFIxY21VZ2RXNXRZWFJqYUM0Z1hDSjlmV05oZEdOb0tHZ3BlMmNyUFNoa0t6RXBLMXdpZEdnZ2MybG5ibUYwZFhKbElHWmhhV3dvWENJcmFDdGNJaWt1SUZ3aWZYMXBaaWhuUFQxY0lsd2lLWHR5WlhSMWNtNGdNWDFsYkhObGUzUm9jbTkzSUdkOWZUdDBhR2x6TG5KbFlXUktWMU5LVXoxbWRXNWpkR2x2YmloaUtYdDJZWElnWXoxaExuSmxZV1JUWVdabFNsTlBUbE4wY21sdVp5aGlLVHRwWmloalBUMXVkV3hzS1h0MGFISnZkMXdpWVhKbmRXMWxiblFnYVhNZ2JtOTBJRXBUVDA0Z2MzUnlhVzVuT2lCY0lpdGlmWFJvYVhNdVlVaGxZV1JsY2oxakxtaGxZV1JsY25NN2RHaHBjeTV6VUdGNWJHOWhaRDFqTG5CaGVXeHZZV1E3ZEdocGN5NWhVMmxuYm1GMGRYSmxQV011YzJsbmJtRjBkWEpsYzMwN2RHaHBjeTVuWlhSS1UwOU9QV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVlMmhsWVdSbGNuTTZkR2hwY3k1aFNHVmhaR1Z5TEhCaGVXeHZZV1E2ZEdocGN5NXpVR0Y1Ykc5aFpDeHphV2R1WVhSMWNtVnpPblJvYVhNdVlWTnBaMjVoZEhWeVpYMTlPM1JvYVhNdWFYTkZiWEIwZVQxbWRXNWpkR2x2YmlncGUybG1LSFJvYVhNdVlVaGxZV1JsY2k1c1pXNW5kR2c5UFRBcGUzSmxkSFZ5YmlBeGZYSmxkSFZ5YmlBd2ZYMDdYRzR2S2lFZ2JtOWtaWFYwYVd3dE1TNHdMakFnS0dNcElESXdNVFVnUzJWdWFta2dWWEoxYzJocGJXRWdmQ0JyYW5WeUxtZHBkR2gxWWk1amIyMHZhbk55YzJGemFXZHVMMnhwWTJWdWMyVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NtVmhaRVpwYkdWVlZFWTRLR0VwZTNKbGRIVnliaUJ5WlhGMWFYSmxLRndpWm5OY0lpa3VjbVZoWkVacGJHVlRlVzVqS0dFc1hDSjFkR1k0WENJcGZXWjFibU4wYVc5dUlISmxZV1JHYVd4bFNHVjRRbmxDYVc0b1l5bDdkbUZ5SUdJOWNtVnhkV2x5WlNoY0ltcHpjbk5oYzJsbmJsd2lLVHQyWVhJZ1lUMXlaWEYxYVhKbEtGd2labk5jSWlrN2NtVjBkWEp1SUdJdWNuTjBjblJ2YUdWNEtHRXVjbVZoWkVacGJHVlRlVzVqS0dNc1hDSmlhVzVoY25sY0lpa3BmV1oxYm1OMGFXOXVJSEpsWVdSR2FXeGxLR0lwZTNaaGNpQmhQWEpsY1hWcGNtVW9YQ0ptYzF3aUtUdHlaWFIxY200Z1lTNXlaV0ZrUm1sc1pWTjVibU1vWWl4Y0ltSnBibUZ5ZVZ3aUtYMW1kVzVqZEdsdmJpQnpZWFpsUm1sc1pTaGpMR0lwZTNaaGNpQmhQWEpsY1hWcGNtVW9YQ0ptYzF3aUtUdGhMbmR5YVhSbFJtbHNaVk41Ym1Nb1l5eGlMRndpWW1sdVlYSjVYQ0lwZldaMWJtTjBhVzl1SUhOaGRtVkdhV3hsUW1sdVFubElaWGdvWlN4aUtYdDJZWElnWVQxeVpYRjFhWEpsS0Z3aVpuTmNJaWs3ZG1GeUlHTTljbVZ4ZFdseVpTaGNJbXB6Y25OaGMybG5ibHdpS1R0MllYSWdaRDFqTG1obGVIUnZjbk4wY2loaUtUdGhMbmR5YVhSbFJtbHNaVk41Ym1Nb1pTeGtMRndpWW1sdVlYSjVYQ0lwZlR0Y2JtVjRjRzl5ZEhNdVUyVmpkWEpsVW1GdVpHOXRJRDBnVTJWamRYSmxVbUZ1Wkc5dE8xeHVaWGh3YjNKMGN5NXlibWRmYzJWbFpGOTBhVzFsSUQwZ2NtNW5YM05sWldSZmRHbHRaVHRjYmx4dVpYaHdiM0owY3k1Q2FXZEpiblJsWjJWeUlEMGdRbWxuU1c1MFpXZGxjanRjYm1WNGNHOXlkSE11VWxOQlMyVjVJRDBnVWxOQlMyVjVPMXh1Wlhod2IzSjBjeTVGUTBSVFFTQTlJRXRLVlZJdVkzSjVjSFJ2TGtWRFJGTkJPMXh1Wlhod2IzSjBjeTVFVTBFZ1BTQkxTbFZTTG1OeWVYQjBieTVFVTBFN1hHNWxlSEJ2Y25SekxsTnBaMjVoZEhWeVpTQTlJRXRLVlZJdVkzSjVjSFJ2TGxOcFoyNWhkSFZ5WlR0Y2JtVjRjRzl5ZEhNdVRXVnpjMkZuWlVScFoyVnpkQ0E5SUV0S1ZWSXVZM0o1Y0hSdkxrMWxjM05oWjJWRWFXZGxjM1E3WEc1bGVIQnZjblJ6TGsxaFl5QTlJRXRLVlZJdVkzSjVjSFJ2TGsxaFl6dGNibVY0Y0c5eWRITXVTMFZaVlZSSlRDQTlJRXRGV1ZWVVNVdzdYRzVsZUhCdmNuUnpMa0ZUVGpGSVJWZ2dQU0JCVTA0eFNFVllPMXh1Wlhod2IzSjBjeTVZTlRBNUlEMGdXRFV3T1R0Y2JtVjRjRzl5ZEhNdVEzSjVjSFJ2U2xNZ1BTQkRjbmx3ZEc5S1V6dGNibHh1THk4Z1pYaDBMMkpoYzJVMk5DNXFjMXh1Wlhod2IzSjBjeTVpTmpSMGIyaGxlQ0E5SUdJMk5IUnZhR1Y0TzF4dVpYaHdiM0owY3k1aU5qUjBiMEpCSUQwZ1lqWTBkRzlDUVR0Y2JseHVMeThnWW1GelpUWTBlQzVxYzF4dVpYaHdiM0owY3k1emRHOUNRU0E5SUhOMGIwSkJPMXh1Wlhod2IzSjBjeTVDUVhSdmN5QTlJRUpCZEc5ek8xeHVaWGh3YjNKMGN5NUNRWFJ2YUdWNElEMGdRa0YwYjJobGVEdGNibVY0Y0c5eWRITXVjM1J2YUdWNElEMGdjM1J2YUdWNE8xeHVaWGh3YjNKMGN5NXpkRzlpTmpRZ1BTQnpkRzlpTmpRN1hHNWxlSEJ2Y25SekxuTjBiMkkyTkhVZ1BTQnpkRzlpTmpSMU8xeHVaWGh3YjNKMGN5NWlOalIxZEc5eklEMGdZalkwZFhSdmN6dGNibVY0Y0c5eWRITXVZalkwZEc5aU5qUjFJRDBnWWpZMGRHOWlOalIxTzF4dVpYaHdiM0owY3k1aU5qUjFkRzlpTmpRZ1BTQmlOalIxZEc5aU5qUTdYRzVsZUhCdmNuUnpMbWhsZURKaU5qUWdQU0JvWlhneVlqWTBPMXh1Wlhod2IzSjBjeTVvWlhoMGIySTJOSFVnUFNCb1pYaDBiMkkyTkhVN1hHNWxlSEJ2Y25SekxtSTJOSFYwYjJobGVDQTlJR0kyTkhWMGIyaGxlRHRjYm1WNGNHOXlkSE11WWpZMGRHOW9aWGdnUFNCaU5qUjBiMmhsZUR0Y2JtVjRjRzl5ZEhNdWRYUm1PSFJ2WWpZMGRTQTlJSFYwWmpoMGIySTJOSFU3WEc1bGVIQnZjblJ6TG1JMk5IVjBiM1YwWmpnZ1BTQmlOalIxZEc5MWRHWTRPMXh1Wlhod2IzSjBjeTUxZEdZNGRHOWlOalFnUFNCMWRHWTRkRzlpTmpRN1hHNWxlSEJ2Y25SekxtSTJOSFJ2ZFhSbU9DQTlJR0kyTkhSdmRYUm1PRHRjYm1WNGNHOXlkSE11ZFhSbU9IUnZhR1Y0SUQwZ2RYUm1PSFJ2YUdWNE8xeHVaWGh3YjNKMGN5NW9aWGgwYjNWMFpqZ2dQU0JvWlhoMGIzVjBaamc3WEc1bGVIQnZjblJ6TG1obGVIUnZjbk4wY2lBOUlHaGxlSFJ2Y25OMGNqdGNibVY0Y0c5eWRITXVjbk4wY25SdmFHVjRJRDBnY25OMGNuUnZhR1Y0TzF4dVpYaHdiM0owY3k1dVpYZHNhVzVsWDNSdlZXNXBlQ0E5SUc1bGQyeHBibVZmZEc5VmJtbDRPMXh1Wlhod2IzSjBjeTV1Wlhkc2FXNWxYM1J2Ukc5eklEMGdibVYzYkdsdVpWOTBiMFJ2Y3p0Y2JtVjRjRzl5ZEhNdWFXNTBZWEo1YzNSeWRHOW9aWGdnUFNCcGJuUmhjbmx6ZEhKMGIyaGxlRHRjYm1WNGNHOXlkSE11YzNSeVpHbG1abWxrZUNBOUlITjBjbVJwWm1acFpIZzdYRzVjYm1WNGNHOXlkSE11WTNKNWNIUnZJRDBnUzBwVlVpNWpjbmx3ZEc4N1hHNWxlSEJ2Y25SekxtRnpiakVnUFNCTFNsVlNMbUZ6YmpFN1hHNWxlSEJ2Y25SekxtcDNjeUE5SUV0S1ZWSXVhbmR6TzF4dVhHNWxlSEJ2Y25SekxuSmxZV1JHYVd4bFZWUkdPQ0E5SUhKbFlXUkdhV3hsVlZSR09EdGNibVY0Y0c5eWRITXVjbVZoWkVacGJHVklaWGhDZVVKcGJpQTlJSEpsWVdSR2FXeGxTR1Y0UW5sQ2FXNDdYRzVsZUhCdmNuUnpMbkpsWVdSR2FXeGxJRDBnY21WaFpFWnBiR1U3WEc1bGVIQnZjblJ6TG5OaGRtVkdhV3hsSUQwZ2MyRjJaVVpwYkdVN1hHNWxlSEJ2Y25SekxuTmhkbVZHYVd4bFFtbHVRbmxJWlhnZ1BTQnpZWFpsUm1sc1pVSnBia0o1U0dWNE8xeHVYRzVjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlxYzNKellYTnBaMjR2YkdsaUwycHpjbk5oYzJsbmJpNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREV5WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSXZLaUZjYmlBcUlGUm9aU0JpZFdabVpYSWdiVzlrZFd4bElHWnliMjBnYm05a1pTNXFjeXdnWm05eUlIUm9aU0JpY205M2MyVnlMbHh1SUNwY2JpQXFJRUJoZFhSb2IzSWdJQ0JHWlhKdmMzTWdRV0p2ZFd0b1lXUnBhbVZvSUR4bVpYSnZjM05BWm1WeWIzTnpMbTl5Wno0Z1BHaDBkSEE2THk5bVpYSnZjM011YjNKblBseHVJQ29nUUd4cFkyVnVjMlVnSUUxSlZGeHVJQ292WEc0dktpQmxjMnhwYm5RdFpHbHpZV0pzWlNCdWJ5MXdjbTkwYnlBcUwxeHVYRzRuZFhObElITjBjbWxqZENkY2JseHVkbUZ5SUdKaGMyVTJOQ0E5SUhKbGNYVnBjbVVvSjJKaGMyVTJOQzFxY3ljcFhHNTJZWElnYVdWbFpUYzFOQ0E5SUhKbGNYVnBjbVVvSjJsbFpXVTNOVFFuS1Z4dWRtRnlJR2x6UVhKeVlYa2dQU0J5WlhGMWFYSmxLQ2RwYzJGeWNtRjVKeWxjYmx4dVpYaHdiM0owY3k1Q2RXWm1aWElnUFNCQ2RXWm1aWEpjYm1WNGNHOXlkSE11VTJ4dmQwSjFabVpsY2lBOUlGTnNiM2RDZFdabVpYSmNibVY0Y0c5eWRITXVTVTVUVUVWRFZGOU5RVmhmUWxsVVJWTWdQU0ExTUZ4dVFuVm1abVZ5TG5CdmIyeFRhWHBsSUQwZ09ERTVNaUF2THlCdWIzUWdkWE5sWkNCaWVTQjBhR2x6SUdsdGNHeGxiV1Z1ZEdGMGFXOXVYRzVjYm5aaGNpQnliMjkwVUdGeVpXNTBJRDBnZTMxY2JseHVMeW9xWEc0Z0tpQkpaaUJnUW5WbVptVnlMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFJnT2x4dUlDb2dJQ0E5UFQwZ2RISjFaU0FnSUNCVmMyVWdWV2x1ZERoQmNuSmhlU0JwYlhCc1pXMWxiblJoZEdsdmJpQW9abUZ6ZEdWemRDbGNiaUFxSUNBZ1BUMDlJR1poYkhObElDQWdWWE5sSUU5aWFtVmpkQ0JwYlhCc1pXMWxiblJoZEdsdmJpQW9iVzl6ZENCamIyMXdZWFJwWW14bExDQmxkbVZ1SUVsRk5pbGNiaUFxWEc0Z0tpQkNjbTkzYzJWeWN5QjBhR0YwSUhOMWNIQnZjblFnZEhsd1pXUWdZWEp5WVhseklHRnlaU0JKUlNBeE1Dc3NJRVpwY21WbWIzZ2dOQ3NzSUVOb2NtOXRaU0EzS3l3Z1UyRm1ZWEpwSURVdU1Tc3NYRzRnS2lCUGNHVnlZU0F4TVM0Mkt5d2dhVTlUSURRdU1pc3VYRzRnS2x4dUlDb2dSSFZsSUhSdklIWmhjbWx2ZFhNZ1luSnZkM05sY2lCaWRXZHpMQ0J6YjIxbGRHbHRaWE1nZEdobElFOWlhbVZqZENCcGJYQnNaVzFsYm5SaGRHbHZiaUIzYVd4c0lHSmxJSFZ6WldRZ1pYWmxibHh1SUNvZ2QyaGxiaUIwYUdVZ1luSnZkM05sY2lCemRYQndiM0owY3lCMGVYQmxaQ0JoY25KaGVYTXVYRzRnS2x4dUlDb2dUbTkwWlRwY2JpQXFYRzRnS2lBZ0lDMGdSbWx5WldadmVDQTBMVEk1SUd4aFkydHpJSE4xY0hCdmNuUWdabTl5SUdGa1pHbHVaeUJ1WlhjZ2NISnZjR1Z5ZEdsbGN5QjBieUJnVldsdWREaEJjbkpoZVdBZ2FXNXpkR0Z1WTJWekxGeHVJQ29nSUNBZ0lGTmxaVG9nYUhSMGNITTZMeTlpZFdkNmFXeHNZUzV0YjNwcGJHeGhMbTl5Wnk5emFHOTNYMkoxWnk1aloyay9hV1E5TmprMU5ETTRMbHh1SUNwY2JpQXFJQ0FnTFNCVFlXWmhjbWtnTlMwM0lHeGhZMnR6SUhOMWNIQnZjblFnWm05eUlHTm9ZVzVuYVc1bklIUm9aU0JnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVqYjI1emRISjFZM1J2Y21BZ2NISnZjR1Z5ZEhsY2JpQXFJQ0FnSUNCdmJpQnZZbXBsWTNSekxseHVJQ3BjYmlBcUlDQWdMU0JEYUhKdmJXVWdPUzB4TUNCcGN5QnRhWE56YVc1bklIUm9aU0JnVkhsd1pXUkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMzVmlZWEp5WVhsZ0lHWjFibU4wYVc5dUxseHVJQ3BjYmlBcUlDQWdMU0JKUlRFd0lHaGhjeUJoSUdKeWIydGxiaUJnVkhsd1pXUkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMzVmlZWEp5WVhsZ0lHWjFibU4wYVc5dUlIZG9hV05vSUhKbGRIVnlibk1nWVhKeVlYbHpJRzltWEc0Z0tpQWdJQ0FnYVc1amIzSnlaV04wSUd4bGJtZDBhQ0JwYmlCemIyMWxJSE5wZEhWaGRHbHZibk11WEc1Y2JpQXFJRmRsSUdSbGRHVmpkQ0IwYUdWelpTQmlkV2RuZVNCaWNtOTNjMlZ5Y3lCaGJtUWdjMlYwSUdCQ2RXWm1aWEl1VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkdBZ2RHOGdZR1poYkhObFlDQnpieUIwYUdWNVhHNGdLaUJuWlhRZ2RHaGxJRTlpYW1WamRDQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z2QyaHBZMmdnYVhNZ2MyeHZkMlZ5SUdKMWRDQmlaV2hoZG1WeklHTnZjbkpsWTNSc2VTNWNiaUFxTDF4dVFuVm1abVZ5TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRZ1BTQm5iRzlpWVd3dVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZDQWhQVDBnZFc1a1pXWnBibVZrWEc0Z0lEOGdaMnh2WW1Gc0xsUlpVRVZFWDBGU1VrRlpYMU5WVUZCUFVsUmNiaUFnT2lCMGVYQmxaRUZ5Y21GNVUzVndjRzl5ZENncFhHNWNibVoxYm1OMGFXOXVJSFI1Y0dWa1FYSnlZWGxUZFhCd2IzSjBJQ2dwSUh0Y2JpQWdablZ1WTNScGIyNGdRbUZ5SUNncElIdDlYRzRnSUhSeWVTQjdYRzRnSUNBZ2RtRnlJR0Z5Y2lBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0RFcFhHNGdJQ0FnWVhKeUxtWnZieUE5SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlEUXlJSDFjYmlBZ0lDQmhjbkl1WTI5dWMzUnlkV04wYjNJZ1BTQkNZWEpjYmlBZ0lDQnlaWFIxY200Z1lYSnlMbVp2YnlncElEMDlQU0EwTWlBbUppQXZMeUIwZVhCbFpDQmhjbkpoZVNCcGJuTjBZVzVqWlhNZ1kyRnVJR0psSUdGMVoyMWxiblJsWkZ4dUlDQWdJQ0FnSUNCaGNuSXVZMjl1YzNSeWRXTjBiM0lnUFQwOUlFSmhjaUFtSmlBdkx5QmpiMjV6ZEhKMVkzUnZjaUJqWVc0Z1ltVWdjMlYwWEc0Z0lDQWdJQ0FnSUhSNWNHVnZaaUJoY25JdWMzVmlZWEp5WVhrZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0x5OGdZMmh5YjIxbElEa3RNVEFnYkdGamF5QmdjM1ZpWVhKeVlYbGdYRzRnSUNBZ0lDQWdJR0Z5Y2k1emRXSmhjbkpoZVNneExDQXhLUzVpZVhSbFRHVnVaM1JvSUQwOVBTQXdJQzh2SUdsbE1UQWdhR0Z6SUdKeWIydGxiaUJnYzNWaVlYSnlZWGxnWEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlZjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCclRXRjRUR1Z1WjNSb0lDZ3BJSHRjYmlBZ2NtVjBkWEp1SUVKMVptWmxjaTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVWEc0Z0lDQWdQeUF3ZURkbVptWm1abVptWEc0Z0lDQWdPaUF3ZURObVptWm1abVptWEc1OVhHNWNiaThxS2x4dUlDb2dRMnhoYzNNNklFSjFabVpsY2x4dUlDb2dQVDA5UFQwOVBUMDlQVDA5UFZ4dUlDcGNiaUFxSUZSb1pTQkNkV1ptWlhJZ1kyOXVjM1J5ZFdOMGIzSWdjbVYwZFhKdWN5QnBibk4wWVc1alpYTWdiMllnWUZWcGJuUTRRWEp5WVhsZ0lIUm9ZWFFnWVhKbElHRjFaMjFsYm5SbFpGeHVJQ29nZDJsMGFDQm1kVzVqZEdsdmJpQndjbTl3WlhKMGFXVnpJR1p2Y2lCaGJHd2dkR2hsSUc1dlpHVWdZRUoxWm1abGNtQWdRVkJKSUdaMWJtTjBhVzl1Y3k0Z1YyVWdkWE5sWEc0Z0tpQmdWV2x1ZERoQmNuSmhlV0FnYzI4Z2RHaGhkQ0J6Y1hWaGNtVWdZbkpoWTJ0bGRDQnViM1JoZEdsdmJpQjNiM0pyY3lCaGN5QmxlSEJsWTNSbFpDQXRMU0JwZENCeVpYUjFjbTV6WEc0Z0tpQmhJSE5wYm1kc1pTQnZZM1JsZEM1Y2JpQXFYRzRnS2lCQ2VTQmhkV2R0Wlc1MGFXNW5JSFJvWlNCcGJuTjBZVzVqWlhNc0lIZGxJR05oYmlCaGRtOXBaQ0J0YjJScFpubHBibWNnZEdobElHQlZhVzUwT0VGeWNtRjVZRnh1SUNvZ2NISnZkRzkwZVhCbExseHVJQ292WEc1bWRXNWpkR2x2YmlCQ2RXWm1aWElnS0dGeVp5a2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdRblZtWm1WeUtTa2dlMXh1SUNBZ0lDOHZJRUYyYjJsa0lHZHZhVzVuSUhSb2NtOTFaMmdnWVc0Z1FYSm5kVzFsYm5SelFXUmhjSFJ2Y2xSeVlXMXdiMnhwYm1VZ2FXNGdkR2hsSUdOdmJXMXZiaUJqWVhObExseHVJQ0FnSUdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU2tnY21WMGRYSnVJRzVsZHlCQ2RXWm1aWElvWVhKbkxDQmhjbWQxYldWdWRITmJNVjBwWEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJDZFdabVpYSW9ZWEpuS1Z4dUlDQjlYRzVjYmlBZ2FXWWdLQ0ZDZFdabVpYSXVWRmxRUlVSZlFWSlNRVmxmVTFWUVVFOVNWQ2tnZTF4dUlDQWdJSFJvYVhNdWJHVnVaM1JvSUQwZ01GeHVJQ0FnSUhSb2FYTXVjR0Z5Wlc1MElEMGdkVzVrWldacGJtVmtYRzRnSUgxY2JseHVJQ0F2THlCRGIyMXRiMjRnWTJGelpTNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p5YjIxT2RXMWlaWElvZEdocGN5d2dZWEpuS1Z4dUlDQjlYRzVjYmlBZ0x5OGdVMnhwWjJoMGJIa2diR1Z6Y3lCamIyMXRiMjRnWTJGelpTNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p5YjIxVGRISnBibWNvZEdocGN5d2dZWEpuTENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklDZDFkR1k0SnlsY2JpQWdmVnh1WEc0Z0lDOHZJRlZ1ZFhOMVlXd3VYRzRnSUhKbGRIVnliaUJtY205dFQySnFaV04wS0hSb2FYTXNJR0Z5WnlsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWm5KdmJVNTFiV0psY2lBb2RHaGhkQ3dnYkdWdVozUm9LU0I3WEc0Z0lIUm9ZWFFnUFNCaGJHeHZZMkYwWlNoMGFHRjBMQ0JzWlc1bmRHZ2dQQ0F3SUQ4Z01DQTZJR05vWldOclpXUW9iR1Z1WjNSb0tTQjhJREFwWEc0Z0lHbG1JQ2doUW5WbVptVnlMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFFwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjBhR0YwVzJsZElEMGdNRnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2RHaGhkRnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm1jbTl0VTNSeWFXNW5JQ2gwYUdGMExDQnpkSEpwYm1jc0lHVnVZMjlrYVc1bktTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ1pXNWpiMlJwYm1jZ0lUMDlJQ2R6ZEhKcGJtY25JSHg4SUdWdVkyOWthVzVuSUQwOVBTQW5KeWtnWlc1amIyUnBibWNnUFNBbmRYUm1PQ2RjYmx4dUlDQXZMeUJCYzNOMWJYQjBhVzl1T2lCaWVYUmxUR1Z1WjNSb0tDa2djbVYwZFhKdUlIWmhiSFZsSUdseklHRnNkMkY1Y3lBOElHdE5ZWGhNWlc1bmRHZ3VYRzRnSUhaaGNpQnNaVzVuZEdnZ1BTQmllWFJsVEdWdVozUm9LSE4wY21sdVp5d2daVzVqYjJScGJtY3BJSHdnTUZ4dUlDQjBhR0YwSUQwZ1lXeHNiMk5oZEdVb2RHaGhkQ3dnYkdWdVozUm9LVnh1WEc0Z0lIUm9ZWFF1ZDNKcGRHVW9jM1J5YVc1bkxDQmxibU52WkdsdVp5bGNiaUFnY21WMGRYSnVJSFJvWVhSY2JuMWNibHh1Wm5WdVkzUnBiMjRnWm5KdmJVOWlhbVZqZENBb2RHaGhkQ3dnYjJKcVpXTjBLU0I3WEc0Z0lHbG1JQ2hDZFdabVpYSXVhWE5DZFdabVpYSW9iMkpxWldOMEtTa2djbVYwZFhKdUlHWnliMjFDZFdabVpYSW9kR2hoZEN3Z2IySnFaV04wS1Z4dVhHNGdJR2xtSUNocGMwRnljbUY1S0c5aWFtVmpkQ2twSUhKbGRIVnliaUJtY205dFFYSnlZWGtvZEdoaGRDd2diMkpxWldOMEtWeHVYRzRnSUdsbUlDaHZZbXBsWTNRZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oyMTFjM1FnYzNSaGNuUWdkMmwwYUNCdWRXMWlaWElzSUdKMVptWmxjaXdnWVhKeVlYa2diM0lnYzNSeWFXNW5KeWxjYmlBZ2ZWeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1FYSnlZWGxDZFdabVpYSWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ2FXWWdLRzlpYW1WamRDNWlkV1ptWlhJZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVVKMVptWmxjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1p5YjIxVWVYQmxaRUZ5Y21GNUtIUm9ZWFFzSUc5aWFtVmpkQ2xjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRzlpYW1WamRDQnBibk4wWVc1alpXOW1JRUZ5Y21GNVFuVm1abVZ5S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm5KdmJVRnljbUY1UW5WbVptVnlLSFJvWVhRc0lHOWlhbVZqZENsY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCcFppQW9iMkpxWldOMExteGxibWQwYUNrZ2NtVjBkWEp1SUdaeWIyMUJjbkpoZVV4cGEyVW9kR2hoZEN3Z2IySnFaV04wS1Z4dVhHNGdJSEpsZEhWeWJpQm1jbTl0U25OdmJrOWlhbVZqZENoMGFHRjBMQ0J2WW1wbFkzUXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHWnliMjFDZFdabVpYSWdLSFJvWVhRc0lHSjFabVpsY2lrZ2UxeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ1kyaGxZMnRsWkNoaWRXWm1aWEl1YkdWdVozUm9LU0I4SURCY2JpQWdkR2hoZENBOUlHRnNiRzlqWVhSbEtIUm9ZWFFzSUd4bGJtZDBhQ2xjYmlBZ1luVm1abVZ5TG1OdmNIa29kR2hoZEN3Z01Dd2dNQ3dnYkdWdVozUm9LVnh1SUNCeVpYUjFjbTRnZEdoaGRGeHVmVnh1WEc1bWRXNWpkR2x2YmlCbWNtOXRRWEp5WVhrZ0tIUm9ZWFFzSUdGeWNtRjVLU0I3WEc0Z0lIWmhjaUJzWlc1bmRHZ2dQU0JqYUdWamEyVmtLR0Z5Y21GNUxteGxibWQwYUNrZ2ZDQXdYRzRnSUhSb1lYUWdQU0JoYkd4dlkyRjBaU2gwYUdGMExDQnNaVzVuZEdncFhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdVozUm9PeUJwSUNzOUlERXBJSHRjYmlBZ0lDQjBhR0YwVzJsZElEMGdZWEp5WVhsYmFWMGdKaUF5TlRWY2JpQWdmVnh1SUNCeVpYUjFjbTRnZEdoaGRGeHVmVnh1WEc0dkx5QkVkWEJzYVdOaGRHVWdiMllnWm5KdmJVRnljbUY1S0NrZ2RHOGdhMlZsY0NCbWNtOXRRWEp5WVhrb0tTQnRiMjV2Ylc5eWNHaHBZeTVjYm1aMWJtTjBhVzl1SUdaeWIyMVVlWEJsWkVGeWNtRjVJQ2gwYUdGMExDQmhjbkpoZVNrZ2UxeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ1kyaGxZMnRsWkNoaGNuSmhlUzVzWlc1bmRHZ3BJSHdnTUZ4dUlDQjBhR0YwSUQwZ1lXeHNiMk5oZEdVb2RHaGhkQ3dnYkdWdVozUm9LVnh1SUNBdkx5QlVjblZ1WTJGMGFXNW5JSFJvWlNCbGJHVnRaVzUwY3lCcGN5QndjbTlpWVdKc2VTQnViM1FnZDJoaGRDQndaVzl3YkdVZ1pYaHdaV04wSUdaeWIyMGdkSGx3WldSY2JpQWdMeThnWVhKeVlYbHpJSGRwZEdnZ1FsbFVSVk5mVUVWU1gwVk1SVTFGVGxRZ1BpQXhJR0oxZENCcGRDZHpJR052YlhCaGRHbGliR1VnZDJsMGFDQjBhR1VnWW1Wb1lYWnBiM0pjYmlBZ0x5OGdiMllnZEdobElHOXNaQ0JDZFdabVpYSWdZMjl1YzNSeWRXTjBiM0l1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1WjNSb095QnBJQ3M5SURFcElIdGNiaUFnSUNCMGFHRjBXMmxkSUQwZ1lYSnlZWGxiYVYwZ0ppQXlOVFZjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkR2hoZEZ4dWZWeHVYRzVtZFc1amRHbHZiaUJtY205dFFYSnlZWGxDZFdabVpYSWdLSFJvWVhRc0lHRnljbUY1S1NCN1hHNGdJR2xtSUNoQ2RXWm1aWEl1VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkNrZ2UxeHVJQ0FnSUM4dklGSmxkSFZ5YmlCaGJpQmhkV2R0Wlc1MFpXUWdZRlZwYm5RNFFYSnlZWGxnSUdsdWMzUmhibU5sTENCbWIzSWdZbVZ6ZENCd1pYSm1iM0p0WVc1alpWeHVJQ0FnSUdGeWNtRjVMbUo1ZEdWTVpXNW5kR2hjYmlBZ0lDQjBhR0YwSUQwZ1FuVm1abVZ5TGw5aGRXZHRaVzUwS0c1bGR5QlZhVzUwT0VGeWNtRjVLR0Z5Y21GNUtTbGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJHWVd4c1ltRmphem9nVW1WMGRYSnVJR0Z1SUc5aWFtVmpkQ0JwYm5OMFlXNWpaU0J2WmlCMGFHVWdRblZtWm1WeUlHTnNZWE56WEc0Z0lDQWdkR2hoZENBOUlHWnliMjFVZVhCbFpFRnljbUY1S0hSb1lYUXNJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHRnljbUY1S1NsY2JpQWdmVnh1SUNCeVpYUjFjbTRnZEdoaGRGeHVmVnh1WEc1bWRXNWpkR2x2YmlCbWNtOXRRWEp5WVhsTWFXdGxJQ2gwYUdGMExDQmhjbkpoZVNrZ2UxeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ1kyaGxZMnRsWkNoaGNuSmhlUzVzWlc1bmRHZ3BJSHdnTUZ4dUlDQjBhR0YwSUQwZ1lXeHNiMk5oZEdVb2RHaGhkQ3dnYkdWdVozUm9LVnh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGxibWQwYURzZ2FTQXJQU0F4S1NCN1hHNGdJQ0FnZEdoaGRGdHBYU0E5SUdGeWNtRjVXMmxkSUNZZ01qVTFYRzRnSUgxY2JpQWdjbVYwZFhKdUlIUm9ZWFJjYm4xY2JseHVMeThnUkdWelpYSnBZV3hwZW1VZ2V5QjBlWEJsT2lBblFuVm1abVZ5Snl3Z1pHRjBZVG9nV3pFc01pd3pMQzR1TGwwZ2ZTQnBiblJ2SUdFZ1FuVm1abVZ5SUc5aWFtVmpkQzVjYmk4dklGSmxkSFZ5Ym5NZ1lTQjZaWEp2TFd4bGJtZDBhQ0JpZFdabVpYSWdabTl5SUdsdWNIVjBjeUIwYUdGMElHUnZiaWQwSUdOdmJtWnZjbTBnZEc4Z2RHaGxJSE53WldNdVhHNW1kVzVqZEdsdmJpQm1jbTl0U25OdmJrOWlhbVZqZENBb2RHaGhkQ3dnYjJKcVpXTjBLU0I3WEc0Z0lIWmhjaUJoY25KaGVWeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ01GeHVYRzRnSUdsbUlDaHZZbXBsWTNRdWRIbHdaU0E5UFQwZ0owSjFabVpsY2ljZ0ppWWdhWE5CY25KaGVTaHZZbXBsWTNRdVpHRjBZU2twSUh0Y2JpQWdJQ0JoY25KaGVTQTlJRzlpYW1WamRDNWtZWFJoWEc0Z0lDQWdiR1Z1WjNSb0lEMGdZMmhsWTJ0bFpDaGhjbkpoZVM1c1pXNW5kR2dwSUh3Z01GeHVJQ0I5WEc0Z0lIUm9ZWFFnUFNCaGJHeHZZMkYwWlNoMGFHRjBMQ0JzWlc1bmRHZ3BYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzVuZEdnN0lHa2dLejBnTVNrZ2UxeHVJQ0FnSUhSb1lYUmJhVjBnUFNCaGNuSmhlVnRwWFNBbUlESTFOVnh1SUNCOVhHNGdJSEpsZEhWeWJpQjBhR0YwWEc1OVhHNWNibWxtSUNoQ2RXWm1aWEl1VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkNrZ2UxeHVJQ0JDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbDlmY0hKdmRHOWZYeUE5SUZWcGJuUTRRWEp5WVhrdWNISnZkRzkwZVhCbFhHNGdJRUoxWm1abGNpNWZYM0J5YjNSdlgxOGdQU0JWYVc1ME9FRnljbUY1WEc1OUlHVnNjMlVnZTF4dUlDQXZMeUJ3Y21VdGMyVjBJR1p2Y2lCMllXeDFaWE1nZEdoaGRDQnRZWGtnWlhocGMzUWdhVzRnZEdobElHWjFkSFZ5WlZ4dUlDQkNkV1ptWlhJdWNISnZkRzkwZVhCbExteGxibWQwYUNBOUlIVnVaR1ZtYVc1bFpGeHVJQ0JDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkJoY21WdWRDQTlJSFZ1WkdWbWFXNWxaRnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhiR3h2WTJGMFpTQW9kR2hoZEN3Z2JHVnVaM1JvS1NCN1hHNGdJR2xtSUNoQ2RXWm1aWEl1VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkNrZ2UxeHVJQ0FnSUM4dklGSmxkSFZ5YmlCaGJpQmhkV2R0Wlc1MFpXUWdZRlZwYm5RNFFYSnlZWGxnSUdsdWMzUmhibU5sTENCbWIzSWdZbVZ6ZENCd1pYSm1iM0p0WVc1alpWeHVJQ0FnSUhSb1lYUWdQU0JDZFdabVpYSXVYMkYxWjIxbGJuUW9ibVYzSUZWcGJuUTRRWEp5WVhrb2JHVnVaM1JvS1NsY2JpQWdJQ0IwYUdGMExsOWZjSEp2ZEc5Zlh5QTlJRUoxWm1abGNpNXdjbTkwYjNSNWNHVmNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJHWVd4c1ltRmphem9nVW1WMGRYSnVJR0Z1SUc5aWFtVmpkQ0JwYm5OMFlXNWpaU0J2WmlCMGFHVWdRblZtWm1WeUlHTnNZWE56WEc0Z0lDQWdkR2hoZEM1c1pXNW5kR2dnUFNCc1pXNW5kR2hjYmlBZ0lDQjBhR0YwTGw5cGMwSjFabVpsY2lBOUlIUnlkV1ZjYmlBZ2ZWeHVYRzRnSUhaaGNpQm1jbTl0VUc5dmJDQTlJR3hsYm1kMGFDQWhQVDBnTUNBbUppQnNaVzVuZEdnZ1BEMGdRblZtWm1WeUxuQnZiMnhUYVhwbElENCtQaUF4WEc0Z0lHbG1JQ2htY205dFVHOXZiQ2tnZEdoaGRDNXdZWEpsYm5RZ1BTQnliMjkwVUdGeVpXNTBYRzVjYmlBZ2NtVjBkWEp1SUhSb1lYUmNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyaGxZMnRsWkNBb2JHVnVaM1JvS1NCN1hHNGdJQzh2SUU1dmRHVTZJR05oYm01dmRDQjFjMlVnWUd4bGJtZDBhQ0E4SUd0TllYaE1aVzVuZEdoZ0lHaGxjbVVnWW1WallYVnpaU0IwYUdGMElHWmhhV3h6SUhkb1pXNWNiaUFnTHk4Z2JHVnVaM1JvSUdseklFNWhUaUFvZDJocFkyZ2dhWE1nYjNSb1pYSjNhWE5sSUdOdlpYSmpaV1FnZEc4Z2VtVnlieTRwWEc0Z0lHbG1JQ2hzWlc1bmRHZ2dQajBnYTAxaGVFeGxibWQwYUNncEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGSmhibWRsUlhKeWIzSW9KMEYwZEdWdGNIUWdkRzhnWVd4c2IyTmhkR1VnUW5WbVptVnlJR3hoY21kbGNpQjBhR0Z1SUcxaGVHbHRkVzBnSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ozTnBlbVU2SURCNEp5QXJJR3ROWVhoTVpXNW5kR2dvS1M1MGIxTjBjbWx1WnlneE5pa2dLeUFuSUdKNWRHVnpKeWxjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiR1Z1WjNSb0lId2dNRnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQlRiRzkzUW5WbVptVnlJQ2h6ZFdKcVpXTjBMQ0JsYm1OdlpHbHVaeWtnZTF4dUlDQnBaaUFvSVNoMGFHbHpJR2x1YzNSaGJtTmxiMllnVTJ4dmQwSjFabVpsY2lrcElISmxkSFZ5YmlCdVpYY2dVMnh2ZDBKMVptWmxjaWh6ZFdKcVpXTjBMQ0JsYm1OdlpHbHVaeWxjYmx4dUlDQjJZWElnWW5WbUlEMGdibVYzSUVKMVptWmxjaWh6ZFdKcVpXTjBMQ0JsYm1OdlpHbHVaeWxjYmlBZ1pHVnNaWFJsSUdKMVppNXdZWEpsYm5SY2JpQWdjbVYwZFhKdUlHSjFabHh1ZlZ4dVhHNUNkV1ptWlhJdWFYTkNkV1ptWlhJZ1BTQm1kVzVqZEdsdmJpQnBjMEoxWm1abGNpQW9ZaWtnZTF4dUlDQnlaWFIxY200Z0lTRW9ZaUFoUFNCdWRXeHNJQ1ltSUdJdVgybHpRblZtWm1WeUtWeHVmVnh1WEc1Q2RXWm1aWEl1WTI5dGNHRnlaU0E5SUdaMWJtTjBhVzl1SUdOdmJYQmhjbVVnS0dFc0lHSXBJSHRjYmlBZ2FXWWdLQ0ZDZFdabVpYSXVhWE5DZFdabVpYSW9ZU2tnZkh3Z0lVSjFabVpsY2k1cGMwSjFabVpsY2loaUtTa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMEZ5WjNWdFpXNTBjeUJ0ZFhOMElHSmxJRUoxWm1abGNuTW5LVnh1SUNCOVhHNWNiaUFnYVdZZ0tHRWdQVDA5SUdJcElISmxkSFZ5YmlBd1hHNWNiaUFnZG1GeUlIZ2dQU0JoTG14bGJtZDBhRnh1SUNCMllYSWdlU0E5SUdJdWJHVnVaM1JvWEc1Y2JpQWdkbUZ5SUdrZ1BTQXdYRzRnSUhaaGNpQnNaVzRnUFNCTllYUm9MbTFwYmloNExDQjVLVnh1SUNCM2FHbHNaU0FvYVNBOElHeGxiaWtnZTF4dUlDQWdJR2xtSUNoaFcybGRJQ0U5UFNCaVcybGRLU0JpY21WaGExeHVYRzRnSUNBZ0t5dHBYRzRnSUgxY2JseHVJQ0JwWmlBb2FTQWhQVDBnYkdWdUtTQjdYRzRnSUNBZ2VDQTlJR0ZiYVYxY2JpQWdJQ0I1SUQwZ1lsdHBYVnh1SUNCOVhHNWNiaUFnYVdZZ0tIZ2dQQ0I1S1NCeVpYUjFjbTRnTFRGY2JpQWdhV1lnS0hrZ1BDQjRLU0J5WlhSMWNtNGdNVnh1SUNCeVpYUjFjbTRnTUZ4dWZWeHVYRzVDZFdabVpYSXVhWE5GYm1OdlpHbHVaeUE5SUdaMWJtTjBhVzl1SUdselJXNWpiMlJwYm1jZ0tHVnVZMjlrYVc1bktTQjdYRzRnSUhOM2FYUmphQ0FvVTNSeWFXNW5LR1Z1WTI5a2FXNW5LUzUwYjB4dmQyVnlRMkZ6WlNncEtTQjdYRzRnSUNBZ1kyRnpaU0FuYUdWNEp6cGNiaUFnSUNCallYTmxJQ2QxZEdZNEp6cGNiaUFnSUNCallYTmxJQ2QxZEdZdE9DYzZYRzRnSUNBZ1kyRnpaU0FuWVhOamFXa25PbHh1SUNBZ0lHTmhjMlVnSjJKcGJtRnllU2M2WEc0Z0lDQWdZMkZ6WlNBblltRnpaVFkwSnpwY2JpQWdJQ0JqWVhObElDZHlZWGNuT2x4dUlDQWdJR05oYzJVZ0ozVmpjekluT2x4dUlDQWdJR05oYzJVZ0ozVmpjeTB5SnpwY2JpQWdJQ0JqWVhObElDZDFkR1l4Tm14bEp6cGNiaUFnSUNCallYTmxJQ2QxZEdZdE1UWnNaU2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlZ4dUlDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlZjYmlBZ2ZWeHVmVnh1WEc1Q2RXWm1aWEl1WTI5dVkyRjBJRDBnWm5WdVkzUnBiMjRnWTI5dVkyRjBJQ2hzYVhOMExDQnNaVzVuZEdncElIdGNiaUFnYVdZZ0tDRnBjMEZ5Y21GNUtHeHBjM1FwS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZHNhWE4wSUdGeVozVnRaVzUwSUcxMWMzUWdZbVVnWVc0Z1FYSnlZWGtnYjJZZ1FuVm1abVZ5Y3k0bktWeHVYRzRnSUdsbUlDaHNhWE4wTG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dRblZtWm1WeUtEQXBYRzRnSUgxY2JseHVJQ0IyWVhJZ2FWeHVJQ0JwWmlBb2JHVnVaM1JvSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQnNaVzVuZEdnZ1BTQXdYRzRnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUd4cGMzUXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUd4bGJtZDBhQ0FyUFNCc2FYTjBXMmxkTG14bGJtZDBhRnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSFpoY2lCaWRXWWdQU0J1WlhjZ1FuVm1abVZ5S0d4bGJtZDBhQ2xjYmlBZ2RtRnlJSEJ2Y3lBOUlEQmNiaUFnWm05eUlDaHBJRDBnTURzZ2FTQThJR3hwYzNRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQjJZWElnYVhSbGJTQTlJR3hwYzNSYmFWMWNiaUFnSUNCcGRHVnRMbU52Y0hrb1luVm1MQ0J3YjNNcFhHNGdJQ0FnY0c5eklDczlJR2wwWlcwdWJHVnVaM1JvWEc0Z0lIMWNiaUFnY21WMGRYSnVJR0oxWmx4dWZWeHVYRzVtZFc1amRHbHZiaUJpZVhSbFRHVnVaM1JvSUNoemRISnBibWNzSUdWdVkyOWthVzVuS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnYzNSeWFXNW5JQ0U5UFNBbmMzUnlhVzVuSnlrZ2MzUnlhVzVuSUQwZ0p5Y2dLeUJ6ZEhKcGJtZGNibHh1SUNCMllYSWdiR1Z1SUQwZ2MzUnlhVzVuTG14bGJtZDBhRnh1SUNCcFppQW9iR1Z1SUQwOVBTQXdLU0J5WlhSMWNtNGdNRnh1WEc0Z0lDOHZJRlZ6WlNCaElHWnZjaUJzYjI5d0lIUnZJR0YyYjJsa0lISmxZM1Z5YzJsdmJseHVJQ0IyWVhJZ2JHOTNaWEpsWkVOaGMyVWdQU0JtWVd4elpWeHVJQ0JtYjNJZ0tEczdLU0I3WEc0Z0lDQWdjM2RwZEdOb0lDaGxibU52WkdsdVp5a2dlMXh1SUNBZ0lDQWdZMkZ6WlNBbllYTmphV2tuT2x4dUlDQWdJQ0FnWTJGelpTQW5ZbWx1WVhKNUp6cGNiaUFnSUNBZ0lDOHZJRVJsY0hKbFkyRjBaV1JjYmlBZ0lDQWdJR05oYzJVZ0ozSmhkeWM2WEc0Z0lDQWdJQ0JqWVhObElDZHlZWGR6SnpwY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUd4bGJseHVJQ0FnSUNBZ1kyRnpaU0FuZFhSbU9DYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMWRHWXRPQ2M2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIxZEdZNFZHOUNlWFJsY3loemRISnBibWNwTG14bGJtZDBhRnh1SUNBZ0lDQWdZMkZ6WlNBbmRXTnpNaWM2WEc0Z0lDQWdJQ0JqWVhObElDZDFZM010TWljNlhHNGdJQ0FnSUNCallYTmxJQ2QxZEdZeE5teGxKenBjYmlBZ0lDQWdJR05oYzJVZ0ozVjBaaTB4Tm14bEp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHeGxiaUFxSURKY2JpQWdJQ0FnSUdOaGMyVWdKMmhsZUNjNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCc1pXNGdQajQrSURGY2JpQWdJQ0FnSUdOaGMyVWdKMkpoYzJVMk5DYzZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmlZWE5sTmpSVWIwSjVkR1Z6S0hOMGNtbHVaeWt1YkdWdVozUm9YRzRnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQnBaaUFvYkc5M1pYSmxaRU5oYzJVcElISmxkSFZ5YmlCMWRHWTRWRzlDZVhSbGN5aHpkSEpwYm1jcExteGxibWQwYUNBdkx5QmhjM04xYldVZ2RYUm1PRnh1SUNBZ0lDQWdJQ0JsYm1OdlpHbHVaeUE5SUNnbkp5QXJJR1Z1WTI5a2FXNW5LUzUwYjB4dmQyVnlRMkZ6WlNncFhHNGdJQ0FnSUNBZ0lHeHZkMlZ5WldSRFlYTmxJRDBnZEhKMVpWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVFuVm1abVZ5TG1KNWRHVk1aVzVuZEdnZ1BTQmllWFJsVEdWdVozUm9YRzVjYm1aMWJtTjBhVzl1SUhOc2IzZFViMU4wY21sdVp5QW9aVzVqYjJScGJtY3NJSE4wWVhKMExDQmxibVFwSUh0Y2JpQWdkbUZ5SUd4dmQyVnlaV1JEWVhObElEMGdabUZzYzJWY2JseHVJQ0J6ZEdGeWRDQTlJSE4wWVhKMElId2dNRnh1SUNCbGJtUWdQU0JsYm1RZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNCbGJtUWdQVDA5SUVsdVptbHVhWFI1SUQ4Z2RHaHBjeTVzWlc1bmRHZ2dPaUJsYm1RZ2ZDQXdYRzVjYmlBZ2FXWWdLQ0ZsYm1OdlpHbHVaeWtnWlc1amIyUnBibWNnUFNBbmRYUm1PQ2RjYmlBZ2FXWWdLSE4wWVhKMElEd2dNQ2tnYzNSaGNuUWdQU0F3WEc0Z0lHbG1JQ2hsYm1RZ1BpQjBhR2x6TG14bGJtZDBhQ2tnWlc1a0lEMGdkR2hwY3k1c1pXNW5kR2hjYmlBZ2FXWWdLR1Z1WkNBOFBTQnpkR0Z5ZENrZ2NtVjBkWEp1SUNjblhHNWNiaUFnZDJocGJHVWdLSFJ5ZFdVcElIdGNiaUFnSUNCemQybDBZMmdnS0dWdVkyOWthVzVuS1NCN1hHNGdJQ0FnSUNCallYTmxJQ2RvWlhnbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FHVjRVMnhwWTJVb2RHaHBjeXdnYzNSaGNuUXNJR1Z1WkNsY2JseHVJQ0FnSUNBZ1kyRnpaU0FuZFhSbU9DYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMWRHWXRPQ2M2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIxZEdZNFUyeHBZMlVvZEdocGN5d2djM1JoY25Rc0lHVnVaQ2xjYmx4dUlDQWdJQ0FnWTJGelpTQW5ZWE5qYVdrbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYTmphV2xUYkdsalpTaDBhR2x6TENCemRHRnlkQ3dnWlc1a0tWeHVYRzRnSUNBZ0lDQmpZWE5sSUNkaWFXNWhjbmtuT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWW1sdVlYSjVVMnhwWTJVb2RHaHBjeXdnYzNSaGNuUXNJR1Z1WkNsY2JseHVJQ0FnSUNBZ1kyRnpaU0FuWW1GelpUWTBKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0poYzJVMk5GTnNhV05sS0hSb2FYTXNJSE4wWVhKMExDQmxibVFwWEc1Y2JpQWdJQ0FnSUdOaGMyVWdKM1ZqY3pJbk9seHVJQ0FnSUNBZ1kyRnpaU0FuZFdOekxUSW5PbHh1SUNBZ0lDQWdZMkZ6WlNBbmRYUm1NVFpzWlNjNlhHNGdJQ0FnSUNCallYTmxJQ2QxZEdZdE1UWnNaU2M2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIxZEdZeE5teGxVMnhwWTJVb2RHaHBjeXdnYzNSaGNuUXNJR1Z1WkNsY2JseHVJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ2FXWWdLR3h2ZDJWeVpXUkRZWE5sS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZFZibXR1YjNkdUlHVnVZMjlrYVc1bk9pQW5JQ3NnWlc1amIyUnBibWNwWEc0Z0lDQWdJQ0FnSUdWdVkyOWthVzVuSUQwZ0tHVnVZMjlrYVc1bklDc2dKeWNwTG5SdlRHOTNaWEpEWVhObEtDbGNiaUFnSUNBZ0lDQWdiRzkzWlhKbFpFTmhjMlVnUFNCMGNuVmxYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaUIwYjFOMGNtbHVaeUFvS1NCN1hHNGdJSFpoY2lCc1pXNW5kR2dnUFNCMGFHbHpMbXhsYm1kMGFDQjhJREJjYmlBZ2FXWWdLR3hsYm1kMGFDQTlQVDBnTUNrZ2NtVjBkWEp1SUNjblhHNGdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQwOVBTQXdLU0J5WlhSMWNtNGdkWFJtT0ZOc2FXTmxLSFJvYVhNc0lEQXNJR3hsYm1kMGFDbGNiaUFnY21WMGRYSnVJSE5zYjNkVWIxTjBjbWx1Wnk1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdVpYRjFZV3h6SUQwZ1puVnVZM1JwYjI0Z1pYRjFZV3h6SUNoaUtTQjdYRzRnSUdsbUlDZ2hRblZtWm1WeUxtbHpRblZtWm1WeUtHSXBLU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkQmNtZDFiV1Z1ZENCdGRYTjBJR0psSUdFZ1FuVm1abVZ5SnlsY2JpQWdhV1lnS0hSb2FYTWdQVDA5SUdJcElISmxkSFZ5YmlCMGNuVmxYRzRnSUhKbGRIVnliaUJDZFdabVpYSXVZMjl0Y0dGeVpTaDBhR2x6TENCaUtTQTlQVDBnTUZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbWx1YzNCbFkzUWdQU0JtZFc1amRHbHZiaUJwYm5Od1pXTjBJQ2dwSUh0Y2JpQWdkbUZ5SUhOMGNpQTlJQ2NuWEc0Z0lIWmhjaUJ0WVhnZ1BTQmxlSEJ2Y25SekxrbE9VMUJGUTFSZlRVRllYMEpaVkVWVFhHNGdJR2xtSUNoMGFHbHpMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0J6ZEhJZ1BTQjBhR2x6TG5SdlUzUnlhVzVuS0Nkb1pYZ25MQ0F3TENCdFlYZ3BMbTFoZEdOb0tDOHVleko5TDJjcExtcHZhVzRvSnlBbktWeHVJQ0FnSUdsbUlDaDBhR2x6TG14bGJtZDBhQ0ErSUcxaGVDa2djM1J5SUNzOUlDY2dMaTR1SUNkY2JpQWdmVnh1SUNCeVpYUjFjbTRnSnp4Q2RXWm1aWElnSnlBcklITjBjaUFySUNjK0oxeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1OdmJYQmhjbVVnUFNCbWRXNWpkR2x2YmlCamIyMXdZWEpsSUNoaUtTQjdYRzRnSUdsbUlDZ2hRblZtWm1WeUxtbHpRblZtWm1WeUtHSXBLU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkQmNtZDFiV1Z1ZENCdGRYTjBJR0psSUdFZ1FuVm1abVZ5SnlsY2JpQWdhV1lnS0hSb2FYTWdQVDA5SUdJcElISmxkSFZ5YmlBd1hHNGdJSEpsZEhWeWJpQkNkV1ptWlhJdVkyOXRjR0Z5WlNoMGFHbHpMQ0JpS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbWx1WkdWNFQyWWdQU0JtZFc1amRHbHZiaUJwYm1SbGVFOW1JQ2gyWVd3c0lHSjVkR1ZQWm1aelpYUXBJSHRjYmlBZ2FXWWdLR0o1ZEdWUFptWnpaWFFnUGlBd2VEZG1abVptWm1abUtTQmllWFJsVDJabWMyVjBJRDBnTUhnM1ptWm1abVptWmx4dUlDQmxiSE5sSUdsbUlDaGllWFJsVDJabWMyVjBJRHdnTFRCNE9EQXdNREF3TURBcElHSjVkR1ZQWm1aelpYUWdQU0F0TUhnNE1EQXdNREF3TUZ4dUlDQmllWFJsVDJabWMyVjBJRDQrUFNBd1hHNWNiaUFnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY200Z0xURmNiaUFnYVdZZ0tHSjVkR1ZQWm1aelpYUWdQajBnZEdocGN5NXNaVzVuZEdncElISmxkSFZ5YmlBdE1WeHVYRzRnSUM4dklFNWxaMkYwYVhabElHOW1abk5sZEhNZ2MzUmhjblFnWm5KdmJTQjBhR1VnWlc1a0lHOW1JSFJvWlNCaWRXWm1aWEpjYmlBZ2FXWWdLR0o1ZEdWUFptWnpaWFFnUENBd0tTQmllWFJsVDJabWMyVjBJRDBnVFdGMGFDNXRZWGdvZEdocGN5NXNaVzVuZEdnZ0t5QmllWFJsVDJabWMyVjBMQ0F3S1Z4dVhHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc0lEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJR2xtSUNoMllXd3ViR1Z1WjNSb0lEMDlQU0F3S1NCeVpYUjFjbTRnTFRFZ0x5OGdjM0JsWTJsaGJDQmpZWE5sT2lCc2IyOXJhVzVuSUdadmNpQmxiWEIwZVNCemRISnBibWNnWVd4M1lYbHpJR1poYVd4elhHNGdJQ0FnY21WMGRYSnVJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVhVzVrWlhoUFppNWpZV3hzS0hSb2FYTXNJSFpoYkN3Z1lubDBaVTltWm5ObGRDbGNiaUFnZlZ4dUlDQnBaaUFvUW5WbVptVnlMbWx6UW5WbVptVnlLSFpoYkNrcElIdGNiaUFnSUNCeVpYUjFjbTRnWVhKeVlYbEpibVJsZUU5bUtIUm9hWE1zSUhaaGJDd2dZbmwwWlU5bVpuTmxkQ2xjYmlBZ2ZWeHVJQ0JwWmlBb2RIbHdaVzltSUhaaGJDQTlQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0JwWmlBb1FuVm1abVZ5TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRZ0ppWWdWV2x1ZERoQmNuSmhlUzV3Y205MGIzUjVjR1V1YVc1a1pYaFBaaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlGVnBiblE0UVhKeVlYa3VjSEp2ZEc5MGVYQmxMbWx1WkdWNFQyWXVZMkZzYkNoMGFHbHpMQ0IyWVd3c0lHSjVkR1ZQWm1aelpYUXBYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJoY25KaGVVbHVaR1Y0VDJZb2RHaHBjeXdnV3lCMllXd2dYU3dnWW5sMFpVOW1abk5sZENsY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHRnljbUY1U1c1a1pYaFBaaUFvWVhKeUxDQjJZV3dzSUdKNWRHVlBabVp6WlhRcElIdGNiaUFnSUNCMllYSWdabTkxYm1SSmJtUmxlQ0E5SUMweFhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR0o1ZEdWUFptWnpaWFFnS3lCcElEd2dZWEp5TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnBaaUFvWVhKeVcySjVkR1ZQWm1aelpYUWdLeUJwWFNBOVBUMGdkbUZzVzJadmRXNWtTVzVrWlhnZ1BUMDlJQzB4SUQ4Z01DQTZJR2tnTFNCbWIzVnVaRWx1WkdWNFhTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1ptOTFibVJKYm1SbGVDQTlQVDBnTFRFcElHWnZkVzVrU1c1a1pYZ2dQU0JwWEc0Z0lDQWdJQ0FnSUdsbUlDaHBJQzBnWm05MWJtUkpibVJsZUNBcklERWdQVDA5SUhaaGJDNXNaVzVuZEdncElISmxkSFZ5YmlCaWVYUmxUMlptYzJWMElDc2dabTkxYm1SSmJtUmxlRnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdabTkxYm1SSmJtUmxlQ0E5SUMweFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQXRNVnh1SUNCOVhHNWNiaUFnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbmRtRnNJRzExYzNRZ1ltVWdjM1J5YVc1bkxDQnVkVzFpWlhJZ2IzSWdRblZtWm1WeUp5bGNibjFjYmx4dUx5OGdZR2RsZEdBZ2FYTWdaR1Z3Y21WallYUmxaRnh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzVuWlhRZ1BTQm1kVzVqZEdsdmJpQm5aWFFnS0c5bVpuTmxkQ2tnZTF4dUlDQmpiMjV6YjJ4bExteHZaeWduTG1kbGRDZ3BJR2x6SUdSbGNISmxZMkYwWldRdUlFRmpZMlZ6Y3lCMWMybHVaeUJoY25KaGVTQnBibVJsZUdWeklHbHVjM1JsWVdRdUp5bGNiaUFnY21WMGRYSnVJSFJvYVhNdWNtVmhaRlZKYm5RNEtHOW1abk5sZENsY2JuMWNibHh1THk4Z1lITmxkR0FnYVhNZ1pHVndjbVZqWVhSbFpGeHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXpaWFFnUFNCbWRXNWpkR2x2YmlCelpYUWdLSFlzSUc5bVpuTmxkQ2tnZTF4dUlDQmpiMjV6YjJ4bExteHZaeWduTG5ObGRDZ3BJR2x6SUdSbGNISmxZMkYwWldRdUlFRmpZMlZ6Y3lCMWMybHVaeUJoY25KaGVTQnBibVJsZUdWeklHbHVjM1JsWVdRdUp5bGNiaUFnY21WMGRYSnVJSFJvYVhNdWQzSnBkR1ZWU1c1ME9DaDJMQ0J2Wm1aelpYUXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHaGxlRmR5YVhSbElDaGlkV1lzSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BJSHRjYmlBZ2IyWm1jMlYwSUQwZ1RuVnRZbVZ5S0c5bVpuTmxkQ2tnZkh3Z01GeHVJQ0IyWVhJZ2NtVnRZV2x1YVc1bklEMGdZblZtTG14bGJtZDBhQ0F0SUc5bVpuTmxkRnh1SUNCcFppQW9JV3hsYm1kMGFDa2dlMXh1SUNBZ0lHeGxibWQwYUNBOUlISmxiV0ZwYm1sdVoxeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHeGxibWQwYUNBOUlFNTFiV0psY2loc1pXNW5kR2dwWEc0Z0lDQWdhV1lnS0d4bGJtZDBhQ0ErSUhKbGJXRnBibWx1WnlrZ2UxeHVJQ0FnSUNBZ2JHVnVaM1JvSUQwZ2NtVnRZV2x1YVc1blhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OGdiWFZ6ZENCaVpTQmhiaUJsZG1WdUlHNTFiV0psY2lCdlppQmthV2RwZEhOY2JpQWdkbUZ5SUhOMGNreGxiaUE5SUhOMGNtbHVaeTVzWlc1bmRHaGNiaUFnYVdZZ0tITjBja3hsYmlBbElESWdJVDA5SURBcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblNXNTJZV3hwWkNCb1pYZ2djM1J5YVc1bkp5bGNibHh1SUNCcFppQW9iR1Z1WjNSb0lENGdjM1J5VEdWdUlDOGdNaWtnZTF4dUlDQWdJR3hsYm1kMGFDQTlJSE4wY2t4bGJpQXZJREpjYmlBZ2ZWeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2RtRnlJSEJoY25ObFpDQTlJSEJoY25ObFNXNTBLSE4wY21sdVp5NXpkV0p6ZEhJb2FTQXFJRElzSURJcExDQXhOaWxjYmlBZ0lDQnBaaUFvYVhOT1lVNG9jR0Z5YzJWa0tTa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZEpiblpoYkdsa0lHaGxlQ0J6ZEhKcGJtY25LVnh1SUNBZ0lHSjFabHR2Wm1aelpYUWdLeUJwWFNBOUlIQmhjbk5sWkZ4dUlDQjlYRzRnSUhKbGRIVnliaUJwWEc1OVhHNWNibVoxYm1OMGFXOXVJSFYwWmpoWGNtbDBaU0FvWW5WbUxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1NCN1hHNGdJSEpsZEhWeWJpQmliR2wwUW5WbVptVnlLSFYwWmpoVWIwSjVkR1Z6S0hOMGNtbHVaeXdnWW5WbUxteGxibWQwYUNBdElHOW1abk5sZENrc0lHSjFaaXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRnpZMmxwVjNKcGRHVWdLR0oxWml3Z2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ2tnZTF4dUlDQnlaWFIxY200Z1lteHBkRUoxWm1abGNpaGhjMk5wYVZSdlFubDBaWE1vYzNSeWFXNW5LU3dnWW5WbUxDQnZabVp6WlhRc0lHeGxibWQwYUNsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWW1sdVlYSjVWM0pwZEdVZ0tHSjFaaXdnYzNSeWFXNW5MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDa2dlMXh1SUNCeVpYUjFjbTRnWVhOamFXbFhjbWwwWlNoaWRXWXNJSE4wY21sdVp5d2diMlptYzJWMExDQnNaVzVuZEdncFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdKaGMyVTJORmR5YVhSbElDaGlkV1lzSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BJSHRjYmlBZ2NtVjBkWEp1SUdKc2FYUkNkV1ptWlhJb1ltRnpaVFkwVkc5Q2VYUmxjeWh6ZEhKcGJtY3BMQ0JpZFdZc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUIxWTNNeVYzSnBkR1VnS0dKMVppd2djM1J5YVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUNrZ2UxeHVJQ0J5WlhSMWNtNGdZbXhwZEVKMVptWmxjaWgxZEdZeE5teGxWRzlDZVhSbGN5aHpkSEpwYm1jc0lHSjFaaTVzWlc1bmRHZ2dMU0J2Wm1aelpYUXBMQ0JpZFdZc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbElEMGdablZ1WTNScGIyNGdkM0pwZEdVZ0tITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dzSUdWdVkyOWthVzVuS1NCN1hHNGdJQzh2SUVKMVptWmxjaU4zY21sMFpTaHpkSEpwYm1jcFhHNGdJR2xtSUNodlptWnpaWFFnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lHVnVZMjlrYVc1bklEMGdKM1YwWmpnblhHNGdJQ0FnYkdWdVozUm9JRDBnZEdocGN5NXNaVzVuZEdoY2JpQWdJQ0J2Wm1aelpYUWdQU0F3WEc0Z0lDOHZJRUoxWm1abGNpTjNjbWwwWlNoemRISnBibWNzSUdWdVkyOWthVzVuS1Z4dUlDQjlJR1ZzYzJVZ2FXWWdLR3hsYm1kMGFDQTlQVDBnZFc1a1pXWnBibVZrSUNZbUlIUjVjR1Z2WmlCdlptWnpaWFFnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ1pXNWpiMlJwYm1jZ1BTQnZabVp6WlhSY2JpQWdJQ0JzWlc1bmRHZ2dQU0IwYUdsekxteGxibWQwYUZ4dUlDQWdJRzltWm5ObGRDQTlJREJjYmlBZ0x5OGdRblZtWm1WeUkzZHlhWFJsS0hOMGNtbHVaeXdnYjJabWMyVjBXeXdnYkdWdVozUm9YVnNzSUdWdVkyOWthVzVuWFNsY2JpQWdmU0JsYkhObElHbG1JQ2hwYzBacGJtbDBaU2h2Wm1aelpYUXBLU0I3WEc0Z0lDQWdiMlptYzJWMElEMGdiMlptYzJWMElId2dNRnh1SUNBZ0lHbG1JQ2hwYzBacGJtbDBaU2hzWlc1bmRHZ3BLU0I3WEc0Z0lDQWdJQ0JzWlc1bmRHZ2dQU0JzWlc1bmRHZ2dmQ0F3WEc0Z0lDQWdJQ0JwWmlBb1pXNWpiMlJwYm1jZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnWlc1amIyUnBibWNnUFNBbmRYUm1PQ2RjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1pXNWpiMlJwYm1jZ1BTQnNaVzVuZEdoY2JpQWdJQ0FnSUd4bGJtZDBhQ0E5SUhWdVpHVm1hVzVsWkZ4dUlDQWdJSDFjYmlBZ0x5OGdiR1ZuWVdONUlIZHlhWFJsS0hOMGNtbHVaeXdnWlc1amIyUnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LU0F0SUhKbGJXOTJaU0JwYmlCMk1DNHhNMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFpoY2lCemQyRndJRDBnWlc1amIyUnBibWRjYmlBZ0lDQmxibU52WkdsdVp5QTlJRzltWm5ObGRGeHVJQ0FnSUc5bVpuTmxkQ0E5SUd4bGJtZDBhQ0I4SURCY2JpQWdJQ0JzWlc1bmRHZ2dQU0J6ZDJGd1hHNGdJSDFjYmx4dUlDQjJZWElnY21WdFlXbHVhVzVuSUQwZ2RHaHBjeTVzWlc1bmRHZ2dMU0J2Wm1aelpYUmNiaUFnYVdZZ0tHeGxibWQwYUNBOVBUMGdkVzVrWldacGJtVmtJSHg4SUd4bGJtZDBhQ0ErSUhKbGJXRnBibWx1WnlrZ2JHVnVaM1JvSUQwZ2NtVnRZV2x1YVc1blhHNWNiaUFnYVdZZ0tDaHpkSEpwYm1jdWJHVnVaM1JvSUQ0Z01DQW1KaUFvYkdWdVozUm9JRHdnTUNCOGZDQnZabVp6WlhRZ1BDQXdLU2tnZkh3Z2IyWm1jMlYwSUQ0Z2RHaHBjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWduWVhSMFpXMXdkQ0IwYnlCM2NtbDBaU0J2ZFhSemFXUmxJR0oxWm1abGNpQmliM1Z1WkhNbktWeHVJQ0I5WEc1Y2JpQWdhV1lnS0NGbGJtTnZaR2x1WnlrZ1pXNWpiMlJwYm1jZ1BTQW5kWFJtT0NkY2JseHVJQ0IyWVhJZ2JHOTNaWEpsWkVOaGMyVWdQU0JtWVd4elpWeHVJQ0JtYjNJZ0tEczdLU0I3WEc0Z0lDQWdjM2RwZEdOb0lDaGxibU52WkdsdVp5a2dlMXh1SUNBZ0lDQWdZMkZ6WlNBbmFHVjRKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2hsZUZkeWFYUmxLSFJvYVhNc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc1Y2JpQWdJQ0FnSUdOaGMyVWdKM1YwWmpnbk9seHVJQ0FnSUNBZ1kyRnpaU0FuZFhSbUxUZ25PbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkWFJtT0ZkeWFYUmxLSFJvYVhNc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc1Y2JpQWdJQ0FnSUdOaGMyVWdKMkZ6WTJscEp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRnpZMmxwVjNKcGRHVW9kR2hwY3l3Z2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ2xjYmx4dUlDQWdJQ0FnWTJGelpTQW5ZbWx1WVhKNUp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHSnBibUZ5ZVZkeWFYUmxLSFJvYVhNc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc1Y2JpQWdJQ0FnSUdOaGMyVWdKMkpoYzJVMk5DYzZYRzRnSUNBZ0lDQWdJQzh2SUZkaGNtNXBibWM2SUcxaGVFeGxibWQwYUNCdWIzUWdkR0ZyWlc0Z2FXNTBieUJoWTJOdmRXNTBJR2x1SUdKaGMyVTJORmR5YVhSbFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaVlYTmxOalJYY21sMFpTaDBhR2x6TENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LVnh1WEc0Z0lDQWdJQ0JqWVhObElDZDFZM015SnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1ZqY3kweUp6cGNiaUFnSUNBZ0lHTmhjMlVnSjNWMFpqRTJiR1VuT2x4dUlDQWdJQ0FnWTJGelpTQW5kWFJtTFRFMmJHVW5PbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkV056TWxkeWFYUmxLSFJvYVhNc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc1Y2JpQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUdsbUlDaHNiM2RsY21Wa1EyRnpaU2tnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblZXNXJibTkzYmlCbGJtTnZaR2x1WnpvZ0p5QXJJR1Z1WTI5a2FXNW5LVnh1SUNBZ0lDQWdJQ0JsYm1OdlpHbHVaeUE5SUNnbkp5QXJJR1Z1WTI5a2FXNW5LUzUwYjB4dmQyVnlRMkZ6WlNncFhHNGdJQ0FnSUNBZ0lHeHZkMlZ5WldSRFlYTmxJRDBnZEhKMVpWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuUnZTbE5QVGlBOUlHWjFibU4wYVc5dUlIUnZTbE5QVGlBb0tTQjdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdkSGx3WlRvZ0owSjFabVpsY2ljc1hHNGdJQ0FnWkdGMFlUb2dRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29kR2hwY3k1ZllYSnlJSHg4SUhSb2FYTXNJREFwWEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1ltRnpaVFkwVTJ4cFkyVWdLR0oxWml3Z2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCcFppQW9jM1JoY25RZ1BUMDlJREFnSmlZZ1pXNWtJRDA5UFNCaWRXWXViR1Z1WjNSb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUdKaGMyVTJOQzVtY205dFFubDBaVUZ5Y21GNUtHSjFaaWxjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZbUZ6WlRZMExtWnliMjFDZVhSbFFYSnlZWGtvWW5WbUxuTnNhV05sS0hOMFlYSjBMQ0JsYm1RcEtWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJSFYwWmpoVGJHbGpaU0FvWW5WbUxDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lHVnVaQ0E5SUUxaGRHZ3ViV2x1S0dKMVppNXNaVzVuZEdnc0lHVnVaQ2xjYmlBZ2RtRnlJSEpsY3lBOUlGdGRYRzVjYmlBZ2RtRnlJR2tnUFNCemRHRnlkRnh1SUNCM2FHbHNaU0FvYVNBOElHVnVaQ2tnZTF4dUlDQWdJSFpoY2lCbWFYSnpkRUo1ZEdVZ1BTQmlkV1piYVYxY2JpQWdJQ0IyWVhJZ1kyOWtaVkJ2YVc1MElEMGdiblZzYkZ4dUlDQWdJSFpoY2lCaWVYUmxjMUJsY2xObGNYVmxibU5sSUQwZ0tHWnBjbk4wUW5sMFpTQStJREI0UlVZcElEOGdORnh1SUNBZ0lDQWdPaUFvWm1seWMzUkNlWFJsSUQ0Z01IaEVSaWtnUHlBelhHNGdJQ0FnSUNBNklDaG1hWEp6ZEVKNWRHVWdQaUF3ZUVKR0tTQS9JREpjYmlBZ0lDQWdJRG9nTVZ4dVhHNGdJQ0FnYVdZZ0tHa2dLeUJpZVhSbGMxQmxjbE5sY1hWbGJtTmxJRHc5SUdWdVpDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhObFkyOXVaRUo1ZEdVc0lIUm9hWEprUW5sMFpTd2dabTkxY25Sb1FubDBaU3dnZEdWdGNFTnZaR1ZRYjJsdWRGeHVYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tHSjVkR1Z6VUdWeVUyVnhkV1Z1WTJVcElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBeE9seHVJQ0FnSUNBZ0lDQWdJR2xtSUNobWFYSnpkRUo1ZEdVZ1BDQXdlRGd3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjJSbFVHOXBiblFnUFNCbWFYSnpkRUo1ZEdWY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBeU9seHVJQ0FnSUNBZ0lDQWdJSE5sWTI5dVpFSjVkR1VnUFNCaWRXWmJhU0FySURGZFhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NoelpXTnZibVJDZVhSbElDWWdNSGhETUNrZ1BUMDlJREI0T0RBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSbGJYQkRiMlJsVUc5cGJuUWdQU0FvWm1seWMzUkNlWFJsSUNZZ01IZ3hSaWtnUER3Z01IZzJJSHdnS0hObFkyOXVaRUo1ZEdVZ0ppQXdlRE5HS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSbGJYQkRiMlJsVUc5cGJuUWdQaUF3ZURkR0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZaR1ZRYjJsdWRDQTlJSFJsYlhCRGIyUmxVRzlwYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0F6T2x4dUlDQWdJQ0FnSUNBZ0lITmxZMjl1WkVKNWRHVWdQU0JpZFdaYmFTQXJJREZkWEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjbVJDZVhSbElEMGdZblZtVzJrZ0t5QXlYVnh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ29jMlZqYjI1a1FubDBaU0FtSURCNFF6QXBJRDA5UFNBd2VEZ3dJQ1ltSUNoMGFHbHlaRUo1ZEdVZ0ppQXdlRU13S1NBOVBUMGdNSGc0TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWdGNFTnZaR1ZRYjJsdWRDQTlJQ2htYVhKemRFSjVkR1VnSmlBd2VFWXBJRHc4SURCNFF5QjhJQ2h6WldOdmJtUkNlWFJsSUNZZ01IZ3pSaWtnUER3Z01IZzJJSHdnS0hSb2FYSmtRbmwwWlNBbUlEQjRNMFlwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdWdGNFTnZaR1ZRYjJsdWRDQStJREI0TjBaR0lDWW1JQ2gwWlcxd1EyOWtaVkJ2YVc1MElEd2dNSGhFT0RBd0lIeDhJSFJsYlhCRGIyUmxVRzlwYm5RZ1BpQXdlRVJHUmtZcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZaR1ZRYjJsdWRDQTlJSFJsYlhCRGIyUmxVRzlwYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0EwT2x4dUlDQWdJQ0FnSUNBZ0lITmxZMjl1WkVKNWRHVWdQU0JpZFdaYmFTQXJJREZkWEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjbVJDZVhSbElEMGdZblZtVzJrZ0t5QXlYVnh1SUNBZ0lDQWdJQ0FnSUdadmRYSjBhRUo1ZEdVZ1BTQmlkV1piYVNBcklETmRYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDaHpaV052Ym1SQ2VYUmxJQ1lnTUhoRE1Da2dQVDA5SURCNE9EQWdKaVlnS0hSb2FYSmtRbmwwWlNBbUlEQjRRekFwSUQwOVBTQXdlRGd3SUNZbUlDaG1iM1Z5ZEdoQ2VYUmxJQ1lnTUhoRE1Da2dQVDA5SURCNE9EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmxiWEJEYjJSbFVHOXBiblFnUFNBb1ptbHljM1JDZVhSbElDWWdNSGhHS1NBOFBDQXdlREV5SUh3Z0tITmxZMjl1WkVKNWRHVWdKaUF3ZUROR0tTQThQQ0F3ZUVNZ2ZDQW9kR2hwY21SQ2VYUmxJQ1lnTUhnelJpa2dQRHdnTUhnMklId2dLR1p2ZFhKMGFFSjVkR1VnSmlBd2VETkdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJsYlhCRGIyUmxVRzlwYm5RZ1BpQXdlRVpHUmtZZ0ppWWdkR1Z0Y0VOdlpHVlFiMmx1ZENBOElEQjRNVEV3TURBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZaR1ZRYjJsdWRDQTlJSFJsYlhCRGIyUmxVRzlwYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHTnZaR1ZRYjJsdWRDQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdMeThnZDJVZ1pHbGtJRzV2ZENCblpXNWxjbUYwWlNCaElIWmhiR2xrSUdOdlpHVlFiMmx1ZENCemJ5QnBibk5sY25RZ1lWeHVJQ0FnSUNBZ0x5OGdjbVZ3YkdGalpXMWxiblFnWTJoaGNpQW9WU3RHUmtaRUtTQmhibVFnWVdSMllXNWpaU0J2Ym14NUlERWdZbmwwWlZ4dUlDQWdJQ0FnWTI5a1pWQnZhVzUwSUQwZ01IaEdSa1pFWEc0Z0lDQWdJQ0JpZVhSbGMxQmxjbE5sY1hWbGJtTmxJRDBnTVZ4dUlDQWdJSDBnWld4elpTQnBaaUFvWTI5a1pWQnZhVzUwSUQ0Z01IaEdSa1pHS1NCN1hHNGdJQ0FnSUNBdkx5QmxibU52WkdVZ2RHOGdkWFJtTVRZZ0tITjFjbkp2WjJGMFpTQndZV2x5SUdSaGJtTmxLVnh1SUNBZ0lDQWdZMjlrWlZCdmFXNTBJQzA5SURCNE1UQXdNREJjYmlBZ0lDQWdJSEpsY3k1d2RYTm9LR052WkdWUWIybHVkQ0ErUGo0Z01UQWdKaUF3ZUROR1JpQjhJREI0UkRnd01DbGNiaUFnSUNBZ0lHTnZaR1ZRYjJsdWRDQTlJREI0UkVNd01DQjhJR052WkdWUWIybHVkQ0FtSURCNE0wWkdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVnpMbkIxYzJnb1kyOWtaVkJ2YVc1MEtWeHVJQ0FnSUdrZ0t6MGdZbmwwWlhOUVpYSlRaWEYxWlc1alpWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHUmxZMjlrWlVOdlpHVlFiMmx1ZEhOQmNuSmhlU2h5WlhNcFhHNTlYRzVjYmk4dklFSmhjMlZrSUc5dUlHaDBkSEE2THk5emRHRmphMjkyWlhKbWJHOTNMbU52YlM5aEx6SXlOelEzTWpjeUx6WTRNRGMwTWl3Z2RHaGxJR0p5YjNkelpYSWdkMmwwYUZ4dUx5OGdkR2hsSUd4dmQyVnpkQ0JzYVcxcGRDQnBjeUJEYUhKdmJXVXNJSGRwZEdnZ01IZ3hNREF3TUNCaGNtZHpMbHh1THk4Z1YyVWdaMjhnTVNCdFlXZHVhWFIxWkdVZ2JHVnpjeXdnWm05eUlITmhabVYwZVZ4dWRtRnlJRTFCV0Y5QlVrZFZUVVZPVkZOZlRFVk9SMVJJSUQwZ01IZ3hNREF3WEc1Y2JtWjFibU4wYVc5dUlHUmxZMjlrWlVOdlpHVlFiMmx1ZEhOQmNuSmhlU0FvWTI5a1pWQnZhVzUwY3lrZ2UxeHVJQ0IyWVhJZ2JHVnVJRDBnWTI5a1pWQnZhVzUwY3k1c1pXNW5kR2hjYmlBZ2FXWWdLR3hsYmlBOFBTQk5RVmhmUVZKSFZVMUZUbFJUWDB4RlRrZFVTQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxMbUZ3Y0d4NUtGTjBjbWx1Wnl3Z1kyOWtaVkJ2YVc1MGN5a2dMeThnWVhadmFXUWdaWGgwY21FZ2MyeHBZMlVvS1Z4dUlDQjlYRzVjYmlBZ0x5OGdSR1ZqYjJSbElHbHVJR05vZFc1cmN5QjBieUJoZG05cFpDQmNJbU5oYkd3Z2MzUmhZMnNnYzJsNlpTQmxlR05sWldSbFpGd2lMbHh1SUNCMllYSWdjbVZ6SUQwZ0p5ZGNiaUFnZG1GeUlHa2dQU0F3WEc0Z0lIZG9hV3hsSUNocElEd2diR1Z1S1NCN1hHNGdJQ0FnY21WeklDczlJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1V1WVhCd2JIa29YRzRnSUNBZ0lDQlRkSEpwYm1jc1hHNGdJQ0FnSUNCamIyUmxVRzlwYm5SekxuTnNhV05sS0drc0lHa2dLejBnVFVGWVgwRlNSMVZOUlU1VVUxOU1SVTVIVkVncFhHNGdJQ0FnS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOY2JuMWNibHh1Wm5WdVkzUnBiMjRnWVhOamFXbFRiR2xqWlNBb1luVm1MQ0J6ZEdGeWRDd2daVzVrS1NCN1hHNGdJSFpoY2lCeVpYUWdQU0FuSjF4dUlDQmxibVFnUFNCTllYUm9MbTFwYmloaWRXWXViR1Z1WjNSb0xDQmxibVFwWEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SUhOMFlYSjBPeUJwSUR3Z1pXNWtPeUJwS3lzcElIdGNiaUFnSUNCeVpYUWdLejBnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNoaWRXWmJhVjBnSmlBd2VEZEdLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWFJjYm4xY2JseHVablZ1WTNScGIyNGdZbWx1WVhKNVUyeHBZMlVnS0dKMVppd2djM1JoY25Rc0lHVnVaQ2tnZTF4dUlDQjJZWElnY21WMElEMGdKeWRjYmlBZ1pXNWtJRDBnVFdGMGFDNXRhVzRvWW5WbUxteGxibWQwYUN3Z1pXNWtLVnh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0J6ZEdGeWREc2dhU0E4SUdWdVpEc2dhU3NyS1NCN1hHNGdJQ0FnY21WMElDczlJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWW5WbVcybGRLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWFJjYm4xY2JseHVablZ1WTNScGIyNGdhR1Y0VTJ4cFkyVWdLR0oxWml3Z2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ1luVm1MbXhsYm1kMGFGeHVYRzRnSUdsbUlDZ2hjM1JoY25RZ2ZId2djM1JoY25RZ1BDQXdLU0J6ZEdGeWRDQTlJREJjYmlBZ2FXWWdLQ0ZsYm1RZ2ZId2daVzVrSUR3Z01DQjhmQ0JsYm1RZ1BpQnNaVzRwSUdWdVpDQTlJR3hsYmx4dVhHNGdJSFpoY2lCdmRYUWdQU0FuSjF4dUlDQm1iM0lnS0haaGNpQnBJRDBnYzNSaGNuUTdJR2tnUENCbGJtUTdJR2tyS3lrZ2UxeHVJQ0FnSUc5MWRDQXJQU0IwYjBobGVDaGlkV1piYVYwcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRGeHVmVnh1WEc1bWRXNWpkR2x2YmlCMWRHWXhObXhsVTJ4cFkyVWdLR0oxWml3Z2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCMllYSWdZbmwwWlhNZ1BTQmlkV1l1YzJ4cFkyVW9jM1JoY25Rc0lHVnVaQ2xjYmlBZ2RtRnlJSEpsY3lBOUlDY25YRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lubDBaWE11YkdWdVozUm9PeUJwSUNzOUlESXBJSHRjYmlBZ0lDQnlaWE1nS3owZ1UzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTaGllWFJsYzF0cFhTQXJJR0o1ZEdWelcya2dLeUF4WFNBcUlESTFOaWxjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjMnhwWTJVZ1BTQm1kVzVqZEdsdmJpQnpiR2xqWlNBb2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ2RHaHBjeTVzWlc1bmRHaGNiaUFnYzNSaGNuUWdQU0IrZm5OMFlYSjBYRzRnSUdWdVpDQTlJR1Z1WkNBOVBUMGdkVzVrWldacGJtVmtJRDhnYkdWdUlEb2dmbjVsYm1SY2JseHVJQ0JwWmlBb2MzUmhjblFnUENBd0tTQjdYRzRnSUNBZ2MzUmhjblFnS3owZ2JHVnVYRzRnSUNBZ2FXWWdLSE4wWVhKMElEd2dNQ2tnYzNSaGNuUWdQU0F3WEc0Z0lIMGdaV3h6WlNCcFppQW9jM1JoY25RZ1BpQnNaVzRwSUh0Y2JpQWdJQ0J6ZEdGeWRDQTlJR3hsYmx4dUlDQjlYRzVjYmlBZ2FXWWdLR1Z1WkNBOElEQXBJSHRjYmlBZ0lDQmxibVFnS3owZ2JHVnVYRzRnSUNBZ2FXWWdLR1Z1WkNBOElEQXBJR1Z1WkNBOUlEQmNiaUFnZlNCbGJITmxJR2xtSUNobGJtUWdQaUJzWlc0cElIdGNiaUFnSUNCbGJtUWdQU0JzWlc1Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hsYm1RZ1BDQnpkR0Z5ZENrZ1pXNWtJRDBnYzNSaGNuUmNibHh1SUNCMllYSWdibVYzUW5WbVhHNGdJR2xtSUNoQ2RXWm1aWEl1VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkNrZ2UxeHVJQ0FnSUc1bGQwSjFaaUE5SUVKMVptWmxjaTVmWVhWbmJXVnVkQ2gwYUdsekxuTjFZbUZ5Y21GNUtITjBZWEowTENCbGJtUXBLVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFpoY2lCemJHbGpaVXhsYmlBOUlHVnVaQ0F0SUhOMFlYSjBYRzRnSUNBZ2JtVjNRblZtSUQwZ2JtVjNJRUoxWm1abGNpaHpiR2xqWlV4bGJpd2dkVzVrWldacGJtVmtLVnh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djMnhwWTJWTVpXNDdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2JtVjNRblZtVzJsZElEMGdkR2hwYzF0cElDc2djM1JoY25SZFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2FXWWdLRzVsZDBKMVppNXNaVzVuZEdncElHNWxkMEoxWmk1d1lYSmxiblFnUFNCMGFHbHpMbkJoY21WdWRDQjhmQ0IwYUdselhHNWNiaUFnY21WMGRYSnVJRzVsZDBKMVpseHVmVnh1WEc0dktseHVJQ29nVG1WbFpDQjBieUJ0WVd0bElITjFjbVVnZEdoaGRDQmlkV1ptWlhJZ2FYTnVKM1FnZEhKNWFXNW5JSFJ2SUhkeWFYUmxJRzkxZENCdlppQmliM1Z1WkhNdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdOb1pXTnJUMlptYzJWMElDaHZabVp6WlhRc0lHVjRkQ3dnYkdWdVozUm9LU0I3WEc0Z0lHbG1JQ2dvYjJabWMyVjBJQ1VnTVNrZ0lUMDlJREFnZkh3Z2IyWm1jMlYwSUR3Z01Da2dkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjI5bVpuTmxkQ0JwY3lCdWIzUWdkV2x1ZENjcFhHNGdJR2xtSUNodlptWnpaWFFnS3lCbGVIUWdQaUJzWlc1bmRHZ3BJSFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0NkVWNubHBibWNnZEc4Z1lXTmpaWE56SUdKbGVXOXVaQ0JpZFdabVpYSWdiR1Z1WjNSb0p5bGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtWVWx1ZEV4RklEMGdablZ1WTNScGIyNGdjbVZoWkZWSmJuUk1SU0FvYjJabWMyVjBMQ0JpZVhSbFRHVnVaM1JvTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdmQ0F3WEc0Z0lHSjVkR1ZNWlc1bmRHZ2dQU0JpZVhSbFRHVnVaM1JvSUh3Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTA5bVpuTmxkQ2h2Wm1aelpYUXNJR0o1ZEdWTVpXNW5kR2dzSUhSb2FYTXViR1Z1WjNSb0tWeHVYRzRnSUhaaGNpQjJZV3dnUFNCMGFHbHpXMjltWm5ObGRGMWNiaUFnZG1GeUlHMTFiQ0E5SURGY2JpQWdkbUZ5SUdrZ1BTQXdYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQmllWFJsVEdWdVozUm9JQ1ltSUNodGRXd2dLajBnTUhneE1EQXBLU0I3WEc0Z0lDQWdkbUZzSUNzOUlIUm9hWE5iYjJabWMyVjBJQ3NnYVYwZ0tpQnRkV3hjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUIyWVd4Y2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV5WldGa1ZVbHVkRUpGSUQwZ1puVnVZM1JwYjI0Z2NtVmhaRlZKYm5SQ1JTQW9iMlptYzJWMExDQmllWFJsVEdWdVozUm9MQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnZabVp6WlhRZ1BTQnZabVp6WlhRZ2ZDQXdYRzRnSUdKNWRHVk1aVzVuZEdnZ1BTQmllWFJsVEdWdVozUm9JSHdnTUZ4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCN1hHNGdJQ0FnWTJobFkydFBabVp6WlhRb2IyWm1jMlYwTENCaWVYUmxUR1Z1WjNSb0xDQjBhR2x6TG14bGJtZDBhQ2xjYmlBZ2ZWeHVYRzRnSUhaaGNpQjJZV3dnUFNCMGFHbHpXMjltWm5ObGRDQXJJQzB0WW5sMFpVeGxibWQwYUYxY2JpQWdkbUZ5SUcxMWJDQTlJREZjYmlBZ2QyaHBiR1VnS0dKNWRHVk1aVzVuZEdnZ1BpQXdJQ1ltSUNodGRXd2dLajBnTUhneE1EQXBLU0I3WEc0Z0lDQWdkbUZzSUNzOUlIUm9hWE5iYjJabWMyVjBJQ3NnTFMxaWVYUmxUR1Z1WjNSb1hTQXFJRzExYkZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhaaGJGeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUlZTVzUwT0NBOUlHWjFibU4wYVc5dUlISmxZV1JWU1c1ME9DQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwOW1abk5sZENodlptWnpaWFFzSURFc0lIUm9hWE11YkdWdVozUm9LVnh1SUNCeVpYUjFjbTRnZEdocGMxdHZabVp6WlhSZFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1Y21WaFpGVkpiblF4Tmt4RklEMGdablZ1WTNScGIyNGdjbVZoWkZWSmJuUXhOa3hGSUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yVDJabWMyVjBLRzltWm5ObGRDd2dNaXdnZEdocGN5NXNaVzVuZEdncFhHNGdJSEpsZEhWeWJpQjBhR2x6VzI5bVpuTmxkRjBnZkNBb2RHaHBjMXR2Wm1aelpYUWdLeUF4WFNBOFBDQTRLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JWU1c1ME1UWkNSU0E5SUdaMWJtTjBhVzl1SUhKbFlXUlZTVzUwTVRaQ1JTQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwOW1abk5sZENodlptWnpaWFFzSURJc0lIUm9hWE11YkdWdVozUm9LVnh1SUNCeVpYUjFjbTRnS0hSb2FYTmJiMlptYzJWMFhTQThQQ0E0S1NCOElIUm9hWE5iYjJabWMyVjBJQ3NnTVYxY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV5WldGa1ZVbHVkRE15VEVVZ1BTQm1kVzVqZEdsdmJpQnlaV0ZrVlVsdWRETXlURVVnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRQWm1aelpYUW9iMlptYzJWMExDQTBMQ0IwYUdsekxteGxibWQwYUNsY2JseHVJQ0J5WlhSMWNtNGdLQ2gwYUdselcyOW1abk5sZEYwcElIeGNiaUFnSUNBZ0lDaDBhR2x6VzI5bVpuTmxkQ0FySURGZElEdzhJRGdwSUh4Y2JpQWdJQ0FnSUNoMGFHbHpXMjltWm5ObGRDQXJJREpkSUR3OElERTJLU2tnSzF4dUlDQWdJQ0FnS0hSb2FYTmJiMlptYzJWMElDc2dNMTBnS2lBd2VERXdNREF3TURBcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1Y21WaFpGVkpiblF6TWtKRklEMGdablZ1WTNScGIyNGdjbVZoWkZWSmJuUXpNa0pGSUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yVDJabWMyVjBLRzltWm5ObGRDd2dOQ3dnZEdocGN5NXNaVzVuZEdncFhHNWNiaUFnY21WMGRYSnVJQ2gwYUdselcyOW1abk5sZEYwZ0tpQXdlREV3TURBd01EQXBJQ3RjYmlBZ0lDQW9LSFJvYVhOYmIyWm1jMlYwSUNzZ01WMGdQRHdnTVRZcElIeGNiaUFnSUNBb2RHaHBjMXR2Wm1aelpYUWdLeUF5WFNBOFBDQTRLU0I4WEc0Z0lDQWdkR2hwYzF0dlptWnpaWFFnS3lBelhTbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtTVzUwVEVVZ1BTQm1kVzVqZEdsdmJpQnlaV0ZrU1c1MFRFVWdLRzltWm5ObGRDd2dZbmwwWlV4bGJtZDBhQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdiMlptYzJWMElEMGdiMlptYzJWMElId2dNRnh1SUNCaWVYUmxUR1Z1WjNSb0lEMGdZbmwwWlV4bGJtZDBhQ0I4SURCY2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRQWm1aelpYUW9iMlptYzJWMExDQmllWFJsVEdWdVozUm9MQ0IwYUdsekxteGxibWQwYUNsY2JseHVJQ0IyWVhJZ2RtRnNJRDBnZEdocGMxdHZabVp6WlhSZFhHNGdJSFpoY2lCdGRXd2dQU0F4WEc0Z0lIWmhjaUJwSUQwZ01GeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z1lubDBaVXhsYm1kMGFDQW1KaUFvYlhWc0lDbzlJREI0TVRBd0tTa2dlMXh1SUNBZ0lIWmhiQ0FyUFNCMGFHbHpXMjltWm5ObGRDQXJJR2xkSUNvZ2JYVnNYRzRnSUgxY2JpQWdiWFZzSUNvOUlEQjRPREJjYmx4dUlDQnBaaUFvZG1Gc0lENDlJRzExYkNrZ2RtRnNJQzA5SUUxaGRHZ3VjRzkzS0RJc0lEZ2dLaUJpZVhSbFRHVnVaM1JvS1Z4dVhHNGdJSEpsZEhWeWJpQjJZV3hjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrU1c1MFFrVWdQU0JtZFc1amRHbHZiaUJ5WldGa1NXNTBRa1VnS0c5bVpuTmxkQ3dnWW5sMFpVeGxibWQwYUN3Z2JtOUJjM05sY25RcElIdGNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJSHdnTUZ4dUlDQmllWFJsVEdWdVozUm9JRDBnWW5sMFpVeGxibWQwYUNCOElEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0UFptWnpaWFFvYjJabWMyVjBMQ0JpZVhSbFRHVnVaM1JvTENCMGFHbHpMbXhsYm1kMGFDbGNibHh1SUNCMllYSWdhU0E5SUdKNWRHVk1aVzVuZEdoY2JpQWdkbUZ5SUcxMWJDQTlJREZjYmlBZ2RtRnlJSFpoYkNBOUlIUm9hWE5iYjJabWMyVjBJQ3NnTFMxcFhWeHVJQ0IzYUdsc1pTQW9hU0ErSURBZ0ppWWdLRzExYkNBcVBTQXdlREV3TUNrcElIdGNiaUFnSUNCMllXd2dLejBnZEdocGMxdHZabVp6WlhRZ0t5QXRMV2xkSUNvZ2JYVnNYRzRnSUgxY2JpQWdiWFZzSUNvOUlEQjRPREJjYmx4dUlDQnBaaUFvZG1Gc0lENDlJRzExYkNrZ2RtRnNJQzA5SUUxaGRHZ3VjRzkzS0RJc0lEZ2dLaUJpZVhSbFRHVnVaM1JvS1Z4dVhHNGdJSEpsZEhWeWJpQjJZV3hjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrU1c1ME9DQTlJR1oxYm1OMGFXOXVJSEpsWVdSSmJuUTRJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJUMlptYzJWMEtHOW1abk5sZEN3Z01Td2dkR2hwY3k1c1pXNW5kR2dwWEc0Z0lHbG1JQ2doS0hSb2FYTmJiMlptYzJWMFhTQW1JREI0T0RBcEtTQnlaWFIxY200Z0tIUm9hWE5iYjJabWMyVjBYU2xjYmlBZ2NtVjBkWEp1SUNnb01IaG1aaUF0SUhSb2FYTmJiMlptYzJWMFhTQXJJREVwSUNvZ0xURXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRWx1ZERFMlRFVWdQU0JtZFc1amRHbHZiaUJ5WldGa1NXNTBNVFpNUlNBb2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTA5bVpuTmxkQ2h2Wm1aelpYUXNJRElzSUhSb2FYTXViR1Z1WjNSb0tWeHVJQ0IyWVhJZ2RtRnNJRDBnZEdocGMxdHZabVp6WlhSZElId2dLSFJvYVhOYmIyWm1jMlYwSUNzZ01WMGdQRHdnT0NsY2JpQWdjbVYwZFhKdUlDaDJZV3dnSmlBd2VEZ3dNREFwSUQ4Z2RtRnNJSHdnTUhoR1JrWkdNREF3TUNBNklIWmhiRnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JKYm5ReE5rSkZJRDBnWm5WdVkzUnBiMjRnY21WaFpFbHVkREUyUWtVZ0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0UFptWnpaWFFvYjJabWMyVjBMQ0F5TENCMGFHbHpMbXhsYm1kMGFDbGNiaUFnZG1GeUlIWmhiQ0E5SUhSb2FYTmJiMlptYzJWMElDc2dNVjBnZkNBb2RHaHBjMXR2Wm1aelpYUmRJRHc4SURncFhHNGdJSEpsZEhWeWJpQW9kbUZzSUNZZ01IZzRNREF3S1NBL0lIWmhiQ0I4SURCNFJrWkdSakF3TURBZ09pQjJZV3hjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrU1c1ME16Sk1SU0E5SUdaMWJtTjBhVzl1SUhKbFlXUkpiblF6TWt4RklDaHZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJR05vWldOclQyWm1jMlYwS0c5bVpuTmxkQ3dnTkN3Z2RHaHBjeTVzWlc1bmRHZ3BYRzVjYmlBZ2NtVjBkWEp1SUNoMGFHbHpXMjltWm5ObGRGMHBJSHhjYmlBZ0lDQW9kR2hwYzF0dlptWnpaWFFnS3lBeFhTQThQQ0E0S1NCOFhHNGdJQ0FnS0hSb2FYTmJiMlptYzJWMElDc2dNbDBnUER3Z01UWXBJSHhjYmlBZ0lDQW9kR2hwYzF0dlptWnpaWFFnS3lBelhTQThQQ0F5TkNsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV5WldGa1NXNTBNekpDUlNBOUlHWjFibU4wYVc5dUlISmxZV1JKYm5Rek1rSkZJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJUMlptYzJWMEtHOW1abk5sZEN3Z05Dd2dkR2hwY3k1c1pXNW5kR2dwWEc1Y2JpQWdjbVYwZFhKdUlDaDBhR2x6VzI5bVpuTmxkRjBnUER3Z01qUXBJSHhjYmlBZ0lDQW9kR2hwYzF0dlptWnpaWFFnS3lBeFhTQThQQ0F4TmlrZ2ZGeHVJQ0FnSUNoMGFHbHpXMjltWm5ObGRDQXJJREpkSUR3OElEZ3BJSHhjYmlBZ0lDQW9kR2hwYzF0dlptWnpaWFFnS3lBelhTbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtSbXh2WVhSTVJTQTlJR1oxYm1OMGFXOXVJSEpsWVdSR2JHOWhkRXhGSUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yVDJabWMyVjBLRzltWm5ObGRDd2dOQ3dnZEdocGN5NXNaVzVuZEdncFhHNGdJSEpsZEhWeWJpQnBaV1ZsTnpVMExuSmxZV1FvZEdocGN5d2diMlptYzJWMExDQjBjblZsTENBeU15d2dOQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrUm14dllYUkNSU0E5SUdaMWJtTjBhVzl1SUhKbFlXUkdiRzloZEVKRklDaHZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJR05vWldOclQyWm1jMlYwS0c5bVpuTmxkQ3dnTkN3Z2RHaHBjeTVzWlc1bmRHZ3BYRzRnSUhKbGRIVnliaUJwWldWbE56VTBMbkpsWVdRb2RHaHBjeXdnYjJabWMyVjBMQ0JtWVd4elpTd2dNak1zSURRcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1Y21WaFpFUnZkV0pzWlV4RklEMGdablZ1WTNScGIyNGdjbVZoWkVSdmRXSnNaVXhGSUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yVDJabWMyVjBLRzltWm5ObGRDd2dPQ3dnZEdocGN5NXNaVzVuZEdncFhHNGdJSEpsZEhWeWJpQnBaV1ZsTnpVMExuSmxZV1FvZEdocGN5d2diMlptYzJWMExDQjBjblZsTENBMU1pd2dPQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrUkc5MVlteGxRa1VnUFNCbWRXNWpkR2x2YmlCeVpXRmtSRzkxWW14bFFrVWdLRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydFBabVp6WlhRb2IyWm1jMlYwTENBNExDQjBhR2x6TG14bGJtZDBhQ2xjYmlBZ2NtVjBkWEp1SUdsbFpXVTNOVFF1Y21WaFpDaDBhR2x6TENCdlptWnpaWFFzSUdaaGJITmxMQ0ExTWl3Z09DbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyaGxZMnRKYm5RZ0tHSjFaaXdnZG1Gc2RXVXNJRzltWm5ObGRDd2daWGgwTENCdFlYZ3NJRzFwYmlrZ2UxeHVJQ0JwWmlBb0lVSjFabVpsY2k1cGMwSjFabVpsY2loaWRXWXBLU0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkaWRXWm1aWElnYlhWemRDQmlaU0JoSUVKMVptWmxjaUJwYm5OMFlXNWpaU2NwWEc0Z0lHbG1JQ2gyWVd4MVpTQStJRzFoZUNCOGZDQjJZV3gxWlNBOElHMXBiaWtnZEdoeWIzY2dibVYzSUZKaGJtZGxSWEp5YjNJb0ozWmhiSFZsSUdseklHOTFkQ0J2WmlCaWIzVnVaSE1uS1Z4dUlDQnBaaUFvYjJabWMyVjBJQ3NnWlhoMElENGdZblZtTG14bGJtZDBhQ2tnZEdoeWIzY2dibVYzSUZKaGJtZGxSWEp5YjNJb0oybHVaR1Y0SUc5MWRDQnZaaUJ5WVc1blpTY3BYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZWU1c1MFRFVWdQU0JtZFc1amRHbHZiaUIzY21sMFpWVkpiblJNUlNBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnWW5sMFpVeGxibWQwYUN3Z2JtOUJjM05sY25RcElIdGNiaUFnZG1Gc2RXVWdQU0FyZG1Gc2RXVmNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJSHdnTUZ4dUlDQmllWFJsVEdWdVozUm9JRDBnWW5sMFpVeGxibWQwYUNCOElEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0SmJuUW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnWW5sMFpVeGxibWQwYUN3Z1RXRjBhQzV3YjNjb01pd2dPQ0FxSUdKNWRHVk1aVzVuZEdncExDQXdLVnh1WEc0Z0lIWmhjaUJ0ZFd3Z1BTQXhYRzRnSUhaaGNpQnBJRDBnTUZ4dUlDQjBhR2x6VzI5bVpuTmxkRjBnUFNCMllXeDFaU0FtSURCNFJrWmNiaUFnZDJocGJHVWdLQ3NyYVNBOElHSjVkR1ZNWlc1bmRHZ2dKaVlnS0cxMWJDQXFQU0F3ZURFd01Da3BJSHRjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkQ0FySUdsZElEMGdLSFpoYkhWbElDOGdiWFZzS1NBbUlEQjRSa1pjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ2Wm1aelpYUWdLeUJpZVhSbFRHVnVaM1JvWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWVlNXNTBRa1VnUFNCbWRXNWpkR2x2YmlCM2NtbDBaVlZKYm5SQ1JTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2RtRnNkV1VnUFNBcmRtRnNkV1ZjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUh3Z01GeHVJQ0JpZVhSbFRHVnVaM1JvSUQwZ1lubDBaVXhsYm1kMGFDQjhJREJjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2dUV0YwYUM1d2IzY29NaXdnT0NBcUlHSjVkR1ZNWlc1bmRHZ3BMQ0F3S1Z4dVhHNGdJSFpoY2lCcElEMGdZbmwwWlV4bGJtZDBhQ0F0SURGY2JpQWdkbUZ5SUcxMWJDQTlJREZjYmlBZ2RHaHBjMXR2Wm1aelpYUWdLeUJwWFNBOUlIWmhiSFZsSUNZZ01IaEdSbHh1SUNCM2FHbHNaU0FvTFMxcElENDlJREFnSmlZZ0tHMTFiQ0FxUFNBd2VERXdNQ2twSUh0Y2JpQWdJQ0IwYUdselcyOW1abk5sZENBcklHbGRJRDBnS0haaGJIVmxJQzhnYlhWc0tTQW1JREI0UmtaY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdlptWnpaWFFnS3lCaWVYUmxUR1Z1WjNSb1hHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZDNKcGRHVlZTVzUwT0NBOUlHWjFibU4wYVc5dUlIZHlhWFJsVlVsdWREZ2dLSFpoYkhWbExDQnZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhaaGJIVmxJRDBnSzNaaGJIVmxYRzRnSUc5bVpuTmxkQ0E5SUc5bVpuTmxkQ0I4SURCY2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRKYm5Rb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dNU3dnTUhobVppd2dNQ2xjYmlBZ2FXWWdLQ0ZDZFdabVpYSXVWRmxRUlVSZlFWSlNRVmxmVTFWUVVFOVNWQ2tnZG1Gc2RXVWdQU0JOWVhSb0xtWnNiMjl5S0haaGJIVmxLVnh1SUNCMGFHbHpXMjltWm5ObGRGMGdQU0FvZG1Gc2RXVWdKaUF3ZUdabUtWeHVJQ0J5WlhSMWNtNGdiMlptYzJWMElDc2dNVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnZZbXBsWTNSWGNtbDBaVlZKYm5ReE5pQW9ZblZtTENCMllXeDFaU3dnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0cElIdGNiaUFnYVdZZ0tIWmhiSFZsSUR3Z01Da2dkbUZzZFdVZ1BTQXdlR1ptWm1ZZ0t5QjJZV3gxWlNBcklERmNiaUFnWm05eUlDaDJZWElnYVNBOUlEQXNJR29nUFNCTllYUm9MbTFwYmloaWRXWXViR1Z1WjNSb0lDMGdiMlptYzJWMExDQXlLVHNnYVNBOElHbzdJR2tyS3lrZ2UxeHVJQ0FnSUdKMVpsdHZabVp6WlhRZ0t5QnBYU0E5SUNoMllXeDFaU0FtSUNnd2VHWm1JRHc4SUNnNElDb2dLR3hwZEhSc1pVVnVaR2xoYmlBL0lHa2dPaUF4SUMwZ2FTa3BLU2tnUGo0K1hHNGdJQ0FnSUNBb2JHbDBkR3hsUlc1a2FXRnVJRDhnYVNBNklERWdMU0JwS1NBcUlEaGNiaUFnZlZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFZVbHVkREUyVEVVZ1BTQm1kVzVqZEdsdmJpQjNjbWwwWlZWSmJuUXhOa3hGSUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQjJZV3gxWlNBOUlDdDJZV3gxWlZ4dUlDQnZabVp6WlhRZ1BTQnZabVp6WlhRZ2ZDQXdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJR05vWldOclNXNTBLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSURJc0lEQjRabVptWml3Z01DbGNiaUFnYVdZZ0tFSjFabVpsY2k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVUtTQjdYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUmRJRDBnS0haaGJIVmxJQ1lnTUhobVppbGNiaUFnSUNCMGFHbHpXMjltWm5ObGRDQXJJREZkSUQwZ0tIWmhiSFZsSUQ0K1BpQTRLVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzlpYW1WamRGZHlhWFJsVlVsdWRERTJLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUhSeWRXVXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOW1abk5sZENBcklESmNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVlZKYm5ReE5rSkZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVlZTVzUwTVRaQ1JTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnZG1Gc2RXVWdQU0FyZG1Gc2RXVmNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJSHdnTUZ4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMGx1ZENoMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQXlMQ0F3ZUdabVptWXNJREFwWEc0Z0lHbG1JQ2hDZFdabVpYSXVWRmxRUlVSZlFWSlNRVmxmVTFWUVVFOVNWQ2tnZTF4dUlDQWdJSFJvYVhOYmIyWm1jMlYwWFNBOUlDaDJZV3gxWlNBK1BqNGdPQ2xjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkQ0FySURGZElEMGdLSFpoYkhWbElDWWdNSGhtWmlsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdlltcGxZM1JYY21sMFpWVkpiblF4TmloMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQm1ZV3h6WlNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnTWx4dWZWeHVYRzVtZFc1amRHbHZiaUJ2WW1wbFkzUlhjbWwwWlZWSmJuUXpNaUFvWW5WbUxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCc2FYUjBiR1ZGYm1ScFlXNHBJSHRjYmlBZ2FXWWdLSFpoYkhWbElEd2dNQ2tnZG1Gc2RXVWdQU0F3ZUdabVptWm1abVptSUNzZ2RtRnNkV1VnS3lBeFhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnFJRDBnVFdGMGFDNXRhVzRvWW5WbUxteGxibWQwYUNBdElHOW1abk5sZEN3Z05DazdJR2tnUENCcU95QnBLeXNwSUh0Y2JpQWdJQ0JpZFdaYmIyWm1jMlYwSUNzZ2FWMGdQU0FvZG1Gc2RXVWdQajQrSUNoc2FYUjBiR1ZGYm1ScFlXNGdQeUJwSURvZ015QXRJR2twSUNvZ09Da2dKaUF3ZUdabVhHNGdJSDFjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTNjbWwwWlZWSmJuUXpNa3hGSUQwZ1puVnVZM1JwYjI0Z2QzSnBkR1ZWU1c1ME16Sk1SU0FvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2RtRnNkV1VnUFNBcmRtRnNkV1ZjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUh3Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTBsdWRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0EwTENBd2VHWm1abVptWm1abUxDQXdLVnh1SUNCcFppQW9RblZtWm1WeUxsUlpVRVZFWDBGU1VrRlpYMU5WVUZCUFVsUXBJSHRjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkQ0FySUROZElEMGdLSFpoYkhWbElENCtQaUF5TkNsY2JpQWdJQ0IwYUdselcyOW1abk5sZENBcklESmRJRDBnS0haaGJIVmxJRDQrUGlBeE5pbGNiaUFnSUNCMGFHbHpXMjltWm5ObGRDQXJJREZkSUQwZ0tIWmhiSFZsSUQ0K1BpQTRLVnh1SUNBZ0lIUm9hWE5iYjJabWMyVjBYU0E5SUNoMllXeDFaU0FtSURCNFptWXBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdiMkpxWldOMFYzSnBkR1ZWU1c1ME16SW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnZEhKMVpTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IyWm1jMlYwSUNzZ05GeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxWVWx1ZERNeVFrVWdQU0JtZFc1amRHbHZiaUIzY21sMFpWVkpiblF6TWtKRklDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0IyWVd4MVpTQTlJQ3QyWVd4MVpWeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdmQ0F3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJTVzUwS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lEUXNJREI0Wm1abVptWm1abVlzSURBcFhHNGdJR2xtSUNoQ2RXWm1aWEl1VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkNrZ2UxeHVJQ0FnSUhSb2FYTmJiMlptYzJWMFhTQTlJQ2gyWVd4MVpTQStQajRnTWpRcFhHNGdJQ0FnZEdocGMxdHZabVp6WlhRZ0t5QXhYU0E5SUNoMllXeDFaU0ErUGo0Z01UWXBYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUWdLeUF5WFNBOUlDaDJZV3gxWlNBK1BqNGdPQ2xjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkQ0FySUROZElEMGdLSFpoYkhWbElDWWdNSGhtWmlsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdlltcGxZM1JYY21sMFpWVkpiblF6TWloMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQm1ZV3h6WlNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnTkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFNXNTBURVVnUFNCbWRXNWpkR2x2YmlCM2NtbDBaVWx1ZEV4RklDaDJZV3gxWlN3Z2IyWm1jMlYwTENCaWVYUmxUR1Z1WjNSb0xDQnViMEZ6YzJWeWRDa2dlMXh1SUNCMllXeDFaU0E5SUN0MllXeDFaVnh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnZkNBd1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElIdGNiaUFnSUNCMllYSWdiR2x0YVhRZ1BTQk5ZWFJvTG5CdmR5Z3lMQ0E0SUNvZ1lubDBaVXhsYm1kMGFDQXRJREVwWEc1Y2JpQWdJQ0JqYUdWamEwbHVkQ2gwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCaWVYUmxUR1Z1WjNSb0xDQnNhVzFwZENBdElERXNJQzFzYVcxcGRDbGNiaUFnZlZ4dVhHNGdJSFpoY2lCcElEMGdNRnh1SUNCMllYSWdiWFZzSUQwZ01WeHVJQ0IyWVhJZ2MzVmlJRDBnZG1Gc2RXVWdQQ0F3SUQ4Z01TQTZJREJjYmlBZ2RHaHBjMXR2Wm1aelpYUmRJRDBnZG1Gc2RXVWdKaUF3ZUVaR1hHNGdJSGRvYVd4bElDZ3JLMmtnUENCaWVYUmxUR1Z1WjNSb0lDWW1JQ2h0ZFd3Z0tqMGdNSGd4TURBcEtTQjdYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUWdLeUJwWFNBOUlDZ29kbUZzZFdVZ0x5QnRkV3dwSUQ0K0lEQXBJQzBnYzNWaUlDWWdNSGhHUmx4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUc5bVpuTmxkQ0FySUdKNWRHVk1aVzVuZEdoY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkRUpGSUQwZ1puVnVZM1JwYjI0Z2QzSnBkR1ZKYm5SQ1JTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2RtRnNkV1VnUFNBcmRtRnNkV1ZjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUh3Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ2RtRnlJR3hwYldsMElEMGdUV0YwYUM1d2IzY29NaXdnT0NBcUlHSjVkR1ZNWlc1bmRHZ2dMU0F4S1Z4dVhHNGdJQ0FnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2diR2x0YVhRZ0xTQXhMQ0F0YkdsdGFYUXBYRzRnSUgxY2JseHVJQ0IyWVhJZ2FTQTlJR0o1ZEdWTVpXNW5kR2dnTFNBeFhHNGdJSFpoY2lCdGRXd2dQU0F4WEc0Z0lIWmhjaUJ6ZFdJZ1BTQjJZV3gxWlNBOElEQWdQeUF4SURvZ01GeHVJQ0IwYUdselcyOW1abk5sZENBcklHbGRJRDBnZG1Gc2RXVWdKaUF3ZUVaR1hHNGdJSGRvYVd4bElDZ3RMV2tnUGowZ01DQW1KaUFvYlhWc0lDbzlJREI0TVRBd0tTa2dlMXh1SUNBZ0lIUm9hWE5iYjJabWMyVjBJQ3NnYVYwZ1BTQW9LSFpoYkhWbElDOGdiWFZzS1NBK1BpQXdLU0F0SUhOMVlpQW1JREI0UmtaY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdlptWnpaWFFnS3lCaWVYUmxUR1Z1WjNSb1hHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZDNKcGRHVkpiblE0SUQwZ1puVnVZM1JwYjI0Z2QzSnBkR1ZKYm5RNElDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0IyWVd4MVpTQTlJQ3QyWVd4MVpWeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdmQ0F3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJTVzUwS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lERXNJREI0TjJZc0lDMHdlRGd3S1Z4dUlDQnBaaUFvSVVKMVptWmxjaTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVS1NCMllXeDFaU0E5SUUxaGRHZ3VabXh2YjNJb2RtRnNkV1VwWEc0Z0lHbG1JQ2gyWVd4MVpTQThJREFwSUhaaGJIVmxJRDBnTUhobVppQXJJSFpoYkhWbElDc2dNVnh1SUNCMGFHbHpXMjltWm5ObGRGMGdQU0FvZG1Gc2RXVWdKaUF3ZUdabUtWeHVJQ0J5WlhSMWNtNGdiMlptYzJWMElDc2dNVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1ME1UWk1SU0E5SUdaMWJtTjBhVzl1SUhkeWFYUmxTVzUwTVRaTVJTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnZG1Gc2RXVWdQU0FyZG1Gc2RXVmNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJSHdnTUZ4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMGx1ZENoMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQXlMQ0F3ZURkbVptWXNJQzB3ZURnd01EQXBYRzRnSUdsbUlDaENkV1ptWlhJdVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZDa2dlMXh1SUNBZ0lIUm9hWE5iYjJabWMyVjBYU0E5SUNoMllXeDFaU0FtSURCNFptWXBYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUWdLeUF4WFNBOUlDaDJZV3gxWlNBK1BqNGdPQ2xjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J2WW1wbFkzUlhjbWwwWlZWSmJuUXhOaWgwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCMGNuVmxLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZabVp6WlhRZ0t5QXlYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZKYm5ReE5rSkZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVkpiblF4TmtKRklDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0IyWVd4MVpTQTlJQ3QyWVd4MVpWeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdmQ0F3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJTVzUwS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lESXNJREI0TjJabVppd2dMVEI0T0RBd01DbGNiaUFnYVdZZ0tFSjFabVpsY2k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVUtTQjdYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUmRJRDBnS0haaGJIVmxJRDQrUGlBNEtWeHVJQ0FnSUhSb2FYTmJiMlptYzJWMElDc2dNVjBnUFNBb2RtRnNkV1VnSmlBd2VHWm1LVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzlpYW1WamRGZHlhWFJsVlVsdWRERTJLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUdaaGJITmxLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZabVp6WlhRZ0t5QXlYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZKYm5Rek1reEZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVkpiblF6TWt4RklDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0IyWVd4MVpTQTlJQ3QyWVd4MVpWeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdmQ0F3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJTVzUwS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lEUXNJREI0TjJabVptWm1abVlzSUMwd2VEZ3dNREF3TURBd0tWeHVJQ0JwWmlBb1FuVm1abVZ5TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRcElIdGNiaUFnSUNCMGFHbHpXMjltWm5ObGRGMGdQU0FvZG1Gc2RXVWdKaUF3ZUdabUtWeHVJQ0FnSUhSb2FYTmJiMlptYzJWMElDc2dNVjBnUFNBb2RtRnNkV1VnUGo0K0lEZ3BYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUWdLeUF5WFNBOUlDaDJZV3gxWlNBK1BqNGdNVFlwWEc0Z0lDQWdkR2hwYzF0dlptWnpaWFFnS3lBelhTQTlJQ2gyWVd4MVpTQStQajRnTWpRcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2IySnFaV04wVjNKcGRHVlZTVzUwTXpJb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dkSEoxWlNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnTkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFNXNTBNekpDUlNBOUlHWjFibU4wYVc5dUlIZHlhWFJsU1c1ME16SkNSU0FvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2RtRnNkV1VnUFNBcmRtRnNkV1ZjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUh3Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTBsdWRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0EwTENBd2VEZG1abVptWm1abUxDQXRNSGc0TURBd01EQXdNQ2xjYmlBZ2FXWWdLSFpoYkhWbElEd2dNQ2tnZG1Gc2RXVWdQU0F3ZUdabVptWm1abVptSUNzZ2RtRnNkV1VnS3lBeFhHNGdJR2xtSUNoQ2RXWm1aWEl1VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkNrZ2UxeHVJQ0FnSUhSb2FYTmJiMlptYzJWMFhTQTlJQ2gyWVd4MVpTQStQajRnTWpRcFhHNGdJQ0FnZEdocGMxdHZabVp6WlhRZ0t5QXhYU0E5SUNoMllXeDFaU0ErUGo0Z01UWXBYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUWdLeUF5WFNBOUlDaDJZV3gxWlNBK1BqNGdPQ2xjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkQ0FySUROZElEMGdLSFpoYkhWbElDWWdNSGhtWmlsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdlltcGxZM1JYY21sMFpWVkpiblF6TWloMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQm1ZV3h6WlNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnTkZ4dWZWeHVYRzVtZFc1amRHbHZiaUJqYUdWamEwbEZSVVUzTlRRZ0tHSjFaaXdnZG1Gc2RXVXNJRzltWm5ObGRDd2daWGgwTENCdFlYZ3NJRzFwYmlrZ2UxeHVJQ0JwWmlBb2RtRnNkV1VnUGlCdFlYZ2dmSHdnZG1Gc2RXVWdQQ0J0YVc0cElIUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLQ2QyWVd4MVpTQnBjeUJ2ZFhRZ2IyWWdZbTkxYm1Sekp5bGNiaUFnYVdZZ0tHOW1abk5sZENBcklHVjRkQ0ErSUdKMVppNXNaVzVuZEdncElIUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLQ2RwYm1SbGVDQnZkWFFnYjJZZ2NtRnVaMlVuS1Z4dUlDQnBaaUFvYjJabWMyVjBJRHdnTUNrZ2RHaHliM2NnYm1WM0lGSmhibWRsUlhKeWIzSW9KMmx1WkdWNElHOTFkQ0J2WmlCeVlXNW5aU2NwWEc1OVhHNWNibVoxYm1OMGFXOXVJSGR5YVhSbFJteHZZWFFnS0dKMVppd2dkbUZzZFdVc0lHOW1abk5sZEN3Z2JHbDBkR3hsUlc1a2FXRnVMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCN1hHNGdJQ0FnWTJobFkydEpSVVZGTnpVMEtHSjFaaXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dOQ3dnTXk0ME1ESTRNak0wTmpZek9EVXlPRGcyWlNzek9Dd2dMVE11TkRBeU9ESXpORFkyTXpnMU1qZzRObVVyTXpncFhHNGdJSDFjYmlBZ2FXVmxaVGMxTkM1M2NtbDBaU2hpZFdZc0lIWmhiSFZsTENCdlptWnpaWFFzSUd4cGRIUnNaVVZ1WkdsaGJpd2dNak1zSURRcFhHNGdJSEpsZEhWeWJpQnZabVp6WlhRZ0t5QTBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZHYkc5aGRFeEZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVkdiRzloZEV4RklDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0J5WlhSMWNtNGdkM0pwZEdWR2JHOWhkQ2gwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCMGNuVmxMQ0J1YjBGemMyVnlkQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTNjbWwwWlVac2IyRjBRa1VnUFNCbWRXNWpkR2x2YmlCM2NtbDBaVVpzYjJGMFFrVWdLSFpoYkhWbExDQnZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhKbGRIVnliaUIzY21sMFpVWnNiMkYwS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lHWmhiSE5sTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1Wm5WdVkzUnBiMjRnZDNKcGRHVkViM1ZpYkdVZ0tHSjFaaXdnZG1Gc2RXVXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1kyaGxZMnRKUlVWRk56VTBLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnT0N3Z01TNDNPVGMyT1RNeE16UTROakl6TVRVM1JTc3pNRGdzSUMweExqYzVOelk1TXpFek5EZzJNak14TlRkRkt6TXdPQ2xjYmlBZ2ZWeHVJQ0JwWldWbE56VTBMbmR5YVhSbEtHSjFaaXdnZG1Gc2RXVXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENBMU1pd2dPQ2xjYmlBZ2NtVjBkWEp1SUc5bVpuTmxkQ0FySURoY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVUnZkV0pzWlV4RklEMGdablZ1WTNScGIyNGdkM0pwZEdWRWIzVmliR1ZNUlNBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdjbVYwZFhKdUlIZHlhWFJsUkc5MVlteGxLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUhSeWRXVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsUkc5MVlteGxRa1VnUFNCbWRXNWpkR2x2YmlCM2NtbDBaVVJ2ZFdKc1pVSkZJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCeVpYUjFjbTRnZDNKcGRHVkViM1ZpYkdVb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dabUZzYzJVc0lHNXZRWE56WlhKMEtWeHVmVnh1WEc0dkx5QmpiM0I1S0hSaGNtZGxkRUoxWm1abGNpd2dkR0Z5WjJWMFUzUmhjblE5TUN3Z2MyOTFjbU5sVTNSaGNuUTlNQ3dnYzI5MWNtTmxSVzVrUFdKMVptWmxjaTVzWlc1bmRHZ3BYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbU52Y0hrZ1BTQm1kVzVqZEdsdmJpQmpiM0I1SUNoMFlYSm5aWFFzSUhSaGNtZGxkRk4wWVhKMExDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lHbG1JQ2doYzNSaGNuUXBJSE4wWVhKMElEMGdNRnh1SUNCcFppQW9JV1Z1WkNBbUppQmxibVFnSVQwOUlEQXBJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9YRzRnSUdsbUlDaDBZWEpuWlhSVGRHRnlkQ0ErUFNCMFlYSm5aWFF1YkdWdVozUm9LU0IwWVhKblpYUlRkR0Z5ZENBOUlIUmhjbWRsZEM1c1pXNW5kR2hjYmlBZ2FXWWdLQ0YwWVhKblpYUlRkR0Z5ZENrZ2RHRnlaMlYwVTNSaGNuUWdQU0F3WEc0Z0lHbG1JQ2hsYm1RZ1BpQXdJQ1ltSUdWdVpDQThJSE4wWVhKMEtTQmxibVFnUFNCemRHRnlkRnh1WEc0Z0lDOHZJRU52Y0hrZ01DQmllWFJsY3pzZ2QyVW5jbVVnWkc5dVpWeHVJQ0JwWmlBb1pXNWtJRDA5UFNCemRHRnlkQ2tnY21WMGRYSnVJREJjYmlBZ2FXWWdLSFJoY21kbGRDNXNaVzVuZEdnZ1BUMDlJREFnZkh3Z2RHaHBjeTVzWlc1bmRHZ2dQVDA5SURBcElISmxkSFZ5YmlBd1hHNWNiaUFnTHk4Z1JtRjBZV3dnWlhKeWIzSWdZMjl1WkdsMGFXOXVjMXh1SUNCcFppQW9kR0Z5WjJWMFUzUmhjblFnUENBd0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGSmhibWRsUlhKeWIzSW9KM1JoY21kbGRGTjBZWEowSUc5MWRDQnZaaUJpYjNWdVpITW5LVnh1SUNCOVhHNGdJR2xtSUNoemRHRnlkQ0E4SURBZ2ZId2djM1JoY25RZ1BqMGdkR2hwY3k1c1pXNW5kR2dwSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZHpiM1Z5WTJWVGRHRnlkQ0J2ZFhRZ2IyWWdZbTkxYm1Sekp5bGNiaUFnYVdZZ0tHVnVaQ0E4SURBcElIUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLQ2R6YjNWeVkyVkZibVFnYjNWMElHOW1JR0p2ZFc1a2N5Y3BYRzVjYmlBZ0x5OGdRWEpsSUhkbElHOXZZajljYmlBZ2FXWWdLR1Z1WkNBK0lIUm9hWE11YkdWdVozUm9LU0JsYm1RZ1BTQjBhR2x6TG14bGJtZDBhRnh1SUNCcFppQW9kR0Z5WjJWMExteGxibWQwYUNBdElIUmhjbWRsZEZOMFlYSjBJRHdnWlc1a0lDMGdjM1JoY25RcElIdGNiaUFnSUNCbGJtUWdQU0IwWVhKblpYUXViR1Z1WjNSb0lDMGdkR0Z5WjJWMFUzUmhjblFnS3lCemRHRnlkRnh1SUNCOVhHNWNiaUFnZG1GeUlHeGxiaUE5SUdWdVpDQXRJSE4wWVhKMFhHNGdJSFpoY2lCcFhHNWNiaUFnYVdZZ0tIUm9hWE1nUFQwOUlIUmhjbWRsZENBbUppQnpkR0Z5ZENBOElIUmhjbWRsZEZOMFlYSjBJQ1ltSUhSaGNtZGxkRk4wWVhKMElEd2daVzVrS1NCN1hHNGdJQ0FnTHk4Z1pHVnpZMlZ1WkdsdVp5QmpiM0I1SUdaeWIyMGdaVzVrWEc0Z0lDQWdabTl5SUNocElEMGdiR1Z1SUMwZ01Uc2dhU0ErUFNBd095QnBMUzBwSUh0Y2JpQWdJQ0FnSUhSaGNtZGxkRnRwSUNzZ2RHRnlaMlYwVTNSaGNuUmRJRDBnZEdocGMxdHBJQ3NnYzNSaGNuUmRYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdhV1lnS0d4bGJpQThJREV3TURBZ2ZId2dJVUoxWm1abGNpNVVXVkJGUkY5QlVsSkJXVjlUVlZCUVQxSlVLU0I3WEc0Z0lDQWdMeThnWVhOalpXNWthVzVuSUdOdmNIa2dabkp2YlNCemRHRnlkRnh1SUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCc1pXNDdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RHRnlaMlYwVzJrZ0t5QjBZWEpuWlhSVGRHRnlkRjBnUFNCMGFHbHpXMmtnS3lCemRHRnlkRjFjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR0Z5WjJWMExsOXpaWFFvZEdocGN5NXpkV0poY25KaGVTaHpkR0Z5ZEN3Z2MzUmhjblFnS3lCc1pXNHBMQ0IwWVhKblpYUlRkR0Z5ZENsY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCc1pXNWNibjFjYmx4dUx5OGdabWxzYkNoMllXeDFaU3dnYzNSaGNuUTlNQ3dnWlc1a1BXSjFabVpsY2k1c1pXNW5kR2dwWEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1acGJHd2dQU0JtZFc1amRHbHZiaUJtYVd4c0lDaDJZV3gxWlN3Z2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCcFppQW9JWFpoYkhWbEtTQjJZV3gxWlNBOUlEQmNiaUFnYVdZZ0tDRnpkR0Z5ZENrZ2MzUmhjblFnUFNBd1hHNGdJR2xtSUNnaFpXNWtLU0JsYm1RZ1BTQjBhR2x6TG14bGJtZDBhRnh1WEc0Z0lHbG1JQ2hsYm1RZ1BDQnpkR0Z5ZENrZ2RHaHliM2NnYm1WM0lGSmhibWRsUlhKeWIzSW9KMlZ1WkNBOElITjBZWEowSnlsY2JseHVJQ0F2THlCR2FXeHNJREFnWW5sMFpYTTdJSGRsSjNKbElHUnZibVZjYmlBZ2FXWWdLR1Z1WkNBOVBUMGdjM1JoY25RcElISmxkSFZ5Ymx4dUlDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BUMDlJREFwSUhKbGRIVnlibHh1WEc0Z0lHbG1JQ2h6ZEdGeWRDQThJREFnZkh3Z2MzUmhjblFnUGowZ2RHaHBjeTVzWlc1bmRHZ3BJSFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0NkemRHRnlkQ0J2ZFhRZ2IyWWdZbTkxYm1Sekp5bGNiaUFnYVdZZ0tHVnVaQ0E4SURBZ2ZId2daVzVrSUQ0Z2RHaHBjeTVzWlc1bmRHZ3BJSFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0NkbGJtUWdiM1YwSUc5bUlHSnZkVzVrY3ljcFhHNWNiaUFnZG1GeUlHbGNiaUFnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNCbWIzSWdLR2tnUFNCemRHRnlkRHNnYVNBOElHVnVaRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjBhR2x6VzJsZElEMGdkbUZzZFdWY2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZG1GeUlHSjVkR1Z6SUQwZ2RYUm1PRlJ2UW5sMFpYTW9kbUZzZFdVdWRHOVRkSEpwYm1jb0tTbGNiaUFnSUNCMllYSWdiR1Z1SUQwZ1lubDBaWE11YkdWdVozUm9YRzRnSUNBZ1ptOXlJQ2hwSUQwZ2MzUmhjblE3SUdrZ1BDQmxibVE3SUdrckt5a2dlMXh1SUNBZ0lDQWdkR2hwYzF0cFhTQTlJR0o1ZEdWelcya2dKU0JzWlc1ZFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhSb2FYTmNibjFjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJR0JCY25KaGVVSjFabVpsY21BZ2QybDBhQ0IwYUdVZ0ttTnZjR2xsWkNvZ2JXVnRiM0o1SUc5bUlIUm9aU0JpZFdabVpYSWdhVzV6ZEdGdVkyVXVYRzRnS2lCQlpHUmxaQ0JwYmlCT2IyUmxJREF1TVRJdUlFOXViSGtnWVhaaGFXeGhZbXhsSUdsdUlHSnliM2R6WlhKeklIUm9ZWFFnYzNWd2NHOXlkQ0JCY25KaGVVSjFabVpsY2k1Y2JpQXFMMXh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUwYjBGeWNtRjVRblZtWm1WeUlEMGdablZ1WTNScGIyNGdkRzlCY25KaGVVSjFabVpsY2lBb0tTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ1ZXbHVkRGhCY25KaGVTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNCcFppQW9RblZtWm1WeUxsUlpVRVZFWDBGU1VrRlpYMU5WVUZCUFVsUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW9ibVYzSUVKMVptWmxjaWgwYUdsektTa3VZblZtWm1WeVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFpoY2lCaWRXWWdQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaDBhR2x6TG14bGJtZDBhQ2xjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNaVzRnUFNCaWRXWXViR1Z1WjNSb095QnBJRHdnYkdWdU95QnBJQ3M5SURFcElIdGNiaUFnSUNBZ0lDQWdZblZtVzJsZElEMGdkR2hwYzF0cFhWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUdKMVppNWlkV1ptWlhKY2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblFuVm1abVZ5TG5SdlFYSnlZWGxDZFdabVpYSWdibTkwSUhOMWNIQnZjblJsWkNCcGJpQjBhR2x6SUdKeWIzZHpaWEluS1Z4dUlDQjlYRzU5WEc1Y2JpOHZJRWhGVEZCRlVpQkdWVTVEVkVsUFRsTmNiaTh2SUQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmx4dWRtRnlJRUpRSUQwZ1FuVm1abVZ5TG5CeWIzUnZkSGx3WlZ4dVhHNHZLaXBjYmlBcUlFRjFaMjFsYm5RZ1lTQlZhVzUwT0VGeWNtRjVJQ3BwYm5OMFlXNWpaU29nS0c1dmRDQjBhR1VnVldsdWREaEJjbkpoZVNCamJHRnpjeUVwSUhkcGRHZ2dRblZtWm1WeUlHMWxkR2h2WkhOY2JpQXFMMXh1UW5WbVptVnlMbDloZFdkdFpXNTBJRDBnWm5WdVkzUnBiMjRnWDJGMVoyMWxiblFnS0dGeWNpa2dlMXh1SUNCaGNuSXVZMjl1YzNSeWRXTjBiM0lnUFNCQ2RXWm1aWEpjYmlBZ1lYSnlMbDlwYzBKMVptWmxjaUE5SUhSeWRXVmNibHh1SUNBdkx5QnpZWFpsSUhKbFptVnlaVzVqWlNCMGJ5QnZjbWxuYVc1aGJDQlZhVzUwT0VGeWNtRjVJSE5sZENCdFpYUm9iMlFnWW1WbWIzSmxJRzkyWlhKM2NtbDBhVzVuWEc0Z0lHRnljaTVmYzJWMElEMGdZWEp5TG5ObGRGeHVYRzRnSUM4dklHUmxjSEpsWTJGMFpXUmNiaUFnWVhKeUxtZGxkQ0E5SUVKUUxtZGxkRnh1SUNCaGNuSXVjMlYwSUQwZ1FsQXVjMlYwWEc1Y2JpQWdZWEp5TG5keWFYUmxJRDBnUWxBdWQzSnBkR1ZjYmlBZ1lYSnlMblJ2VTNSeWFXNW5JRDBnUWxBdWRHOVRkSEpwYm1kY2JpQWdZWEp5TG5SdlRHOWpZV3hsVTNSeWFXNW5JRDBnUWxBdWRHOVRkSEpwYm1kY2JpQWdZWEp5TG5SdlNsTlBUaUE5SUVKUUxuUnZTbE5QVGx4dUlDQmhjbkl1WlhGMVlXeHpJRDBnUWxBdVpYRjFZV3h6WEc0Z0lHRnljaTVqYjIxd1lYSmxJRDBnUWxBdVkyOXRjR0Z5WlZ4dUlDQmhjbkl1YVc1a1pYaFBaaUE5SUVKUUxtbHVaR1Y0VDJaY2JpQWdZWEp5TG1OdmNIa2dQU0JDVUM1amIzQjVYRzRnSUdGeWNpNXpiR2xqWlNBOUlFSlFMbk5zYVdObFhHNGdJR0Z5Y2k1eVpXRmtWVWx1ZEV4RklEMGdRbEF1Y21WaFpGVkpiblJNUlZ4dUlDQmhjbkl1Y21WaFpGVkpiblJDUlNBOUlFSlFMbkpsWVdSVlNXNTBRa1ZjYmlBZ1lYSnlMbkpsWVdSVlNXNTBPQ0E5SUVKUUxuSmxZV1JWU1c1ME9GeHVJQ0JoY25JdWNtVmhaRlZKYm5ReE5reEZJRDBnUWxBdWNtVmhaRlZKYm5ReE5reEZYRzRnSUdGeWNpNXlaV0ZrVlVsdWRERTJRa1VnUFNCQ1VDNXlaV0ZrVlVsdWRERTJRa1ZjYmlBZ1lYSnlMbkpsWVdSVlNXNTBNekpNUlNBOUlFSlFMbkpsWVdSVlNXNTBNekpNUlZ4dUlDQmhjbkl1Y21WaFpGVkpiblF6TWtKRklEMGdRbEF1Y21WaFpGVkpiblF6TWtKRlhHNGdJR0Z5Y2k1eVpXRmtTVzUwVEVVZ1BTQkNVQzV5WldGa1NXNTBURVZjYmlBZ1lYSnlMbkpsWVdSSmJuUkNSU0E5SUVKUUxuSmxZV1JKYm5SQ1JWeHVJQ0JoY25JdWNtVmhaRWx1ZERnZ1BTQkNVQzV5WldGa1NXNTBPRnh1SUNCaGNuSXVjbVZoWkVsdWRERTJURVVnUFNCQ1VDNXlaV0ZrU1c1ME1UWk1SVnh1SUNCaGNuSXVjbVZoWkVsdWRERTJRa1VnUFNCQ1VDNXlaV0ZrU1c1ME1UWkNSVnh1SUNCaGNuSXVjbVZoWkVsdWRETXlURVVnUFNCQ1VDNXlaV0ZrU1c1ME16Sk1SVnh1SUNCaGNuSXVjbVZoWkVsdWRETXlRa1VnUFNCQ1VDNXlaV0ZrU1c1ME16SkNSVnh1SUNCaGNuSXVjbVZoWkVac2IyRjBURVVnUFNCQ1VDNXlaV0ZrUm14dllYUk1SVnh1SUNCaGNuSXVjbVZoWkVac2IyRjBRa1VnUFNCQ1VDNXlaV0ZrUm14dllYUkNSVnh1SUNCaGNuSXVjbVZoWkVSdmRXSnNaVXhGSUQwZ1FsQXVjbVZoWkVSdmRXSnNaVXhGWEc0Z0lHRnljaTV5WldGa1JHOTFZbXhsUWtVZ1BTQkNVQzV5WldGa1JHOTFZbXhsUWtWY2JpQWdZWEp5TG5keWFYUmxWVWx1ZERnZ1BTQkNVQzUzY21sMFpWVkpiblE0WEc0Z0lHRnljaTUzY21sMFpWVkpiblJNUlNBOUlFSlFMbmR5YVhSbFZVbHVkRXhGWEc0Z0lHRnljaTUzY21sMFpWVkpiblJDUlNBOUlFSlFMbmR5YVhSbFZVbHVkRUpGWEc0Z0lHRnljaTUzY21sMFpWVkpiblF4Tmt4RklEMGdRbEF1ZDNKcGRHVlZTVzUwTVRaTVJWeHVJQ0JoY25JdWQzSnBkR1ZWU1c1ME1UWkNSU0E5SUVKUUxuZHlhWFJsVlVsdWRERTJRa1ZjYmlBZ1lYSnlMbmR5YVhSbFZVbHVkRE15VEVVZ1BTQkNVQzUzY21sMFpWVkpiblF6TWt4RlhHNGdJR0Z5Y2k1M2NtbDBaVlZKYm5Rek1rSkZJRDBnUWxBdWQzSnBkR1ZWU1c1ME16SkNSVnh1SUNCaGNuSXVkM0pwZEdWSmJuUk1SU0E5SUVKUUxuZHlhWFJsU1c1MFRFVmNiaUFnWVhKeUxuZHlhWFJsU1c1MFFrVWdQU0JDVUM1M2NtbDBaVWx1ZEVKRlhHNGdJR0Z5Y2k1M2NtbDBaVWx1ZERnZ1BTQkNVQzUzY21sMFpVbHVkRGhjYmlBZ1lYSnlMbmR5YVhSbFNXNTBNVFpNUlNBOUlFSlFMbmR5YVhSbFNXNTBNVFpNUlZ4dUlDQmhjbkl1ZDNKcGRHVkpiblF4TmtKRklEMGdRbEF1ZDNKcGRHVkpiblF4TmtKRlhHNGdJR0Z5Y2k1M2NtbDBaVWx1ZERNeVRFVWdQU0JDVUM1M2NtbDBaVWx1ZERNeVRFVmNiaUFnWVhKeUxuZHlhWFJsU1c1ME16SkNSU0E5SUVKUUxuZHlhWFJsU1c1ME16SkNSVnh1SUNCaGNuSXVkM0pwZEdWR2JHOWhkRXhGSUQwZ1FsQXVkM0pwZEdWR2JHOWhkRXhGWEc0Z0lHRnljaTUzY21sMFpVWnNiMkYwUWtVZ1BTQkNVQzUzY21sMFpVWnNiMkYwUWtWY2JpQWdZWEp5TG5keWFYUmxSRzkxWW14bFRFVWdQU0JDVUM1M2NtbDBaVVJ2ZFdKc1pVeEZYRzRnSUdGeWNpNTNjbWwwWlVSdmRXSnNaVUpGSUQwZ1FsQXVkM0pwZEdWRWIzVmliR1ZDUlZ4dUlDQmhjbkl1Wm1sc2JDQTlJRUpRTG1acGJHeGNiaUFnWVhKeUxtbHVjM0JsWTNRZ1BTQkNVQzVwYm5Od1pXTjBYRzRnSUdGeWNpNTBiMEZ5Y21GNVFuVm1abVZ5SUQwZ1FsQXVkRzlCY25KaGVVSjFabVpsY2x4dVhHNGdJSEpsZEhWeWJpQmhjbkpjYm4xY2JseHVkbUZ5SUVsT1ZrRk1TVVJmUWtGVFJUWTBYMUpGSUQwZ0wxdGVLMXhjTHpBdE9VRXRXbUV0ZWkxZlhTOW5YRzVjYm1aMWJtTjBhVzl1SUdKaGMyVTJOR05zWldGdUlDaHpkSElwSUh0Y2JpQWdMeThnVG05a1pTQnpkSEpwY0hNZ2IzVjBJR2x1ZG1Gc2FXUWdZMmhoY21GamRHVnljeUJzYVd0bElGeGNiaUJoYm1RZ1hGeDBJR1p5YjIwZ2RHaGxJSE4wY21sdVp5d2dZbUZ6WlRZMExXcHpJR1J2WlhNZ2JtOTBYRzRnSUhOMGNpQTlJSE4wY21sdVozUnlhVzBvYzNSeUtTNXlaWEJzWVdObEtFbE9Wa0ZNU1VSZlFrRlRSVFkwWDFKRkxDQW5KeWxjYmlBZ0x5OGdUbTlrWlNCamIyNTJaWEowY3lCemRISnBibWR6SUhkcGRHZ2diR1Z1WjNSb0lEd2dNaUIwYnlBbkoxeHVJQ0JwWmlBb2MzUnlMbXhsYm1kMGFDQThJRElwSUhKbGRIVnliaUFuSjF4dUlDQXZMeUJPYjJSbElHRnNiRzkzY3lCbWIzSWdibTl1TFhCaFpHUmxaQ0JpWVhObE5qUWdjM1J5YVc1bmN5QW9iV2x6YzJsdVp5QjBjbUZwYkdsdVp5QTlQVDBwTENCaVlYTmxOalF0YW5NZ1pHOWxjeUJ1YjNSY2JpQWdkMmhwYkdVZ0tITjBjaTVzWlc1bmRHZ2dKU0EwSUNFOVBTQXdLU0I3WEc0Z0lDQWdjM1J5SUQwZ2MzUnlJQ3NnSnowblhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhOMGNseHVmVnh1WEc1bWRXNWpkR2x2YmlCemRISnBibWQwY21sdElDaHpkSElwSUh0Y2JpQWdhV1lnS0hOMGNpNTBjbWx0S1NCeVpYUjFjbTRnYzNSeUxuUnlhVzBvS1Z4dUlDQnlaWFIxY200Z2MzUnlMbkpsY0d4aFkyVW9MMTVjWEhNcmZGeGNjeXNrTDJjc0lDY25LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjBiMGhsZUNBb2Jpa2dlMXh1SUNCcFppQW9iaUE4SURFMktTQnlaWFIxY200Z0p6QW5JQ3NnYmk1MGIxTjBjbWx1WnlneE5pbGNiaUFnY21WMGRYSnVJRzR1ZEc5VGRISnBibWNvTVRZcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhWMFpqaFViMEo1ZEdWeklDaHpkSEpwYm1jc0lIVnVhWFJ6S1NCN1hHNGdJSFZ1YVhSeklEMGdkVzVwZEhNZ2ZId2dTVzVtYVc1cGRIbGNiaUFnZG1GeUlHTnZaR1ZRYjJsdWRGeHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ2MzUnlhVzVuTG14bGJtZDBhRnh1SUNCMllYSWdiR1ZoWkZOMWNuSnZaMkYwWlNBOUlHNTFiR3hjYmlBZ2RtRnlJR0o1ZEdWeklEMGdXMTFjYmx4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnWTI5a1pWQnZhVzUwSUQwZ2MzUnlhVzVuTG1Ob1lYSkRiMlJsUVhRb2FTbGNibHh1SUNBZ0lDOHZJR2x6SUhOMWNuSnZaMkYwWlNCamIyMXdiMjVsYm5SY2JpQWdJQ0JwWmlBb1kyOWtaVkJ2YVc1MElENGdNSGhFTjBaR0lDWW1JR052WkdWUWIybHVkQ0E4SURCNFJUQXdNQ2tnZTF4dUlDQWdJQ0FnTHk4Z2JHRnpkQ0JqYUdGeUlIZGhjeUJoSUd4bFlXUmNiaUFnSUNBZ0lHbG1JQ2doYkdWaFpGTjFjbkp2WjJGMFpTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCdWJ5QnNaV0ZrSUhsbGRGeHVJQ0FnSUNBZ0lDQnBaaUFvWTI5a1pWQnZhVzUwSUQ0Z01IaEVRa1pHS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnZFc1bGVIQmxZM1JsWkNCMGNtRnBiRnh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ29kVzVwZEhNZ0xUMGdNeWtnUGlBdE1Ta2dZbmwwWlhNdWNIVnphQ2d3ZUVWR0xDQXdlRUpHTENBd2VFSkVLVnh1SUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FTQXJJREVnUFQwOUlHeGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUhWdWNHRnBjbVZrSUd4bFlXUmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0tIVnVhWFJ6SUMwOUlETXBJRDRnTFRFcElHSjVkR1Z6TG5CMWMyZ29NSGhGUml3Z01IaENSaXdnTUhoQ1JDbGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkbUZzYVdRZ2JHVmhaRnh1SUNBZ0lDQWdJQ0JzWldGa1UzVnljbTluWVhSbElEMGdZMjlrWlZCdmFXNTBYRzVjYmlBZ0lDQWdJQ0FnWTI5dWRHbHVkV1ZjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z01pQnNaV0ZrY3lCcGJpQmhJSEp2ZDF4dUlDQWdJQ0FnYVdZZ0tHTnZaR1ZRYjJsdWRDQThJREI0UkVNd01Da2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0tIVnVhWFJ6SUMwOUlETXBJRDRnTFRFcElHSjVkR1Z6TG5CMWMyZ29NSGhGUml3Z01IaENSaXdnTUhoQ1JDbGNiaUFnSUNBZ0lDQWdiR1ZoWkZOMWNuSnZaMkYwWlNBOUlHTnZaR1ZRYjJsdWRGeHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUIyWVd4cFpDQnpkWEp5YjJkaGRHVWdjR0ZwY2x4dUlDQWdJQ0FnWTI5a1pWQnZhVzUwSUQwZ0tHeGxZV1JUZFhKeWIyZGhkR1VnTFNBd2VFUTRNREFnUER3Z01UQWdmQ0JqYjJSbFVHOXBiblFnTFNBd2VFUkRNREFwSUNzZ01IZ3hNREF3TUZ4dUlDQWdJSDBnWld4elpTQnBaaUFvYkdWaFpGTjFjbkp2WjJGMFpTa2dlMXh1SUNBZ0lDQWdMeThnZG1Gc2FXUWdZbTF3SUdOb1lYSXNJR0oxZENCc1lYTjBJR05vWVhJZ2QyRnpJR0VnYkdWaFpGeHVJQ0FnSUNBZ2FXWWdLQ2gxYm1sMGN5QXRQU0F6S1NBK0lDMHhLU0JpZVhSbGN5NXdkWE5vS0RCNFJVWXNJREI0UWtZc0lEQjRRa1FwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdiR1ZoWkZOMWNuSnZaMkYwWlNBOUlHNTFiR3hjYmx4dUlDQWdJQzh2SUdWdVkyOWtaU0IxZEdZNFhHNGdJQ0FnYVdZZ0tHTnZaR1ZRYjJsdWRDQThJREI0T0RBcElIdGNiaUFnSUNBZ0lHbG1JQ2dvZFc1cGRITWdMVDBnTVNrZ1BDQXdLU0JpY21WaGExeHVJQ0FnSUNBZ1lubDBaWE11Y0hWemFDaGpiMlJsVUc5cGJuUXBYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGpiMlJsVUc5cGJuUWdQQ0F3ZURnd01Da2dlMXh1SUNBZ0lDQWdhV1lnS0NoMWJtbDBjeUF0UFNBeUtTQThJREFwSUdKeVpXRnJYRzRnSUNBZ0lDQmllWFJsY3k1d2RYTm9LRnh1SUNBZ0lDQWdJQ0JqYjJSbFVHOXBiblFnUGo0Z01IZzJJSHdnTUhoRE1DeGNiaUFnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJQ1lnTUhnelJpQjhJREI0T0RCY2JpQWdJQ0FnSUNsY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dOdlpHVlFiMmx1ZENBOElEQjRNVEF3TURBcElIdGNiaUFnSUNBZ0lHbG1JQ2dvZFc1cGRITWdMVDBnTXlrZ1BDQXdLU0JpY21WaGExeHVJQ0FnSUNBZ1lubDBaWE11Y0hWemFDaGNiaUFnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDQrSURCNFF5QjhJREI0UlRBc1hHNGdJQ0FnSUNBZ0lHTnZaR1ZRYjJsdWRDQStQaUF3ZURZZ0ppQXdlRE5HSUh3Z01IZzRNQ3hjYmlBZ0lDQWdJQ0FnWTI5a1pWQnZhVzUwSUNZZ01IZ3pSaUI4SURCNE9EQmNiaUFnSUNBZ0lDbGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHTnZaR1ZRYjJsdWRDQThJREI0TVRFd01EQXdLU0I3WEc0Z0lDQWdJQ0JwWmlBb0tIVnVhWFJ6SUMwOUlEUXBJRHdnTUNrZ1luSmxZV3RjYmlBZ0lDQWdJR0o1ZEdWekxuQjFjMmdvWEc0Z0lDQWdJQ0FnSUdOdlpHVlFiMmx1ZENBK1BpQXdlREV5SUh3Z01IaEdNQ3hjYmlBZ0lDQWdJQ0FnWTI5a1pWQnZhVzUwSUQ0K0lEQjRReUFtSURCNE0wWWdmQ0F3ZURnd0xGeHVJQ0FnSUNBZ0lDQmpiMlJsVUc5cGJuUWdQajRnTUhnMklDWWdNSGd6UmlCOElEQjRPREFzWEc0Z0lDQWdJQ0FnSUdOdlpHVlFiMmx1ZENBbUlEQjRNMFlnZkNBd2VEZ3dYRzRnSUNBZ0lDQXBYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduU1c1MllXeHBaQ0JqYjJSbElIQnZhVzUwSnlsY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWW5sMFpYTmNibjFjYmx4dVpuVnVZM1JwYjI0Z1lYTmphV2xVYjBKNWRHVnpJQ2h6ZEhJcElIdGNiaUFnZG1GeUlHSjVkR1ZCY25KaGVTQTlJRnRkWEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djM1J5TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0x5OGdUbTlrWlNkeklHTnZaR1VnYzJWbGJYTWdkRzhnWW1VZ1pHOXBibWNnZEdocGN5QmhibVFnYm05MElDWWdNSGczUmk0dVhHNGdJQ0FnWW5sMFpVRnljbUY1TG5CMWMyZ29jM1J5TG1Ob1lYSkRiMlJsUVhRb2FTa2dKaUF3ZUVaR0tWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCaWVYUmxRWEp5WVhsY2JuMWNibHh1Wm5WdVkzUnBiMjRnZFhSbU1UWnNaVlJ2UW5sMFpYTWdLSE4wY2l3Z2RXNXBkSE1wSUh0Y2JpQWdkbUZ5SUdNc0lHaHBMQ0JzYjF4dUlDQjJZWElnWW5sMFpVRnljbUY1SUQwZ1cxMWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCemRISXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0JwWmlBb0tIVnVhWFJ6SUMwOUlESXBJRHdnTUNrZ1luSmxZV3RjYmx4dUlDQWdJR01nUFNCemRISXVZMmhoY2tOdlpHVkJkQ2hwS1Z4dUlDQWdJR2hwSUQwZ1l5QStQaUE0WEc0Z0lDQWdiRzhnUFNCaklDVWdNalUyWEc0Z0lDQWdZbmwwWlVGeWNtRjVMbkIxYzJnb2JHOHBYRzRnSUNBZ1lubDBaVUZ5Y21GNUxuQjFjMmdvYUdrcFhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1lubDBaVUZ5Y21GNVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdKaGMyVTJORlJ2UW5sMFpYTWdLSE4wY2lrZ2UxeHVJQ0J5WlhSMWNtNGdZbUZ6WlRZMExuUnZRbmwwWlVGeWNtRjVLR0poYzJVMk5HTnNaV0Z1S0hOMGNpa3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlHSnNhWFJDZFdabVpYSWdLSE55WXl3Z1pITjBMQ0J2Wm1aelpYUXNJR3hsYm1kMGFDa2dlMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdhV1lnS0NocElDc2diMlptYzJWMElENDlJR1J6ZEM1c1pXNW5kR2dwSUh4OElDaHBJRDQ5SUhOeVl5NXNaVzVuZEdncEtTQmljbVZoYTF4dUlDQWdJR1J6ZEZ0cElDc2diMlptYzJWMFhTQTlJSE55WTF0cFhWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCcFhHNTlYRzVjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDaDNaV0p3WVdOcktTOStMMjV2WkdVdGJHbGljeTFpY205M2MyVnlMMzR2WW5WbVptVnlMMmx1WkdWNExtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNVE5jYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0luWmhjaUJzYjI5cmRYQWdQU0FuUVVKRFJFVkdSMGhKU2t0TVRVNVBVRkZTVTFSVlZsZFlXVnBoWW1Oa1pXWm5hR2xxYTJ4dGJtOXdjWEp6ZEhWMmQzaDVlakF4TWpNME5UWTNPRGtyTHljN1hHNWNianNvWm5WdVkzUnBiMjRnS0dWNGNHOXlkSE1wSUh0Y2JseDBKM1Z6WlNCemRISnBZM1FuTzF4dVhHNGdJSFpoY2lCQmNuSWdQU0FvZEhsd1pXOW1JRlZwYm5RNFFYSnlZWGtnSVQwOUlDZDFibVJsWm1sdVpXUW5LVnh1SUNBZ0lEOGdWV2x1ZERoQmNuSmhlVnh1SUNBZ0lEb2dRWEp5WVhsY2JseHVYSFIyWVhJZ1VFeFZVeUFnSUQwZ0p5c25MbU5vWVhKRGIyUmxRWFFvTUNsY2JseDBkbUZ5SUZOTVFWTklJQ0E5SUNjdkp5NWphR0Z5UTI5a1pVRjBLREFwWEc1Y2RIWmhjaUJPVlUxQ1JWSWdQU0FuTUNjdVkyaGhja052WkdWQmRDZ3dLVnh1WEhSMllYSWdURTlYUlZJZ0lEMGdKMkVuTG1Ob1lYSkRiMlJsUVhRb01DbGNibHgwZG1GeUlGVlFVRVZTSUNBOUlDZEJKeTVqYUdGeVEyOWtaVUYwS0RBcFhHNWNkSFpoY2lCUVRGVlRYMVZTVEY5VFFVWkZJRDBnSnkwbkxtTm9ZWEpEYjJSbFFYUW9NQ2xjYmx4MGRtRnlJRk5NUVZOSVgxVlNURjlUUVVaRklEMGdKMThuTG1Ob1lYSkRiMlJsUVhRb01DbGNibHh1WEhSbWRXNWpkR2x2YmlCa1pXTnZaR1VnS0dWc2RDa2dlMXh1WEhSY2RIWmhjaUJqYjJSbElEMGdaV3gwTG1Ob1lYSkRiMlJsUVhRb01DbGNibHgwWEhScFppQW9ZMjlrWlNBOVBUMGdVRXhWVXlCOGZGeHVYSFJjZENBZ0lDQmpiMlJsSUQwOVBTQlFURlZUWDFWU1RGOVRRVVpGS1Z4dVhIUmNkRngwY21WMGRYSnVJRFl5SUM4dklDY3JKMXh1WEhSY2RHbG1JQ2hqYjJSbElEMDlQU0JUVEVGVFNDQjhmRnh1WEhSY2RDQWdJQ0JqYjJSbElEMDlQU0JUVEVGVFNGOVZVa3hmVTBGR1JTbGNibHgwWEhSY2RISmxkSFZ5YmlBMk15QXZMeUFuTHlkY2JseDBYSFJwWmlBb1kyOWtaU0E4SUU1VlRVSkZVaWxjYmx4MFhIUmNkSEpsZEhWeWJpQXRNU0F2TDI1dklHMWhkR05vWEc1Y2RGeDBhV1lnS0dOdlpHVWdQQ0JPVlUxQ1JWSWdLeUF4TUNsY2JseDBYSFJjZEhKbGRIVnliaUJqYjJSbElDMGdUbFZOUWtWU0lDc2dNallnS3lBeU5seHVYSFJjZEdsbUlDaGpiMlJsSUR3Z1ZWQlFSVklnS3lBeU5pbGNibHgwWEhSY2RISmxkSFZ5YmlCamIyUmxJQzBnVlZCUVJWSmNibHgwWEhScFppQW9ZMjlrWlNBOElFeFBWMFZTSUNzZ01qWXBYRzVjZEZ4MFhIUnlaWFIxY200Z1kyOWtaU0F0SUV4UFYwVlNJQ3NnTWpaY2JseDBmVnh1WEc1Y2RHWjFibU4wYVc5dUlHSTJORlJ2UW5sMFpVRnljbUY1SUNoaU5qUXBJSHRjYmx4MFhIUjJZWElnYVN3Z2Fpd2diQ3dnZEcxd0xDQndiR0ZqWlVodmJHUmxjbk1zSUdGeWNseHVYRzVjZEZ4MGFXWWdLR0kyTkM1c1pXNW5kR2dnSlNBMElENGdNQ2tnZTF4dVhIUmNkRngwZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RKYm5aaGJHbGtJSE4wY21sdVp5NGdUR1Z1WjNSb0lHMTFjM1FnWW1VZ1lTQnRkV3gwYVhCc1pTQnZaaUEwSnlsY2JseDBYSFI5WEc1Y2JseDBYSFF2THlCMGFHVWdiblZ0WW1WeUlHOW1JR1Z4ZFdGc0lITnBaMjV6SUNod2JHRmpaU0JvYjJ4a1pYSnpLVnh1WEhSY2RDOHZJR2xtSUhSb1pYSmxJR0Z5WlNCMGQyOGdjR3hoWTJWb2IyeGtaWEp6TENCMGFHRnVJSFJvWlNCMGQyOGdZMmhoY21GamRHVnljeUJpWldadmNtVWdhWFJjYmx4MFhIUXZMeUJ5WlhCeVpYTmxiblFnYjI1bElHSjVkR1ZjYmx4MFhIUXZMeUJwWmlCMGFHVnlaU0JwY3lCdmJteDVJRzl1WlN3Z2RHaGxiaUIwYUdVZ2RHaHlaV1VnWTJoaGNtRmpkR1Z5Y3lCaVpXWnZjbVVnYVhRZ2NtVndjbVZ6Wlc1MElESWdZbmwwWlhOY2JseDBYSFF2THlCMGFHbHpJR2x6SUdwMWMzUWdZU0JqYUdWaGNDQm9ZV05ySUhSdklHNXZkQ0JrYnlCcGJtUmxlRTltSUhSM2FXTmxYRzVjZEZ4MGRtRnlJR3hsYmlBOUlHSTJOQzVzWlc1bmRHaGNibHgwWEhSd2JHRmpaVWh2YkdSbGNuTWdQU0FuUFNjZ1BUMDlJR0kyTkM1amFHRnlRWFFvYkdWdUlDMGdNaWtnUHlBeUlEb2dKejBuSUQwOVBTQmlOalF1WTJoaGNrRjBLR3hsYmlBdElERXBJRDhnTVNBNklEQmNibHh1WEhSY2RDOHZJR0poYzJVMk5DQnBjeUEwTHpNZ0t5QjFjQ0IwYnlCMGQyOGdZMmhoY21GamRHVnljeUJ2WmlCMGFHVWdiM0pwWjJsdVlXd2daR0YwWVZ4dVhIUmNkR0Z5Y2lBOUlHNWxkeUJCY25Jb1lqWTBMbXhsYm1kMGFDQXFJRE1nTHlBMElDMGdjR3hoWTJWSWIyeGtaWEp6S1Z4dVhHNWNkRngwTHk4Z2FXWWdkR2hsY21VZ1lYSmxJSEJzWVdObGFHOXNaR1Z5Y3l3Z2IyNXNlU0JuWlhRZ2RYQWdkRzhnZEdobElHeGhjM1FnWTI5dGNHeGxkR1VnTkNCamFHRnljMXh1WEhSY2RHd2dQU0J3YkdGalpVaHZiR1JsY25NZ1BpQXdJRDhnWWpZMExteGxibWQwYUNBdElEUWdPaUJpTmpRdWJHVnVaM1JvWEc1Y2JseDBYSFIyWVhJZ1RDQTlJREJjYmx4dVhIUmNkR1oxYm1OMGFXOXVJSEIxYzJnZ0tIWXBJSHRjYmx4MFhIUmNkR0Z5Y2x0TUt5dGRJRDBnZGx4dVhIUmNkSDFjYmx4dVhIUmNkR1p2Y2lBb2FTQTlJREFzSUdvZ1BTQXdPeUJwSUR3Z2JEc2dhU0FyUFNBMExDQnFJQ3M5SURNcElIdGNibHgwWEhSY2RIUnRjQ0E5SUNoa1pXTnZaR1VvWWpZMExtTm9ZWEpCZENocEtTa2dQRHdnTVRncElId2dLR1JsWTI5a1pTaGlOalF1WTJoaGNrRjBLR2tnS3lBeEtTa2dQRHdnTVRJcElId2dLR1JsWTI5a1pTaGlOalF1WTJoaGNrRjBLR2tnS3lBeUtTa2dQRHdnTmlrZ2ZDQmtaV052WkdVb1lqWTBMbU5vWVhKQmRDaHBJQ3NnTXlrcFhHNWNkRngwWEhSd2RYTm9LQ2gwYlhBZ0ppQXdlRVpHTURBd01Da2dQajRnTVRZcFhHNWNkRngwWEhSd2RYTm9LQ2gwYlhBZ0ppQXdlRVpHTURBcElENCtJRGdwWEc1Y2RGeDBYSFJ3ZFhOb0tIUnRjQ0FtSURCNFJrWXBYRzVjZEZ4MGZWeHVYRzVjZEZ4MGFXWWdLSEJzWVdObFNHOXNaR1Z5Y3lBOVBUMGdNaWtnZTF4dVhIUmNkRngwZEcxd0lEMGdLR1JsWTI5a1pTaGlOalF1WTJoaGNrRjBLR2twS1NBOFBDQXlLU0I4SUNoa1pXTnZaR1VvWWpZMExtTm9ZWEpCZENocElDc2dNU2twSUQ0K0lEUXBYRzVjZEZ4MFhIUndkWE5vS0hSdGNDQW1JREI0UmtZcFhHNWNkRngwZlNCbGJITmxJR2xtSUNod2JHRmpaVWh2YkdSbGNuTWdQVDA5SURFcElIdGNibHgwWEhSY2RIUnRjQ0E5SUNoa1pXTnZaR1VvWWpZMExtTm9ZWEpCZENocEtTa2dQRHdnTVRBcElId2dLR1JsWTI5a1pTaGlOalF1WTJoaGNrRjBLR2tnS3lBeEtTa2dQRHdnTkNrZ2ZDQW9aR1ZqYjJSbEtHSTJOQzVqYUdGeVFYUW9hU0FySURJcEtTQStQaUF5S1Z4dVhIUmNkRngwY0hWemFDZ29kRzF3SUQ0K0lEZ3BJQ1lnTUhoR1JpbGNibHgwWEhSY2RIQjFjMmdvZEcxd0lDWWdNSGhHUmlsY2JseDBYSFI5WEc1Y2JseDBYSFJ5WlhSMWNtNGdZWEp5WEc1Y2RIMWNibHh1WEhSbWRXNWpkR2x2YmlCMWFXNTBPRlJ2UW1GelpUWTBJQ2gxYVc1ME9Da2dlMXh1WEhSY2RIWmhjaUJwTEZ4dVhIUmNkRngwWlhoMGNtRkNlWFJsY3lBOUlIVnBiblE0TG14bGJtZDBhQ0FsSURNc0lDOHZJR2xtSUhkbElHaGhkbVVnTVNCaWVYUmxJR3hsWm5Rc0lIQmhaQ0F5SUdKNWRHVnpYRzVjZEZ4MFhIUnZkWFJ3ZFhRZ1BTQmNJbHdpTEZ4dVhIUmNkRngwZEdWdGNDd2diR1Z1WjNSb1hHNWNibHgwWEhSbWRXNWpkR2x2YmlCbGJtTnZaR1VnS0c1MWJTa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHeHZiMnQxY0M1amFHRnlRWFFvYm5WdEtWeHVYSFJjZEgxY2JseHVYSFJjZEdaMWJtTjBhVzl1SUhSeWFYQnNaWFJVYjBKaGMyVTJOQ0FvYm5WdEtTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z1pXNWpiMlJsS0c1MWJTQStQaUF4T0NBbUlEQjRNMFlwSUNzZ1pXNWpiMlJsS0c1MWJTQStQaUF4TWlBbUlEQjRNMFlwSUNzZ1pXNWpiMlJsS0c1MWJTQStQaUEySUNZZ01IZ3pSaWtnS3lCbGJtTnZaR1VvYm5WdElDWWdNSGd6UmlsY2JseDBYSFI5WEc1Y2JseDBYSFF2THlCbmJ5QjBhSEp2ZFdkb0lIUm9aU0JoY25KaGVTQmxkbVZ5ZVNCMGFISmxaU0JpZVhSbGN5d2dkMlVuYkd3Z1pHVmhiQ0IzYVhSb0lIUnlZV2xzYVc1bklITjBkV1ptSUd4aGRHVnlYRzVjZEZ4MFptOXlJQ2hwSUQwZ01Dd2diR1Z1WjNSb0lEMGdkV2x1ZERndWJHVnVaM1JvSUMwZ1pYaDBjbUZDZVhSbGN6c2dhU0E4SUd4bGJtZDBhRHNnYVNBclBTQXpLU0I3WEc1Y2RGeDBYSFIwWlcxd0lEMGdLSFZwYm5RNFcybGRJRHc4SURFMktTQXJJQ2gxYVc1ME9GdHBJQ3NnTVYwZ1BEd2dPQ2tnS3lBb2RXbHVkRGhiYVNBcklESmRLVnh1WEhSY2RGeDBiM1YwY0hWMElDczlJSFJ5YVhCc1pYUlViMEpoYzJVMk5DaDBaVzF3S1Z4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUhCaFpDQjBhR1VnWlc1a0lIZHBkR2dnZW1WeWIzTXNJR0oxZENCdFlXdGxJSE4xY21VZ2RHOGdibTkwSUdadmNtZGxkQ0IwYUdVZ1pYaDBjbUVnWW5sMFpYTmNibHgwWEhSemQybDBZMmdnS0dWNGRISmhRbmwwWlhNcElIdGNibHgwWEhSY2RHTmhjMlVnTVRwY2JseDBYSFJjZEZ4MGRHVnRjQ0E5SUhWcGJuUTRXM1ZwYm5RNExteGxibWQwYUNBdElERmRYRzVjZEZ4MFhIUmNkRzkxZEhCMWRDQXJQU0JsYm1OdlpHVW9kR1Z0Y0NBK1BpQXlLVnh1WEhSY2RGeDBYSFJ2ZFhSd2RYUWdLejBnWlc1amIyUmxLQ2gwWlcxd0lEdzhJRFFwSUNZZ01IZ3pSaWxjYmx4MFhIUmNkRngwYjNWMGNIVjBJQ3M5SUNjOVBTZGNibHgwWEhSY2RGeDBZbkpsWVd0Y2JseDBYSFJjZEdOaGMyVWdNanBjYmx4MFhIUmNkRngwZEdWdGNDQTlJQ2gxYVc1ME9GdDFhVzUwT0M1c1pXNW5kR2dnTFNBeVhTQThQQ0E0S1NBcklDaDFhVzUwT0Z0MWFXNTBPQzVzWlc1bmRHZ2dMU0F4WFNsY2JseDBYSFJjZEZ4MGIzVjBjSFYwSUNzOUlHVnVZMjlrWlNoMFpXMXdJRDQrSURFd0tWeHVYSFJjZEZ4MFhIUnZkWFJ3ZFhRZ0t6MGdaVzVqYjJSbEtDaDBaVzF3SUQ0K0lEUXBJQ1lnTUhnelJpbGNibHgwWEhSY2RGeDBiM1YwY0hWMElDczlJR1Z1WTI5a1pTZ29kR1Z0Y0NBOFBDQXlLU0FtSURCNE0wWXBYRzVjZEZ4MFhIUmNkRzkxZEhCMWRDQXJQU0FuUFNkY2JseDBYSFJjZEZ4MFluSmxZV3RjYmx4MFhIUjlYRzVjYmx4MFhIUnlaWFIxY200Z2IzVjBjSFYwWEc1Y2RIMWNibHh1WEhSbGVIQnZjblJ6TG5SdlFubDBaVUZ5Y21GNUlEMGdZalkwVkc5Q2VYUmxRWEp5WVhsY2JseDBaWGh3YjNKMGN5NW1jbTl0UW5sMFpVRnljbUY1SUQwZ2RXbHVkRGhVYjBKaGMyVTJORnh1ZlNoMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUFvZEdocGN5NWlZWE5sTmpScWN5QTlJSHQ5S1NBNklHVjRjRzl5ZEhNcEtWeHVYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBb2QyVmljR0ZqYXlrdmZpOXViMlJsTFd4cFluTXRZbkp2ZDNObGNpOStMMkoxWm1abGNpOStMMkpoYzJVMk5DMXFjeTlzYVdJdllqWTBMbXB6WEc0Z0tpb2diVzlrZFd4bElHbGtJRDBnTVRSY2JpQXFLaUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNRnh1SUNvcUx5SXNJbVY0Y0c5eWRITXVjbVZoWkNBOUlHWjFibU4wYVc5dUlDaGlkV1ptWlhJc0lHOW1abk5sZEN3Z2FYTk1SU3dnYlV4bGJpd2dia0o1ZEdWektTQjdYRzRnSUhaaGNpQmxMQ0J0WEc0Z0lIWmhjaUJsVEdWdUlEMGdia0o1ZEdWeklDb2dPQ0F0SUcxTVpXNGdMU0F4WEc0Z0lIWmhjaUJsVFdGNElEMGdLREVnUER3Z1pVeGxiaWtnTFNBeFhHNGdJSFpoY2lCbFFtbGhjeUE5SUdWTllYZ2dQajRnTVZ4dUlDQjJZWElnYmtKcGRITWdQU0F0TjF4dUlDQjJZWElnYVNBOUlHbHpURVVnUHlBb2JrSjVkR1Z6SUMwZ01Ta2dPaUF3WEc0Z0lIWmhjaUJrSUQwZ2FYTk1SU0EvSUMweElEb2dNVnh1SUNCMllYSWdjeUE5SUdKMVptWmxjbHR2Wm1aelpYUWdLeUJwWFZ4dVhHNGdJR2tnS3owZ1pGeHVYRzRnSUdVZ1BTQnpJQ1lnS0NneElEdzhJQ2d0YmtKcGRITXBLU0F0SURFcFhHNGdJSE1nUGo0OUlDZ3Ria0pwZEhNcFhHNGdJRzVDYVhSeklDczlJR1ZNWlc1Y2JpQWdabTl5SUNnN0lHNUNhWFJ6SUQ0Z01Ec2daU0E5SUdVZ0tpQXlOVFlnS3lCaWRXWm1aWEpiYjJabWMyVjBJQ3NnYVYwc0lHa2dLejBnWkN3Z2JrSnBkSE1nTFQwZ09Da2dlMzFjYmx4dUlDQnRJRDBnWlNBbUlDZ29NU0E4UENBb0xXNUNhWFJ6S1NrZ0xTQXhLVnh1SUNCbElENCtQU0FvTFc1Q2FYUnpLVnh1SUNCdVFtbDBjeUFyUFNCdFRHVnVYRzRnSUdadmNpQW9PeUJ1UW1sMGN5QStJREE3SUcwZ1BTQnRJQ29nTWpVMklDc2dZblZtWm1WeVcyOW1abk5sZENBcklHbGRMQ0JwSUNzOUlHUXNJRzVDYVhSeklDMDlJRGdwSUh0OVhHNWNiaUFnYVdZZ0tHVWdQVDA5SURBcElIdGNiaUFnSUNCbElEMGdNU0F0SUdWQ2FXRnpYRzRnSUgwZ1pXeHpaU0JwWmlBb1pTQTlQVDBnWlUxaGVDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdElEOGdUbUZPSURvZ0tDaHpJRDhnTFRFZ09pQXhLU0FxSUVsdVptbHVhWFI1S1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUcwZ1BTQnRJQ3NnVFdGMGFDNXdiM2NvTWl3Z2JVeGxiaWxjYmlBZ0lDQmxJRDBnWlNBdElHVkNhV0Z6WEc0Z0lIMWNiaUFnY21WMGRYSnVJQ2h6SUQ4Z0xURWdPaUF4S1NBcUlHMGdLaUJOWVhSb0xuQnZkeWd5TENCbElDMGdiVXhsYmlsY2JuMWNibHh1Wlhod2IzSjBjeTUzY21sMFpTQTlJR1oxYm1OMGFXOXVJQ2hpZFdabVpYSXNJSFpoYkhWbExDQnZabVp6WlhRc0lHbHpURVVzSUcxTVpXNHNJRzVDZVhSbGN5a2dlMXh1SUNCMllYSWdaU3dnYlN3Z1kxeHVJQ0IyWVhJZ1pVeGxiaUE5SUc1Q2VYUmxjeUFxSURnZ0xTQnRUR1Z1SUMwZ01WeHVJQ0IyWVhJZ1pVMWhlQ0E5SUNneElEdzhJR1ZNWlc0cElDMGdNVnh1SUNCMllYSWdaVUpwWVhNZ1BTQmxUV0Y0SUQ0K0lERmNiaUFnZG1GeUlISjBJRDBnS0cxTVpXNGdQVDA5SURJeklEOGdUV0YwYUM1d2IzY29NaXdnTFRJMEtTQXRJRTFoZEdndWNHOTNLRElzSUMwM055a2dPaUF3S1Z4dUlDQjJZWElnYVNBOUlHbHpURVVnUHlBd0lEb2dLRzVDZVhSbGN5QXRJREVwWEc0Z0lIWmhjaUJrSUQwZ2FYTk1SU0EvSURFZ09pQXRNVnh1SUNCMllYSWdjeUE5SUhaaGJIVmxJRHdnTUNCOGZDQW9kbUZzZFdVZ1BUMDlJREFnSmlZZ01TQXZJSFpoYkhWbElEd2dNQ2tnUHlBeElEb2dNRnh1WEc0Z0lIWmhiSFZsSUQwZ1RXRjBhQzVoWW5Nb2RtRnNkV1VwWEc1Y2JpQWdhV1lnS0dselRtRk9LSFpoYkhWbEtTQjhmQ0IyWVd4MVpTQTlQVDBnU1c1bWFXNXBkSGtwSUh0Y2JpQWdJQ0J0SUQwZ2FYTk9ZVTRvZG1Gc2RXVXBJRDhnTVNBNklEQmNiaUFnSUNCbElEMGdaVTFoZUZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdVZ1BTQk5ZWFJvTG1ac2IyOXlLRTFoZEdndWJHOW5LSFpoYkhWbEtTQXZJRTFoZEdndVRFNHlLVnh1SUNBZ0lHbG1JQ2gyWVd4MVpTQXFJQ2hqSUQwZ1RXRjBhQzV3YjNjb01pd2dMV1VwS1NBOElERXBJSHRjYmlBZ0lDQWdJR1V0TFZ4dUlDQWdJQ0FnWXlBcVBTQXlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGxJQ3NnWlVKcFlYTWdQajBnTVNrZ2UxeHVJQ0FnSUNBZ2RtRnNkV1VnS3owZ2NuUWdMeUJqWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIWmhiSFZsSUNzOUlISjBJQ29nVFdGMGFDNXdiM2NvTWl3Z01TQXRJR1ZDYVdGektWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RtRnNkV1VnS2lCaklENDlJRElwSUh0Y2JpQWdJQ0FnSUdVcksxeHVJQ0FnSUNBZ1l5QXZQU0F5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dVZ0t5QmxRbWxoY3lBK1BTQmxUV0Y0S1NCN1hHNGdJQ0FnSUNCdElEMGdNRnh1SUNBZ0lDQWdaU0E5SUdWTllYaGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHVWdLeUJsUW1saGN5QStQU0F4S1NCN1hHNGdJQ0FnSUNCdElEMGdLSFpoYkhWbElDb2dZeUF0SURFcElDb2dUV0YwYUM1d2IzY29NaXdnYlV4bGJpbGNiaUFnSUNBZ0lHVWdQU0JsSUNzZ1pVSnBZWE5jYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JTQTlJSFpoYkhWbElDb2dUV0YwYUM1d2IzY29NaXdnWlVKcFlYTWdMU0F4S1NBcUlFMWhkR2d1Y0c5M0tESXNJRzFNWlc0cFhHNGdJQ0FnSUNCbElEMGdNRnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1p2Y2lBb095QnRUR1Z1SUQ0OUlEZzdJR0oxWm1abGNsdHZabVp6WlhRZ0t5QnBYU0E5SUcwZ0ppQXdlR1ptTENCcElDczlJR1FzSUcwZ0x6MGdNalUyTENCdFRHVnVJQzA5SURncElIdDlYRzVjYmlBZ1pTQTlJQ2hsSUR3OElHMU1aVzRwSUh3Z2JWeHVJQ0JsVEdWdUlDczlJRzFNWlc1Y2JpQWdabTl5SUNnN0lHVk1aVzRnUGlBd095QmlkV1ptWlhKYmIyWm1jMlYwSUNzZ2FWMGdQU0JsSUNZZ01IaG1aaXdnYVNBclBTQmtMQ0JsSUM4OUlESTFOaXdnWlV4bGJpQXRQU0E0S1NCN2ZWeHVYRzRnSUdKMVptWmxjbHR2Wm1aelpYUWdLeUJwSUMwZ1pGMGdmRDBnY3lBcUlERXlPRnh1ZlZ4dVhHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUFvZDJWaWNHRmpheWt2Zmk5dWIyUmxMV3hwWW5NdFluSnZkM05sY2k5K0wySjFabVpsY2k5K0wybGxaV1UzTlRRdmFXNWtaWGd1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBeE5WeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpZG1GeUlIUnZVM1J5YVc1bklEMGdlMzB1ZEc5VGRISnBibWM3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1FYSnlZWGt1YVhOQmNuSmhlU0I4ZkNCbWRXNWpkR2x2YmlBb1lYSnlLU0I3WEc0Z0lISmxkSFZ5YmlCMGIxTjBjbWx1Wnk1allXeHNLR0Z5Y2lrZ1BUMGdKMXR2WW1wbFkzUWdRWEp5WVhsZEp6dGNibjA3WEc1Y2JseHVYRzR2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUtpQlhSVUpRUVVOTElFWlBUMVJGVWx4dUlDb3FJQ2gzWldKd1lXTnJLUzkrTDI1dlpHVXRiR2xpY3kxaWNtOTNjMlZ5TDM0dlluVm1abVZ5TDM0dmFYTmhjbkpoZVM5cGJtUmxlQzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURFMlhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0l2THlCRGIzQjVjbWxuYUhRZ0tHTXBJRUp5YjJOcklFRnNiR1Z1SUNZZ1JHOXRhVzVwWTJzZ1FtRnBaWEl1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNHZMeUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3TGlCVFpXVWdURWxEUlU1VFJTQnBiaUIwYUdVZ2NISnZhbVZqZENCeWIyOTBJR1p2Y2lCc2FXTmxibk5sSUdsdVptOXliV0YwYVc5dUxseHVYRzVwYlhCdmNuUWdURzluSUdaeWIyMGdKeTR2VEc5bkp6dGNibWx0Y0c5eWRDQlZjbXhWZEdsc2FYUjVJR1p5YjIwZ0p5NHZWWEpzVlhScGJHbDBlU2M3WEc1cGJYQnZjblFnVTJsbmJtbHVVM1JoZEdVZ1puSnZiU0FuTGk5VGFXZHVhVzVUZEdGMFpTYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGTnBaMjVwYmxKbGNYVmxjM1FnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0h0Y2JpQWdJQ0FnSUNBZ0x5OGdiV0Z1WkdGMGIzSjVYRzRnSUNBZ0lDQWdJSFZ5YkN3Z1kyeHBaVzUwWDJsa0xDQnlaV1JwY21WamRGOTFjbWtzSUhKbGMzQnZibk5sWDNSNWNHVXNJSE5qYjNCbExDQmhkWFJvYjNKcGRIa3NYRzRnSUNBZ0lDQWdJQzh2SUc5d2RHbHZibUZzWEc0Z0lDQWdJQ0FnSUdSaGRHRXNJSEJ5YjIxd2RDd2daR2x6Y0d4aGVTd2diV0Y0WDJGblpTd2dkV2xmYkc5allXeGxjeXdnYVdSZmRHOXJaVzVmYUdsdWRDd2diRzluYVc1ZmFHbHVkQ3dnWVdOeVgzWmhiSFZsYzF4dUlDQWdJSDBwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YxY213cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NWxjbkp2Y2loY0lrNXZJSFZ5YkNCd1lYTnpaV1FnZEc4Z1UybG5ibWx1VW1WeGRXVnpkRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJblZ5YkZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lXTnNhV1Z1ZEY5cFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtGd2lUbThnWTJ4cFpXNTBYMmxrSUhCaGMzTmxaQ0IwYnlCVGFXZHVhVzVTWlhGMVpYTjBYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lZMnhwWlc1MFgybGtYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2doY21Wa2FYSmxZM1JmZFhKcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VaWEp5YjNJb1hDSk9ieUJ5WldScGNtVmpkRjkxY21rZ2NHRnpjMlZrSUhSdklGTnBaMjVwYmxKbGNYVmxjM1JjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p5WldScGNtVmpkRjkxY21sY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnlaWE53YjI1elpWOTBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdVpYSnliM0lvWENKT2J5QnlaWE53YjI1elpWOTBlWEJsSUhCaGMzTmxaQ0IwYnlCVGFXZHVhVzVTWlhGMVpYTjBYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2ljbVZ6Y0c5dWMyVmZkSGx3WlZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lYTmpiM0JsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdVpYSnliM0lvWENKT2J5QnpZMjl3WlNCd1lYTnpaV1FnZEc4Z1UybG5ibWx1VW1WeGRXVnpkRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJbk5qYjNCbFhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZWFYwYUc5eWFYUjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmN1WlhKeWIzSW9YQ0pPYnlCaGRYUm9iM0pwZEhrZ2NHRnpjMlZrSUhSdklGTnBaMjVwYmxKbGNYVmxjM1JjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0poZFhSb2IzSnBkSGxjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2IybGtZeUE5SUZOcFoyNXBibEpsY1hWbGMzUXVhWE5QYVdSaktISmxjM0J2Ym5ObFgzUjVjR1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbElEMGdibVYzSUZOcFoyNXBibE4wWVhSbEtIc2dibTl1WTJVNklHOXBaR01zSUdSaGRHRXNJR05zYVdWdWRGOXBaQ3dnWVhWMGFHOXlhWFI1SUgwcE8xeHVYRzRnSUNBZ0lDQWdJSFZ5YkNBOUlGVnliRlYwYVd4cGRIa3VZV1JrVVhWbGNubFFZWEpoYlNoMWNtd3NJRndpWTJ4cFpXNTBYMmxrWENJc0lHTnNhV1Z1ZEY5cFpDazdYRzRnSUNBZ0lDQWdJSFZ5YkNBOUlGVnliRlYwYVd4cGRIa3VZV1JrVVhWbGNubFFZWEpoYlNoMWNtd3NJRndpY21Wa2FYSmxZM1JmZFhKcFhDSXNJSEpsWkdseVpXTjBYM1Z5YVNrN1hHNGdJQ0FnSUNBZ0lIVnliQ0E5SUZWeWJGVjBhV3hwZEhrdVlXUmtVWFZsY25sUVlYSmhiU2gxY213c0lGd2ljbVZ6Y0c5dWMyVmZkSGx3WlZ3aUxDQnlaWE53YjI1elpWOTBlWEJsS1R0Y2JpQWdJQ0FnSUNBZ2RYSnNJRDBnVlhKc1ZYUnBiR2wwZVM1aFpHUlJkV1Z5ZVZCaGNtRnRLSFZ5YkN3Z1hDSnpZMjl3WlZ3aUxDQnpZMjl3WlNrN1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQjFjbXdnUFNCVmNteFZkR2xzYVhSNUxtRmtaRkYxWlhKNVVHRnlZVzBvZFhKc0xDQmNJbk4wWVhSbFhDSXNJSFJvYVhNdWMzUmhkR1V1YVdRcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYjJsa1l5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RYSnNJRDBnVlhKc1ZYUnBiR2wwZVM1aFpHUlJkV1Z5ZVZCaGNtRnRLSFZ5YkN3Z1hDSnViMjVqWlZ3aUxDQjBhR2x6TG5OMFlYUmxMbTV2Ym1ObEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnZjSFJwYjI1aGJDQTlJSHNnY0hKdmJYQjBMQ0JrYVhOd2JHRjVMQ0J0WVhoZllXZGxMQ0IxYVY5c2IyTmhiR1Z6TENCcFpGOTBiMnRsYmw5b2FXNTBMQ0JzYjJkcGJsOW9hVzUwTENCaFkzSmZkbUZzZFdWeklIMDdYRzRnSUNBZ0lDQWdJR1p2Y2loc1pYUWdhMlY1SUdsdUlHOXdkR2x2Ym1Gc0tYdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZjSFJwYjI1aGJGdHJaWGxkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNJRDBnVlhKc1ZYUnBiR2wwZVM1aFpHUlJkV1Z5ZVZCaGNtRnRLSFZ5YkN3Z2EyVjVMQ0J2Y0hScGIyNWhiRnRyWlhsZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYSnNJRDBnZFhKc08xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJwYzA5cFpHTW9jbVZ6Y0c5dWMyVmZkSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnY21WemNHOXVjMlZmZEhsd1pTNXpjR3hwZENndlhGeHpLeTluS1M1bWFXeDBaWElvWm5WdVkzUnBiMjRvYVhSbGJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsMFpXMGdQVDA5SUZ3aWFXUmZkRzlyWlc1Y0lqdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFoSVNoeVpYTjFiSFJiTUYwcE8xeHVJQ0FnSUgxY2JpQWdJQ0JjYmlBZ0lDQnpkR0YwYVdNZ2FYTlBRWFYwYUNoeVpYTndiMjV6WlY5MGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQnlaWE53YjI1elpWOTBlWEJsTG5Od2JHbDBLQzljWEhNckwyY3BMbVpwYkhSbGNpaG1kVzVqZEdsdmJpaHBkR1Z0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWFJsYlNBOVBUMGdYQ0owYjJ0bGJsd2lPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNFaEtISmxjM1ZzZEZzd1hTazdYRzRnSUNBZ2ZWeHVmVnh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDFOcFoyNXBibEpsY1hWbGMzUXVhbk5jYmlBcUtpOGlMQ0l2THlCRGIzQjVjbWxuYUhRZ0tHTXBJRUp5YjJOcklFRnNiR1Z1SUNZZ1JHOXRhVzVwWTJzZ1FtRnBaWEl1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNHZMeUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3TGlCVFpXVWdURWxEUlU1VFJTQnBiaUIwYUdVZ2NISnZhbVZqZENCeWIyOTBJR1p2Y2lCc2FXTmxibk5sSUdsdVptOXliV0YwYVc5dUxseHVYRzVwYlhCdmNuUWdURzluSUdaeWIyMGdKeTR2VEc5bkp6dGNibWx0Y0c5eWRDQkhiRzlpWVd3Z1puSnZiU0FuTGk5SGJHOWlZV3duTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJWY214VmRHbHNhWFI1SUh0Y2JpQWdJQ0J6ZEdGMGFXTWdZV1JrVVhWbGNubFFZWEpoYlNoMWNtd3NJRzVoYldVc0lIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gxY213dWFXNWtaWGhQWmlnblB5Y3BJRHdnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhKc0lDczlJRndpUDF3aU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIVnliRnQxY213dWJHVnVaM1JvSUMwZ01WMGdJVDA5SUZ3aVAxd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjbXdnS3owZ1hDSW1YQ0k3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjFjbXdnS3owZ1pXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtHNWhiV1VwTzF4dUlDQWdJQ0FnSUNCMWNtd2dLejBnWENJOVhDSTdYRzRnSUNBZ0lDQWdJSFZ5YkNBclBTQmxibU52WkdWVlVrbERiMjF3YjI1bGJuUW9kbUZzZFdVcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjFjbXc3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklIQmhjbk5sVlhKc1JuSmhaMjFsYm5Rb2RtRnNkV1VzSUdSbGJHbHRhWFJsY2lBOUlGd2lJMXdpTENCbmJHOWlZV3dnUFNCSGJHOWlZV3dwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSlZjbXhWZEdsc2FYUjVMbkJoY25ObFZYSnNSbkpoWjIxbGJuUmNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjJZV3gxWlNBaFBUMGdKM04wY21sdVp5Y3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCbmJHOWlZV3d1Ykc5allYUnBiMjR1YUhKbFpqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnBaSGdnUFNCMllXeDFaUzVzWVhOMFNXNWtaWGhQWmloa1pXeHBiV2wwWlhJcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYVdSNElENDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbElEMGdkbUZzZFdVdWMzVmljM1J5S0dsa2VDQXJJREVwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhCaGNtRnRjeUE5SUh0OUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WblpYZ2dQU0F2S0Z0ZUpqMWRLeWs5S0Z0ZUpsMHFLUzluTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdZMjkxYm5SbGNpQTlJREE3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2h0SUQwZ2NtVm5aWGd1WlhobFl5aDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGNtRnRjMXRrWldOdlpHVlZVa2xEYjIxd2IyNWxiblFvYlZzeFhTbGRJRDBnWkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwS0cxYk1sMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR052ZFc1MFpYSXJLeUErSURVd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLRndpY21WemNHOXVjMlVnWlhoalpXVmtaV1FnWlhod1pXTjBaV1FnYm5WdFltVnlJRzltSUhCaGNtRnRaWFJsY25OY0lpd2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eU9pQmNJbEpsYzNCdmJuTmxJR1Y0WTJWbFpHVmtJR1Y0Y0dWamRHVmtJRzUxYldKbGNpQnZaaUJ3WVhKaGJXVjBaWEp6WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdjSEp2Y0NCcGJpQndZWEpoYlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3WVhKaGJYTTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3ZlR0Y2JpQWdJQ0I5WEc1OVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZWWEpzVlhScGJHbDBlUzVxYzF4dUlDb3FMeUlzSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnUW5Kdlkyc2dRV3hzWlc0Z0ppQkViMjFwYm1samF5QkNZV2xsY2k0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaTh2SUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBdUlGTmxaU0JNU1VORlRsTkZJR2x1SUhSb1pTQndjbTlxWldOMElISnZiM1FnWm05eUlHeHBZMlZ1YzJVZ2FXNW1iM0p0WVhScGIyNHVYRzVjYm1sdGNHOXlkQ0JNYjJjZ1puSnZiU0FuTGk5TWIyY25PMXh1YVcxd2IzSjBJRk4wWVhSbElHWnliMjBnSnk0dlUzUmhkR1VuTzF4dWFXMXdiM0owSUhKaGJtUnZiU0JtY205dElDY3VMM0poYm1SdmJTYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGTnBaMjVwYmxOMFlYUmxJR1Y0ZEdWdVpITWdVM1JoZEdVZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIdHViMjVqWlN3Z1lYVjBhRzl5YVhSNUxDQmpiR2xsYm5SZmFXUjlJRDBnZTMwcElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb1lYSm5kVzFsYm5Seld6QmRLVHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUdsbUlDaHViMjVqWlNBOVBUMGdkSEoxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZibTl1WTJVZ1BTQnlZVzVrYjIwb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2h1YjI1alpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYm05dVkyVWdQU0J1YjI1alpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZWFYwYUc5eWFYUjVJRDBnWVhWMGFHOXlhWFI1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYkdsbGJuUmZhV1FnUFNCamJHbGxiblJmYVdRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWjJWMElHNXZibU5sS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYm05dVkyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGRDQmhkWFJvYjNKcGRIa29LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWhkWFJvYjNKcGRIazdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGRDQmpiR2xsYm5SZmFXUW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpiR2xsYm5SZmFXUTdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJSFJ2VTNSdmNtRm5aVk4wY21sdVp5Z3BJSHRjYmlBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKVGFXZHVhVzVUZEdGMFpTNTBiMU4wYjNKaFoyVlRkSEpwYm1kY0lpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5OMGNtbHVaMmxtZVNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ2RHaHBjeTVwWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFNklIUm9hWE11WkdGMFlTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOeVpXRjBaV1E2SUhSb2FYTXVZM0psWVhSbFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1dmJtTmxPaUIwYUdsekxtNXZibU5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZWFYwYUc5eWFYUjVPaUIwYUdsekxtRjFkR2h2Y21sMGVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc2FXVnVkRjlwWkRvZ2RHaHBjeTVqYkdsbGJuUmZhV1JjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1p5YjIxVGRHOXlZV2RsVTNSeWFXNW5LSE4wYjNKaFoyVlRkSEpwYm1jcElIdGNiaUFnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pUYVdkdWFXNVRkR0YwWlM1bWNtOXRVM1J2Y21GblpWTjBjbWx1WjF3aUtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0JLVTA5T0xuQmhjbk5sS0hOMGIzSmhaMlZUZEhKcGJtY3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZOcFoyNXBibE4wWVhSbEtHUmhkR0VwTzF4dUlDQWdJSDFjYm4xY2JseHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUM0dmMzSmpMMU5wWjI1cGJsTjBZWFJsTG1welhHNGdLaW92SWl3aUx5OGdRMjl3ZVhKcFoyaDBJQ2hqS1NCQ2NtOWpheUJCYkd4bGJpQW1JRVJ2YldsdWFXTnJJRUpoYVdWeUxpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1THk4Z1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DNGdVMlZsSUV4SlEwVk9VMFVnYVc0Z2RHaGxJSEJ5YjJwbFkzUWdjbTl2ZENCbWIzSWdiR2xqWlc1elpTQnBibVp2Y20xaGRHbHZiaTVjYmx4dWFXMXdiM0owSUV4dlp5Qm1jbTl0SUNjdUwweHZaeWM3WEc1cGJYQnZjblFnY21GdVpHOXRJR1p5YjIwZ0p5NHZjbUZ1Wkc5dEp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1UzUmhkR1VnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0h0cFpDd2daR0YwWVN3Z1kzSmxZWFJsWkgwZ1BTQjdmU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlwWkNBOUlHbGtJSHg4SUhKaGJtUnZiU2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrWVhSaElEMGdaR0YwWVR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR055WldGMFpXUWdQVDA5SUNkdWRXMWlaWEluSUNZbUlHTnlaV0YwWldRZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5amNtVmhkR1ZrSUQwZ1kzSmxZWFJsWkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTnlaV0YwWldRZ1BTQndZWEp6WlVsdWRDaEVZWFJsTG01dmR5Z3BJQzhnTVRBd01DazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQm5aWFFnYVdRb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cFpEdGNiaUFnSUNCOVhHNGdJQ0FnWjJWMElHUmhkR0VvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlrWVhSaE8xeHVJQ0FnSUgxY2JpQWdJQ0JuWlhRZ1kzSmxZWFJsWkNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOeVpXRjBaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkRzlUZEc5eVlXZGxVM1J5YVc1bktDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWxOMFlYUmxMblJ2VTNSdmNtRm5aVk4wY21sdVoxd2lLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRXBUVDA0dWMzUnlhVzVuYVdaNUtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa09pQjBhR2x6TG1sa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2dkR2hwY3k1a1lYUmhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kzSmxZWFJsWkRvZ2RHaHBjeTVqY21WaGRHVmtYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCemRHRjBhV01nWm5KdmJWTjBiM0poWjJWVGRISnBibWNvYzNSdmNtRm5aVk4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWxOMFlYUmxMbVp5YjIxVGRHOXlZV2RsVTNSeWFXNW5YQ0lwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGTjBZWFJsS0VwVFQwNHVjR0Z5YzJVb2MzUnZjbUZuWlZOMGNtbHVaeWtwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmpiR1ZoY2xOMFlXeGxVM1JoZEdVb2MzUnZjbUZuWlN3Z1lXZGxLU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVUzUmhkR1V1WTJ4bFlYSlRkR0ZzWlZOMFlYUmxYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJqZFhSdlptWWdQU0JFWVhSbExtNXZkeWdwSUM4Z01UQXdNQ0F0SUdGblpUdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1J2Y21GblpTNW5aWFJCYkd4TFpYbHpLQ2t1ZEdobGJpaHJaWGx6SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVoyOTBJR3RsZVhOY0lpd2dhMlY1Y3lrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQndjbTl0YVhObGN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhMlY1SUc5bUlHdGxlWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjQ0E5SUhOMGIzSmhaMlV1WjJWMEtHdGxlU2t1ZEdobGJpaHBkR1Z0SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISmxiVzkyWlNBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGRHVnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCemRHRjBaU0E5SUZOMFlYUmxMbVp5YjIxVGRHOXlZV2RsVTNSeWFXNW5LR2wwWlcwcFhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSW1kdmRDQnBkR1Z0SUdaeWIyMGdhMlY1T2lCY0lpd2dhMlY1TENCemRHRjBaUzVqY21WaGRHVmtLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTNWpjbVZoZEdWa0lEdzlJR04xZEc5bVppa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaVzF2ZG1VZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtVnljbTl5S0Z3aVJYSnliM0lnY0dGeWMybHVaeUJ6ZEdGMFpTQm1iM0lnYTJWNVhDSXNJR3RsZVN3Z1pTNXRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlcxdmRtVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKdWJ5QnBkR1Z0SUdsdUlITjBiM0poWjJVZ1ptOXlJR3RsZVRvZ1hDSXNJR3RsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXMXZkbVVnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxiVzkyWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSnlaVzF2ZG1Wa0lHbDBaVzBnWm05eUlHdGxlVG9nWENJc0lHdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1J2Y21GblpTNXlaVzF2ZG1Vb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmJXbHpaWE11Y0hWemFDaHdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSjNZV2wwYVc1bklHOXVJSEJ5YjIxcGMyVWdZMjkxYm5RNlhDSXNJSEJ5YjIxcGMyVnpMbXhsYm1kMGFDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzVoYkd3b2NISnZiV2x6WlhNcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOeVl5OVRkR0YwWlM1cWMxeHVJQ29xTHlJc0lpOHZMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVMeThnUVdSaGJFcFRJSFl4TGpBdU9GeHVMeThnUUhCeVpYTmxjblpsSUVOdmNIbHlhV2RvZENBb1l5a2dUV2xqY205emIyWjBJRTl3Wlc0Z1ZHVmphRzV2Ykc5bmFXVnpMQ0JKYm1NdVhHNHZMeUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrWEc0dkx5QkJjR0ZqYUdVZ1RHbGpaVzV6WlNBeUxqQmNiaTh2WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1THk4Z2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpTQjNhWFJvSUhSb1pTQk1hV05sYm5ObExseHVMeThnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNHZMMXh1THk4Z2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0dkwxeHVMeThnVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVMeThnWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVMeThnVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0dkx5QlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0dkx5QnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmk4dkxTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUx5OGdUazlVU1VORk9pQjBhR1VnWTI5a1pTQnBiaUIwYUdseklHWnBiR1VnYjNKcFoybHVZV3hzZVNCa1pYWmxiRzl3WldRZ1lua2dUV2xqY205emIyWjBYRzR2THlCdmNtbG5hVzVoYkNCemIzVnlZMlU2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5QmVuVnlaVUZFTDJGNmRYSmxMV0ZqZEdsMlpXUnBjbVZqZEc5eWVTMXNhV0p5WVhKNUxXWnZjaTFxY3k5aWJHOWlMMjFoYzNSbGNpOXNhV0l2WVdSaGJDNXFjeU5NTVRBeU9WeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQnlZVzVrYjIwb0tTQjdYRzRnSUNBZ2RtRnlJR2QxYVdSSWIyeGtaWElnUFNBbmVIaDRlSGg0ZUhoNGVIaDROSGg0ZUhsNGVIaDRlSGg0ZUhoNGVIaDRlSGduTzF4dUlDQWdJSFpoY2lCb1pYZ2dQU0FuTURFeU16UTFOamM0T1dGaVkyUmxaaWM3WEc0Z0lDQWdkbUZ5SUhJZ1BTQXdPMXh1SUNBZ0lIWmhjaUJuZFdsa1VtVnpjRzl1YzJVZ1BTQmNJbHdpTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWjNWcFpFaHZiR1JsY2k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1ozVnBaRWh2YkdSbGNsdHBYU0FoUFQwZ0p5MG5JQ1ltSUdkMWFXUkliMnhrWlhKYmFWMGdJVDA5SUNjMEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaV0ZqYUNCNElHRnVaQ0I1SUc1bFpXUnpJSFJ2SUdKbElISmhibVJ2YlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjaUE5SUUxaGRHZ3VjbUZ1Wkc5dEtDa2dLaUF4TmlCOElEQTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9aM1ZwWkVodmJHUmxjbHRwWFNBOVBUMGdKM2duS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuZFdsa1VtVnpjRzl1YzJVZ0t6MGdhR1Y0VzNKZE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2QxYVdSSWIyeGtaWEpiYVYwZ1BUMDlJQ2Q1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyeHZZMnN0YzJWeExXRnVaQzF5WlhObGNuWmxaQ0JtYVhKemRDQm9aWGdnYVhNZ1ptbHNkR1Z5WldRZ1lXNWtJSEpsYldGcGJtbHVaeUJvWlhnZ2RtRnNkV1Z6SUdGeVpTQnlZVzVrYjIxY2JpQWdJQ0FnSUNBZ0lDQWdJSElnSmowZ01IZ3pPeUF2THlCaWFYUWdZVzVrSUhkcGRHZ2dNREF4TVNCMGJ5QnpaWFFnY0c5eklESWdkRzhnZW1WeWJ5QS9NRDgvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlJSHc5SURCNE9Ec2dMeThnYzJWMElIQnZjeUF6SUhSdklERWdZWE1nTVQ4L1AxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjNWcFpGSmxjM0J2Ym5ObElDczlJR2hsZUZ0eVhUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkMWFXUlNaWE53YjI1elpTQXJQU0JuZFdsa1NHOXNaR1Z5VzJsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJuZFdsa1VtVnpjRzl1YzJVN1hHNTlYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpjbU12Y21GdVpHOXRMbXB6WEc0Z0tpb3ZJaXdpTHk4Z1EyOXdlWEpwWjJoMElDaGpLU0JDY205amF5QkJiR3hsYmlBbUlFUnZiV2x1YVdOcklFSmhhV1Z5TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVMeThnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUM0Z1UyVmxJRXhKUTBWT1UwVWdhVzRnZEdobElIQnliMnBsWTNRZ2NtOXZkQ0JtYjNJZ2JHbGpaVzV6WlNCcGJtWnZjbTFoZEdsdmJpNWNibHh1YVcxd2IzSjBJRlZ5YkZWMGFXeHBkSGtnWm5KdmJTQW5MaTlWY214VmRHbHNhWFI1Snp0Y2JseHVZMjl1YzNRZ1QybGtZMU5qYjNCbElEMGdYQ0p2Y0dWdWFXUmNJanRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVMmxuYm1sdVVtVnpjRzl1YzJVZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIVnliQ2tnZTF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUIyWVd4MVpYTWdQU0JWY214VmRHbHNhWFI1TG5CaGNuTmxWWEpzUm5KaFoyMWxiblFvZFhKc0xDQmNJaU5jSWlrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjaUE5SUhaaGJIVmxjeTVsY25KdmNqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjbDlrWlhOamNtbHdkR2x2YmlBOUlIWmhiSFZsY3k1bGNuSnZjbDlrWlhOamNtbHdkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNsOTFjbWtnUFNCMllXeDFaWE11WlhKeWIzSmZkWEpwTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpTQTlJSFpoYkhWbGN5NXpkR0YwWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwWkY5MGIydGxiaUE5SUhaaGJIVmxjeTVwWkY5MGIydGxianRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWE56YVc5dVgzTjBZWFJsSUQwZ2RtRnNkV1Z6TG5ObGMzTnBiMjVmYzNSaGRHVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlXTmpaWE56WDNSdmEyVnVJRDBnZG1Gc2RXVnpMbUZqWTJWemMxOTBiMnRsYmp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjJ0bGJsOTBlWEJsSUQwZ2RtRnNkV1Z6TG5SdmEyVnVYM1I1Y0dVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJOdmNHVWdQU0IyWVd4MVpYTXVjMk52Y0dVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKdlptbHNaU0E5SUhWdVpHVm1hVzVsWkRzZ0x5OGdkMmxzYkNCaVpTQnpaWFFnWm5KdmJTQlNaWE53YjI1elpWWmhiR2xrWVhSdmNseHVYRzRnSUNBZ0lDQWdJR3hsZENCbGVIQnBjbVZ6WDJsdUlEMGdjR0Z5YzJWSmJuUW9kbUZzZFdWekxtVjRjR2x5WlhOZmFXNHBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdWNGNHbHlaWE5mYVc0Z1BUMDlJQ2R1ZFcxaVpYSW5JQ1ltSUdWNGNHbHlaWE5mYVc0Z1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYm05M0lEMGdjR0Z5YzJWSmJuUW9SR0YwWlM1dWIzY29LU0F2SURFd01EQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsZUhCcGNtVnpYMkYwSUQwZ2JtOTNJQ3NnWlhod2FYSmxjMTlwYmp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRDQmxlSEJwY21WelgybHVLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1bGVIQnBjbVZ6WDJGMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdibTkzSUQwZ2NHRnljMlZKYm5Rb1JHRjBaUzV1YjNjb0tTQXZJREV3TURBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpYaHdhWEpsYzE5aGRDQXRJRzV2ZHp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRDQmxlSEJwY21Wa0tDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pYaHdhWEpsYzE5cGJpQTlJSFJvYVhNdVpYaHdhWEpsYzE5cGJqdGNiaUFnSUNBZ0lDQWdhV1lnS0dWNGNHbHlaWE5mYVc0Z0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVjRjR2x5WlhOZmFXNGdQRDBnTUR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRDQnpZMjl3WlhNb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9kR2hwY3k1elkyOXdaU0I4ZkNCY0lsd2lLUzV6Y0d4cGRDaGNJaUJjSWlrN1hHNGdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lHZGxkQ0JwYzA5d1pXNUpaRU52Ym01bFkzUW9LWHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyTnZjR1Z6TG1sdVpHVjRUMllvVDJsa1kxTmpiM0JsS1NBK1BTQXdPMXh1SUNBZ0lIMWNibjFjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwxTnBaMjVwYmxKbGMzQnZibk5sTG1welhHNGdLaW92SWl3aUx5OGdRMjl3ZVhKcFoyaDBJQ2hqS1NCQ2NtOWpheUJCYkd4bGJpQW1JRVJ2YldsdWFXTnJJRUpoYVdWeUxpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1THk4Z1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DNGdVMlZsSUV4SlEwVk9VMFVnYVc0Z2RHaGxJSEJ5YjJwbFkzUWdjbTl2ZENCbWIzSWdiR2xqWlc1elpTQnBibVp2Y20xaGRHbHZiaTVjYmx4dWFXMXdiM0owSUV4dlp5Qm1jbTl0SUNjdUwweHZaeWM3WEc1cGJYQnZjblFnVlhKc1ZYUnBiR2wwZVNCbWNtOXRJQ2N1TDFWeWJGVjBhV3hwZEhrbk8xeHVhVzF3YjNKMElGTjBZWFJsSUdaeWIyMGdKeTR2VTNSaGRHVW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlRhV2R1YjNWMFVtVnhkV1Z6ZENCN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2UzVnliQ3dnYVdSZmRHOXJaVzVmYUdsdWRDd2djRzl6ZEY5c2IyZHZkWFJmY21Wa2FYSmxZM1JmZFhKcExDQmtZWFJoZlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhWeWJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtGd2lUbThnZFhKc0lIQmhjM05sWkNCMGJ5QlRhV2R1YjNWMFVtVnhkV1Z6ZEZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5WeWJGd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwWkY5MGIydGxibDlvYVc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMWNtd2dQU0JWY214VmRHbHNhWFI1TG1Ga1pGRjFaWEo1VUdGeVlXMG9kWEpzTENCY0ltbGtYM1J2YTJWdVgyaHBiblJjSWl3Z2FXUmZkRzlyWlc1ZmFHbHVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdiM04wWDJ4dloyOTFkRjl5WldScGNtVmpkRjkxY21rcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjbXdnUFNCVmNteFZkR2xzYVhSNUxtRmtaRkYxWlhKNVVHRnlZVzBvZFhKc0xDQmNJbkJ2YzNSZmJHOW5iM1YwWDNKbFpHbHlaV04wWDNWeWFWd2lMQ0J3YjNOMFgyeHZaMjkxZEY5eVpXUnBjbVZqZEY5MWNta3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1lYUmhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSaGRHVWdQU0J1WlhjZ1UzUmhkR1VvZXlCa1lYUmhJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhKc0lEMGdWWEpzVlhScGJHbDBlUzVoWkdSUmRXVnllVkJoY21GdEtIVnliQ3dnWENKemRHRjBaVndpTENCMGFHbHpMbk4wWVhSbExtbGtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEpzSUQwZ2RYSnNPMXh1SUNBZ0lIMWNibjFjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwxTnBaMjV2ZFhSU1pYRjFaWE4wTG1welhHNGdLaW92SWl3aUx5OGdRMjl3ZVhKcFoyaDBJQ2hqS1NCQ2NtOWpheUJCYkd4bGJpQW1JRVJ2YldsdWFXTnJJRUpoYVdWeUxpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1THk4Z1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DNGdVMlZsSUV4SlEwVk9VMFVnYVc0Z2RHaGxJSEJ5YjJwbFkzUWdjbTl2ZENCbWIzSWdiR2xqWlc1elpTQnBibVp2Y20xaGRHbHZiaTVjYmx4dWFXMXdiM0owSUZWeWJGVjBhV3hwZEhrZ1puSnZiU0FuTGk5VmNteFZkR2xzYVhSNUp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1UybG5ibTkxZEZKbGMzQnZibk5sSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loMWNtd3BJSHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdkbUZzZFdWeklEMGdWWEpzVlhScGJHbDBlUzV3WVhKelpWVnliRVp5WVdkdFpXNTBLSFZ5YkN3Z1hDSS9YQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSWdQU0IyWVd4MVpYTXVaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSmZaR1Z6WTNKcGNIUnBiMjRnUFNCMllXeDFaWE11WlhKeWIzSmZaR1Z6WTNKcGNIUnBiMjQ3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKZmRYSnBJRDBnZG1Gc2RXVnpMbVZ5Y205eVgzVnlhVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbElEMGdkbUZzZFdWekxuTjBZWFJsTzF4dUlDQWdJSDFjYm4xY2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOeVl5OVRhV2R1YjNWMFVtVnpjRzl1YzJVdWFuTmNiaUFxS2k4aUxDSXZMeUJEYjNCNWNtbG5hSFFnS0dNcElFSnliMk5ySUVGc2JHVnVJQ1lnUkc5dGFXNXBZMnNnUW1GcFpYSXVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdMaUJUWldVZ1RFbERSVTVUUlNCcGJpQjBhR1VnY0hKdmFtVmpkQ0J5YjI5MElHWnZjaUJzYVdObGJuTmxJR2x1Wm05eWJXRjBhVzl1TGx4dVhHNXBiWEJ2Y25RZ1RHOW5JR1p5YjIwZ0p5NHZURzluSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nU1c1TlpXMXZjbmxYWldKVGRHOXlZV2RsZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NsN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJSaGRHRWdQU0I3ZlR0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1oyVjBTWFJsYlNoclpYa3BJSHRjYmlBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKSmJrMWxiVzl5ZVZkbFlsTjBiM0poWjJVdVoyVjBTWFJsYlZ3aUxDQnJaWGtwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaR0YwWVZ0clpYbGRPMXh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0J6WlhSSmRHVnRLR3RsZVN3Z2RtRnNkV1VwZTF4dUlDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lrbHVUV1Z0YjNKNVYyVmlVM1J2Y21GblpTNXpaWFJKZEdWdFhDSXNJR3RsZVNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJSaGRHRmJhMlY1WFNBOUlIWmhiSFZsTzF4dUlDQWdJSDBnSUNCY2JpQWdJQ0JjYmlBZ0lDQnlaVzF2ZG1WSmRHVnRLR3RsZVNsN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lTVzVOWlcxdmNubFhaV0pUZEc5eVlXZGxMbkpsYlc5MlpVbDBaVzFjSWl3Z2EyVjVLVHRjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdVgyUmhkR0ZiYTJWNVhUdGNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdaMlYwSUd4bGJtZDBhQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0hSb2FYTXVYMlJoZEdFcExteGxibWQwYUR0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ2EyVjVLR2x1WkdWNEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aDBhR2x6TGw5a1lYUmhLVnRwYm1SbGVGMDdYRzRnSUNBZ2ZWeHVmVnh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDBsdVRXVnRiM0o1VjJWaVUzUnZjbUZuWlM1cWMxeHVJQ29xTHlJc0lpOHZJRU52Y0hseWFXZG9kQ0FvWXlrZ1FuSnZZMnNnUVd4c1pXNGdKaUJFYjIxcGJtbGpheUJDWVdsbGNpNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmk4dklFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQXVJRk5sWlNCTVNVTkZUbE5GSUdsdUlIUm9aU0J3Y205cVpXTjBJSEp2YjNRZ1ptOXlJR3hwWTJWdWMyVWdhVzVtYjNKdFlYUnBiMjR1WEc1Y2JtbHRjRzl5ZENCTWIyY2dabkp2YlNBbkxpOU1iMmNuTzF4dWFXMXdiM0owSUU5cFpHTkRiR2xsYm5RZ1puSnZiU0FuTGk5UGFXUmpRMnhwWlc1MEp6dGNibWx0Y0c5eWRDQlZjMlZ5VFdGdVlXZGxjbE5sZEhScGJtZHpJR1p5YjIwZ0p5NHZWWE5sY2sxaGJtRm5aWEpUWlhSMGFXNW5jeWM3WEc1cGJYQnZjblFnVlhObGNpQm1jbTl0SUNjdUwxVnpaWEluTzF4dWFXMXdiM0owSUZWelpYSk5ZVzVoWjJWeVJYWmxiblJ6SUdaeWIyMGdKeTR2VlhObGNrMWhibUZuWlhKRmRtVnVkSE1uTzF4dWFXMXdiM0owSUZOcGJHVnVkRkpsYm1WM1UyVnlkbWxqWlNCbWNtOXRJQ2N1TDFOcGJHVnVkRkpsYm1WM1UyVnlkbWxqWlNjN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZWelpYSk5ZVzVoWjJWeUlHVjRkR1Z1WkhNZ1QybGtZME5zYVdWdWRDQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jMlYwZEdsdVozTWdQU0I3ZlNrZ2UxeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdhV1lnS0NFb2MyVjBkR2x1WjNNZ2FXNXpkR0Z1WTJWdlppQlZjMlZ5VFdGdVlXZGxjbE5sZEhScGJtZHpLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVozTWdQU0J1WlhjZ1ZYTmxjazFoYm1GblpYSlRaWFIwYVc1bmN5aHpaWFIwYVc1bmN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9jMlYwZEdsdVozTXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlYyWlc1MGN5QTlJRzVsZHlCVmMyVnlUV0Z1WVdkbGNrVjJaVzUwY3loelpYUjBhVzVuY3lrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjMlYwZEdsdVozTXVZWFYwYjIxaGRHbGpVMmxzWlc1MFVtVnVaWGNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpWVhWMGIyMWhkR2xqVTJsc1pXNTBVbVZ1WlhjZ2FYTWdZMjl1Wm1sbmRYSmxaQ3dnYzJWMGRHbHVaeUIxY0NCemFXeGxiblFnY21WdVpYZGNJaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOcGJHVnVkRkpsYm1WM1UyVnlkbWxqWlNBOUlHNWxkeUJUYVd4bGJuUlNaVzVsZDFObGNuWnBZMlVvZEdocGN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQm5aWFFnWDNKbFpHbHlaV04wVG1GMmFXZGhkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhSMGFXNW5jeTV5WldScGNtVmpkRTVoZG1sbllYUnZjanRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBJRjl3YjNCMWNFNWhkbWxuWVhSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMyVjBkR2x1WjNNdWNHOXdkWEJPWVhacFoyRjBiM0k3WEc0Z0lDQWdmVnh1SUNBZ0lHZGxkQ0JmYVdaeVlXMWxUbUYyYVdkaGRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFIwYVc1bmN5NXBabkpoYldWT1lYWnBaMkYwYjNJN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZENCZmRYTmxjbE4wYjNKbEtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1elpYUjBhVzVuY3k1MWMyVnlVM1J2Y21VN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWjJWMElHVjJaVzUwY3lncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJWMlpXNTBjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm5aWFJWYzJWeUtDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWxWelpYSk5ZVzVoWjJWeUxtZGxkRlZ6WlhKY0lpazdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyeHZZV1JWYzJWeUtDa3VkR2hsYmloMWMyVnlJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMWMyVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKMWMyVnlJR3h2WVdSbFpGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkWE5sY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aWRYTmxjaUJ1YjNRZ1ptOTFibVFnYVc0Z2MzUnZjbUZuWlZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVZ0YjNabFZYTmxjaWdwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSlZjMlZ5VFdGdVlXZGxjaTV5WlcxdmRtVlZjMlZ5WENJcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5emRHOXlaVlZ6WlhJb2JuVnNiQ2t1ZEdobGJpZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSW5WelpYSWdjbVZ0YjNabFpDQm1jbTl0SUhOMGIzSmhaMlZjSWlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlYyWlc1MGN5NTFibXh2WVdRb0tUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjMmxuYm1sdVVHOXdkWEFvWVhKbmN5QTlJSHQ5S1NCN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lWWE5sY2sxaGJtRm5aWEl1YzJsbmJtbHVVRzl3ZFhCY0lpazdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElIVnliQ0E5SUdGeVozTXVjbVZrYVhKbFkzUmZkWEpwSUh4OElIUm9hWE11YzJWMGRHbHVaM011Y0c5d2RYQmZjbVZrYVhKbFkzUmZkWEpwSUh4OElIUm9hWE11YzJWMGRHbHVaM011Y21Wa2FYSmxZM1JmZFhKcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVhWeWJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbVZ5Y205eUtGd2lUbThnY0c5d2RYQmZjbVZrYVhKbFkzUmZkWEpwSUc5eUlISmxaR2x5WldOMFgzVnlhU0JqYjI1bWFXZDFjbVZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZxWldOMEtHNWxkeUJGY25KdmNpaGNJazV2SUhCdmNIVndYM0psWkdseVpXTjBYM1Z5YVNCdmNpQnlaV1JwY21WamRGOTFjbWtnWTI5dVptbG5kWEpsWkZ3aUtTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCaGNtZHpMbkpsWkdseVpXTjBYM1Z5YVNBOUlIVnliRHRjYmlBZ0lDQWdJQ0FnWVhKbmN5NWthWE53YkdGNUlEMGdYQ0p3YjNCMWNGd2lPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXphV2R1YVc0b1lYSm5jeXdnZEdocGN5NWZjRzl3ZFhCT1lYWnBaMkYwYjNJc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBWWEpzT2lCMWNtd3NYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzQjFjRmRwYm1SdmQwWmxZWFIxY21Wek9pQmhjbWR6TG5CdmNIVndWMmx1Wkc5M1JtVmhkSFZ5WlhNZ2ZId2dkR2hwY3k1elpYUjBhVzVuY3k1d2IzQjFjRmRwYm1SdmQwWmxZWFIxY21WekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0c5d2RYQlhhVzVrYjNkVVlYSm5aWFE2SUdGeVozTXVjRzl3ZFhCWGFXNWtiM2RVWVhKblpYUWdmSHdnZEdocGN5NXpaWFIwYVc1bmN5NXdiM0IxY0ZkcGJtUnZkMVJoY21kbGRGeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2MybG5ibWx1VUc5d2RYQkRZV3hzWW1GamF5aDFjbXdwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSlZjMlZ5VFdGdVlXZGxjaTV6YVdkdWFXNVFiM0IxY0VOaGJHeGlZV05yWENJcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzJsbmJtbHVRMkZzYkdKaFkyc29kWEpzTENCMGFHbHpMbDl3YjNCMWNFNWhkbWxuWVhSdmNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MybG5ibWx1VTJsc1pXNTBLR0Z5WjNNZ1BTQjdmU2tnZTF4dUlDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lsVnpaWEpOWVc1aFoyVnlMbk5wWjI1cGJsTnBiR1Z1ZEZ3aUtUdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2RYSnNJRDBnWVhKbmN5NXlaV1JwY21WamRGOTFjbWtnZkh3Z2RHaHBjeTV6WlhSMGFXNW5jeTV6YVd4bGJuUmZjbVZrYVhKbFkzUmZkWEpwTzF4dUlDQWdJQ0FnSUNCcFppQW9JWFZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtVnljbTl5S0Z3aVRtOGdjMmxzWlc1MFgzSmxaR2x5WldOMFgzVnlhU0JqYjI1bWFXZDFjbVZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZxWldOMEtHNWxkeUJGY25KdmNpaGNJazV2SUhOcGJHVnVkRjl5WldScGNtVmpkRjkxY21rZ1kyOXVabWxuZFhKbFpGd2lLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmhjbWR6TG5KbFpHbHlaV04wWDNWeWFTQTlJSFZ5YkR0Y2JpQWdJQ0FnSUNBZ1lYSm5jeTV3Y205dGNIUWdQU0JjSW01dmJtVmNJanRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjMmxuYm1sdUtHRnlaM01zSUhSb2FYTXVYMmxtY21GdFpVNWhkbWxuWVhSdmNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUhOcFoyNXBibE5wYkdWdWRFTmhiR3hpWVdOcktIVnliQ2tnZTF4dUlDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lsVnpaWEpOWVc1aFoyVnlMbk5wWjI1cGJsTnBiR1Z1ZEVOaGJHeGlZV05yWENJcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzJsbmJtbHVRMkZzYkdKaFkyc29kWEpzTENCMGFHbHpMbDlwWm5KaGJXVk9ZWFpwWjJGMGIzSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGOXphV2R1YVc0b1lYSm5jeXdnYm1GMmFXZGhkRzl5TENCdVlYWnBaMkYwYjNKUVlYSmhiWE1nUFNCN2ZTa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWw5emFXZHVhVzVjSWlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6YVdkdWFXNVRkR0Z5ZENoaGNtZHpMQ0J1WVhacFoyRjBiM0lzSUc1aGRtbG5ZWFJ2Y2xCaGNtRnRjeWt1ZEdobGJpaHVZWFpTWlhOd2IyNXpaU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmMybG5ibWx1Ulc1a0tHNWhkbEpsYzNCdmJuTmxMblZ5YkNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnSUNCZmMybG5ibWx1UTJGc2JHSmhZMnNvZFhKc0xDQnVZWFpwWjJGMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKZmMybG5ibWx1UTJGc2JHSmhZMnRjSWlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVlYWnBaMkYwYjNJdVkyRnNiR0poWTJzb2RYSnNLVHRjYmlBZ0lDQjlYRzRnSUNBZ1gzTnBaMjV2ZFhRb1lYSm5jeXdnYm1GMmFXZGhkRzl5TENCdVlYWnBaMkYwYjNKUVlYSmhiWE1nUFNCN2ZTa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWw5emFXZHViM1YwWENJcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzJsbmJtOTFkRk4wWVhKMEtHRnlaM01zSUc1aGRtbG5ZWFJ2Y2l3Z2JtRjJhV2RoZEc5eVVHRnlZVzF6S1M1MGFHVnVLRzVoZGxKbGMzQnZibk5sSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXphV2R1YjNWMFJXNWtLRzVoZGxKbGMzQnZibk5sTG5WeWJDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ0lDQmZjMmxuYm05MWRFTmhiR3hpWVdOcktIVnliQ3dnYm1GMmFXZGhkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lYM05wWjI1dmRYUkRZV3hzWW1GamExd2lLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVoZG1sbllYUnZjaTVqWVd4c1ltRmpheWgxY213cE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOcFoyNXBibEpsWkdseVpXTjBLR0Z5WjNNcElIdGNiaUFnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pWYzJWeVRXRnVZV2RsY2k1emFXZHVhVzVTWldScGNtVmpkRndpS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM05wWjI1cGJsTjBZWEowS0dGeVozTXNJSFJvYVhNdVgzSmxaR2x5WldOMFRtRjJhV2RoZEc5eUtUdGNiaUFnSUNCOVhHNGdJQ0FnYzJsbmJtbHVVbVZrYVhKbFkzUkRZV3hzWW1GamF5aDFjbXdwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSlZjMlZ5VFdGdVlXZGxjaTV6YVdkdWFXNVNaV1JwY21WamRFTmhiR3hpWVdOclhDSXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmMybG5ibWx1Ulc1a0tIVnliQ0I4ZkNCMGFHbHpMbDl5WldScGNtVmpkRTVoZG1sbllYUnZjaTUxY213cE8xeHVJQ0FnSUgxY2JpQWdJQ0J6YVdkdWIzVjBVbVZrYVhKbFkzUW9ZWEpuY3lrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbFZ6WlhKTllXNWhaMlZ5TG5OcFoyNXZkWFJTWldScGNtVmpkRndpS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM05wWjI1dmRYUlRkR0Z5ZENoaGNtZHpMQ0IwYUdsekxsOXlaV1JwY21WamRFNWhkbWxuWVhSdmNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUhOcFoyNXZkWFJTWldScGNtVmpkRU5oYkd4aVlXTnJLSFZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbFZ6WlhKTllXNWhaMlZ5TG5OcFoyNXZkWFJTWldScGNtVmpkRU5oYkd4aVlXTnJYQ0lwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjMmxuYm05MWRFVnVaQ2gxY213Z2ZId2dkR2hwY3k1ZmNtVmthWEpsWTNST1lYWnBaMkYwYjNJdWRYSnNLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZjMmxuYm1sdVUzUmhjblFvWVhKbmN5d2dibUYyYVdkaGRHOXlMQ0J1WVhacFoyRjBiM0pRWVhKaGJYTWdQU0I3ZlNrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbDl6YVdkdWFXNVRkR0Z5ZEZ3aUtUdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibUYyYVdkaGRHOXlMbkJ5WlhCaGNtVW9ibUYyYVdkaGRHOXlVR0Z5WVcxektTNTBhR1Z1S0doaGJtUnNaU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSW1kdmRDQnVZWFpwWjJGMGIzSWdkMmx1Wkc5M0lHaGhibVJzWlZ3aUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFUybG5ibWx1VW1WeGRXVnpkQ2hoY21kektTNTBhR1Z1S0hOcFoyNXBibEpsY1hWbGMzUWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVoyOTBJSE5wWjI1cGJpQnlaWEYxWlhOMFhDSXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GMmFXZGhkRzl5VUdGeVlXMXpMblZ5YkNBOUlITnBaMjVwYmxKbGNYVmxjM1F1ZFhKc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCb1lXNWtiR1V1Ym1GMmFXZGhkR1VvYm1GMmFXZGhkRzl5VUdGeVlXMXpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdYM05wWjI1cGJrVnVaQ2gxY213cElIdGNiaUFnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pmYzJsbmJtbHVSVzVrWENJcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CeWIyTmxjM05UYVdkdWFXNVNaWE53YjI1elpTaDFjbXdwTG5Sb1pXNG9jMmxuYm1sdVVtVnpjRzl1YzJVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSm5iM1FnYzJsbmJtbHVJSEpsYzNCdmJuTmxYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RYTmxjaUE5SUc1bGR5QlZjMlZ5S0hOcFoyNXBibEpsYzNCdmJuTmxLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNOMGIzSmxWWE5sY2loMWMyVnlLUzUwYUdWdUtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0luVnpaWElnYzNSdmNtVmtYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUnpMbXh2WVdRb2RYTmxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZFhObGNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZjMmxuYm05MWRGTjBZWEowS0dGeVozTWdQU0I3ZlN3Z2JtRjJhV2RoZEc5eUxDQnVZWFpwWjJGMGIzSlFZWEpoYlhNZ1BTQjdmU2tnZTF4dUlDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lsOXphV2R1YjNWMFUzUmhjblJjSWlrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWhkbWxuWVhSdmNpNXdjbVZ3WVhKbEtHNWhkbWxuWVhSdmNsQmhjbUZ0Y3lrdWRHaGxiaWhvWVc1a2JHVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0puYjNRZ2JtRjJhV2RoZEc5eUlIZHBibVJ2ZHlCb1lXNWtiR1ZjSWlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRlZ6WlhJb0tTNTBhR1Z1S0hWelpYSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aWJHOWhaR1ZrSUdOMWNuSmxiblFnZFhObGNpQm1jbTl0SUhOMGIzSmhaMlZjSWlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVdSZmRHOXJaVzRnUFNCaGNtZHpMbWxrWDNSdmEyVnVYMmhwYm5RZ2ZId2dkWE5sY2lBbUppQjFjMlZ5TG1sa1gzUnZhMlZ1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBaRjkwYjJ0bGJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyY3VhVzVtYnloY0lsTmxkSFJwYm1jZ2FXUmZkRzlyWlc0Z2FXNTBieUJ6YVdkdWIzVjBJSEpsY1hWbGMzUmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlaM011YVdSZmRHOXJaVzVmYUdsdWRDQTlJR2xrWDNSdmEyVnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxiVzkyWlZWelpYSW9LUzUwYUdWdUtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0oxYzJWeUlISmxiVzkyWldRc0lHTnlaV0YwYVc1bklITnBaMjV2ZFhRZ2NtVnhkV1Z6ZEZ3aUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWVGFXZHViM1YwVW1WeGRXVnpkQ2hoY21kektTNTBhR1Z1S0hOcFoyNXZkWFJTWlhGMVpYTjBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVoyOTBJSE5wWjI1dmRYUWdjbVZ4ZFdWemRGd2lLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GMmFXZGhkRzl5VUdGeVlXMXpMblZ5YkNBOUlITnBaMjV2ZFhSU1pYRjFaWE4wTG5WeWJEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCb1lXNWtiR1V1Ym1GMmFXZGhkR1VvYm1GMmFXZGhkRzl5VUdGeVlXMXpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQWdJRjl6YVdkdWIzVjBSVzVrS0hWeWJDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWw5emFXZHViM1YwUlc1a1hDSXBPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnliMk5sYzNOVGFXZHViM1YwVW1WemNHOXVjMlVvZFhKc0tTNTBhR1Z1S0hOcFoyNXZkWFJTWlhOd2IyNXpaU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSW1kdmRDQnphV2R1YjNWMElISmxjM0J2Ym5ObFhDSXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MybG5ibTkxZEZKbGMzQnZibk5sTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCblpYUWdYM1Z6WlhKVGRHOXlaVXRsZVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHQjFjMlZ5T2lSN2RHaHBjeTV6WlhSMGFXNW5jeTVoZFhSb2IzSnBkSGw5T2lSN2RHaHBjeTV6WlhSMGFXNW5jeTVqYkdsbGJuUmZhV1I5WUR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JmYkc5aFpGVnpaWElvS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lYMnh2WVdSVmMyVnlYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkxYzJWeVUzUnZjbVV1WjJWMEtIUm9hWE11WDNWelpYSlRkRzl5WlV0bGVTa3VkR2hsYmloemRHOXlZV2RsVTNSeWFXNW5JRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemRHOXlZV2RsVTNSeWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKMWMyVnlJSE4wYjNKaFoyVlRkSEpwYm1jZ2JHOWhaR1ZrWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCVmMyVnlMbVp5YjIxVGRHOXlZV2RsVTNSeWFXNW5LSE4wYjNKaFoyVlRkSEpwYm1jcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSW01dklIVnpaWElnYzNSdmNtRm5aVk4wY21sdVoxd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JmYzNSdmNtVlZjMlZ5S0hWelpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIVnpaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpWDNOMGIzSmxWWE5sY2lCemRHOXlhVzVuSUhWelpYSmNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCemRHOXlZV2RsVTNSeWFXNW5JRDBnZFhObGNpNTBiMU4wYjNKaFoyVlRkSEpwYm1jb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTFjMlZ5VTNSdmNtVXVjMlYwS0hSb2FYTXVYM1Z6WlhKVGRHOXlaVXRsZVN3Z2MzUnZjbUZuWlZOMGNtbHVaeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbDl6ZEc5eVpWVnpaWElnY21WdGIzWnBibWNnZFhObGNpQnpkRzl5WVdkbFhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM1Z6WlhKVGRHOXlaUzV5WlcxdmRtVW9kR2hwY3k1ZmRYTmxjbE4wYjNKbFMyVjVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JseHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUM0dmMzSmpMMVZ6WlhKTllXNWhaMlZ5TG1welhHNGdLaW92SWl3aUx5OGdRMjl3ZVhKcFoyaDBJQ2hqS1NCQ2NtOWpheUJCYkd4bGJpQW1JRVJ2YldsdWFXTnJJRUpoYVdWeUxpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1THk4Z1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DNGdVMlZsSUV4SlEwVk9VMFVnYVc0Z2RHaGxJSEJ5YjJwbFkzUWdjbTl2ZENCbWIzSWdiR2xqWlc1elpTQnBibVp2Y20xaGRHbHZiaTVjYmx4dWFXMXdiM0owSUV4dlp5Qm1jbTl0SUNjdUwweHZaeWM3WEc1cGJYQnZjblFnVDJsa1kwTnNhV1Z1ZEZObGRIUnBibWR6SUdaeWIyMGdKeTR2VDJsa1kwTnNhV1Z1ZEZObGRIUnBibWR6Snp0Y2JtbHRjRzl5ZENCU1pXUnBjbVZqZEU1aGRtbG5ZWFJ2Y2lCbWNtOXRJQ2N1TDFKbFpHbHlaV04wVG1GMmFXZGhkRzl5Snp0Y2JtbHRjRzl5ZENCUWIzQjFjRTVoZG1sbllYUnZjaUJtY205dElDY3VMMUJ2Y0hWd1RtRjJhV2RoZEc5eUp6dGNibWx0Y0c5eWRDQkpSbkpoYldWT1lYWnBaMkYwYjNJZ1puSnZiU0FuTGk5SlJuSmhiV1ZPWVhacFoyRjBiM0luTzF4dWFXMXdiM0owSUZkbFlsTjBiM0poWjJWVGRHRjBaVk4wYjNKbElHWnliMjBnSnk0dlYyVmlVM1J2Y21GblpWTjBZWFJsVTNSdmNtVW5PMXh1YVcxd2IzSjBJRWRzYjJKaGJDQm1jbTl0SUNjdUwwZHNiMkpoYkNjN1hHNWNibU52Ym5OMElFUmxabUYxYkhSQlkyTmxjM05VYjJ0bGJrVjRjR2x5YVc1blRtOTBhV1pwWTJGMGFXOXVWR2x0WlNBOUlEWXdPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlZjMlZ5VFdGdVlXZGxjbE5sZEhScGJtZHpJR1Y0ZEdWdVpITWdUMmxrWTBOc2FXVnVkRk5sZEhScGJtZHpJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWg3WEc0Z0lDQWdJQ0FnSUhCdmNIVndYM0psWkdseVpXTjBYM1Z5YVN4Y2JpQWdJQ0FnSUNBZ2NHOXdkWEJYYVc1a2IzZEdaV0YwZFhKbGN5eGNiaUFnSUNBZ0lDQWdjRzl3ZFhCWGFXNWtiM2RVWVhKblpYUXNYRzRnSUNBZ0lDQWdJSE5wYkdWdWRGOXlaV1JwY21WamRGOTFjbWtzWEc0Z0lDQWdJQ0FnSUdGMWRHOXRZWFJwWTFOcGJHVnVkRkpsYm1WM0lEMGdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHRmpZMlZ6YzFSdmEyVnVSWGh3YVhKcGJtZE9iM1JwWm1sallYUnBiMjVVYVcxbElEMGdSR1ZtWVhWc2RFRmpZMlZ6YzFSdmEyVnVSWGh3YVhKcGJtZE9iM1JwWm1sallYUnBiMjVVYVcxbExGeHVJQ0FnSUNBZ0lDQnlaV1JwY21WamRFNWhkbWxuWVhSdmNpQTlJRzVsZHlCU1pXUnBjbVZqZEU1aGRtbG5ZWFJ2Y2lncExGeHVJQ0FnSUNBZ0lDQndiM0IxY0U1aGRtbG5ZWFJ2Y2lBOUlHNWxkeUJRYjNCMWNFNWhkbWxuWVhSdmNpZ3BMRnh1SUNBZ0lDQWdJQ0JwWm5KaGJXVk9ZWFpwWjJGMGIzSWdQU0J1WlhjZ1NVWnlZVzFsVG1GMmFXZGhkRzl5S0Nrc1hHNGdJQ0FnSUNBZ0lIVnpaWEpUZEc5eVpTQTlJRzVsZHlCWFpXSlRkRzl5WVdkbFUzUmhkR1ZUZEc5eVpTaDdJSE4wYjNKbE9pQkhiRzlpWVd3dWMyVnpjMmx2YmxOMGIzSmhaMlVnZlNsY2JpQWdJQ0I5SUQwZ2UzMHBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9ZWEpuZFcxbGJuUnpXekJkS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2IzQjFjRjl5WldScGNtVmpkRjkxY21rZ1BTQndiM0IxY0Y5eVpXUnBjbVZqZEY5MWNtazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzQnZjSFZ3VjJsdVpHOTNSbVZoZEhWeVpYTWdQU0J3YjNCMWNGZHBibVJ2ZDBabFlYUjFjbVZ6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3YjNCMWNGZHBibVJ2ZDFSaGNtZGxkQ0E5SUhCdmNIVndWMmx1Wkc5M1ZHRnlaMlYwTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJsc1pXNTBYM0psWkdseVpXTjBYM1Z5YVNBOUlITnBiR1Z1ZEY5eVpXUnBjbVZqZEY5MWNtazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRjFkRzl0WVhScFkxTnBiR1Z1ZEZKbGJtVjNJRDBnSVNGaGRYUnZiV0YwYVdOVGFXeGxiblJTWlc1bGR6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllXTmpaWE56Vkc5clpXNUZlSEJwY21sdVowNXZkR2xtYVdOaGRHbHZibFJwYldVZ1BTQmhZMk5sYzNOVWIydGxia1Y0Y0dseWFXNW5UbTkwYVdacFkyRjBhVzl1VkdsdFpUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaV1JwY21WamRFNWhkbWxuWVhSdmNpQTlJSEpsWkdseVpXTjBUbUYyYVdkaGRHOXlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdiM0IxY0U1aGRtbG5ZWFJ2Y2lBOUlIQnZjSFZ3VG1GMmFXZGhkRzl5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlwWm5KaGJXVk9ZWFpwWjJGMGIzSWdQU0JwWm5KaGJXVk9ZWFpwWjJGMGIzSTdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjMlZ5VTNSdmNtVWdQU0IxYzJWeVUzUnZjbVU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaMlYwSUhCdmNIVndYM0psWkdseVpXTjBYM1Z5YVNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNCdmNIVndYM0psWkdseVpXTjBYM1Z5YVR0Y2JpQWdJQ0I5WEc0Z0lDQWdaMlYwSUhCdmNIVndWMmx1Wkc5M1JtVmhkSFZ5WlhNb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5d2IzQjFjRmRwYm1SdmQwWmxZWFIxY21Wek8xeHVJQ0FnSUgxY2JpQWdJQ0JuWlhRZ2NHOXdkWEJYYVc1a2IzZFVZWEpuWlhRb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5d2IzQjFjRmRwYm1SdmQxUmhjbWRsZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JuWlhRZ2MybHNaVzUwWDNKbFpHbHlaV04wWDNWeWFTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTnBiR1Z1ZEY5eVpXUnBjbVZqZEY5MWNtazdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGRDQmhkWFJ2YldGMGFXTlRhV3hsYm5SU1pXNWxkeWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNFaEtIUm9hWE11YzJsc1pXNTBYM0psWkdseVpXTjBYM1Z5YVNBbUppQjBhR2x6TGw5aGRYUnZiV0YwYVdOVGFXeGxiblJTWlc1bGR5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1oyVjBJR0ZqWTJWemMxUnZhMlZ1Ulhod2FYSnBibWRPYjNScFptbGpZWFJwYjI1VWFXMWxLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV05qWlhOelZHOXJaVzVGZUhCcGNtbHVaMDV2ZEdsbWFXTmhkR2x2YmxScGJXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1oyVjBJSEpsWkdseVpXTjBUbUYyYVdkaGRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZrYVhKbFkzUk9ZWFpwWjJGMGIzSTdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGRDQndiM0IxY0U1aGRtbG5ZWFJ2Y2lncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNCdmNIVndUbUYyYVdkaGRHOXlPMXh1SUNBZ0lIMWNiaUFnSUNCblpYUWdhV1p5WVcxbFRtRjJhV2RoZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFXWnlZVzFsVG1GMmFXZGhkRzl5TzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCblpYUWdkWE5sY2xOMGIzSmxLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkWE5sY2xOMGIzSmxPMXh1SUNBZ0lIMWNibjFjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwxVnpaWEpOWVc1aFoyVnlVMlYwZEdsdVozTXVhbk5jYmlBcUtpOGlMQ0l2THlCRGIzQjVjbWxuYUhRZ0tHTXBJRUp5YjJOcklFRnNiR1Z1SUNZZ1JHOXRhVzVwWTJzZ1FtRnBaWEl1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNHZMeUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3TGlCVFpXVWdURWxEUlU1VFJTQnBiaUIwYUdVZ2NISnZhbVZqZENCeWIyOTBJR1p2Y2lCc2FXTmxibk5sSUdsdVptOXliV0YwYVc5dUxseHVYRzVwYlhCdmNuUWdURzluSUdaeWIyMGdKeTR2VEc5bkp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1VtVmthWEpsWTNST1lYWnBaMkYwYjNJZ2UxeHVJQ0FnSUZ4dUlDQWdJSEJ5WlhCaGNtVW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9kR2hwY3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYm1GMmFXZGhkR1VvY0dGeVlXMXpLU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVVtVmthWEpsWTNST1lYWnBaMkYwYjNJdWJtRjJhV2RoZEdWY0lpazdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JwWmlBb0lYQmhjbUZ0Y3lCOGZDQWhjR0Z5WVcxekxuVnliQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluTG1WeWNtOXlLRndpVG04Z2RYSnNJSEJ5YjNacFpHVmtYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnFaV04wS0c1bGR5QkZjbkp2Y2loY0lrNXZJSFZ5YkNCd2NtOTJhV1JsWkZ3aUtTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCM2FXNWtiM2N1Ykc5allYUnBiMjRnUFNCd1lYSmhiWE11ZFhKc08xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRDQjFjbXdvS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lVbVZrYVhKbFkzUk9ZWFpwWjJGMGIzSXVkWEpzWENJcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2QybHVaRzkzTG14dlkyRjBhVzl1TG1oeVpXWTdYRzRnSUNBZ2ZWeHVmVnh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6Y21NdlVtVmthWEpsWTNST1lYWnBaMkYwYjNJdWFuTmNiaUFxS2k4aUxDSXZMeUJEYjNCNWNtbG5hSFFnS0dNcElFSnliMk5ySUVGc2JHVnVJQ1lnUkc5dGFXNXBZMnNnUW1GcFpYSXVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdMaUJUWldVZ1RFbERSVTVUUlNCcGJpQjBhR1VnY0hKdmFtVmpkQ0J5YjI5MElHWnZjaUJzYVdObGJuTmxJR2x1Wm05eWJXRjBhVzl1TGx4dVhHNXBiWEJ2Y25RZ1RHOW5JR1p5YjIwZ0p5NHZURzluSnp0Y2JtbHRjRzl5ZENCUWIzQjFjRmRwYm1SdmR5Qm1jbTl0SUNjdUwxQnZjSFZ3VjJsdVpHOTNKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVRzl3ZFhCT1lYWnBaMkYwYjNJZ2UxeHVJQ0FnSUZ4dUlDQWdJSEJ5WlhCaGNtVW9jR0Z5WVcxektTQjdYRzRnSUNBZ0lDQWdJR3hsZENCd2IzQjFjQ0E5SUc1bGR5QlFiM0IxY0ZkcGJtUnZkeWh3WVhKaGJYTXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtIQnZjSFZ3S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1kyRnNiR0poWTJzb2RYSnNLU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVVHOXdkWEJPWVhacFoyRjBiM0l1WTJGc2JHSmhZMnRjSWlrN1hHNWNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRkJ2Y0hWd1YybHVaRzkzTG01dmRHbG1lVTl3Wlc1bGNpaDFjbXdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpXcGxZM1FvWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5UWIzQjFjRTVoZG1sbllYUnZjaTVxYzF4dUlDb3FMeUlzSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnUW5Kdlkyc2dRV3hzWlc0Z0ppQkViMjFwYm1samF5QkNZV2xsY2k0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaTh2SUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBdUlGTmxaU0JNU1VORlRsTkZJR2x1SUhSb1pTQndjbTlxWldOMElISnZiM1FnWm05eUlHeHBZMlZ1YzJVZ2FXNW1iM0p0WVhScGIyNHVYRzVjYm1sdGNHOXlkQ0JNYjJjZ1puSnZiU0FuTGk5TWIyY25PMXh1WEc1amIyNXpkQ0JEYUdWamEwWnZjbEJ2Y0hWd1EyeHZjMlZrU1c1MFpYSjJZV3dnUFNBMU1EQTdYRzVqYjI1emRDQkVaV1poZFd4MFVHOXdkWEJHWldGMGRYSmxjeUE5SUNkc2IyTmhkR2x2YmoxdWJ5eDBiMjlzWW1GeVBXNXZMSGRwWkhSb1BUVXdNQ3hvWldsbmFIUTlOVEF3TEd4bFpuUTlNVEF3TEhSdmNEMHhNREFuTzF4dVkyOXVjM1FnUkdWbVlYVnNkRkJ2Y0hWd1ZHRnlaMlYwSUQwZ1hDSmZZbXhoYm10Y0lqdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1VHOXdkWEJYYVc1a2IzY2dlMXh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY0dGeVlXMXpLU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVVHOXdkWEJYYVc1a2IzY3VZM1J2Y2x3aUtUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdjbTl0YVhObElEMGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ6YjJ4MlpTQTlJSEpsYzI5c2RtVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl5WldwbFkzUWdQU0J5WldwbFkzUTdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJKdmRXNWtUV1Z6YzJGblpVVjJaVzUwSUQwZ2RHaHBjeTVmYldWemMyRm5aUzVpYVc1a0tIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjSW0xbGMzTmhaMlZjSWl3Z2RHaHBjeTVmWW05MWJtUk5aWE56WVdkbFJYWmxiblFzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUd4bGRDQm1aV0YwZFhKbGN5QTlJSEJoY21GdGN5NXdiM0IxY0ZkcGJtUnZkMFpsWVhSMWNtVnpJSHg4SUVSbFptRjFiSFJRYjNCMWNFWmxZWFIxY21Wek8xeHVJQ0FnSUNBZ0lDQnNaWFFnZEdGeVoyVjBJRDBnY0dGeVlXMXpMbkJ2Y0hWd1YybHVaRzkzVkdGeVoyVjBJSHg4SUVSbFptRjFiSFJRYjNCMWNGUmhjbWRsZER0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2IzQjFjQ0E5SUhkcGJtUnZkeTV2Y0dWdUtDY25MQ0IwWVhKblpYUXNJR1psWVhSMWNtVnpLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDNCdmNIVndLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbkJ2Y0hWd0lITjFZMk5sYzNObWRXeHNlU0JqY21WaGRHVmtYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyaGxZMnRHYjNKUWIzQjFjRU5zYjNObFpGUnBiV1Z5SUQwZ2QybHVaRzkzTG5ObGRFbHVkR1Z5ZG1Gc0tIUm9hWE11WDJOb1pXTnJSbTl5VUc5d2RYQkRiRzl6WldRdVltbHVaQ2gwYUdsektTd2dRMmhsWTJ0R2IzSlFiM0IxY0VOc2IzTmxaRWx1ZEdWeWRtRnNLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRzVoZG1sbllYUmxLSEJoY21GdGN5a2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWxCdmNIVndWMmx1Wkc5M0xtNWhkbWxuWVhSbFhDSXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmNHOXdkWEFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyVnljbTl5S0Z3aVJYSnliM0lnYjNCbGJtbHVaeUJ3YjNCMWNDQjNhVzVrYjNkY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaUFvSVhCaGNtRnRjeUI4ZkNBaGNHRnlZVzF6TG5WeWJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWlhKeWIzSW9YQ0pPYnlCMWNtd2djSEp2ZG1sa1pXUmNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbE5sZEhScGJtY2dWVkpNSUdsdUlIQnZjSFZ3WENJcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl3YjNCMWNDNW1iMk4xY3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjRzl3ZFhBdWQybHVaRzkzTG14dlkyRjBhVzl1SUQwZ2NHRnlZVzF6TG5WeWJEdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnliMjFwYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWjJWMElIQnliMjFwYzJVb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5d2NtOXRhWE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJRjl6ZFdOalpYTnpLR1JoZEdFcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyeGxZVzUxY0NncE8xeHVYRzRnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpVTNWalkyVnpjMloxYkNCeVpYTndiMjV6WlNCbWNtOXRJSEJ2Y0hWd0lIZHBibVJ2ZDF3aUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVnpiMngyWlNoa1lYUmhLVHRjYmlBZ0lDQjlYRzRnSUNBZ1gyVnljbTl5S0cxbGMzTmhaMlVwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJ4bFlXNTFjQ2dwTzF4dVhHNGdJQ0FnSUNBZ0lFeHZaeTVsY25KdmNpaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVnFaV04wS0c1bGR5QkZjbkp2Y2lodFpYTnpZV2RsS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWDJOc1pXRnVkWEFvS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lVRzl3ZFhCWGFXNWtiM2N1WDJOc1pXRnVkWEJjSWlrN1hHNWNiaUFnSUNBZ0lDQWdkMmx1Wkc5M0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0p0WlhOellXZGxYQ0lzSUhSb2FYTXVYMkp2ZFc1a1RXVnpjMkZuWlVWMlpXNTBMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJSGRwYm1SdmR5NWpiR1ZoY2tsdWRHVnlkbUZzS0hSb2FYTXVYMk5vWldOclJtOXlVRzl3ZFhCRGJHOXpaV1JVYVcxbGNpazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMmhsWTJ0R2IzSlFiM0IxY0VOc2IzTmxaRlJwYldWeUlEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWW05MWJtUk5aWE56WVdkbFJYWmxiblJ6YzJGblpTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjRzl3ZFhBcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjRzl3ZFhBdVkyeHZjMlVvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2IzQjFjQ0E5SUc1MWJHdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gyTm9aV05yUm05eVVHOXdkWEJEYkc5elpXUW9LU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVVHOXdkWEJYYVc1a2IzY3VYMk5vWldOclJtOXlVRzl3ZFhCRGJHOXpaV1JjSWlrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDl3YjNCMWNDQjhmQ0IwYUdsekxsOXdiM0IxY0M1amJHOXpaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyVnljbTl5S0Z3aVVHOXdkWEFnZDJsdVpHOTNJR05zYjNObFpGd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRjl0WlhOellXZGxLR1VwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSlFiM0IxY0ZkcGJtUnZkeTVmYldWemMyRm5aVndpS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWlM1dmNtbG5hVzRnUFQwOUlIUm9hWE11WDI5eWFXZHBiaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdaUzV6YjNWeVkyVWdQVDA5SUhSb2FYTXVYM0J2Y0hWd0xuZHBibVJ2ZDF4dUlDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aWNISnZZMlZ6YzJsdVp5QnRaWE56WVdkbFhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RYSnNJRDBnWlM1a1lYUmhJSHg4SUdVdWMyOTFjbU5sTG14dlkyRjBhVzl1TG1oeVpXWTdJQzh2SUdadmNpQkpSVGxjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyeGxZVzUxY0NncE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kWEpzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzNWalkyVnpjeWg3SUhWeWJEb2dkWEpzSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWlhKeWIzSW9YQ0pKYm5aaGJHbGtJSEpsYzNCdmJuTmxJR1p5YjIwZ2NHOXdkWEJjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JuWlhRZ1gyOXlhV2RwYmlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHeHZZMkYwYVc5dUxuQnliM1J2WTI5c0lDc2dYQ0l2TDF3aUlDc2diRzlqWVhScGIyNHVhRzl6ZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdibTkwYVdaNVQzQmxibVZ5S0hWeWJDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWxCdmNIVndWMmx1Wkc5M0xtNXZkR2xtZVU5d1pXNWxjbHdpS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZDJsdVpHOTNMbTl3Wlc1bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RYSnNJRDBnZFhKc0lIeDhJSGRwYm1SdmR5NXNiMk5oZEdsdmJpNW9jbVZtTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hWeWJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpY0c5emRHbHVaeUIxY213Z2JXVnpjMkZuWlNCMGJ5QnZjR1Z1WlhKY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xtOXdaVzVsY2k1d2IzTjBUV1Z6YzJGblpTaDFjbXdzSUd4dlkyRjBhVzl1TG5CeWIzUnZZMjlzSUNzZ1hDSXZMMXdpSUNzZ2JHOWpZWFJwYjI0dWFHOXpkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5WEc1Y2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOeVl5OVFiM0IxY0ZkcGJtUnZkeTVxYzF4dUlDb3FMeUlzSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnUW5Kdlkyc2dRV3hzWlc0Z0ppQkViMjFwYm1samF5QkNZV2xsY2k0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaTh2SUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBdUlGTmxaU0JNU1VORlRsTkZJR2x1SUhSb1pTQndjbTlxWldOMElISnZiM1FnWm05eUlHeHBZMlZ1YzJVZ2FXNW1iM0p0WVhScGIyNHVYRzVjYm1sdGNHOXlkQ0JNYjJjZ1puSnZiU0FuTGk5TWIyY25PMXh1YVcxd2IzSjBJRWxHY21GdFpWZHBibVJ2ZHlCbWNtOXRJQ2N1TDBsR2NtRnRaVmRwYm1SdmR5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFbEdjbUZ0WlU1aGRtbG5ZWFJ2Y2lCN1hHNWNiaUFnSUNCd2NtVndZWEpsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWm5KaGJXVWdQU0J1WlhjZ1NVWnlZVzFsVjJsdVpHOTNLQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9abkpoYldVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOaGJHeGlZV05yS0hWeWJDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJjdWFXNW1ieWhjSWtsR2NtRnRaVTVoZG1sbllYUnZjaTVqWVd4c1ltRmphMXdpS1R0Y2JseHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdTVVp5WVcxbFYybHVaRzkzTG01dmRHbG1lVkJoY21WdWRDaDFjbXdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpXcGxZM1FvWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5SlJuSmhiV1ZPWVhacFoyRjBiM0l1YW5OY2JpQXFLaThpTENJdkx5QkRiM0I1Y21sbmFIUWdLR01wSUVKeWIyTnJJRUZzYkdWdUlDWWdSRzl0YVc1cFkyc2dRbUZwWlhJdUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzR2THlCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0xpQlRaV1VnVEVsRFJVNVRSU0JwYmlCMGFHVWdjSEp2YW1WamRDQnliMjkwSUdadmNpQnNhV05sYm5ObElHbHVabTl5YldGMGFXOXVMbHh1WEc1cGJYQnZjblFnVEc5bklHWnliMjBnSnk0dlRHOW5KenRjYmx4dVkyOXVjM1FnUkdWbVlYVnNkRlJwYldWdmRYUWdQU0ExTURBd08xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCSlJuSmhiV1ZYYVc1a2IzY2dlMXh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lTVVp5WVcxbFYybHVaRzkzTG1OMGIzSmNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0hKdmJXbHpaU0E5SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNKbGMyOXNkbVVnUFNCeVpYTnZiSFpsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtVnFaV04wSUQwZ2NtVnFaV04wTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWliM1Z1WkUxbGMzTmhaMlZGZG1WdWRDQTlJSFJvYVhNdVgyMWxjM05oWjJVdVltbHVaQ2gwYUdsektUdGNiaUFnSUNBZ0lDQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSnRaWE56WVdkbFhDSXNJSFJvYVhNdVgySnZkVzVrVFdWemMyRm5aVVYyWlc1MExDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bWNtRnRaU0E5SUhkcGJtUnZkeTVrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2lhV1p5WVcxbFhDSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW1jbUZ0WlM1emRIbHNaUzVrYVhOd2JHRjVJRDBnWENKdWIyNWxYQ0k3WEc0Z0lDQWdJQ0FnSUhkcGJtUnZkeTVrYjJOMWJXVnVkQzVpYjJSNUxtRndjR1Z1WkVOb2FXeGtLSFJvYVhNdVgyWnlZVzFsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J1WVhacFoyRjBaU2h3WVhKaGJYTXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKSlJuSmhiV1ZYYVc1a2IzY3VibUYyYVdkaGRHVmNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z3WVhKaGJYTWdmSHdnSVhCaGNtRnRjeTUxY213cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlZ5Y205eUtGd2lUbThnZFhKc0lIQnliM1pwWkdWa1hDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZEdsdFpYSWdQU0IzYVc1a2IzY3VjMlYwVkdsdFpXOTFkQ2gwYUdsekxsOTBhVzFsYjNWMExtSnBibVFvZEdocGN5a3NJRVJsWm1GMWJIUlVhVzFsYjNWMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlp5WVcxbExuTnlZeUE5SUhCaGNtRnRjeTUxY213N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CeWIyMXBjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaMlYwSUhCeWIyMXBjMlVvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl3Y205dGFYTmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGOXpkV05qWlhOektHUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJ4bFlXNTFjQ2dwTzF4dVhHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lVM1ZqWTJWemMyWjFiQ0J5WlhOd2IyNXpaU0JtY205dElHWnlZVzFsSUhkcGJtUnZkMXdpS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WemIyeDJaU2hrWVhSaEtUdGNiaUFnSUNCOVhHNGdJQ0FnWDJWeWNtOXlLRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMnhsWVc1MWNDZ3BPMXh1WEc0Z0lDQWdJQ0FnSUV4dlp5NWxjbkp2Y2lodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WcVpXTjBLRzVsZHlCRmNuSnZjaWh0WlhOellXZGxLU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMk5zWldGdWRYQW9LU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVNVWnlZVzFsVjJsdVpHOTNMbDlqYkdWaGJuVndYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lIZHBibVJ2ZHk1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtGd2liV1Z6YzJGblpWd2lMQ0IwYUdsekxsOWliM1Z1WkUxbGMzTmhaMlZGZG1WdWRDd2dabUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQjNhVzVrYjNjdVkyeGxZWEpVYVcxbGIzVjBLSFJvYVhNdVgzUnBiV1Z5S1R0Y2JpQWdJQ0FnSUNBZ2QybHVaRzkzTG1SdlkzVnRaVzUwTG1KdlpIa3VjbVZ0YjNabFEyaHBiR1FvZEdocGN5NWZabkpoYldVcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzUnBiV1Z5SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZabkpoYldVZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlpYjNWdVpFMWxjM05oWjJWRmRtVnVkSE56WVdkbElEMGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JmZEdsdFpXOTFkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSkpSbkpoYldWWGFXNWtiM2N1WDNScGJXVnZkWFJjSWlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWeWNtOXlLRndpUm5KaGJXVWdkMmx1Wkc5M0lIUnBiV1ZrSUc5MWRGd2lLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZiV1Z6YzJGblpTaGxLU0I3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVNVWnlZVzFsVjJsdVpHOTNMbDl0WlhOellXZGxYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOTBhVzFsY2lBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnWlM1dmNtbG5hVzRnUFQwOUlIUm9hWE11WDI5eWFXZHBiaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdaUzV6YjNWeVkyVWdQVDA5SUhSb2FYTXVYMlp5WVcxbExtTnZiblJsYm5SWGFXNWtiM2RjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RYSnNJRDBnWlM1a1lYUmhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOMVkyTmxjM01vZXlCMWNtdzZJSFZ5YkNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJWeWNtOXlLRndpU1c1MllXeHBaQ0J5WlhOd2IyNXpaU0JtY205dElHWnlZVzFsWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnWjJWMElGOXZjbWxuYVc0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnNiMk5oZEdsdmJpNXdjbTkwYjJOdmJDQXJJRndpTHk5Y0lpQXJJR3h2WTJGMGFXOXVMbWh2YzNRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJRzV2ZEdsbWVWQmhjbVZ1ZENoMWNtd3BJSHRjYmlBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKSlJuSmhiV1ZYYVc1a2IzY3VibTkwYVdaNVVHRnlaVzUwWENJcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoM2FXNWtiM2N1Y0dGeVpXNTBJQ1ltSUhkcGJtUnZkeUFoUFQwZ2QybHVaRzkzTG5CaGNtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkWEpzSUQwZ2RYSnNJSHg4SUhkcGJtUnZkeTVzYjJOaGRHbHZiaTVvY21WbU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIVnliQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aWNHOXpkR2x1WnlCMWNtd2diV1Z6YzJGblpTQjBieUJ3WVhKbGJuUmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJsdVpHOTNMbkJoY21WdWRDNXdiM04wVFdWemMyRm5aU2gxY213c0lHeHZZMkYwYVc5dUxuQnliM1J2WTI5c0lDc2dYQ0l2TDF3aUlDc2diRzlqWVhScGIyNHVhRzl6ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OVhHNWNibHh1WEc0dktpb2dWMFZDVUVGRFN5QkdUMDlVUlZJZ0tpcGNiaUFxS2lBdUwzTnlZeTlKUm5KaGJXVlhhVzVrYjNjdWFuTmNiaUFxS2k4aUxDSXZMeUJEYjNCNWNtbG5hSFFnS0dNcElFSnliMk5ySUVGc2JHVnVJQ1lnUkc5dGFXNXBZMnNnUW1GcFpYSXVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdMaUJUWldVZ1RFbERSVTVUUlNCcGJpQjBhR1VnY0hKdmFtVmpkQ0J5YjI5MElHWnZjaUJzYVdObGJuTmxJR2x1Wm05eWJXRjBhVzl1TGx4dVhHNXBiWEJ2Y25RZ1RHOW5JR1p5YjIwZ0p5NHZURzluSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVlhObGNpQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9lMmxrWDNSdmEyVnVMQ0J6WlhOemFXOXVYM04wWVhSbExDQmhZMk5sYzNOZmRHOXJaVzRzSUhSdmEyVnVYM1I1Y0dVc0lITmpiM0JsTENCd2NtOW1hV3hsTENCbGVIQnBjbVZ6WDJGMExDQnpkR0YwWlgwcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cFpGOTBiMnRsYmlBOUlHbGtYM1J2YTJWdU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGMzTnBiMjVmYzNSaGRHVWdQU0J6WlhOemFXOXVYM04wWVhSbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GalkyVnpjMTkwYjJ0bGJpQTlJR0ZqWTJWemMxOTBiMnRsYmp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjJ0bGJsOTBlWEJsSUQwZ2RHOXJaVzVmZEhsd1pUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elkyOXdaU0E5SUhOamIzQmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliMlpwYkdVZ1BTQndjbTltYVd4bE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WNGNHbHlaWE5mWVhRZ1BTQmxlSEJwY21WelgyRjBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsSUQwZ2MzUmhkR1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaMlYwSUdWNGNHbHlaWE5mYVc0b0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVY0Y0dseVpYTmZZWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdWIzY2dQU0J3WVhKelpVbHVkQ2hFWVhSbExtNXZkeWdwSUM4Z01UQXdNQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVsZUhCcGNtVnpYMkYwSUMwZ2JtOTNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaMlYwSUdWNGNHbHlaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JsZUhCcGNtVnpYMmx1SUQwZ2RHaHBjeTVsZUhCcGNtVnpYMmx1TzF4dUlDQWdJQ0FnSUNCcFppQW9aWGh3YVhKbGMxOXBiaUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhod2FYSmxjMTlwYmlBOFBTQXdPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaMlYwSUhOamIzQmxjeWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoMGFHbHpMbk5qYjNCbElIeDhJRndpWENJcExuTndiR2wwS0Z3aUlGd2lLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBiMU4wYjNKaFoyVlRkSEpwYm1jb0tTQjdYRzRnSUNBZ0lDQWdJRXh2Wnk1cGJtWnZLRndpVlhObGNpNTBiMU4wYjNKaFoyVlRkSEpwYm1kY0lpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5OMGNtbHVaMmxtZVNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkY5MGIydGxiam9nZEdocGN5NXBaRjkwYjJ0bGJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGMzTnBiMjVmYzNSaGRHVTZJSFJvYVhNdWMyVnpjMmx2Ymw5emRHRjBaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmpZMlZ6YzE5MGIydGxiam9nZEdocGN5NWhZMk5sYzNOZmRHOXJaVzRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiMnRsYmw5MGVYQmxPaUIwYUdsekxuUnZhMlZ1WDNSNWNHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCelkyOXdaVG9nZEdocGN5NXpZMjl3WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjJacGJHVTZJSFJvYVhNdWNISnZabWxzWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0Y0dseVpYTmZZWFE2SUhSb2FYTXVaWGh3YVhKbGMxOWhkRnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdabkp2YlZOMGIzSmhaMlZUZEhKcGJtY29jM1J2Y21GblpWTjBjbWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbFZ6WlhJdVpuSnZiVk4wYjNKaFoyVlRkSEpwYm1kY0lpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVlhObGNpaEtVMDlPTG5CaGNuTmxLSE4wYjNKaFoyVlRkSEpwYm1jcEtUdGNiaUFnSUNCOVhHNTlYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpjbU12VlhObGNpNXFjMXh1SUNvcUx5SXNJaTh2SUVOdmNIbHlhV2RvZENBb1l5a2dRbkp2WTJzZ1FXeHNaVzRnSmlCRWIyMXBibWxqYXlCQ1lXbGxjaTRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpOHZJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakF1SUZObFpTQk1TVU5GVGxORklHbHVJSFJvWlNCd2NtOXFaV04wSUhKdmIzUWdabTl5SUd4cFkyVnVjMlVnYVc1bWIzSnRZWFJwYjI0dVhHNWNibWx0Y0c5eWRDQk1iMmNnWm5KdmJTQW5MaTlNYjJjbk8xeHVhVzF3YjNKMElFRmpZMlZ6YzFSdmEyVnVSWFpsYm5SeklHWnliMjBnSnk0dlFXTmpaWE56Vkc5clpXNUZkbVZ1ZEhNbk8xeHVhVzF3YjNKMElFVjJaVzUwSUdaeWIyMGdKeTR2UlhabGJuUW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlZjMlZ5VFdGdVlXZGxja1YyWlc1MGN5QmxlSFJsYm1SeklFRmpZMlZ6YzFSdmEyVnVSWFpsYm5SeklIdGNibHh1SUNBZ0lHTnZibk4wY25WamRHOXlLSE5sZEhScGJtZHpLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLSE5sZEhScGJtZHpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkWE5sY2t4dllXUmxaQ0E5SUc1bGR5QkZkbVZ1ZENoY0lsVnpaWElnYkc5aFpHVmtYQ0lwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkxYzJWeVZXNXNiMkZrWldRZ1BTQnVaWGNnUlhabGJuUW9YQ0pWYzJWeUlIVnViRzloWkdWa1hDSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXphV3hsYm5SU1pXNWxkMFZ5Y205eUlEMGdibVYzSUVWMlpXNTBLRndpVTJsc1pXNTBJSEpsYm1WM0lHVnljbTl5WENJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4dllXUW9kWE5sY2lrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJbFZ6WlhKTllXNWhaMlZ5UlhabGJuUnpMbXh2WVdSY0lpazdYRzRnSUNBZ0lDQWdJSE4xY0dWeUxteHZZV1FvZFhObGNpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzVnpaWEpNYjJGa1pXUXVjbUZwYzJVb2RYTmxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lIVnViRzloWkNncElIdGNiaUFnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pWYzJWeVRXRnVZV2RsY2tWMlpXNTBjeTUxYm14dllXUmNJaWs3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlMblZ1Ykc5aFpDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjMlZ5Vlc1c2IyRmtaV1F1Y21GcGMyVW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmhaR1JWYzJWeVRHOWhaR1ZrS0dOaUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzVnpaWEpNYjJGa1pXUXVZV1JrU0dGdVpHeGxjaWhqWWlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsYlc5MlpWVnpaWEpNYjJGa1pXUW9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZFhObGNreHZZV1JsWkM1eVpXMXZkbVZJWVc1a2JHVnlLR05pS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1lXUmtWWE5sY2xWdWJHOWhaR1ZrS0dOaUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzVnpaWEpWYm14dllXUmxaQzVoWkdSSVlXNWtiR1Z5S0dOaUtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WdGIzWmxWWE5sY2xWdWJHOWhaR1ZrS0dOaUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzVnpaWEpWYm14dllXUmxaQzV5WlcxdmRtVklZVzVrYkdWeUtHTmlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmhaR1JUYVd4bGJuUlNaVzVsZDBWeWNtOXlLR05pS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOcGJHVnVkRkpsYm1WM1JYSnliM0l1WVdSa1NHRnVaR3hsY2loallpazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGJXOTJaVk5wYkdWdWRGSmxibVYzUlhKeWIzSW9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJsc1pXNTBVbVZ1WlhkRmNuSnZjaTV5WlcxdmRtVklZVzVrYkdWeUtHTmlLVHRjYmlBZ0lDQjlYRzRnSUNBZ1gzSmhhWE5sVTJsc1pXNTBVbVZ1WlhkRmNuSnZjaWhsS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lWWE5sY2sxaGJtRm5aWEpGZG1WdWRITXVYM0poYVhObFUybHNaVzUwVW1WdVpYZEZjbkp2Y2x3aUxDQmxMbTFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXphV3hsYm5SU1pXNWxkMFZ5Y205eUxuSmhhWE5sS0dVcE8xeHVJQ0FnSUgxY2JuMWNibHh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDFWelpYSk5ZVzVoWjJWeVJYWmxiblJ6TG1welhHNGdLaW92SWl3aUx5OGdRMjl3ZVhKcFoyaDBJQ2hqS1NCQ2NtOWpheUJCYkd4bGJpQW1JRVJ2YldsdWFXTnJJRUpoYVdWeUxpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1THk4Z1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DNGdVMlZsSUV4SlEwVk9VMFVnYVc0Z2RHaGxJSEJ5YjJwbFkzUWdjbTl2ZENCbWIzSWdiR2xqWlc1elpTQnBibVp2Y20xaGRHbHZiaTVjYmx4dWFXMXdiM0owSUV4dlp5Qm1jbTl0SUNjdUwweHZaeWM3WEc1cGJYQnZjblFnVkdsdFpYSWdabkp2YlNBbkxpOVVhVzFsY2ljN1hHNWNibU52Ym5OMElFUmxabUYxYkhSQlkyTmxjM05VYjJ0bGJrVjRjR2x5YVc1blRtOTBhV1pwWTJGMGFXOXVWR2x0WlNBOUlEWXdPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QkJZMk5sYzNOVWIydGxia1YyWlc1MGN5QjdYRzVjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWg3WEc0Z0lDQWdJQ0FnSUdGalkyVnpjMVJ2YTJWdVJYaHdhWEpwYm1kT2IzUnBabWxqWVhScGIyNVVhVzFsSUQwZ1JHVm1ZWFZzZEVGalkyVnpjMVJ2YTJWdVJYaHdhWEpwYm1kT2IzUnBabWxqWVhScGIyNVVhVzFsTEZ4dUlDQWdJQ0FnSUNCaFkyTmxjM05VYjJ0bGJrVjRjR2x5YVc1blZHbHRaWElnUFNCdVpYY2dWR2x0WlhJb1hDSkJZMk5sYzNNZ2RHOXJaVzRnWlhod2FYSnBibWRjSWlrc1hHNGdJQ0FnSUNBZ0lHRmpZMlZ6YzFSdmEyVnVSWGh3YVhKbFpGUnBiV1Z5SUQwZ2JtVjNJRlJwYldWeUtGd2lRV05qWlhOeklIUnZhMlZ1SUdWNGNHbHlaV1JjSWlsY2JpQWdJQ0I5SUQwZ2UzMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV05qWlhOelZHOXJaVzVGZUhCcGNtbHVaMDV2ZEdsbWFXTmhkR2x2YmxScGJXVWdQU0JoWTJObGMzTlViMnRsYmtWNGNHbHlhVzVuVG05MGFXWnBZMkYwYVc5dVZHbHRaVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWTJObGMzTlViMnRsYmtWNGNHbHlhVzVuSUQwZ1lXTmpaWE56Vkc5clpXNUZlSEJwY21sdVoxUnBiV1Z5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWTJObGMzTlViMnRsYmtWNGNHbHlaV1FnUFNCaFkyTmxjM05VYjJ0bGJrVjRjR2x5WldSVWFXMWxjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNiMkZrS0dOdmJuUmhhVzVsY2lrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmN1YVc1bWJ5aGNJa0ZqWTJWemMxUnZhMlZ1UlhabGJuUnpMbXh2WVdSY0lpazdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpZVzVqWld4VWFXMWxjbk1vS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJ2Ym14NUlISmxaMmx6ZEdWeUlHVjJaVzUwY3lCcFppQjBhR1Z5WlNkeklHRnVJR0ZqWTJWemN5QjBiMnRsYmlCM2FHVnlaU0IzWlNCallYSmxJR0ZpYjNWMElHVjRjR2x5WVhScGIyNWNiaUFnSUNBZ0lDQWdhV1lnS0dOdmJuUmhhVzVsY2k1aFkyTmxjM05mZEc5clpXNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrZFhKaGRHbHZiaUE5SUdOdmJuUmhhVzVsY2k1bGVIQnBjbVZ6WDJsdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bkxtbHVabThvWENKaFkyTmxjM01nZEc5clpXNGdjSEpsYzJWdWRDd2djbVZ0WVdsdWFXNW5JR1IxY21GMGFXOXVPbHdpTENCa2RYSmhkR2x2YmlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtkWEpoZEdsdmJpQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnZibXg1SUhKbFoybHpkR1Z5SUdWNGNHbHlhVzVuSUdsbUlIZGxJSE4wYVd4c0lHaGhkbVVnZEdsdFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JsZUhCcGNtbHVaeUE5SUdSMWNtRjBhVzl1SUMwZ2RHaHBjeTVmWVdOalpYTnpWRzlyWlc1RmVIQnBjbWx1WjA1dmRHbG1hV05oZEdsdmJsUnBiV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVjRjR2x5YVc1bklEdzlJREFwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxlSEJwY21sdVp5QTlJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aWNtVm5hWE4wWlhKcGJtY2daWGh3YVhKcGJtY2dkR2x0WlhJZ2FXNDZYQ0lzSUdWNGNHbHlhVzVuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDloWTJObGMzTlViMnRsYmtWNGNHbHlhVzVuTG1sdWFYUW9aWGh3YVhKcGJtY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmhiSGRoZVhNZ2NtVm5hWE4wWlhJZ1pYaHdhWEpsWkM0Z2FXWWdhWFFuY3lCdVpXZGhkR2wyWlN3Z2FYUWdkMmxzYkNCemRHbHNiQ0JtYVhKbFhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pYaHdhWEpsWkNBOUlHUjFjbUYwYVc5dUlDc2dNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2ljbVZuYVhOMFpYSnBibWNnWlhod2FYSmxaQ0IwYVcxbGNpQnBianBjSWl3Z1pYaHdhWEpsWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWhZMk5sYzNOVWIydGxia1Y0Y0dseVpXUXVhVzVwZENobGVIQnBjbVZrS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhWdWJHOWhaQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5MbWx1Wm04b1hDSkJZMk5sYzNOVWIydGxia1YyWlc1MGN5NTFibXh2WVdSY0lpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTmhibU5sYkZScGJXVnljeWdwTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCZlkyRnVZMlZzVkdsdFpYSnpLQ2w3WEc0Z0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVkyRnVZMlZzYVc1bklHVjRhWE4wYVc1bklHRmpZMlZ6Y3lCMGIydGxiaUIwYVcxbGNuTmNJaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZqWTJWemMxUnZhMlZ1Ulhod2FYSnBibWN1WTJGdVkyVnNLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZqWTJWemMxUnZhMlZ1Ulhod2FYSmxaQzVqWVc1alpXd29LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmhaR1JCWTJObGMzTlViMnRsYmtWNGNHbHlhVzVuS0dOaUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmpZMlZ6YzFSdmEyVnVSWGh3YVhKcGJtY3VZV1JrU0dGdVpHeGxjaWhqWWlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsYlc5MlpVRmpZMlZ6YzFSdmEyVnVSWGh3YVhKcGJtY29ZMklwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOalpYTnpWRzlyWlc1RmVIQnBjbWx1Wnk1eVpXMXZkbVZJWVc1a2JHVnlLR05pS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JoWkdSQlkyTmxjM05VYjJ0bGJrVjRjR2x5WldRb1kySXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV05qWlhOelZHOXJaVzVGZUhCcGNtVmtMbUZrWkVoaGJtUnNaWElvWTJJcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlcxdmRtVkJZMk5sYzNOVWIydGxia1Y0Y0dseVpXUW9ZMklwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOalpYTnpWRzlyWlc1RmVIQnBjbVZrTG5KbGJXOTJaVWhoYm1Sc1pYSW9ZMklwTzF4dUlDQWdJSDFjYm4xY2JseHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUM0dmMzSmpMMEZqWTJWemMxUnZhMlZ1UlhabGJuUnpMbXB6WEc0Z0tpb3ZJaXdpTHk4Z1EyOXdlWEpwWjJoMElDaGpLU0JDY205amF5QkJiR3hsYmlBbUlFUnZiV2x1YVdOcklFSmhhV1Z5TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVMeThnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUM0Z1UyVmxJRXhKUTBWT1UwVWdhVzRnZEdobElIQnliMnBsWTNRZ2NtOXZkQ0JtYjNJZ2JHbGpaVzV6WlNCcGJtWnZjbTFoZEdsdmJpNWNibHh1YVcxd2IzSjBJRXh2WnlCbWNtOXRJQ2N1TDB4dlp5YzdYRzVwYlhCdmNuUWdSMnh2WW1Gc0lHWnliMjBnSnk0dlIyeHZZbUZzSnp0Y2JtbHRjRzl5ZENCRmRtVnVkQ0JtY205dElDY3VMMFYyWlc1MEp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1ZHbHRaWElnWlhoMFpXNWtjeUJGZG1WdWRDQjdYRzVjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh1WVcxbExDQjBhVzFsY2lBOUlFZHNiMkpoYkM1MGFXMWxjaWtnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWh1WVcxbEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRHbHRaWElnUFNCMGFXMWxjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBibWwwS0dSMWNtRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTJGdVkyVnNLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR1IxY21GMGFXOXVJRHc5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSMWNtRjBhVzl1SUQwZ01UdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1JwYldWeVNHRnVaR3hsSUQwZ2RHaHBjeTVmZEdsdFpYSXVjMlYwVkdsdFpXOTFkQ2gwYUdsekxsOWpZV3hzWW1GamF5NWlhVzVrS0hSb2FYTXBMQ0JrZFhKaGRHbHZiaUFxSURFd01EQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTmhibU5sYkNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM1JwYldWeVNHRnVaR3hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTBhVzFsY2k1amJHVmhjbFJwYldWdmRYUW9kR2hwY3k1ZmRHbHRaWEpJWVc1a2JHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZEdsdFpYSklZVzVrYkdVZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnWDJOaGJHeGlZV05yS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MGFXMWxja2hoYm1Sc1pTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lITjFjR1Z5TG5KaGFYTmxLQ2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZWR2x0WlhJdWFuTmNiaUFxS2k4aUxDSXZMeUJEYjNCNWNtbG5hSFFnS0dNcElFSnliMk5ySUVGc2JHVnVJQ1lnUkc5dGFXNXBZMnNnUW1GcFpYSXVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdMaUJUWldVZ1RFbERSVTVUUlNCcGJpQjBhR1VnY0hKdmFtVmpkQ0J5YjI5MElHWnZjaUJzYVdObGJuTmxJR2x1Wm05eWJXRjBhVzl1TGx4dVhHNXBiWEJ2Y25RZ1RHOW5JR1p5YjIwZ0p5NHZURzluSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUlhabGJuUWdlMXh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYm1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXVZVzFsSUQwZ2JtRnRaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMkZzYkdKaFkydHpJRDBnVzEwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWVdSa1NHRnVaR3hsY2loallpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpZV3hzWW1GamEzTXVjSFZ6YUNoallpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVnRiM1psU0dGdVpHeGxjaWhqWWlrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYVdSNElEMGdkR2hwY3k1ZlkyRnNiR0poWTJ0ekxtWnBibVJKYm1SbGVDaHBkR1Z0SUQwK0lHbDBaVzBnUFQwOUlHTmlLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbGtlQ0ErUFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqWVd4c1ltRmphM011YzNCc2FXTmxLR2xrZUN3Z01TazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlZV2x6WlNndUxpNXdZWEpoYlhNcElIdGNiaUFnSUNBZ0lDQWdURzluTG1sdVptOG9YQ0pTWVdsemFXNW5JR1YyWlc1ME9pQmNJaUFySUhSb2FYTXVYMjVoYldVcE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmpZaUJ2WmlCMGFHbHpMbDlqWVd4c1ltRmphM01wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05pS0M0dUxuQmhjbUZ0Y3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5RmRtVnVkQzVxYzF4dUlDb3FMeUlzSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnUW5Kdlkyc2dRV3hzWlc0Z0ppQkViMjFwYm1samF5QkNZV2xsY2k0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaTh2SUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBdUlGTmxaU0JNU1VORlRsTkZJR2x1SUhSb1pTQndjbTlxWldOMElISnZiM1FnWm05eUlHeHBZMlZ1YzJVZ2FXNW1iM0p0WVhScGIyNHVYRzVjYm1sdGNHOXlkQ0JNYjJjZ1puSnZiU0FuTGk5TWIyY25PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlRhV3hsYm5SU1pXNWxkMU5sY25acFkyVWdlMXh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvZFhObGNrMWhibUZuWlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRYTmxjazFoYm1GblpYSWdQU0IxYzJWeVRXRnVZV2RsY2p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZFhObGNrMWhibUZuWlhJdVpYWmxiblJ6TG1Ga1pFRmpZMlZ6YzFSdmEyVnVSWGh3YVhKcGJtY29kR2hwY3k1ZmRHOXJaVzVGZUhCcGNtbHVaeTVpYVc1a0tIUm9hWE1wS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1gzUnZhMlZ1Ulhod2FYSnBibWNvS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaeTVwYm1adktGd2lVMmxzWlc1MFVtVnVaWGRUWlhKMmFXTmxJR0YxZEc5dFlYUnBZMkZzYkhrZ2NtVnVaWGRwYm1jZ1lXTmpaWE56SUhSdmEyVnVYQ0lwTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZFhObGNrMWhibUZuWlhJdWMybG5ibWx1VTJsc1pXNTBLQ2t1ZEdobGJpaDFjMlZ5SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NXBibVp2S0Z3aVUybHNaVzUwSUhSdmEyVnVJSEpsYm1WM1lXd2djM1ZqWTJWemMyWjFiRndpS1R0Y2JpQWdJQ0FnSUNBZ2ZTd2daWEp5SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dlp5NWxjbkp2Y2loY0lrVnljbTl5SUdaeWIyMGdjMmxuYm1sdVUybHNaVzUwT2x3aUxDQmxjbkl1YldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MWMyVnlUV0Z1WVdkbGNpNWxkbVZ1ZEhNdVgzSmhhWE5sVTJsc1pXNTBVbVZ1WlhkRmNuSnZjaWhsY25JcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOeVl5OVRhV3hsYm5SU1pXNWxkMU5sY25acFkyVXVhbk5jYmlBcUtpOGlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9vaWRjLWNsaWVudC9saWIvb2lkYy1jbGllbnQubWluLmpzXG4gKiogbW9kdWxlIGlkID0gMzcwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 371:
/***/ function(module, exports) {

	eval("module.exports = \"<h1>My Application</h1>\\r\\n<a (click)=\\\"login()\\\">Login</a>\\r\\n<nav>\\r\\n    <a [routerLink]=\\\"['/']\\\">home</a>\\r\\n    <a [routerLink]=\\\"['/secure']\\\">secure</a>\\r\\n</nav>\\r\\n<router-outlet></router-outlet>\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvYXBwLmNvbXBvbmVudC5odG1sP2ZiNWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzcxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxoMT5NeSBBcHBsaWNhdGlvbjwvaDE+XFxyXFxuPGEgKGNsaWNrKT1cXFwibG9naW4oKVxcXCI+TG9naW48L2E+XFxyXFxuPG5hdj5cXHJcXG4gICAgPGEgW3JvdXRlckxpbmtdPVxcXCJbJy8nXVxcXCI+aG9tZTwvYT5cXHJcXG4gICAgPGEgW3JvdXRlckxpbmtdPVxcXCJbJy9zZWN1cmUnXVxcXCI+c2VjdXJlPC9hPlxcclxcbjwvbmF2Plxcclxcbjxyb3V0ZXItb3V0bGV0Pjwvcm91dGVyLW91dGxldD5cIlxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9hcHAvYXBwLmNvbXBvbmVudC5odG1sXG4gKiogbW9kdWxlIGlkID0gMzcxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ }

});